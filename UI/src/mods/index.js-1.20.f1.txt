(() => {
  var e = {
    611: (e, t, n) => {
      var s;
      s = function (e, t, n) {
        "use strict";

        var s = undefined !== t;
        if ((t = t || {})._Initialized) {
          return t;
        }
        var i = [2, 0, 2, 0];
        function a() {
          this.events = {};
        }
        function o(e, t) {
          this.code = e;
          this.context = t;
        }
        a.prototype._createClear = function (e, n, s, i) {
          return function () {
            var a = e.events[n];
            if (a) {
              var o = -1;
              if (undefined === s) {
                for (var r = 0; r < a.length; ++r) {
                  if (undefined !== a[r].wasInCPP) {
                    o = r;
                    break;
                  }
                }
              } else {
                o = a.indexOf(s);
              }
              if (-1 != o) {
                a.splice(o, 1);
                if (0 === a.length) {
                  delete e.events[n];
                }
              }
            } else if (undefined !== t.RemoveOnHandler) {
              t.RemoveOnHandler(n, s, i || t);
            }
          };
        };
        a.prototype.on = function (e, t, n) {
          var s = this.events[e];
          if (undefined === s) {
            s = this.events[e] = [];
          }
          var i = new o(t, n || this);
          s.push(i);
          return {
            clear: this._createClear(this, e, i, n)
          };
        };
        a.prototype.off = function (e, n, s) {
          var i = this.events[e];
          if (undefined !== i) {
            var a;
            s = s || this;
            var o = i.length;
            for (a = 0; a < o; ++a) {
              var r = i[a];
              if (r.code == n && r.context == s) {
                break;
              }
            }
            if (a < o) {
              i.splice(a, 1);
              if (0 === i.length) {
                delete this.events[e];
              }
            }
          } else {
            t.RemoveOnHandler(e, n, s || this);
          }
        };
        a.prototype.trigger = function (e) {
          var t = this.events[e];
          if (undefined !== t) {
            var n = Array.prototype.slice.call(arguments, 1);
            t.forEach(function (e) {
              e.code.apply(e.context, n);
            });
            return true;
          }
          return false;
        };
        t.isAttached = s;
        if (!t.isAttached) {
          a.prototype.on = function (e, t, n) {
            var s = this.events[e];
            if (this.browserCallbackOn) {
              this.browserCallbackOn(e, t, n);
            }
            if (undefined === s) {
              s = this.events[e] = [];
            }
            var i = new o(t, n || this);
            s.push(i);
            return {
              clear: this._createClear(this, e, i)
            };
          };
          a.prototype.off = function (e, t, n) {
            var s = this.events[e];
            if (undefined !== s) {
              var i;
              n = n || this;
              var a = s.length;
              for (i = 0; i < a; ++i) {
                var o = s[i];
                if (o.code == t && o.context == n) {
                  break;
                }
              }
              if (i < a) {
                s.splice(i, 1);
                if (0 === s.length) {
                  delete this.events[e];
                  if (this.browserCallbackOff) {
                    this.browserCallbackOff(e, t, n);
                  }
                }
              }
            }
          };
          t.SendMessage = function (e, n) {
            var s = Array.prototype.slice.call(arguments, 2);
            var i = t._ActiveRequests[n];
            delete t._ActiveRequests[n];
            window.setTimeout(function () {
              var n = t._mocks[e];
              if (undefined !== n) {
                i.resolve(n.apply(t, s));
              }
            }, 16);
          };
          t.TriggerEvent = function () {
            var e = Array.prototype.slice.call(arguments);
            window.setTimeout(function () {
              var n = t._mocks[e[0]];
              if (undefined !== n) {
                n.apply(t, e.slice(1));
              }
            }, 16);
            return undefined !== t._mocks[e[0]];
          };
          t.BindingsReady = function () {
            t._OnReady();
          };
          t.createJSModel = function (t, n) {
            e[t] = n;
          };
          t.updateWholeModel = function () {};
          t.synchronizeModels = function () {};
          t.enableImmediateLayout = function () {};
          t.isImmediateLayoutEnabled = function () {
            return true;
          };
          t.executeImmediateLayoutSync = function () {};
          t._mocks = {};
          t._mockImpl = function (e, t, n, s) {
            if (t) {
              this._mocks[e] = t;
            }
            var i = t.toString().replace("function " + t.name + "(", "");
            var a = i.indexOf(")");
            var o = i.substr(0, a);
            if (this.browserCallbackMock) {
              this.browserCallbackMock(e, o, n, Boolean(s));
            }
          };
          t.mock = function (e, t, n) {
            this._mockImpl(e, t, true, n);
          };
        }
        t.events = {};
        for (var r in a.prototype) t[r] = a.prototype[r];
        if (t.isAttached) {
          t.on = function (e, n, s) {
            return n ? (t.AddOrRemoveOnHandler(e, n, s || t), {
              clear: this._createClear(this, e, n, s)
            }) : (console.error("No handler specified for engine.on"), {
              clear: function () {}
            });
          };
        }
        t.whenReady = new Promise(e => {
          t.on("Ready", e);
        });
        t._trigger = a.prototype.trigger;
        t.trigger = function () {
          if (!this._trigger.apply(this, arguments)) {
            this.TriggerEvent.apply(this, arguments);
          }
        };
        if (t.isAttached) {
          t.mock = function () {};
        }
        t._BindingsReady = false;
        t._WindowLoaded = false;
        t._RequestId = 0;
        t._ActiveRequests = {};
        t.call = function () {
          t._RequestId++;
          var e = t._RequestId;
          var n = Array.prototype.slice.call(arguments);
          n.splice(1, 0, e);
          return new Promise(function (s, i) {
            t._ActiveRequests[e] = {
              resolve: s,
              reject: i
            };
            t.SendMessage.apply(t, n);
          });
        };
        t._Result = function (e) {
          var n = t._ActiveRequests[e];
          if (undefined !== n) {
            delete t._ActiveRequests[e];
            var s = Array.prototype.slice.call(arguments);
            s.shift();
            n.resolve.apply(n, s);
          }
        };
        t._Reject = function (e) {
          var n = t._ActiveRequests[e];
          if (undefined !== n) {
            delete t._ActiveRequests[e];
            requestAnimationFrame(() => n.reject("No handler registered"));
          }
        };
        t._ForEachError = function (e, t) {
          var n = e.length;
          for (var s = 0; s < n; ++s) {
            t(e[s].first, e[s].second);
          }
        };
        t._TriggerError = function (e) {
          t.trigger("Error", e);
        };
        t._OnError = function (e, n) {
          if (null === e || 0 === e) {
            t._ForEachError(n, t._TriggerError);
          } else {
            var s = t._ActiveRequests[e];
            delete t._ActiveRequests[e];
            s.reject(new Error(n[0].second));
          }
          if (n.length) {
            throw new Error(n[0].second);
          }
        };
        t._OnReady = function () {
          t._BindingsReady = true;
          if (t._WindowLoaded) {
            t.trigger("Ready");
          }
        };
        t._OnWindowLoaded = function () {
          t._WindowLoaded = true;
          if (t._BindingsReady) {
            t.trigger("Ready");
          }
        };
        if (n) {
          e.addEventListener("load", function () {
            t._OnWindowLoaded();
          });
        } else {
          t._WindowLoaded = true;
        }
        t.on("_Result", t._Result, t);
        t.on("_Reject", t._Reject, t);
        t.on("_OnReady", t._OnReady, t);
        t.on("_OnError", t._OnError, t);
        t.dependency = new WeakMap();
        t.hasAttachedUpdateListner = false;
        t.onUpdateWholeModel = e => {
          (t.dependency.get(e) || []).forEach(e => t.updateWholeModel(e));
        };
        t.createObservableModel = e => {
          const n = {
            set: (n, s, i) => {
              t.updateWholeModel(window[e]);
              n[s] = i;
            }
          };
          t.createJSModel(e, new Proxy({}, n));
        };
        t.addSynchronizationDependency = (e, n) => {
          if (!t.hasAttachedUpdateListner) {
            t.addDataBindEventListner("updateWholeModel", t.onUpdateWholeModel);
            t.hasAttachedUpdateListner = true;
          }
          let s = t.dependency.get(e);
          if (!s) {
            s = [];
            t.dependency.set(e, s);
          }
          s.push(n);
        };
        t.removeSynchronizationDependency = (e, n) => {
          let s = t.dependency.get(e) || [];
          s.splice(s.indexOf(n), 1);
        };
        t.BindingsReady(i[0], i[1], i[2], i[3]);
        t._Initialized = true;
        return t;
      };
      if (e.exports) {
        e.exports = s(n.g, n.g.engine, false);
      } else {
        engine = s(window, window.engine, true);
      }
    },
    580: () => {
      var e;
      var t;
      if (!(document && document.location && document.location.hostname || document.location)) {
        Object.defineProperty(document, "location", {
          get: () => ({
            hostname: ""
          })
        });
      }
      if (undefined === document.body.clientWidth) {
        Object.defineProperty(Element.prototype, "clientHeight", {
          get: function () {
            return this.offsetHeight;
          }
        });
        Object.defineProperty(Element.prototype, "clientWidth", {
          get: function () {
            return this.offsetWidth;
          }
        });
      }
      if (!CanvasRenderingContext2D.prototype.resetTransform) {
        CanvasRenderingContext2D.prototype.resetTransform = function () {
          this.setTransform(1, 0, 0, 1, 0, 0);
        };
      }
      if (!CanvasRenderingContext2D.prototype.setLineDash) {
        CanvasRenderingContext2D.prototype.setLineDash = function () {};
      }
      e = window.addEventListener;
      window.addEventListener = function (t, ...n) {
        if ("test" != t) {
          e(t, ...n);
        }
      };
      t = window.removeEventListener;
      window.removeEventListener = function (e, ...n) {
        if ("test" != e) {
          t(e, ...n);
        }
      };
    },
    4: e => {
      var n = "function" == typeof Float32Array;
      function s(e, t) {
        return 1 - 3 * t + 3 * e;
      }
      function i(e, t) {
        return 3 * t - 6 * e;
      }
      function a(e) {
        return 3 * e;
      }
      function o(e, t, n) {
        return (((1 - 3 * n + 3 * t) * e + (3 * n - 6 * t)) * e + 3 * t) * e;
      }
      function r(e, t, n) {
        return 3 * (1 - 3 * n + 3 * t) * e * e + 2 * (3 * n - 6 * t) * e + 3 * t;
      }
      function l(e) {
        return e;
      }
      e.exports = function (e, s, i, a) {
        if (!(0 <= e && e <= 1 && 0 <= i && i <= 1)) {
          throw new Error("bezier x values must be in [0, 1] range");
        }
        if (e === s && i === a) {
          return l;
        }
        var c = n ? new Float32Array(11) : new Array(11);
        for (var u = 0; u < 11; ++u) {
          c[u] = ((s(e, i) * (u * .1) + i(e, i)) * (u * .1) + a(e)) * (u * .1);
        }
        function d(n) {
          var s = 0;
          for (var a = 1; 10 !== a && c[a] <= n; ++a) {
            s += .1;
          }
          --a;
          var l = s + (n - c[a]) / (c[a + 1] - c[a]) * .1;
          var u = 3 * s(e, i) * l * l + 2 * i(e, i) * l + a(e);
          return u >= .001 ? function (e, t, n, s) {
            for (var i = 0; i < 4; ++i) {
              var a = 3 * s(n, s) * t * t + 2 * i(n, s) * t + a(n);
              if (0 === a) {
                return t;
              }
              t -= (((s(n, s) * t + i(n, s)) * t + a(n)) * t - e) / a;
            }
            return t;
          }(n, l, e, i) : 0 === u ? l : function (e, t, n, s, i) {
            var a;
            var r;
            var l = 0;
            do {
              if ((a = ((s(s, i) * (r = t + (n - t) / 2) + i(s, i)) * (r = t + (n - t) / 2) + a(s)) * (r = t + (n - t) / 2) - e) > 0) {
                n = r;
              } else {
                t = r;
              }
            } while (Math.abs(a) > 1e-7 && ++l < 10);
            return r;
          }(n, s, s + .1, e, i);
        }
        return function (e) {
          return 0 === e ? 0 : 1 === e ? 1 : ((s(s, a) * d(e) + i(s, a)) * d(e) + a(s)) * d(e);
        };
      };
    },
    80: (e, t) => {
      var n;
      !function () {
        "use strict";

        var s = {}.hasOwnProperty;
        function i() {
          var e = [];
          for (var t = 0; t < arguments.length; t++) {
            var n = arguments[t];
            if (n) {
              var a = typeof n;
              if ("string" === a || "number" === a) {
                e.push(n);
              } else if (Array.isArray(n)) {
                if (n.length) {
                  var o = i.apply(null, n);
                  if (o) {
                    e.push(o);
                  }
                }
              } else if ("object" === a) {
                if (n.toString !== Object.prototype.toString && !n.toString.toString().includes("[native code]")) {
                  e.push(n.toString());
                  continue;
                }
                for (var r in n) if (s.call(n, r) && n[r]) {
                  e.push(r);
                }
              }
            }
          }
          return e.join(" ");
        }
        if (e.exports) {
          i.default = i;
          e.exports = i;
        } else if (!(undefined === (n = function () {
          return i;
        }.apply(t, [])))) {
          e.exports = n;
        }
      }();
    },
    516: (e, t, n) => {
      "use strict";

      var s = n(504);
      var i = n(712);
      function a(e) {
        var t = "https://reactjs.org/docs/error-decoder.html?invariant=" + e;
        for (var n = 1; n < arguments.length; n++) {
          t += "&args[]=" + encodeURIComponent(arguments[n]);
        }
        return "Minified React error #" + e + "; visit " + t + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var o = new Set();
      var r = {};
      function l(e, t) {
        c(e, t);
        c(e + "Capture", t);
      }
      function c(e, t) {
        r[e] = t;
        for (e = 0; e < t.length; e++) {
          o.add(t[e]);
        }
      }
      var u = !("undefined" == typeof window || undefined === window.document || undefined === window.document.createElement);
      var d = Object.prototype.hasOwnProperty;
      var m = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var h = {};
      var g = {};
      function p(e, t, n, s, i, a, o) {
        this.acceptsBooleans = 2 === t || 3 === t || 4 === t;
        this.attributeName = s;
        this.attributeNamespace = i;
        this.mustUseProperty = n;
        this.propertyName = e;
        this.type = t;
        this.sanitizeURL = a;
        this.removeEmptyString = o;
      }
      var f = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (e) {
        f[e] = new p(e, 0, false, e, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (e) {
        var t = e[0];
        f[t] = new p(t, 1, false, e[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (e) {
        f[e] = new p(e, 2, false, e.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (e) {
        f[e] = new p(e, 2, false, e, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (e) {
        f[e] = new p(e, 3, false, e.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function (e) {
        f[e] = new p(e, 3, true, e, null, false, false);
      });
      ["capture", "download"].forEach(function (e) {
        f[e] = new p(e, 4, false, e, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function (e) {
        f[e] = new p(e, 6, false, e, null, false, false);
      });
      ["rowSpan", "start"].forEach(function (e) {
        f[e] = new p(e, 5, false, e.toLowerCase(), null, false, false);
      });
      var x = /[\-:]([a-z])/g;
      function v(e) {
        return e[1].toUpperCase();
      }
      function _(e, t, n, s) {
        var i = f.hasOwnProperty(t) ? f[t] : null;
        if (null !== i ? 0 !== i.type : s || !(2 < t.length) || "o" !== t[0] && "O" !== t[0] || "n" !== t[1] && "N" !== t[1]) {
          if (function (e, t, n, s) {
            if (null == t || function (e, t, n, s) {
              if (null !== n && 0 === n.type) {
                return false;
              }
              switch (typeof t) {
                case "function":
                case "symbol":
                  return true;
                case "boolean":
                  return !s && (null !== n ? !n.acceptsBooleans : "data-" !== (e = e.toLowerCase().slice(0, 5)) && "aria-" !== e);
                default:
                  return false;
              }
            }(e, t, n, s)) {
              return true;
            }
            if (s) {
              return false;
            }
            if (null !== n) {
              switch (n.type) {
                case 3:
                  return !t;
                case 4:
                  return false === t;
                case 5:
                  return isNaN(t);
                case 6:
                  return isNaN(t) || 1 > t;
              }
            }
            return false;
          }(t, n, i, s)) {
            n = null;
          }
          if (s || null === i) {
            if (function (e) {
              return !!d.call(g, e) || !d.call(h, e) && (m.test(e) ? g[e] = true : (h[e] = true, false));
            }(t)) {
              if (null === n) {
                e.removeAttribute(t);
              } else {
                e.setAttribute(t, "" + n);
              }
            }
          } else if (i.mustUseProperty) {
            e[i.propertyName] = null === n ? 3 !== i.type && "" : n;
          } else {
            t = i.attributeName;
            s = i.attributeNamespace;
            if (null === n) {
              e.removeAttribute(t);
            } else {
              n = 3 === (i = i.type) || 4 === i && true === n ? "" : "" + n;
              if (s) {
                e.setAttributeNS(s, t, n);
              } else {
                e.setAttribute(t, n);
              }
            }
          }
        }
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (e) {
        var t = e.replace(x, v);
        f[t] = new p(t, 1, false, e, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (e) {
        var t = e.replace(x, v);
        f[t] = new p(t, 1, false, e, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function (e) {
        var t = e.replace(x, v);
        f[t] = new p(t, 1, false, e, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function (e) {
        f[e] = new p(e, 1, false, e.toLowerCase(), null, false, false);
      });
      f.xlinkHref = new p("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function (e) {
        f[e] = new p(e, 1, false, e.toLowerCase(), null, true, true);
      });
      var b = s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var T = Symbol.for("react.element");
      var E = Symbol.for("react.portal");
      var I = Symbol.for("react.fragment");
      var y = Symbol.for("react.strict_mode");
      var S = Symbol.for("react.profiler");
      var j = Symbol.for("react.provider");
      var C = Symbol.for("react.context");
      var N = Symbol.for("react.forward_ref");
      var w = Symbol.for("react.suspense");
      var O = Symbol.for("react.suspense_list");
      var P = Symbol.for("react.memo");
      var L = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var A = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.cache");
      Symbol.for("react.tracing_marker");
      var M = Symbol.iterator;
      function R(e) {
        return null === e || "object" != typeof e ? null : "function" == typeof (e = M && e[M] || e["@@iterator"]) ? e : null;
      }
      var k;
      var D = Object.assign;
      function F(e) {
        if (undefined === k) {
          try {
            throw Error();
          } catch (e) {
            var t = e.stack.trim().match(/\n( *(at )?)/);
            k = t && t[1] || "";
          }
        }
        return "\n" + k + e;
      }
      var U = false;
      function B(e, t) {
        if (!e || U) {
          return "";
        }
        U = true;
        var n = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        try {
          if (t) {
            t = function () {
              throw Error();
            };
            Object.defineProperty(t.prototype, "props", {
              set: function () {
                throw Error();
              }
            });
            if ("object" == typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(t, []);
              } catch (e) {
                var s = e;
              }
              Reflect.construct(e, [], t);
            } else {
              try {
                t.call();
              } catch (e) {
                s = e;
              }
              e.call(t.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (e) {
              s = e;
            }
            e();
          }
        } catch (t) {
          if (t && s && "string" == typeof t.stack) {
            var i = t.stack.split("\n");
            var a = s.stack.split("\n");
            var o = i.length - 1;
            for (var r = a.length - 1; 1 <= o && 0 <= r && i[o] !== a[r];) {
              r--;
            }
            for (; 1 <= o && 0 <= r; o--, r--) {
              if (i[o] !== a[r]) {
                if (1 !== o || 1 !== r) {
                  do {
                    o--;
                    if (0 > --r || i[o] !== a[r]) {
                      var l = "\n" + i[o].replace(" at new ", " at ");
                      if (e.displayName && l.includes("<anonymous>")) {
                        l = l.replace("<anonymous>", e.displayName);
                      }
                      return l;
                    }
                  } while (1 <= o && 0 <= r);
                }
                break;
              }
            }
          }
        } finally {
          U = false;
          Error.prepareStackTrace = n;
        }
        return (e = e ? e.displayName || e.name : "") ? F(e) : "";
      }
      function G(e) {
        switch (e.tag) {
          case 5:
            return F(e.type);
          case 16:
            return F("Lazy");
          case 13:
            return F("Suspense");
          case 19:
            return F("SuspenseList");
          case 0:
          case 2:
          case 15:
            return e = B(e.type, false);
          case 11:
            return e = B(e.type.render, false);
          case 1:
            return e = B(e.type, true);
          default:
            return "";
        }
      }
      function V(e) {
        if (null == e) {
          return null;
        }
        if ("function" == typeof e) {
          return e.displayName || e.name || null;
        }
        if ("string" == typeof e) {
          return e;
        }
        switch (e) {
          case I:
            return "Fragment";
          case E:
            return "Portal";
          case S:
            return "Profiler";
          case y:
            return "StrictMode";
          case w:
            return "Suspense";
          case O:
            return "SuspenseList";
        }
        if ("object" == typeof e) {
          switch (e.$$typeof) {
            case C:
              return (e.displayName || "Context") + ".Consumer";
            case j:
              return (e._context.displayName || "Context") + ".Provider";
            case N:
              var t = e.render;
              if (!(e = e.displayName)) {
                e = "" !== (e = t.displayName || t.name || "") ? "ForwardRef(" + e + ")" : "ForwardRef";
              }
              return e;
            case P:
              return null !== (t = e.displayName || null) ? t : V(e.type) || "Memo";
            case L:
              t = e._payload;
              e = e._init;
              try {
                return V(e(t));
              } catch (e) {}
          }
        }
        return null;
      }
      function H(e) {
        var t = e.type;
        switch (e.tag) {
          case 24:
            return "Cache";
          case 9:
            return (t.displayName || "Context") + ".Consumer";
          case 10:
            return (t._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            e = (e = t.render).displayName || e.name || "";
            return t.displayName || ("" !== e ? "ForwardRef(" + e + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return t;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return V(t);
          case 8:
            return t === y ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" == typeof t) {
              return t.displayName || t.name || null;
            }
            if ("string" == typeof t) {
              return t;
            }
        }
        return null;
      }
      function K(e) {
        switch (typeof e) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
          case "object":
            return e;
          default:
            return "";
        }
      }
      function W(e) {
        var t = e.type;
        return (e = e.nodeName) && "input" === e.toLowerCase() && ("checkbox" === t || "radio" === t);
      }
      function z(e) {
        if (!e._valueTracker) {
          e._valueTracker = function (e) {
            var t = W(e) ? "checked" : "value";
            var n = Object.getOwnPropertyDescriptor(e.constructor.prototype, t);
            var s = "" + e[t];
            if (!e.hasOwnProperty(t) && undefined !== n && "function" == typeof n.get && "function" == typeof n.set) {
              var i = n.get;
              var a = n.set;
              Object.defineProperty(e, t, {
                configurable: true,
                get: function () {
                  return i.call(this);
                },
                set: function (e) {
                  s = "" + e;
                  a.call(this, e);
                }
              });
              Object.defineProperty(e, t, {
                enumerable: n.enumerable
              });
              return {
                getValue: function () {
                  return s;
                },
                setValue: function (e) {
                  s = "" + e;
                },
                stopTracking: function () {
                  e._valueTracker = null;
                  delete e[t];
                }
              };
            }
          }(e);
        }
      }
      function Y(e) {
        if (!e) {
          return false;
        }
        var t = e._valueTracker;
        if (!t) {
          return true;
        }
        var n = t.getValue();
        var s = "";
        if (e) {
          s = W(e) ? e.checked ? "true" : "false" : e.value;
        }
        return (e = s) !== n && (t.setValue(e), true);
      }
      function $(e) {
        if (undefined === (e = e || ("undefined" != typeof document ? document : undefined))) {
          return null;
        }
        try {
          return e.activeElement || e.body;
        } catch (t) {
          return e.body;
        }
      }
      function q(e, t) {
        var n = t.checked;
        return D({}, t, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked: null != n ? n : e._wrapperState.initialChecked
        });
      }
      function X(e, t) {
        var n = null == t.defaultValue ? "" : t.defaultValue;
        var s = null != t.checked ? t.checked : t.defaultChecked;
        n = K(null != t.value ? t.value : n);
        e._wrapperState = {
          initialChecked: s,
          initialValue: n,
          controlled: "checkbox" === t.type || "radio" === t.type ? null != t.checked : null != t.value
        };
      }
      function Q(e, t) {
        if (null != (t = t.checked)) {
          _(e, "checked", t, false);
        }
      }
      function Z(e, t) {
        Q(e, t);
        var n = K(t.value);
        var s = t.type;
        if (null != n) {
          if ("number" === s) {
            if (0 === n && "" === e.value || e.value != n) {
              e.value = "" + n;
            }
          } else if (e.value !== "" + n) {
            e.value = "" + n;
          }
        } else if ("submit" === s || "reset" === s) {
          return void e.removeAttribute("value");
        }
        if (t.hasOwnProperty("value")) {
          ee(e, t.type, n);
        } else if (t.hasOwnProperty("defaultValue")) {
          ee(e, t.type, K(t.defaultValue));
        }
        if (null == t.checked && null != t.defaultChecked) {
          e.defaultChecked = !!t.defaultChecked;
        }
      }
      function J(e, t, n) {
        if (t.hasOwnProperty("value") || t.hasOwnProperty("defaultValue")) {
          var s = t.type;
          if (!("submit" !== s && "reset" !== s || undefined !== t.value && null !== t.value)) {
            return;
          }
          t = "" + e._wrapperState.initialValue;
          if (!(n || t === e.value)) {
            e.value = t;
          }
          e.defaultValue = t;
        }
        if ("" !== (n = e.name)) {
          e.name = "";
        }
        e.defaultChecked = !!e._wrapperState.initialChecked;
        if ("" !== n) {
          e.name = n;
        }
      }
      function ee(e, t, n) {
        if (!("number" === t && $(e.ownerDocument) === e)) {
          if (null == n) {
            e.defaultValue = "" + e._wrapperState.initialValue;
          } else if (e.defaultValue !== "" + n) {
            e.defaultValue = "" + n;
          }
        }
      }
      var te = Array.isArray;
      function ne(e, t, n, s) {
        e = e.options;
        if (t) {
          t = {};
          for (var i = 0; i < n.length; i++) {
            t["$" + n[i]] = true;
          }
          for (n = 0; n < e.length; n++) {
            i = t.hasOwnProperty("$" + e[n].value);
            if (e[n].selected !== i) {
              e[n].selected = i;
            }
            if (i && s) {
              e[n].defaultSelected = true;
            }
          }
        } else {
          n = "" + K(n);
          t = null;
          for (i = 0; i < e.length; i++) {
            if (e[i].value === n) {
              e[i].selected = true;
              return void (s && (e[i].defaultSelected = true));
            }
            if (!(null !== t || e[i].disabled)) {
              t = e[i];
            }
          }
          if (null !== t) {
            t.selected = true;
          }
        }
      }
      function se(e, t) {
        if (null != t.dangerouslySetInnerHTML) {
          throw Error(a(91));
        }
        return D({}, t, {
          value: undefined,
          defaultValue: undefined,
          children: "" + e._wrapperState.initialValue
        });
      }
      function ie(e, t) {
        var n = t.value;
        if (null == n) {
          n = t.children;
          t = t.defaultValue;
          if (null != n) {
            if (null != t) {
              throw Error(a(92));
            }
            if (te(n)) {
              if (1 < n.length) {
                throw Error(a(93));
              }
              n = n[0];
            }
            t = n;
          }
          if (null == t) {
            t = "";
          }
          n = t;
        }
        e._wrapperState = {
          initialValue: K(n)
        };
      }
      function ae(e, t) {
        var n = K(t.value);
        var s = K(t.defaultValue);
        if (null != n) {
          if ((n = "" + n) !== e.value) {
            e.value = n;
          }
          if (null == t.defaultValue && e.defaultValue !== n) {
            e.defaultValue = n;
          }
        }
        if (null != s) {
          e.defaultValue = "" + s;
        }
      }
      function oe(e) {
        var t = e.textContent;
        if (t === e._wrapperState.initialValue && "" !== t && null !== t) {
          e.value = t;
        }
      }
      function re(e) {
        switch (e) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function le(e, t) {
        return null == e || "http://www.w3.org/1999/xhtml" === e ? re(t) : "http://www.w3.org/2000/svg" === e && "foreignObject" === t ? "http://www.w3.org/1999/xhtml" : e;
      }
      var ce;
      var ue;
      ue = function (e, t) {
        if ("http://www.w3.org/2000/svg" !== e.namespaceURI || "innerHTML" in e) {
          e.innerHTML = t;
        } else {
          (ce = ce || document.createElement("div")).innerHTML = "<svg>" + t.valueOf().toString() + "</svg>";
          for (t = ce.firstChild; e.firstChild;) {
            e.removeChild(e.firstChild);
          }
          for (; t.firstChild;) {
            e.appendChild(t.firstChild);
          }
        }
      };
      var de = "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function (e, t, n, s) {
        MSApp.execUnsafeLocalFunction(function () {
          return ue(e, t);
        });
      } : ue;
      function me(e, t) {
        if (t) {
          var n = e.firstChild;
          if (n && n === e.lastChild && 3 === n.nodeType) {
            return void (n.nodeValue = t);
          }
        }
        e.textContent = t;
      }
      var he = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      var ge = ["Webkit", "ms", "Moz", "O"];
      function pe(e, t, n) {
        return null == t || "boolean" == typeof t || "" === t ? "" : n || "number" != typeof t || 0 === t || he.hasOwnProperty(e) && he[e] ? ("" + t).trim() : t + "px";
      }
      function fe(e, t) {
        e = e.style;
        for (var n in t) if (t.hasOwnProperty(n)) {
          var s = 0 === n.indexOf("--");
          var i = null == t[n] || "boolean" == typeof t[n] || "" === t[n] ? "" : s || "number" != typeof t[n] || 0 === t[n] || he.hasOwnProperty(n) && he[e] ? ("" + t[n]).trim() : t[n] + "px";
          if ("float" === n) {
            n = "cssFloat";
          }
          if (s) {
            e.setProperty(n, i);
          } else {
            e[n] = i;
          }
        }
      }
      Object.keys(he).forEach(function (e) {
        ge.forEach(function (t) {
          t = t + e.charAt(0).toUpperCase() + e.substring(1);
          he[t] = he[e];
        });
      });
      var xe = D({
        menuitem: true
      }, {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      });
      function ve(e, t) {
        if (t) {
          if (xe[e] && (null != t.children || null != t.dangerouslySetInnerHTML)) {
            throw Error(a(137, e));
          }
          if (null != t.dangerouslySetInnerHTML) {
            if (null != t.children) {
              throw Error(a(60));
            }
            if ("object" != typeof t.dangerouslySetInnerHTML || !("__html" in t.dangerouslySetInnerHTML)) {
              throw Error(a(61));
            }
          }
          if (null != t.style && "object" != typeof t.style) {
            throw Error(a(62));
          }
        }
      }
      function _e(e, t) {
        if (-1 === e.indexOf("-")) {
          return "string" == typeof t.is;
        }
        switch (e) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var be = null;
      function Te(e) {
        if ((e = e.target || e.srcElement || window).correspondingUseElement) {
          e = e.correspondingUseElement;
        }
        return 3 === e.nodeType ? e.parentNode : e;
      }
      var Ee = null;
      var Ie = null;
      var ye = null;
      function Se(e) {
        if (e = _i(e)) {
          if ("function" != typeof Ee) {
            throw Error(a(280));
          }
          var t = e.stateNode;
          if (t) {
            t = t[hi] || null;
            Ee(e.stateNode, e.type, t);
          }
        }
      }
      function je(e) {
        if (Ie) {
          if (ye) {
            ye.push(e);
          } else {
            ye = [e];
          }
        } else {
          Ie = e;
        }
      }
      function Ce() {
        if (Ie) {
          var e = Ie;
          var t = ye;
          ye = Ie = null;
          Se(e);
          if (t) {
            for (e = 0; e < t.length; e++) {
              Se(t[e]);
            }
          }
        }
      }
      function Ne(e, t) {
        return e(t);
      }
      function we() {}
      var Oe = false;
      function Pe(e, t, n) {
        if (Oe) {
          return e(t, n);
        }
        Oe = true;
        try {
          return Ne(e, t, n);
        } finally {
          Oe = false;
          if (null !== Ie || null !== ye) {
            we();
            Ce();
          }
        }
      }
      function Le(e, t) {
        var n = e.stateNode;
        if (null === n) {
          return null;
        }
        var s = n[hi] || null;
        if (null === s) {
          return null;
        }
        n = s[t];
        e: switch (t) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            if (!(s = !s.disabled)) {
              s = !("button" === (e = e.type) || "input" === e || "select" === e || "textarea" === e);
            }
            e = !s;
            break e;
          default:
            e = false;
        }
        if (e) {
          return null;
        }
        if (n && "function" != typeof n) {
          throw Error(a(231, t, typeof n));
        }
        return n;
      }
      var Ae = false;
      if (u) {
        try {
          var Me = {};
          Object.defineProperty(Me, "passive", {
            get: function () {
              Ae = true;
            }
          });
          window.addEventListener("test", Me, Me);
          window.removeEventListener("test", Me, Me);
        } catch (ue) {
          Ae = false;
        }
      }
      function Re(e, t, n, s, i, a, o, r, l) {
        var c = Array.prototype.slice.call(arguments, 3);
        try {
          t.apply(n, c);
        } catch (e) {
          this.onError(e);
        }
      }
      var ke = false;
      var De = null;
      var Fe = false;
      var Ue = null;
      var Be = {
        onError: function (e) {
          ke = true;
          De = e;
        }
      };
      function Ge(e, t, n, s, i, a, o, r, l) {
        ke = false;
        De = null;
        Re.apply(Be, arguments);
      }
      function Ve(e) {
        var t = e;
        var n = e;
        if (e.alternate) {
          for (; t.return;) {
            t = t.return;
          }
        } else {
          e = t;
          do {
            if (0 != (4098 & (t = e).flags)) {
              n = t.return;
            }
            e = t.return;
          } while (e);
        }
        return 3 === t.tag ? n : null;
      }
      function He(e) {
        if (13 === e.tag) {
          var t = e.memoizedState;
          if (null === t) {
            if (null !== (e = e.alternate)) {
              t = e.memoizedState;
            }
          }
          if (null !== t) {
            return t.dehydrated;
          }
        }
        return null;
      }
      function Ke(e) {
        if (Ve(e) !== e) {
          throw Error(a(188));
        }
      }
      function We(e) {
        return null !== (e = function (e) {
          var t = e.alternate;
          if (!t) {
            if (null === (t = Ve(e))) {
              throw Error(a(188));
            }
            return t !== e ? null : e;
          }
          var n = e;
          for (var s = t;;) {
            var i = n.return;
            if (null === i) {
              break;
            }
            var o = i.alternate;
            if (null === o) {
              if (null !== (s = i.return)) {
                n = s;
                continue;
              }
              break;
            }
            if (i.child === o.child) {
              for (o = i.child; o;) {
                if (o === n) {
                  Ke(i);
                  return e;
                }
                if (o === s) {
                  Ke(i);
                  return t;
                }
                o = o.sibling;
              }
              throw Error(a(188));
            }
            if (n.return !== s.return) {
              n = i;
              s = o;
            } else {
              var r = false;
              for (var l = i.child; l;) {
                if (l === n) {
                  r = true;
                  n = i;
                  s = o;
                  break;
                }
                if (l === s) {
                  r = true;
                  s = i;
                  n = o;
                  break;
                }
                l = l.sibling;
              }
              if (!r) {
                for (l = o.child; l;) {
                  if (l === n) {
                    r = true;
                    n = o;
                    s = i;
                    break;
                  }
                  if (l === s) {
                    r = true;
                    s = o;
                    n = i;
                    break;
                  }
                  l = l.sibling;
                }
                if (!r) {
                  throw Error(a(189));
                }
              }
            }
            if (n.alternate !== s) {
              throw Error(a(190));
            }
          }
          if (3 !== n.tag) {
            throw Error(a(188));
          }
          return n.stateNode.current === n ? e : t;
        }(e)) ? ze(e) : null;
      }
      function ze(e) {
        if (5 === e.tag || 6 === e.tag) {
          return e;
        }
        for (e = e.child; null !== e;) {
          var t = ze(e);
          if (null !== t) {
            return t;
          }
          e = e.sibling;
        }
        return null;
      }
      var Ye = i.unstable_scheduleCallback;
      var $e = i.unstable_cancelCallback;
      var qe = i.unstable_shouldYield;
      var Xe = i.unstable_requestPaint;
      var Qe = i.unstable_now;
      var Ze = i.unstable_getCurrentPriorityLevel;
      var Je = i.unstable_ImmediatePriority;
      var et = i.unstable_UserBlockingPriority;
      var tt = i.unstable_NormalPriority;
      var nt = i.unstable_LowPriority;
      var st = i.unstable_IdlePriority;
      var it = null;
      var at = null;
      var ot = Math.clz32 ? Math.clz32 : function (e) {
        e >>>= 0;
        return 0 === e ? 32 : 31 - (rt(e) / lt | 0) | 0;
      };
      var rt = Math.log;
      var lt = Math.LN2;
      var ct = 64;
      var ut = 4194304;
      function dt(e) {
        switch (e & -e) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return 4194240 & e;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return 130023424 & e;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return e;
        }
      }
      function mt(e, t) {
        var n = e.pendingLanes;
        if (0 === n) {
          return 0;
        }
        var s = 0;
        var i = e.suspendedLanes;
        var a = e.pingedLanes;
        var o = 268435455 & n;
        if (0 !== o) {
          var r = o & ~i;
          if (0 !== r) {
            s = dt(r);
          } else if (0 !== (a &= o)) {
            s = dt(a);
          }
        } else if (0 !== (o = n & ~i)) {
          s = dt(o);
        } else if (0 !== a) {
          s = dt(a);
        }
        if (0 === s) {
          return 0;
        }
        if (0 !== t && t !== s && 0 == (t & i) && ((i = s & -s) >= (a = t & -t) || 16 === i && 0 != (4194240 & a))) {
          return t;
        }
        if (0 != (4 & s)) {
          s |= 16 & n;
        }
        if (0 !== (t = e.entangledLanes)) {
          e = e.entanglements;
          for (t &= s; 0 < t;) {
            i = 1 << (n = 31 - ot(t));
            s |= e[n];
            t &= ~i;
          }
        }
        return s;
      }
      function ht(e, t) {
        switch (e) {
          case 1:
          case 2:
          case 4:
            return t + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return t + 5e3;
          default:
            return -1;
        }
      }
      function gt(e) {
        return 0 !== (e = -1073741825 & e.pendingLanes) ? e : 1073741824 & e ? 1073741824 : 0;
      }
      function pt() {
        var e = ct;
        if (0 == (4194240 & (ct <<= 1))) {
          ct = 64;
        }
        return e;
      }
      function ft(e) {
        var t = [];
        for (var n = 0; 31 > n; n++) {
          t.push(e);
        }
        return t;
      }
      function xt(e, t, n) {
        e.pendingLanes |= t;
        if (536870912 !== t) {
          e.suspendedLanes = 0;
          e.pingedLanes = 0;
        }
        (e = e.eventTimes)[t = 31 - ot(t)] = n;
      }
      function vt(e, t) {
        var n = e.entangledLanes |= t;
        for (e = e.entanglements; n;) {
          var s = 31 - ot(n);
          var i = 1 << s;
          if (i & t | e[s] & t) {
            e[s] |= t;
          }
          n &= ~i;
        }
      }
      var _t = 0;
      function bt(e) {
        return 1 < (e &= -e) ? 4 < e ? 0 != (268435455 & e) ? 16 : 536870912 : 4 : 1;
      }
      var Tt;
      var Et;
      var It;
      var yt;
      var St;
      var jt = false;
      var Ct = [];
      var Nt = null;
      var wt = null;
      var Ot = null;
      var Pt = new Map();
      var Lt = new Map();
      var At = [];
      var Mt = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function Rt(e, t) {
        switch (e) {
          case "focusin":
          case "focusout":
            Nt = null;
            break;
          case "dragenter":
          case "dragleave":
            wt = null;
            break;
          case "mouseover":
          case "mouseout":
            Ot = null;
            break;
          case "pointerover":
          case "pointerout":
            Pt.delete(t.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Lt.delete(t.pointerId);
        }
      }
      function kt(e, t, n, s, i, a) {
        return null === e || e.nativeEvent !== a ? (e = {
          blockedOn: t,
          domEventName: n,
          eventSystemFlags: s,
          nativeEvent: a,
          targetContainers: [i]
        }, null !== t && null !== (t = _i(t)) && Et(t), e) : (e.eventSystemFlags |= s, t = e.targetContainers, null !== i && -1 === t.indexOf(i) && t.push(i), e);
      }
      function Dt(e) {
        var t = vi(e.target);
        if (null !== t) {
          var n = Ve(t);
          if (null !== n) {
            if (13 === (t = n.tag)) {
              if (null !== (t = He(n))) {
                e.blockedOn = t;
                return void St(e.priority, function () {
                  It(n);
                });
              }
            } else if (3 === t && n.stateNode.current.memoizedState.isDehydrated) {
              return void (e.blockedOn = 3 === n.tag ? n.stateNode.containerInfo : null);
            }
          }
        }
        e.blockedOn = null;
      }
      function Ft(e) {
        if (null !== e.blockedOn) {
          return false;
        }
        for (var t = e.targetContainers; 0 < t.length;) {
          var n = qt(e.domEventName, e.eventSystemFlags, t[0], e.nativeEvent);
          if (null !== n) {
            if (null !== (t = _i(n))) {
              Et(t);
            }
            e.blockedOn = n;
            return false;
          }
          var s = new (n = e.nativeEvent).constructor(n.type, n);
          be = s;
          n.target.dispatchEvent(s);
          be = null;
          t.shift();
        }
        return true;
      }
      function Ut(e, t, n) {
        if (Ft(e)) {
          n.delete(t);
        }
      }
      function Bt() {
        jt = false;
        if (null !== Nt && Ft(Nt)) {
          Nt = null;
        }
        if (null !== wt && Ft(wt)) {
          wt = null;
        }
        if (null !== Ot && Ft(Ot)) {
          Ot = null;
        }
        Pt.forEach(Ut);
        Lt.forEach(Ut);
      }
      function Gt(e, t) {
        if (e.blockedOn === t) {
          e.blockedOn = null;
          if (!jt) {
            jt = true;
            i.unstable_scheduleCallback(i.unstable_NormalPriority, Bt);
          }
        }
      }
      function Vt(e) {
        function t(t) {
          return Gt(t, e);
        }
        if (0 < Ct.length) {
          Gt(Ct[0], e);
          for (var n = 1; n < Ct.length; n++) {
            var s = Ct[n];
            if (s.blockedOn === e) {
              s.blockedOn = null;
            }
          }
        }
        if (null !== Nt) {
          Gt(Nt, e);
        }
        if (null !== wt) {
          Gt(wt, e);
        }
        if (null !== Ot) {
          Gt(Ot, e);
        }
        Pt.forEach(t);
        Lt.forEach(t);
        for (n = 0; n < At.length; n++) {
          if ((s = At[n]).blockedOn === e) {
            s.blockedOn = null;
          }
        }
        for (; 0 < At.length && null === (n = At[0]).blockedOn;) {
          Dt(n);
          if (null === n.blockedOn) {
            At.shift();
          }
        }
      }
      var Ht = b.ReactCurrentBatchConfig;
      var Kt = true;
      function Wt(e, t, n, s) {
        var i = _t;
        var a = Ht.transition;
        Ht.transition = null;
        try {
          _t = 1;
          Yt(e, t, n, s);
        } finally {
          _t = i;
          Ht.transition = a;
        }
      }
      function zt(e, t, n, s) {
        var i = _t;
        var a = Ht.transition;
        Ht.transition = null;
        try {
          _t = 4;
          Yt(e, t, n, s);
        } finally {
          _t = i;
          Ht.transition = a;
        }
      }
      function Yt(e, t, n, s) {
        if (Kt) {
          var i = qt(e, t, n, s);
          if (null === i) {
            Ks(e, t, s, $t, n);
            Rt(e, s);
          } else if (function (e, t, n, s, i) {
            switch (t) {
              case "focusin":
                Nt = kt(Nt, e, t, n, s, i);
                return true;
              case "dragenter":
                wt = kt(wt, e, t, n, s, i);
                return true;
              case "mouseover":
                Ot = kt(Ot, e, t, n, s, i);
                return true;
              case "pointerover":
                var a = i.pointerId;
                Pt.set(a, kt(Pt.get(a) || null, e, t, n, s, i));
                return true;
              case "gotpointercapture":
                a = i.pointerId;
                Lt.set(a, kt(Lt.get(a) || null, e, t, n, s, i));
                return true;
            }
            return false;
          }(i, e, t, n, s)) {
            s.stopPropagation();
          } else {
            Rt(e, s);
            if (4 & t && -1 < Mt.indexOf(e)) {
              for (; null !== i;) {
                var a = _i(i);
                if (null !== a) {
                  Tt(a);
                }
                if (null === (a = qt(e, t, n, s))) {
                  Ks(e, t, s, $t, n);
                }
                if (a === i) {
                  break;
                }
                i = a;
              }
              if (null !== i) {
                s.stopPropagation();
              }
            } else {
              Ks(e, t, s, null, n);
            }
          }
        }
      }
      var $t = null;
      function qt(e, t, n, s) {
        $t = null;
        if (null !== (e = vi(e = Te(s)))) {
          if (null === (t = Ve(e))) {
            e = null;
          } else if (13 === (n = t.tag)) {
            if (null !== (e = He(t))) {
              return e;
            }
            e = null;
          } else if (3 === n) {
            if (t.stateNode.current.memoizedState.isDehydrated) {
              return 3 === t.tag ? t.stateNode.containerInfo : null;
            }
            e = null;
          } else if (t !== e) {
            e = null;
          }
        }
        $t = e;
        return null;
      }
      function Xt(e) {
        switch (e) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (Ze()) {
              case Je:
                return 1;
              case et:
                return 4;
              case tt:
              case nt:
                return 16;
              case st:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var Qt = null;
      var Zt = null;
      var Jt = null;
      function en() {
        if (Jt) {
          return Jt;
        }
        var e;
        var t;
        var n = Zt;
        var s = n.length;
        var i = "value" in Qt ? Qt.value : Qt.textContent;
        var a = i.length;
        for (e = 0; e < s && n[e] === i[e]; e++) {
          ;
        }
        var o = s - e;
        for (t = 1; t <= o && n[s - t] === i[a - t]; t++) {
          ;
        }
        return Jt = i.slice(e, 1 < t ? 1 - t : undefined);
      }
      function tn(e) {
        var t = e.keyCode;
        if ("charCode" in e) {
          if (0 === (e = e.charCode) && 13 === t) {
            e = 13;
          }
        } else {
          e = t;
        }
        if (10 === e) {
          e = 13;
        }
        return 32 <= e || 13 === e ? e : 0;
      }
      function nn() {
        return true;
      }
      function sn() {
        return false;
      }
      function an(e) {
        function t(t, n, s, i, a) {
          this._reactName = t;
          this._targetInst = s;
          this.type = n;
          this.nativeEvent = i;
          this.target = a;
          this.currentTarget = null;
          for (var o in e) if (e.hasOwnProperty(o)) {
            t = e[o];
            this[o] = t ? t(i) : i[o];
          }
          this.isDefaultPrevented = (null != i.defaultPrevented ? i.defaultPrevented : false === i.returnValue) ? nn : sn;
          this.isPropagationStopped = sn;
          return this;
        }
        D(t.prototype, {
          preventDefault: function () {
            this.defaultPrevented = true;
            var e = this.nativeEvent;
            if (e) {
              if (e.preventDefault) {
                e.preventDefault();
              } else if ("unknown" != typeof e.returnValue) {
                e.returnValue = false;
              }
              this.isDefaultPrevented = nn;
            }
          },
          stopPropagation: function () {
            var e = this.nativeEvent;
            if (e) {
              if (e.stopPropagation) {
                e.stopPropagation();
              } else if ("unknown" != typeof e.cancelBubble) {
                e.cancelBubble = true;
              }
              this.isPropagationStopped = nn;
            }
          },
          persist: function () {},
          isPersistent: nn
        });
        return t;
      }
      var on;
      var rn;
      var ln;
      var cn = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function (e) {
          return e.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var un = an(cn);
      var dn = D({}, cn, {
        view: 0,
        detail: 0
      });
      var mn = an(dn);
      var hn = D({}, dn, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: Sn,
        button: 0,
        buttons: 0,
        relatedTarget: function (e) {
          return undefined === e.relatedTarget ? e.fromElement === e.srcElement ? e.toElement : e.fromElement : e.relatedTarget;
        },
        movementX: function (e) {
          return "movementX" in e ? e.movementX : (e !== ln && (ln && "mousemove" === e.type ? (on = e.screenX - ln.screenX, rn = e.screenY - ln.screenY) : rn = on = 0, ln = e), on);
        },
        movementY: function (e) {
          return "movementY" in e ? e.movementY : rn;
        }
      });
      var gn = an(hn);
      var pn = an(D({}, hn, {
        dataTransfer: 0
      }));
      var fn = an(D({}, dn, {
        relatedTarget: 0
      }));
      var xn = an(D({}, cn, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }));
      var vn = D({}, cn, {
        clipboardData: function (e) {
          return "clipboardData" in e ? e.clipboardData : window.clipboardData;
        }
      });
      var _n = an(vn);
      var bn = an(D({}, cn, {
        data: 0
      }));
      var Tn = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var En = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var In = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function yn(e) {
        var t = this.nativeEvent;
        return t.getModifierState ? t.getModifierState(e) : !!(e = In[e]) && !!t[e];
      }
      function Sn() {
        return yn;
      }
      var jn = D({}, dn, {
        key: function (e) {
          if (e.key) {
            var t = Tn[e.key] || e.key;
            if ("Unidentified" !== t) {
              return t;
            }
          }
          return "keypress" === e.type ? 13 === (e = tn(e)) ? "Enter" : String.fromCharCode(e) : "keydown" === e.type || "keyup" === e.type ? En[e.keyCode] || "Unidentified" : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: Sn,
        charCode: function (e) {
          return "keypress" === e.type ? tn(e) : 0;
        },
        keyCode: function (e) {
          return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
        },
        which: function (e) {
          return "keypress" === e.type ? tn(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
        }
      });
      var Cn = an(jn);
      var Nn = an(D({}, hn, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }));
      var wn = an(D({}, dn, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: Sn
      }));
      var On = an(D({}, cn, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }));
      var Pn = D({}, hn, {
        deltaX: function (e) {
          return "deltaX" in e ? e.deltaX : "wheelDeltaX" in e ? -e.wheelDeltaX : 0;
        },
        deltaY: function (e) {
          return "deltaY" in e ? e.deltaY : "wheelDeltaY" in e ? -e.wheelDeltaY : "wheelDelta" in e ? -e.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var Ln = an(Pn);
      var An = [9, 13, 27, 32];
      var Mn = u && "CompositionEvent" in window;
      var Rn = null;
      if (u && "documentMode" in document) {
        Rn = document.documentMode;
      }
      var kn = u && "TextEvent" in window && !Rn;
      var Dn = u && (!Mn || Rn && 8 < Rn && 11 >= Rn);
      var Fn = String.fromCharCode(32);
      var Un = false;
      function Bn(e, t) {
        switch (e) {
          case "keyup":
            return -1 !== An.indexOf(t.keyCode);
          case "keydown":
            return 229 !== t.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function Gn(e) {
        return "object" == typeof (e = e.detail) && "data" in e ? e.data : null;
      }
      var Vn = false;
      var Hn = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function Kn(e) {
        var t = e && e.nodeName && e.nodeName.toLowerCase();
        return "input" === t ? !!Hn[e.type] : "textarea" === t;
      }
      function Wn(e, t, n, s) {
        je(s);
        if (0 < (t = zs(t, "onChange")).length) {
          n = new un("onChange", "change", null, n, s);
          e.push({
            event: n,
            listeners: t
          });
        }
      }
      var zn = null;
      var Yn = null;
      function $n(e) {
        Fs(e, 0);
      }
      function qn(e) {
        if (Y(bi(e))) {
          return e;
        }
      }
      function Xn(e, t) {
        if ("change" === e) {
          return t;
        }
      }
      var Qn = false;
      if (u) {
        var Zn;
        if (u) {
          var Jn = ("oninput" in document);
          if (!Jn) {
            var es = document.createElement("div");
            es.setAttribute("oninput", "return;");
            Jn = "function" == typeof es.oninput;
          }
          Zn = Jn;
        } else {
          Zn = false;
        }
        Qn = Zn && (!document.documentMode || 9 < document.documentMode);
      }
      function ts() {
        if (zn) {
          zn.detachEvent("onpropertychange", ns);
          Yn = zn = null;
        }
      }
      function ns(e) {
        if ("value" === e.propertyName && qn(Yn)) {
          var t = [];
          Wn(t, Yn, e, Te(e));
          Pe($n, t);
        }
      }
      function ss(e, t, n) {
        if ("focusin" === e) {
          ts();
          Yn = n;
          (zn = t).attachEvent("onpropertychange", ns);
        } else if ("focusout" === e) {
          ts();
        }
      }
      function is(e) {
        if ("selectionchange" === e || "keyup" === e || "keydown" === e) {
          return qn(Yn);
        }
      }
      function as(e, t) {
        if ("click" === e) {
          return qn(t);
        }
      }
      function os(e, t) {
        if ("input" === e || "change" === e) {
          return qn(t);
        }
      }
      var rs = "function" == typeof Object.is ? Object.is : function (e, t) {
        return e === t && (0 !== e || 1 / e == 1 / t) || e != e && t != t;
      };
      function ls(e, t) {
        if (rs(e, t)) {
          return true;
        }
        if ("object" != typeof e || null === e || "object" != typeof t || null === t) {
          return false;
        }
        var n = Object.keys(e);
        var s = Object.keys(t);
        if (n.length !== s.length) {
          return false;
        }
        for (s = 0; s < n.length; s++) {
          var i = n[s];
          if (!d.call(t, i) || !rs(e[i], t[i])) {
            return false;
          }
        }
        return true;
      }
      function cs(e) {
        for (; e && e.firstChild;) {
          e = e.firstChild;
        }
        return e;
      }
      function us(e, t) {
        var n;
        var s = cs(e);
        for (e = 0; s;) {
          if (3 === s.nodeType) {
            n = e + s.textContent.length;
            if (e <= t && n >= t) {
              return {
                node: s,
                offset: t - e
              };
            }
            e = n;
          }
          e: {
            for (; s;) {
              if (s.nextSibling) {
                s = s.nextSibling;
                break e;
              }
              s = s.parentNode;
            }
            s = undefined;
          }
          s = cs(s);
        }
      }
      function ds(e, t) {
        return !(!e || !t) && (e === t || (!e || 3 !== e.nodeType) && (t && 3 === t.nodeType ? !(!e || !t.parentNode) && (e === t.parentNode || (!e || 3 !== e.nodeType) && (t.parentNode && 3 === t.parentNode.nodeType ? ds(e, t.parentNode.parentNode) : "contains" in e ? e.contains(t.parentNode) : !!e.compareDocumentPosition && !!(16 & e.compareDocumentPosition(t.parentNode)))) : "contains" in e ? e.contains(t) : !!e.compareDocumentPosition && !!(16 & e.compareDocumentPosition(t))));
      }
      function ms() {
        var e = window;
        for (var t = $(); t instanceof e.HTMLIFrameElement;) {
          try {
            var n = "string" == typeof t.contentWindow.location.href;
          } catch (e) {
            n = false;
          }
          if (!n) {
            break;
          }
          t = $((e = t.contentWindow).document);
        }
        return t;
      }
      function hs(e) {
        var t = e && e.nodeName && e.nodeName.toLowerCase();
        return t && ("input" === t && ("text" === e.type || "search" === e.type || "tel" === e.type || "url" === e.type || "password" === e.type) || "textarea" === t || "true" === e.contentEditable);
      }
      function gs(e) {
        var t = ms();
        var n = e.focusedElem;
        var s = e.selectionRange;
        if (t !== n && n && n.ownerDocument && !(!n.ownerDocument.documentElement || !n) && (n.ownerDocument.documentElement === n || (!n.ownerDocument.documentElement || 3 !== n.ownerDocument.documentElement.nodeType) && (n && 3 === n.nodeType ? ds(n.ownerDocument.documentElement, n.parentNode) : "contains" in n.ownerDocument.documentElement ? n.ownerDocument.documentElement.contains(n) : !!n.ownerDocument.documentElement.compareDocumentPosition && !!(16 & n.ownerDocument.documentElement.compareDocumentPosition(n))))) {
          if (null !== s && hs(n)) {
            t = s.start;
            if (undefined === (e = s.end)) {
              e = t;
            }
            if ("selectionStart" in n) {
              n.selectionStart = t;
              n.selectionEnd = Math.min(e, n.value.length);
            } else if ((e = (t = n.ownerDocument || document) && t.defaultView || window).getSelection) {
              e = e.getSelection();
              var i = n.textContent.length;
              var a = Math.min(s.start, i);
              s = undefined === s.end ? a : Math.min(s.end, i);
              if (!e.extend && a > s) {
                i = s;
                s = a;
                a = i;
              }
              i = us(n, a);
              var o = us(n, s);
              if (i && o && (1 !== e.rangeCount || e.anchorNode !== i.node || e.anchorOffset !== i.offset || e.focusNode !== o.node || e.focusOffset !== o.offset)) {
                (t = t.createRange()).setStart(i.node, i.offset);
                e.removeAllRanges();
                if (a > s) {
                  e.addRange(t);
                  e.extend(o.node, o.offset);
                } else {
                  t.setEnd(o.node, o.offset);
                  e.addRange(t);
                }
              }
            }
          }
          t = [];
          for (e = n; e = e.parentNode;) {
            if (1 === e.nodeType) {
              t.push({
                element: e,
                left: e.scrollLeft,
                top: e.scrollTop
              });
            }
          }
          if ("function" == typeof n.focus) {
            n.focus();
          }
          for (n = 0; n < t.length; n++) {
            (e = t[n]).element.scrollLeft = e.left;
            e.element.scrollTop = e.top;
          }
        }
      }
      var ps = u && "documentMode" in document && 11 >= document.documentMode;
      var fs = null;
      var xs = null;
      var vs = null;
      var _s = false;
      function bs(e, t, n) {
        var s = n.window === n ? n.document : 9 === n.nodeType ? n : n.ownerDocument;
        if (!(_s || null == fs || fs !== $(s))) {
          if ("selectionStart" in (s = fs) && hs(s)) {
            s = {
              start: s.selectionStart,
              end: s.selectionEnd
            };
          } else {
            s = {
              anchorNode: (s = (s.ownerDocument && s.ownerDocument.defaultView || window).getSelection()).anchorNode,
              anchorOffset: s.anchorOffset,
              focusNode: s.focusNode,
              focusOffset: s.focusOffset
            };
          }
          if (!(vs && ls(vs, s))) {
            vs = s;
            if (0 < (s = zs(xs, "onSelect")).length) {
              t = new un("onSelect", "select", null, t, n);
              e.push({
                event: t,
                listeners: s
              });
              t.target = fs;
            }
          }
        }
      }
      function Ts(e, t) {
        var n = {};
        n[e.toLowerCase()] = t.toLowerCase();
        n["Webkit" + e] = "webkit" + t;
        n["Moz" + e] = "moz" + t;
        return n;
      }
      var Es = {
        animationend: Ts("Animation", "AnimationEnd"),
        animationiteration: Ts("Animation", "AnimationIteration"),
        animationstart: Ts("Animation", "AnimationStart"),
        transitionend: Ts("Transition", "TransitionEnd")
      };
      var Is = {};
      var ys = {};
      function Ss(e) {
        if (Is[e]) {
          return Is[e];
        }
        if (!Es[e]) {
          return e;
        }
        var t;
        var n = Es[e];
        for (t in n) if (n.hasOwnProperty(t) && t in ys) {
          return Is[e] = n[t];
        }
        return e;
      }
      if (u) {
        ys = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete Es.animationend.animation;
          delete Es.animationiteration.animation;
          delete Es.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete Es.transitionend.transition;
        }
      }
      var js = Ss("animationend");
      var Cs = Ss("animationiteration");
      var Ns = Ss("animationstart");
      var ws = Ss("transitionend");
      var Os = new Map();
      var Ps = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function Ls(e, t) {
        Os.set(e, t);
        l(t, [e]);
      }
      for (var As = 0; As < Ps.length; As++) {
        var Ms = Ps[As];
        Ls(Ms.toLowerCase(), "on" + (Ms[0].toUpperCase() + Ms.slice(1)));
      }
      Ls(js, "onAnimationEnd");
      Ls(Cs, "onAnimationIteration");
      Ls(Ns, "onAnimationStart");
      Ls("dblclick", "onDoubleClick");
      Ls("focusin", "onFocus");
      Ls("focusout", "onBlur");
      Ls(ws, "onTransitionEnd");
      c("onMouseEnter", ["mouseout", "mouseover"]);
      c("onMouseLeave", ["mouseout", "mouseover"]);
      c("onPointerEnter", ["pointerout", "pointerover"]);
      c("onPointerLeave", ["pointerout", "pointerover"]);
      l("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      l("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      l("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      l("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      l("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      l("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var Rs = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
      var ks = new Set("cancel close invalid load scroll toggle".split(" ").concat(Rs));
      function Ds(e, t, n) {
        var s = e.type || "unknown-event";
        e.currentTarget = n;
        (function (e, t, n, s, i, o, r, l, c) {
          Ge.apply(this, arguments);
          if (ke) {
            if (!ke) {
              throw Error(a(198));
            }
            var u = De;
            ke = false;
            De = null;
            if (!Fe) {
              Fe = true;
              Ue = u;
            }
          }
        })(s, t, undefined, e);
        e.currentTarget = null;
      }
      function Fs(e, t) {
        t = 0 != (4 & t);
        for (var n = 0; n < e.length; n++) {
          var s = e[n];
          var i = s.event;
          s = s.listeners;
          e: {
            var a = undefined;
            if (t) {
              for (var o = s.length - 1; 0 <= o; o--) {
                var r = s[o];
                var l = r.instance;
                var c = r.currentTarget;
                r = r.listener;
                if (l !== a && i.isPropagationStopped()) {
                  break e;
                }
                Ds(i, r, c);
                a = l;
              }
            } else {
              for (o = 0; o < s.length; o++) {
                l = (r = s[o]).instance;
                c = r.currentTarget;
                r = r.listener;
                if (l !== a && i.isPropagationStopped()) {
                  break e;
                }
                Ds(i, r, c);
                a = l;
              }
            }
          }
        }
        if (Fe) {
          e = Ue;
          Fe = false;
          Ue = null;
          throw e;
        }
      }
      function Us(e, t) {
        var n = t[pi];
        if (undefined === n) {
          n = t[pi] = new Set();
        }
        var s = e + "__bubble";
        if (!n.has(s)) {
          Hs(t, e, 2, false);
          n.add(s);
        }
      }
      function Bs(e, t, n) {
        var s = 0;
        if (t) {
          s |= 4;
        }
        Hs(n, e, s, t);
      }
      var Gs = "_reactListening" + Math.random().toString(36).slice(2);
      function Vs(e) {
        if (!e[Gs]) {
          e[Gs] = true;
          o.forEach(function (t) {
            if ("selectionchange" !== t) {
              if (!ks.has(t)) {
                Bs(t, false, e);
              }
              Bs(t, true, e);
            }
          });
          var t = 9 === e.nodeType ? e : e.ownerDocument;
          if (!(null === t || t[Gs])) {
            t[Gs] = true;
            Bs("selectionchange", false, t);
          }
        }
      }
      function Hs(e, t, n, s) {
        switch (Xt(t)) {
          case 1:
            var i = Wt;
            break;
          case 4:
            i = zt;
            break;
          default:
            i = Yt;
        }
        n = i.bind(null, t, n, e);
        i = undefined;
        if (!(!Ae || "touchstart" !== t && "touchmove" !== t && "wheel" !== t)) {
          i = true;
        }
        if (s) {
          if (undefined !== i) {
            e.addEventListener(t, n, {
              capture: true,
              passive: i
            });
          } else {
            e.addEventListener(t, n, true);
          }
        } else if (undefined !== i) {
          e.addEventListener(t, n, {
            passive: i
          });
        } else {
          e.addEventListener(t, n, false);
        }
      }
      function Ks(e, t, n, s, i) {
        var a = s;
        if (0 == (1 & t) && 0 == (2 & t) && null !== s) {
          e: for (;;) {
            if (null === s) {
              return;
            }
            var o = s.tag;
            if (3 === o || 4 === o) {
              var r = s.stateNode.containerInfo;
              if (r === i || 8 === r.nodeType && r.parentNode === i) {
                break;
              }
              if (4 === o) {
                for (o = s.return; null !== o;) {
                  var l = o.tag;
                  if ((3 === l || 4 === l) && ((l = o.stateNode.containerInfo) === i || 8 === l.nodeType && l.parentNode === i)) {
                    return;
                  }
                  o = o.return;
                }
              }
              for (; null !== r;) {
                if (null === (o = vi(r))) {
                  return;
                }
                if (5 === (l = o.tag) || 6 === l) {
                  s = a = o;
                  continue e;
                }
                r = r.parentNode;
              }
            }
            s = s.return;
          }
        }
        Pe(function () {
          var s = a;
          var i = Te(n);
          var o = [];
          e: {
            var r = Os.get(e);
            if (undefined !== r) {
              var l = un;
              var c = e;
              switch (e) {
                case "keypress":
                  if (0 === tn(n)) {
                    break e;
                  }
                case "keydown":
                case "keyup":
                  l = Cn;
                  break;
                case "focusin":
                  c = "focus";
                  l = fn;
                  break;
                case "focusout":
                  c = "blur";
                  l = fn;
                  break;
                case "beforeblur":
                case "afterblur":
                  l = fn;
                  break;
                case "click":
                  if (2 === n.button) {
                    break e;
                  }
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  l = gn;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  l = pn;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  l = wn;
                  break;
                case js:
                case Cs:
                case Ns:
                  l = xn;
                  break;
                case ws:
                  l = On;
                  break;
                case "scroll":
                  l = mn;
                  break;
                case "wheel":
                  l = Ln;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  l = _n;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  l = Nn;
              }
              var u = 0 != (4 & t);
              var d = !u && "scroll" === e;
              var m = u ? null !== r ? r + "Capture" : null : r;
              u = [];
              var h;
              for (var g = s; null !== g;) {
                var p = (h = g).stateNode;
                if (5 === h.tag && null !== p) {
                  h = p;
                  if (null !== m) {
                    if (null != (p = Le(g, m))) {
                      u.push({
                        instance: g,
                        listener: p,
                        currentTarget: h
                      });
                    }
                  }
                }
                if (d) {
                  break;
                }
                g = g.return;
              }
              if (0 < u.length) {
                r = new l(r, c, null, n, i);
                o.push({
                  event: r,
                  listeners: u
                });
              }
            }
          }
          if (0 == (7 & t)) {
            l = "mouseout" === e || "pointerout" === e;
            if ((!(r = "mouseover" === e || "pointerover" === e) || n === be || !(c = n.relatedTarget || n.fromElement) || !vi(c) && !c[gi]) && (l || r) && (r = i.window === i ? i : (r = i.ownerDocument) ? r.defaultView || r.parentWindow : window, l ? (l = s, null !== (c = (c = n.relatedTarget || n.toElement) ? vi(c) : null) && (c !== (d = Ve(c)) || 5 !== c.tag && 6 !== c.tag) && (c = null)) : (l = null, c = s), l !== c)) {
              u = gn;
              p = "onMouseLeave";
              m = "onMouseEnter";
              g = "mouse";
              if (!("pointerout" !== e && "pointerover" !== e)) {
                u = Nn;
                p = "onPointerLeave";
                m = "onPointerEnter";
                g = "pointer";
              }
              d = null == l ? r : bi(l);
              h = null == c ? r : bi(c);
              (r = new u(p, g + "leave", l, n, i)).target = d;
              r.relatedTarget = h;
              p = null;
              if (vi(i) === s) {
                (u = new u(m, g + "enter", c, n, i)).target = h;
                u.relatedTarget = d;
                p = u;
              }
              d = p;
              if (l && c) {
                e: {
                  m = c;
                  g = 0;
                  for (h = u = l; h; h = Ys(h)) {
                    g++;
                  }
                  h = 0;
                  for (p = m; p; p = Ys(p)) {
                    h++;
                  }
                  for (; 0 < g - h;) {
                    u = Ys(u);
                    g--;
                  }
                  for (; 0 < h - g;) {
                    m = Ys(m);
                    h--;
                  }
                  for (; g--;) {
                    if (u === m || null !== m && u === m.alternate) {
                      break e;
                    }
                    u = Ys(u);
                    m = Ys(m);
                  }
                  u = null;
                }
              } else {
                u = null;
              }
              if (null !== l) {
                $s(o, r, l, u, false);
              }
              if (null !== c && null !== d) {
                $s(o, d, c, u, true);
              }
            }
            if ("select" === (l = (r = s ? bi(s) : window).nodeName && r.nodeName.toLowerCase()) || "input" === l && "file" === r.type) {
              var f = Xn;
            } else if (Kn(r)) {
              if (Qn) {
                f = os;
              } else {
                f = is;
                var x = ss;
              }
            } else if ((l = r.nodeName) && "input" === l.toLowerCase() && ("checkbox" === r.type || "radio" === r.type)) {
              f = as;
            }
            if (f && (f = f(e, s))) {
              Wn(o, f, n, i);
            } else {
              if (x) {
                x(e, r, s);
              }
              if ("focusout" === e && (x = r._wrapperState) && x.controlled && "number" === r.type) {
                ee(r, "number", r.value);
              }
            }
            x = s ? bi(s) : window;
            switch (e) {
              case "focusin":
                if (Kn(x) || "true" === x.contentEditable) {
                  fs = x;
                  xs = s;
                  vs = null;
                }
                break;
              case "focusout":
                vs = xs = fs = null;
                break;
              case "mousedown":
                _s = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                _s = false;
                bs(o, n, i);
                break;
              case "selectionchange":
                if (ps) {
                  break;
                }
              case "keydown":
              case "keyup":
                bs(o, n, i);
            }
            var v;
            if (Mn) {
              e: {
                switch (e) {
                  case "compositionstart":
                    var _ = "onCompositionStart";
                    break e;
                  case "compositionend":
                    _ = "onCompositionEnd";
                    break e;
                  case "compositionupdate":
                    _ = "onCompositionUpdate";
                    break e;
                }
                _ = undefined;
              }
            } else if (Vn) {
              if (Bn(e, n)) {
                _ = "onCompositionEnd";
              }
            } else if ("keydown" === e && 229 === n.keyCode) {
              _ = "onCompositionStart";
            }
            if (_) {
              if (Dn && "ko" !== n.locale) {
                if (Vn || "onCompositionStart" !== _) {
                  if ("onCompositionEnd" === _ && Vn) {
                    v = en();
                  }
                } else {
                  Zt = "value" in (Qt = i) ? Qt.value : Qt.textContent;
                  Vn = true;
                }
              }
              if (0 < (x = zs(s, _)).length) {
                _ = new bn(_, e, null, n, i);
                o.push({
                  event: _,
                  listeners: x
                });
                if (v) {
                  _.data = v;
                } else if (null !== (v = Gn(n))) {
                  _.data = v;
                }
              }
            }
            if (v = kn ? function (e, t) {
              switch (e) {
                case "compositionend":
                  return Gn(t);
                case "keypress":
                  return 32 !== t.which ? null : (Un = true, Fn);
                case "textInput":
                  return (e = t.data) === Fn && Un ? null : e;
                default:
                  return null;
              }
            }(e, n) : function (e, t) {
              if (Vn) {
                return "compositionend" === e || !Mn && Bn(e, t) ? (e = en(), Jt = Zt = Qt = null, Vn = false, e) : null;
              }
              switch (e) {
                case "paste":
                default:
                  return null;
                case "keypress":
                  if (!(t.ctrlKey || t.altKey || t.metaKey) || t.ctrlKey && t.altKey) {
                    if (t.char && 1 < t.char.length) {
                      return t.char;
                    }
                    if (t.which) {
                      return String.fromCharCode(t.which);
                    }
                  }
                  return null;
                case "compositionend":
                  return Dn && "ko" !== t.locale ? null : t.data;
              }
            }(e, n)) {
              if (0 < (s = zs(s, "onBeforeInput")).length) {
                i = new bn("onBeforeInput", "beforeinput", null, n, i);
                o.push({
                  event: i,
                  listeners: s
                });
                i.data = v;
              }
            }
          }
          Fs(o, t);
        });
      }
      function Ws(e, t, n) {
        return {
          instance: e,
          listener: t,
          currentTarget: n
        };
      }
      function zs(e, t) {
        var n = t + "Capture";
        for (var s = []; null !== e;) {
          var i = e;
          var a = i.stateNode;
          if (5 === i.tag && null !== a) {
            i = a;
            if (null != (a = Le(e, n))) {
              s.unshift({
                instance: e,
                listener: a,
                currentTarget: i
              });
            }
            if (null != (a = Le(e, t))) {
              s.push({
                instance: e,
                listener: a,
                currentTarget: i
              });
            }
          }
          e = e.return;
        }
        return s;
      }
      function Ys(e) {
        if (null === e) {
          return null;
        }
        do {
          e = e.return;
        } while (e && 5 !== e.tag);
        return e || null;
      }
      function $s(e, t, n, s, i) {
        var a = t._reactName;
        for (var o = []; null !== n && n !== s;) {
          var r = n;
          var l = r.alternate;
          var c = r.stateNode;
          if (null !== l && l === s) {
            break;
          }
          if (5 === r.tag && null !== c) {
            r = c;
            if (i) {
              if (null != (l = Le(n, a))) {
                o.unshift({
                  instance: n,
                  listener: l,
                  currentTarget: r
                });
              }
            } else if (!i) {
              if (null != (l = Le(n, a))) {
                o.push({
                  instance: n,
                  listener: l,
                  currentTarget: r
                });
              }
            }
          }
          n = n.return;
        }
        if (0 !== o.length) {
          e.push({
            event: t,
            listeners: o
          });
        }
      }
      var qs = /\r\n?/g;
      var Xs = /\u0000|\uFFFD/g;
      function Qs(e) {
        return ("string" == typeof e ? e : "" + e).replace(qs, "\n").replace(Xs, "");
      }
      function Zs(e, t, n) {
        t = ("string" == typeof t ? t : "" + t).replace(qs, "\n").replace(Xs, "");
        if (("string" == typeof e ? e : "" + e).replace(qs, "\n").replace(Xs, "") !== t && n) {
          throw Error(a(425));
        }
      }
      function Js() {}
      var ei = null;
      var ti = null;
      function ni(e, t) {
        return "textarea" === e || "noscript" === e || "string" == typeof t.children || "number" == typeof t.children || "object" == typeof t.dangerouslySetInnerHTML && null !== t.dangerouslySetInnerHTML && null != t.dangerouslySetInnerHTML.__html;
      }
      var si = "function" == typeof setTimeout ? setTimeout : undefined;
      var ii = "function" == typeof clearTimeout ? clearTimeout : undefined;
      var ai = "function" == typeof Promise ? Promise : undefined;
      var oi = "function" == typeof queueMicrotask ? queueMicrotask : undefined !== ai ? function (e) {
        return ai.resolve(null).then(e).catch(ri);
      } : si;
      function ri(e) {
        setTimeout(function () {
          throw e;
        });
      }
      function li(e, t) {
        var n = t;
        var s = 0;
        do {
          var i = n.nextSibling;
          e.removeChild(n);
          if (i && 8 === i.nodeType) {
            if ("/$" === (n = i.data)) {
              if (0 === s) {
                e.removeChild(i);
                return void Vt(t);
              }
              s--;
            } else if (!("$" !== n && "$?" !== n && "$!" !== n)) {
              s++;
            }
          }
          n = i;
        } while (n);
        Vt(t);
      }
      function ci(e) {
        for (; null != e; e = e.nextSibling) {
          var t = e.nodeType;
          if (1 === t || 3 === t) {
            break;
          }
          if (8 === t) {
            if ("$" === (t = e.data) || "$!" === t || "$?" === t) {
              break;
            }
            if ("/$" === t) {
              return null;
            }
          }
        }
        return e;
      }
      function ui(e) {
        e = e.previousSibling;
        for (var t = 0; e;) {
          if (8 === e.nodeType) {
            var n = e.data;
            if ("$" === n || "$!" === n || "$?" === n) {
              if (0 === t) {
                return e;
              }
              t--;
            } else if ("/$" === n) {
              t++;
            }
          }
          e = e.previousSibling;
        }
        return null;
      }
      var di = Math.random().toString(36).slice(2);
      var mi = "__reactFiber$" + di;
      var hi = "__reactProps$" + di;
      var gi = "__reactContainer$" + di;
      var pi = "__reactEvents$" + di;
      var fi = "__reactListeners$" + di;
      var xi = "__reactHandles$" + di;
      function vi(e) {
        var t = e[mi];
        if (t) {
          return t;
        }
        for (var n = e.parentNode; n;) {
          if (t = n[gi] || n[mi]) {
            n = t.alternate;
            if (null !== t.child || null !== n && null !== n.child) {
              for (e = ui(e); null !== e;) {
                if (n = e[mi]) {
                  return n;
                }
                e = ui(e);
              }
            }
            return t;
          }
          n = (e = n).parentNode;
        }
        return null;
      }
      function _i(e) {
        return !(e = e[mi] || e[gi]) || 5 !== e.tag && 6 !== e.tag && 13 !== e.tag && 3 !== e.tag ? null : e;
      }
      function bi(e) {
        if (5 === e.tag || 6 === e.tag) {
          return e.stateNode;
        }
        throw Error(a(33));
      }
      function Ti(e) {
        return e[hi] || null;
      }
      var Ei = [];
      var Ii = -1;
      function yi(e) {
        return {
          current: e
        };
      }
      function Si(e) {
        if (!(0 > Ii)) {
          e.current = Ei[Ii];
          Ei[Ii] = null;
          Ii--;
        }
      }
      function ji(e, t) {
        Ii++;
        Ei[Ii] = e.current;
        e.current = t;
      }
      var Ci = {};
      var Ni = {
        current: Ci
      };
      var wi = {
        current: false
      };
      var Oi = Ci;
      function Pi(e, t) {
        var n = e.type.contextTypes;
        if (!n) {
          return Ci;
        }
        var s = e.stateNode;
        if (s && s.__reactInternalMemoizedUnmaskedChildContext === t) {
          return s.__reactInternalMemoizedMaskedChildContext;
        }
        var i;
        var a = {};
        for (i in n) a[i] = t[i];
        if (s) {
          (e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = t;
          e.__reactInternalMemoizedMaskedChildContext = a;
        }
        return a;
      }
      function Li(e) {
        return null != (e = e.childContextTypes);
      }
      function Ai() {
        Si(wi);
        Si(Ni);
      }
      function Mi(e, t, n) {
        if (Ni.current !== Ci) {
          throw Error(a(168));
        }
        ji(Ni, t);
        ji(wi, n);
      }
      function Ri(e, t, n) {
        var s = e.stateNode;
        t = t.childContextTypes;
        if ("function" != typeof s.getChildContext) {
          return n;
        }
        for (var i in s = s.getChildContext()) if (!(i in t)) {
          throw Error(a(108, H(e) || "Unknown", i));
        }
        return D({}, n, s);
      }
      function ki(e) {
        e = (e = e.stateNode) && e.__reactInternalMemoizedMergedChildContext || Ci;
        Oi = Ni.current;
        ji(Ni, e);
        ji(wi, wi.current);
        return true;
      }
      function Di(e, t, n) {
        var s = e.stateNode;
        if (!s) {
          throw Error(a(169));
        }
        if (n) {
          e = Ri(e, t, Oi);
          s.__reactInternalMemoizedMergedChildContext = e;
          Si(wi);
          Si(Ni);
          ji(Ni, e);
        } else {
          Si(wi);
        }
        ji(wi, n);
      }
      var Fi = null;
      var Ui = false;
      var Bi = false;
      function Gi(e) {
        if (null === Fi) {
          Fi = [e];
        } else {
          Fi.push(e);
        }
      }
      function Vi() {
        if (!Bi && null !== Fi) {
          Bi = true;
          var e = 0;
          var t = _t;
          try {
            var n = Fi;
            for (_t = 1; e < n.length; e++) {
              var s = n[e];
              do {
                s = s(true);
              } while (null !== s);
            }
            Fi = null;
            Ui = false;
          } catch (t) {
            if (null !== Fi) {
              Fi = Fi.slice(e + 1);
            }
            Ye(Je, Vi);
            throw t;
          } finally {
            _t = t;
            Bi = false;
          }
        }
        return null;
      }
      var Hi = [];
      var Ki = 0;
      var Wi = null;
      var zi = 0;
      var Yi = [];
      var $i = 0;
      var qi = null;
      var Xi = 1;
      var Qi = "";
      function Zi(e, t) {
        Hi[Ki++] = zi;
        Hi[Ki++] = Wi;
        Wi = e;
        zi = t;
      }
      function Ji(e, t, n) {
        Yi[$i++] = Xi;
        Yi[$i++] = Qi;
        Yi[$i++] = qi;
        qi = e;
        var s = Xi;
        e = Qi;
        var i = 32 - ot(s) - 1;
        s &= ~(1 << i);
        n += 1;
        var a = 32 - ot(t) + i;
        if (30 < a) {
          var o = i - i % 5;
          a = (s & (1 << o) - 1).toString(32);
          s >>= o;
          i -= o;
          Xi = 1 << 32 - ot(t) + i | n << i | s;
          Qi = a + e;
        } else {
          Xi = 1 << a | n << i | s;
          Qi = e;
        }
      }
      function ea(e) {
        if (null !== e.return) {
          Zi(e, 1);
          Ji(e, 1, 0);
        }
      }
      function ta(e) {
        for (; e === Wi;) {
          Wi = Hi[--Ki];
          Hi[Ki] = null;
          zi = Hi[--Ki];
          Hi[Ki] = null;
        }
        for (; e === qi;) {
          qi = Yi[--$i];
          Yi[$i] = null;
          Qi = Yi[--$i];
          Yi[$i] = null;
          Xi = Yi[--$i];
          Yi[$i] = null;
        }
      }
      var na = null;
      var sa = null;
      var ia = false;
      var aa = null;
      function oa(e, t) {
        var n = new Pc(5, null, null, 0);
        n.elementType = "DELETED";
        n.stateNode = t;
        n.return = e;
        if (null === (t = e.deletions)) {
          e.deletions = [n];
          e.flags |= 16;
        } else {
          t.push(n);
        }
      }
      function ra(e, t) {
        switch (e.tag) {
          case 5:
            var n = e.type;
            return null !== (t = 1 !== t.nodeType || n.toLowerCase() !== t.nodeName.toLowerCase() ? null : t) && (e.stateNode = t, na = e, sa = ci(t.firstChild), true);
          case 6:
            return null !== (t = "" === e.pendingProps || 3 !== t.nodeType ? null : t) && (e.stateNode = t, na = e, sa = null, true);
          case 13:
            return null !== (t = 8 !== t.nodeType ? null : t) && (n = null !== qi ? {
              id: Xi,
              overflow: Qi
            } : null, e.memoizedState = {
              dehydrated: t,
              treeContext: n,
              retryLane: 1073741824
            }, (n = new Pc(18, null, null, 0)).stateNode = t, n.return = e, e.child = n, na = e, sa = null, true);
          default:
            return false;
        }
      }
      function la(e) {
        return 0 != (1 & e.mode) && 0 == (128 & e.flags);
      }
      function ca(e) {
        if (ia) {
          var t = sa;
          if (t) {
            var n = t;
            if (!ra(e, t)) {
              if (0 != (1 & e.mode) && 0 == (128 & e.flags)) {
                throw Error(a(418));
              }
              t = ci(n.nextSibling);
              var s = na;
              if (t && ra(e, t)) {
                oa(s, n);
              } else {
                e.flags = -4097 & e.flags | 2;
                ia = false;
                na = e;
              }
            }
          } else {
            if (0 != (1 & e.mode) && 0 == (128 & e.flags)) {
              throw Error(a(418));
            }
            e.flags = -4097 & e.flags | 2;
            ia = false;
            na = e;
          }
        }
      }
      function ua(e) {
        for (e = e.return; null !== e && 5 !== e.tag && 3 !== e.tag && 13 !== e.tag;) {
          e = e.return;
        }
        na = e;
      }
      function da(e) {
        if (e !== na) {
          return false;
        }
        if (!ia) {
          ua(e);
          ia = true;
          return false;
        }
        var t;
        if ((t = 3 !== e.tag) && !(t = 5 !== e.tag)) {
          t = "head" !== (t = e.type) && "body" !== t && !("textarea" === e.type || "noscript" === e.type || "string" == typeof e.memoizedProps.children || "number" == typeof e.memoizedProps.children || "object" == typeof e.memoizedProps.dangerouslySetInnerHTML && null !== e.memoizedProps.dangerouslySetInnerHTML && null != e.memoizedProps.dangerouslySetInnerHTML.__html);
        }
        if (t && (t = sa)) {
          if (0 != (1 & e.mode) && 0 == (128 & e.flags)) {
            ma();
            throw Error(a(418));
          }
          for (; t;) {
            oa(e, t);
            t = ci(t.nextSibling);
          }
        }
        ua(e);
        if (13 === e.tag) {
          if (!(e = null !== (e = e.memoizedState) ? e.dehydrated : null)) {
            throw Error(a(317));
          }
          e: {
            e = e.nextSibling;
            for (t = 0; e;) {
              if (8 === e.nodeType) {
                var n = e.data;
                if ("/$" === n) {
                  if (0 === t) {
                    sa = ci(e.nextSibling);
                    break e;
                  }
                  t--;
                } else if (!("$" !== n && "$!" !== n && "$?" !== n)) {
                  t++;
                }
              }
              e = e.nextSibling;
            }
            sa = null;
          }
        } else {
          sa = na ? ci(e.stateNode.nextSibling) : null;
        }
        return true;
      }
      function ma() {
        for (var e = sa; e;) {
          e = ci(e.nextSibling);
        }
      }
      function ha() {
        sa = na = null;
        ia = false;
      }
      function ga(e) {
        if (null === aa) {
          aa = [e];
        } else {
          aa.push(e);
        }
      }
      var pa = b.ReactCurrentBatchConfig;
      function fa(e, t) {
        if (e && e.defaultProps) {
          t = D({}, t);
          for (var n in e = e.defaultProps) if (undefined === t[n]) {
            t[n] = e[n];
          }
          return t;
        }
        return t;
      }
      var xa = {
        current: null
      };
      var va = null;
      var _a = null;
      var ba = null;
      function Ta() {
        ba = _a = va = null;
      }
      function Ea(e) {
        var t = xa.current;
        Si(xa);
        e._currentValue = t;
      }
      function Ia(e, t, n) {
        for (; null !== e;) {
          var s = e.alternate;
          if ((e.childLanes & t) !== t) {
            e.childLanes |= t;
            if (null !== s) {
              s.childLanes |= t;
            }
          } else if (null !== s && (s.childLanes & t) !== t) {
            s.childLanes |= t;
          }
          if (e === n) {
            break;
          }
          e = e.return;
        }
      }
      function ya(e, t) {
        va = e;
        ba = _a = null;
        if (null !== (e = e.dependencies) && null !== e.firstContext) {
          if (0 != (e.lanes & t)) {
            br = true;
          }
          e.firstContext = null;
        }
      }
      function Sa(e) {
        var t = e._currentValue;
        if (ba !== e) {
          e = {
            context: e,
            memoizedValue: t,
            next: null
          };
          if (null === _a) {
            if (null === va) {
              throw Error(a(308));
            }
            _a = e;
            va.dependencies = {
              lanes: 0,
              firstContext: e
            };
          } else {
            _a = _a.next = e;
          }
        }
        return t;
      }
      var ja = null;
      function Ca(e) {
        if (null === ja) {
          ja = [e];
        } else {
          ja.push(e);
        }
      }
      function Na(e, t, n, s) {
        var i = t.interleaved;
        if (null === i) {
          n.next = n;
          Ca(t);
        } else {
          n.next = i.next;
          i.next = n;
        }
        t.interleaved = n;
        return wa(e, s);
      }
      function wa(e, t) {
        e.lanes |= t;
        var n = e.alternate;
        if (null !== n) {
          n.lanes |= t;
        }
        n = e;
        for (e = e.return; null !== e;) {
          e.childLanes |= t;
          if (null !== (n = e.alternate)) {
            n.childLanes |= t;
          }
          n = e;
          e = e.return;
        }
        return 3 === n.tag ? n.stateNode : null;
      }
      var Oa = false;
      function Pa(e) {
        e.updateQueue = {
          baseState: e.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: 0
          },
          effects: null
        };
      }
      function La(e, t) {
        e = e.updateQueue;
        if (t.updateQueue === e) {
          t.updateQueue = {
            baseState: e.baseState,
            firstBaseUpdate: e.firstBaseUpdate,
            lastBaseUpdate: e.lastBaseUpdate,
            shared: e.shared,
            effects: e.effects
          };
        }
      }
      function Aa(e, t) {
        return {
          eventTime: e,
          lane: t,
          tag: 0,
          payload: null,
          callback: null,
          next: null
        };
      }
      function Ma(e, t, n) {
        var s = e.updateQueue;
        if (null === s) {
          return null;
        }
        s = s.shared;
        if (0 != (2 & wl)) {
          var i = s.pending;
          if (null === i) {
            t.next = t;
          } else {
            t.next = i.next;
            i.next = t;
          }
          s.pending = t;
          return wa(e, n);
        }
        if (null === (i = s.interleaved)) {
          t.next = t;
          Ca(s);
        } else {
          t.next = i.next;
          i.next = t;
        }
        s.interleaved = t;
        return wa(e, n);
      }
      function Ra(e, t, n) {
        if (null !== (t = t.updateQueue) && (t = t.shared, 0 != (4194240 & n))) {
          var s = t.lanes;
          n |= s &= e.pendingLanes;
          t.lanes = n;
          vt(e, n);
        }
      }
      function ka(e, t) {
        var n = e.updateQueue;
        var s = e.alternate;
        if (null !== s && n === (s = s.updateQueue)) {
          var i = null;
          var a = null;
          if (null !== (n = n.firstBaseUpdate)) {
            do {
              var o = {
                eventTime: n.eventTime,
                lane: n.lane,
                tag: n.tag,
                payload: n.payload,
                callback: n.callback,
                next: null
              };
              if (null === a) {
                i = a = o;
              } else {
                a = a.next = o;
              }
              n = n.next;
            } while (null !== n);
            if (null === a) {
              i = a = t;
            } else {
              a = a.next = t;
            }
          } else {
            i = a = t;
          }
          n = {
            baseState: s.baseState,
            firstBaseUpdate: i,
            lastBaseUpdate: a,
            shared: s.shared,
            effects: s.effects
          };
          return void (e.updateQueue = n);
        }
        if (null === (e = n.lastBaseUpdate)) {
          n.firstBaseUpdate = t;
        } else {
          e.next = t;
        }
        n.lastBaseUpdate = t;
      }
      function Da(e, t, n, s) {
        var i = e.updateQueue;
        Oa = false;
        var a = i.firstBaseUpdate;
        var o = i.lastBaseUpdate;
        var r = i.shared.pending;
        if (null !== r) {
          i.shared.pending = null;
          var l = r;
          var c = l.next;
          l.next = null;
          if (null === o) {
            a = c;
          } else {
            o.next = c;
          }
          o = l;
          var u = e.alternate;
          if (null !== u) {
            if ((r = (u = u.updateQueue).lastBaseUpdate) !== o) {
              if (null === r) {
                u.firstBaseUpdate = c;
              } else {
                r.next = c;
              }
              u.lastBaseUpdate = l;
            }
          }
        }
        if (null !== a) {
          var d = i.baseState;
          o = 0;
          u = c = l = null;
          for (r = a;;) {
            var m = r.lane;
            var h = r.eventTime;
            if ((s & m) === m) {
              if (null !== u) {
                u = u.next = {
                  eventTime: h,
                  lane: 0,
                  tag: r.tag,
                  payload: r.payload,
                  callback: r.callback,
                  next: null
                };
              }
              e: {
                var g = e;
                var p = r;
                m = t;
                h = n;
                switch (p.tag) {
                  case 1:
                    if ("function" == typeof (g = p.payload)) {
                      d = g.call(h, d, m);
                      break e;
                    }
                    d = g;
                    break e;
                  case 3:
                    g.flags = -65537 & g.flags | 128;
                  case 0:
                    if (null == (m = "function" == typeof (g = p.payload) ? g.call(h, d, m) : g)) {
                      break e;
                    }
                    d = D({}, d, m);
                    break e;
                  case 2:
                    Oa = true;
                }
              }
              if (null !== r.callback && 0 !== r.lane) {
                e.flags |= 64;
                if (null === (m = i.effects)) {
                  i.effects = [r];
                } else {
                  m.push(r);
                }
              }
            } else {
              h = {
                eventTime: h,
                lane: m,
                tag: r.tag,
                payload: r.payload,
                callback: r.callback,
                next: null
              };
              if (null === u) {
                c = u = h;
                l = d;
              } else {
                u = u.next = h;
              }
              o |= m;
            }
            if (null === (r = r.next)) {
              if (null === (r = i.shared.pending)) {
                break;
              }
              r = (m = r).next;
              m.next = null;
              i.lastBaseUpdate = m;
              i.shared.pending = null;
            }
          }
          if (null === u) {
            l = d;
          }
          i.baseState = l;
          i.firstBaseUpdate = c;
          i.lastBaseUpdate = u;
          if (null !== (t = i.shared.interleaved)) {
            i = t;
            do {
              o |= i.lane;
              i = i.next;
            } while (i !== t);
          } else if (null === a) {
            i.shared.lanes = 0;
          }
          Dl |= o;
          e.lanes = o;
          e.memoizedState = d;
        }
      }
      function Fa(e, t, n) {
        e = t.effects;
        t.effects = null;
        if (null !== e) {
          for (t = 0; t < e.length; t++) {
            var s = e[t];
            var i = s.callback;
            if (null !== i) {
              s.callback = null;
              s = n;
              if ("function" != typeof i) {
                throw Error(a(191, i));
              }
              i.call(s);
            }
          }
        }
      }
      var Ua = new s.Component().refs;
      function Ba(e, t, n, s) {
        n = null == (n = n(s, t = e.memoizedState)) ? t : D({}, t, n);
        e.memoizedState = n;
        if (0 === e.lanes) {
          e.updateQueue.baseState = n;
        }
      }
      var Ga = {
        isMounted: function (e) {
          return !!(e = e._reactInternals) && Ve(e) === e;
        },
        enqueueSetState: function (e, t, n) {
          e = e._reactInternals;
          var s = tc();
          var i = nc(e);
          var a = {
            eventTime: s,
            lane: i,
            tag: 0,
            payload: null,
            callback: null,
            next: null
          };
          a.payload = t;
          if (null != n) {
            a.callback = n;
          }
          if (null !== (t = Ma(e, a, i))) {
            sc(t, e, i, s);
            Ra(t, e, i);
          }
        },
        enqueueReplaceState: function (e, t, n) {
          e = e._reactInternals;
          var s = tc();
          var i = nc(e);
          var a = {
            eventTime: s,
            lane: i,
            tag: 0,
            payload: null,
            callback: null,
            next: null
          };
          a.tag = 1;
          a.payload = t;
          if (null != n) {
            a.callback = n;
          }
          if (null !== (t = Ma(e, a, i))) {
            sc(t, e, i, s);
            Ra(t, e, i);
          }
        },
        enqueueForceUpdate: function (e, t) {
          e = e._reactInternals;
          var n = tc();
          var s = nc(e);
          var i = {
            eventTime: n,
            lane: s,
            tag: 0,
            payload: null,
            callback: null,
            next: null
          };
          i.tag = 2;
          if (null != t) {
            i.callback = t;
          }
          if (null !== (t = Ma(e, i, s))) {
            sc(t, e, s, n);
            Ra(t, e, s);
          }
        }
      };
      function Va(e, t, n, s, i, a, o) {
        return "function" == typeof (e = e.stateNode).shouldComponentUpdate ? e.shouldComponentUpdate(s, a, o) : !t.prototype || !t.prototype.isPureReactComponent || !ls(n, s) || !ls(i, a);
      }
      function Ha(e, t, n) {
        var s = false;
        var i = Ci;
        var a = t.contextType;
        if ("object" == typeof a && null !== a) {
          a = Sa(a);
        } else {
          i = Li(t) ? Oi : Ni.current;
          a = (s = null != (s = t.contextTypes)) ? Pi(e, i) : Ci;
        }
        t = new t(n, a);
        e.memoizedState = null !== t.state && undefined !== t.state ? t.state : null;
        t.updater = Ga;
        e.stateNode = t;
        t._reactInternals = e;
        if (s) {
          (e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = i;
          e.__reactInternalMemoizedMaskedChildContext = a;
        }
        return t;
      }
      function Ka(e, t, n, s) {
        e = t.state;
        if ("function" == typeof t.componentWillReceiveProps) {
          t.componentWillReceiveProps(n, s);
        }
        if ("function" == typeof t.UNSAFE_componentWillReceiveProps) {
          t.UNSAFE_componentWillReceiveProps(n, s);
        }
        if (t.state !== e) {
          Ga.enqueueReplaceState(t, t.state, null);
        }
      }
      function Wa(e, t, n, s) {
        var i = e.stateNode;
        i.props = n;
        i.state = e.memoizedState;
        i.refs = Ua;
        Pa(e);
        var a = t.contextType;
        if ("object" == typeof a && null !== a) {
          i.context = Sa(a);
        } else {
          a = Li(t) ? Oi : Ni.current;
          i.context = Pi(e, a);
        }
        i.state = e.memoizedState;
        if ("function" == typeof (a = t.getDerivedStateFromProps)) {
          Ba(e, t, a, n);
          i.state = e.memoizedState;
        }
        if (!("function" == typeof t.getDerivedStateFromProps || "function" == typeof i.getSnapshotBeforeUpdate || "function" != typeof i.UNSAFE_componentWillMount && "function" != typeof i.componentWillMount)) {
          t = i.state;
          if ("function" == typeof i.componentWillMount) {
            i.componentWillMount();
          }
          if ("function" == typeof i.UNSAFE_componentWillMount) {
            i.UNSAFE_componentWillMount();
          }
          if (t !== i.state) {
            Ga.enqueueReplaceState(i, i.state, null);
          }
          Da(e, n, i, s);
          i.state = e.memoizedState;
        }
        if ("function" == typeof i.componentDidMount) {
          e.flags |= 4194308;
        }
      }
      function za(e, t, n) {
        if (null !== (e = n.ref) && "function" != typeof e && "object" != typeof e) {
          if (n._owner) {
            if (n = n._owner) {
              if (1 !== n.tag) {
                throw Error(a(309));
              }
              var s = n.stateNode;
            }
            if (!s) {
              throw Error(a(147, e));
            }
            var o = "" + e;
            return null !== t && null !== t.ref && "function" == typeof t.ref && t.ref._stringRef === o ? t.ref : (t = function (e) {
              var t = s.refs;
              if (t === Ua) {
                t = s.refs = {};
              }
              if (null === e) {
                delete t[o];
              } else {
                t[o] = e;
              }
            }, t._stringRef = o, t);
          }
          if ("string" != typeof e) {
            throw Error(a(284));
          }
          if (!n._owner) {
            throw Error(a(290, e));
          }
        }
        return e;
      }
      function Ya(e, t) {
        e = Object.prototype.toString.call(t);
        throw Error(a(31, "[object Object]" === e ? "object with keys {" + Object.keys(t).join(", ") + "}" : e));
      }
      function $a(e) {
        0;
        return e._init(e._payload);
      }
      function qa(e) {
        function t(t, n) {
          if (e) {
            var s = t.deletions;
            if (null === s) {
              t.deletions = [n];
              t.flags |= 16;
            } else {
              s.push(n);
            }
          }
        }
        function n(n, s) {
          if (!e) {
            return null;
          }
          for (; null !== s;) {
            t(n, s);
            s = s.sibling;
          }
          return null;
        }
        function s(e, t) {
          for (e = new Map(); null !== t;) {
            if (null !== t.key) {
              e.set(t.key, t);
            } else {
              e.set(t.index, t);
            }
            t = t.sibling;
          }
          return e;
        }
        function i(e, t) {
          (e = Mc(e, t)).index = 0;
          e.sibling = null;
          return e;
        }
        function o(t, n, s) {
          t.index = s;
          return e ? null !== (s = t.alternate) ? (s = s.index) < n ? (t.flags |= 2, n) : s : (t.flags |= 2, n) : (t.flags |= 1048576, n);
        }
        function r(t) {
          if (e && null === t.alternate) {
            t.flags |= 2;
          }
          return t;
        }
        function l(e, t, n, s) {
          return null === t || 6 !== t.tag ? ((t = Fc(n, e.mode, s)).return = e, t) : ((t = i(t, n)).return = e, t);
        }
        function c(e, t, n, s) {
          var a = n.type;
          return a === I ? d(e, t, n.props.children, s, n.key) : null !== t && (t.elementType === a || "object" == typeof a && null !== a && a.$$typeof === L && $a(a) === t.type) ? ((s = i(t, n.props)).ref = za(e, t, n), s.return = e, s) : ((s = Rc(n.type, n.key, n.props, null, e.mode, s)).ref = za(e, t, n), s.return = e, s);
        }
        function u(e, t, n, s) {
          return null === t || 4 !== t.tag || t.stateNode.containerInfo !== n.containerInfo || t.stateNode.implementation !== n.implementation ? ((t = Uc(n, e.mode, s)).return = e, t) : ((t = i(t, n.children || [])).return = e, t);
        }
        function d(e, t, n, s, a) {
          return null === t || 7 !== t.tag ? ((t = kc(n, e.mode, s, a)).return = e, t) : ((t = i(t, n)).return = e, t);
        }
        function m(e, t, n) {
          if ("string" == typeof t && "" !== t || "number" == typeof t) {
            (t = Fc("" + t, e.mode, n)).return = e;
            return t;
          }
          if ("object" == typeof t && null !== t) {
            switch (t.$$typeof) {
              case T:
                (n = Rc(t.type, t.key, t.props, null, e.mode, n)).ref = za(e, null, t);
                n.return = e;
                return n;
              case E:
                (t = Uc(t, e.mode, n)).return = e;
                return t;
              case L:
                0;
                return m(e, t._init(t._payload), n);
            }
            if (te(t) || R(t)) {
              (t = kc(t, e.mode, n, null)).return = e;
              return t;
            }
            Ya(e, t);
          }
          return null;
        }
        function h(e, t, n, s) {
          var i = null !== t ? t.key : null;
          if ("string" == typeof n && "" !== n || "number" == typeof n) {
            return null !== i ? null : l(e, t, "" + n, s);
          }
          if ("object" == typeof n && null !== n) {
            switch (n.$$typeof) {
              case T:
                return n.key === i ? c(e, t, n, s) : null;
              case E:
                return n.key === i ? u(e, t, n, s) : null;
              case L:
                return h(e, t, (i = n._init)(n._payload), s);
            }
            if (te(n) || R(n)) {
              return null !== i ? null : d(e, t, n, s, null);
            }
            Ya(e, n);
          }
          return null;
        }
        function g(e, t, n, s, i) {
          if ("string" == typeof s && "" !== s || "number" == typeof s) {
            return l(t, e = e.get(n) || null, "" + s, i);
          }
          if ("object" == typeof s && null !== s) {
            switch (s.$$typeof) {
              case T:
                return c(t, e = e.get(null === s.key ? n : s.key) || null, s, i);
              case E:
                return u(t, e = e.get(null === s.key ? n : s.key) || null, s, i);
              case L:
                0;
                return g(e, t, n, s._init(s._payload), i);
            }
            if (te(s) || R(s)) {
              return d(t, e = e.get(n) || null, s, i, null);
            }
            Ya(t, s);
          }
          return null;
        }
        function p(i, a, r, l) {
          var c = null;
          var u = null;
          var d = a;
          var p = a = 0;
          for (var f = null; null !== d && p < r.length; p++) {
            if (d.index > p) {
              f = d;
              d = null;
            } else {
              f = d.sibling;
            }
            var x = h(i, d, r[p], l);
            if (null === x) {
              if (null === d) {
                d = f;
              }
              break;
            }
            if (e && d && null === x.alternate) {
              t(i, d);
            }
            a = o(x, a, p);
            if (null === u) {
              c = x;
            } else {
              u.sibling = x;
            }
            u = x;
            d = f;
          }
          if (p === r.length) {
            n(i, d);
            if (ia) {
              Zi(i, p);
            }
            return c;
          }
          if (null === d) {
            for (; p < r.length; p++) {
              if (null !== (d = m(i, r[p], l))) {
                a = o(d, a, p);
                if (null === u) {
                  c = d;
                } else {
                  u.sibling = d;
                }
                u = d;
              }
            }
            if (ia) {
              Zi(i, p);
            }
            return c;
          }
          for (d = s(i, d); p < r.length; p++) {
            if (null !== (f = g(d, i, p, r[p], l))) {
              if (e && null !== f.alternate) {
                d.delete(null === f.key ? p : f.key);
              }
              a = o(f, a, p);
              if (null === u) {
                c = f;
              } else {
                u.sibling = f;
              }
              u = f;
            }
          }
          if (e) {
            d.forEach(function (e) {
              return t(i, e);
            });
          }
          if (ia) {
            Zi(i, p);
          }
          return c;
        }
        function f(i, r, l, c) {
          var u = R(l);
          if ("function" != typeof u) {
            throw Error(a(150));
          }
          if (null == (l = u.call(l))) {
            throw Error(a(151));
          }
          var d = u = null;
          var p = r;
          var f = r = 0;
          var x = null;
          for (var v = l.next(); null !== p && !v.done; f++, v = l.next()) {
            if (p.index > f) {
              x = p;
              p = null;
            } else {
              x = p.sibling;
            }
            var _ = h(i, p, v.value, c);
            if (null === _) {
              if (null === p) {
                p = x;
              }
              break;
            }
            if (e && p && null === _.alternate) {
              t(i, p);
            }
            r = o(_, r, f);
            if (null === d) {
              u = _;
            } else {
              d.sibling = _;
            }
            d = _;
            p = x;
          }
          if (v.done) {
            n(i, p);
            if (ia) {
              Zi(i, f);
            }
            return u;
          }
          if (null === p) {
            for (; !v.done; f++, v = l.next()) {
              if (null !== (v = m(i, v.value, c))) {
                r = o(v, r, f);
                if (null === d) {
                  u = v;
                } else {
                  d.sibling = v;
                }
                d = v;
              }
            }
            if (ia) {
              Zi(i, f);
            }
            return u;
          }
          for (p = s(i, p); !v.done; f++, v = l.next()) {
            if (null !== (v = g(p, i, f, v.value, c))) {
              if (e && null !== v.alternate) {
                p.delete(null === v.key ? f : v.key);
              }
              r = o(v, r, f);
              if (null === d) {
                u = v;
              } else {
                d.sibling = v;
              }
              d = v;
            }
          }
          if (e) {
            p.forEach(function (e) {
              return t(i, e);
            });
          }
          if (ia) {
            Zi(i, f);
          }
          return u;
        }
        return function e(s, a, o, l) {
          if ("object" == typeof o && null !== o && o.type === I && null === o.key) {
            o = o.props.children;
          }
          if ("object" == typeof o && null !== o) {
            switch (o.$$typeof) {
              case T:
                e: {
                  var c = o.key;
                  for (var u = a; null !== u;) {
                    if (u.key === c) {
                      if ((c = o.type) === I) {
                        if (7 === u.tag) {
                          n(s, u.sibling);
                          (a = i(u, o.props.children)).return = s;
                          s = a;
                          break e;
                        }
                      } else if (u.elementType === c || "object" == typeof c && null !== c && c.$$typeof === L && $a(c) === u.type) {
                        n(s, u.sibling);
                        (a = i(u, o.props)).ref = za(s, u, o);
                        a.return = s;
                        s = a;
                        break e;
                      }
                      n(s, u);
                      break;
                    }
                    t(s, u);
                    u = u.sibling;
                  }
                  if (o.type === I) {
                    (a = kc(o.props.children, s.mode, l, o.key)).return = s;
                    s = a;
                  } else {
                    (l = Rc(o.type, o.key, o.props, null, s.mode, l)).ref = za(s, a, o);
                    l.return = s;
                    s = l;
                  }
                }
                return r(s);
              case E:
                e: {
                  for (u = o.key; null !== a;) {
                    if (a.key === u) {
                      if (4 === a.tag && a.stateNode.containerInfo === o.containerInfo && a.stateNode.implementation === o.implementation) {
                        n(s, a.sibling);
                        (a = i(a, o.children || [])).return = s;
                        s = a;
                        break e;
                      }
                      n(s, a);
                      break;
                    }
                    t(s, a);
                    a = a.sibling;
                  }
                  (a = Uc(o, s.mode, l)).return = s;
                  s = a;
                }
                return r(s);
              case L:
                return e(s, a, (u = o._init)(o._payload), l);
            }
            if (te(o)) {
              return p(s, a, o, l);
            }
            if (R(o)) {
              return f(s, a, o, l);
            }
            Ya(s, o);
          }
          return "string" == typeof o && "" !== o || "number" == typeof o ? (o = "" + o, null !== a && 6 === a.tag ? (n(s, a.sibling), (a = i(a, o)).return = s, s = a) : (n(s, a), (a = Fc(o, s.mode, l)).return = s, s = a), r(s)) : n(s, a);
        };
      }
      var Xa = qa(true);
      var Qa = qa(false);
      var Za = {};
      var Ja = {
        current: Za
      };
      var eo = {
        current: Za
      };
      var to = {
        current: Za
      };
      function no(e) {
        if (e === Za) {
          throw Error(a(174));
        }
        return e;
      }
      function so(e, t) {
        ji(to, t);
        ji(eo, e);
        ji(Ja, Za);
        switch (e = t.nodeType) {
          case 9:
          case 11:
            t = (t = t.documentElement) ? t.namespaceURI : true || false ? re("") : false && false ? "http://www.w3.org/1999/xhtml" : null;
            break;
          default:
            t = null == (t = (e = 8 === e ? t.parentNode : t).namespaceURI || null) || "http://www.w3.org/1999/xhtml" === (t = (e = 8 === e ? t.parentNode : t).namespaceURI || null) ? re(e = e.tagName) : "http://www.w3.org/2000/svg" === (t = (e = 8 === e ? t.parentNode : t).namespaceURI || null) && "foreignObject" === (e = e.tagName) ? "http://www.w3.org/1999/xhtml" : t = (e = 8 === e ? t.parentNode : t).namespaceURI || null;
        }
        Si(Ja);
        ji(Ja, t);
      }
      function io() {
        Si(Ja);
        Si(eo);
        Si(to);
      }
      function ao(e) {
        no(to.current);
        var t = no(Ja.current);
        var n = null == t || "http://www.w3.org/1999/xhtml" === t ? re(e.type) : "http://www.w3.org/2000/svg" === t && "foreignObject" === e.type ? "http://www.w3.org/1999/xhtml" : t;
        if (t !== n) {
          ji(eo, e);
          ji(Ja, n);
        }
      }
      function oo(e) {
        if (eo.current === e) {
          Si(Ja);
          Si(eo);
        }
      }
      var ro = {
        current: 0
      };
      function lo(e) {
        for (var t = e; null !== t;) {
          if (13 === t.tag) {
            var n = t.memoizedState;
            if (null !== n && (null === (n = n.dehydrated) || "$?" === n.data || "$!" === n.data)) {
              return t;
            }
          } else if (19 === t.tag && undefined !== t.memoizedProps.revealOrder) {
            if (0 != (128 & t.flags)) {
              return t;
            }
          } else if (null !== t.child) {
            t.child.return = t;
            t = t.child;
            continue;
          }
          if (t === e) {
            break;
          }
          for (; null === t.sibling;) {
            if (null === t.return || t.return === e) {
              return null;
            }
            t = t.return;
          }
          t.sibling.return = t.return;
          t = t.sibling;
        }
        return null;
      }
      var co = [];
      function uo() {
        for (var e = 0; e < co.length; e++) {
          co[e]._workInProgressVersionPrimary = null;
        }
        co.length = 0;
      }
      var mo = b.ReactCurrentDispatcher;
      var ho = b.ReactCurrentBatchConfig;
      var go = 0;
      var po = null;
      var fo = null;
      var xo = null;
      var vo = false;
      var _o = false;
      var bo = 0;
      var To = 0;
      function Eo() {
        throw Error(a(321));
      }
      function Io(e, t) {
        if (null === t) {
          return false;
        }
        for (var n = 0; n < t.length && n < e.length; n++) {
          if (!rs(e[n], t[n])) {
            return false;
          }
        }
        return true;
      }
      function yo(e, t, n, s, i, o) {
        go = o;
        po = t;
        t.memoizedState = null;
        t.updateQueue = null;
        t.lanes = 0;
        mo.current = null === e || null === e.memoizedState ? rr : lr;
        e = n(s, i);
        if (_o) {
          o = 0;
          do {
            _o = false;
            bo = 0;
            if (25 <= o) {
              throw Error(a(301));
            }
            o += 1;
            xo = fo = null;
            t.updateQueue = null;
            mo.current = cr;
            e = n(s, i);
          } while (_o);
        }
        mo.current = or;
        t = null !== fo && null !== fo.next;
        go = 0;
        xo = fo = po = null;
        vo = false;
        if (t) {
          throw Error(a(300));
        }
        return e;
      }
      function So() {
        var e = 0 !== bo;
        bo = 0;
        return e;
      }
      function jo() {
        var e = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (null === xo) {
          po.memoizedState = xo = e;
        } else {
          xo = xo.next = e;
        }
        return xo;
      }
      function Co() {
        if (null === fo) {
          var e = po.alternate;
          e = null !== e ? e.memoizedState : null;
        } else {
          e = fo.next;
        }
        var t = null === xo ? po.memoizedState : xo.next;
        if (null !== t) {
          xo = t;
          fo = e;
        } else {
          if (null === e) {
            throw Error(a(310));
          }
          e = {
            memoizedState: (fo = e).memoizedState,
            baseState: fo.baseState,
            baseQueue: fo.baseQueue,
            queue: fo.queue,
            next: null
          };
          if (null === xo) {
            po.memoizedState = xo = e;
          } else {
            xo = xo.next = e;
          }
        }
        return xo;
      }
      function No(e, t) {
        return "function" == typeof t ? t(e) : t;
      }
      function wo(e) {
        var t = Co();
        var n = t.queue;
        if (null === n) {
          throw Error(a(311));
        }
        n.lastRenderedReducer = e;
        var s = fo;
        var i = s.baseQueue;
        var o = n.pending;
        if (null !== o) {
          if (null !== i) {
            var r = i.next;
            i.next = o.next;
            o.next = r;
          }
          s.baseQueue = i = o;
          n.pending = null;
        }
        if (null !== i) {
          o = i.next;
          s = s.baseState;
          var l = r = null;
          var c = null;
          var u = o;
          do {
            var d = u.lane;
            if ((go & d) === d) {
              if (null !== c) {
                c = c.next = {
                  lane: 0,
                  action: u.action,
                  hasEagerState: u.hasEagerState,
                  eagerState: u.eagerState,
                  next: null
                };
              }
              s = u.hasEagerState ? u.eagerState : e(s, u.action);
            } else {
              var m = {
                lane: d,
                action: u.action,
                hasEagerState: u.hasEagerState,
                eagerState: u.eagerState,
                next: null
              };
              if (null === c) {
                l = c = m;
                r = s;
              } else {
                c = c.next = m;
              }
              po.lanes |= d;
              Dl |= d;
            }
            u = u.next;
          } while (null !== u && u !== o);
          if (null === c) {
            r = s;
          } else {
            c.next = l;
          }
          if (!rs(s, t.memoizedState)) {
            br = true;
          }
          t.memoizedState = s;
          t.baseState = r;
          t.baseQueue = c;
          n.lastRenderedState = s;
        }
        if (null !== (e = n.interleaved)) {
          i = e;
          do {
            o = i.lane;
            po.lanes |= o;
            Dl |= o;
            i = i.next;
          } while (i !== e);
        } else if (null === i) {
          n.lanes = 0;
        }
        return [t.memoizedState, n.dispatch];
      }
      function Oo(e) {
        var t = Co();
        var n = t.queue;
        if (null === n) {
          throw Error(a(311));
        }
        n.lastRenderedReducer = e;
        var s = n.dispatch;
        var i = n.pending;
        var o = t.memoizedState;
        if (null !== i) {
          n.pending = null;
          var r = i = i.next;
          do {
            o = e(o, r.action);
            r = r.next;
          } while (r !== i);
          if (!rs(o, t.memoizedState)) {
            br = true;
          }
          t.memoizedState = o;
          if (null === t.baseQueue) {
            t.baseState = o;
          }
          n.lastRenderedState = o;
        }
        return [o, s];
      }
      function Po() {}
      function Lo(e, t) {
        var n = po;
        var s = Co();
        var i = t();
        var o = !rs(s.memoizedState, i);
        if (o) {
          s.memoizedState = i;
          br = true;
        }
        s = s.queue;
        Vo(2048, 8, Ro.bind(null, n, s, e), [e]);
        if (s.getSnapshot !== t || o || null !== xo && 1 & xo.memoizedState.tag) {
          n.flags |= 2048;
          Uo(9, Mo.bind(null, n, s, i, t), undefined, null);
          if (null === Ol) {
            throw Error(a(349));
          }
          if (!(0 != (30 & go))) {
            Ao(n, t, i);
          }
        }
        return i;
      }
      function Ao(e, t, n) {
        e.flags |= 16384;
        e = {
          getSnapshot: t,
          value: n
        };
        if (null === (t = po.updateQueue)) {
          t = {
            lastEffect: null,
            stores: null
          };
          po.updateQueue = t;
          t.stores = [e];
        } else if (null === (n = t.stores)) {
          t.stores = [e];
        } else {
          n.push(e);
        }
      }
      function Mo(e, t, n, s) {
        t.value = n;
        t.getSnapshot = s;
        if (ko(t)) {
          Do(e);
        }
      }
      function Ro(e, t, n) {
        return n(function () {
          if (ko(t)) {
            Do(e);
          }
        });
      }
      function ko(e) {
        var t = e.getSnapshot;
        e = e.value;
        try {
          var n = t();
          return !rs(e, n);
        } catch (e) {
          return true;
        }
      }
      function Do(e) {
        var t = wa(e, 1);
        if (null !== t) {
          sc(t, e, 1, -1);
        }
      }
      function Fo(e) {
        var t = jo();
        if ("function" == typeof e) {
          e = e();
        }
        t.memoizedState = t.baseState = e;
        e = {
          pending: null,
          interleaved: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: No,
          lastRenderedState: e
        };
        t.queue = e;
        e = e.dispatch = nr.bind(null, po, e);
        return [t.memoizedState, e];
      }
      function Uo(e, t, n, s) {
        e = {
          tag: e,
          create: t,
          destroy: n,
          deps: s,
          next: null
        };
        if (null === (t = po.updateQueue)) {
          t = {
            lastEffect: null,
            stores: null
          };
          po.updateQueue = t;
          t.lastEffect = e.next = e;
        } else if (null === (n = t.lastEffect)) {
          t.lastEffect = e.next = e;
        } else {
          s = n.next;
          n.next = e;
          e.next = s;
          t.lastEffect = e;
        }
        return e;
      }
      function Bo() {
        return Co().memoizedState;
      }
      function Go(e, t, n, s) {
        var i = jo();
        po.flags |= e;
        i.memoizedState = Uo(1 | t, n, undefined, undefined === s ? null : s);
      }
      function Vo(e, t, n, s) {
        var i = Co();
        s = undefined === s ? null : s;
        var a = undefined;
        if (null !== fo) {
          var o = fo.memoizedState;
          a = o.destroy;
          if (null !== s && Io(s, o.deps)) {
            return void (i.memoizedState = Uo(t, n, a, s));
          }
        }
        po.flags |= e;
        i.memoizedState = Uo(1 | t, n, a, s);
      }
      function Ho(e, t) {
        return Go(8390656, 8, e, t);
      }
      function Ko(e, t) {
        return Vo(2048, 8, e, t);
      }
      function Wo(e, t) {
        return Vo(4, 2, e, t);
      }
      function zo(e, t) {
        return Vo(4, 4, e, t);
      }
      function Yo(e, t) {
        return "function" == typeof t ? (e = e(), t(e), function () {
          t(null);
        }) : null != t ? (e = e(), t.current = e, function () {
          t.current = null;
        }) : undefined;
      }
      function $o(e, t, n) {
        n = null != n ? n.concat([e]) : null;
        return Vo(4, 4, Yo.bind(null, t, e), n);
      }
      function qo() {}
      function Xo(e, t) {
        var n = Co();
        t = undefined === t ? null : t;
        var s = n.memoizedState;
        return null !== s && null !== t && Io(t, s[1]) ? s[0] : (n.memoizedState = [e, t], e);
      }
      function Qo(e, t) {
        var n = Co();
        t = undefined === t ? null : t;
        var s = n.memoizedState;
        return null !== s && null !== t && Io(t, s[1]) ? s[0] : (e = e(), n.memoizedState = [e, t], e);
      }
      function Zo(e, t, n) {
        return 0 == (21 & go) ? (e.baseState && (e.baseState = false, br = true), e.memoizedState = n) : (rs(n, t) || (n = pt(), po.lanes |= n, Dl |= n, e.baseState = true), t);
      }
      function Jo(e, t) {
        var n = _t;
        _t = 0 !== n && 4 > n ? n : 4;
        e(true);
        var s = ho.transition;
        ho.transition = {};
        try {
          e(false);
          t();
        } finally {
          _t = n;
          ho.transition = s;
        }
      }
      function er() {
        return Co().memoizedState;
      }
      function tr(e, t, n) {
        var s = nc(e);
        n = {
          lane: s,
          action: n,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (sr(e)) {
          ir(t, n);
        } else if (null !== (n = Na(e, t, n, s))) {
          sc(n, e, s, tc());
          ar(n, t, s);
        }
      }
      function nr(e, t, n) {
        var s = nc(e);
        var i = {
          lane: s,
          action: n,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (sr(e)) {
          ir(t, i);
        } else {
          var a = e.alternate;
          if (0 === e.lanes && (null === a || 0 === a.lanes) && null !== (a = t.lastRenderedReducer)) {
            try {
              var o = t.lastRenderedState;
              var r = a(o, n);
              i.hasEagerState = true;
              i.eagerState = r;
              if (rs(r, o)) {
                var l = t.interleaved;
                if (null === l) {
                  i.next = i;
                  Ca(t);
                } else {
                  i.next = l.next;
                  l.next = i;
                }
                return void (t.interleaved = i);
              }
            } catch (e) {}
          }
          if (null !== (n = Na(e, t, i, s))) {
            sc(n, e, s, i = tc());
            ar(n, t, s);
          }
        }
      }
      function sr(e) {
        var t = e.alternate;
        return e === po || null !== t && t === po;
      }
      function ir(e, t) {
        _o = vo = true;
        var n = e.pending;
        if (null === n) {
          t.next = t;
        } else {
          t.next = n.next;
          n.next = t;
        }
        e.pending = t;
      }
      function ar(e, t, n) {
        if (0 != (4194240 & n)) {
          var s = t.lanes;
          n |= s &= e.pendingLanes;
          t.lanes = n;
          vt(e, n);
        }
      }
      var or = {
        readContext: Sa,
        useCallback: Eo,
        useContext: Eo,
        useEffect: Eo,
        useImperativeHandle: Eo,
        useInsertionEffect: Eo,
        useLayoutEffect: Eo,
        useMemo: Eo,
        useReducer: Eo,
        useRef: Eo,
        useState: Eo,
        useDebugValue: Eo,
        useDeferredValue: Eo,
        useTransition: Eo,
        useMutableSource: Eo,
        useSyncExternalStore: Eo,
        useId: Eo,
        unstable_isNewReconciler: false
      };
      var rr = {
        readContext: Sa,
        useCallback: function (e, t) {
          jo().memoizedState = [e, undefined === t ? null : t];
          return e;
        },
        useContext: Sa,
        useEffect: Ho,
        useImperativeHandle: function (e, t, n) {
          n = null != n ? n.concat([e]) : null;
          return Go(4194308, 4, Yo.bind(null, t, e), n);
        },
        useLayoutEffect: function (e, t) {
          return Go(4194308, 4, e, t);
        },
        useInsertionEffect: function (e, t) {
          return Go(4, 2, e, t);
        },
        useMemo: function (e, t) {
          var n = jo();
          t = undefined === t ? null : t;
          e = e();
          n.memoizedState = [e, t];
          return e;
        },
        useReducer: function (e, t, n) {
          var s = jo();
          t = undefined !== n ? n(t) : t;
          s.memoizedState = s.baseState = t;
          e = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: e,
            lastRenderedState: t
          };
          s.queue = e;
          e = e.dispatch = tr.bind(null, po, e);
          return [s.memoizedState, e];
        },
        useRef: function (e) {
          e = {
            current: e
          };
          return jo().memoizedState = e;
        },
        useState: Fo,
        useDebugValue: qo,
        useDeferredValue: function (e) {
          return jo().memoizedState = e;
        },
        useTransition: function () {
          var e = Fo(false);
          var t = e[0];
          e = Jo.bind(null, e[1]);
          jo().memoizedState = e;
          return [t, e];
        },
        useMutableSource: function () {},
        useSyncExternalStore: function (e, t, n) {
          var s = po;
          var i = jo();
          if (ia) {
            if (undefined === n) {
              throw Error(a(407));
            }
            n = n();
          } else {
            n = t();
            if (null === Ol) {
              throw Error(a(349));
            }
            if (!(0 != (30 & go))) {
              Ao(s, t, n);
            }
          }
          i.memoizedState = n;
          var o = {
            value: n,
            getSnapshot: t
          };
          i.queue = o;
          Go(8390656, 8, Ro.bind(null, s, o, e), [e]);
          s.flags |= 2048;
          Uo(9, Mo.bind(null, s, o, n, t), undefined, null);
          return n;
        },
        useId: function () {
          var e = jo();
          var t = Ol.identifierPrefix;
          if (ia) {
            var n = Qi;
            t = ":" + t + "R" + (n = (Xi & ~(1 << 32 - ot(Xi) - 1)).toString(32) + n);
            if (0 < (n = bo++)) {
              t += "H" + n.toString(32);
            }
            t += ":";
          } else {
            t = ":" + t + "r" + (n = To++).toString(32) + ":";
          }
          return e.memoizedState = t;
        },
        unstable_isNewReconciler: false
      };
      var lr = {
        readContext: Sa,
        useCallback: Xo,
        useContext: Sa,
        useEffect: Ko,
        useImperativeHandle: $o,
        useInsertionEffect: Wo,
        useLayoutEffect: zo,
        useMemo: Qo,
        useReducer: wo,
        useRef: Bo,
        useState: function () {
          return wo(No);
        },
        useDebugValue: qo,
        useDeferredValue: function (e) {
          return Zo(Co(), fo.memoizedState, e);
        },
        useTransition: function () {
          return [wo(No)[0], Co().memoizedState];
        },
        useMutableSource: Po,
        useSyncExternalStore: Lo,
        useId: er,
        unstable_isNewReconciler: false
      };
      var cr = {
        readContext: Sa,
        useCallback: Xo,
        useContext: Sa,
        useEffect: Ko,
        useImperativeHandle: $o,
        useInsertionEffect: Wo,
        useLayoutEffect: zo,
        useMemo: Qo,
        useReducer: Oo,
        useRef: Bo,
        useState: function () {
          return Oo(No);
        },
        useDebugValue: qo,
        useDeferredValue: function (e) {
          var t = Co();
          return null === fo ? t.memoizedState = e : Zo(t, fo.memoizedState, e);
        },
        useTransition: function () {
          return [Oo(No)[0], Co().memoizedState];
        },
        useMutableSource: Po,
        useSyncExternalStore: Lo,
        useId: er,
        unstable_isNewReconciler: false
      };
      function ur(e, t) {
        try {
          var n = "";
          var s = t;
          do {
            n += G(s);
            s = s.return;
          } while (s);
          var i = n;
        } catch (e) {
          i = "\nError generating stack: " + e.message + "\n" + e.stack;
        }
        return {
          value: e,
          source: t,
          stack: i,
          digest: null
        };
      }
      function dr(e, t, n) {
        return {
          value: e,
          source: null,
          stack: null != n ? n : null,
          digest: null != t ? t : null
        };
      }
      function mr(e, t) {
        try {
          console.error(t.value);
        } catch (e) {
          setTimeout(function () {
            throw e;
          });
        }
      }
      var hr = "function" == typeof WeakMap ? WeakMap : Map;
      function gr(e, t, n) {
        (n = {
          eventTime: -1,
          lane: n,
          tag: 0,
          payload: null,
          callback: null,
          next: null
        }).tag = 3;
        n.payload = {
          element: null
        };
        var s = t.value;
        n.callback = function () {
          if (!Wl) {
            Wl = true;
            zl = s;
          }
          mr(0, t);
        };
        return n;
      }
      function pr(e, t, n) {
        (n = {
          eventTime: -1,
          lane: n,
          tag: 0,
          payload: null,
          callback: null,
          next: null
        }).tag = 3;
        var s = e.type.getDerivedStateFromError;
        if ("function" == typeof s) {
          var i = t.value;
          n.payload = function () {
            return s(i);
          };
          n.callback = function () {
            mr(0, t);
          };
        }
        var a = e.stateNode;
        if (null !== a && "function" == typeof a.componentDidCatch) {
          n.callback = function () {
            mr(0, t);
            if ("function" != typeof s) {
              if (null === Yl) {
                Yl = new Set([this]);
              } else {
                Yl.add(this);
              }
            }
            var e = t.stack;
            this.componentDidCatch(t.value, {
              componentStack: null !== e ? e : ""
            });
          };
        }
        return n;
      }
      function fr(e, t, n) {
        var s = e.pingCache;
        if (null === s) {
          s = e.pingCache = new hr();
          var i = new Set();
          s.set(t, i);
        } else if (undefined === (i = s.get(t))) {
          i = new Set();
          s.set(t, i);
        }
        if (!i.has(n)) {
          i.add(n);
          e = jc.bind(null, e, t, n);
          t.then(e, e);
        }
      }
      function xr(e) {
        do {
          var t;
          if (t = 13 === e.tag) {
            t = null === (t = e.memoizedState) || null !== t.dehydrated;
          }
          if (t) {
            return e;
          }
          e = e.return;
        } while (null !== e);
        return null;
      }
      function vr(e, t, n, s, i) {
        return 0 == (1 & e.mode) ? (e === t ? e.flags |= 65536 : (e.flags |= 128, n.flags |= 131072, n.flags &= -52805, 1 === n.tag && (null === n.alternate ? n.tag = 17 : ((t = {
          eventTime: -1,
          lane: 1,
          tag: 0,
          payload: null,
          callback: null,
          next: null
        }).tag = 2, Ma(n, t, 1))), n.lanes |= 1), e) : (e.flags |= 65536, e.lanes = i, e);
      }
      var _r = b.ReactCurrentOwner;
      var br = false;
      function Tr(e, t, n, s) {
        t.child = null === e ? Qa(t, null, n, s) : Xa(t, e.child, n, s);
      }
      function Er(e, t, n, s, i) {
        n = n.render;
        var a = t.ref;
        ya(t, i);
        s = yo(e, t, n, s, a, i);
        n = So();
        return null === e || br ? (ia && n && ea(t), t.flags |= 1, Tr(e, t, s, i), t.child) : (t.updateQueue = e.updateQueue, t.flags &= -2053, e.lanes &= ~i, Wr(e, t, i));
      }
      function Ir(e, t, n, s, i) {
        if (null === e) {
          var a = n.type;
          return "function" != typeof a || Ac(a) || undefined !== a.defaultProps || null !== n.compare || undefined !== n.defaultProps ? ((e = Rc(n.type, null, s, t, t.mode, i)).ref = t.ref, e.return = t, t.child = e) : (t.tag = 15, t.type = a, yr(e, t, a, s, i));
        }
        a = e.child;
        if (0 == (e.lanes & i)) {
          var o = a.memoizedProps;
          if ((n = null !== (n = n.compare) ? n : ls)(o, s) && e.ref === t.ref) {
            return Wr(e, t, i);
          }
        }
        t.flags |= 1;
        (e = Mc(a, s)).ref = t.ref;
        e.return = t;
        return t.child = e;
      }
      function yr(e, t, n, s, i) {
        if (null !== e) {
          var a = e.memoizedProps;
          if (ls(a, s) && e.ref === t.ref) {
            br = false;
            t.pendingProps = s = a;
            if (0 == (e.lanes & i)) {
              t.lanes = e.lanes;
              return Wr(e, t, i);
            }
            if (0 != (131072 & e.flags)) {
              br = true;
            }
          }
        }
        return Cr(e, t, n, s, i);
      }
      function Sr(e, t, n) {
        var s = t.pendingProps;
        var i = s.children;
        var a = null !== e ? e.memoizedState : null;
        if ("hidden" === s.mode) {
          if (0 == (1 & t.mode)) {
            t.memoizedState = {
              baseLanes: 0,
              cachePool: null,
              transitions: null
            };
            ji(Ml, Al);
            Al |= n;
          } else {
            if (0 == (1073741824 & n)) {
              e = null !== a ? a.baseLanes | n : n;
              t.lanes = t.childLanes = 1073741824;
              t.memoizedState = {
                baseLanes: e,
                cachePool: null,
                transitions: null
              };
              t.updateQueue = null;
              ji(Ml, Al);
              Al |= e;
              return null;
            }
            t.memoizedState = {
              baseLanes: 0,
              cachePool: null,
              transitions: null
            };
            s = null !== a ? a.baseLanes : n;
            ji(Ml, Al);
            Al |= s;
          }
        } else {
          if (null !== a) {
            s = a.baseLanes | n;
            t.memoizedState = null;
          } else {
            s = n;
          }
          ji(Ml, Al);
          Al |= s;
        }
        Tr(e, t, i, n);
        return t.child;
      }
      function jr(e, t) {
        var n = t.ref;
        if (null === e && null !== n || null !== e && e.ref !== n) {
          t.flags |= 512;
          t.flags |= 2097152;
        }
      }
      function Cr(e, t, n, s, i) {
        var a = Li(n) ? Oi : Ni.current;
        a = Pi(t, a);
        ya(t, i);
        n = yo(e, t, n, s, a, i);
        s = So();
        return null === e || br ? (ia && s && ea(t), t.flags |= 1, Tr(e, t, n, i), t.child) : (t.updateQueue = e.updateQueue, t.flags &= -2053, e.lanes &= ~i, Wr(e, t, i));
      }
      function Nr(e, t, n, s, i) {
        if (Li(n)) {
          var a = true;
          ki(t);
        } else {
          a = false;
        }
        ya(t, i);
        if (null === t.stateNode) {
          Kr(e, t);
          Ha(t, n, s);
          Wa(t, n, s, i);
          s = true;
        } else if (null === e) {
          var o = t.stateNode;
          var r = t.memoizedProps;
          o.props = r;
          var l = o.context;
          var c = n.contextType;
          if ("object" == typeof c && null !== c) {
            c = Sa(c);
          } else {
            c = Pi(t, c = Li(n) ? Oi : Ni.current);
          }
          var u = n.getDerivedStateFromProps;
          var d = "function" == typeof u || "function" == typeof o.getSnapshotBeforeUpdate;
          if (!(d || "function" != typeof o.UNSAFE_componentWillReceiveProps && "function" != typeof o.componentWillReceiveProps)) {
            if (r !== s || l !== c) {
              Ka(t, o, s, c);
            }
          }
          Oa = false;
          var m = t.memoizedState;
          o.state = m;
          Da(t, s, o, i);
          l = t.memoizedState;
          if (r !== s || m !== l || wi.current || Oa) {
            if ("function" == typeof u) {
              Ba(t, n, u, s);
              l = t.memoizedState;
            }
            if (r = Oa || Va(t, n, r, s, m, l, c)) {
              if (!(d || "function" != typeof o.UNSAFE_componentWillMount && "function" != typeof o.componentWillMount)) {
                if ("function" == typeof o.componentWillMount) {
                  o.componentWillMount();
                }
                if ("function" == typeof o.UNSAFE_componentWillMount) {
                  o.UNSAFE_componentWillMount();
                }
              }
              if ("function" == typeof o.componentDidMount) {
                t.flags |= 4194308;
              }
            } else {
              if ("function" == typeof o.componentDidMount) {
                t.flags |= 4194308;
              }
              t.memoizedProps = s;
              t.memoizedState = l;
            }
            o.props = s;
            o.state = l;
            o.context = c;
            s = r;
          } else {
            if ("function" == typeof o.componentDidMount) {
              t.flags |= 4194308;
            }
            s = false;
          }
        } else {
          o = t.stateNode;
          La(e, t);
          r = t.memoizedProps;
          c = t.type === t.elementType ? r : fa(t.type, r);
          o.props = c;
          d = t.pendingProps;
          m = o.context;
          if ("object" == typeof (l = n.contextType) && null !== l) {
            l = Sa(l);
          } else {
            l = Pi(t, l = Li(n) ? Oi : Ni.current);
          }
          var h = n.getDerivedStateFromProps;
          if (!((u = "function" == typeof h || "function" == typeof o.getSnapshotBeforeUpdate) || "function" != typeof o.UNSAFE_componentWillReceiveProps && "function" != typeof o.componentWillReceiveProps)) {
            if (r !== d || m !== l) {
              Ka(t, o, s, l);
            }
          }
          Oa = false;
          m = t.memoizedState;
          o.state = m;
          Da(t, s, o, i);
          var g = t.memoizedState;
          if (r !== d || m !== g || wi.current || Oa) {
            if ("function" == typeof h) {
              Ba(t, n, h, s);
              g = t.memoizedState;
            }
            if (c = Oa || Va(t, n, c, s, m, g, l) || false) {
              if (!(u || "function" != typeof o.UNSAFE_componentWillUpdate && "function" != typeof o.componentWillUpdate)) {
                if ("function" == typeof o.componentWillUpdate) {
                  o.componentWillUpdate(s, g, l);
                }
                if ("function" == typeof o.UNSAFE_componentWillUpdate) {
                  o.UNSAFE_componentWillUpdate(s, g, l);
                }
              }
              if ("function" == typeof o.componentDidUpdate) {
                t.flags |= 4;
              }
              if ("function" == typeof o.getSnapshotBeforeUpdate) {
                t.flags |= 1024;
              }
            } else {
              if (!("function" != typeof o.componentDidUpdate || r === e.memoizedProps && m === e.memoizedState)) {
                t.flags |= 4;
              }
              if (!("function" != typeof o.getSnapshotBeforeUpdate || r === e.memoizedProps && m === e.memoizedState)) {
                t.flags |= 1024;
              }
              t.memoizedProps = s;
              t.memoizedState = g;
            }
            o.props = s;
            o.state = g;
            o.context = l;
            s = c;
          } else {
            if (!("function" != typeof o.componentDidUpdate || r === e.memoizedProps && m === e.memoizedState)) {
              t.flags |= 4;
            }
            if (!("function" != typeof o.getSnapshotBeforeUpdate || r === e.memoizedProps && m === e.memoizedState)) {
              t.flags |= 1024;
            }
            s = false;
          }
        }
        return wr(e, t, n, s, a, i);
      }
      function wr(e, t, n, s, i, a) {
        jr(e, t);
        var o = 0 != (128 & t.flags);
        if (!s && !o) {
          if (i) {
            Di(t, n, false);
          }
          return Wr(e, t, a);
        }
        s = t.stateNode;
        _r.current = t;
        var r = o && "function" != typeof n.getDerivedStateFromError ? null : s.render();
        t.flags |= 1;
        if (null !== e && o) {
          t.child = Xa(t, e.child, null, a);
          t.child = Xa(t, null, r, a);
        } else {
          Tr(e, t, r, a);
        }
        t.memoizedState = s.state;
        if (i) {
          Di(t, n, true);
        }
        return t.child;
      }
      function Or(e) {
        var t = e.stateNode;
        if (t.pendingContext) {
          Mi(0, t.pendingContext, t.pendingContext !== t.context);
        } else if (t.context) {
          Mi(0, t.context, false);
        }
        so(e, t.containerInfo);
      }
      function Pr(e, t, n, s, i) {
        ha();
        ga(i);
        t.flags |= 256;
        Tr(e, t, n, s);
        return t.child;
      }
      var Lr;
      var Ar;
      var Mr;
      var Rr;
      var kr = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0
      };
      function Dr(e) {
        return {
          baseLanes: e,
          cachePool: null,
          transitions: null
        };
      }
      function Fr(e, t, n) {
        var s;
        var i = t.pendingProps;
        var o = ro.current;
        var r = false;
        var l = 0 != (128 & t.flags);
        if (!(s = l)) {
          s = (null === e || null !== e.memoizedState) && 0 != (2 & o);
        }
        if (s) {
          r = true;
          t.flags &= -129;
        } else if (!(null !== e && null === e.memoizedState)) {
          o |= 1;
        }
        ji(ro, 1 & o);
        if (null === e) {
          ca(t);
          return null !== (e = t.memoizedState) && null !== (e = e.dehydrated) ? (0 == (1 & t.mode) ? t.lanes = 1 : "$!" === e.data ? t.lanes = 8 : t.lanes = 1073741824, null) : (l = i.children, e = i.fallback, r ? (i = t.mode, r = t.child, l = {
            mode: "hidden",
            children: l
          }, 0 == (1 & i) && null !== r ? (r.childLanes = 0, r.pendingProps = l) : r = Dc(l, i, 0, null), e = kc(e, i, n, null), r.return = t, e.return = t, r.sibling = e, t.child = r, t.child.memoizedState = {
            baseLanes: n,
            cachePool: null,
            transitions: null
          }, t.memoizedState = kr, e) : Ur(t, l));
        }
        if (null !== (o = e.memoizedState) && null !== (s = o.dehydrated)) {
          return function (e, t, n, s, i, o, r) {
            if (n) {
              return 256 & t.flags ? (t.flags &= -257, Br(e, t, r, s = {
                value: Error(a(422)),
                source: null,
                stack: false ? undefined : null,
                digest: false ? undefined : null
              })) : null !== t.memoizedState ? (t.child = e.child, t.flags |= 128, null) : (o = s.fallback, i = t.mode, s = Dc({
                mode: "visible",
                children: s.children
              }, i, 0, null), (o = kc(o, i, r, null)).flags |= 2, s.return = t, o.return = t, s.sibling = o, t.child = s, 0 != (1 & t.mode) && Xa(t, e.child, null, r), t.child.memoizedState = {
                baseLanes: r,
                cachePool: null,
                transitions: null
              }, t.memoizedState = kr, o);
            }
            if (0 == (1 & t.mode)) {
              return Br(e, t, r, null);
            }
            if ("$!" === i.data) {
              if (s = i.nextSibling && i.nextSibling.dataset) {
                var l = s.dgst;
              }
              s = l;
              return Br(e, t, r, s = {
                value: o = Error(a(419)),
                source: null,
                stack: false ? undefined : null,
                digest: null != s ? s : null
              });
            }
            l = 0 != (r & e.childLanes);
            if (br || l) {
              if (null !== (s = Ol)) {
                switch (r & -r) {
                  case 4:
                    i = 2;
                    break;
                  case 16:
                    i = 8;
                    break;
                  case 64:
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                  case 67108864:
                    i = 32;
                    break;
                  case 536870912:
                    i = 268435456;
                    break;
                  default:
                    i = 0;
                }
                if (0 !== (i = 0 != (i & (s.suspendedLanes | r)) ? 0 : i) && i !== o.retryLane) {
                  o.retryLane = i;
                  wa(e, i);
                  sc(s, e, i, -1);
                }
              }
              fc();
              return Br(e, t, r, s = {
                value: Error(a(421)),
                source: null,
                stack: false ? undefined : null,
                digest: false ? undefined : null
              });
            }
            return "$?" === i.data ? (t.flags |= 128, t.child = e.child, t = Nc.bind(null, e), i._reactRetry = t, null) : (e = o.treeContext, sa = ci(i.nextSibling), na = t, ia = true, aa = null, null !== e && (Yi[$i++] = Xi, Yi[$i++] = Qi, Yi[$i++] = qi, Xi = e.id, Qi = e.overflow, qi = t), t = Ur(t, s.children), t.flags |= 4096, t);
          }(e, t, l, i, s, o, n);
        }
        if (r) {
          r = i.fallback;
          l = t.mode;
          s = (o = e.child).sibling;
          var c = {
            mode: "hidden",
            children: i.children
          };
          if (0 == (1 & l) && t.child !== o) {
            (i = t.child).childLanes = 0;
            i.pendingProps = c;
            t.deletions = null;
          } else {
            (i = Mc(o, c)).subtreeFlags = 14680064 & o.subtreeFlags;
          }
          if (null !== s) {
            r = Mc(s, r);
          } else {
            (r = kc(r, l, n, null)).flags |= 2;
          }
          r.return = t;
          i.return = t;
          i.sibling = r;
          t.child = i;
          i = r;
          r = t.child;
          l = null === (l = e.child.memoizedState) ? {
            baseLanes: n,
            cachePool: null,
            transitions: null
          } : {
            baseLanes: l.baseLanes | n,
            cachePool: null,
            transitions: l.transitions
          };
          r.memoizedState = l;
          r.childLanes = e.childLanes & ~n;
          t.memoizedState = kr;
          return i;
        }
        e = (r = e.child).sibling;
        i = Mc(r, {
          mode: "visible",
          children: i.children
        });
        if (0 == (1 & t.mode)) {
          i.lanes = n;
        }
        i.return = t;
        i.sibling = null;
        if (null !== e) {
          if (null === (n = t.deletions)) {
            t.deletions = [e];
            t.flags |= 16;
          } else {
            n.push(e);
          }
        }
        t.child = i;
        t.memoizedState = null;
        return i;
      }
      function Ur(e, t) {
        (t = Dc({
          mode: "visible",
          children: t
        }, e.mode, 0, null)).return = e;
        return e.child = t;
      }
      function Br(e, t, n, s) {
        if (null !== s) {
          ga(s);
        }
        Xa(t, e.child, null, n);
        (e = Ur(t, t.pendingProps.children)).flags |= 2;
        t.memoizedState = null;
        return e;
      }
      function Gr(e, t, n) {
        e.lanes |= t;
        var s = e.alternate;
        if (null !== s) {
          s.lanes |= t;
        }
        Ia(e.return, t, n);
      }
      function Vr(e, t, n, s, i) {
        var a = e.memoizedState;
        if (null === a) {
          e.memoizedState = {
            isBackwards: t,
            rendering: null,
            renderingStartTime: 0,
            last: s,
            tail: n,
            tailMode: i
          };
        } else {
          a.isBackwards = t;
          a.rendering = null;
          a.renderingStartTime = 0;
          a.last = s;
          a.tail = n;
          a.tailMode = i;
        }
      }
      function Hr(e, t, n) {
        var s = t.pendingProps;
        var i = s.revealOrder;
        var a = s.tail;
        Tr(e, t, s.children, n);
        if (0 != (2 & (s = ro.current))) {
          s = 1 & s | 2;
          t.flags |= 128;
        } else {
          if (null !== e && 0 != (128 & e.flags)) {
            e: for (e = t.child; null !== e;) {
              if (13 === e.tag) {
                if (null !== e.memoizedState) {
                  Gr(e, n, t);
                }
              } else if (19 === e.tag) {
                Gr(e, n, t);
              } else if (null !== e.child) {
                e.child.return = e;
                e = e.child;
                continue;
              }
              if (e === t) {
                break e;
              }
              for (; null === e.sibling;) {
                if (null === e.return || e.return === t) {
                  break e;
                }
                e = e.return;
              }
              e.sibling.return = e.return;
              e = e.sibling;
            }
          }
          s &= 1;
        }
        ji(ro, s);
        if (0 == (1 & t.mode)) {
          t.memoizedState = null;
        } else {
          switch (i) {
            case "forwards":
              n = t.child;
              for (i = null; null !== n;) {
                if (null !== (e = n.alternate) && null === lo(e)) {
                  i = n;
                }
                n = n.sibling;
              }
              if (null === (n = i)) {
                i = t.child;
                t.child = null;
              } else {
                i = n.sibling;
                n.sibling = null;
              }
              Vr(t, false, i, n, a);
              break;
            case "backwards":
              n = null;
              i = t.child;
              for (t.child = null; null !== i;) {
                if (null !== (e = i.alternate) && null === lo(e)) {
                  t.child = i;
                  break;
                }
                e = i.sibling;
                i.sibling = n;
                n = i;
                i = e;
              }
              Vr(t, true, n, null, a);
              break;
            case "together":
              Vr(t, false, null, null, undefined);
              break;
            default:
              t.memoizedState = null;
          }
        }
        return t.child;
      }
      function Kr(e, t) {
        if (0 == (1 & t.mode) && null !== e) {
          e.alternate = null;
          t.alternate = null;
          t.flags |= 2;
        }
      }
      function Wr(e, t, n) {
        if (null !== e) {
          t.dependencies = e.dependencies;
        }
        Dl |= t.lanes;
        if (0 == (n & t.childLanes)) {
          return null;
        }
        if (null !== e && t.child !== e.child) {
          throw Error(a(153));
        }
        if (null !== t.child) {
          n = Mc(e = t.child, e.pendingProps);
          t.child = n;
          for (n.return = t; null !== e.sibling;) {
            e = e.sibling;
            (n = n.sibling = Mc(e, e.pendingProps)).return = t;
          }
          n.sibling = null;
        }
        return t.child;
      }
      function zr(e, t) {
        if (!ia) {
          switch (e.tailMode) {
            case "hidden":
              t = e.tail;
              for (var n = null; null !== t;) {
                if (null !== t.alternate) {
                  n = t;
                }
                t = t.sibling;
              }
              if (null === n) {
                e.tail = null;
              } else {
                n.sibling = null;
              }
              break;
            case "collapsed":
              n = e.tail;
              for (var s = null; null !== n;) {
                if (null !== n.alternate) {
                  s = n;
                }
                n = n.sibling;
              }
              if (null === s) {
                if (t || null === e.tail) {
                  e.tail = null;
                } else {
                  e.tail.sibling = null;
                }
              } else {
                s.sibling = null;
              }
          }
        }
      }
      function Yr(e) {
        var t = null !== e.alternate && e.alternate.child === e.child;
        var n = 0;
        var s = 0;
        if (t) {
          for (var i = e.child; null !== i;) {
            n |= i.lanes | i.childLanes;
            s |= 14680064 & i.subtreeFlags;
            s |= 14680064 & i.flags;
            i.return = e;
            i = i.sibling;
          }
        } else {
          for (i = e.child; null !== i;) {
            n |= i.lanes | i.childLanes;
            s |= i.subtreeFlags;
            s |= i.flags;
            i.return = e;
            i = i.sibling;
          }
        }
        e.subtreeFlags |= s;
        e.childLanes = n;
        return t;
      }
      function $r(e, t, n) {
        var s = t.pendingProps;
        ta(t);
        switch (t.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            Yr(t);
            return null;
          case 1:
          case 17:
            if (Li(t.type)) {
              Ai();
            }
            Yr(t);
            return null;
          case 3:
            s = t.stateNode;
            io();
            Si(wi);
            Si(Ni);
            uo();
            if (s.pendingContext) {
              s.context = s.pendingContext;
              s.pendingContext = null;
            }
            if (!(null !== e && null !== e.child)) {
              if (da(t)) {
                t.flags |= 4;
              } else if (!(null === e || e.memoizedState.isDehydrated && 0 == (256 & t.flags))) {
                t.flags |= 1024;
                if (null !== aa) {
                  rc(aa);
                  aa = null;
                }
              }
            }
            Ar(e, t);
            Yr(t);
            return null;
          case 5:
            oo(t);
            var i = no(to.current);
            n = t.type;
            if (null !== e && null != t.stateNode) {
              Mr(e, t, n, s, i);
              if (e.ref !== t.ref) {
                t.flags |= 512;
                t.flags |= 2097152;
              }
            } else {
              if (!s) {
                if (null === t.stateNode) {
                  throw Error(a(166));
                }
                Yr(t);
                return null;
              }
              e = no(Ja.current);
              if (da(t)) {
                s = t.stateNode;
                n = t.type;
                var o = t.memoizedProps;
                s[mi] = t;
                s[hi] = o;
                e = 0 != (1 & t.mode);
                switch (n) {
                  case "dialog":
                    Us("cancel", s);
                    Us("close", s);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    Us("load", s);
                    break;
                  case "video":
                  case "audio":
                    for (i = 0; i < Rs.length; i++) {
                      Us(Rs[i], s);
                    }
                    break;
                  case "source":
                    Us("error", s);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    Us("error", s);
                    Us("load", s);
                    break;
                  case "details":
                    Us("toggle", s);
                    break;
                  case "input":
                    X(s, o);
                    Us("invalid", s);
                    break;
                  case "select":
                    s._wrapperState = {
                      wasMultiple: !!o.multiple
                    };
                    Us("invalid", s);
                    break;
                  case "textarea":
                    ie(s, o);
                    Us("invalid", s);
                }
                ve(n, o);
                i = null;
                for (var l in o) if (o.hasOwnProperty(l)) {
                  var c = o[l];
                  if ("children" === l) {
                    if ("string" == typeof c) {
                      if (s.textContent !== c) {
                        if (true !== o.suppressHydrationWarning) {
                          Zs(s.textContent, c, e);
                        }
                        i = ["children", c];
                      }
                    } else if ("number" == typeof c && s.textContent !== "" + c) {
                      if (true !== o.suppressHydrationWarning) {
                        Zs(s.textContent, c, e);
                      }
                      i = ["children", "" + c];
                    }
                  } else if (r.hasOwnProperty(l) && null != c && "onScroll" === l) {
                    Us("scroll", s);
                  }
                }
                switch (n) {
                  case "input":
                    z(s);
                    J(s, o, true);
                    break;
                  case "textarea":
                    z(s);
                    oe(s);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    if ("function" == typeof o.onClick) {
                      s.onclick = Js;
                    }
                }
                s = i;
                t.updateQueue = s;
                if (null !== s) {
                  t.flags |= 4;
                }
              } else {
                l = 9 === i.nodeType ? i : i.ownerDocument;
                if ("http://www.w3.org/1999/xhtml" === e) {
                  e = re(n);
                }
                if ("http://www.w3.org/1999/xhtml" === e) {
                  if ("script" === n) {
                    (e = l.createElement("div")).innerHTML = "<script><\/script>";
                    e = e.removeChild(e.firstChild);
                  } else if ("string" == typeof s.is) {
                    e = l.createElement(n, {
                      is: s.is
                    });
                  } else {
                    e = l.createElement(n);
                    if ("select" === n) {
                      l = e;
                      if (s.multiple) {
                        l.multiple = true;
                      } else if (s.size) {
                        l.size = s.size;
                      }
                    }
                  }
                } else {
                  e = l.createElementNS(e, n);
                }
                e[mi] = t;
                e[hi] = s;
                Lr(e, t, false, false);
                t.stateNode = e;
                e: {
                  l = _e(n, s);
                  switch (n) {
                    case "dialog":
                      Us("cancel", e);
                      Us("close", e);
                      i = s;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      Us("load", e);
                      i = s;
                      break;
                    case "video":
                    case "audio":
                      for (i = 0; i < Rs.length; i++) {
                        Us(Rs[i], e);
                      }
                      i = s;
                      break;
                    case "source":
                      Us("error", e);
                      i = s;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      Us("error", e);
                      Us("load", e);
                      i = s;
                      break;
                    case "details":
                      Us("toggle", e);
                      i = s;
                      break;
                    case "input":
                      X(e, s);
                      i = q(e, s);
                      Us("invalid", e);
                      break;
                    case "option":
                    default:
                      i = s;
                      break;
                    case "select":
                      e._wrapperState = {
                        wasMultiple: !!s.multiple
                      };
                      i = D({}, s, {
                        value: undefined
                      });
                      Us("invalid", e);
                      break;
                    case "textarea":
                      ie(e, s);
                      i = se(e, s);
                      Us("invalid", e);
                  }
                  ve(n, i);
                  for (o in c = i) if (c.hasOwnProperty(o)) {
                    var u = c[o];
                    if ("style" === o) {
                      fe(e, u);
                    } else if ("dangerouslySetInnerHTML" === o) {
                      if (null != (u = u ? u.__html : undefined)) {
                        de(e, u);
                      }
                    } else if ("children" === o) {
                      if ("string" == typeof u) {
                        if ("textarea" !== n || "" !== u) {
                          me(e, u);
                        }
                      } else if ("number" == typeof u) {
                        me(e, "" + u);
                      }
                    } else if ("suppressContentEditableWarning" !== o && "suppressHydrationWarning" !== o && "autoFocus" !== o) {
                      if (r.hasOwnProperty(o)) {
                        if (null != u && "onScroll" === o) {
                          Us("scroll", e);
                        }
                      } else if (null != u) {
                        _(e, o, u, l);
                      }
                    }
                  }
                  switch (n) {
                    case "input":
                      z(e);
                      J(e, s, false);
                      break;
                    case "textarea":
                      z(e);
                      oe(e);
                      break;
                    case "option":
                      if (null != s.value) {
                        e.setAttribute("value", "" + K(s.value));
                      }
                      break;
                    case "select":
                      e.multiple = !!s.multiple;
                      if (null != (o = s.value)) {
                        ne(e, !!s.multiple, o, false);
                      } else if (null != s.defaultValue) {
                        ne(e, !!s.multiple, s.defaultValue, true);
                      }
                      break;
                    default:
                      if ("function" == typeof i.onClick) {
                        e.onclick = Js;
                      }
                  }
                  switch (n) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      s = !!s.autoFocus;
                      break e;
                    case "img":
                      s = true;
                      break e;
                    default:
                      s = false;
                  }
                }
                if (s) {
                  t.flags |= 4;
                }
              }
              if (null !== t.ref) {
                t.flags |= 512;
                t.flags |= 2097152;
              }
            }
            Yr(t);
            return null;
          case 6:
            if (e && null != t.stateNode) {
              Rr(e, t, e.memoizedProps, s);
            } else {
              if ("string" != typeof s && null === t.stateNode) {
                throw Error(a(166));
              }
              n = no(to.current);
              no(Ja.current);
              if (da(t)) {
                s = t.stateNode;
                n = t.memoizedProps;
                s[mi] = t;
                if ((o = s.nodeValue !== n) && null !== (e = na)) {
                  switch (e.tag) {
                    case 3:
                      Zs(s.nodeValue, n, 0 != (1 & e.mode));
                      break;
                    case 5:
                      if (true !== e.memoizedProps.suppressHydrationWarning) {
                        Zs(s.nodeValue, n, 0 != (1 & e.mode));
                      }
                  }
                }
                if (o) {
                  t.flags |= 4;
                }
              } else {
                (s = (9 === n.nodeType ? n : n.ownerDocument).createTextNode(s))[mi] = t;
                t.stateNode = s;
              }
            }
            Yr(t);
            return null;
          case 13:
            Si(ro);
            s = t.memoizedState;
            if (null === e || null !== e.memoizedState && null !== e.memoizedState.dehydrated) {
              if (ia && null !== sa && 0 != (1 & t.mode) && 0 == (128 & t.flags)) {
                ma();
                ha();
                t.flags |= 98560;
                o = false;
              } else {
                o = da(t);
                if (null !== s && null !== s.dehydrated) {
                  if (null === e) {
                    if (!o) {
                      throw Error(a(318));
                    }
                    if (!(o = null !== (o = t.memoizedState) ? o.dehydrated : null)) {
                      throw Error(a(317));
                    }
                    o[mi] = t;
                  } else {
                    ha();
                    if (0 == (128 & t.flags)) {
                      t.memoizedState = null;
                    }
                    t.flags |= 4;
                  }
                  Yr(t);
                  o = false;
                } else {
                  if (null !== aa) {
                    rc(aa);
                    aa = null;
                  }
                  o = true;
                }
              }
              if (!o) {
                return 65536 & t.flags ? t : null;
              }
            }
            return 0 != (128 & t.flags) ? (t.lanes = n, t) : ((s = null !== s) !== (null !== e && null !== e.memoizedState) && s && (t.child.flags |= 8192, 0 != (1 & t.mode) && (null === e || 0 != (1 & ro.current) ? 0 === Rl && (Rl = 3) : fc())), null !== t.updateQueue && (t.flags |= 4), Yr(t), null);
          case 4:
            io();
            Ar(e, t);
            if (null === e) {
              Vs(t.stateNode.containerInfo);
            }
            Yr(t);
            return null;
          case 10:
            Ea(t.type._context);
            Yr(t);
            return null;
          case 19:
            Si(ro);
            if (null === (o = t.memoizedState)) {
              Yr(t);
              return null;
            }
            s = 0 != (128 & t.flags);
            if (null === (l = o.rendering)) {
              if (s) {
                zr(o, false);
              } else {
                if (0 !== Rl || null !== e && 0 != (128 & e.flags)) {
                  for (e = t.child; null !== e;) {
                    if (null !== (l = lo(e))) {
                      t.flags |= 128;
                      zr(o, false);
                      if (null !== (s = l.updateQueue)) {
                        t.updateQueue = s;
                        t.flags |= 4;
                      }
                      t.subtreeFlags = 0;
                      s = n;
                      for (n = t.child; null !== n;) {
                        e = s;
                        (o = n).flags &= 14680066;
                        if (null === (l = o.alternate)) {
                          o.childLanes = 0;
                          o.lanes = e;
                          o.child = null;
                          o.subtreeFlags = 0;
                          o.memoizedProps = null;
                          o.memoizedState = null;
                          o.updateQueue = null;
                          o.dependencies = null;
                          o.stateNode = null;
                        } else {
                          o.childLanes = l.childLanes;
                          o.lanes = l.lanes;
                          o.child = l.child;
                          o.subtreeFlags = 0;
                          o.deletions = null;
                          o.memoizedProps = l.memoizedProps;
                          o.memoizedState = l.memoizedState;
                          o.updateQueue = l.updateQueue;
                          o.type = l.type;
                          e = l.dependencies;
                          o.dependencies = null === e ? null : {
                            lanes: e.lanes,
                            firstContext: e.firstContext
                          };
                        }
                        n = n.sibling;
                      }
                      ji(ro, 1 & ro.current | 2);
                      return t.child;
                    }
                    e = e.sibling;
                  }
                }
                if (null !== o.tail && Qe() > Hl) {
                  t.flags |= 128;
                  s = true;
                  zr(o, false);
                  t.lanes = 4194304;
                }
              }
            } else {
              if (!s) {
                if (null !== (e = lo(l))) {
                  t.flags |= 128;
                  s = true;
                  if (null !== (n = e.updateQueue)) {
                    t.updateQueue = n;
                    t.flags |= 4;
                  }
                  zr(o, true);
                  if (null === o.tail && "hidden" === o.tailMode && !l.alternate && !ia) {
                    Yr(t);
                    return null;
                  }
                } else if (2 * Qe() - o.renderingStartTime > Hl && 1073741824 !== n) {
                  t.flags |= 128;
                  s = true;
                  zr(o, false);
                  t.lanes = 4194304;
                }
              }
              if (o.isBackwards) {
                l.sibling = t.child;
                t.child = l;
              } else {
                if (null !== (n = o.last)) {
                  n.sibling = l;
                } else {
                  t.child = l;
                }
                o.last = l;
              }
            }
            return null !== o.tail ? (t = o.tail, o.rendering = t, o.tail = t.sibling, o.renderingStartTime = Qe(), t.sibling = null, n = ro.current, ji(ro, s ? 1 & n | 2 : 1 & n), t) : (Yr(t), null);
          case 22:
          case 23:
            mc();
            s = null !== t.memoizedState;
            if (null !== e && null !== e.memoizedState !== s) {
              t.flags |= 8192;
            }
            if (s && 0 != (1 & t.mode)) {
              if (0 != (1073741824 & Al)) {
                Yr(t);
                if (6 & t.subtreeFlags) {
                  t.flags |= 8192;
                }
              }
            } else {
              Yr(t);
            }
            return null;
          case 24:
          case 25:
            return null;
        }
        throw Error(a(156, t.tag));
      }
      function qr(e, t) {
        ta(t);
        switch (t.tag) {
          case 1:
            if (Li(t.type)) {
              Ai();
            }
            return 65536 & (e = t.flags) ? (t.flags = -65537 & e | 128, t) : null;
          case 3:
            io();
            Si(wi);
            Si(Ni);
            uo();
            return 0 != (65536 & (e = t.flags)) && 0 == (128 & e) ? (t.flags = -65537 & e | 128, t) : null;
          case 5:
            oo(t);
            return null;
          case 13:
            Si(ro);
            if (null !== (e = t.memoizedState) && null !== e.dehydrated) {
              if (null === t.alternate) {
                throw Error(a(340));
              }
              ha();
            }
            return 65536 & (e = t.flags) ? (t.flags = -65537 & e | 128, t) : null;
          case 19:
            Si(ro);
            return null;
          case 4:
            io();
            return null;
          case 10:
            Ea(t.type._context);
            return null;
          case 22:
          case 23:
            mc();
            return null;
          default:
            return null;
        }
      }
      Lr = function (e, t) {
        for (var n = t.child; null !== n;) {
          if (5 === n.tag || 6 === n.tag) {
            e.appendChild(n.stateNode);
          } else if (4 !== n.tag && null !== n.child) {
            n.child.return = n;
            n = n.child;
            continue;
          }
          if (n === t) {
            break;
          }
          for (; null === n.sibling;) {
            if (null === n.return || n.return === t) {
              return;
            }
            n = n.return;
          }
          n.sibling.return = n.return;
          n = n.sibling;
        }
      };
      Ar = function () {};
      Mr = function (e, t, n, s) {
        var i = e.memoizedProps;
        if (i !== s) {
          e = t.stateNode;
          no(Ja.current);
          var a;
          var o = null;
          switch (n) {
            case "input":
              i = q(e, i);
              s = q(e, s);
              o = [];
              break;
            case "select":
              i = D({}, i, {
                value: undefined
              });
              s = D({}, s, {
                value: undefined
              });
              o = [];
              break;
            case "textarea":
              i = se(e, i);
              s = se(e, s);
              o = [];
              break;
            default:
              if ("function" != typeof i.onClick && "function" == typeof s.onClick) {
                e.onclick = Js;
              }
          }
          ve(n, s);
          n = null;
          for (u in i) if (!s.hasOwnProperty(u) && i.hasOwnProperty(u) && null != i[u]) {
            if ("style" === u) {
              var l = i[u];
              for (a in l) if (l.hasOwnProperty(a)) {
                if (!n) {
                  n = {};
                }
                n[a] = "";
              }
            } else if ("dangerouslySetInnerHTML" !== u && "children" !== u && "suppressContentEditableWarning" !== u && "suppressHydrationWarning" !== u && "autoFocus" !== u) {
              if (r.hasOwnProperty(u)) {
                if (!o) {
                  o = [];
                }
              } else {
                (o = o || []).push(u, null);
              }
            }
          }
          for (u in s) {
            var c = s[u];
            l = null != i ? i[u] : undefined;
            if (s.hasOwnProperty(u) && c !== l && (null != c || null != l)) {
              if ("style" === u) {
                if (l) {
                  for (a in l) if (!(!l.hasOwnProperty(a) || c && c.hasOwnProperty(a))) {
                    if (!n) {
                      n = {};
                    }
                    n[a] = "";
                  }
                  for (a in c) if (c.hasOwnProperty(a) && l[a] !== c[a]) {
                    if (!n) {
                      n = {};
                    }
                    n[a] = c[a];
                  }
                } else {
                  if (!n) {
                    if (!o) {
                      o = [];
                    }
                    o.push(u, n);
                  }
                  n = c;
                }
              } else if ("dangerouslySetInnerHTML" === u) {
                c = c ? c.__html : undefined;
                l = l ? l.__html : undefined;
                if (null != c && l !== c) {
                  (o = o || []).push(u, c);
                }
              } else if ("children" === u) {
                if (!("string" != typeof c && "number" != typeof c)) {
                  (o = o || []).push(u, "" + c);
                }
              } else if ("suppressContentEditableWarning" !== u && "suppressHydrationWarning" !== u) {
                if (r.hasOwnProperty(u)) {
                  if (null != c && "onScroll" === u) {
                    Us("scroll", e);
                  }
                  if (!(o || l === c)) {
                    o = [];
                  }
                } else {
                  (o = o || []).push(u, c);
                }
              }
            }
          }
          if (n) {
            (o = o || []).push("style", n);
          }
          var u = o;
          if (t.updateQueue = u) {
            t.flags |= 4;
          }
        }
      };
      Rr = function (e, t, n, s) {
        if (n !== s) {
          t.flags |= 4;
        }
      };
      var Xr = false;
      var Qr = false;
      var Zr = "function" == typeof WeakSet ? WeakSet : Set;
      var Jr = null;
      function el(e, t) {
        var n = e.ref;
        if (null !== n) {
          if ("function" == typeof n) {
            try {
              n(null);
            } catch (n) {
              Sc(e, t, n);
            }
          } else {
            n.current = null;
          }
        }
      }
      function tl(e, t, n) {
        try {
          n();
        } catch (n) {
          Sc(e, t, n);
        }
      }
      var nl = false;
      function sl(e, t, n) {
        var s = t.updateQueue;
        if (null !== (s = null !== s ? s.lastEffect : null)) {
          var i = s = s.next;
          do {
            if ((i.tag & e) === e) {
              var a = i.destroy;
              i.destroy = undefined;
              if (undefined !== a) {
                tl(t, n, a);
              }
            }
            i = i.next;
          } while (i !== s);
        }
      }
      function il(e, t) {
        if (null !== (t = null !== (t = t.updateQueue) ? t.lastEffect : null)) {
          var n = t = t.next;
          do {
            if ((n.tag & e) === e) {
              var s = n.create;
              n.destroy = s();
            }
            n = n.next;
          } while (n !== t);
        }
      }
      function al(e) {
        var t = e.ref;
        if (null !== t) {
          var n = e.stateNode;
          e.tag;
          e = n;
          if ("function" == typeof t) {
            t(e);
          } else {
            t.current = e;
          }
        }
      }
      function ol(e) {
        var t = e.alternate;
        if (null !== t) {
          e.alternate = null;
          ol(t);
        }
        e.child = null;
        e.deletions = null;
        e.sibling = null;
        if (5 === e.tag) {
          if (null !== (t = e.stateNode)) {
            delete t[mi];
            delete t[hi];
            delete t[pi];
            delete t[fi];
            delete t[xi];
          }
        }
        e.stateNode = null;
        e.return = null;
        e.dependencies = null;
        e.memoizedProps = null;
        e.memoizedState = null;
        e.pendingProps = null;
        e.stateNode = null;
        e.updateQueue = null;
      }
      function rl(e) {
        return 5 === e.tag || 3 === e.tag || 4 === e.tag;
      }
      function ll(e) {
        e: for (;;) {
          for (; null === e.sibling;) {
            if (null === e.return || 5 === e.return.tag || 3 === e.return.tag || 4 === e.return.tag) {
              return null;
            }
            e = e.return;
          }
          e.sibling.return = e.return;
          for (e = e.sibling; 5 !== e.tag && 6 !== e.tag && 18 !== e.tag;) {
            if (2 & e.flags) {
              continue e;
            }
            if (null === e.child || 4 === e.tag) {
              continue e;
            }
            e.child.return = e;
            e = e.child;
          }
          if (!(2 & e.flags)) {
            return e.stateNode;
          }
        }
      }
      function cl(e, t, n) {
        var s = e.tag;
        if (5 === s || 6 === s) {
          e = e.stateNode;
          if (t) {
            if (8 === n.nodeType) {
              n.parentNode.insertBefore(e, t);
            } else {
              n.insertBefore(e, t);
            }
          } else {
            if (8 === n.nodeType) {
              (t = n.parentNode).insertBefore(e, n);
            } else {
              (t = n).appendChild(e);
            }
            if (!(null != (n = n._reactRootContainer) || null !== t.onclick)) {
              t.onclick = Js;
            }
          }
        } else if (4 !== s && null !== (e = e.child)) {
          cl(e, t, n);
          for (e = e.sibling; null !== e;) {
            cl(e, t, n);
            e = e.sibling;
          }
        }
      }
      function ul(e, t, n) {
        var s = e.tag;
        if (5 === s || 6 === s) {
          e = e.stateNode;
          if (t) {
            n.insertBefore(e, t);
          } else {
            n.appendChild(e);
          }
        } else if (4 !== s && null !== (e = e.child)) {
          ul(e, t, n);
          for (e = e.sibling; null !== e;) {
            ul(e, t, n);
            e = e.sibling;
          }
        }
      }
      var dl = null;
      var ml = false;
      function hl(e, t, n) {
        for (n = n.child; null !== n;) {
          gl(e, t, n);
          n = n.sibling;
        }
      }
      function gl(e, t, n) {
        if (at && "function" == typeof at.onCommitFiberUnmount) {
          try {
            at.onCommitFiberUnmount(it, n);
          } catch (e) {}
        }
        switch (n.tag) {
          case 5:
            if (!Qr) {
              el(n, t);
            }
          case 6:
            var s = dl;
            var i = ml;
            dl = null;
            hl(e, t, n);
            ml = i;
            if (null !== (dl = s)) {
              if (ml) {
                e = dl;
                n = n.stateNode;
                if (8 === e.nodeType) {
                  e.parentNode.removeChild(n);
                } else {
                  e.removeChild(n);
                }
              } else {
                dl.removeChild(n.stateNode);
              }
            }
            break;
          case 18:
            if (null !== dl) {
              if (ml) {
                e = dl;
                n = n.stateNode;
                if (8 === e.nodeType) {
                  li(e.parentNode, n);
                } else if (1 === e.nodeType) {
                  li(e, n);
                }
                Vt(e);
              } else {
                li(dl, n.stateNode);
              }
            }
            break;
          case 4:
            s = dl;
            i = ml;
            dl = n.stateNode.containerInfo;
            ml = true;
            hl(e, t, n);
            dl = s;
            ml = i;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!Qr && null !== (s = n.updateQueue) && null !== (s = s.lastEffect)) {
              i = s = s.next;
              do {
                var a = i;
                var o = a.destroy;
                a = a.tag;
                if (undefined !== o && (0 != (2 & a) || 0 != (4 & a))) {
                  tl(n, t, o);
                }
                i = i.next;
              } while (i !== s);
            }
            hl(e, t, n);
            break;
          case 1:
            if (!Qr && (el(n, t), "function" == typeof (s = n.stateNode).componentWillUnmount)) {
              try {
                s.props = n.memoizedProps;
                s.state = n.memoizedState;
                s.componentWillUnmount();
              } catch (e) {
                Sc(n, t, e);
              }
            }
            hl(e, t, n);
            break;
          case 21:
            hl(e, t, n);
            break;
          case 22:
            if (1 & n.mode) {
              Qr = (s = Qr) || null !== n.memoizedState;
              hl(e, t, n);
              Qr = s;
            } else {
              hl(e, t, n);
            }
            break;
          default:
            hl(e, t, n);
        }
      }
      function pl(e) {
        var t = e.updateQueue;
        if (null !== t) {
          e.updateQueue = null;
          var n = e.stateNode;
          if (null === n) {
            n = e.stateNode = new Zr();
          }
          t.forEach(function (t) {
            var s = wc.bind(null, e, t);
            if (!n.has(t)) {
              n.add(t);
              t.then(s, s);
            }
          });
        }
      }
      function fl(e, t) {
        var n = t.deletions;
        if (null !== n) {
          for (var s = 0; s < n.length; s++) {
            var i = n[s];
            try {
              var r = t;
              var l = r;
              e: for (; null !== l;) {
                switch (l.tag) {
                  case 5:
                    dl = l.stateNode;
                    ml = false;
                    break e;
                  case 3:
                  case 4:
                    dl = l.stateNode.containerInfo;
                    ml = true;
                    break e;
                }
                l = l.return;
              }
              if (null === dl) {
                throw Error(a(160));
              }
              gl(e, r, i);
              dl = null;
              ml = false;
              var c = i.alternate;
              if (null !== c) {
                c.return = null;
              }
              i.return = null;
            } catch (e) {
              Sc(i, t, e);
            }
          }
        }
        if (12854 & t.subtreeFlags) {
          for (t = t.child; null !== t;) {
            xl(t, e);
            t = t.sibling;
          }
        }
      }
      function xl(e, t) {
        var n = e.alternate;
        var s = e.flags;
        switch (e.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            fl(t, e);
            vl(e);
            if (4 & s) {
              try {
                sl(3, e, e.return);
                il(3, e);
              } catch (t) {
                Sc(e, e.return, t);
              }
              try {
                sl(5, e, e.return);
              } catch (t) {
                Sc(e, e.return, t);
              }
            }
            break;
          case 1:
            fl(t, e);
            vl(e);
            if (512 & s && null !== n) {
              el(n, n.return);
            }
            break;
          case 5:
            fl(t, e);
            vl(e);
            if (512 & s && null !== n) {
              el(n, n.return);
            }
            if (32 & e.flags) {
              var i = e.stateNode;
              try {
                me(i, "");
              } catch (t) {
                Sc(e, e.return, t);
              }
            }
            if (4 & s && null != (i = e.stateNode)) {
              var o = e.memoizedProps;
              var r = null !== n ? n.memoizedProps : o;
              var l = e.type;
              var c = e.updateQueue;
              e.updateQueue = null;
              if (null !== c) {
                try {
                  if ("input" === l && "radio" === o.type && null != o.name) {
                    Q(i, o);
                  }
                  _e(l, r);
                  var u = _e(l, o);
                  for (r = 0; r < c.length; r += 2) {
                    var d = c[r];
                    var m = c[r + 1];
                    if ("style" === d) {
                      fe(i, m);
                    } else if ("dangerouslySetInnerHTML" === d) {
                      de(i, m);
                    } else if ("children" === d) {
                      me(i, m);
                    } else {
                      _(i, d, m, u);
                    }
                  }
                  switch (l) {
                    case "input":
                      Z(i, o);
                      break;
                    case "textarea":
                      ae(i, o);
                      break;
                    case "select":
                      var h = i._wrapperState.wasMultiple;
                      i._wrapperState.wasMultiple = !!o.multiple;
                      var g = o.value;
                      if (null != g) {
                        ne(i, !!o.multiple, g, false);
                      } else if (h !== !!o.multiple) {
                        if (null != o.defaultValue) {
                          ne(i, !!o.multiple, o.defaultValue, true);
                        } else {
                          ne(i, !!o.multiple, o.multiple ? [] : "", false);
                        }
                      }
                  }
                  i[hi] = o;
                } catch (t) {
                  Sc(e, e.return, t);
                }
              }
            }
            break;
          case 6:
            fl(t, e);
            vl(e);
            if (4 & s) {
              if (null === e.stateNode) {
                throw Error(a(162));
              }
              i = e.stateNode;
              o = e.memoizedProps;
              try {
                i.nodeValue = o;
              } catch (t) {
                Sc(e, e.return, t);
              }
            }
            break;
          case 3:
            fl(t, e);
            vl(e);
            if (4 & s && null !== n && n.memoizedState.isDehydrated) {
              try {
                Vt(t.containerInfo);
              } catch (t) {
                Sc(e, e.return, t);
              }
            }
            break;
          case 4:
          default:
            fl(t, e);
            vl(e);
            break;
          case 13:
            fl(t, e);
            vl(e);
            if (8192 & (i = e.child).flags) {
              o = null !== i.memoizedState;
              i.stateNode.isHidden = o;
              if (!(!o || null !== i.alternate && null !== i.alternate.memoizedState)) {
                Vl = Qe();
              }
            }
            if (4 & s) {
              pl(e);
            }
            break;
          case 22:
            d = null !== n && null !== n.memoizedState;
            if (1 & e.mode) {
              Qr = (u = Qr) || d;
              fl(t, e);
              Qr = u;
            } else {
              fl(t, e);
            }
            vl(e);
            if (8192 & s) {
              u = null !== e.memoizedState;
              if ((e.stateNode.isHidden = u) && !d && 0 != (1 & e.mode)) {
                Jr = e;
                for (d = e.child; null !== d;) {
                  for (m = Jr = d; null !== Jr;) {
                    g = (h = Jr).child;
                    switch (h.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        sl(4, h, h.return);
                        break;
                      case 1:
                        el(h, h.return);
                        var p = h.stateNode;
                        if ("function" == typeof p.componentWillUnmount) {
                          s = h;
                          n = h.return;
                          try {
                            t = s;
                            p.props = t.memoizedProps;
                            p.state = t.memoizedState;
                            p.componentWillUnmount();
                          } catch (e) {
                            Sc(s, n, e);
                          }
                        }
                        break;
                      case 5:
                        el(h, h.return);
                        break;
                      case 22:
                        if (null !== h.memoizedState) {
                          El(m);
                          continue;
                        }
                    }
                    if (null !== g) {
                      g.return = h;
                      Jr = g;
                    } else {
                      El(m);
                    }
                  }
                  d = d.sibling;
                }
              }
              d = null;
              e: for (m = e;;) {
                if (5 === m.tag) {
                  if (null === d) {
                    d = m;
                    try {
                      i = m.stateNode;
                      if (u) {
                        if ("function" == typeof (o = i.style).setProperty) {
                          o.setProperty("display", "none", "important");
                        } else {
                          o.display = "none";
                        }
                      } else {
                        l = m.stateNode;
                        r = null != (c = m.memoizedProps.style) && c.hasOwnProperty("display") ? c.display : null;
                        l.style.display = null == r || "boolean" == typeof r || "" === r ? "" : undefined || "number" != typeof r || 0 === r || he.hasOwnProperty("display") && he[e] ? ("" + r).trim() : r + "px";
                      }
                    } catch (t) {
                      Sc(e, e.return, t);
                    }
                  }
                } else if (6 === m.tag) {
                  if (null === d) {
                    try {
                      m.stateNode.nodeValue = u ? "" : m.memoizedProps;
                    } catch (t) {
                      Sc(e, e.return, t);
                    }
                  }
                } else if ((22 !== m.tag && 23 !== m.tag || null === m.memoizedState || m === e) && null !== m.child) {
                  m.child.return = m;
                  m = m.child;
                  continue;
                }
                if (m === e) {
                  break e;
                }
                for (; null === m.sibling;) {
                  if (null === m.return || m.return === e) {
                    break e;
                  }
                  if (d === m) {
                    d = null;
                  }
                  m = m.return;
                }
                if (d === m) {
                  d = null;
                }
                m.sibling.return = m.return;
                m = m.sibling;
              }
            }
            break;
          case 19:
            fl(t, e);
            vl(e);
            if (4 & s) {
              pl(e);
            }
          case 21:
        }
      }
      function vl(e) {
        var t = e.flags;
        if (2 & t) {
          try {
            e: {
              for (var n = e.return; null !== n;) {
                if (5 === n.tag || 3 === n.tag || 4 === n.tag) {
                  var s = n;
                  break e;
                }
                n = n.return;
              }
              throw Error(a(160));
            }
            switch (s.tag) {
              case 5:
                var i = s.stateNode;
                if (32 & s.flags) {
                  me(i, "");
                  s.flags &= -33;
                }
                ul(e, ll(e), i);
                break;
              case 3:
              case 4:
                var o = s.stateNode.containerInfo;
                cl(e, ll(e), o);
                break;
              default:
                throw Error(a(161));
            }
          } catch (t) {
            Sc(e, e.return, t);
          }
          e.flags &= -3;
        }
        if (4096 & t) {
          e.flags &= -4097;
        }
      }
      function _l(e, t, n) {
        Jr = e;
        bl(e, t, n);
      }
      function bl(e, t, n) {
        for (var s = 0 != (1 & e.mode); null !== Jr;) {
          var i = Jr;
          var a = i.child;
          if (22 === i.tag && s) {
            var o = null !== i.memoizedState || Xr;
            if (!o) {
              var r = i.alternate;
              var l = null !== r && null !== r.memoizedState || Qr;
              r = Xr;
              var c = Qr;
              Xr = o;
              if ((Qr = l) && !c) {
                for (Jr = i; null !== Jr;) {
                  l = (o = Jr).child;
                  if (22 === o.tag && null !== o.memoizedState) {
                    Il(i);
                  } else if (null !== l) {
                    l.return = o;
                    Jr = l;
                  } else {
                    Il(i);
                  }
                }
              }
              for (; null !== a;) {
                Jr = a;
                bl(a, t, n);
                a = a.sibling;
              }
              Jr = i;
              Xr = r;
              Qr = c;
            }
            Tl(e);
          } else if (0 != (8772 & i.subtreeFlags) && null !== a) {
            a.return = i;
            Jr = a;
          } else {
            Tl(e);
          }
        }
      }
      function Tl(e) {
        for (; null !== Jr;) {
          var t = Jr;
          if (0 != (8772 & t.flags)) {
            var n = t.alternate;
            try {
              if (0 != (8772 & t.flags)) {
                switch (t.tag) {
                  case 0:
                  case 11:
                  case 15:
                    if (!Qr) {
                      il(5, t);
                    }
                    break;
                  case 1:
                    var s = t.stateNode;
                    if (4 & t.flags && !Qr) {
                      if (null === n) {
                        s.componentDidMount();
                      } else {
                        var i = t.elementType === t.type ? n.memoizedProps : fa(t.type, n.memoizedProps);
                        s.componentDidUpdate(i, n.memoizedState, s.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                    var o = t.updateQueue;
                    if (null !== o) {
                      Fa(t, o, s);
                    }
                    break;
                  case 3:
                    var r = t.updateQueue;
                    if (null !== r) {
                      n = null;
                      if (null !== t.child) {
                        switch (t.child.tag) {
                          case 5:
                          case 1:
                            n = t.child.stateNode;
                        }
                      }
                      Fa(t, r, n);
                    }
                    break;
                  case 5:
                    var l = t.stateNode;
                    if (null === n && 4 & t.flags) {
                      n = l;
                      var c = t.memoizedProps;
                      switch (t.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          if (c.autoFocus) {
                            n.focus();
                          }
                          break;
                        case "img":
                          if (c.src) {
                            n.src = c.src;
                          }
                      }
                    }
                    break;
                  case 6:
                  case 4:
                  case 12:
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  case 13:
                    if (null === t.memoizedState) {
                      var u = t.alternate;
                      if (null !== u) {
                        var d = u.memoizedState;
                        if (null !== d) {
                          var m = d.dehydrated;
                          if (null !== m) {
                            Vt(m);
                          }
                        }
                      }
                    }
                    break;
                  default:
                    throw Error(a(163));
                }
              }
              if (!Qr) {
                if (512 & t.flags) {
                  al(t);
                }
              }
            } catch (e) {
              Sc(t, t.return, e);
            }
          }
          if (t === e) {
            Jr = null;
            break;
          }
          if (null !== (n = t.sibling)) {
            n.return = t.return;
            Jr = n;
            break;
          }
          Jr = t.return;
        }
      }
      function El(e) {
        for (; null !== Jr;) {
          var t = Jr;
          if (t === e) {
            Jr = null;
            break;
          }
          var n = t.sibling;
          if (null !== n) {
            n.return = t.return;
            Jr = n;
            break;
          }
          Jr = t.return;
        }
      }
      function Il(e) {
        for (; null !== Jr;) {
          var t = Jr;
          try {
            switch (t.tag) {
              case 0:
              case 11:
              case 15:
                var n = t.return;
                try {
                  il(4, t);
                } catch (e) {
                  Sc(t, n, e);
                }
                break;
              case 1:
                var s = t.stateNode;
                if ("function" == typeof s.componentDidMount) {
                  var i = t.return;
                  try {
                    s.componentDidMount();
                  } catch (e) {
                    Sc(t, i, e);
                  }
                }
                var a = t.return;
                try {
                  al(t);
                } catch (e) {
                  Sc(t, a, e);
                }
                break;
              case 5:
                var o = t.return;
                try {
                  al(t);
                } catch (e) {
                  Sc(t, o, e);
                }
            }
          } catch (e) {
            Sc(t, t.return, e);
          }
          if (t === e) {
            Jr = null;
            break;
          }
          var r = t.sibling;
          if (null !== r) {
            r.return = t.return;
            Jr = r;
            break;
          }
          Jr = t.return;
        }
      }
      var yl;
      var Sl = Math.ceil;
      var jl = b.ReactCurrentDispatcher;
      var Cl = b.ReactCurrentOwner;
      var Nl = b.ReactCurrentBatchConfig;
      var wl = 0;
      var Ol = null;
      var Pl = null;
      var Ll = 0;
      var Al = 0;
      var Ml = {
        current: 0
      };
      var Rl = 0;
      var kl = null;
      var Dl = 0;
      var Fl = 0;
      var Ul = 0;
      var Bl = null;
      var Gl = null;
      var Vl = 0;
      var Hl = Infinity;
      var Kl = null;
      var Wl = false;
      var zl = null;
      var Yl = null;
      var $l = false;
      var ql = null;
      var Xl = 0;
      var Ql = 0;
      var Zl = null;
      var Jl = -1;
      var ec = 0;
      function tc() {
        return 0 != (6 & wl) ? Qe() : -1 !== Jl ? Jl : Jl = Qe();
      }
      function nc(e) {
        return 0 == (1 & e.mode) ? 1 : 0 != (2 & wl) && 0 !== Ll ? Ll & -Ll : null !== pa.transition ? (0 === ec && (ec = pt()), ec) : 0 !== (e = _t) ? e : e = undefined === (e = window.event) ? 16 : Xt(e.type);
      }
      function sc(e, t, n, s) {
        if (50 < Ql) {
          Ql = 0;
          Zl = null;
          throw Error(a(185));
        }
        xt(e, n, s);
        if (!(0 != (2 & wl) && e === Ol)) {
          if (e === Ol) {
            if (0 == (2 & wl)) {
              Fl |= n;
            }
            if (4 === Rl) {
              lc(e, Ll);
            }
          }
          ic(e, s);
          if (1 === n && 0 === wl && 0 == (1 & t.mode)) {
            Hl = Qe() + 500;
            if (Ui) {
              Vi();
            }
          }
        }
      }
      function ic(e, t) {
        var n = e.callbackNode;
        !function (e, t) {
          var n = e.suspendedLanes;
          var s = e.pingedLanes;
          var i = e.expirationTimes;
          for (var a = e.pendingLanes; 0 < a;) {
            var o = 31 - ot(a);
            var r = 1 << o;
            var l = i[o];
            if (-1 === l) {
              if (!(0 != (r & n) && 0 == (r & s))) {
                i[o] = ht(r, t);
              }
            } else if (l <= t) {
              e.expiredLanes |= r;
            }
            a &= ~r;
          }
        }(e, t);
        var s = mt(e, e === Ol ? Ll : 0);
        if (0 === s) {
          if (null !== n) {
            $e(n);
          }
          e.callbackNode = null;
          e.callbackPriority = 0;
        } else {
          t = s & -s;
          if (e.callbackPriority !== t) {
            if (null != n) {
              $e(n);
            }
            if (1 === t) {
              if (0 === e.tag) {
                (function (e) {
                  Ui = true;
                  Gi(e);
                })(cc.bind(null, e));
              } else {
                Gi(cc.bind(null, e));
              }
              oi(function () {
                if (0 == (6 & wl)) {
                  Vi();
                }
              });
              n = null;
            } else {
              switch (bt(s)) {
                case 1:
                  n = Je;
                  break;
                case 4:
                  n = et;
                  break;
                case 16:
                default:
                  n = tt;
                  break;
                case 536870912:
                  n = st;
              }
              n = Ye(n, ac.bind(null, e));
            }
            e.callbackPriority = t;
            e.callbackNode = n;
          }
        }
      }
      function ac(e, t) {
        Jl = -1;
        ec = 0;
        if (0 != (6 & wl)) {
          throw Error(a(327));
        }
        var n = e.callbackNode;
        if (Ic() && e.callbackNode !== n) {
          return null;
        }
        var s = mt(e, e === Ol ? Ll : 0);
        if (0 === s) {
          return null;
        }
        if (0 != (30 & s) || 0 != (s & e.expiredLanes) || t) {
          t = xc(e, s);
        } else {
          t = s;
          var i = wl;
          wl |= 2;
          var o = pc();
          for (Ol === e && Ll === t || (Kl = null, Hl = Qe() + 500, hc(e, t));;) {
            try {
              _c();
              break;
            } catch (t) {
              gc(e, t);
            }
          }
          Ta();
          jl.current = o;
          wl = i;
          if (null !== Pl) {
            t = 0;
          } else {
            Ol = null;
            Ll = 0;
            t = Rl;
          }
        }
        if (0 !== t) {
          if (2 === t) {
            if (0 !== (i = gt(e))) {
              s = i;
              t = oc(e, i);
            }
          }
          if (1 === t) {
            n = kl;
            hc(e, 0);
            lc(e, s);
            ic(e, Qe());
            throw n;
          }
          if (6 === t) {
            lc(e, s);
          } else {
            i = e.current.alternate;
            if (0 == (30 & s) && !function (e) {
              for (var t = e;;) {
                if (16384 & t.flags) {
                  var n = t.updateQueue;
                  if (null !== n && null !== (n = n.stores)) {
                    for (var s = 0; s < n.length; s++) {
                      var i = n[s];
                      var a = i.getSnapshot;
                      i = i.value;
                      try {
                        if (!rs(a(), i)) {
                          return false;
                        }
                      } catch (e) {
                        return false;
                      }
                    }
                  }
                }
                n = t.child;
                if (16384 & t.subtreeFlags && null !== n) {
                  n.return = t;
                  t = n;
                } else {
                  if (t === e) {
                    break;
                  }
                  for (; null === t.sibling;) {
                    if (null === t.return || t.return === e) {
                      return true;
                    }
                    t = t.return;
                  }
                  t.sibling.return = t.return;
                  t = t.sibling;
                }
              }
              return true;
            }(i) && (2 === (t = xc(e, s)) && 0 !== (o = gt(e)) && (s = o, t = oc(e, o)), 1 === t)) {
              n = kl;
              hc(e, 0);
              lc(e, s);
              ic(e, Qe());
              throw n;
            }
            e.finishedWork = i;
            e.finishedLanes = s;
            switch (t) {
              case 0:
              case 1:
                throw Error(a(345));
              case 2:
              case 5:
                Ec(e, Gl, Kl);
                break;
              case 3:
                lc(e, s);
                if ((130023424 & s) === s && 10 < (t = Vl + 500 - Qe())) {
                  if (0 !== mt(e, 0)) {
                    break;
                  }
                  if (((i = e.suspendedLanes) & s) !== s) {
                    tc();
                    e.pingedLanes |= e.suspendedLanes & i;
                    break;
                  }
                  e.timeoutHandle = si(Ec.bind(null, e, Gl, Kl), t);
                  break;
                }
                Ec(e, Gl, Kl);
                break;
              case 4:
                lc(e, s);
                if ((4194240 & s) === s) {
                  break;
                }
                t = e.eventTimes;
                for (i = -1; 0 < s;) {
                  var r = 31 - ot(s);
                  o = 1 << r;
                  if ((r = t[r]) > i) {
                    i = r;
                  }
                  s &= ~o;
                }
                s = i;
                if (10 < (s = (120 > (s = Qe() - s) ? 120 : 480 > s ? 480 : 1080 > s ? 1080 : 1920 > s ? 1920 : 3e3 > s ? 3e3 : 4320 > s ? 4320 : 1960 * Sl(s / 1960)) - s)) {
                  e.timeoutHandle = si(Ec.bind(null, e, Gl, Kl), s);
                  break;
                }
                Ec(e, Gl, Kl);
                break;
              default:
                throw Error(a(329));
            }
          }
        }
        ic(e, Qe());
        return e.callbackNode === n ? ac.bind(null, e) : null;
      }
      function oc(e, t) {
        var n = Bl;
        if (e.current.memoizedState.isDehydrated) {
          hc(e, t).flags |= 256;
        }
        if (2 !== (e = xc(e, t))) {
          t = Gl;
          Gl = n;
          if (null !== t) {
            rc(t);
          }
        }
        return e;
      }
      function rc(e) {
        if (null === Gl) {
          Gl = e;
        } else {
          Gl.push.apply(Gl, e);
        }
      }
      function lc(e, t) {
        t &= ~Ul;
        t &= ~Fl;
        e.suspendedLanes |= t;
        e.pingedLanes &= ~t;
        for (e = e.expirationTimes; 0 < t;) {
          var n = 31 - ot(t);
          var s = 1 << n;
          e[n] = -1;
          t &= ~s;
        }
      }
      function cc(e) {
        if (0 != (6 & wl)) {
          throw Error(a(327));
        }
        Ic();
        var t = mt(e, 0);
        if (0 == (1 & t)) {
          ic(e, Qe());
          return null;
        }
        var n = xc(e, t);
        if (0 !== e.tag && 2 === n) {
          var s = gt(e);
          if (0 !== s) {
            t = s;
            n = oc(e, s);
          }
        }
        if (1 === n) {
          n = kl;
          hc(e, 0);
          lc(e, t);
          ic(e, Qe());
          throw n;
        }
        if (6 === n) {
          throw Error(a(345));
        }
        e.finishedWork = e.current.alternate;
        e.finishedLanes = t;
        Ec(e, Gl, Kl);
        ic(e, Qe());
        return null;
      }
      function uc(e, t) {
        var n = wl;
        wl |= 1;
        try {
          return e(t);
        } finally {
          if (0 === (wl = n)) {
            Hl = Qe() + 500;
            if (Ui) {
              Vi();
            }
          }
        }
      }
      function dc(e) {
        if (null !== ql && 0 === ql.tag && 0 == (6 & wl)) {
          Ic();
        }
        var t = wl;
        wl |= 1;
        var n = Nl.transition;
        var s = _t;
        try {
          Nl.transition = null;
          _t = 1;
          if (e) {
            return e();
          }
        } finally {
          _t = s;
          Nl.transition = n;
          if (0 == (6 & (wl = t))) {
            Vi();
          }
        }
      }
      function mc() {
        Al = Ml.current;
        Si(Ml);
      }
      function hc(e, t) {
        e.finishedWork = null;
        e.finishedLanes = 0;
        var n = e.timeoutHandle;
        if (-1 !== n) {
          e.timeoutHandle = -1;
          ii(n);
        }
        if (null !== Pl) {
          for (n = Pl.return; null !== n;) {
            var s = n;
            ta(s);
            switch (s.tag) {
              case 1:
                if (null != (s = s.type.childContextTypes)) {
                  Ai();
                }
                break;
              case 3:
                io();
                Si(wi);
                Si(Ni);
                uo();
                break;
              case 5:
                oo(s);
                break;
              case 4:
                io();
                break;
              case 13:
              case 19:
                Si(ro);
                break;
              case 10:
                Ea(s.type._context);
                break;
              case 22:
              case 23:
                mc();
            }
            n = n.return;
          }
        }
        Ol = e;
        Pl = e = Mc(e.current, null);
        Ll = Al = t;
        Rl = 0;
        kl = null;
        Ul = Fl = Dl = 0;
        Gl = Bl = null;
        if (null !== ja) {
          for (t = 0; t < ja.length; t++) {
            if (null !== (s = (n = ja[t]).interleaved)) {
              n.interleaved = null;
              var i = s.next;
              var a = n.pending;
              if (null !== a) {
                var o = a.next;
                a.next = i;
                s.next = o;
              }
              n.pending = s;
            }
          }
          ja = null;
        }
        return e;
      }
      function gc(e, t) {
        for (;;) {
          var n = Pl;
          try {
            Ta();
            mo.current = or;
            if (vo) {
              for (var s = po.memoizedState; null !== s;) {
                var i = s.queue;
                if (null !== i) {
                  i.pending = null;
                }
                s = s.next;
              }
              vo = false;
            }
            go = 0;
            xo = fo = po = null;
            _o = false;
            bo = 0;
            Cl.current = null;
            if (null === n || null === n.return) {
              Rl = 1;
              kl = t;
              Pl = null;
              break;
            }
            e: {
              var o = e;
              var r = n.return;
              var l = n;
              var c = t;
              t = Ll;
              l.flags |= 32768;
              if (null !== c && "object" == typeof c && "function" == typeof c.then) {
                var u = c;
                var d = l;
                var m = d.tag;
                if (0 == (1 & d.mode) && (0 === m || 11 === m || 15 === m)) {
                  var h = d.alternate;
                  if (h) {
                    d.updateQueue = h.updateQueue;
                    d.memoizedState = h.memoizedState;
                    d.lanes = h.lanes;
                  } else {
                    d.updateQueue = null;
                    d.memoizedState = null;
                  }
                }
                var g = xr(r);
                if (null !== g) {
                  g.flags &= -257;
                  vr(g, r, l, 0, t);
                  if (1 & g.mode) {
                    fr(o, u, t);
                  }
                  c = u;
                  var p = (t = g).updateQueue;
                  if (null === p) {
                    var f = new Set();
                    f.add(c);
                    t.updateQueue = f;
                  } else {
                    p.add(c);
                  }
                  break e;
                }
                if (0 == (1 & t)) {
                  fr(o, u, t);
                  fc();
                  break e;
                }
                c = Error(a(426));
              } else if (ia && 1 & l.mode) {
                var x = xr(r);
                if (null !== x) {
                  if (0 == (65536 & x.flags)) {
                    x.flags |= 256;
                  }
                  vr(x, r, l, 0, t);
                  ga(ur(c, l));
                  break e;
                }
              }
              o = c = ur(c, l);
              if (4 !== Rl) {
                Rl = 2;
              }
              if (null === Bl) {
                Bl = [o];
              } else {
                Bl.push(o);
              }
              o = r;
              do {
                switch (o.tag) {
                  case 3:
                    o.flags |= 65536;
                    t &= -t;
                    o.lanes |= t;
                    ka(o, gr(0, c, t));
                    break e;
                  case 1:
                    l = c;
                    var v = o.type;
                    var _ = o.stateNode;
                    if (0 == (128 & o.flags) && ("function" == typeof v.getDerivedStateFromError || null !== _ && "function" == typeof _.componentDidCatch && (null === Yl || !Yl.has(_)))) {
                      o.flags |= 65536;
                      t &= -t;
                      o.lanes |= t;
                      ka(o, pr(o, l, t));
                      break e;
                    }
                }
                o = o.return;
              } while (null !== o);
            }
            Tc(n);
          } catch (e) {
            t = e;
            if (Pl === n && null !== n) {
              Pl = n = n.return;
            }
            continue;
          }
          break;
        }
      }
      function pc() {
        var e = jl.current;
        jl.current = or;
        return null === e ? or : e;
      }
      function fc() {
        if (!(0 !== Rl && 3 !== Rl && 2 !== Rl)) {
          Rl = 4;
        }
        if (!(null === Ol || 0 == (268435455 & Dl) && 0 == (268435455 & Fl))) {
          lc(Ol, Ll);
        }
      }
      function xc(e, t) {
        var n = wl;
        wl |= 2;
        var s = pc();
        for (Ol === e && Ll === t || (Kl = null, hc(e, t));;) {
          try {
            vc();
            break;
          } catch (t) {
            gc(e, t);
          }
        }
        Ta();
        wl = n;
        jl.current = s;
        if (null !== Pl) {
          throw Error(a(261));
        }
        Ol = null;
        Ll = 0;
        return Rl;
      }
      function vc() {
        for (; null !== Pl;) {
          bc(Pl);
        }
      }
      function _c() {
        for (; null !== Pl && !qe();) {
          bc(Pl);
        }
      }
      function bc(e) {
        var t = yl(e.alternate, e, Al);
        e.memoizedProps = e.pendingProps;
        if (null === t) {
          Tc(e);
        } else {
          Pl = t;
        }
        Cl.current = null;
      }
      function Tc(e) {
        var t = e;
        do {
          var n = t.alternate;
          e = t.return;
          if (0 == (32768 & t.flags)) {
            if (null !== (n = $r(n, t, Al))) {
              return void (Pl = n);
            }
          } else {
            if (null !== (n = qr(n, t))) {
              n.flags &= 32767;
              return void (Pl = n);
            }
            if (null === e) {
              Rl = 6;
              return void (Pl = null);
            }
            e.flags |= 32768;
            e.subtreeFlags = 0;
            e.deletions = null;
          }
          if (null !== (t = t.sibling)) {
            return void (Pl = t);
          }
          Pl = t = e;
        } while (null !== t);
        if (0 === Rl) {
          Rl = 5;
        }
      }
      function Ec(e, t, n) {
        var s = _t;
        var i = Nl.transition;
        try {
          Nl.transition = null;
          _t = 1;
          (function (e, t, n, s) {
            do {
              Ic();
            } while (null !== ql);
            if (0 != (6 & wl)) {
              throw Error(a(327));
            }
            n = e.finishedWork;
            var i = e.finishedLanes;
            if (null === n) {
              return null;
            }
            e.finishedWork = null;
            e.finishedLanes = 0;
            if (n === e.current) {
              throw Error(a(177));
            }
            e.callbackNode = null;
            e.callbackPriority = 0;
            var o = n.lanes | n.childLanes;
            (function (e, t) {
              var n = e.pendingLanes & ~t;
              e.pendingLanes = t;
              e.suspendedLanes = 0;
              e.pingedLanes = 0;
              e.expiredLanes &= t;
              e.mutableReadLanes &= t;
              e.entangledLanes &= t;
              t = e.entanglements;
              var s = e.eventTimes;
              for (e = e.expirationTimes; 0 < n;) {
                var i = 31 - ot(n);
                var a = 1 << i;
                t[i] = 0;
                s[i] = -1;
                e[i] = -1;
                n &= ~a;
              }
            })(e, o);
            if (e === Ol) {
              Pl = Ol = null;
              Ll = 0;
            }
            if (!(0 == (2064 & n.subtreeFlags) && 0 == (2064 & n.flags) || $l)) {
              $l = true;
              Ye(tt, function () {
                Ic();
                return null;
              });
            }
            o = 0 != (15990 & n.flags);
            if (0 != (15990 & n.subtreeFlags) || o) {
              o = Nl.transition;
              Nl.transition = null;
              var r = _t;
              _t = 1;
              var l = wl;
              wl |= 4;
              Cl.current = null;
              (function (e, t) {
                ei = Kt;
                if (hs(e = ms())) {
                  if ("selectionStart" in e) {
                    var n = {
                      start: e.selectionStart,
                      end: e.selectionEnd
                    };
                  } else {
                    e: {
                      var s = (n = (n = e.ownerDocument) && n.defaultView || window).getSelection && n.getSelection();
                      if (s && 0 !== s.rangeCount) {
                        n = s.anchorNode;
                        var i = s.anchorOffset;
                        var o = s.focusNode;
                        s = s.focusOffset;
                        try {
                          n.nodeType;
                          o.nodeType;
                        } catch (e) {
                          n = null;
                          break e;
                        }
                        var r = 0;
                        var l = -1;
                        var c = -1;
                        var u = 0;
                        var d = 0;
                        var m = e;
                        var h = null;
                        t: for (;;) {
                          for (var g; m !== n || 0 !== i && 3 !== m.nodeType || (l = r + i), m !== o || 0 !== s && 3 !== m.nodeType || (c = r + s), 3 === m.nodeType && (r += m.nodeValue.length), null !== (g = m.firstChild);) {
                            h = m;
                            m = g;
                          }
                          for (;;) {
                            if (m === e) {
                              break t;
                            }
                            if (h === n && ++u === i) {
                              l = r;
                            }
                            if (h === o && ++d === s) {
                              c = r;
                            }
                            if (null !== (g = m.nextSibling)) {
                              break;
                            }
                            h = (m = h).parentNode;
                          }
                          m = g;
                        }
                        n = -1 === l || -1 === c ? null : {
                          start: l,
                          end: c
                        };
                      } else {
                        n = null;
                      }
                    }
                  }
                  n = n || {
                    start: 0,
                    end: 0
                  };
                } else {
                  n = null;
                }
                ti = {
                  focusedElem: e,
                  selectionRange: n
                };
                Kt = false;
                for (Jr = t; null !== Jr;) {
                  e = (t = Jr).child;
                  if (0 != (1028 & t.subtreeFlags) && null !== e) {
                    e.return = t;
                    Jr = e;
                  } else {
                    for (; null !== Jr;) {
                      t = Jr;
                      try {
                        var p = t.alternate;
                        if (0 != (1024 & t.flags)) {
                          switch (t.tag) {
                            case 0:
                            case 11:
                            case 15:
                            case 5:
                            case 6:
                            case 4:
                            case 17:
                              break;
                            case 1:
                              if (null !== p) {
                                var f = p.memoizedProps;
                                var x = p.memoizedState;
                                var v = t.stateNode;
                                var _ = v.getSnapshotBeforeUpdate(t.elementType === t.type ? f : fa(t.type, f), x);
                                v.__reactInternalSnapshotBeforeUpdate = _;
                              }
                              break;
                            case 3:
                              var b = t.stateNode.containerInfo;
                              if (1 === b.nodeType) {
                                b.textContent = "";
                              } else if (9 === b.nodeType && b.documentElement) {
                                b.removeChild(b.documentElement);
                              }
                              break;
                            default:
                              throw Error(a(163));
                          }
                        }
                      } catch (e) {
                        Sc(t, t.return, e);
                      }
                      if (null !== (e = t.sibling)) {
                        e.return = t.return;
                        Jr = e;
                        break;
                      }
                      Jr = t.return;
                    }
                  }
                }
                p = nl;
                nl = false;
              })(e, n);
              xl(n, e);
              gs(ti);
              Kt = !!ei;
              ti = ei = null;
              e.current = n;
              _l(n, e, i);
              Xe();
              wl = l;
              _t = r;
              Nl.transition = o;
            } else {
              e.current = n;
            }
            if ($l) {
              $l = false;
              ql = e;
              Xl = i;
            }
            o = e.pendingLanes;
            if (0 === o) {
              Yl = null;
            }
            (function (e) {
              if (at && "function" == typeof at.onCommitFiberRoot) {
                try {
                  at.onCommitFiberRoot(it, e, undefined, 128 == (128 & e.current.flags));
                } catch (e) {}
              }
            })(n.stateNode);
            ic(e, Qe());
            if (null !== t) {
              s = e.onRecoverableError;
              for (n = 0; n < t.length; n++) {
                i = t[n];
                s(i.value, {
                  componentStack: i.stack,
                  digest: i.digest
                });
              }
            }
            if (Wl) {
              Wl = false;
              e = zl;
              zl = null;
              throw e;
            }
            if (0 != (1 & Xl) && 0 !== e.tag) {
              Ic();
            }
            o = e.pendingLanes;
            if (0 != (1 & o)) {
              if (e === Zl) {
                Ql++;
              } else {
                Ql = 0;
                Zl = e;
              }
            } else {
              Ql = 0;
            }
            Vi();
          })(e, t, n, s);
        } finally {
          Nl.transition = i;
          _t = s;
        }
        return null;
      }
      function Ic() {
        if (null !== ql) {
          var e = bt(Xl);
          var t = Nl.transition;
          var n = _t;
          try {
            Nl.transition = null;
            _t = 16 > e ? 16 : e;
            if (null === ql) {
              var s = false;
            } else {
              e = ql;
              ql = null;
              Xl = 0;
              if (0 != (6 & wl)) {
                throw Error(a(331));
              }
              var i = wl;
              wl |= 4;
              for (Jr = e.current; null !== Jr;) {
                var o = Jr;
                var r = o.child;
                if (0 != (16 & Jr.flags)) {
                  var l = o.deletions;
                  if (null !== l) {
                    for (var c = 0; c < l.length; c++) {
                      var u = l[c];
                      for (Jr = u; null !== Jr;) {
                        var d = Jr;
                        switch (d.tag) {
                          case 0:
                          case 11:
                          case 15:
                            sl(8, d, o);
                        }
                        var m = d.child;
                        if (null !== m) {
                          m.return = d;
                          Jr = m;
                        } else {
                          for (; null !== Jr;) {
                            var h = (d = Jr).sibling;
                            var g = d.return;
                            ol(d);
                            if (d === u) {
                              Jr = null;
                              break;
                            }
                            if (null !== h) {
                              h.return = g;
                              Jr = h;
                              break;
                            }
                            Jr = g;
                          }
                        }
                      }
                    }
                    var p = o.alternate;
                    if (null !== p) {
                      var f = p.child;
                      if (null !== f) {
                        p.child = null;
                        do {
                          var x = f.sibling;
                          f.sibling = null;
                          f = x;
                        } while (null !== f);
                      }
                    }
                    Jr = o;
                  }
                }
                if (0 != (2064 & o.subtreeFlags) && null !== r) {
                  r.return = o;
                  Jr = r;
                } else {
                  e: for (; null !== Jr;) {
                    if (0 != (2048 & (o = Jr).flags)) {
                      switch (o.tag) {
                        case 0:
                        case 11:
                        case 15:
                          sl(9, o, o.return);
                      }
                    }
                    var v = o.sibling;
                    if (null !== v) {
                      v.return = o.return;
                      Jr = v;
                      break e;
                    }
                    Jr = o.return;
                  }
                }
              }
              var _ = e.current;
              for (Jr = _; null !== Jr;) {
                var b = (r = Jr).child;
                if (0 != (2064 & r.subtreeFlags) && null !== b) {
                  b.return = r;
                  Jr = b;
                } else {
                  e: for (r = _; null !== Jr;) {
                    if (0 != (2048 & (l = Jr).flags)) {
                      try {
                        switch (l.tag) {
                          case 0:
                          case 11:
                          case 15:
                            il(9, l);
                        }
                      } catch (e) {
                        Sc(l, l.return, e);
                      }
                    }
                    if (l === r) {
                      Jr = null;
                      break e;
                    }
                    var T = l.sibling;
                    if (null !== T) {
                      T.return = l.return;
                      Jr = T;
                      break e;
                    }
                    Jr = l.return;
                  }
                }
              }
              wl = i;
              Vi();
              if (at && "function" == typeof at.onPostCommitFiberRoot) {
                try {
                  at.onPostCommitFiberRoot(it, e);
                } catch (e) {}
              }
              s = true;
            }
            return s;
          } finally {
            _t = n;
            Nl.transition = t;
          }
        }
        return false;
      }
      function yc(e, t, n) {
        e = Ma(e, t = gr(0, t = ur(n, t), 1), 1);
        t = tc();
        if (null !== e) {
          xt(e, 1, t);
          ic(e, t);
        }
      }
      function Sc(e, t, n) {
        if (3 === e.tag) {
          yc(e, e, n);
        } else {
          for (; null !== t;) {
            if (3 === t.tag) {
              yc(t, e, n);
              break;
            }
            if (1 === t.tag) {
              var s = t.stateNode;
              if ("function" == typeof t.type.getDerivedStateFromError || "function" == typeof s.componentDidCatch && (null === Yl || !Yl.has(s))) {
                t = Ma(t, e = pr(t, e = ur(n, e), 1), 1);
                e = tc();
                if (null !== t) {
                  xt(t, 1, e);
                  ic(t, e);
                }
                break;
              }
            }
            t = t.return;
          }
        }
      }
      function jc(e, t, n) {
        var s = e.pingCache;
        if (null !== s) {
          s.delete(t);
        }
        t = tc();
        e.pingedLanes |= e.suspendedLanes & n;
        if (Ol === e && (Ll & n) === n) {
          if (4 === Rl || 3 === Rl && (130023424 & Ll) === Ll && 500 > Qe() - Vl) {
            hc(e, 0);
          } else {
            Ul |= n;
          }
        }
        ic(e, t);
      }
      function Cc(e, t) {
        if (0 === t) {
          if (0 == (1 & e.mode)) {
            t = 1;
          } else {
            t = ut;
            if (0 == (130023424 & (ut <<= 1))) {
              ut = 4194304;
            }
          }
        }
        var n = tc();
        if (null !== (e = wa(e, t))) {
          xt(e, t, n);
          ic(e, n);
        }
      }
      function Nc(e) {
        var t = e.memoizedState;
        var n = 0;
        if (null !== t) {
          n = t.retryLane;
        }
        Cc(e, n);
      }
      function wc(e, t) {
        var n = 0;
        switch (e.tag) {
          case 13:
            var s = e.stateNode;
            var i = e.memoizedState;
            if (null !== i) {
              n = i.retryLane;
            }
            break;
          case 19:
            s = e.stateNode;
            break;
          default:
            throw Error(a(314));
        }
        if (null !== s) {
          s.delete(t);
        }
        Cc(e, n);
      }
      function Oc(e, t) {
        return Ye(e, t);
      }
      function Pc(e, t, n, s) {
        this.tag = e;
        this.key = n;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = t;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = s;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function Lc(e, t, n, s) {
        return new Pc(e, t, n, s);
      }
      function Ac(e) {
        return !(!(e = e.prototype) || !e.isReactComponent);
      }
      function Mc(e, t) {
        var n = e.alternate;
        if (null === n) {
          (n = new Pc(e.tag, t, e.key, e.mode)).elementType = e.elementType;
          n.type = e.type;
          n.stateNode = e.stateNode;
          n.alternate = e;
          e.alternate = n;
        } else {
          n.pendingProps = t;
          n.type = e.type;
          n.flags = 0;
          n.subtreeFlags = 0;
          n.deletions = null;
        }
        n.flags = 14680064 & e.flags;
        n.childLanes = e.childLanes;
        n.lanes = e.lanes;
        n.child = e.child;
        n.memoizedProps = e.memoizedProps;
        n.memoizedState = e.memoizedState;
        n.updateQueue = e.updateQueue;
        t = e.dependencies;
        n.dependencies = null === t ? null : {
          lanes: t.lanes,
          firstContext: t.firstContext
        };
        n.sibling = e.sibling;
        n.index = e.index;
        n.ref = e.ref;
        return n;
      }
      function Rc(e, t, n, s, i, o) {
        var r = 2;
        s = e;
        if ("function" == typeof e) {
          if (Ac(e)) {
            r = 1;
          }
        } else if ("string" == typeof e) {
          r = 5;
        } else {
          e: switch (e) {
            case I:
              return kc(n.children, i, o, t);
            case y:
              r = 8;
              i |= 8;
              break;
            case S:
              (e = new Pc(12, n, t, 2 | i)).elementType = S;
              e.lanes = o;
              return e;
            case w:
              (e = new Pc(13, n, t, i)).elementType = w;
              e.lanes = o;
              return e;
            case O:
              (e = new Pc(19, n, t, i)).elementType = O;
              e.lanes = o;
              return e;
            case A:
              return Dc(n, i, o, t);
            default:
              if ("object" == typeof e && null !== e) {
                switch (e.$$typeof) {
                  case j:
                    r = 10;
                    break e;
                  case C:
                    r = 9;
                    break e;
                  case N:
                    r = 11;
                    break e;
                  case P:
                    r = 14;
                    break e;
                  case L:
                    r = 16;
                    s = null;
                    break e;
                }
              }
              throw Error(a(130, null == e ? e : typeof e, ""));
          }
        }
        (t = new Pc(r, n, t, i)).elementType = e;
        t.type = s;
        t.lanes = o;
        return t;
      }
      function kc(e, t, n, s) {
        (e = new Pc(7, e, s, t)).lanes = n;
        return e;
      }
      function Dc(e, t, n, s) {
        (e = new Pc(22, e, s, t)).elementType = A;
        e.lanes = n;
        e.stateNode = {
          isHidden: false
        };
        return e;
      }
      function Fc(e, t, n) {
        (e = new Pc(6, e, null, t)).lanes = n;
        return e;
      }
      function Uc(e, t, n) {
        (t = new Pc(4, null !== e.children ? e.children : [], e.key, t)).lanes = n;
        t.stateNode = {
          containerInfo: e.containerInfo,
          pendingChildren: null,
          implementation: e.implementation
        };
        return t;
      }
      function Bc(e, t, n, s, i) {
        this.tag = t;
        this.containerInfo = e;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = ft(0);
        this.expirationTimes = ft(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = ft(0);
        this.identifierPrefix = s;
        this.onRecoverableError = i;
        this.mutableSourceEagerHydrationData = null;
      }
      function Gc(e, t, n, s, i, a, o, r, l) {
        e = new Bc(e, t, n, r, l);
        if (1 === t) {
          t = 1;
          if (true === a) {
            t |= 8;
          }
        } else {
          t = 0;
        }
        a = new Pc(3, null, null, t);
        e.current = a;
        a.stateNode = e;
        a.memoizedState = {
          element: s,
          isDehydrated: n,
          cache: null,
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        Pa(a);
        return e;
      }
      function Vc(e) {
        if (!e) {
          return Ci;
        }
        e: {
          if (Ve(e = e._reactInternals) !== e || 1 !== e.tag) {
            throw Error(a(170));
          }
          var t = e;
          do {
            switch (t.tag) {
              case 3:
                t = t.stateNode.context;
                break e;
              case 1:
                if (Li(t.type)) {
                  t = t.stateNode.__reactInternalMemoizedMergedChildContext;
                  break e;
                }
            }
            t = t.return;
          } while (null !== t);
          throw Error(a(171));
        }
        if (1 === e.tag) {
          var n = e.type;
          if (Li(n)) {
            return Ri(e, n, t);
          }
        }
        return t;
      }
      function Hc(e, t, n, s, i, a, o, r, l) {
        (e = Gc(n, s, true, e, 0, a, 0, r, l)).context = Vc(null);
        n = e.current;
        (a = {
          eventTime: s = tc(),
          lane: i = nc(n),
          tag: 0,
          payload: null,
          callback: null,
          next: null
        }).callback = null != t ? t : null;
        Ma(n, a, i);
        e.current.lanes = i;
        xt(e, i, s);
        ic(e, s);
        return e;
      }
      function Kc(e, t, n, s) {
        var i = t.current;
        var a = tc();
        var o = nc(i);
        n = Vc(n);
        if (null === t.context) {
          t.context = n;
        } else {
          t.pendingContext = n;
        }
        (t = {
          eventTime: a,
          lane: o,
          tag: 0,
          payload: null,
          callback: null,
          next: null
        }).payload = {
          element: e
        };
        if (null !== (s = undefined === s ? null : s)) {
          t.callback = s;
        }
        if (null !== (e = Ma(i, t, o))) {
          sc(e, i, o, a);
          Ra(e, i, o);
        }
        return o;
      }
      function Wc(e) {
        return (e = e.current).child ? (e.child.tag, e.child.stateNode) : null;
      }
      function zc(e, t) {
        if (null !== (e = e.memoizedState) && null !== e.dehydrated) {
          var n = e.retryLane;
          e.retryLane = 0 !== n && n < t ? n : t;
        }
      }
      function Yc(e, t) {
        zc(e, t);
        if (e = e.alternate) {
          zc(e, t);
        }
      }
      yl = function (e, t, n) {
        if (null !== e) {
          if (e.memoizedProps !== t.pendingProps || wi.current) {
            br = true;
          } else {
            if (0 == (e.lanes & n) && 0 == (128 & t.flags)) {
              br = false;
              return function (e, t, n) {
                switch (t.tag) {
                  case 3:
                    Or(t);
                    ha();
                    break;
                  case 5:
                    ao(t);
                    break;
                  case 1:
                    if (Li(t.type)) {
                      ki(t);
                    }
                    break;
                  case 4:
                    so(t, t.stateNode.containerInfo);
                    break;
                  case 10:
                    var s = t.type._context;
                    var i = t.memoizedProps.value;
                    ji(xa, s._currentValue);
                    s._currentValue = i;
                    break;
                  case 13:
                    if (null !== (s = t.memoizedState)) {
                      return null !== s.dehydrated ? (ji(ro, 1 & ro.current), t.flags |= 128, null) : 0 != (n & t.child.childLanes) ? Fr(e, t, n) : (ji(ro, 1 & ro.current), null !== (e = Wr(e, t, n)) ? e.sibling : null);
                    }
                    ji(ro, 1 & ro.current);
                    break;
                  case 19:
                    s = 0 != (n & t.childLanes);
                    if (0 != (128 & e.flags)) {
                      if (s) {
                        return Hr(e, t, n);
                      }
                      t.flags |= 128;
                    }
                    if (null !== (i = t.memoizedState)) {
                      i.rendering = null;
                      i.tail = null;
                      i.lastEffect = null;
                    }
                    ji(ro, ro.current);
                    if (s) {
                      break;
                    }
                    return null;
                  case 22:
                  case 23:
                    t.lanes = 0;
                    return Sr(e, t, n);
                }
                return Wr(e, t, n);
              }(e, t, n);
            }
            br = 0 != (131072 & e.flags);
          }
        } else {
          br = false;
          if (ia && 0 != (1048576 & t.flags)) {
            Ji(t, zi, t.index);
          }
        }
        t.lanes = 0;
        switch (t.tag) {
          case 2:
            var s = t.type;
            Kr(e, t);
            e = t.pendingProps;
            var i = Pi(t, Ni.current);
            ya(t, n);
            i = yo(null, t, s, e, i, n);
            var o = So();
            t.flags |= 1;
            if ("object" == typeof i && null !== i && "function" == typeof i.render && undefined === i.$$typeof) {
              t.tag = 1;
              t.memoizedState = null;
              t.updateQueue = null;
              if (Li(s)) {
                o = true;
                ki(t);
              } else {
                o = false;
              }
              t.memoizedState = null !== i.state && undefined !== i.state ? i.state : null;
              Pa(t);
              i.updater = Ga;
              t.stateNode = i;
              i._reactInternals = t;
              Wa(t, s, e, n);
              t = wr(null, t, s, true, o, n);
            } else {
              t.tag = 0;
              if (ia && o) {
                ea(t);
              }
              Tr(null, t, i, n);
              t = t.child;
            }
            return t;
          case 16:
            s = t.elementType;
            e: {
              Kr(e, t);
              e = t.pendingProps;
              s = (i = s._init)(s._payload);
              t.type = s;
              i = t.tag = function (e) {
                if ("function" == typeof e) {
                  return Ac(e) ? 1 : 0;
                }
                if (null != e) {
                  if ((e = e.$$typeof) === N) {
                    return 11;
                  }
                  if (e === P) {
                    return 14;
                  }
                }
                return 2;
              }(s);
              e = fa(s, e);
              switch (i) {
                case 0:
                  t = Cr(null, t, s, e, n);
                  break e;
                case 1:
                  t = Nr(null, t, s, e, n);
                  break e;
                case 11:
                  t = Er(null, t, s, e, n);
                  break e;
                case 14:
                  t = Ir(null, t, s, fa(s.type, e), n);
                  break e;
              }
              throw Error(a(306, s, ""));
            }
            return t;
          case 0:
            s = t.type;
            i = t.pendingProps;
            return Cr(e, t, s, i = t.elementType === s ? i : fa(s, i), n);
          case 1:
            s = t.type;
            i = t.pendingProps;
            return Nr(e, t, s, i = t.elementType === s ? i : fa(s, i), n);
          case 3:
            e: {
              Or(t);
              if (null === e) {
                throw Error(a(387));
              }
              s = t.pendingProps;
              i = (o = t.memoizedState).element;
              La(e, t);
              Da(t, s, null, n);
              var r = t.memoizedState;
              s = r.element;
              if (o.isDehydrated) {
                o = {
                  element: s,
                  isDehydrated: false,
                  cache: r.cache,
                  pendingSuspenseBoundaries: r.pendingSuspenseBoundaries,
                  transitions: r.transitions
                };
                t.updateQueue.baseState = o;
                t.memoizedState = o;
                if (256 & t.flags) {
                  t = Pr(e, t, s, n, i = ur(Error(a(423)), t));
                  break e;
                }
                if (s !== i) {
                  t = Pr(e, t, s, n, i = ur(Error(a(424)), t));
                  break e;
                }
                sa = ci(t.stateNode.containerInfo.firstChild);
                na = t;
                ia = true;
                aa = null;
                n = Qa(t, null, s, n);
                for (t.child = n; n;) {
                  n.flags = -3 & n.flags | 4096;
                  n = n.sibling;
                }
              } else {
                ha();
                if (s === i) {
                  t = Wr(e, t, n);
                  break e;
                }
                Tr(e, t, s, n);
              }
              t = t.child;
            }
            return t;
          case 5:
            ao(t);
            if (null === e) {
              ca(t);
            }
            s = t.type;
            i = t.pendingProps;
            o = null !== e ? e.memoizedProps : null;
            r = i.children;
            if ("textarea" === s || "noscript" === s || "string" == typeof i.children || "number" == typeof i.children || "object" == typeof i.dangerouslySetInnerHTML && null !== i.dangerouslySetInnerHTML && null != i.dangerouslySetInnerHTML.__html) {
              r = null;
            } else if (null !== o && ("textarea" === s || "noscript" === s || "string" == typeof o.children || "number" == typeof o.children || "object" == typeof o.dangerouslySetInnerHTML && null !== o.dangerouslySetInnerHTML && null != o.dangerouslySetInnerHTML.__html)) {
              t.flags |= 32;
            }
            jr(e, t);
            Tr(e, t, r, n);
            return t.child;
          case 6:
            if (null === e) {
              ca(t);
            }
            return null;
          case 13:
            return Fr(e, t, n);
          case 4:
            so(t, t.stateNode.containerInfo);
            s = t.pendingProps;
            if (null === e) {
              t.child = Xa(t, null, s, n);
            } else {
              Tr(e, t, s, n);
            }
            return t.child;
          case 11:
            s = t.type;
            i = t.pendingProps;
            return Er(e, t, s, i = t.elementType === s ? i : fa(s, i), n);
          case 7:
            Tr(e, t, t.pendingProps, n);
            return t.child;
          case 8:
          case 12:
            Tr(e, t, t.pendingProps.children, n);
            return t.child;
          case 10:
            e: {
              s = t.type._context;
              i = t.pendingProps;
              o = t.memoizedProps;
              r = i.value;
              ji(xa, s._currentValue);
              s._currentValue = r;
              if (null !== o) {
                if (rs(o.value, r)) {
                  if (o.children === i.children && !wi.current) {
                    t = Wr(e, t, n);
                    break e;
                  }
                } else {
                  for (null !== (o = t.child) && (o.return = t); null !== o;) {
                    var l = o.dependencies;
                    if (null !== l) {
                      r = o.child;
                      for (var c = l.firstContext; null !== c;) {
                        if (c.context === s) {
                          if (1 === o.tag) {
                            (c = {
                              eventTime: -1,
                              lane: n & -n,
                              tag: 0,
                              payload: null,
                              callback: null,
                              next: null
                            }).tag = 2;
                            var u = o.updateQueue;
                            if (null !== u) {
                              var d = (u = u.shared).pending;
                              if (null === d) {
                                c.next = c;
                              } else {
                                c.next = d.next;
                                d.next = c;
                              }
                              u.pending = c;
                            }
                          }
                          o.lanes |= n;
                          if (null !== (c = o.alternate)) {
                            c.lanes |= n;
                          }
                          Ia(o.return, n, t);
                          l.lanes |= n;
                          break;
                        }
                        c = c.next;
                      }
                    } else if (10 === o.tag) {
                      r = o.type === t.type ? null : o.child;
                    } else if (18 === o.tag) {
                      if (null === (r = o.return)) {
                        throw Error(a(341));
                      }
                      r.lanes |= n;
                      if (null !== (l = r.alternate)) {
                        l.lanes |= n;
                      }
                      Ia(r, n, t);
                      r = o.sibling;
                    } else {
                      r = o.child;
                    }
                    if (null !== r) {
                      r.return = o;
                    } else {
                      for (r = o; null !== r;) {
                        if (r === t) {
                          r = null;
                          break;
                        }
                        if (null !== (o = r.sibling)) {
                          o.return = r.return;
                          r = o;
                          break;
                        }
                        r = r.return;
                      }
                    }
                    o = r;
                  }
                }
              }
              Tr(e, t, i.children, n);
              t = t.child;
            }
            return t;
          case 9:
            i = t.type;
            s = t.pendingProps.children;
            ya(t, n);
            s = s(i = Sa(i));
            t.flags |= 1;
            Tr(e, t, s, n);
            return t.child;
          case 14:
            i = fa(s = t.type, t.pendingProps);
            return Ir(e, t, s, i = fa(s.type, i), n);
          case 15:
            return yr(e, t, t.type, t.pendingProps, n);
          case 17:
            s = t.type;
            i = t.pendingProps;
            i = t.elementType === s ? i : fa(s, i);
            Kr(e, t);
            t.tag = 1;
            if (Li(s)) {
              e = true;
              ki(t);
            } else {
              e = false;
            }
            ya(t, n);
            Ha(t, s, i);
            Wa(t, s, i, n);
            return wr(null, t, s, true, e, n);
          case 19:
            return Hr(e, t, n);
          case 22:
            return Sr(e, t, n);
        }
        throw Error(a(156, t.tag));
      };
      var $c = "function" == typeof reportError ? reportError : function (e) {
        console.error(e);
      };
      function qc(e) {
        this._internalRoot = e;
      }
      function Xc(e) {
        this._internalRoot = e;
      }
      function Qc(e) {
        return !(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType);
      }
      function Zc(e) {
        return !(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType && (8 !== e.nodeType || " react-mount-point-unstable " !== e.nodeValue));
      }
      function Jc() {}
      function eu(e, t, n, s, i) {
        var a = n._reactRootContainer;
        if (a) {
          var o = a;
          if ("function" == typeof i) {
            var r = i;
            i = function () {
              var e = Wc(o);
              r.call(e);
            };
          }
          Kc(t, o, e, i);
        } else {
          o = function (e, t, n, s, i) {
            if (i) {
              if ("function" == typeof s) {
                var a = s;
                s = function () {
                  var e = Wc(o);
                  a.call(e);
                };
              }
              var o = Hc(t, s, e, 0, null, false, 0, "", Jc);
              e._reactRootContainer = o;
              e[gi] = o.current;
              Vs(8 === e.nodeType ? e.parentNode : e);
              dc();
              return o;
            }
            for (; i = e.lastChild;) {
              e.removeChild(i);
            }
            if ("function" == typeof s) {
              var r = s;
              s = function () {
                var e = Wc(l);
                r.call(e);
              };
            }
            var l = Gc(e, 0, false, null, 0, false, 0, "", Jc);
            e._reactRootContainer = l;
            e[gi] = l.current;
            Vs(8 === e.nodeType ? e.parentNode : e);
            dc(function () {
              Kc(t, l, n, s);
            });
            return l;
          }(n, t, e, i, s);
        }
        return Wc(o);
      }
      Xc.prototype.render = qc.prototype.render = function (e) {
        var t = this._internalRoot;
        if (null === t) {
          throw Error(a(409));
        }
        Kc(e, t, null, null);
      };
      Xc.prototype.unmount = qc.prototype.unmount = function () {
        var e = this._internalRoot;
        if (null !== e) {
          this._internalRoot = null;
          var t = e.containerInfo;
          dc(function () {
            Kc(null, e, null, null);
          });
          t[gi] = null;
        }
      };
      Xc.prototype.unstable_scheduleHydration = function (e) {
        if (e) {
          var t = _t;
          e = {
            blockedOn: null,
            target: e,
            priority: t
          };
          for (var n = 0; n < At.length && 0 !== t && t < At[n].priority; n++) {
            ;
          }
          At.splice(n, 0, e);
          if (0 === n) {
            Dt(e);
          }
        }
      };
      Tt = function (e) {
        switch (e.tag) {
          case 3:
            var t = e.stateNode;
            if (t.current.memoizedState.isDehydrated) {
              var n = dt(t.pendingLanes);
              if (0 !== n) {
                vt(t, 1 | n);
                ic(t, Qe());
                if (0 == (6 & wl)) {
                  Hl = Qe() + 500;
                  Vi();
                }
              }
            }
            break;
          case 13:
            dc(function () {
              var t = wa(e, 1);
              if (null !== t) {
                var n = tc();
                sc(t, e, 1, n);
              }
            });
            Yc(e, 1);
        }
      };
      Et = function (e) {
        if (13 === e.tag) {
          var t = wa(e, 134217728);
          if (null !== t) {
            sc(t, e, 134217728, tc());
          }
          Yc(e, 134217728);
        }
      };
      It = function (e) {
        if (13 === e.tag) {
          var t = nc(e);
          var n = wa(e, t);
          if (null !== n) {
            sc(n, e, t, tc());
          }
          Yc(e, t);
        }
      };
      yt = function () {
        return _t;
      };
      St = function (e, t) {
        var n = _t;
        try {
          _t = e;
          return t();
        } finally {
          _t = n;
        }
      };
      Ee = function (e, t, n) {
        switch (t) {
          case "input":
            Z(e, n);
            t = n.name;
            if ("radio" === n.type && null != t) {
              for (n = e; n.parentNode;) {
                n = n.parentNode;
              }
              n = n.querySelectorAll("input[name=" + JSON.stringify("" + t) + '][type="radio"]');
              for (t = 0; t < n.length; t++) {
                var s = n[t];
                if (s !== e && s.form === e.form) {
                  var i = s[hi] || null;
                  if (!i) {
                    throw Error(a(90));
                  }
                  Y(s);
                  Z(s, i);
                }
              }
            }
            break;
          case "textarea":
            ae(e, n);
            break;
          case "select":
            if (null != (t = n.value)) {
              ne(e, !!n.multiple, t, false);
            }
        }
      };
      Ne = uc;
      we = dc;
      var tu = {
        usingClientEntryPoint: false,
        Events: [_i, bi, Ti, je, Ce, uc]
      };
      var nu = {
        findFiberByHostInstance: vi,
        bundleType: 0,
        version: "18.2.0",
        rendererPackageName: "react-dom"
      };
      var su = {
        bundleType: nu.bundleType,
        version: nu.version,
        rendererPackageName: nu.rendererPackageName,
        rendererConfig: nu.rendererConfig,
        overrideHookState: null,
        overrideHookStateDeletePath: null,
        overrideHookStateRenamePath: null,
        overrideProps: null,
        overridePropsDeletePath: null,
        overridePropsRenamePath: null,
        setErrorHandler: null,
        setSuspenseHandler: null,
        scheduleUpdate: null,
        currentDispatcherRef: b.ReactCurrentDispatcher,
        findHostInstanceByFiber: function (e) {
          return null === (e = We(e)) ? null : e.stateNode;
        },
        findFiberByHostInstance: nu.findFiberByHostInstance || function () {
          return null;
        },
        findHostInstancesForRefresh: null,
        scheduleRefresh: null,
        scheduleRoot: null,
        setRefreshHandler: null,
        getCurrentFiber: null,
        reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
      };
      if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        if (!__REACT_DEVTOOLS_GLOBAL_HOOK__.isDisabled && __REACT_DEVTOOLS_GLOBAL_HOOK__.supportsFiber) {
          try {
            it = __REACT_DEVTOOLS_GLOBAL_HOOK__.inject(su);
            at = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          } catch (ue) {}
        }
      }
      t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tu;
      t.createPortal = function (e, t) {
        var n = 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null;
        if (!!(!t || 1 !== t.nodeType && 9 !== t.nodeType && 11 !== t.nodeType)) {
          throw Error(a(200));
        }
        return function (e, t, n) {
          var s = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
          return {
            $$typeof: E,
            key: null == s ? null : "" + s,
            children: e,
            containerInfo: t,
            implementation: n
          };
        }(e, t, null, n);
      };
      t.createRoot = function (e, t) {
        if (!!(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType)) {
          throw Error(a(299));
        }
        var n = false;
        var s = "";
        var i = $c;
        if (null != t) {
          if (true === t.unstable_strictMode) {
            n = true;
          }
          if (undefined !== t.identifierPrefix) {
            s = t.identifierPrefix;
          }
          if (undefined !== t.onRecoverableError) {
            i = t.onRecoverableError;
          }
        }
        t = Gc(e, 1, false, null, 0, n, 0, s, i);
        e[gi] = t.current;
        Vs(8 === e.nodeType ? e.parentNode : e);
        return new qc(t);
      };
      t.findDOMNode = function (e) {
        if (null == e) {
          return null;
        }
        if (1 === e.nodeType) {
          return e;
        }
        var t = e._reactInternals;
        if (undefined === t) {
          if ("function" == typeof e.render) {
            throw Error(a(188));
          }
          e = Object.keys(e).join(",");
          throw Error(a(268, e));
        }
        return e = null === (e = We(t)) ? null : e.stateNode;
      };
      t.flushSync = function (e) {
        return dc(e);
      };
      t.hydrate = function (e, t, n) {
        if (!!(!t || 1 !== t.nodeType && 9 !== t.nodeType && 11 !== t.nodeType && (8 !== t.nodeType || " react-mount-point-unstable " !== t.nodeValue))) {
          throw Error(a(200));
        }
        return eu(null, e, t, true, n);
      };
      t.hydrateRoot = function (e, t, n) {
        if (!!(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType)) {
          throw Error(a(405));
        }
        var s = null != n && n.hydratedSources || null;
        var i = false;
        var o = "";
        var r = $c;
        if (null != n) {
          if (true === n.unstable_strictMode) {
            i = true;
          }
          if (undefined !== n.identifierPrefix) {
            o = n.identifierPrefix;
          }
          if (undefined !== n.onRecoverableError) {
            r = n.onRecoverableError;
          }
        }
        t = Hc(t, null, e, 1, null != n ? n : null, i, 0, o, r);
        e[gi] = t.current;
        Vs(e);
        if (s) {
          for (e = 0; e < s.length; e++) {
            i = (i = (n = s[e])._getVersion)(n._source);
            if (null == t.mutableSourceEagerHydrationData) {
              t.mutableSourceEagerHydrationData = [n, i];
            } else {
              t.mutableSourceEagerHydrationData.push(n, i);
            }
          }
        }
        return new Xc(t);
      };
      t.render = function (e, t, n) {
        if (!!(!t || 1 !== t.nodeType && 9 !== t.nodeType && 11 !== t.nodeType && (8 !== t.nodeType || " react-mount-point-unstable " !== t.nodeValue))) {
          throw Error(a(200));
        }
        return eu(null, e, t, false, n);
      };
      t.unmountComponentAtNode = function (e) {
        if (!!(!e || 1 !== e.nodeType && 9 !== e.nodeType && 11 !== e.nodeType && (8 !== e.nodeType || " react-mount-point-unstable " !== e.nodeValue))) {
          throw Error(a(40));
        }
        return !!e._reactRootContainer && (dc(function () {
          eu(null, null, e, false, function () {
            e._reactRootContainer = null;
            e[gi] = null;
          });
        }), true);
      };
      t.unstable_batchedUpdates = uc;
      t.unstable_renderSubtreeIntoContainer = function (e, t, n, s) {
        if (!!(!n || 1 !== n.nodeType && 9 !== n.nodeType && 11 !== n.nodeType && (8 !== n.nodeType || " react-mount-point-unstable " !== n.nodeValue))) {
          throw Error(a(200));
        }
        if (null == e || undefined === e._reactInternals) {
          throw Error(a(38));
        }
        return eu(e, t, n, false, s);
      };
      t.version = "18.2.0-next-9e3b772b8-20220608";
    },
    352: (e, t, n) => {
      "use strict";

      var s = n(104);
      t.createRoot = s.createRoot;
      t.hydrateRoot = s.hydrateRoot;
    },
    104: (e, t, n) => {
      "use strict";

      !function e() {
        if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE) {
          try {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
          } catch (e) {
            console.error(e);
          }
        }
      }();
      e.exports = n(516);
    },
    808: (e, t, n) => {
      "use strict";

      var s = n(504);
      var i = Symbol.for("react.element");
      var a = Symbol.for("react.fragment");
      var o = Object.prototype.hasOwnProperty;
      var r = s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
      var l = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      function c(e, t, n) {
        var s;
        var a = {};
        var c = null;
        var u = null;
        if (undefined !== n) {
          c = "" + n;
        }
        if (undefined !== t.key) {
          c = "" + t.key;
        }
        if (undefined !== t.ref) {
          u = t.ref;
        }
        for (s in t) if (o.call(t, s) && !l.hasOwnProperty(s)) {
          a[s] = t[s];
        }
        if (e && e.defaultProps) {
          for (s in t = e.defaultProps) if (undefined === a[s]) {
            a[s] = t[s];
          }
        }
        return {
          $$typeof: i,
          type: e,
          key: c,
          ref: u,
          props: a,
          _owner: r.current
        };
      }
      t.Fragment = a;
      t.jsx = c;
      t.jsxs = c;
    },
    28: (e, t) => {
      "use strict";

      var n = Symbol.for("react.element");
      var s = Symbol.for("react.portal");
      var i = Symbol.for("react.fragment");
      var a = Symbol.for("react.strict_mode");
      var o = Symbol.for("react.profiler");
      var r = Symbol.for("react.provider");
      var l = Symbol.for("react.context");
      var c = Symbol.for("react.forward_ref");
      var u = Symbol.for("react.suspense");
      var d = Symbol.for("react.memo");
      var m = Symbol.for("react.lazy");
      var h = Symbol.iterator;
      var g = {
        isMounted: function () {
          return false;
        },
        enqueueForceUpdate: function () {},
        enqueueReplaceState: function () {},
        enqueueSetState: function () {}
      };
      var p = Object.assign;
      var f = {};
      function x(e, t, n) {
        this.props = e;
        this.context = t;
        this.refs = f;
        this.updater = n || g;
      }
      function v() {}
      function _(e, t, n) {
        this.props = e;
        this.context = t;
        this.refs = f;
        this.updater = n || g;
      }
      x.prototype.isReactComponent = {};
      x.prototype.setState = function (e, t) {
        if ("object" != typeof e && "function" != typeof e && null != e) {
          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, e, t, "setState");
      };
      x.prototype.forceUpdate = function (e) {
        this.updater.enqueueForceUpdate(this, e, "forceUpdate");
      };
      v.prototype = x.prototype;
      var b = _.prototype = new v();
      b.constructor = _;
      p(b, x.prototype);
      b.isPureReactComponent = true;
      var T = Array.isArray;
      var E = Object.prototype.hasOwnProperty;
      var I = {
        current: null
      };
      var y = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      function S(e, t, s) {
        var i;
        var a = {};
        var o = null;
        var r = null;
        if (null != t) {
          if (undefined !== t.ref) {
            r = t.ref;
          }
          if (undefined !== t.key) {
            o = "" + t.key;
          }
          for (i in t) if (E.call(t, i) && !y.hasOwnProperty(i)) {
            a[i] = t[i];
          }
        }
        var l = arguments.length - 2;
        if (1 === l) {
          a.children = s;
        } else if (1 < l) {
          var c = Array(l);
          for (var u = 0; u < l; u++) {
            c[u] = arguments[u + 2];
          }
          a.children = c;
        }
        if (e && e.defaultProps) {
          for (i in l = e.defaultProps) if (undefined === a[i]) {
            a[i] = l[i];
          }
        }
        return {
          $$typeof: n,
          type: e,
          key: o,
          ref: r,
          props: a,
          _owner: I.current
        };
      }
      function j(e) {
        return "object" == typeof e && null !== e && e.$$typeof === n;
      }
      var C = /\/+/g;
      function N(e, t) {
        return "object" == typeof e && null !== e && null != e.key ? function (e) {
          var t = {
            "=": "=0",
            ":": "=2"
          };
          return "$" + e.replace(/[=:]/g, function (e) {
            return t[e];
          });
        }("" + e.key) : t.toString(36);
      }
      function w(e, t, i, a, o) {
        var r = typeof e;
        if (!("undefined" !== r && "boolean" !== r)) {
          e = null;
        }
        var l = false;
        if (null === e) {
          l = true;
        } else {
          switch (r) {
            case "string":
            case "number":
              l = true;
              break;
            case "object":
              switch (e.$$typeof) {
                case n:
                case s:
                  l = true;
              }
          }
        }
        if (l) {
          o = o(l = e);
          e = "" === a ? "." + N(l, 0) : a;
          if (T(o)) {
            i = "";
            if (null != e) {
              i = e.replace(C, "$&/") + "/";
            }
            w(o, t, i, "", function (e) {
              return e;
            });
          } else if (null != o) {
            if ("object" == typeof o && null !== o && o.$$typeof === n) {
              o = function (e, t) {
                return {
                  $$typeof: n,
                  type: e.type,
                  key: t,
                  ref: e.ref,
                  props: e.props,
                  _owner: e._owner
                };
              }(o, i + (!o.key || l && l.key === o.key ? "" : ("" + o.key).replace(C, "$&/") + "/") + e);
            }
            t.push(o);
          }
          return 1;
        }
        l = 0;
        a = "" === a ? "." : a + ":";
        if (T(e)) {
          for (var c = 0; c < e.length; c++) {
            var u = a + N(r = e[c], c);
            l += w(r, t, i, u, o);
          }
        } else {
          u = function (e) {
            return null === e || "object" != typeof e ? null : "function" == typeof (e = h && e[h] || e["@@iterator"]) ? e : null;
          }(e);
          if ("function" == typeof u) {
            e = u.call(e);
            for (c = 0; !(r = e.next()).done;) {
              l += w(r = r.value, t, i, u = a + N(r, c++), o);
            }
          } else if ("object" === r) {
            t = String(e);
            throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === t ? "object with keys {" + Object.keys(e).join(", ") + "}" : t) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return l;
      }
      function O(e, t, n) {
        if (null == e) {
          return e;
        }
        var s = [];
        var i = 0;
        w(e, s, "", "", function (e) {
          return t.call(n, e, i++);
        });
        return s;
      }
      function P(e) {
        if (-1 === e._status) {
          var t = e._result;
          (t = t()).then(function (t) {
            if (!(0 !== e._status && -1 !== e._status)) {
              e._status = 1;
              e._result = t;
            }
          }, function (t) {
            if (!(0 !== e._status && -1 !== e._status)) {
              e._status = 2;
              e._result = t;
            }
          });
          if (-1 === e._status) {
            e._status = 0;
            e._result = t;
          }
        }
        if (1 === e._status) {
          return e._result.default;
        }
        throw e._result;
      }
      var L = {
        current: null
      };
      var A = {
        transition: null
      };
      var M = {
        ReactCurrentDispatcher: L,
        ReactCurrentBatchConfig: A,
        ReactCurrentOwner: I
      };
      t.Children = {
        map: O,
        forEach: function (e, t, n) {
          O(e, function () {
            t.apply(this, arguments);
          }, n);
        },
        count: function (e) {
          var t = 0;
          O(e, function () {
            t++;
          });
          return t;
        },
        toArray: function (e) {
          return O(e, function (e) {
            return e;
          }) || [];
        },
        only: function (e) {
          if (!("object" == typeof e && null !== e && e.$$typeof === n)) {
            throw Error("React.Children.only expected to receive a single React element child.");
          }
          return e;
        }
      };
      t.Component = x;
      t.Fragment = i;
      t.Profiler = o;
      t.PureComponent = _;
      t.StrictMode = a;
      t.Suspense = u;
      t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = M;
      t.cloneElement = function (e, t, s) {
        if (null == e) {
          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + e + ".");
        }
        var i = p({}, e.props);
        var a = e.key;
        var o = e.ref;
        var r = e._owner;
        if (null != t) {
          if (undefined !== t.ref) {
            o = t.ref;
            r = I.current;
          }
          if (undefined !== t.key) {
            a = "" + t.key;
          }
          if (e.type && e.type.defaultProps) {
            var l = e.type.defaultProps;
          }
          for (c in t) if (E.call(t, c) && !y.hasOwnProperty(c)) {
            i[c] = undefined === t[c] && undefined !== l ? l[c] : t[c];
          }
        }
        var c = arguments.length - 2;
        if (1 === c) {
          i.children = s;
        } else if (1 < c) {
          l = Array(c);
          for (var u = 0; u < c; u++) {
            l[u] = arguments[u + 2];
          }
          i.children = l;
        }
        return {
          $$typeof: n,
          type: e.type,
          key: a,
          ref: o,
          props: i,
          _owner: r
        };
      };
      t.createContext = function (e) {
        (e = {
          $$typeof: l,
          _currentValue: e,
          _currentValue2: e,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        }).Provider = {
          $$typeof: r,
          _context: e
        };
        return e.Consumer = e;
      };
      t.createElement = S;
      t.createFactory = function (e) {
        var t = S.bind(null, e);
        t.type = e;
        return t;
      };
      t.createRef = function () {
        return {
          current: null
        };
      };
      t.forwardRef = function (e) {
        return {
          $$typeof: c,
          render: e
        };
      };
      t.isValidElement = j;
      t.lazy = function (e) {
        return {
          $$typeof: m,
          _payload: {
            _status: -1,
            _result: e
          },
          _init: P
        };
      };
      t.memo = function (e, t) {
        return {
          $$typeof: d,
          type: e,
          compare: undefined === t ? null : t
        };
      };
      t.startTransition = function (e) {
        var t = A.transition;
        A.transition = {};
        try {
          e();
        } finally {
          A.transition = t;
        }
      };
      t.unstable_act = function () {
        throw Error("act(...) is not supported in production builds of React.");
      };
      t.useCallback = function (e, t) {
        return L.current.useCallback(e, t);
      };
      t.useContext = function (e) {
        return L.current.useContext(e);
      };
      t.useDebugValue = function () {};
      t.useDeferredValue = function (e) {
        return L.current.useDeferredValue(e);
      };
      t.useEffect = function (e, t) {
        return L.current.useEffect(e, t);
      };
      t.useId = function () {
        return L.current.useId();
      };
      t.useImperativeHandle = function (e, t, n) {
        return L.current.useImperativeHandle(e, t, n);
      };
      t.useInsertionEffect = function (e, t) {
        return L.current.useInsertionEffect(e, t);
      };
      t.useLayoutEffect = function (e, t) {
        return L.current.useLayoutEffect(e, t);
      };
      t.useMemo = function (e, t) {
        return L.current.useMemo(e, t);
      };
      t.useReducer = function (e, t, n) {
        return L.current.useReducer(e, t, n);
      };
      t.useRef = function (e) {
        return L.current.useRef(e);
      };
      t.useState = function (e) {
        return L.current.useState(e);
      };
      t.useSyncExternalStore = function (e, t, n) {
        return L.current.useSyncExternalStore(e, t, n);
      };
      t.useTransition = function () {
        return L.current.useTransition();
      };
      t.version = "18.2.0";
    },
    504: (e, t, n) => {
      "use strict";

      e.exports = n(28);
    },
    624: (e, t, n) => {
      "use strict";

      e.exports = n(808);
    },
    928: function (e) {
      e.exports = function () {
        "use strict";

        var e = undefined;
        if ("undefined" != typeof window) {
          e = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;
        }
        if (!(e || "undefined" == typeof process || "node" !== process.title)) {
          e = setImmediate;
        }
        var t = e = e || function (e) {
          window.setTimeout(e, 16.666666666666668);
        };
        var n = Array.prototype.concat;
        var s = Array.prototype.slice;
        function i(e, t) {
          var i = arguments.length;
          var a = Array(i > 2 ? i - 2 : 0);
          for (var o = 2; o < i; o++) {
            a[o - 2] = arguments[o];
          }
          return function () {
            var i = arguments.length;
            var o = Array(i);
            for (var r = 0; r < i; r++) {
              o[r] = arguments[r];
            }
            e.apply(t, n.call(a, s.call(o)));
          };
        }
        function a(e, t) {
          for (var n in t) if (t.hasOwnProperty(n)) {
            e[n] = t[n];
          }
        }
        function o(e) {
          return t(e);
        }
        function r(e, t) {
          var n = e.indexOf(t);
          if (-1 !== n) {
            e.splice(n, 1);
          }
        }
        var l = {};
        function c(e) {
          if (l[e]) {
            return l[e];
          }
          var t = e.replace("#", "");
          if (3 === t.length) {
            t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2];
          }
          var n = t.match(/.{2}/g);
          if (!n || n.length < 3) {
            throw new Error("Expected a color string of format #rrggbb");
          }
          var s = {
            r: parseInt(n[0], 16),
            g: parseInt(n[1], 16),
            b: parseInt(n[2], 16)
          };
          l[e] = s;
          return s;
        }
        function u(e, t, n) {
          var s = e.toString(16);
          var i = t.toString(16);
          var a = n.toString(16);
          return "#" + (s = s.length < 2 ? "0" + s : s) + (i = i.length < 2 ? "0" + i : i) + (a = a.length < 2 ? "0" + a : a);
        }
        var d = Object.freeze({
          bind: i,
          extend: a,
          onFrame: o,
          removeFirst: r,
          hexToRGB: c,
          rgbToHex: u
        });
        function m(e, t, n, s, i) {
          return s + (e - t) / (n - t) * (i - s);
        }
        function h(e, t, n) {
          var s = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : 0;
          var i = arguments.length > 4 && undefined !== arguments[4] ? arguments[4] : 1;
          var a = arguments[5];
          var o = c(t);
          var r = c(n);
          var l = Math.floor(o.r + (e - s) / (i - s) * (r.r - o.r));
          var d = Math.floor(o.g + (e - s) / (i - s) * (r.g - o.g));
          var h = Math.floor(o.b + (e - s) / (i - s) * (r.b - o.b));
          return a ? "rgb(" + l + "," + d + "," + h + ")" : u(l, d, h);
        }
        function g(e) {
          return e * Math.PI / 180;
        }
        function p(e) {
          return 180 * e / Math.PI;
        }
        var f = Object.freeze({
          mapValueInRange: m,
          interpolateColor: h,
          degreesToRadians: g,
          radiansToDegrees: p
        });
        function x(e) {
          return 3.62 * (e - 30) + 194;
        }
        function v(e) {
          return (e - 194) / 3.62 + 30;
        }
        function _(e) {
          return 3 * (e - 8) + 25;
        }
        function b(e) {
          return (e - 25) / 3 + 8;
        }
        var T = Object.freeze({
          tensionFromOrigamiValue: x,
          origamiValueFromTension: v,
          frictionFromOrigamiValue: _,
          origamiFromFriction: b
        });
        var E = function (e, t) {
          if (!(e instanceof t)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };
        var I = Object.assign || function (e) {
          for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var s in n) if (Object.prototype.hasOwnProperty.call(n, s)) {
              e[s] = n[s];
            }
          }
          return e;
        };
        var y = function () {
          function e() {
            E(this, e);
            this.springSystem = null;
          }
          e.prototype.run = function () {
            var e = C.call(this);
            t(function () {
              e.loop(Date.now());
            });
          };
          return e;
        }();
        var S = function () {
          function e(t) {
            E(this, e);
            this.springSystem = null;
            this.time = 0;
            this.running = false;
            this.timestep = t || 16.667;
          }
          e.prototype.run = function () {
            var e = C.call(this);
            if (!this.running) {
              for (this.running = true; !e.getIsIdle();) {
                e.loop(this.time += this.timestep);
              }
              this.running = false;
            }
          };
          return e;
        }();
        var j = function () {
          function e() {
            E(this, e);
            this.springSystem = null;
            this.time = 0;
            this.running = false;
          }
          e.prototype.run = function () {};
          e.prototype.step = function (e) {
            C.call(this).loop(this.time += e);
          };
          return e;
        }();
        function C() {
          if (null == this.springSystem) {
            throw new Error("cannot run looper without a springSystem");
          }
          return this.springSystem;
        }
        var N = Object.freeze({
          AnimationLooper: y,
          SimulationLooper: S,
          SteppingSimulationLooper: j
        });
        var w = function () {
          function e(t, n) {
            E(this, e);
            this.bounciness = t;
            this.speed = n;
            var s = this.normalize(t / 1.7, 0, 20);
            s = this.projectNormal(s, 0, .8);
            var i = this.normalize(n / 1.7, 0, 20);
            this.bouncyTension = this.projectNormal(i, .5, 200);
            this.bouncyFriction = this.quadraticOutInterpolation(s, this.b3Nobounce(this.bouncyTension), .01);
          }
          e.prototype.normalize = function (e, t, n) {
            return (e - t) / (n - t);
          };
          e.prototype.projectNormal = function (e, t, n) {
            return t + e * (n - t);
          };
          e.prototype.linearInterpolation = function (e, t, n) {
            return e * n + (1 - e) * t;
          };
          e.prototype.quadraticOutInterpolation = function (e, t, n) {
            return this.linearInterpolation(2 * e - e * e, t, n);
          };
          e.prototype.b3Friction1 = function (e) {
            return 7e-4 * Math.pow(e, 3) - .031 * Math.pow(e, 2) + .64 * e + 1.28;
          };
          e.prototype.b3Friction2 = function (e) {
            return 44e-6 * Math.pow(e, 3) - .006 * Math.pow(e, 2) + .36 * e + 2;
          };
          e.prototype.b3Friction3 = function (e) {
            return 45e-8 * Math.pow(e, 3) - 332e-6 * Math.pow(e, 2) + .1078 * e + 5.84;
          };
          e.prototype.b3Nobounce = function (e) {
            return e <= 18 ? this.b3Friction1(e) : e > 18 && e <= 44 ? this.b3Friction2(e) : this.b3Friction3(e);
          };
          return e;
        }();
        var O = function () {
          function e(t, n) {
            E(this, e);
            this.tension = t;
            this.friction = n;
          }
          e.fromOrigamiTensionAndFriction = function (t, n) {
            return new e(3.62 * (t - 30) + 194, 3 * (n - 8) + 25);
          };
          e.fromBouncinessAndSpeed = function (t, n) {
            var s = new w(t, n);
            return e.fromOrigamiTensionAndFriction(s.bouncyTension, s.bouncyFriction);
          };
          e.coastingConfigWithOrigamiFriction = function (t) {
            return new e(0, 3 * (t - 8) + 25);
          };
          return e;
        }();
        O.DEFAULT_ORIGAMI_SPRING_CONFIG = O.fromOrigamiTensionAndFriction(40, 7);
        var P = function e() {
          E(this, e);
          this.position = 0;
          this.velocity = 0;
        };
        var L = function () {
          function e(t) {
            E(this, e);
            this.listeners = [];
            this._startValue = 0;
            this._currentState = new P();
            this._displacementFromRestThreshold = .001;
            this._endValue = 0;
            this._overshootClampingEnabled = false;
            this._previousState = new P();
            this._restSpeedThreshold = .001;
            this._tempState = new P();
            this._timeAccumulator = 0;
            this._wasAtRest = true;
            this._id = "s" + e._ID++;
            this._springSystem = t;
          }
          e.prototype.destroy = function () {
            this.listeners = [];
            this._springSystem.deregisterSpring(this);
          };
          e.prototype.getId = function () {
            return this._id;
          };
          e.prototype.setSpringConfig = function (e) {
            this._springConfig = e;
            return this;
          };
          e.prototype.getSpringConfig = function () {
            return this._springConfig;
          };
          e.prototype.setCurrentValue = function (e, t) {
            this._startValue = e;
            this._currentState.position = e;
            if (!t) {
              this.setAtRest();
            }
            this.notifyPositionUpdated(false, false);
            return this;
          };
          e.prototype.getStartValue = function () {
            return this._startValue;
          };
          e.prototype.getCurrentValue = function () {
            return this._currentState.position;
          };
          e.prototype.getCurrentDisplacementDistance = function () {
            return this.getDisplacementDistanceForState(this._currentState);
          };
          e.prototype.getDisplacementDistanceForState = function (e) {
            return Math.abs(this._endValue - e.position);
          };
          e.prototype.setEndValue = function (e) {
            if (this._endValue === e && this.isAtRest()) {
              return this;
            }
            this._startValue = this.getCurrentValue();
            this._endValue = e;
            this._springSystem.activateSpring(this.getId());
            var t = 0;
            for (var n = this.listeners.length; t < n; t++) {
              var s = this.listeners[t].onSpringEndStateChange;
              if (s) {
                s(this);
              }
            }
            return this;
          };
          e.prototype.getEndValue = function () {
            return this._endValue;
          };
          e.prototype.setVelocity = function (e) {
            if (!(e === this._currentState.velocity)) {
              this._currentState.velocity = e;
              this._springSystem.activateSpring(this.getId());
            }
            return this;
          };
          e.prototype.getVelocity = function () {
            return this._currentState.velocity;
          };
          e.prototype.setRestSpeedThreshold = function (e) {
            this._restSpeedThreshold = e;
            return this;
          };
          e.prototype.getRestSpeedThreshold = function () {
            return this._restSpeedThreshold;
          };
          e.prototype.setRestDisplacementThreshold = function (e) {
            this._displacementFromRestThreshold = e;
          };
          e.prototype.getRestDisplacementThreshold = function () {
            return this._displacementFromRestThreshold;
          };
          e.prototype.setOvershootClampingEnabled = function (e) {
            this._overshootClampingEnabled = e;
            return this;
          };
          e.prototype.isOvershootClampingEnabled = function () {
            return this._overshootClampingEnabled;
          };
          e.prototype.isOvershooting = function () {
            var e = this._startValue;
            var t = this._endValue;
            return this._springConfig.tension > 0 && (e < t && this.getCurrentValue() > t || e > t && this.getCurrentValue() < t);
          };
          e.prototype.advance = function (t, n) {
            var s = this.isAtRest();
            if (!s || !this._wasAtRest) {
              var i = n;
              if (n > e.MAX_DELTA_TIME_SEC) {
                i = e.MAX_DELTA_TIME_SEC;
              }
              this._timeAccumulator += i;
              var a = this._springConfig.tension;
              var o = this._springConfig.friction;
              var r = this._currentState.position;
              var l = this._currentState.velocity;
              var c = this._tempState.position;
              var u = this._tempState.velocity;
              var d = undefined;
              var m = undefined;
              var h = undefined;
              var g = undefined;
              var p = undefined;
              var f = undefined;
              var x = undefined;
              for (var v = undefined; this._timeAccumulator >= e.SOLVER_TIMESTEP_SEC;) {
                this._timeAccumulator -= e.SOLVER_TIMESTEP_SEC;
                if (this._timeAccumulator < e.SOLVER_TIMESTEP_SEC) {
                  this._previousState.position = r;
                  this._previousState.velocity = l;
                }
                d = l;
                m = a * (this._endValue - c) - o * l;
                c = r + d * e.SOLVER_TIMESTEP_SEC * .5;
                h = u = l + m * e.SOLVER_TIMESTEP_SEC * .5;
                g = a * (this._endValue - c) - o * u;
                c = r + h * e.SOLVER_TIMESTEP_SEC * .5;
                p = u = l + g * e.SOLVER_TIMESTEP_SEC * .5;
                f = a * (this._endValue - c) - o * u;
                c = r + p * e.SOLVER_TIMESTEP_SEC;
                x = u = l + f * e.SOLVER_TIMESTEP_SEC;
                v = 0.16666666666666666 * (m + 2 * (g + f) + (a * (this._endValue - c) - o * u));
                r += 0.16666666666666666 * (d + 2 * (h + p) + x) * e.SOLVER_TIMESTEP_SEC;
                l += v * e.SOLVER_TIMESTEP_SEC;
              }
              this._tempState.position = c;
              this._tempState.velocity = u;
              this._currentState.position = r;
              this._currentState.velocity = l;
              if (this._timeAccumulator > 0) {
                this._interpolate(this._timeAccumulator / e.SOLVER_TIMESTEP_SEC);
              }
              if (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) {
                if (this._springConfig.tension > 0) {
                  this._startValue = this._endValue;
                  this._currentState.position = this._endValue;
                } else {
                  this._endValue = this._currentState.position;
                  this._startValue = this._endValue;
                }
                this.setVelocity(0);
                s = true;
              }
              var _ = false;
              if (this._wasAtRest) {
                this._wasAtRest = false;
                _ = true;
              }
              var b = false;
              if (s) {
                this._wasAtRest = true;
                b = true;
              }
              this.notifyPositionUpdated(_, b);
            }
          };
          e.prototype.notifyPositionUpdated = function (e, t) {
            var n = 0;
            for (var s = this.listeners.length; n < s; n++) {
              var i = this.listeners[n];
              if (e && i.onSpringActivate) {
                i.onSpringActivate(this);
              }
              if (i.onSpringUpdate) {
                i.onSpringUpdate(this);
              }
              if (t && i.onSpringAtRest) {
                i.onSpringAtRest(this);
              }
            }
          };
          e.prototype.systemShouldAdvance = function () {
            return !this.isAtRest() || !this.wasAtRest();
          };
          e.prototype.wasAtRest = function () {
            return this._wasAtRest;
          };
          e.prototype.isAtRest = function () {
            return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || 0 === this._springConfig.tension);
          };
          e.prototype.setAtRest = function () {
            this._endValue = this._currentState.position;
            this._tempState.position = this._currentState.position;
            this._currentState.velocity = 0;
            return this;
          };
          e.prototype._interpolate = function (e) {
            this._currentState.position = this._currentState.position * e + this._previousState.position * (1 - e);
            this._currentState.velocity = this._currentState.velocity * e + this._previousState.velocity * (1 - e);
          };
          e.prototype.getListeners = function () {
            return this.listeners;
          };
          e.prototype.addListener = function (e) {
            this.listeners.push(e);
            return this;
          };
          e.prototype.removeListener = function (e) {
            r(this.listeners, e);
            return this;
          };
          e.prototype.removeAllListeners = function () {
            this.listeners = [];
            return this;
          };
          e.prototype.currentValueIsApproximately = function (e) {
            return Math.abs(this.getCurrentValue() - e) <= this.getRestDisplacementThreshold();
          };
          return e;
        }();
        L._ID = 0;
        L.MAX_DELTA_TIME_SEC = .064;
        L.SOLVER_TIMESTEP_SEC = .001;
        var A = function () {
          function e(t) {
            E(this, e);
            this.listeners = [];
            this._activeSprings = [];
            this._idleSpringIndices = [];
            this._isIdle = true;
            this._lastTimeMillis = -1;
            this._springRegistry = {};
            this.looper = t || new y();
            this.looper.springSystem = this;
          }
          e.prototype.setLooper = function (e) {
            this.looper = e;
            e.springSystem = this;
          };
          e.prototype.createSpring = function (e, t) {
            var n = undefined;
            n = undefined === e || undefined === t ? O.DEFAULT_ORIGAMI_SPRING_CONFIG : O.fromOrigamiTensionAndFriction(e, t);
            return this.createSpringWithConfig(n);
          };
          e.prototype.createSpringWithBouncinessAndSpeed = function (e, t) {
            var n = undefined;
            n = undefined === e || undefined === t ? O.DEFAULT_ORIGAMI_SPRING_CONFIG : O.fromBouncinessAndSpeed(e, t);
            return this.createSpringWithConfig(n);
          };
          e.prototype.createSpringWithConfig = function (e) {
            var t = new L(this);
            this.registerSpring(t);
            t.setSpringConfig(e);
            return t;
          };
          e.prototype.getIsIdle = function () {
            return this._isIdle;
          };
          e.prototype.getSpringById = function (e) {
            return this._springRegistry[e];
          };
          e.prototype.getAllSprings = function () {
            var e = [];
            for (var t in this._springRegistry) if (this._springRegistry.hasOwnProperty(t)) {
              e.push(this._springRegistry[t]);
            }
            return e;
          };
          e.prototype.registerSpring = function (e) {
            this._springRegistry[e.getId()] = e;
          };
          e.prototype.deregisterSpring = function (e) {
            r(this._activeSprings, e);
            delete this._springRegistry[e.getId()];
          };
          e.prototype.advance = function (e, t) {
            for (; this._idleSpringIndices.length > 0;) {
              this._idleSpringIndices.pop();
            }
            var n = 0;
            for (var s = this._activeSprings.length; n < s; n++) {
              var i = this._activeSprings[n];
              if (i.systemShouldAdvance()) {
                i.advance(e / 1e3, t / 1e3);
              } else {
                this._idleSpringIndices.push(this._activeSprings.indexOf(i));
              }
            }
            for (; this._idleSpringIndices.length > 0;) {
              var a = this._idleSpringIndices.pop();
              if (a >= 0) {
                this._activeSprings.splice(a, 1);
              }
            }
          };
          e.prototype.loop = function (e) {
            var t = undefined;
            if (-1 === this._lastTimeMillis) {
              this._lastTimeMillis = e - 1;
            }
            var n = e - this._lastTimeMillis;
            this._lastTimeMillis = e;
            var s = 0;
            var i = this.listeners.length;
            for (s = 0; s < i; s++) {
              if ((t = this.listeners[s]).onBeforeIntegrate) {
                t.onBeforeIntegrate(this);
              }
            }
            this.advance(e, n);
            if (0 === this._activeSprings.length) {
              this._isIdle = true;
              this._lastTimeMillis = -1;
            }
            for (s = 0; s < i; s++) {
              if ((t = this.listeners[s]).onAfterIntegrate) {
                t.onAfterIntegrate(this);
              }
            }
            if (!this._isIdle) {
              this.looper.run();
            }
          };
          e.prototype.activateSpring = function (e) {
            var t = this._springRegistry[e];
            if (-1 === this._activeSprings.indexOf(t)) {
              this._activeSprings.push(t);
            }
            if (this.getIsIdle()) {
              this._isIdle = false;
              this.looper.run();
            }
          };
          e.prototype.addListener = function (e) {
            this.listeners.push(e);
          };
          e.prototype.removeListener = function (e) {
            r(this.listeners, e);
          };
          e.prototype.removeAllListeners = function () {
            this.listeners = [];
          };
          return e;
        }();
        return I({}, N, {
          OrigamiValueConverter: T,
          MathUtil: f,
          Spring: L,
          SpringConfig: O,
          SpringSystem: A,
          util: I({}, d, f)
        });
      }();
    },
    328: (e, t) => {
      "use strict";

      function n(e, t) {
        var n = e.length;
        e.push(t);
        e: for (; 0 < n;) {
          var s = n - 1 >>> 1;
          var i = e[s];
          if (!(0 < a(i, t))) {
            break e;
          }
          e[s] = t;
          e[n] = i;
          n = s;
        }
      }
      function s(e) {
        return 0 === e.length ? null : e[0];
      }
      function i(e) {
        if (0 === e.length) {
          return null;
        }
        var t = e[0];
        var n = e.pop();
        if (n !== t) {
          e[0] = n;
          var s = 0;
          var i = e.length;
          e: for (var o = i >>> 1; s < o;) {
            var r = 2 * (s + 1) - 1;
            var l = e[r];
            var c = r + 1;
            var u = e[c];
            if (0 > a(l, n)) {
              if (c < i && 0 > a(u, l)) {
                e[s] = u;
                e[c] = n;
                s = c;
              } else {
                e[s] = l;
                e[r] = n;
                s = r;
              }
            } else {
              if (!(c < i && 0 > a(u, n))) {
                break e;
              }
              e[s] = u;
              e[c] = n;
              s = c;
            }
          }
        }
        return t;
      }
      function a(e, t) {
        var n = e.sortIndex - t.sortIndex;
        return 0 !== n ? n : e.id - t.id;
      }
      if ("object" == typeof performance && "function" == typeof performance.now) {
        t.unstable_now = function () {
          return performance.now();
        };
      } else {
        var l = Date.now();
        t.unstable_now = function () {
          return Date.now() - l;
        };
      }
      var c = [];
      var u = [];
      var d = 1;
      var m = null;
      var h = 3;
      var g = false;
      var p = false;
      var f = false;
      var x = "function" == typeof setTimeout ? setTimeout : null;
      var v = "function" == typeof clearTimeout ? clearTimeout : null;
      var _ = "undefined" != typeof setImmediate ? setImmediate : null;
      function b(e) {
        for (var t = 0 === u.length ? null : u[0]; null !== t;) {
          if (null === t.callback) {
            i(u);
          } else {
            if (!(t.startTime <= e)) {
              break;
            }
            i(u);
            t.sortIndex = t.expirationTime;
            n(c, t);
          }
          t = 0 === u.length ? null : u[0];
        }
      }
      function T(e) {
        f = false;
        b(e);
        if (!p) {
          if (null !== (0 === c.length ? null : c[0])) {
            p = true;
            A(E);
          } else {
            var t = 0 === u.length ? null : u[0];
            if (null !== t) {
              M(T, t.startTime - e);
            }
          }
        }
      }
      function E(e, n) {
        p = false;
        if (f) {
          f = false;
          v(j);
          j = -1;
        }
        g = true;
        var a = h;
        try {
          b(n);
          for (m = 0 === c.length ? null : c[0]; null !== m && (!(m.expirationTime > n) || e && !!(t.unstable_now() - N < C));) {
            var o = m.callback;
            if ("function" == typeof o) {
              m.callback = null;
              h = m.priorityLevel;
              var r = o(m.expirationTime <= n);
              n = t.unstable_now();
              if ("function" == typeof r) {
                m.callback = r;
              } else if (m === (0 === c.length ? null : c[0])) {
                i(c);
              }
              b(n);
            } else {
              i(c);
            }
            m = 0 === c.length ? null : c[0];
          }
          if (null !== m) {
            var l = true;
          } else {
            var d = 0 === u.length ? null : u[0];
            if (null !== d) {
              M(T, d.startTime - n);
            }
            l = false;
          }
          return l;
        } finally {
          m = null;
          h = a;
          g = false;
        }
      }
      if ("undefined" != typeof navigator && undefined !== navigator.scheduling && undefined !== navigator.scheduling.isInputPending) {
        navigator.scheduling.isInputPending.bind(navigator.scheduling);
      }
      var I;
      var y = false;
      var S = null;
      var j = -1;
      var C = 5;
      var N = -1;
      function w() {
        return !(t.unstable_now() - N < C);
      }
      function O() {
        if (null !== S) {
          var e = t.unstable_now();
          N = e;
          var n = true;
          try {
            n = S(true, e);
          } finally {
            if (n) {
              I();
            } else {
              y = false;
              S = null;
            }
          }
        } else {
          y = false;
        }
      }
      if ("function" == typeof _) {
        I = function () {
          _(O);
        };
      } else if ("undefined" != typeof MessageChannel) {
        var P = new MessageChannel();
        var L = P.port2;
        P.port1.onmessage = O;
        I = function () {
          L.postMessage(null);
        };
      } else {
        I = function () {
          x(O, 0);
        };
      }
      function A(e) {
        S = e;
        if (!y) {
          y = true;
          I();
        }
      }
      function M(e, n) {
        j = x(function () {
          e(t.unstable_now());
        }, n);
      }
      t.unstable_IdlePriority = 5;
      t.unstable_ImmediatePriority = 1;
      t.unstable_LowPriority = 4;
      t.unstable_NormalPriority = 3;
      t.unstable_Profiling = null;
      t.unstable_UserBlockingPriority = 2;
      t.unstable_cancelCallback = function (e) {
        e.callback = null;
      };
      t.unstable_continueExecution = function () {
        if (!(p || g)) {
          p = true;
          A(E);
        }
      };
      t.unstable_forceFrameRate = function (e) {
        if (0 > e || 125 < e) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
        } else {
          C = 0 < e ? Math.floor(1e3 / e) : 5;
        }
      };
      t.unstable_getCurrentPriorityLevel = function () {
        return h;
      };
      t.unstable_getFirstCallbackNode = function () {
        return 0 === c.length ? null : c[0];
      };
      t.unstable_next = function (e) {
        switch (h) {
          case 1:
          case 2:
          case 3:
            var t = 3;
            break;
          default:
            t = h;
        }
        var n = h;
        h = t;
        try {
          return e();
        } finally {
          h = n;
        }
      };
      t.unstable_pauseExecution = function () {};
      t.unstable_requestPaint = function () {};
      t.unstable_runWithPriority = function (e, t) {
        switch (e) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            e = 3;
        }
        var n = h;
        h = e;
        try {
          return t();
        } finally {
          h = n;
        }
      };
      t.unstable_scheduleCallback = function (e, i, a) {
        var o = t.unstable_now();
        if ("object" == typeof a && null !== a) {
          a = "number" == typeof (a = a.delay) && 0 < a ? o + a : o;
        } else {
          a = o;
        }
        switch (e) {
          case 1:
            var r = -1;
            break;
          case 2:
            r = 250;
            break;
          case 5:
            r = 1073741823;
            break;
          case 4:
            r = 1e4;
            break;
          default:
            r = 5e3;
        }
        e = {
          id: d++,
          callback: i,
          priorityLevel: e,
          startTime: a,
          expirationTime: r = a + r,
          sortIndex: -1
        };
        if (a > o) {
          e.sortIndex = a;
          n(u, e);
          if (null === (0 === c.length ? null : c[0]) && e === (0 === u.length ? null : u[0])) {
            if (f) {
              v(j);
              j = -1;
            } else {
              f = true;
            }
            M(T, a - o);
          }
        } else {
          e.sortIndex = r;
          n(c, e);
          if (!(p || g)) {
            p = true;
            A(E);
          }
        }
        return e;
      };
      t.unstable_shouldYield = w;
      t.unstable_wrapCallback = function (e) {
        var t = h;
        return function () {
          var n = h;
          h = t;
          try {
            return e.apply(this, arguments);
          } finally {
            h = n;
          }
        };
      };
    },
    712: (e, t, n) => {
      "use strict";

      e.exports = n(328);
    }
  };
  var t = {};
  function n(s) {
    var i = t[s];
    if (undefined !== i) {
      return i.exports;
    }
    var a = t[s] = {
      exports: {}
    };
    e[s].call(a.exports, a, a.exports, n);
    return a.exports;
  }
  n.n = e => {
    var t = e && e.__esModule ? () => e.default : () => e;
    n.d(t, {
      a: t
    });
    return t;
  };
  n.d = (e, t) => {
    for (var s in t) if (n.o(t, s) && !n.o(e, s)) {
      Object.defineProperty(e, s, {
        enumerable: true,
        get: t[s]
      });
    }
  };
  n.g = function () {
    if ("object" == typeof globalThis) {
      return globalThis;
    }
    try {
      return this || new Function("return this")();
    } catch (e) {
      if ("object" == typeof window) {
        return window;
      }
    }
  }();
  n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t);
  n.r = e => {
    if ("undefined" != typeof Symbol && Symbol.toStringTag) {
      Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      });
    }
    Object.defineProperty(e, "__esModule", {
      value: true
    });
  };
  (() => {
    "use strict";

    var e = {};
    n.r(e);
    n.d(e, {
      Animation: () => ws,
      Animations: () => Os,
      ArcElement: () => ka,
      BarController: () => Qs,
      BarElement: () => eo,
      BasePlatform: () => wi,
      BasicPlatform: () => Oi,
      BubbleController: () => Zs,
      CategoryScale: () => nr,
      Chart: () => wa,
      Colors: () => lo,
      DatasetController: () => Vs,
      Decimation: () => mo,
      DomPlatform: () => Wi,
      DoughnutController: () => Js,
      Element: () => Yi,
      Filler: () => wo,
      Interaction: () => pi,
      Legend: () => Ao,
      LineController: () => ei,
      LineElement: () => Wa,
      LinearScale: () => or,
      LogarithmicScale: () => mr,
      PieController: () => ni,
      PointElement: () => Ya,
      PolarAreaController: () => ti,
      RadarController: () => si,
      RadialLinearScale: () => Tr,
      Scale: () => na,
      ScatterController: () => ii,
      SubTitle: () => Do,
      Ticks: () => Zt,
      TimeScale: () => wr,
      TimeSeriesScale: () => Pr,
      Title: () => Ro,
      Tooltip: () => Zo,
      _adapters: () => li,
      _detectPlatform: () => zi,
      animator: () => js,
      controllers: () => ai,
      defaults: () => an,
      elements: () => to,
      layouts: () => Ni,
      plugins: () => Jo,
      registerables: () => Ar,
      registry: () => aa,
      scales: () => Lr
    });
    var t = {};
    n.r(t);
    n.d(t, {
      bindEvent: () => Zr,
      bindLocalValue: () => qr,
      bindMap: () => Xr,
      bindTrigger: () => Jr,
      bindTriggerWithArgs: () => el,
      bindValue: () => $r,
      call: () => nl,
      trigger: () => tl,
      useMapValue: () => ll,
      useMapValueOnChange: () => rl,
      useMapValues: () => cl,
      useReducedValue: () => il,
      useValue: () => sl,
      useValueOnChange: () => ol,
      useValueRef: () => al
    });
    var s = {};
    n.r(s);
    n.d(s, {
      Localized: () => hu,
      LocalizedBounds: () => au,
      LocalizedDate: () => Su,
      LocalizedDuration: () => Fu,
      LocalizedEntityName: () => Hu,
      LocalizedFraction: () => cu,
      LocalizedNumber: () => Gc,
      LocalizedPercentage: () => Yu,
      LocalizedString: () => Tc,
      Unit: () => Oc,
      useLocalization: () => ac
    });
    var i = {};
    n.r(i);
    n.d(i, {
      AdvisorItemType: () => lg,
      TutorialControlScheme: () => cg,
      TutorialPhaseType: () => ug,
      activateTutorial: () => $h,
      activateTutorialPhase: () => qh,
      activateTutorialTag: () => sg,
      activeTutorial$: () => Kh,
      activeTutorialList$: () => kh,
      activeTutorialPhase$: () => Wh,
      advisorPanelVisible$: () => dg,
      completeActiveTutorial: () => Jh,
      completeActiveTutorialPhase: () => Zh,
      completeIntro: () => eg,
      completeListIntro: () => tg,
      completeListOutro: () => ng,
      forceTutorial: () => Xh,
      listIntroActive$: () => zh,
      listOutroActive$: () => Yh,
      nextTutorial$: () => Dh,
      setTutorialListFocused: () => Vh,
      toggleAdvisorPanel: () => mg,
      toggleTutorialListFocus: () => Qh,
      triggerTutorialTag: () => ig,
      tutorialCategories$: () => Uh,
      tutorialGroups$: () => Bh,
      tutorialIntroActive$: () => Rh,
      tutorialListFocused$: () => Gh,
      tutorialPending$: () => Fh,
      tutorials$: () => Hh,
      tutorialsEnabled$: () => Mh,
      useTutorialTag: () => rg,
      useTutorialTagActivation: () => ag,
      useTutorialTagTrigger: () => og
    });
    var a = {};
    n.r(a);
    n.d(a, {
      activeInfoview$: () => Zp,
      ageData$: () => Qx,
      arrestedCriminals$: () => bx,
      attractiveness$: () => kx,
      availableFertility$: () => uv,
      availableForest$: () => cv,
      availableOil$: () => rv,
      availableOre$: () => lv,
      averageAirPollution$: () => ux,
      averageCrimeProbability$: () => gx,
      averageFireHazard$: () => hx,
      averageGroundPollution$: () => cx,
      averageHealth$: () => Gf,
      averageHotelPrice$: () => Dx,
      averageLandValue$: () => Nx,
      averageNoisePollution$: () => mx,
      averageWaterPollution$: () => dx,
      batteryCharge$: () => mf,
      birthRate$: () => $x,
      cemeteryAvailability$: () => Qf,
      cemeteryCapacity$: () => Hf,
      cemeteryUse$: () => Vf,
      clearActiveInfoview: () => tf,
      closeInfoviewMenu: () => Jp,
      collectedMail$: () => Gx,
      collegeAvailability$: () => Ff,
      collegeCapacity$: () => wf,
      collegeEligible$: () => Sf,
      collegeStudents$: () => Mf,
      commercialLevels$: () => Ox,
      commercialProfitability$: () => Zx,
      crimePerMonth$: () => jx,
      crimeProbability$: () => vx,
      crimeProducers$: () => xx,
      criminals$: () => Sx,
      deathRate$: () => Kf,
      deathcareAvailability$: () => Xf,
      deliveredMail$: () => Vx,
      educationData$: () => Pf,
      electricityAvailability$: () => cf,
      electricityConsumption$: () => sf,
      electricityExport$: () => rf,
      electricityImport$: () => lf,
      electricityProduction$: () => af,
      electricityTrade$: () => df,
      electricityTransmission$: () => uf,
      electricityTransmitted$: () => of,
      elementaryAvailability$: () => kf,
      elementaryCapacity$: () => Cf,
      elementaryEligible$: () => If,
      elementaryStudents$: () => Lf,
      employed$: () => Wx,
      employeesData$: () => vv,
      escapedRate$: () => Cx,
      fertilityExtractionRate$: () => gv,
      fertilityRenewalRate$: () => fv,
      forestExtractionRate$: () => hv,
      forestRenewalRate$: () => pv,
      garbageProcessingRate$: () => Zf,
      garbageProductionRate$: () => nx,
      healthcareAvailability$: () => qf,
      highSchoolAvailability$: () => Df,
      highSchoolCapacity$: () => Nf,
      highSchoolEligible$: () => yf,
      highSchoolStudents$: () => Af,
      inJail$: () => Tx,
      inPrison$: () => yx,
      industrialLevels$: () => Px,
      industrialProfitability$: () => Jx,
      infoviews$: () => Qp,
      jailAvailability$: () => px,
      jailCapacity$: () => _x,
      jobs$: () => zx,
      landfillAvailability$: () => tx,
      landfillCapacity$: () => Jf,
      mailProductionRate$: () => Bx,
      movedAway$: () => Xx,
      movedIn$: () => qx,
      officeLevels$: () => Lx,
      officeProfitability$: () => ev,
      oilExtractionRate$: () => dv,
      oreExtractionRate$: () => mv,
      parkedCars$: () => ox,
      parkingAvailability$: () => rx,
      parkingCapacity$: () => ix,
      parkingIncome$: () => ax,
      patientCapacity$: () => $f,
      patientCount$: () => Yf,
      population$: () => Kx,
      postServiceAvailability$: () => Hx,
      prisonAvailability$: () => fx,
      prisonCapacity$: () => Ex,
      prisoners$: () => Ix,
      processingAvailability$: () => ex,
      processingRate$: () => Wf,
      residentialLevels$: () => wx,
      setActiveInfoview: () => ef,
      setInfomodeActive: () => nf,
      sewageAvailability$: () => bf,
      sewageCapacity$: () => pf,
      sewageConsumption$: () => ff,
      sewageExport$: () => _f,
      shelterAvailability$: () => Rx,
      shelterCapacity$: () => Mx,
      shelteredCount$: () => Ax,
      sickCount$: () => zf,
      storedGarbage$: () => sx,
      topExportColors$: () => av,
      topExportData$: () => ov,
      topExportNames$: () => iv,
      topImportColors$: () => nv,
      topImportData$: () => sv,
      topImportNames$: () => tv,
      tourismRate$: () => Fx,
      trafficFlow$: () => lx,
      transportSummaries$: () => Bf,
      unemployment$: () => Yx,
      universityAvailability$: () => Uf,
      universityCapacity$: () => Of,
      universityEligible$: () => jf,
      universityStudents$: () => Rf,
      useInfoviewToggle: () => Tv,
      waterAvailability$: () => Tf,
      waterCapacity$: () => hf,
      waterConsumption$: () => gf,
      waterExport$: () => xf,
      waterImport$: () => vf,
      waterTrade$: () => Ef,
      weatherEffect$: () => Ux,
      workers$: () => bv,
      workplacesData$: () => xv,
      worksplaces$: () => _v
    });
    var o = {};
    n.r(o);
    n.d(o, {
      CityInfoPanelTab: () => Hv,
      EconomyPanelTab: () => Gv,
      GamePanelType: () => Pv,
      GameScreen: () => Iv,
      LayoutPosition: () => yv,
      ProgressionPanelTab: () => Lv,
      TransportationOverviewPanelTab: () => Wv,
      activeGamePanel$: () => Av,
      activeGameScreen$: () => Sv,
      activePanelPosition$: () => Rv,
      blockingPanelActive$: () => Mv,
      canUseSaveSystem$: () => Cv,
      closeActiveGamePanel: () => Uv,
      closeGamePanel: () => Fv,
      setActiveGameScreen: () => jv,
      showCityInfoPanel: () => zv,
      showEconomyPanel: () => Kv,
      showFreeCameraScreen: () => Ov,
      showGamePanel: () => Dv,
      showLifePathDetail: () => Xv,
      showLifePathList: () => qv,
      showMainScreen: () => Nv,
      showPauseScreen: () => wv,
      showProgressionPanel: () => Vv,
      showTransportationOverviewPanel: () => Yv,
      toggleGamePanel: () => kv,
      toggleInfoviewMenu: () => Bv,
      toggleLifePathPanel: () => $v,
      toggleRadioPanel: () => Qv,
      toggleTransportationOverviewPanel: () => Zv
    });
    var r = {};
    n.r(r);
    n.d(r, {
      emptyPrefabDetails: () => mT,
      manualUITags$: () => dT,
      prefabDetails$: () => uT,
      themes$: () => cT
    });
    var l = {};
    n.r(l);
    n.d(l, {
      Button: () => HI,
      ConfirmationDialog: () => LI,
      DialogContext: () => cE,
      DialogRenderer: () => uE,
      DialogStack: () => lE,
      Dropdown: () => ny,
      DropdownItem: () => oy,
      DropdownToggle: () => sy,
      FloatingButton: () => WI,
      FormattedParagraphs: () => bb,
      FormattedText: () => pb,
      Icon: () => ky,
      MarkdownRenderer: () => Gy,
      MarkupRenderer: () => lb,
      MenuButton: () => KI,
      Panel: () => Oy,
      PanelFoldout: () => Sy,
      PanelSection: () => dy,
      PanelSectionRow: () => Ny,
      Portal: () => Dy,
      Scrollable: () => ab,
      Tooltip: () => bg
    });
    var c = {};
    n.r(c);
    var u = {};
    n.r(u);
    n.d(u, {
      focusEntity: () => Wy,
      focusedEntity$: () => Ky
    });
    var d = {};
    n.r(d);
    n.d(d, {
      addLike: () => qy,
      chirpAdded$: () => $y,
      chirps$: () => Yy,
      removeLike: () => Xy,
      selectLink: () => Qy
    });
    var m = {};
    n.r(m);
    n.d(m, {
      addKeyFrame: () => gS,
      availableCloudTargets$: () => SS,
      captureKey: () => uS,
      cinematicCameraSequenceAssets$: () => yS,
      deleteCinematicCameraSequence: () => ES,
      getControllerDelta: () => fS,
      getControllerPanDelta: () => vS,
      getControllerZoomDelta: () => xS,
      group: () => Zy,
      lastLoadedCinematicCameraSequence$: () => IS,
      loadCinematicCameraSequence: () => TS,
      loop$: () => nS,
      modifierAnimationCurveData$: () => wS,
      moveKeyFrame: () => mS,
      onAfterPlaybackDurationChange: () => oS,
      playbackDuration$: () => Jy,
      playing$: () => iS,
      removeCameraTransformKey: () => dS,
      removeKeyFrame: () => hS,
      resetCinematicCameraSequence: () => pS,
      saveCinematicCameraSequence: () => bS,
      selectCloudTarget: () => CS,
      selectedCloudTarget$: () => jS,
      setPlaybackDuration: () => aS,
      setTimelinePosition: () => rS,
      stopPlayback: () => lS,
      timelineLength$: () => tS,
      timelinePosition$: () => eS,
      toggleCurveEditorFocus: () => _S,
      toggleLoop: () => sS,
      togglePlayback: () => cS,
      transformAnimationCurveData$: () => NS,
      useCinematicCameraBindings: () => OS
    });
    var h = {};
    n.r(h);
    n.d(h, {
      commercialDemand$: () => RS,
      commercialFactors$: () => GS,
      happiness$: () => KS,
      happinessFactors$: () => WS,
      industrialDemand$: () => kS,
      industrialFactors$: () => VS,
      officeDemand$: () => DS,
      officeFactors$: () => HS,
      residentialHighDemand$: () => MS,
      residentialHighFactors$: () => BS,
      residentialLowDemand$: () => LS,
      residentialLowFactors$: () => FS,
      residentialMediumDemand$: () => AS,
      residentialMediumFactors$: () => US
    });
    var g = {};
    n.r(g);
    n.d(g, {
      WeatherType: () => YS,
      seasonNameId$: () => $S,
      temperature$: () => XS,
      weather$: () => qS
    });
    var p = {};
    n.r(p);
    n.d(p, {
      expenseItems$: () => nj,
      expenseValues$: () => sj,
      getItemValue: () => ij,
      incomeItems$: () => ej,
      incomeValues$: () => tj,
      totalExpenses$: () => JS,
      totalIncome$: () => ZS
    });
    var f = {};
    n.r(f);
    n.d(f, {
      acceptLoanOffer: () => uj,
      currentLoan$: () => rj,
      loanLimit$: () => oj,
      loanOffer$: () => lj,
      requestLoanOffer: () => cj,
      resetLoanOffer: () => dj
    });
    var x = {};
    n.r(x);
    n.d(x, {
      maxProgress$: () => hj,
      resourceCategories$: () => gj,
      resourceData$: () => vj,
      resourceDetails$: () => pj,
      resources$: () => fj,
      services$: () => xj
    });
    var v = {};
    n.r(v);
    n.d(v, {
      resetService: () => yj,
      serviceDetails$: () => Tj,
      services$: () => bj,
      setServiceBudget: () => Ej,
      setServiceFee: () => Ij
    });
    var _ = {};
    n.r(_);
    n.d(_, {
      eventMap$: () => jj,
      events$: () => Cj,
      onCloseJournal: () => wj,
      onOpenJournal: () => Nj
    });
    var b = {};
    n.r(b);
    var T = {};
    n.r(T);
    n.d(T, {
      LifePathItemType: () => Pj,
      followCitizen: () => kj,
      followedCitizens$: () => Lj,
      lifePathDetails$: () => Aj,
      lifePathItems$: () => Mj,
      maxFollowedCitizens$: () => Rj,
      unfollowCitizen: () => Dj
    });
    var E = {};
    n.r(E);
    n.d(E, {
      MapTileStatus: () => Uj,
      availableWater$: () => Hj,
      buildableLand$: () => Vj,
      disableMapTileView: () => Qj,
      mapTilePanelVisible$: () => Bj,
      mapTileViewActive$: () => Gj,
      permitCost$: () => qj,
      permits$: () => $j,
      purchaseFlags$: () => Yj,
      purchaseMapTiles: () => Zj,
      purchasePrice$: () => Wj,
      purchaseUpkeep$: () => zj,
      resources$: () => Kj,
      setMapTileViewActive: () => Xj
    });
    var I = {};
    n.r(I);
    n.d(I, {
      PhotoWidgetType: () => lC,
      adjustments$: () => hC,
      cinematicCameraVisible$: () => cC,
      group: () => Jj,
      orbitCameraActive$: () => sC,
      overlayHidden$: () => tC,
      resetCamera: () => eC,
      root: () => mC,
      selectTab: () => oC,
      selectedTab$: () => dC,
      setOverlayHidden: () => nC,
      tabs$: () => uC,
      takeScreenshot: () => aC,
      toggleCinematicCamera: () => rC,
      toggleOrbitCameraActive: () => iC
    });
    var y = {};
    n.r(y);
    n.d(y, {
      cityPolicies$: () => pC,
      setCityPolicy: () => xC,
      setPolicy: () => IC
    });
    var S = {};
    n.r(S);
    n.d(S, {
      CityModifierType: () => _C,
      LeisureType: () => TC,
      LocalModifierType: () => bC,
      PrefabEffectType: () => vC
    });
    var j = {};
    n.r(j);
    n.d(j, {
      CONSUMPTION_PROPERTY: () => SC,
      ELECTRICITY_PROPERTY: () => NC,
      POLLUTION_PROPERTY: () => jC,
      Pollution: () => yC,
      TRANSPORT_STOP_PROPERTY: () => PC,
      UPKEEPNUMBER2_PROPERTY: () => AC,
      UPKEEPNUMBER_PROPERTY: () => LC,
      Voltage: () => CC
    });
    var C = {};
    n.r(C);
    n.d(C, {
      AreaType: () => wC,
      PrefabRequirementType: () => OC
    });
    var N = {};
    n.r(N);
    n.d(N, {
      devPoints$: () => RC,
      nodeDetails$: () => UC,
      nodes$: () => FC,
      purchaseNode: () => VC,
      selectedDevTree$: () => BC,
      selectedNode$: () => GC,
      serviceDetails$: () => DC,
      services$: () => kC
    });
    var w = {};
    n.r(w);
    n.d(w, {
      isFeatureLocked: () => zC,
      lockedFeatures$: () => HC,
      useFeatureLocked: () => WC,
      useFeatureUnlocking: () => KC
    });
    var O = {};
    n.r(O);
    n.d(O, {
      MilestoneUnlockType: () => mN,
      achievedMilestone$: () => gN,
      achievedMilestoneXP$: () => pN,
      clearUnlockedMilestone: () => EN,
      defaultMilestoneDetails: () => hN,
      maxMilestoneReached$: () => _N,
      milestoneDetails$: () => IN,
      milestoneUnlocks$: () => yN,
      milestones$: () => bN,
      nextMilestoneXP$: () => fN,
      totalXP$: () => xN,
      unlockDetails$: () => SN,
      unlockedMilestone$: () => TN,
      xpMessageAdded$: () => vN
    });
    var P = {};
    n.r(P);
    n.d(P, {
      clearUnlockedSignatures: () => NN,
      unlockedSignatures$: () => CN
    });
    var L = {};
    n.r(L);
    n.d(L, {
      currentSegment$: () => VN,
      emergencyFocusable$: () => kN,
      emergencyMessage$: () => DN,
      emergencyMode$: () => RN,
      focusEmergency: () => JN,
      muted$: () => AN,
      networks$: () => BN,
      paused$: () => LN,
      playNext: () => ZN,
      playPrevious: () => QN,
      radioEnabled$: () => ON,
      segmentChanged$: () => HN,
      selectNetwork: () => ew,
      selectStation: () => tw,
      selectedNetwork$: () => FN,
      selectedStation$: () => UN,
      setMuted: () => YN,
      setPaused: () => WN,
      setSkipAds: () => qN,
      setVolume: () => KN,
      skipAds$: () => MN,
      stations$: () => GN,
      toggleMuted: () => $N,
      togglePaused: () => zN,
      toggleSkipAds: () => XN,
      volume$: () => PN
    });
    var A = {};
    n.r(A);
    n.d(A, {
      DeveloperSubsectionType: () => pw,
      HouseholdSidebarVariant: () => Mw,
      LINE_STOP: () => Rw,
      LINE_VEHICLE: () => kw,
      MailSectionType: () => gw,
      Pollution: () => hw,
      SectionType: () => mw,
      UpgradeType: () => fw,
      activeSelection$: () => bw,
      bottomSections$: () => yw,
      clearSelection: () => Aw,
      developerSection$: () => jw,
      householdSidebarSection$: () => Nw,
      lineVisualizerSection$: () => Cw,
      middleSections$: () => Iw,
      selectEntity: () => Pw,
      selectedEntity$: () => xw,
      selectedInfoPosition$: () => Tw,
      selectedRoute$: () => Ow,
      selectedTrailerController$: () => vw,
      selectedUITag$: () => _w,
      setSelectedRoute: () => Lw,
      titleSection$: () => Sw,
      tooltipTags$: () => ww,
      topSections$: () => Ew,
      useGeneratedTooltipParagraphs: () => Uw,
      useTooltipParagraph: () => Dw,
      useTooltipParagraphs: () => Fw
    });
    var M = {};
    n.r(M);
    n.d(M, {
      activeCategory$: () => Ww,
      activeGroup$: () => Kw,
      addStat: () => eO,
      clearStats: () => nO,
      removeStat: () => tO,
      sampleCount$: () => Hw,
      sampleRange$: () => Vw,
      selectedStatistics$: () => Qw,
      setSampleRange: () => sO,
      stacked$: () => zw,
      statGroupsMap$: () => qw,
      statLabels$: () => $w,
      statUnlockingRequirements$: () => Zw,
      statisticsCategories$: () => Yw,
      statsData$: () => Xw,
      updatesPerDay$: () => Jw
    });
    var R = {};
    n.r(R);
    n.d(R, {
      areaResourceTaxRanges$: () => gO,
      areaResources$: () => pO,
      areaTaxEffects$: () => hO,
      areaTaxIncomes$: () => mO,
      areaTaxRates$: () => dO,
      areaTypes$: () => uO,
      maxTaxRate: () => cO,
      minTaxRate: () => lO,
      resourceTaxIncomes: () => xO,
      resourceTaxRates: () => fO,
      setAreaTaxRate: () => bO,
      setResourceTaxRate: () => TO,
      setTaxRate: () => _O,
      taxEffect: () => oO,
      taxIncome: () => rO,
      taxRate: () => aO,
      taxResourceInfos: () => vO
    });
    var k = {};
    n.r(k);
    n.d(k, {
      LightingState: () => IO,
      calculateDateFromDays: () => RO,
      calculateDateFromTicks: () => kO,
      calculateDateTimeFromTicks: () => DO,
      calculateMinutesSinceMidnightFromTicks: () => FO,
      calculateTimeFromMinutesSinceMidnight: () => MO,
      dateEquals: () => AO,
      day$: () => jO,
      lightingState$: () => CO,
      setSimulationPaused: () => PO,
      setSimulationSpeed: () => LO,
      simulationPaused$: () => NO,
      simulationPausedBarrier$: () => OO,
      simulationSpeed$: () => wO,
      ticks$: () => SO,
      timeSettings$: () => yO
    });
    var D = {};
    n.r(D);
    n.d(D, {
      AREA_TOOL: () => jP,
      BULLDOZE_TOOL: () => IP,
      DEFAULT_TOOL: () => yP,
      NET_TOOL: () => CP,
      OBJECT_TOOL: () => NP,
      ROUTE_TOOL: () => LP,
      SELECTION_TOOL: () => PP,
      TERRAIN_TOOL: () => OP,
      UPGRADE_TOOL: () => wP,
      ZONE_TOOL: () => SP,
      activeTool$: () => GO,
      allSnapMask$: () => WO,
      allowBrush$: () => AP,
      availableSnapMask$: () => HO,
      brushAngle$: () => GP,
      brushHeight$: () => FP,
      brushHeightMax$: () => BP,
      brushHeightMin$: () => UP,
      brushSize$: () => kP,
      brushSizeMax$: () => HP,
      brushSizeMin$: () => VP,
      brushStrength$: () => DP,
      brushes$: () => RP,
      bulldozeConfirmationRequested$: () => VO,
      changeElevation: () => hP,
      color$: () => iP,
      colorSupported$: () => sP,
      confirmBulldoze: () => mP,
      distance$: () => rP,
      distanceScale$: () => lP,
      elevation$: () => $O,
      elevationDown: () => pP,
      elevationDownDisabled$: () => tP,
      elevationRange$: () => YO,
      elevationScroll: () => fP,
      elevationStep$: () => qO,
      elevationUp: () => gP,
      elevationUpDisabled$: () => nP,
      isEditor$: () => aP,
      parallelMode$: () => QO,
      parallelModeSupported$: () => XO,
      parallelOffset$: () => ZO,
      replacingTrees$: () => oP,
      selectBrush: () => KP,
      selectTool: () => uP,
      selectToolMode: () => dP,
      selectedBrush$: () => MP,
      selectedSnapMask$: () => KO,
      setBrushAngle: () => YP,
      setBrushHeight: () => $P,
      setBrushSize: () => WP,
      setBrushStrength: () => zP,
      setColor: () => cP,
      setDistance: () => EP,
      setElevationStep: () => xP,
      setParallelOffset: () => bP,
      setSelectedSnapMask: () => vP,
      setUndergroundMode: () => TP,
      snapOptionNames$: () => zO,
      toggleParallelMode: () => _P,
      undergroundMode$: () => eP,
      undergroundModeSupported$: () => JO
    });
    var F = {};
    n.r(F);
    n.d(F, {
      AgeMask: () => QP,
      ToolbarItemType: () => XP,
      ageMask$: () => cL,
      assetCategories$: () => JP,
      assetPacks$: () => iL,
      assets$: () => eL,
      clearAssetSelection: () => fL,
      selectAsset: () => pL,
      selectAssetCategory: () => gL,
      selectAssetMenu: () => hL,
      selectedAsset$: () => lL,
      selectedAssetCategory$: () => rL,
      selectedAssetMenu$: () => oL,
      selectedAssetPacks$: () => aL,
      selectedThemes$: () => nL,
      setAgeMask: () => uL,
      setSelectedAssetPacks: () => mL,
      setSelectedThemes: () => dL,
      themes$: () => tL,
      toggleToolOptions: () => xL,
      toolbarGroups$: () => ZP,
      vegetationAges$: () => sL
    });
    var U = {};
    n.r(U);
    n.d(U, {
      cityName$: () => EL,
      money$: () => bL,
      moneyDelta$: () => TL,
      moneyTrendThresholds$: () => SL,
      population$: () => vL,
      populationDelta$: () => _L,
      populationTrendThresholds$: () => yL,
      setCityName: () => jL,
      unlimitedMoney$: () => IL
    });
    var B = {};
    n.r(B);
    n.d(B, {
      cargoTypes$: () => wL,
      deleteLine: () => ML,
      hideLine: () => UL,
      passengerTypes$: () => NL,
      renameLine: () => RL,
      resetVisibility: () => GL,
      selectLine: () => AL,
      selectedCargoType$: () => LL,
      selectedPassengerType$: () => PL,
      setLineActive: () => DL,
      setLineColor: () => kL,
      setLineSchedule: () => BL,
      setSelectedCargoType: () => KL,
      setSelectedPassengerType: () => HL,
      showLine: () => FL,
      toggleHighlight: () => VL,
      transportLines$: () => OL
    });
    var G = {};
    n.r(G);
    n.d(G, {
      clearUpgradeSelection: () => QL,
      selectUpgrade: () => XL,
      selectedUpgrade$: () => $L,
      upgradeDetails$: () => YL,
      upgrades$: () => zL,
      upgrading$: () => qL
    });
    var V = {};
    n.r(V);
    n.d(V, {
      budget: () => c,
      camera: () => u,
      chirper: () => d,
      cinematic: () => m,
      cityInfo: () => h,
      climate: () => g,
      devTree: () => N,
      economyBudget: () => p,
      event: () => _,
      feature: () => w,
      game: () => o,
      infoview: () => a,
      infoviewTypes: () => b,
      life: () => T,
      loan: () => f,
      map: () => E,
      milestone: () => O,
      photo: () => I,
      policy: () => y,
      prefab: () => r,
      prefabEffects: () => S,
      prefabProperties: () => j,
      prefabRequirements: () => C,
      production: () => x,
      radio: () => L,
      selectedInfo: () => A,
      service: () => v,
      signatureBuilding: () => P,
      statistics: () => M,
      taxation: () => R,
      time: () => k,
      tool: () => D,
      toolbar: () => F,
      toolbarBottom: () => U,
      transport: () => B,
      tutorial: () => i,
      upgrade: () => G
    });
    var H = {};
    n.r(H);
    n.d(H, {
      entityEquals: () => Ur,
      entityKey: () => Dr,
      formatLargeNumber: () => Iu,
      isNullOrEmpty: () => Vr,
      parseEntityKey: () => Fr,
      preloadImages: () => FT,
      shallowEqual: () => Kr,
      useCssLength: () => Gm,
      useFormattedLargeNumber: () => yu,
      useMemoizedValue: () => Yr,
      useRem: () => Bm
    });
    var K = {};
    n.r(K);
    n.d(K, {
      ActionHintLayout: () => vT,
      ActiveControlSchemeInputHint: () => AT,
      ActiveFocusDiv: () => Ep,
      AutoNavigationScope: () => ep,
      BackConsumer: () => kg,
      ControlIcon: () => jT,
      ControlIcons: () => yT,
      EventInputProvider: () => __,
      ExpandConsumer: () => Fg,
      FOCUS_AUTO: () => Ig,
      FOCUS_DISABLED: () => Eg,
      FocusActivation: () => $u,
      FocusBoundary: () => Lh,
      FocusContext: () => Zu,
      FocusControllerBase: () => Sh,
      FocusDisabled: () => bp,
      FocusKeyOverride: () => sp,
      FocusNode: () => Ph,
      FocusRoot: () => Ip,
      FocusScope: () => ip,
      FocusSymbol: () => Tg,
      FocusedInputHint: () => MT,
      GamepadAxis: () => kp,
      GamepadButton: () => Rp,
      GamepadPointerEventProvider: () => T_,
      InputActionBarrier: () => jp,
      InputActionConsumer: () => Lg,
      InputActionHints: () => fT,
      InputContext: () => Cg,
      InputControllerImpl: () => Og,
      InputHint: () => LT,
      InputStack: () => x_,
      MultiChildFocusController: () => Bg,
      NativeInputProvider: () => I_,
      NavigationDirection: () => Mg,
      NavigationScope: () => Xg,
      PassiveFocusDiv: () => Tp,
      PointerBarrier: () => o_,
      RootInputControllerImpl: () => Pg,
      SelectConsumer: () => Rg,
      SelectableFocusBoundary: () => Np,
      defaultInputController: () => jg,
      disabledFocusController: () => Ju,
      focusAnchorBottom: () => Yg,
      focusAnchorCenter: () => Kg,
      focusAnchorLeft: () => zg,
      focusAnchorRight: () => $g,
      focusAnchorTop: () => Wg,
      gamepadButtonFromString: () => Vp,
      getClosestKey: () => Vg,
      getClosestKeyInDirection: () => Hg,
      getElementFocusPosition: () => qg,
      inputActionNames$: () => d_,
      navActions: () => Sp,
      onInputActionPerformed$: () => m_,
      onInputActionReleased$: () => h_,
      refocusClosestKey: () => Zg,
      refocusClosestKeyIfNoFocus: () => Qg,
      setInputActionPriority: () => f_,
      transformNavigationInput: () => Gg,
      useElementFocusController: () => mp,
      useEntityFocusChangeListener: () => xp,
      useFocusCallback: () => Oh,
      useFocusChangeListener: () => fp,
      useFocused: () => Nh,
      useFocusedRef: () => wh,
      useGamepadType: () => _T,
      useInputControlIcon: () => OT,
      useInputController: () => wg,
      useKeyFocusController: () => tp,
      useKeyboardLayout: () => bT,
      useLayoutMap: () => TT,
      useMultiChildFocusController: () => Ug,
      usePassThroughFocusController: () => jh,
      useRootFocusController: () => gp,
      useStringFocusChangeListener: () => vp,
      useUniqueFocusKey: () => yg
    });
    var W = {};
    n.r(W);
    n.d(W, {
      findModule: () => ZL,
      getModule: () => JL
    });
    var z = n(624);
    var Y = n(504);
    const $ = new Map();
    let q = {};
    const X = {
      get(e, t) {
        const n = $.get(e);
        if (n && n[t]) {
          return n[t];
        }
        throw `Module ${e}@${t} was not found.`;
      },
      add(e, t) {
        if ($.has(e)) {
          throw `Module ${e} was already registered. If you want to override the exports of this module use the override API`;
        }
        $.set(e, t);
      },
      override(e, t, n) {
        const s = $.get(e);
        if (!s) {
          throw `Module ${e} was not found.`;
        }
        if (!q[e]) {
          q[e] = {};
        }
        if (!q[e][t]) {
          q[e][t] = s[t];
        }
        s[t] = n;
      },
      extend(e, t, n) {
        const s = $.get(e);
        if (!s) {
          throw `Module ${e} was not found.`;
        }
        if (e.includes(".scss")) {
          if (!n && "object" != typeof t) {
            throw `Extending ${e} SCSS without callback requires passing single argument with scss module classes.`;
          }
          if (n) {
            this.override(e, "classes", n(s.classes));
          } else {
            const n = {
              ...s.classes
            };
            for (const s of Object.keys(t)) {
              if (!n[s]) {
                n[s] = "";
              }
              n[s] += ` ${t[s]}`;
              this.override(e, "classes", n);
            }
          }
        } else {
          if (!n || "function" != typeof n || "string" != typeof t) {
            throw `Extending ${e} requires 2 arguments, name of extended export and extend callback taking current value and returning new`;
          }
          this.override(e, t, n(s[t]));
        }
      },
      append(e, t, n, s = undefined) {
        const i = "function" == typeof t;
        const a = "function" == typeof n;
        let o;
        let r = i ? "game-ui/modding/modding-hook.tsx" : e;
        let l = i ? "ModdingHook" : t;
        let c = i ? e : undefined;
        let u = a ? s : n;
        if (i) {
          o = t;
        } else if (a) {
          o = n;
        }
        this.extend(r, l, e => {
          const t = t => {
            if (c && c !== t.name) {
              0;
              return z.jsx(e, {
                ...t
              });
            }
            const {
              children: n,
              ...i
            } = t || {};
            if ("number" == typeof s && -1 !== u) {
              const t = Y.Children.count(n);
              let a = s < 0 ? t + (s + 1) : s;
              0;
              return z.jsxs(e, {
                ...i,
                children: [Y.Children.map(n, (e, t) => a === t || 0 === t && a < 0 ? (0, z.jsxs)(z.Fragment, {
                  children: [(0, z.jsx)(o, {}), e]
                }) : e), a >= t && (0, z.jsx)(z.Fragment, {
                  children: (0, z.jsx)(o, {})
                })]
              });
            }
            0;
            0;
            0;
            return z.jsxs(e, {
              ...i,
              children: [n, z.jsx(z.Fragment, {
                children: z.jsx(o, {})
              })]
            });
          };
          t.displayName = `Extended ${l}${i ? `:${c}` : ""}+`;
          return t;
        });
      },
      registry: $,
      find(e) {
        const t = [];
        for (const [n, s] of $) {
          const i = [];
          for (const t in s) if (e instanceof RegExp ? e.test(t) : t.includes(e)) {
            i.push(t);
          }
          if (i.length) {
            t.push([n, ...i]);
          } else if (e instanceof RegExp ? e.test(n) : n.includes(e)) {
            t.push([n, ...Object.keys(s)]);
          }
        }
        return t;
      },
      reset() {
        for (const e of Object.keys(q)) for (const t of Object.keys(q[e])) this.override(e, t, q[e][t]);
      }
    };
    var Q = n(352);
    n(580);
    var Z = n(104);
    function J() {}
    const ee = (() => {
      let e = 0;
      return () => e++;
    })();
    function te(e) {
      return null == e;
    }
    function ne(e) {
      if (Array.isArray && Array.isArray(e)) {
        return true;
      }
      const t = Object.prototype.toString.call(e);
      return "[object" === t.slice(0, 7) && "Array]" === t.slice(-6);
    }
    function se(e) {
      return null !== e && "[object Object]" === Object.prototype.toString.call(e);
    }
    function ie(e) {
      return ("number" == typeof e || e instanceof Number) && isFinite(+e);
    }
    function ae(e, t) {
      return ("number" == typeof e || e instanceof Number) && isFinite(+e) ? e : t;
    }
    function oe(e, t) {
      return undefined === e ? t : e;
    }
    const re = (e, t) => "string" == typeof e && e.endsWith("%") ? parseFloat(e) / 100 * t : +e;
    function le(e, t, n) {
      if (e && "function" == typeof e.call) {
        return e.apply(n, t);
      }
    }
    function ce(e, t, n, s) {
      let i;
      let a;
      let o;
      if (ne(e)) {
        a = e.length;
        if (s) {
          for (i = a - 1; i >= 0; i--) {
            t.call(n, e[i], i);
          }
        } else {
          for (i = 0; i < a; i++) {
            t.call(n, e[i], i);
          }
        }
      } else if (null !== e && "[object Object]" === Object.prototype.toString.call(e)) {
        o = Object.keys(e);
        a = o.length;
        for (i = 0; i < a; i++) {
          t.call(n, e[o[i]], o[i]);
        }
      }
    }
    function ue(e, t) {
      let n;
      let s;
      let i;
      let a;
      if (!e || !t || e.length !== t.length) {
        return false;
      }
      n = 0;
      for (s = e.length; n < s; ++n) {
        i = e[n];
        a = t[n];
        if (i.datasetIndex !== a.datasetIndex || i.index !== a.index) {
          return false;
        }
      }
      return true;
    }
    function de(e) {
      if (ne(e)) {
        return e.map(de);
      }
      if (null !== e && "[object Object]" === Object.prototype.toString.call(e)) {
        const t = Object.create(null);
        const n = Object.keys(e);
        const s = n.length;
        let i = 0;
        for (; i < s; ++i) {
          t[n[i]] = de(e[n[i]]);
        }
        return t;
      }
      return e;
    }
    function me(e) {
      return -1 === ["__proto__", "prototype", "constructor"].indexOf(e);
    }
    function he(e, t, n, s) {
      if (!(-1 === ["__proto__", "prototype", "constructor"].indexOf(e))) {
        return;
      }
      const i = t[e];
      const a = n[e];
      if (null !== i && "[object Object]" === Object.prototype.toString.call(i) && null !== a && "[object Object]" === Object.prototype.toString.call(a)) {
        ge(i, a, s);
      } else {
        t[e] = de(a);
      }
    }
    function ge(e, t, n) {
      const s = ne(t) ? t : [t];
      const i = s.length;
      if (!(null !== e && "[object Object]" === Object.prototype.toString.call(e))) {
        return e;
      }
      const a = (n = n || {}).merger || he;
      let o;
      for (let t = 0; t < i; ++t) {
        o = s[t];
        if (!(null !== o && "[object Object]" === Object.prototype.toString.call(o))) {
          continue;
        }
        const i = Object.keys(o);
        let t = 0;
        for (let s = i.length; t < s; ++t) {
          a(i[t], e, o, n);
        }
      }
      return e;
    }
    function pe(e, t) {
      return ge(e, t, {
        merger: fe
      });
    }
    function fe(e, t, n) {
      if (!(-1 === ["__proto__", "prototype", "constructor"].indexOf(e))) {
        return;
      }
      const s = t[e];
      const i = n[e];
      if (null !== s && "[object Object]" === Object.prototype.toString.call(s) && null !== i && "[object Object]" === Object.prototype.toString.call(i)) {
        ge(s, i, {
          merger: fe
        });
      } else if (!Object.prototype.hasOwnProperty.call(t, e)) {
        t[e] = de(i);
      }
    }
    const xe = {
      "": e => e,
      x: e => e.x,
      y: e => e.y
    };
    function ve(e, t) {
      const n = xe[t] || (xe[t] = function (e) {
        const t = function (e) {
          const t = e.split(".");
          const n = [];
          let s = "";
          for (const e of t) {
            s += e;
            if (s.endsWith("\\")) {
              s = s.slice(0, -1) + ".";
            } else {
              n.push(s);
              s = "";
            }
          }
          return n;
        }(e);
        return e => {
          for (const n of t) {
            if ("" === n) {
              break;
            }
            e = e && e[n];
          }
          return e;
        };
      }(t));
      return n(e);
    }
    function _e(e) {
      return e.charAt(0).toUpperCase() + e.slice(1);
    }
    const be = e => undefined !== e;
    const Te = e => "function" == typeof e;
    const Ee = (e, t) => {
      if (e.size !== t.size) {
        return false;
      }
      for (const n of e) if (!t.has(n)) {
        return false;
      }
      return true;
    };
    const Ie = Math.PI;
    const ye = 2 * Ie;
    const Se = ye + Ie;
    const je = Number.POSITIVE_INFINITY;
    const Ce = Ie / 180;
    const Ne = Ie / 2;
    const we = Ie / 4;
    const Oe = 2 * Ie / 3;
    const Pe = Math.log10;
    const Le = Math.sign;
    function Ae(e, t, n) {
      return Math.abs(e - t) < n;
    }
    function Me(e) {
      const t = Math.round(e);
      e = Math.abs(e - t) < e / 1e3 ? t : e;
      const n = Math.pow(10, Math.floor(Pe(e)));
      const s = e / n;
      return (s <= 1 ? 1 : s <= 2 ? 2 : s <= 5 ? 5 : 10) * n;
    }
    function Re(e) {
      return !isNaN(parseFloat(e)) && isFinite(e);
    }
    function ke(e, t, n) {
      let s;
      let i;
      let a;
      s = 0;
      for (i = e.length; s < i; s++) {
        a = e[s][n];
        if (!isNaN(a)) {
          t.min = Math.min(t.min, a);
          t.max = Math.max(t.max, a);
        }
      }
    }
    function De(e) {
      return e * (Ie / 180);
    }
    function Fe(e) {
      return e * (180 / Ie);
    }
    function Ue(e) {
      if (!(("number" == typeof e || e instanceof Number) && isFinite(+e))) {
        return;
      }
      let t = 1;
      let n = 0;
      for (; Math.round(e * t) / t !== e;) {
        t *= 10;
        n++;
      }
      return n;
    }
    function Be(e, t) {
      const n = t.x - e.x;
      const s = t.y - e.y;
      const i = Math.sqrt(n * n + s * s);
      let a = Math.atan2(s, n);
      if (a < -.5 * Ie) {
        a += ye;
      }
      return {
        angle: a,
        distance: i
      };
    }
    function Ge(e, t) {
      return Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2));
    }
    function Ve(e, t) {
      return (e - t + Se) % ye - Ie;
    }
    function He(e) {
      return (e % ye + ye) % ye;
    }
    function Ke(e, t, n, s) {
      const i = (e % ye + ye) % ye;
      const a = (t % ye + ye) % ye;
      const o = (n % ye + ye) % ye;
      const r = ((a - i) % ye + ye) % ye;
      const l = ((o - i) % ye + ye) % ye;
      const c = ((i - a) % ye + ye) % ye;
      const u = ((i - o) % ye + ye) % ye;
      return i === a || i === o || s && a === o || r > l && c < u;
    }
    function We(e, t, n) {
      return Math.max(t, Math.min(n, e));
    }
    function ze(e, t, n, s = 1e-6) {
      return e >= Math.min(t, n) - s && e <= Math.max(t, n) + s;
    }
    function Ye(e, t, n) {
      n = n || (n => e[n] < t);
      let s;
      let i = e.length - 1;
      let a = 0;
      for (; i - a > 1;) {
        s = a + i >> 1;
        if (n(s)) {
          a = s;
        } else {
          i = s;
        }
      }
      return {
        lo: a,
        hi: i
      };
    }
    const $e = (e, t, n, s) => Ye(e, n, s ? s => {
      const i = e[s][t];
      return i < n || i === n && e[s + 1][t] === n;
    } : s => e[s][t] < n);
    const qe = (e, t, n) => Ye(e, n, s => e[s][t] >= n);
    const Xe = ["push", "pop", "shift", "splice", "unshift"];
    function Qe(e, t) {
      const n = e._chartjs;
      if (!n) {
        return;
      }
      const s = n.listeners;
      const i = s.indexOf(t);
      if (-1 !== i) {
        s.splice(i, 1);
      }
      if (!(s.length > 0)) {
        Xe.forEach(t => {
          delete e[t];
        });
        delete e._chartjs;
      }
    }
    function Ze(e) {
      const t = new Set();
      let n;
      let s;
      n = 0;
      for (s = e.length; n < s; ++n) {
        t.add(e[n]);
      }
      return t.size === s ? e : Array.from(t);
    }
    const Je = "undefined" == typeof window ? function (e) {
      return e();
    } : window.requestAnimationFrame;
    function et(e, t) {
      let n = false;
      return function (...s) {
        if (!n) {
          n = true;
          Je.call(window, () => {
            n = false;
            e.apply(t, s);
          });
        }
      };
    }
    const tt = e => "start" === e ? "left" : "end" === e ? "right" : "center";
    const nt = (e, t, n) => "start" === e ? t : "end" === e ? n : (t + n) / 2;
    function st(e, t, n) {
      const s = t.length;
      let i = 0;
      let a = s;
      if (e._sorted) {
        const {
          iScale: o,
          _parsed: r
        } = e;
        const l = o.axis;
        const {
          min: c,
          max: u,
          minDefined: d,
          maxDefined: m
        } = o.getUserBounds();
        if (d) {
          i = Math.max(0, Math.min(s - 1, Math.min($e(r, o.axis, c).lo, n ? s : $e(t, l, o.getPixelForValue(c)).lo)));
        }
        a = m ? Math.max(i, Math.min(s, Math.max($e(r, o.axis, u, true).hi + 1, n ? 0 : $e(t, l, o.getPixelForValue(u), true).hi + 1))) - i : s - i;
      }
      return {
        start: i,
        count: a
      };
    }
    function it(e) {
      const {
        xScale: t,
        yScale: n,
        _scaleRanges: s
      } = e;
      const i = {
        xmin: t.min,
        xmax: t.max,
        ymin: n.min,
        ymax: n.max
      };
      if (!s) {
        e._scaleRanges = i;
        return true;
      }
      const a = s.xmin !== t.min || s.xmax !== t.max || s.ymin !== n.min || s.ymax !== n.max;
      Object.assign(s, i);
      return a;
    }
    const at = e => 0 === e || 1 === e;
    const ot = (e, t, n) => -Math.pow(2, 10 * (e -= 1)) * Math.sin((e - t) * ye / n);
    const rt = (e, t, n) => Math.pow(2, -10 * e) * Math.sin((e - t) * ye / n) + 1;
    const lt = {
      linear: e => e,
      easeInQuad: e => e * e,
      easeOutQuad: e => -e * (e - 2),
      easeInOutQuad: e => (e /= .5) < 1 ? .5 * e * e : -.5 * (--e * (e - 2) - 1),
      easeInCubic: e => e * e * e,
      easeOutCubic: e => (e -= 1) * e * e + 1,
      easeInOutCubic: e => (e /= .5) < 1 ? .5 * e * e * e : .5 * ((e -= 2) * e * e + 2),
      easeInQuart: e => e * e * e * e,
      easeOutQuart: e => -((e -= 1) * e * e * e - 1),
      easeInOutQuart: e => (e /= .5) < 1 ? .5 * e * e * e * e : -.5 * ((e -= 2) * e * e * e - 2),
      easeInQuint: e => e * e * e * e * e,
      easeOutQuint: e => (e -= 1) * e * e * e * e + 1,
      easeInOutQuint: e => (e /= .5) < 1 ? .5 * e * e * e * e * e : .5 * ((e -= 2) * e * e * e * e + 2),
      easeInSine: e => 1 - Math.cos(e * Ne),
      easeOutSine: e => Math.sin(e * Ne),
      easeInOutSine: e => -.5 * (Math.cos(Ie * e) - 1),
      easeInExpo: e => 0 === e ? 0 : Math.pow(2, 10 * (e - 1)),
      easeOutExpo: e => 1 === e ? 1 : 1 - Math.pow(2, -10 * e),
      easeInOutExpo: e => 0 === e || 1 === e ? e : e < .5 ? .5 * Math.pow(2, 10 * (2 * e - 1)) : .5 * (2 - Math.pow(2, -10 * (2 * e - 1))),
      easeInCirc: e => e >= 1 ? e : -(Math.sqrt(1 - e * e) - 1),
      easeOutCirc: e => Math.sqrt(1 - (e -= 1) * e),
      easeInOutCirc: e => (e /= .5) < 1 ? -.5 * (Math.sqrt(1 - e * e) - 1) : .5 * (Math.sqrt(1 - (e -= 2) * e) + 1),
      easeInElastic: e => 0 === e || 1 === e ? e : ot(e, .075, .3),
      easeOutElastic: e => 0 === e || 1 === e ? e : Math.pow(2, -10 * e) * Math.sin((e - .075) * ye / .3) + 1,
      easeInOutElastic(e) {
        return 0 === e || 1 === e ? e : e < .5 ? .5 * ot(2 * e, .1125, .45) : .5 + .5 * (Math.pow(2, -10 * (2 * e - 1)) * Math.sin((2 * e - 1 - .1125) * ye / .45) + 1);
      },
      easeInBack(e) {
        return e * e * (2.70158 * e - 1.70158);
      },
      easeOutBack(e) {
        return (e -= 1) * e * (2.70158 * e + 1.70158) + 1;
      },
      easeInOutBack(e) {
        let t = 1.70158;
        return (e /= .5) < 1 ? e * e * ((1 + (t *= 1.525)) * e - t) * .5 : .5 * ((e -= 2) * e * ((1 + (t *= 1.525)) * e + t) + 2);
      },
      easeInBounce: e => 1 - lt.easeOutBounce(1 - e),
      easeOutBounce(e) {
        return e < 0.36363636363636365 ? 7.5625 * e * e : e < 0.7272727272727273 ? 7.5625 * (e -= 0.5454545454545454) * e + .75 : e < 0.9090909090909091 ? 7.5625 * (e -= 0.8181818181818182) * e + .9375 : 7.5625 * (e -= 0.9545454545454546) * e + .984375;
      },
      easeInOutBounce: e => e < .5 ? .5 * lt.easeInBounce(2 * e) : .5 * lt.easeOutBounce(2 * e - 1) + .5
    };
    function ut(e) {
      return e + .5 | 0;
    }
    const dt = (e, t, n) => Math.max(Math.min(e, n), t);
    function mt(e) {
      return Math.max(Math.min(2.55 * e + .5 | 0, 255), 0);
    }
    function ht(e) {
      return Math.max(Math.min(255 * e + .5 | 0, 255), 0);
    }
    function gt(e) {
      return Math.max(Math.min((e / 2.55 + .5 | 0) / 100, 1), 0);
    }
    function pt(e) {
      return Math.max(Math.min(100 * e + .5 | 0, 100), 0);
    }
    const ft = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    };
    const xt = [..."0123456789ABCDEF"];
    const vt = e => xt[15 & e];
    const _t = e => xt[(240 & e) >> 4] + xt[15 & e];
    const bt = e => (240 & e) >> 4 == (15 & e);
    function Tt(e) {
      var t = (e => (240 & e.r) >> 4 == (15 & e.r) && (240 & e.g) >> 4 == (15 & e.g) && (240 & e.b) >> 4 == (15 & e.b) && (240 & e.a) >> 4 == (15 & e.a))(e) ? vt : _t;
      return e ? "#" + t(e.r) + t(e.g) + t(e.b) + ((e, t) => e < 255 ? t(e) : "")(e.a, t) : undefined;
    }
    const Et = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    function It(e, t, n) {
      const s = t * Math.min(n, 1 - n);
      const i = (t, i = (t + e / 30) % 12) => n - s * Math.max(Math.min(i - 3, 9 - i, 1), -1);
      return [i(0), i(8), i(4)];
    }
    function yt(e, t, n) {
      const s = (s, i = (s + e / 60) % 6) => n - n * t * Math.max(Math.min(i, 4 - i, 1), 0);
      return [s(5), s(3), s(1)];
    }
    function St(e, t, n) {
      const s = It(e, 1, .5);
      let i;
      if (t + n > 1) {
        i = 1 / (t + n);
        t *= i;
        n *= i;
      }
      for (i = 0; i < 3; i++) {
        s[i] *= 1 - t - n;
        s[i] += t;
      }
      return s;
    }
    function jt(e) {
      const t = e.r / 255;
      const n = e.g / 255;
      const s = e.b / 255;
      const i = Math.max(t, n, s);
      const a = Math.min(t, n, s);
      const o = (i + a) / 2;
      let r;
      let l;
      let c;
      if (i !== a) {
        c = i - a;
        l = o > .5 ? c / (2 - i - a) : c / (i + a);
        r = function (e, t, n, s, i) {
          return e === i ? (t - n) / s + (t < n ? 6 : 0) : t === i ? (n - e) / s + 2 : (e - t) / s + 4;
        }(t, n, s, c, i);
        r = 60 * r + .5;
      }
      return [0 | r, l || 0, o];
    }
    function Ct(e, t, n, s) {
      return (Array.isArray(t) ? e(t[0], t[1], t[2]) : e(t, n, s)).map(ht);
    }
    function Nt(e, t, n) {
      return (Array.isArray(e) ? It(e[0], e[1], e[2]) : It(e, t, n)).map(ht);
    }
    function wt(e) {
      return (e % 360 + 360) % 360;
    }
    function Ot(e) {
      const t = Et.exec(e);
      let n;
      let s = 255;
      if (!t) {
        return;
      }
      if (t[5] !== n) {
        s = t[6] ? dt(ut(2.55 * +t[5]), 0, 255) : dt(ut(255 * +t[5]), 0, 255);
      }
      const i = (+t[2] % 360 + 360) % 360;
      const a = +t[3] / 100;
      const o = +t[4] / 100;
      n = "hwb" === t[1] ? function (e, t, n) {
        return (Array.isArray(e) ? St(e[0], e[1], e[2]) : St(e, t, n)).map(ht);
      }(i, a, o) : "hsv" === t[1] ? function (e, t, n) {
        return (Array.isArray(e) ? yt(e[0], e[1], e[2]) : yt(e, t, n)).map(ht);
      }(i, a, o) : Ct(It, i, a, o);
      return {
        r: n[0],
        g: n[1],
        b: n[2],
        a: s
      };
    }
    const Pt = {
      x: "dark",
      Z: "light",
      Y: "re",
      X: "blu",
      W: "gr",
      V: "medium",
      U: "slate",
      A: "ee",
      T: "ol",
      S: "or",
      B: "ra",
      C: "lateg",
      D: "ights",
      R: "in",
      Q: "turquois",
      E: "hi",
      P: "ro",
      O: "al",
      N: "le",
      M: "de",
      L: "yello",
      F: "en",
      K: "ch",
      G: "arks",
      H: "ea",
      I: "ightg",
      J: "wh"
    };
    const Lt = {
      OiceXe: "f0f8ff",
      antiquewEte: "faebd7",
      aqua: "ffff",
      aquamarRe: "7fffd4",
      azuY: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "0",
      blanKedOmond: "ffebcd",
      Xe: "ff",
      XeviTet: "8a2be2",
      bPwn: "a52a2a",
      burlywood: "deb887",
      caMtXe: "5f9ea0",
      KartYuse: "7fff00",
      KocTate: "d2691e",
      cSO: "ff7f50",
      cSnflowerXe: "6495ed",
      cSnsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "ffff",
      xXe: "8b",
      xcyan: "8b8b",
      xgTMnPd: "b8860b",
      xWay: "a9a9a9",
      xgYF: "6400",
      xgYy: "a9a9a9",
      xkhaki: "bdb76b",
      xmagFta: "8b008b",
      xTivegYF: "556b2f",
      xSange: "ff8c00",
      xScEd: "9932cc",
      xYd: "8b0000",
      xsOmon: "e9967a",
      xsHgYF: "8fbc8f",
      xUXe: "483d8b",
      xUWay: "2f4f4f",
      xUgYy: "2f4f4f",
      xQe: "ced1",
      xviTet: "9400d3",
      dAppRk: "ff1493",
      dApskyXe: "bfff",
      dimWay: "696969",
      dimgYy: "696969",
      dodgerXe: "1e90ff",
      fiYbrick: "b22222",
      flSOwEte: "fffaf0",
      foYstWAn: "228b22",
      fuKsia: "ff00ff",
      gaRsbSo: "dcdcdc",
      ghostwEte: "f8f8ff",
      gTd: "ffd700",
      gTMnPd: "daa520",
      Way: "808080",
      gYF: "8000",
      gYFLw: "adff2f",
      gYy: "808080",
      honeyMw: "f0fff0",
      hotpRk: "ff69b4",
      RdianYd: "cd5c5c",
      Rdigo: "4b0082",
      ivSy: "fffff0",
      khaki: "f0e68c",
      lavFMr: "e6e6fa",
      lavFMrXsh: "fff0f5",
      lawngYF: "7cfc00",
      NmoncEffon: "fffacd",
      ZXe: "add8e6",
      ZcSO: "f08080",
      Zcyan: "e0ffff",
      ZgTMnPdLw: "fafad2",
      ZWay: "d3d3d3",
      ZgYF: "90ee90",
      ZgYy: "d3d3d3",
      ZpRk: "ffb6c1",
      ZsOmon: "ffa07a",
      ZsHgYF: "20b2aa",
      ZskyXe: "87cefa",
      ZUWay: "778899",
      ZUgYy: "778899",
      ZstAlXe: "b0c4de",
      ZLw: "ffffe0",
      lime: "ff00",
      limegYF: "32cd32",
      lRF: "faf0e6",
      magFta: "ff00ff",
      maPon: "800000",
      VaquamarRe: "66cdaa",
      VXe: "cd",
      VScEd: "ba55d3",
      VpurpN: "9370db",
      VsHgYF: "3cb371",
      VUXe: "7b68ee",
      VsprRggYF: "fa9a",
      VQe: "48d1cc",
      VviTetYd: "c71585",
      midnightXe: "191970",
      mRtcYam: "f5fffa",
      mistyPse: "ffe4e1",
      moccasR: "ffe4b5",
      navajowEte: "ffdead",
      navy: "80",
      Tdlace: "fdf5e6",
      Tive: "808000",
      TivedBb: "6b8e23",
      Sange: "ffa500",
      SangeYd: "ff4500",
      ScEd: "da70d6",
      pOegTMnPd: "eee8aa",
      pOegYF: "98fb98",
      pOeQe: "afeeee",
      pOeviTetYd: "db7093",
      papayawEp: "ffefd5",
      pHKpuff: "ffdab9",
      peru: "cd853f",
      pRk: "ffc0cb",
      plum: "dda0dd",
      powMrXe: "b0e0e6",
      purpN: "800080",
      YbeccapurpN: "663399",
      Yd: "ff0000",
      Psybrown: "bc8f8f",
      PyOXe: "4169e1",
      saddNbPwn: "8b4513",
      sOmon: "fa8072",
      sandybPwn: "f4a460",
      sHgYF: "2e8b57",
      sHshell: "fff5ee",
      siFna: "a0522d",
      silver: "c0c0c0",
      skyXe: "87ceeb",
      UXe: "6a5acd",
      UWay: "708090",
      UgYy: "708090",
      snow: "fffafa",
      sprRggYF: "ff7f",
      stAlXe: "4682b4",
      tan: "d2b48c",
      teO: "8080",
      tEstN: "d8bfd8",
      tomato: "ff6347",
      Qe: "40e0d0",
      viTet: "ee82ee",
      JHt: "f5deb3",
      wEte: "ffffff",
      wEtesmoke: "f5f5f5",
      Lw: "ffff00",
      LwgYF: "9acd32"
    };
    let At;
    function Mt(e) {
      if (!At) {
        At = function () {
          const e = {};
          const t = Object.keys(Lt);
          const n = Object.keys(Pt);
          let s;
          let i;
          let a;
          let o;
          let r;
          for (s = 0; s < t.length; s++) {
            o = r = t[s];
            for (i = 0; i < n.length; i++) {
              a = n[i];
              r = r.replace(a, Pt[a]);
            }
            a = parseInt(Lt[o], 16);
            e[r] = [a >> 16 & 255, a >> 8 & 255, 255 & a];
          }
          return e;
        }();
        At.transparent = [0, 0, 0, 0];
      }
      const t = At[e.toLowerCase()];
      return t && {
        r: t[0],
        g: t[1],
        b: t[2],
        a: 4 === t.length ? t[3] : 255
      };
    }
    const Rt = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    const kt = e => e <= .0031308 ? 12.92 * e : 1.055 * Math.pow(e, 0.4166666666666667) - .055;
    const Dt = e => e <= .04045 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4);
    function Ft(e, t, n) {
      if (e) {
        let s = jt(e);
        s[t] = Math.max(0, Math.min(s[t] + s[t] * n, 0 === t ? 360 : 1));
        s = Ct(It, s, undefined, undefined);
        e.r = s[0];
        e.g = s[1];
        e.b = s[2];
      }
    }
    function Ut(e, t) {
      return e ? Object.assign(t || {}, e) : e;
    }
    function Bt(e) {
      var t = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      };
      if (Array.isArray(e)) {
        if (e.length >= 3) {
          t = {
            r: e[0],
            g: e[1],
            b: e[2],
            a: 255
          };
          if (e.length > 3) {
            t.a = dt(ut(255 * e[3]), 0, 255);
          }
        }
      } else {
        (t = e ? Object.assign({
          r: 0,
          g: 0,
          b: 0,
          a: 1
        } || {}, e) : e).a = dt(ut(255 * t.a), 0, 255);
      }
      return t;
    }
    function Gt(e) {
      return "r" === e.charAt(0) ? function (e) {
        const t = Rt.exec(e);
        let n;
        let s;
        let i;
        let a = 255;
        if (t) {
          if (t[7] !== n) {
            const e = +t[7];
            a = t[8] ? dt(ut(2.55 * e), 0, 255) : Math.max(Math.min(255 * e, 255), 0);
          }
          n = +t[1];
          s = +t[3];
          i = +t[5];
          n = 255 & (t[2] ? dt(ut(2.55 * n), 0, 255) : Math.max(Math.min(n, 255), 0));
          s = 255 & (t[4] ? dt(ut(2.55 * s), 0, 255) : Math.max(Math.min(s, 255), 0));
          i = 255 & (t[6] ? dt(ut(2.55 * i), 0, 255) : Math.max(Math.min(i, 255), 0));
          return {
            r: n,
            g: s,
            b: i,
            a
          };
        }
      }(e) : Ot(e);
    }
    class Vt {
      constructor(e) {
        if (e instanceof Vt) {
          return e;
        }
        const t = typeof e;
        let n;
        var s;
        var i;
        var a;
        if ("object" === t) {
          n = Bt(e);
        } else if ("string" === t) {
          a = (s = e).length;
          if ("#" === s[0]) {
            if (4 === a || 5 === a) {
              i = {
                r: 255 & 17 * ft[s[1]],
                g: 255 & 17 * ft[s[2]],
                b: 255 & 17 * ft[s[3]],
                a: 5 === a ? 17 * ft[s[4]] : 255
              };
            } else if (!(7 !== a && 9 !== a)) {
              i = {
                r: ft[s[1]] << 4 | ft[s[2]],
                g: ft[s[3]] << 4 | ft[s[4]],
                b: ft[s[5]] << 4 | ft[s[6]],
                a: 9 === a ? ft[s[7]] << 4 | ft[s[8]] : 255
              };
            }
          }
          n = i || Mt(e) || Gt(e);
        }
        this._rgb = n;
        this._valid = !!n;
      }
      get valid() {
        return this._valid;
      }
      get rgb() {
        var e = this._rgb ? Object.assign(undefined || {}, this._rgb) : this._rgb;
        if (e) {
          e.a = dt(ut(e.a / 2.55) / 100, 0, 1);
        }
        return e;
      }
      set rgb(e) {
        this._rgb = Bt(e);
      }
      rgbString() {
        return this._valid ? (e = this._rgb) && (e.a < 255 ? `rgba(${e.r}, ${e.g}, ${e.b}, ${dt(ut(e.a / 2.55) / 100, 0, 1)})` : `rgb(${e.r}, ${e.g}, ${e.b})`) : undefined;
        var e;
      }
      hexString() {
        return this._valid ? Tt(this._rgb) : undefined;
      }
      hslString() {
        return this._valid ? function (e) {
          if (!e) {
            return;
          }
          const t = jt(e);
          const n = t[0];
          const s = dt(ut(100 * t[1]), 0, 100);
          const i = dt(ut(100 * t[2]), 0, 100);
          return e.a < 255 ? `hsla(${n}, ${s}%, ${i}%, ${dt(ut(e.a / 2.55) / 100, 0, 1)})` : `hsl(${n}, ${s}%, ${i}%)`;
        }(this._rgb) : undefined;
      }
      mix(e, t) {
        if (e) {
          const n = this.rgb;
          const s = e.rgb;
          let i;
          const a = t === i ? .5 : t;
          const o = 2 * a - 1;
          const r = n.a - s.a;
          const l = ((o * r == -1 ? o : (o + r) / (1 + o * r)) + 1) / 2;
          i = 1 - l;
          n.r = 255 & l * n.r + i * s.r + .5;
          n.g = 255 & l * n.g + i * s.g + .5;
          n.b = 255 & l * n.b + i * s.b + .5;
          n.a = a * n.a + (1 - a) * s.a;
          this.rgb = n;
        }
        return this;
      }
      interpolate(e, t) {
        if (e) {
          this._rgb = function (e, t, n) {
            const s = dt(ut(e.r / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(e.r / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(e.r / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4);
            const i = dt(ut(e.g / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(e.g / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(e.g / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4);
            const a = dt(ut(e.b / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(e.b / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(e.b / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4);
            return {
              r: dt(ut(255 * (s + n * ((dt(ut(t.r / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.r / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.r / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - s) <= .0031308 ? 12.92 * (s + n * ((dt(ut(t.r / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.r / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.r / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - s)) : 1.055 * Math.pow(s + n * ((dt(ut(t.r / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.r / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.r / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - s), 0.4166666666666667) - .055)), 0, 255),
              g: dt(ut(255 * (i + n * ((dt(ut(t.g / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.g / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.g / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - i) <= .0031308 ? 12.92 * (i + n * ((dt(ut(t.g / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.g / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.g / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - i)) : 1.055 * Math.pow(i + n * ((dt(ut(t.g / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.g / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.g / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - i), 0.4166666666666667) - .055)), 0, 255),
              b: dt(ut(255 * (a + n * ((dt(ut(t.b / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.b / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.b / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - a) <= .0031308 ? 12.92 * (a + n * ((dt(ut(t.b / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.b / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.b / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - a)) : 1.055 * Math.pow(a + n * ((dt(ut(t.b / 2.55) / 100, 0, 1) <= .04045 ? dt(ut(t.b / 2.55) / 100, 0, 1) / 12.92 : Math.pow((dt(ut(t.b / 2.55) / 100, 0, 1) + .055) / 1.055, 2.4)) - a), 0.4166666666666667) - .055)), 0, 255),
              a: e.a + n * (t.a - e.a)
            };
          }(this._rgb, e._rgb, t);
        }
        return this;
      }
      clone() {
        return new Vt(this.rgb);
      }
      alpha(e) {
        this._rgb.a = dt(ut(255 * e), 0, 255);
        return this;
      }
      clearer(e) {
        this._rgb.a *= 1 - e;
        return this;
      }
      greyscale() {
        const e = this._rgb;
        const t = .3 * e.r + .59 * e.g + .11 * e.b + .5 | 0;
        e.r = e.g = e.b = t;
        return this;
      }
      opaquer(e) {
        this._rgb.a *= 1 + e;
        return this;
      }
      negate() {
        const e = this._rgb;
        e.r = 255 - e.r;
        e.g = 255 - e.g;
        e.b = 255 - e.b;
        return this;
      }
      lighten(e) {
        Ft(this._rgb, 2, e);
        return this;
      }
      darken(e) {
        Ft(this._rgb, 2, -e);
        return this;
      }
      saturate(e) {
        Ft(this._rgb, 1, e);
        return this;
      }
      desaturate(e) {
        Ft(this._rgb, 1, -e);
        return this;
      }
      rotate(e) {
        (function (e, t) {
          var n = jt(e);
          n[0] = ((n[0] + t) % 360 + 360) % 360;
          n = Ct(It, n, undefined, undefined);
          e.r = n[0];
          e.g = n[1];
          e.b = n[2];
        })(this._rgb, e);
        return this;
      }
    }
    function Ht(e) {
      return new Vt(e);
    }
    function Kt(e) {
      if (e && "object" == typeof e) {
        const t = e.toString();
        return "[object CanvasPattern]" === t || "[object CanvasGradient]" === t;
      }
      return false;
    }
    function Wt(e) {
      return Kt(e) ? e : new Vt(e);
    }
    function zt(e) {
      return Kt(e) ? e : new Vt(e).saturate(.5).darken(.1).hexString();
    }
    const Yt = ["x", "y", "borderWidth", "radius", "tension"];
    const $t = ["color", "borderColor", "backgroundColor"];
    const qt = new Map();
    function Xt(e, t, n) {
      return function (e, t) {
        t = t || {};
        const n = e + JSON.stringify(t);
        let s = qt.get(n);
        if (!s) {
          s = new Intl.NumberFormat(e, t);
          qt.set(n, s);
        }
        return s;
      }(t, n).format(e);
    }
    const Qt = {
      values: e => ne(e) ? e : "" + e,
      numeric(e, t, n) {
        if (0 === e) {
          return "0";
        }
        const s = this.chart.options.locale;
        let i;
        let a = e;
        if (n.length > 1) {
          const t = Math.max(Math.abs(n[0].value), Math.abs(n[n.length - 1].value));
          if (t < 1e-4 || t > 1e15) {
            i = "scientific";
          }
          a = function (e, t) {
            let n = t.length > 3 ? t[2].value - t[1].value : t[1].value - t[0].value;
            if (Math.abs(n) >= 1 && e !== Math.floor(e)) {
              n = e - Math.floor(e);
            }
            return n;
          }(e, n);
        }
        const o = Pe(Math.abs(a));
        const r = Math.max(Math.min(-1 * Math.floor(o), 20), 0);
        const l = {
          notation: i,
          minimumFractionDigits: r,
          maximumFractionDigits: r
        };
        Object.assign(l, this.options.ticks.format);
        return Xt(e, s, l);
      },
      logarithmic(e, t, n) {
        if (0 === e) {
          return "0";
        }
        const s = n[t].significand || e / Math.pow(10, Math.floor(Pe(e)));
        return [1, 2, 3, 5, 10, 15].includes(s) || t > .8 * n.length ? Qt.numeric.call(this, e, t, n) : "";
      }
    };
    var Zt = {
      formatters: Qt
    };
    const Jt = Object.create(null);
    const en = Object.create(null);
    function tn(e, t) {
      if (!t) {
        return e;
      }
      const n = t.split(".");
      let t = 0;
      for (let s = n.length; t < s; ++t) {
        const s = n[t];
        e = e[s] || (e[s] = Object.create(null));
      }
      return e;
    }
    function nn(e, t, n) {
      return "string" == typeof t ? ge(tn(e, t), n) : ge(tn(e, ""), t);
    }
    class sn {
      constructor(e, t) {
        this.animation = undefined;
        this.backgroundColor = "rgba(0,0,0,0.1)";
        this.borderColor = "rgba(0,0,0,0.1)";
        this.color = "#666";
        this.datasets = {};
        this.devicePixelRatio = e => e.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = ["mousemove", "mouseout", "click", "touchstart", "touchmove"];
        this.font = {
          family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          size: 12,
          style: "normal",
          lineHeight: 1.2,
          weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (e, t) => Kt(t.backgroundColor) ? t.backgroundColor : Ht(t.backgroundColor).saturate(.5).darken(.1).hexString();
        this.hoverBorderColor = (e, t) => Kt(t.borderColor) ? t.borderColor : Ht(t.borderColor).saturate(.5).darken(.1).hexString();
        this.hoverColor = (e, t) => Kt(t.color) ? t.color : Ht(t.color).saturate(.5).darken(.1).hexString();
        this.indexAxis = "x";
        this.interaction = {
          mode: "nearest",
          intersect: true,
          includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(e);
        this.apply(t);
      }
      set(e, t) {
        return "string" == typeof e ? ge(tn(this, e), t) : ge(tn(this, ""), e);
      }
      get(e) {
        return tn(this, e);
      }
      describe(e, t) {
        return "string" == typeof e ? ge(tn(en, e), t) : ge(tn(en, ""), e);
      }
      override(e, t) {
        return "string" == typeof e ? ge(tn(Jt, e), t) : ge(tn(Jt, ""), e);
      }
      route(e, t, n, s) {
        const i = tn(this, e);
        const a = tn(this, n);
        const o = "_" + t;
        Object.defineProperties(i, {
          [o]: {
            value: i[t],
            writable: true
          },
          [t]: {
            enumerable: true,
            get() {
              const e = this[o];
              const t = a[s];
              return null !== e && "[object Object]" === Object.prototype.toString.call(e) ? Object.assign({}, t, e) : undefined === e ? t : e;
            },
            set(e) {
              this[o] = e;
            }
          }
        });
      }
      apply(e) {
        e.forEach(e => e(this));
      }
    }
    var an = new sn({
      _scriptable: e => !e.startsWith("on"),
      _indexable: e => "events" !== e,
      hover: {
        _fallback: "interaction"
      },
      interaction: {
        _scriptable: false,
        _indexable: false
      }
    }, [function (e) {
      e.set("animation", {
        delay: undefined,
        duration: 1e3,
        easing: "easeOutQuart",
        fn: undefined,
        from: undefined,
        loop: undefined,
        to: undefined,
        type: undefined
      });
      e.describe("animation", {
        _fallback: false,
        _indexable: false,
        _scriptable: e => "onProgress" !== e && "onComplete" !== e && "fn" !== e
      });
      e.set("animations", {
        colors: {
          type: "color",
          properties: $t
        },
        numbers: {
          type: "number",
          properties: Yt
        }
      });
      e.describe("animations", {
        _fallback: "animation"
      });
      e.set("transitions", {
        active: {
          animation: {
            duration: 400
          }
        },
        resize: {
          animation: {
            duration: 0
          }
        },
        show: {
          animations: {
            colors: {
              from: "transparent"
            },
            visible: {
              type: "boolean",
              duration: 0
            }
          }
        },
        hide: {
          animations: {
            colors: {
              to: "transparent"
            },
            visible: {
              type: "boolean",
              easing: "linear",
              fn: e => 0 | e
            }
          }
        }
      });
    }, function (e) {
      e.set("layout", {
        autoPadding: true,
        padding: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }
      });
    }, function (e) {
      e.set("scale", {
        display: true,
        offset: false,
        reverse: false,
        beginAtZero: false,
        bounds: "ticks",
        grace: 0,
        grid: {
          display: true,
          lineWidth: 1,
          drawOnChartArea: true,
          drawTicks: true,
          tickLength: 8,
          tickWidth: (e, t) => t.lineWidth,
          tickColor: (e, t) => t.color,
          offset: false
        },
        border: {
          display: true,
          dash: [],
          dashOffset: 0,
          width: 1
        },
        title: {
          display: false,
          text: "",
          padding: {
            top: 4,
            bottom: 4
          }
        },
        ticks: {
          minRotation: 0,
          maxRotation: 50,
          mirror: false,
          textStrokeWidth: 0,
          textStrokeColor: "",
          padding: 3,
          display: true,
          autoSkip: true,
          autoSkipPadding: 3,
          labelOffset: 0,
          callback: Zt.formatters.values,
          minor: {},
          major: {},
          align: "center",
          crossAlign: "near",
          showLabelBackdrop: false,
          backdropColor: "rgba(255, 255, 255, 0.75)",
          backdropPadding: 2
        }
      });
      e.route("scale.ticks", "color", "", "color");
      e.route("scale.grid", "color", "", "borderColor");
      e.route("scale.border", "color", "", "borderColor");
      e.route("scale.title", "color", "", "color");
      e.describe("scale", {
        _fallback: false,
        _scriptable: e => !e.startsWith("before") && !e.startsWith("after") && "callback" !== e && "parser" !== e,
        _indexable: e => "borderDash" !== e && "tickBorderDash" !== e && "dash" !== e
      });
      e.describe("scales", {
        _fallback: "scale"
      });
      e.describe("scale.ticks", {
        _scriptable: e => "backdropPadding" !== e && "callback" !== e,
        _indexable: e => "backdropPadding" !== e
      });
    }]);
    function on(e, t, n, s, i) {
      let a = t[i];
      if (!a) {
        a = t[i] = e.measureText(i).width;
        n.push(i);
      }
      if (a > s) {
        s = a;
      }
      return s;
    }
    function rn(e, t, n, s) {
      let i = (s = s || {}).data = s.data || {};
      let a = s.garbageCollect = s.garbageCollect || [];
      if (s.font !== t) {
        i = s.data = {};
        a = s.garbageCollect = [];
        s.font = t;
      }
      e.save();
      e.font = t;
      let o = 0;
      const r = n.length;
      let l;
      let c;
      let u;
      let d;
      let m;
      for (l = 0; l < r; l++) {
        d = n[l];
        if (null != d && true !== ne(d)) {
          o = on(e, i, a, o, d);
        } else if (ne(d)) {
          c = 0;
          for (u = d.length; c < u; c++) {
            m = d[c];
            if (!(null == m || ne(m))) {
              o = on(e, i, a, o, m);
            }
          }
        }
      }
      e.restore();
      const h = a.length / 2;
      if (h > n.length) {
        for (l = 0; l < h; l++) {
          delete i[a[l]];
        }
        a.splice(0, h);
      }
      return o;
    }
    function ln(e, t, n) {
      const s = e.currentDevicePixelRatio;
      const i = 0 !== n ? Math.max(n / 2, .5) : 0;
      return Math.round((t - i) * s) / s + i;
    }
    function cn(e, t) {
      (t = t || e.getContext("2d")).save();
      t.resetTransform();
      t.clearRect(0, 0, e.width, e.height);
      t.restore();
    }
    function un(e, t, n, s) {
      dn(e, t, n, s, null);
    }
    function dn(e, t, n, s, i) {
      let a;
      let o;
      let r;
      let l;
      let c;
      let u;
      let d;
      let m;
      const h = t.pointStyle;
      const g = t.rotation;
      const p = t.radius;
      let f = (g || 0) * Ce;
      if (h && "object" == typeof h && (a = h.toString(), "[object HTMLImageElement]" === a || "[object HTMLCanvasElement]" === a)) {
        e.save();
        e.translate(n, s);
        e.rotate(f);
        e.drawImage(h, -h.width / 2, -h.height / 2, h.width, h.height);
        return void e.restore();
      }
      if (!(isNaN(p) || p <= 0)) {
        e.beginPath();
        switch (h) {
          default:
            if (i) {
              e.ellipse(n, s, i / 2, p, 0, 0, ye);
            } else {
              e.arc(n, s, p, 0, ye);
            }
            e.closePath();
            break;
          case "triangle":
            u = i ? i / 2 : p;
            e.moveTo(n + Math.sin(f) * u, s - Math.cos(f) * p);
            f += Oe;
            e.lineTo(n + Math.sin(f) * u, s - Math.cos(f) * p);
            f += Oe;
            e.lineTo(n + Math.sin(f) * u, s - Math.cos(f) * p);
            e.closePath();
            break;
          case "rectRounded":
            c = .516 * p;
            l = p - c;
            o = Math.cos(f + we) * l;
            d = Math.cos(f + we) * (i ? i / 2 - c : l);
            r = Math.sin(f + we) * l;
            m = Math.sin(f + we) * (i ? i / 2 - c : l);
            e.arc(n - d, s - r, c, f - Ie, f - Ne);
            e.arc(n + m, s - o, c, f - Ne, f);
            e.arc(n + d, s + r, c, f, f + Ne);
            e.arc(n - m, s + o, c, f + Ne, f + Ie);
            e.closePath();
            break;
          case "rect":
            if (!g) {
              l = Math.SQRT1_2 * p;
              u = i ? i / 2 : l;
              e.rect(n - u, s - l, 2 * u, 2 * l);
              break;
            }
            f += we;
          case "rectRot":
            d = Math.cos(f) * (i ? i / 2 : p);
            o = Math.cos(f) * p;
            r = Math.sin(f) * p;
            m = Math.sin(f) * (i ? i / 2 : p);
            e.moveTo(n - d, s - r);
            e.lineTo(n + m, s - o);
            e.lineTo(n + d, s + r);
            e.lineTo(n - m, s + o);
            e.closePath();
            break;
          case "crossRot":
            f += we;
          case "cross":
            d = Math.cos(f) * (i ? i / 2 : p);
            o = Math.cos(f) * p;
            r = Math.sin(f) * p;
            m = Math.sin(f) * (i ? i / 2 : p);
            e.moveTo(n - d, s - r);
            e.lineTo(n + d, s + r);
            e.moveTo(n + m, s - o);
            e.lineTo(n - m, s + o);
            break;
          case "star":
            d = Math.cos(f) * (i ? i / 2 : p);
            o = Math.cos(f) * p;
            r = Math.sin(f) * p;
            m = Math.sin(f) * (i ? i / 2 : p);
            e.moveTo(n - d, s - r);
            e.lineTo(n + d, s + r);
            e.moveTo(n + m, s - o);
            e.lineTo(n - m, s + o);
            f += we;
            d = Math.cos(f) * (i ? i / 2 : p);
            o = Math.cos(f) * p;
            r = Math.sin(f) * p;
            m = Math.sin(f) * (i ? i / 2 : p);
            e.moveTo(n - d, s - r);
            e.lineTo(n + d, s + r);
            e.moveTo(n + m, s - o);
            e.lineTo(n - m, s + o);
            break;
          case "line":
            o = i ? i / 2 : Math.cos(f) * p;
            r = Math.sin(f) * p;
            e.moveTo(n - o, s - r);
            e.lineTo(n + o, s + r);
            break;
          case "dash":
            e.moveTo(n, s);
            e.lineTo(n + Math.cos(f) * (i ? i / 2 : p), s + Math.sin(f) * p);
        }
        e.fill();
        if (t.borderWidth > 0) {
          e.stroke();
        }
      }
    }
    function mn(e, t, n) {
      n = n || .5;
      return !t || e && e.x > t.left - n && e.x < t.right + n && e.y > t.top - n && e.y < t.bottom + n;
    }
    function hn(e, t) {
      e.save();
      e.beginPath();
      e.rect(t.left, t.top, t.right - t.left, t.bottom - t.top);
      e.clip();
    }
    function gn(e) {
      e.restore();
    }
    function pn(e, t, n, s, i) {
      if (!t) {
        return e.lineTo(n.x, n.y);
      }
      if ("middle" === i) {
        const s = (t.x + n.x) / 2;
        e.lineTo(s, t.y);
        e.lineTo(s, n.y);
      } else if ("after" === i != !!s) {
        e.lineTo(t.x, n.y);
      } else {
        e.lineTo(n.x, t.y);
      }
      e.lineTo(n.x, n.y);
    }
    function fn(e, t, n, s) {
      if (!t) {
        return e.lineTo(n.x, n.y);
      }
      e.bezierCurveTo(s ? t.cp1x : t.cp2x, s ? t.cp1y : t.cp2y, s ? n.cp2x : n.cp1x, s ? n.cp2y : n.cp1y, n.x, n.y);
    }
    function xn(e, t, n, s, i, a = {}) {
      const o = ne(t) ? t : [t];
      const r = a.strokeWidth > 0 && "" !== a.strokeColor;
      let l;
      let c;
      e.save();
      e.font = i.string;
      (function (e, t) {
        if (t.translation) {
          e.translate(t.translation[0], t.translation[1]);
        }
        if (!(null == t.rotation)) {
          e.rotate(t.rotation);
        }
        if (t.color) {
          e.fillStyle = t.color;
        }
        if (t.textAlign) {
          e.textAlign = t.textAlign;
        }
        if (t.textBaseline) {
          e.textBaseline = t.textBaseline;
        }
      })(e, a);
      for (l = 0; l < o.length; ++l) {
        c = o[l];
        if (a.backdrop) {
          _n(e, a.backdrop);
        }
        if (r) {
          if (a.strokeColor) {
            e.strokeStyle = a.strokeColor;
          }
          if (!(null == a.strokeWidth)) {
            e.lineWidth = a.strokeWidth;
          }
          e.strokeText(c, n, s, a.maxWidth);
        }
        e.fillText(c, n, s, a.maxWidth);
        vn(e, n, s, c, a);
        s += i.lineHeight;
      }
      e.restore();
    }
    function vn(e, t, n, s, i) {
      if (i.strikethrough || i.underline) {
        const a = e.measureText(s);
        const o = t - a.actualBoundingBoxLeft;
        const r = t + a.actualBoundingBoxRight;
        const l = n - a.actualBoundingBoxAscent;
        const c = n + a.actualBoundingBoxDescent;
        const u = i.strikethrough ? (l + c) / 2 : c;
        e.strokeStyle = e.fillStyle;
        e.beginPath();
        e.lineWidth = i.decorationWidth || 2;
        e.moveTo(o, u);
        e.lineTo(r, u);
        e.stroke();
      }
    }
    function _n(e, t) {
      const n = e.fillStyle;
      e.fillStyle = t.color;
      e.fillRect(t.left, t.top, t.width, t.height);
      e.fillStyle = n;
    }
    function bn(e, t) {
      const {
        x: n,
        y: s,
        w: i,
        h: a,
        radius: o
      } = t;
      e.arc(n + o.topLeft, s + o.topLeft, o.topLeft, -Ne, Ie, true);
      e.lineTo(n, s + a - o.bottomLeft);
      e.arc(n + o.bottomLeft, s + a - o.bottomLeft, o.bottomLeft, Ie, Ne, true);
      e.lineTo(n + i - o.bottomRight, s + a);
      e.arc(n + i - o.bottomRight, s + a - o.bottomRight, o.bottomRight, Ne, 0, true);
      e.lineTo(n + i, s + o.topRight);
      e.arc(n + i - o.topRight, s + o.topRight, o.topRight, 0, -Ne, true);
      e.lineTo(n + o.topLeft, s);
    }
    const Tn = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
    const En = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
    function In(e, t) {
      const n = ("" + e).match(Tn);
      if (!n || "normal" === n[1]) {
        return 1.2 * t;
      }
      e = +n[2];
      switch (n[3]) {
        case "px":
          return e;
        case "%":
          e /= 100;
      }
      return t * e;
    }
    const yn = e => +e || 0;
    function Sn(e, t) {
      const n = {};
      const s = null !== t && "[object Object]" === Object.prototype.toString.call(t);
      const i = s ? Object.keys(t) : t;
      const a = null !== e && "[object Object]" === Object.prototype.toString.call(e) ? s ? n => undefined === e[n] ? e[t[n]] : e[n] : t => e[t] : () => e;
      for (const e of i) n[e] = +a(e) || 0;
      return n;
    }
    function jn(e) {
      return Sn(e, {
        top: "y",
        right: "x",
        bottom: "y",
        left: "x"
      });
    }
    function Cn(e) {
      return Sn(e, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
    }
    function Nn(e) {
      const t = Sn(e, {
        top: "y",
        right: "x",
        bottom: "y",
        left: "x"
      });
      t.width = t.left + t.right;
      t.height = t.top + t.bottom;
      return t;
    }
    function wn(e, t) {
      e = e || {};
      t = t || an.font;
      let n = undefined === e.size ? t.size : e.size;
      if ("string" == typeof n) {
        n = parseInt(n, 10);
      }
      let s = undefined === e.style ? t.style : e.style;
      if (s && !("" + s).match(En)) {
        console.warn('Invalid font style specified: "' + s + '"');
        s = undefined;
      }
      const i = {
        family: undefined === e.family ? t.family : e.family,
        lineHeight: In(undefined === e.lineHeight ? t.lineHeight : e.lineHeight, n),
        size: n,
        style: s,
        weight: undefined === e.weight ? t.weight : e.weight,
        string: ""
      };
      i.string = function (e) {
        return !e || null == e.size || null == e.family ? null : (e.style ? e.style + " " : "") + (e.weight ? e.weight + " " : "") + e.size + "px " + e.family;
      }(i);
      return i;
    }
    function On(e, t, n, s) {
      let i;
      let a;
      let o;
      let r = true;
      i = 0;
      for (a = e.length; i < a; ++i) {
        o = e[i];
        if (undefined !== o && (undefined !== t && "function" == typeof o && (o = o(t), r = false), undefined !== n && ne(o) && (o = o[n % o.length], r = false), undefined !== o)) {
          if (s && !r) {
            s.cacheable = false;
          }
          return o;
        }
      }
    }
    function Pn(e, t) {
      return Object.assign(Object.create(e), t);
    }
    function Ln(e, t = [""], n = e, s, i = () => e[0]) {
      if (!(undefined !== s)) {
        s = Hn("_fallback", e);
      }
      const a = {
        [Symbol.toStringTag]: "Object",
        _cacheable: true,
        _scopes: e,
        _rootScopes: n,
        _fallback: s,
        _getTarget: i,
        override: i => Ln([i, ...e], t, n, s)
      };
      return new Proxy(a, {
        deleteProperty: (t, n) => (delete t[n], delete t._keys, delete e[0][n], true),
        get: (n, s) => Dn(n, s, () => function (e, t, n, s) {
          let i;
          for (const a of t) {
            i = Hn(a ? a + (e.charAt(0).toUpperCase() + e.slice(1)) : e, n);
            if (undefined !== i) {
              return null !== i && "[object Object]" === Object.prototype.toString.call(i) && "adapters" !== e && (null === Object.getPrototypeOf(i) || i.constructor === Object) ? Gn(n, s, e, i) : i;
            }
          }
        }(s, t, e, n)),
        getOwnPropertyDescriptor: (e, t) => Reflect.getOwnPropertyDescriptor(e._scopes[0], t),
        getPrototypeOf: () => Reflect.getPrototypeOf(e[0]),
        has: (e, t) => Kn(e).includes(t),
        ownKeys: e => Kn(e),
        set(e, t, n) {
          const s = e._storage || (e._storage = i());
          e[t] = s[t] = n;
          delete e._keys;
          return true;
        }
      });
    }
    function An(e, t, n, s) {
      const i = {
        _cacheable: false,
        _proxy: e,
        _context: t,
        _subProxy: n,
        _stack: new Set(),
        _descriptors: Mn(e, s),
        setContext: t => An(e, t, n, s),
        override: i => An(e.override(i), t, n, s)
      };
      return new Proxy(i, {
        deleteProperty: (t, n) => (delete t[n], delete e[n], true),
        get: (e, t, n) => Dn(e, t, () => function (e, t, n) {
          const {
            _proxy: s,
            _context: i,
            _subProxy: a,
            _descriptors: o
          } = e;
          let r = s[t];
          if ("function" == typeof r && o.isScriptable(t)) {
            r = function (e, t, n, s) {
              const {
                _proxy: i,
                _context: a,
                _subProxy: o,
                _stack: r
              } = n;
              if (r.has(e)) {
                throw new Error("Recursion detected: " + Array.from(r).join("->") + "->" + e);
              }
              r.add(e);
              t = t(a, o || s);
              r.delete(e);
              if (null !== t && "[object Object]" === Object.prototype.toString.call(t) && "adapters" !== e && (null === Object.getPrototypeOf(t) || t.constructor === Object)) {
                t = Gn(i._scopes, i, e, t);
              }
              return t;
            }(t, r, e, n);
          }
          if (ne(r) && r.length) {
            r = function (e, t, n, s) {
              const {
                _proxy: i,
                _context: a,
                _subProxy: o,
                _descriptors: r
              } = n;
              if (undefined !== a.index && s(e)) {
                t = t[a.index % t.length];
              } else if (null !== t[0] && "[object Object]" === Object.prototype.toString.call(t[0])) {
                const n = t;
                const s = i._scopes.filter(e => e !== n);
                t = [];
                for (const l of n) {
                  const n = Gn(s, i, e, l);
                  t.push(An(n, a, o && o[e], r));
                }
              }
              return t;
            }(t, r, e, o.isIndexable);
          }
          if (null !== r && "[object Object]" === Object.prototype.toString.call(r) && "adapters" !== t && (null === Object.getPrototypeOf(r) || r.constructor === Object)) {
            r = An(r, i, a && a[t], o);
          }
          return r;
        }(e, t, n)),
        getOwnPropertyDescriptor: (t, n) => t._descriptors.allKeys ? Reflect.has(e, n) ? {
          enumerable: true,
          configurable: true
        } : undefined : Reflect.getOwnPropertyDescriptor(e, n),
        getPrototypeOf: () => Reflect.getPrototypeOf(e),
        has: (t, n) => Reflect.has(e, n),
        ownKeys: () => Reflect.ownKeys(e),
        set: (t, n, s) => (e[n] = s, delete t[n], true)
      });
    }
    function Mn(e, t = {
      scriptable: true,
      indexable: true
    }) {
      const {
        _scriptable: n = t.scriptable,
        _indexable: s = t.indexable,
        _allKeys: i = t.allKeys
      } = e;
      return {
        allKeys: i,
        scriptable: n,
        indexable: s,
        isScriptable: "function" == typeof n ? n : () => n,
        isIndexable: "function" == typeof s ? s : () => s
      };
    }
    const Rn = (e, t) => e ? e + (t.charAt(0).toUpperCase() + t.slice(1)) : t;
    const kn = (e, t) => null !== t && "[object Object]" === Object.prototype.toString.call(t) && "adapters" !== e && (null === Object.getPrototypeOf(t) || t.constructor === Object);
    function Dn(e, t, n) {
      if (Object.prototype.hasOwnProperty.call(e, t)) {
        return e[t];
      }
      const s = n();
      e[t] = s;
      return s;
    }
    function Fn(e, t, n) {
      return "function" == typeof e ? e(t, n) : e;
    }
    const Un = (e, t) => true === e ? t : "string" == typeof e ? ve(t, e) : undefined;
    function Bn(e, t, n, s, i) {
      for (const a of t) {
        const t = true === n ? a : "string" == typeof n ? ve(a, n) : undefined;
        if (t) {
          e.add(t);
          const a = Te(t._fallback) ? t._fallback(n, i) : t._fallback;
          if (undefined !== a && a !== n && a !== s) {
            return a;
          }
        } else if (false === t && undefined !== s && n !== s) {
          return null;
        }
      }
      return false;
    }
    function Gn(e, t, n, s) {
      const i = t._rootScopes;
      const a = Te(t._fallback) ? t._fallback(n, s) : t._fallback;
      const o = [...e, ...i];
      const r = new Set();
      r.add(s);
      let l = Vn(r, o, n, a || n, s);
      return null !== l && (!(undefined !== a) || a === n || (l = Vn(r, o, a, l, s), null !== l)) && Ln(Array.from(r), [""], i, a, () => function (e, t, n) {
        const s = e._getTarget();
        if (!(t in s)) {
          s[t] = {};
        }
        const i = s[t];
        if (ne(i) && null !== n && "[object Object]" === Object.prototype.toString.call(n)) {
          return n;
        }
        return i || {};
      }(t, n, s));
    }
    function Vn(e, t, n, s, i) {
      for (; n;) {
        n = Bn(e, t, n, s, i);
      }
      return n;
    }
    function Hn(e, t) {
      for (const n of t) {
        if (!n) {
          continue;
        }
        const t = n[e];
        if (undefined !== t) {
          return t;
        }
      }
    }
    function Kn(e) {
      let t = e._keys;
      if (!t) {
        t = e._keys = function (e) {
          const t = new Set();
          for (const n of e) for (const e of Object.keys(n).filter(e => !e.startsWith("_"))) t.add(e);
          return Array.from(t);
        }(e._scopes);
      }
      return t;
    }
    function Wn(e, t, n, s) {
      const {
        iScale: i
      } = e;
      const {
        key: a = "r"
      } = this._parsing;
      const o = new Array(s);
      let r;
      let c;
      let u;
      r = 0;
      for (s; r < s; ++r) {
        c = r + n;
        u = t[c];
        o[r] = {
          r: i.parse(ve(u, a), c)
        };
      }
      return o;
    }
    const zn = Number.EPSILON || 1e-14;
    const Yn = (e, t) => t < e.length && !e[t].skip && e[t];
    const $n = e => "x" === e ? "y" : "x";
    function qn(e, t, n, s) {
      const i = e.skip ? t : e;
      const o = n.skip ? t : n;
      const r = Math.sqrt(Math.pow(i.x - t.x, 2) + Math.pow(i.y - t.y, 2));
      const l = Math.sqrt(Math.pow(t.x - o.x, 2) + Math.pow(t.y - o.y, 2));
      let c = r / (r + l);
      let u = l / (r + l);
      c = isNaN(c) ? 0 : c;
      u = isNaN(u) ? 0 : u;
      const d = s * c;
      const m = s * u;
      return {
        previous: {
          x: t.x - d * (o.x - i.x),
          y: t.y - d * (o.y - i.y)
        },
        next: {
          x: t.x + m * (o.x - i.x),
          y: t.y + m * (o.y - i.y)
        }
      };
    }
    function Xn(e, t = "x") {
      const n = "x" === t ? "y" : "x";
      const s = e.length;
      const i = Array(s).fill(0);
      const a = Array(s);
      let o;
      let r;
      let l;
      let c = 0 < e.length && !e[t].skip && e[t];
      for (o = 0; o < s; ++o) {
        r = l;
        l = c;
        c = o + 1 < e.length && !e[t].skip && e[t];
        if (l) {
          if (c) {
            const e = c[t] - l[t];
            i[o] = 0 !== e ? (c[n] - l[n]) / e : 0;
          }
          a[o] = r ? c ? Le(i[o - 1]) !== Le(i[o]) ? 0 : (i[o - 1] + i[o]) / 2 : i[o - 1] : i[o];
        }
      }
      !function (e, t, n) {
        const s = e.length;
        let i;
        let a;
        let o;
        let r;
        let l;
        let c = 0 < e.length && !e[t].skip && e[t];
        for (let u = 0; u < s - 1; ++u) {
          l = c;
          c = u + 1 < e.length && !e[t].skip && e[t];
          if (l && c) {
            if (Math.abs(t[u] - 0) < zn) {
              n[u] = n[u + 1] = 0;
            } else {
              i = n[u] / t[u];
              a = n[u + 1] / t[u];
              r = Math.pow(i, 2) + Math.pow(a, 2);
              if (!(r <= 9)) {
                o = 3 / Math.sqrt(r);
                n[u] = i * o * t[u];
                n[u + 1] = a * o * t[u];
              }
            }
          }
        }
      }(e, i, a);
      (function (e, t, n = "x") {
        const s = "x" === n ? "y" : "x";
        const i = e.length;
        let a;
        let o;
        let r;
        let l = 0 < e.length && !e[t].skip && e[t];
        for (let c = 0; c < i; ++c) {
          o = r;
          r = l;
          l = c + 1 < e.length && !e[t].skip && e[t];
          if (!r) {
            continue;
          }
          const i = r[n];
          const u = r[s];
          if (o) {
            a = (i - o[n]) / 3;
            r[`cp1${n}`] = i - a;
            r[`cp1${s}`] = u - a * t[c];
          }
          if (l) {
            a = (l[n] - i) / 3;
            r[`cp2${n}`] = i + a;
            r[`cp2${s}`] = u + a * t[c];
          }
        }
      })(e, a, t);
    }
    function Qn(e, t, n) {
      return Math.max(Math.min(e, n), t);
    }
    function Zn(e, t, n, s, i) {
      let a;
      let o;
      let r;
      let l;
      if (t.spanGaps) {
        e = e.filter(e => !e.skip);
      }
      if ("monotone" === t.cubicInterpolationMode) {
        Xn(e, i);
      } else {
        let n = s ? e[e.length - 1] : e[0];
        a = 0;
        for (o = e.length; a < o; ++a) {
          r = e[a];
          l = qn(n, r, e[Math.min(a + 1, o - (s ? 0 : 1)) % o], t.tension);
          r.cp1x = l.previous.x;
          r.cp1y = l.previous.y;
          r.cp2x = l.next.x;
          r.cp2y = l.next.y;
          n = r;
        }
      }
      if (t.capBezierPoints) {
        (function (e, t) {
          let n;
          let s;
          let i;
          let a;
          let o;
          let r = mn(e[0], t);
          n = 0;
          for (s = e.length; n < s; ++n) {
            o = a;
            a = r;
            r = n < s - 1 && mn(e[n + 1], t);
            if (a) {
              i = e[n];
              if (o) {
                i.cp1x = Math.max(Math.min(i.cp1x, t.right), t.left);
                i.cp1y = Math.max(Math.min(i.cp1y, t.bottom), t.top);
              }
              if (r) {
                i.cp2x = Math.max(Math.min(i.cp2x, t.right), t.left);
                i.cp2y = Math.max(Math.min(i.cp2y, t.bottom), t.top);
              }
            }
          }
        })(e, n);
      }
    }
    function Jn() {
      return "undefined" != typeof window && "undefined" != typeof document;
    }
    function es(e) {
      let t = e.parentNode;
      if (t && "[object ShadowRoot]" === t.toString()) {
        t = t.host;
      }
      return t;
    }
    function ts(e, t, n) {
      let s;
      if ("string" == typeof e) {
        s = parseInt(e, 10);
        if (-1 !== e.indexOf("%")) {
          s = s / 100 * t.parentNode[n];
        }
      } else {
        s = e;
      }
      return s;
    }
    const ns = e => e.ownerDocument.defaultView.getComputedStyle(e, null);
    const ss = ["top", "right", "bottom", "left"];
    function is(e, t, n) {
      const s = {};
      n = n ? "-" + n : "";
      for (let i = 0; i < 4; i++) {
        const a = ss[i];
        s[a] = parseFloat(e[t + "-" + a + n]) || 0;
      }
      s.width = s.left + s.right;
      s.height = s.top + s.bottom;
      return s;
    }
    const as = (e, t, n) => (e > 0 || t > 0) && (!n || !n.shadowRoot);
    function os(e, t) {
      if ("native" in e) {
        return e;
      }
      const {
        canvas: n,
        currentDevicePixelRatio: s
      } = t;
      const i = n.ownerDocument.defaultView.getComputedStyle(n, null);
      const a = "border-box" === i.boxSizing;
      const o = is(i, "padding");
      const r = is(i, "border", "width");
      const {
        x: l,
        y: c,
        box: u
      } = function (e, t) {
        const n = e.touches;
        const s = n && n.length ? n[0] : e;
        const {
          offsetX: i,
          offsetY: a
        } = s;
        let o;
        let r;
        let l = false;
        if ((i > 0 || a > 0) && (!e.target || !e.target.shadowRoot)) {
          o = i;
          r = a;
        } else {
          const e = t.getBoundingClientRect();
          o = s.clientX - e.left;
          r = s.clientY - e.top;
          l = true;
        }
        return {
          x: o,
          y: r,
          box: l
        };
      }(e, n);
      const d = o.left + (u && r.left);
      const m = o.top + (u && r.top);
      let {
        width: h,
        height: g
      } = t;
      if (a) {
        h -= o.width + r.width;
        g -= o.height + r.height;
      }
      return {
        x: Math.round((l - d) / h * n.width / s),
        y: Math.round((c - m) / g * n.height / s)
      };
    }
    const rs = e => Math.round(10 * e) / 10;
    function ls(e, t, n, s) {
      const i = e.ownerDocument.defaultView.getComputedStyle(e, null);
      const a = is(i, "margin");
      const o = ts(i.maxWidth, e, "clientWidth") || je;
      const r = ts(i.maxHeight, e, "clientHeight") || je;
      const l = function (e, t, n) {
        let s;
        let i;
        if (undefined === t || undefined === n) {
          const a = es(e);
          if (a) {
            const e = a.getBoundingClientRect();
            const o = a.ownerDocument.defaultView.getComputedStyle(a, null);
            const r = is(o, "border", "width");
            const l = is(o, "padding");
            t = e.width - l.width - r.width;
            n = e.height - l.height - r.height;
            s = ts(o.maxWidth, a, "clientWidth");
            i = ts(o.maxHeight, a, "clientHeight");
          } else {
            t = e.clientWidth;
            n = e.clientHeight;
          }
        }
        return {
          width: t,
          height: n,
          maxWidth: s || je,
          maxHeight: i || je
        };
      }(e, t, n);
      let {
        width: c,
        height: u
      } = l;
      if ("content-box" === i.boxSizing) {
        const e = is(i, "border", "width");
        const t = is(i, "padding");
        c -= t.width + e.width;
        u -= t.height + e.height;
      }
      c = Math.max(0, c - a.width);
      u = Math.max(0, s ? Math.floor(c / s) : u - a.height);
      c = Math.round(10 * Math.min(c, o, l.maxWidth)) / 10;
      u = Math.round(10 * Math.min(u, r, l.maxHeight)) / 10;
      if (c && !u) {
        u = Math.round(10 * (c / 2)) / 10;
      }
      if ((undefined !== t || undefined !== n) && s && l.height && u > l.height) {
        u = l.height;
        c = Math.round(10 * Math.floor(u * s)) / 10;
      }
      return {
        width: c,
        height: u
      };
    }
    function cs(e, t, n) {
      const s = t || 1;
      const i = Math.floor(e.height * s);
      const a = Math.floor(e.width * s);
      e.height = i / s;
      e.width = a / s;
      const o = e.canvas;
      if (o.style && (n || !o.style.height && !o.style.width)) {
        o.style.height = `${e.height}px`;
        o.style.width = `${e.width}px`;
      }
      return (e.currentDevicePixelRatio !== s || o.height !== i || o.width !== a) && (e.currentDevicePixelRatio = s, o.height = i, o.width = a, e.ctx.setTransform(s, 0, 0, s, 0, 0), true);
    }
    const us = function () {
      let e = false;
      try {
        const t = {
          get passive() {
            e = true;
            return false;
          }
        };
        window.addEventListener("test", null, t);
        window.removeEventListener("test", null, t);
      } catch (e) {}
      return e;
    }();
    function ds(e, t) {
      const n = function (e, t) {
        return e.ownerDocument.defaultView.getComputedStyle(e, null).getPropertyValue(t);
      }(e, t);
      const s = n && n.match(/^(\d+)(\.\d+)?px$/);
      return s ? +s[1] : undefined;
    }
    function ms(e, t, n, s) {
      return {
        x: e.x + n * (t.x - e.x),
        y: e.y + n * (t.y - e.y)
      };
    }
    function hs(e, t, n, s) {
      return {
        x: e.x + n * (t.x - e.x),
        y: "middle" === s ? n < .5 ? e.y : t.y : "after" === s ? n < 1 ? e.y : t.y : n > 0 ? t.y : e.y
      };
    }
    function gs(e, t, n, s) {
      const i = {
        x: e.cp2x,
        y: e.cp2y
      };
      const a = {
        x: t.cp1x,
        y: t.cp1y
      };
      const o = {
        x: e.x + n * (i.x - e.x),
        y: e.y + n * (i.y - e.y)
      };
      const r = {
        x: i.x + n * (a.x - i.x),
        y: i.y + n * (a.y - i.y)
      };
      const l = {
        x: a.x + n * (t.x - a.x),
        y: a.y + n * (t.y - a.y)
      };
      const c = {
        x: o.x + n * (r.x - o.x),
        y: o.y + n * (r.y - o.y)
      };
      const u = {
        x: r.x + n * (l.x - r.x),
        y: r.y + n * (l.y - r.y)
      };
      return {
        x: c.x + n * (u.x - c.x),
        y: c.y + n * (u.y - c.y)
      };
    }
    function ps(e, t, n) {
      return e ? function (e, t) {
        return {
          x: n => e + e + t - n,
          setWidth(e) {
            t = e;
          },
          textAlign: e => "center" === e ? e : "right" === e ? "left" : "right",
          xPlus: (e, t) => e - t,
          leftForLtr: (e, t) => e - t
        };
      }(t, n) : {
        x: e => e,
        setWidth(e) {},
        textAlign: e => e,
        xPlus: (e, t) => e + t,
        leftForLtr: (e, t) => e
      };
    }
    function fs(e, t) {
      let n;
      let s;
      if (!("ltr" !== t && "rtl" !== t)) {
        n = e.canvas.style;
        s = [n.getPropertyValue("direction"), n.getPropertyPriority("direction")];
        n.setProperty("direction", t, "important");
        e.prevTextDirection = s;
      }
    }
    function xs(e, t) {
      if (undefined !== t) {
        delete e.prevTextDirection;
        e.canvas.style.setProperty("direction", t[0], t[1]);
      }
    }
    function vs(e) {
      return "angle" === e ? {
        between: Ke,
        compare: Ve,
        normalize: He
      } : {
        between: ze,
        compare: (e, t) => e - t,
        normalize: e => e
      };
    }
    function _s({
      start: e,
      end: t,
      count: n,
      loop: s,
      style: i
    }) {
      return {
        start: e % n,
        end: t % n,
        loop: s && (t - e + 1) % n == 0,
        style: i
      };
    }
    function bs(e, t, n) {
      if (!n) {
        return [e];
      }
      const {
        property: s,
        start: i,
        end: a
      } = n;
      const o = t.length;
      const {
        compare: r,
        between: l,
        normalize: c
      } = vs(s);
      const {
        start: u,
        end: d,
        loop: m,
        style: h
      } = function (e, t, n) {
        const {
          property: s,
          start: i,
          end: a
        } = n;
        const {
          between: o,
          normalize: r
        } = vs(s);
        const l = t.length;
        let c;
        let u;
        let {
          start: d,
          end: m,
          loop: h
        } = e;
        if (h) {
          d += l;
          m += l;
          c = 0;
          for (u = l; c < u && o(r(t[d % l][s]), i, a); ++c) {
            d--;
            m--;
          }
          d %= l;
          m %= l;
        }
        if (m < d) {
          m += l;
        }
        return {
          start: d,
          end: m,
          loop: h,
          style: e.style
        };
      }(e, t, n);
      const g = [];
      let p;
      let f;
      let x;
      let v = false;
      let _ = null;
      const b = () => v || l(i, x, p) && 0 !== r(i, x);
      const T = () => !v || 0 === r(a, p) || l(a, x, p);
      let e = u;
      for (let n = u; e <= d; ++e) {
        f = t[e % o];
        if (!f.skip) {
          p = c(f[s]);
          if (p !== x) {
            v = l(p, i, a);
            if (null === _ && (v || l(i, x, p) && 0 !== r(i, x))) {
              _ = 0 === r(p, i) ? e : n;
            }
            if (null !== _ && (!v || 0 === r(a, p) || l(a, x, p))) {
              g.push(_s({
                start: _,
                end: e,
                loop: m,
                count: o,
                style: h
              }));
              _ = null;
            }
            n = e;
            x = p;
          }
        }
      }
      if (null !== _) {
        g.push(_s({
          start: _,
          end: d,
          loop: m,
          count: o,
          style: h
        }));
      }
      return g;
    }
    function Ts(e, t) {
      const n = [];
      const s = e.segments;
      for (let i = 0; i < s.length; i++) {
        const a = bs(s[i], e.points, t);
        if (a.length) {
          n.push(...a);
        }
      }
      return n;
    }
    function Es(e, t, n, s) {
      return s && s.setContext && n ? function (e, t, n, s) {
        const i = e._chart.getContext();
        const a = {
          backgroundColor: e.options.backgroundColor,
          borderCapStyle: e.options.borderCapStyle,
          borderDash: e.options.borderDash,
          borderDashOffset: e.options.borderDashOffset,
          borderJoinStyle: e.options.borderJoinStyle,
          borderWidth: e.options.borderWidth,
          borderColor: e.options.borderColor
        };
        const {
          _datasetIndex: o,
          options: {
            spanGaps: r
          }
        } = e;
        const l = n.length;
        const c = [];
        let u = a;
        let d = t[0].start;
        let m = d;
        function h(e, t, s, i) {
          const a = r ? -1 : 1;
          if (e !== t) {
            for (e += l; n[e % l].skip;) {
              e -= a;
            }
            for (; n[t % l].skip;) {
              t += a;
            }
            if (e % l != t % l) {
              c.push({
                start: e % l,
                end: t % l,
                loop: s,
                style: i
              });
              u = i;
              d = t % l;
            }
          }
        }
        for (const e of t) {
          d = r ? d : e.start;
          let t;
          let a = n[d % l];
          for (m = d + 1; m <= e.end; m++) {
            const r = n[m % l];
            t = {
              backgroundColor: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).backgroundColor,
              borderCapStyle: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).borderCapStyle,
              borderDash: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).borderDash,
              borderDashOffset: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).borderDashOffset,
              borderJoinStyle: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).borderJoinStyle,
              borderWidth: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).borderWidth,
              borderColor: s.setContext(Object.assign(Object.create(i), {
                type: "segment",
                p0: a,
                p1: r,
                p0DataIndex: (m - 1) % l,
                p1DataIndex: m % l,
                datasetIndex: o
              })).borderColor
            };
            if (u && JSON.stringify(t) !== JSON.stringify(u)) {
              h(d, m - 1, e.loop, u);
            }
            a = r;
            u = t;
          }
          if (d < m - 1) {
            h(d, m - 1, e.loop, u);
          }
        }
        return c;
      }(e, t, n, s) : t;
    }
    function Is(e) {
      return {
        backgroundColor: e.backgroundColor,
        borderCapStyle: e.borderCapStyle,
        borderDash: e.borderDash,
        borderDashOffset: e.borderDashOffset,
        borderJoinStyle: e.borderJoinStyle,
        borderWidth: e.borderWidth,
        borderColor: e.borderColor
      };
    }
    function ys(e, t) {
      return t && JSON.stringify(e) !== JSON.stringify(t);
    }
    class Ss {
      constructor() {
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
      }
      _notify(e, t, n, s) {
        const i = t.listeners[s];
        const a = t.duration;
        i.forEach(s => s({
          chart: e,
          initial: t.initial,
          numSteps: a,
          currentStep: Math.min(n - t.start, a)
        }));
      }
      _refresh() {
        if (!this._request) {
          this._running = true;
          this._request = Je.call(window, () => {
            this._update();
            this._request = null;
            if (this._running) {
              this._refresh();
            }
          });
        }
      }
      _update(e = Date.now()) {
        let t = 0;
        this._charts.forEach((n, s) => {
          if (!n.running || !n.items.length) {
            return;
          }
          const i = n.items;
          let a;
          let o = i.length - 1;
          let r = false;
          for (; o >= 0; --o) {
            a = i[o];
            if (a._active) {
              if (a._total > n.duration) {
                n.duration = a._total;
              }
              a.tick(e);
              r = true;
            } else {
              i[o] = i[i.length - 1];
              i.pop();
            }
          }
          if (r) {
            s.draw();
            this._notify(s, n, e, "progress");
          }
          if (!i.length) {
            n.running = false;
            this._notify(s, n, e, "complete");
            n.initial = false;
          }
          t += i.length;
        });
        this._lastDate = e;
        if (0 === t) {
          this._running = false;
        }
      }
      _getAnims(e) {
        const t = this._charts;
        let n = t.get(e);
        if (!n) {
          n = {
            running: false,
            initial: true,
            items: [],
            listeners: {
              complete: [],
              progress: []
            }
          };
          t.set(e, n);
        }
        return n;
      }
      listen(e, t, n) {
        this._getAnims(e).listeners[t].push(n);
      }
      add(e, t) {
        if (t && t.length) {
          this._getAnims(e).items.push(...t);
        }
      }
      has(e) {
        return this._getAnims(e).items.length > 0;
      }
      start(e) {
        const t = this._charts.get(e);
        if (t) {
          t.running = true;
          t.start = Date.now();
          t.duration = t.items.reduce((e, t) => Math.max(e, t._duration), 0);
          this._refresh();
        }
      }
      running(e) {
        if (!this._running) {
          return false;
        }
        const t = this._charts.get(e);
        return !!(t && t.running && t.items.length);
      }
      stop(e) {
        const t = this._charts.get(e);
        if (!t || !t.items.length) {
          return;
        }
        const n = t.items;
        let s = n.length - 1;
        for (; s >= 0; --s) {
          n[s].cancel();
        }
        t.items = [];
        this._notify(e, t, Date.now(), "complete");
      }
      remove(e) {
        return this._charts.delete(e);
      }
    }
    var js = new Ss();
    const Ns = {
      boolean: (e, t, n) => n > .5 ? t : e,
      color(e, t, n) {
        const s = Kt(e || "transparent") ? e || "transparent" : Ht(e || "transparent");
        const i = s.valid && (Kt(t || "transparent") ? t || "transparent" : Ht(t || "transparent"));
        return i && i.valid ? i.mix(s, n).hexString() : t;
      },
      number: (e, t, n) => e + (t - e) * n
    };
    class ws {
      constructor(e, t, n, s) {
        const i = t[n];
        s = On([e.to, s, i, e.from]);
        const a = On([e.from, i, s]);
        this._active = true;
        this._fn = e.fn || Ns[e.type || typeof a];
        this._easing = lt[e.easing] || lt.linear;
        this._start = Math.floor(Date.now() + (e.delay || 0));
        this._duration = this._total = Math.floor(e.duration);
        this._loop = !!e.loop;
        this._target = t;
        this._prop = n;
        this._from = a;
        this._to = s;
        this._promises = undefined;
      }
      active() {
        return this._active;
      }
      update(e, t, n) {
        if (this._active) {
          this._notify(false);
          const s = this._target[this._prop];
          const i = n - this._start;
          const a = this._duration - i;
          this._start = n;
          this._duration = Math.floor(Math.max(a, e.duration));
          this._total += i;
          this._loop = !!e.loop;
          this._to = On([e.to, t, s, e.from]);
          this._from = On([e.from, s, t]);
        }
      }
      cancel() {
        if (this._active) {
          this.tick(Date.now());
          this._active = false;
          this._notify(false);
        }
      }
      tick(e) {
        const t = e - this._start;
        const n = this._duration;
        const s = this._prop;
        const i = this._from;
        const a = this._loop;
        const o = this._to;
        let r;
        this._active = i !== o && (a || t < n);
        if (!this._active) {
          this._target[s] = o;
          return void this._notify(true);
        }
        if (t < 0) {
          this._target[s] = i;
        } else {
          r = t / n % 2;
          r = a && r > 1 ? 2 - r : r;
          r = this._easing(Math.min(1, Math.max(0, r)));
          this._target[s] = this._fn(i, o, r);
        }
      }
      wait() {
        const e = this._promises || (this._promises = []);
        return new Promise((t, n) => {
          e.push({
            res: t,
            rej: n
          });
        });
      }
      _notify(e) {
        const t = e ? "res" : "rej";
        const n = this._promises || [];
        for (let e = 0; e < n.length; e++) {
          n[e][t]();
        }
      }
    }
    class Os {
      constructor(e, t) {
        this._chart = e;
        this._properties = new Map();
        this.configure(t);
      }
      configure(e) {
        if (!(null !== e && "[object Object]" === Object.prototype.toString.call(e))) {
          return;
        }
        const t = Object.keys(an.animation);
        const n = this._properties;
        Object.getOwnPropertyNames(e).forEach(s => {
          const i = e[s];
          if (!(null !== i && "[object Object]" === Object.prototype.toString.call(i))) {
            return;
          }
          const a = {};
          for (const e of t) a[e] = i[e];
          (ne(i.properties) && i.properties || [s]).forEach(e => {
            if (!(e !== s && n.has(e))) {
              n.set(e, a);
            }
          });
        });
      }
      _animateOptions(e, t) {
        const n = t.options;
        const s = function (e, t) {
          if (!t) {
            return;
          }
          let n = e.options;
          if (!n) {
            return void (e.options = t);
          }
          if (n.$shared) {
            e.options = n = Object.assign({}, n, {
              $shared: false,
              $animations: {}
            });
          }
          return n;
        }(e, n);
        if (!s) {
          return [];
        }
        const i = this._createAnimations(s, n);
        if (n.$shared) {
          (function (e, t) {
            const n = [];
            const s = Object.keys(t);
            for (let t = 0; t < s.length; t++) {
              const i = e[s[t]];
              if (i && i.active()) {
                n.push(i.wait());
              }
            }
            return Promise.all(n);
          })(e.options.$animations, n).then(() => {
            e.options = n;
          }, () => {});
        }
        return i;
      }
      _createAnimations(e, t) {
        const n = this._properties;
        const s = [];
        const i = e.$animations || (e.$animations = {});
        const a = Object.keys(t);
        const o = Date.now();
        let r;
        for (r = a.length - 1; r >= 0; --r) {
          const l = a[r];
          if ("$" === l.charAt(0)) {
            continue;
          }
          if ("options" === l) {
            s.push(...this._animateOptions(e, t));
            continue;
          }
          const c = t[l];
          let u = i[l];
          const d = n.get(l);
          if (u) {
            if (d && u.active()) {
              u.update(d, c, o);
              continue;
            }
            u.cancel();
          }
          if (d && d.duration) {
            i[l] = u = new ws(d, e, l, c);
            s.push(u);
          } else {
            e[l] = c;
          }
        }
        return s;
      }
      update(e, t) {
        if (0 === this._properties.size) {
          return void Object.assign(e, t);
        }
        const n = this._createAnimations(e, t);
        return n.length ? (js.add(this._chart, n), true) : undefined;
      }
    }
    function Ps(e, t) {
      const n = e && e.options || {};
      const s = n.reverse;
      const i = undefined === n.min ? t : 0;
      const a = undefined === n.max ? t : 0;
      return {
        start: s ? a : i,
        end: s ? i : a
      };
    }
    function Ls(e, t) {
      const n = [];
      const s = e._getSortedDatasetMetas(t);
      let i;
      let a;
      i = 0;
      for (a = s.length; i < a; ++i) {
        n.push(s[i].index);
      }
      return n;
    }
    function As(e, t, n, s = {}) {
      const i = e.keys;
      const a = "single" === s.mode;
      let o;
      let r;
      let l;
      let c;
      if (null !== t) {
        o = 0;
        for (r = i.length; o < r; ++o) {
          l = +i[o];
          if (l === n) {
            if (s.all) {
              continue;
            }
            break;
          }
          c = e.values[l];
          if (("number" == typeof c || c instanceof Number) && isFinite(+c) && (a || 0 === t || Le(t) === Le(c))) {
            t += c;
          }
        }
        return t;
      }
    }
    function Ms(e, t) {
      const n = e && e.options.stacked;
      return n || undefined === n && undefined !== t.stack;
    }
    function Rs(e, t, n) {
      const s = e[t] || (e[t] = {});
      return s[n] || (s[n] = {});
    }
    function ks(e, t, n, s) {
      for (const i of t.getMatchingVisibleMetas(s).reverse()) {
        const t = e[i.index];
        if (n && t > 0 || !n && t < 0) {
          return i.index;
        }
      }
      return null;
    }
    function Ds(e, t) {
      const {
        chart: n,
        _cachedMeta: s
      } = e;
      const i = n._stacks || (n._stacks = {});
      const {
        iScale: a,
        vScale: o,
        index: r
      } = s;
      const l = a.axis;
      const c = o.axis;
      const u = function (e, t, n) {
        return `${e.id}.${t.id}.${n.stack || n.type}`;
      }(a, o, s);
      const d = t.length;
      let m;
      for (let e = 0; e < d; ++e) {
        const n = t[e];
        const {
          [l]: a,
          [c]: d
        } = n;
        m = (n._stacks || (n._stacks = {}))[c] = Rs(i, u, a);
        m[r] = d;
        m._top = ks(m, o, true, s.type);
        m._bottom = ks(m, o, false, s.type);
      }
    }
    function Fs(e, t) {
      const n = e.scales;
      return Object.keys(n).filter(e => n[e].axis === t).shift();
    }
    function Us(e, t) {
      const n = e.controller.index;
      const s = e.vScale && e.vScale.axis;
      if (s) {
        t = t || e._parsed;
        for (const e of t) {
          const t = e._stacks;
          if (!t || undefined === t[s] || undefined === t[s][n]) {
            return;
          }
          delete t[s][n];
        }
      }
    }
    const Bs = e => "reset" === e || "none" === e;
    const Gs = (e, t) => t ? e : Object.assign({}, e);
    class Vs {
      static defaults = {};
      static datasetElementType = null;
      static dataElementType = null;
      constructor(e, t) {
        this.chart = e;
        this._ctx = e.ctx;
        this.index = t;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.datasetElementType = new.target.datasetElementType;
        this.dataElementType = new.target.dataElementType;
        this.initialize();
      }
      initialize() {
        const e = this._cachedMeta;
        this.configure();
        this.linkScales();
        e._stacked = Ms(e.vScale, e);
        this.addElements();
        if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
          console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
        }
      }
      updateIndex(e) {
        if (this.index !== e) {
          Us(this._cachedMeta);
        }
        this.index = e;
      }
      linkScales() {
        const e = this.chart;
        const t = this._cachedMeta;
        const n = this.getDataset();
        const s = (e, t, n, s) => "x" === e ? t : "r" === e ? s : n;
        const i = t.xAxisID = undefined === n.xAxisID ? Fs(e, "x") : n.xAxisID;
        const a = t.yAxisID = undefined === n.yAxisID ? Fs(e, "y") : n.yAxisID;
        const o = t.rAxisID = undefined === n.rAxisID ? Fs(e, "r") : n.rAxisID;
        const r = t.indexAxis;
        const l = t.iAxisID = "x" === r ? i : "r" === r ? o : a;
        const c = t.vAxisID = "x" === r ? a : "r" === r ? o : i;
        t.xScale = this.getScaleForId(i);
        t.yScale = this.getScaleForId(a);
        t.rScale = this.getScaleForId(o);
        t.iScale = this.getScaleForId(l);
        t.vScale = this.getScaleForId(c);
      }
      getDataset() {
        return this.chart.data.datasets[this.index];
      }
      getMeta() {
        return this.chart.getDatasetMeta(this.index);
      }
      getScaleForId(e) {
        return this.chart.scales[e];
      }
      _getOtherScale(e) {
        const t = this._cachedMeta;
        return e === t.iScale ? t.vScale : t.iScale;
      }
      reset() {
        this._update("reset");
      }
      _destroy() {
        const e = this._cachedMeta;
        if (this._data) {
          Qe(this._data, this);
        }
        if (e._stacked) {
          Us(e);
        }
      }
      _dataCheck() {
        const e = this.getDataset();
        const t = e.data || (e.data = []);
        const n = this._data;
        if (null !== t && "[object Object]" === Object.prototype.toString.call(t)) {
          this._data = function (e) {
            const t = Object.keys(e);
            const n = new Array(t.length);
            let s;
            let i;
            let a;
            s = 0;
            for (i = t.length; s < i; ++s) {
              a = t[s];
              n[s] = {
                x: a,
                y: e[a]
              };
            }
            return n;
          }(t);
        } else if (n !== t) {
          if (n) {
            Qe(n, this);
            const e = this._cachedMeta;
            Us(e);
            e._parsed = [];
          }
          if (t && Object.isExtensible(t)) {
            (function (e, t) {
              if (e._chartjs) {
                e._chartjs.listeners.push(t);
              } else {
                Object.defineProperty(e, "_chartjs", {
                  configurable: true,
                  enumerable: false,
                  value: {
                    listeners: [t]
                  }
                });
                Xe.forEach(t => {
                  const n = "_onData" + (t.charAt(0).toUpperCase() + t.slice(1));
                  const s = e[t];
                  Object.defineProperty(e, t, {
                    configurable: true,
                    enumerable: false,
                    value(...t) {
                      const i = s.apply(this, t);
                      e._chartjs.listeners.forEach(e => {
                        if ("function" == typeof e[n]) {
                          e[n](...t);
                        }
                      });
                      return i;
                    }
                  });
                });
              }
            })(t, this);
          }
          this._syncList = [];
          this._data = t;
        }
      }
      addElements() {
        const e = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) {
          e.dataset = new this.datasetElementType();
        }
      }
      buildOrUpdateElements(e) {
        const t = this._cachedMeta;
        const n = this.getDataset();
        let s = false;
        this._dataCheck();
        const i = t._stacked;
        t._stacked = Ms(t.vScale, t);
        if (t.stack !== n.stack) {
          s = true;
          Us(t);
          t.stack = n.stack;
        }
        this._resyncElements(e);
        if (s || i !== t._stacked) {
          Ds(this, t._parsed);
        }
      }
      configure() {
        const e = this.chart.config;
        const t = e.datasetScopeKeys(this._type);
        const n = e.getOptionScopes(this.getDataset(), t, true);
        this.options = e.createResolver(n, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
      }
      parse(e, t) {
        const {
          _cachedMeta: n,
          _data: s
        } = this;
        const {
          iScale: i,
          _stacked: a
        } = n;
        const o = i.axis;
        let r;
        let l;
        let c;
        let u = 0 === e && t === s.length || n._sorted;
        let d = e > 0 && n._parsed[e - 1];
        if (false === this._parsing) {
          n._parsed = s;
          n._sorted = true;
          c = s;
        } else {
          c = ne(s[e]) ? this.parseArrayData(n, s, e, t) : null !== s[e] && "[object Object]" === Object.prototype.toString.call(s[e]) ? this.parseObjectData(n, s, e, t) : this.parsePrimitiveData(n, s, e, t);
          const i = () => null === l[o] || d && l[o] < d[o];
          for (r = 0; r < t; ++r) {
            n._parsed[r + e] = l = c[r];
            if (u) {
              if (null === l[o] || d && l[o] < d[o]) {
                u = false;
              }
              d = l;
            }
          }
          n._sorted = u;
        }
        if (a) {
          Ds(this, c);
        }
      }
      parsePrimitiveData(e, t, n, s) {
        const {
          iScale: i,
          vScale: a
        } = e;
        const o = i.axis;
        const r = a.axis;
        const l = i.getLabels();
        const c = i === a;
        const u = new Array(s);
        let d;
        let h;
        d = 0;
        for (s; d < s; ++d) {
          h = d + n;
          u[d] = {
            [o]: c || i.parse(l[h], h),
            [r]: a.parse(t[h], h)
          };
        }
        return u;
      }
      parseArrayData(e, t, n, s) {
        const {
          xScale: i,
          yScale: a
        } = e;
        const o = new Array(s);
        let r;
        let c;
        let u;
        r = 0;
        for (s; r < s; ++r) {
          c = r + n;
          u = t[c];
          o[r] = {
            x: i.parse(u[0], c),
            y: a.parse(u[1], c)
          };
        }
        return o;
      }
      parseObjectData(e, t, n, s) {
        const {
          xScale: i,
          yScale: a
        } = e;
        const {
          xAxisKey: o = "x",
          yAxisKey: r = "y"
        } = this._parsing;
        const l = new Array(s);
        let c;
        let d;
        let m;
        c = 0;
        for (s; c < s; ++c) {
          d = c + n;
          m = t[d];
          l[c] = {
            x: i.parse(ve(m, o), d),
            y: a.parse(ve(m, r), d)
          };
        }
        return l;
      }
      getParsed(e) {
        return this._cachedMeta._parsed[e];
      }
      getDataElement(e) {
        return this._cachedMeta.data[e];
      }
      applyStack(e, t, n) {
        const s = this.chart;
        const i = this._cachedMeta;
        const a = t[e.axis];
        return As({
          keys: Ls(s, true),
          values: t._stacks[e.axis]
        }, a, i.index, {
          mode: n
        });
      }
      updateRangeFromParsed(e, t, n, s) {
        const i = n[t.axis];
        let a = null === i ? NaN : i;
        const o = s && n._stacks[t.axis];
        if (s && o) {
          s.values = o;
          a = As(s, i, this._cachedMeta.index);
        }
        e.min = Math.min(e.min, a);
        e.max = Math.max(e.max, a);
      }
      getMinMax(e, t) {
        const n = this._cachedMeta;
        const s = n._parsed;
        const i = n._sorted && e === n.iScale;
        const a = s.length;
        const o = this._getOtherScale(e);
        const r = ((e, t, n) => e && !t.hidden && t._stacked && {
          keys: Ls(n, true),
          values: null
        })(t, n, this.chart);
        const l = {
          min: Number.POSITIVE_INFINITY,
          max: Number.NEGATIVE_INFINITY
        };
        const {
          min: c,
          max: u
        } = function (e) {
          const {
            min: t,
            max: n,
            minDefined: s,
            maxDefined: i
          } = e.getUserBounds();
          return {
            min: s ? t : Number.NEGATIVE_INFINITY,
            max: i ? n : Number.POSITIVE_INFINITY
          };
        }(o);
        let d;
        let m;
        function h() {
          m = s[d];
          const t = m[o.axis];
          return !(("number" == typeof m[e.axis] || m[e.axis] instanceof Number) && isFinite(+m[e.axis])) || c > t || u < t;
        }
        for (d = 0; d < a && (h() || (this.updateRangeFromParsed(l, e, m, r), !i)); ++d) {
          ;
        }
        if (i) {
          for (d = a - 1; d >= 0; --d) {
            if (!h()) {
              this.updateRangeFromParsed(l, e, m, r);
              break;
            }
          }
        }
        return l;
      }
      getAllParsedValues(e) {
        const t = this._cachedMeta._parsed;
        const n = [];
        let s;
        let i;
        let a;
        s = 0;
        for (i = t.length; s < i; ++s) {
          a = t[s][e.axis];
          if (("number" == typeof a || a instanceof Number) && isFinite(+a)) {
            n.push(a);
          }
        }
        return n;
      }
      getMaxOverflow() {
        return false;
      }
      getLabelAndValue(e) {
        const t = this._cachedMeta;
        const n = t.iScale;
        const s = t.vScale;
        const i = this.getParsed(e);
        return {
          label: n ? "" + n.getLabelForValue(i[n.axis]) : "",
          value: s ? "" + s.getLabelForValue(i[s.axis]) : ""
        };
      }
      _update(e) {
        const t = this._cachedMeta;
        this.update(e || "default");
        t._clip = function (e) {
          let t;
          let n;
          let s;
          let i;
          if (null !== e && "[object Object]" === Object.prototype.toString.call(e)) {
            t = e.top;
            n = e.right;
            s = e.bottom;
            i = e.left;
          } else {
            t = n = s = i = e;
          }
          return {
            top: t,
            right: n,
            bottom: s,
            left: i,
            disabled: false === e
          };
        }(undefined === this.options.clip ? function (e, t, n) {
          if (false === n) {
            return false;
          }
          const s = Ps(e, n);
          const i = Ps(t, n);
          return {
            top: i.end,
            right: s.end,
            bottom: i.start,
            left: s.start
          };
        }(t.xScale, t.yScale, this.getMaxOverflow()) : this.options.clip);
      }
      update(e) {}
      draw() {
        const e = this._ctx;
        const t = this.chart;
        const n = this._cachedMeta;
        const s = n.data || [];
        const i = t.chartArea;
        const a = [];
        const o = this._drawStart || 0;
        const r = this._drawCount || s.length - o;
        const l = this.options.drawActiveElementsOnTop;
        let c;
        if (n.dataset) {
          n.dataset.draw(e, i, o, r);
        }
        for (c = o; c < o + r; ++c) {
          const t = s[c];
          if (!t.hidden) {
            if (t.active && l) {
              a.push(t);
            } else {
              t.draw(e, i);
            }
          }
        }
        for (c = 0; c < a.length; ++c) {
          a[c].draw(e, i);
        }
      }
      getStyle(e, t) {
        const n = t ? "active" : "default";
        return undefined === e && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(n) : this.resolveDataElementOptions(e || 0, n);
      }
      getContext(e, t, n) {
        const s = this.getDataset();
        let i;
        if (e >= 0 && e < this._cachedMeta.data.length) {
          const t = this._cachedMeta.data[e];
          i = t.$context || (t.$context = function (e, t, n) {
            return Object.assign(Object.create(e), {
              active: false,
              dataIndex: t,
              parsed: undefined,
              raw: undefined,
              element: n,
              index: t,
              mode: "default",
              type: "data"
            });
          }(this.getContext(), e, t));
          i.parsed = this.getParsed(e);
          i.raw = s.data[e];
          i.index = i.dataIndex = e;
        } else {
          i = this.$context || (this.$context = function (e, t) {
            return Object.assign(Object.create(e), {
              active: false,
              dataset: undefined,
              datasetIndex: t,
              index: t,
              mode: "default",
              type: "dataset"
            });
          }(this.chart.getContext(), this.index));
          i.dataset = s;
          i.index = i.datasetIndex = this.index;
        }
        i.active = !!t;
        i.mode = n;
        return i;
      }
      resolveDatasetElementOptions(e) {
        return this._resolveElementOptions(this.datasetElementType.id, e);
      }
      resolveDataElementOptions(e, t) {
        return this._resolveElementOptions(this.dataElementType.id, t, e);
      }
      _resolveElementOptions(e, t = "default", n) {
        const s = "active" === t;
        const i = this._cachedDataOpts;
        const a = e + "-" + t;
        const o = i[a];
        const r = this.enableOptionSharing && undefined !== n;
        if (o) {
          return r ? o : Object.assign({}, o);
        }
        const l = this.chart.config;
        const c = l.datasetElementScopeKeys(this._type, e);
        const u = s ? [`${e}Hover`, "hover", e, ""] : [e, ""];
        const d = l.getOptionScopes(this.getDataset(), c);
        const m = Object.keys(an.elements[e]);
        const h = l.resolveNamedOptions(d, m, () => this.getContext(n, s), u);
        if (h.$shared) {
          h.$shared = r;
          i[a] = Object.freeze(r ? h : Object.assign({}, h));
        }
        return h;
      }
      _resolveAnimations(e, t, n) {
        const s = this.chart;
        const i = this._cachedDataOpts;
        const o = i[`animation-${t}`];
        if (o) {
          return o;
        }
        let r;
        if (false !== s.options.animation) {
          const s = this.chart.config;
          const i = s.datasetAnimationScopeKeys(this._type, t);
          const a = s.getOptionScopes(this.getDataset(), i);
          r = s.createResolver(a, this.getContext(e, n, t));
        }
        const l = new Os(s, r && r.animations);
        if (r && r._cacheable) {
          i[`animation-${t}`] = Object.freeze(l);
        }
        return l;
      }
      getSharedOptions(e) {
        if (e.$shared) {
          return this._sharedOptions || (this._sharedOptions = Object.assign({}, e));
        }
      }
      includeOptions(e, t) {
        return !t || "reset" === e || "none" === e || this.chart._animationsDisabled;
      }
      _getSharedOptions(e, t) {
        const n = this.resolveDataElementOptions(e, t);
        const s = this._sharedOptions;
        const i = this.getSharedOptions(n);
        const a = this.includeOptions(t, i) || i !== s;
        this.updateSharedOptions(i, t, n);
        return {
          sharedOptions: i,
          includeOptions: a
        };
      }
      updateElement(e, t, n, s) {
        if ("reset" === s || "none" === s) {
          Object.assign(e, n);
        } else {
          this._resolveAnimations(t, s).update(e, n);
        }
      }
      updateSharedOptions(e, t, n) {
        if (e && !("reset" === t || "none" === t)) {
          this._resolveAnimations(undefined, t).update(e, n);
        }
      }
      _setStyle(e, t, n, s) {
        e.active = s;
        const i = this.getStyle(t, s);
        this._resolveAnimations(t, n, s).update(e, {
          options: !s && this.getSharedOptions(i) || i
        });
      }
      removeHoverStyle(e, t, n) {
        this._setStyle(e, n, "active", false);
      }
      setHoverStyle(e, t, n) {
        this._setStyle(e, n, "active", true);
      }
      _removeDatasetHoverStyle() {
        const e = this._cachedMeta.dataset;
        if (e) {
          this._setStyle(e, undefined, "active", false);
        }
      }
      _setDatasetHoverStyle() {
        const e = this._cachedMeta.dataset;
        if (e) {
          this._setStyle(e, undefined, "active", true);
        }
      }
      _resyncElements(e) {
        const t = this._data;
        const n = this._cachedMeta.data;
        for (const [e, t, n] of this._syncList) this[e](t, n);
        this._syncList = [];
        const s = n.length;
        const i = t.length;
        const a = Math.min(i, s);
        if (a) {
          this.parse(0, a);
        }
        if (i > s) {
          this._insertElements(s, i - s, e);
        } else if (i < s) {
          this._removeElements(i, s - i);
        }
      }
      _insertElements(e, t, n = true) {
        const s = this._cachedMeta;
        const i = s.data;
        const a = e + t;
        let o;
        const r = e => {
          e.length += t;
          for (o = e.length - 1; o >= a; o--) {
            e[o] = e[o - t];
          }
        };
        r(i);
        for (o = e; o < a; ++o) {
          i[o] = new this.dataElementType();
        }
        if (this._parsing) {
          r(s._parsed);
        }
        this.parse(e, t);
        if (n) {
          this.updateElements(i, e, t, "reset");
        }
      }
      updateElements(e, t, n, s) {}
      _removeElements(e, t) {
        const n = this._cachedMeta;
        if (this._parsing) {
          const s = n._parsed.splice(e, t);
          if (n._stacked) {
            Us(n, s);
          }
        }
        n.data.splice(e, t);
      }
      _sync(e) {
        if (this._parsing) {
          this._syncList.push(e);
        } else {
          const [t, n, s] = e;
          this[t](n, s);
        }
        this.chart._dataChanges.push([this.index, ...e]);
      }
      _onDataPush() {
        const e = arguments.length;
        this._sync(["_insertElements", this.getDataset().data.length - e, e]);
      }
      _onDataPop() {
        this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
      }
      _onDataShift() {
        this._sync(["_removeElements", 0, 1]);
      }
      _onDataSplice(e, t) {
        if (t) {
          this._sync(["_removeElements", e, t]);
        }
        const n = arguments.length - 2;
        if (n) {
          this._sync(["_insertElements", e, n]);
        }
      }
      _onDataUnshift() {
        this._sync(["_insertElements", 0, arguments.length]);
      }
    }
    function Hs(e) {
      const t = e.iScale;
      const n = function (e, t) {
        if (!e._cache.$bar) {
          const n = e.getMatchingVisibleMetas(t);
          let s = [];
          let t = 0;
          for (let i = n.length; t < i; t++) {
            s = s.concat(n[t].controller.getAllParsedValues(e));
          }
          e._cache.$bar = Ze(s.sort((e, t) => e - t));
        }
        return e._cache.$bar;
      }(t, e.type);
      let s;
      let i;
      let a;
      let o;
      let r = t._length;
      const l = () => {
        if (32767 !== a && -32768 !== a) {
          if (undefined !== o) {
            r = Math.min(r, Math.abs(a - o) || r);
          }
          o = a;
        }
      };
      s = 0;
      for (i = n.length; s < i; ++s) {
        a = t.getPixelForValue(n[s]);
        l();
      }
      o = undefined;
      s = 0;
      for (i = t.ticks.length; s < i; ++s) {
        a = t.getPixelForTick(s);
        l();
      }
      return r;
    }
    function Ks(e, t, n, s) {
      if (ne(e)) {
        (function (e, t, n, s) {
          const i = n.parse(e[0], s);
          const a = n.parse(e[1], s);
          const o = Math.min(i, a);
          const r = Math.max(i, a);
          let l = o;
          let c = r;
          if (Math.abs(o) > Math.abs(r)) {
            l = r;
            c = o;
          }
          t[n.axis] = c;
          t._custom = {
            barStart: l,
            barEnd: c,
            start: i,
            end: a,
            min: o,
            max: r
          };
        })(e, t, n, s);
      } else {
        t[n.axis] = n.parse(e, s);
      }
      return t;
    }
    function Ws(e, t, n, s) {
      const i = e.iScale;
      const a = e.vScale;
      const o = i.getLabels();
      const r = i === a;
      const l = [];
      let c;
      let u;
      let d;
      let m;
      c = n;
      for (u = n + s; c < u; ++c) {
        m = t[c];
        d = {};
        d[i.axis] = r || i.parse(o[c], c);
        l.push(Ks(m, d, a, c));
      }
      return l;
    }
    function zs(e) {
      return e && undefined !== e.barStart && undefined !== e.barEnd;
    }
    function Ys(e, t, n, s) {
      let i = t.borderSkipped;
      const a = {};
      if (!i) {
        return void (e.borderSkipped = a);
      }
      if (true === i) {
        return void (e.borderSkipped = {
          top: true,
          right: true,
          bottom: true,
          left: true
        });
      }
      const {
        start: o,
        end: r,
        reverse: l,
        top: c,
        bottom: u
      } = function (e) {
        let t;
        let n;
        let s;
        let i;
        let a;
        if (e.horizontal) {
          t = e.base > e.x;
          n = "left";
          s = "right";
        } else {
          t = e.base < e.y;
          n = "bottom";
          s = "top";
        }
        if (t) {
          i = "end";
          a = "start";
        } else {
          i = "start";
          a = "end";
        }
        return {
          start: n,
          end: s,
          reverse: t,
          top: i,
          bottom: a
        };
      }(e);
      if ("middle" === i && n) {
        e.enableBorderRadius = true;
        if ((n._top || 0) === s) {
          i = c;
        } else if ((n._bottom || 0) === s) {
          i = u;
        } else {
          a[$s(u, o, r, l)] = true;
          i = c;
        }
      }
      a[$s(i, o, r, l)] = true;
      e.borderSkipped = a;
    }
    function $s(e, t, n, s) {
      var i;
      var a;
      var o;
      if (s) {
        o = n;
        e = "start" === (e = (i = e) === (a = t) ? o : i === o ? a : i) ? n : "end" === (e = (i = e) === (a = t) ? o : i === o ? a : i) ? t : e = (i = e) === (a = t) ? o : i === o ? a : i;
      } else {
        e = "start" === e ? t : "end" === e ? n : e;
      }
      return e;
    }
    function qs(e, t, n) {
      return "start" === e ? t : "end" === e ? n : e;
    }
    function Xs(e, {
      inflateAmount: t
    }, n) {
      e.inflateAmount = "auto" === t ? 1 === n ? .33 : 0 : t;
    }
    class Qs extends Vs {
      static id = "bar";
      static defaults = {
        datasetElementType: false,
        dataElementType: "bar",
        categoryPercentage: .8,
        barPercentage: .9,
        grouped: true,
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "base", "width", "height"]
          }
        }
      };
      static overrides = {
        scales: {
          _index_: {
            type: "category",
            offset: true,
            grid: {
              offset: true
            }
          },
          _value_: {
            type: "linear",
            beginAtZero: true
          }
        }
      };
      parsePrimitiveData(e, t, n, s) {
        return Ws(e, t, n, s);
      }
      parseArrayData(e, t, n, s) {
        return Ws(e, t, n, s);
      }
      parseObjectData(e, t, n, s) {
        const {
          iScale: i,
          vScale: a
        } = e;
        const {
          xAxisKey: o = "x",
          yAxisKey: r = "y"
        } = this._parsing;
        const l = "x" === i.axis ? o : r;
        const c = "x" === a.axis ? o : r;
        const u = [];
        let d;
        let m;
        let h;
        let g;
        d = n;
        for (m = n + s; d < m; ++d) {
          g = t[d];
          h = {};
          h[i.axis] = i.parse(ve(g, l), d);
          u.push(Ks(ve(g, c), h, a, d));
        }
        return u;
      }
      updateRangeFromParsed(e, t, n, s) {
        super.updateRangeFromParsed(e, t, n, s);
        const i = n._custom;
        if (i && t === this._cachedMeta.vScale) {
          e.min = Math.min(e.min, i.min);
          e.max = Math.max(e.max, i.max);
        }
      }
      getMaxOverflow() {
        return 0;
      }
      getLabelAndValue(e) {
        const t = this._cachedMeta;
        const {
          iScale: n,
          vScale: s
        } = t;
        const i = this.getParsed(e);
        const a = i._custom;
        const o = a && undefined !== a.barStart && undefined !== a.barEnd ? "[" + a.start + ", " + a.end + "]" : "" + s.getLabelForValue(i[s.axis]);
        return {
          label: "" + n.getLabelForValue(i[n.axis]),
          value: o
        };
      }
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        this._cachedMeta.stack = this.getDataset().stack;
      }
      update(e) {
        const t = this._cachedMeta;
        this.updateElements(t.data, 0, t.data.length, e);
      }
      updateElements(e, t, n, s) {
        const i = "reset" === s;
        const {
          index: a,
          _cachedMeta: {
            vScale: o
          }
        } = this;
        const r = o.getBasePixel();
        const l = o.isHorizontal();
        const c = this._getRuler();
        const {
          sharedOptions: u,
          includeOptions: d
        } = this._getSharedOptions(t, s);
        for (let m = t; m < t + n; m++) {
          const t = this.getParsed(m);
          const n = i || null == t[o.axis] ? {
            base: r,
            head: r
          } : this._calculateBarValuePixels(m);
          const h = this._calculateBarIndexPixels(m, c);
          const g = (t._stacks || {})[o.axis];
          const p = {
            horizontal: l,
            base: n.base,
            enableBorderRadius: !g || t._custom && undefined !== t._custom.barStart && undefined !== t._custom.barEnd || a === g._top || a === g._bottom,
            x: l ? n.head : h.center,
            y: l ? h.center : n.head,
            height: l ? h.size : Math.abs(n.size),
            width: l ? Math.abs(n.size) : h.size
          };
          if (d) {
            p.options = u || this.resolveDataElementOptions(m, e[m].active ? "active" : s);
          }
          const f = p.options || e[m].options;
          Ys(p, f, g, a);
          Xs(p, f, c.ratio);
          this.updateElement(e[m], m, p, s);
        }
      }
      _getStacks(e, t) {
        const {
          iScale: n
        } = this._cachedMeta;
        const s = n.getMatchingVisibleMetas(this._type).filter(e => e.controller.options.grouped);
        const i = n.options.stacked;
        const a = [];
        const o = e => {
          const n = e.controller.getParsed(t);
          const s = n && n[e.vScale.axis];
          if (null == s || isNaN(s)) {
            return true;
          }
        };
        for (const n of s) if ((undefined === t || !o(n)) && ((false === i || -1 === a.indexOf(n.stack) || undefined === i && undefined === n.stack) && a.push(n.stack), n.index === e)) {
          break;
        }
        if (!a.length) {
          a.push(undefined);
        }
        return a;
      }
      _getStackCount(e) {
        return this._getStacks(undefined, e).length;
      }
      _getStackIndex(e, t, n) {
        const s = this._getStacks(e, n);
        const i = undefined !== t ? s.indexOf(t) : -1;
        return -1 === i ? s.length - 1 : i;
      }
      _getRuler() {
        const e = this.options;
        const t = this._cachedMeta;
        const n = t.iScale;
        const s = [];
        let i;
        let a;
        i = 0;
        for (a = t.data.length; i < a; ++i) {
          s.push(n.getPixelForValue(this.getParsed(i)[n.axis], i));
        }
        const o = e.barThickness;
        return {
          min: o || Hs(t),
          pixels: s,
          start: n._startPixel,
          end: n._endPixel,
          stackCount: this._getStackCount(),
          scale: n,
          grouped: e.grouped,
          ratio: o ? 1 : e.categoryPercentage * e.barPercentage
        };
      }
      _calculateBarValuePixels(e) {
        const {
          _cachedMeta: {
            vScale: t,
            _stacked: n
          },
          options: {
            base: s,
            minBarLength: i
          }
        } = this;
        const a = s || 0;
        const o = this.getParsed(e);
        const r = o._custom;
        const l = r && undefined !== r.barStart && undefined !== r.barEnd;
        let c;
        let u;
        let d = o[t.axis];
        let m = 0;
        let h = n ? this.applyStack(t, o, n) : d;
        if (h !== d) {
          m = h - d;
          h = d;
        }
        if (l) {
          d = r.barStart;
          h = r.barEnd - r.barStart;
          if (0 !== d && Le(d) !== Le(r.barEnd)) {
            m = 0;
          }
          m += d;
        }
        const g = null == s || l ? m : s;
        let p = t.getPixelForValue(g);
        c = this.chart.getDataVisibility(e) ? t.getPixelForValue(m + h) : p;
        u = c - p;
        if (Math.abs(u) < i) {
          u = function (e, t, n) {
            return 0 !== e ? Le(e) : (t.isHorizontal() ? 1 : -1) * (t.min >= n ? 1 : -1);
          }(u, t, a) * i;
          if (d === a) {
            p -= u / 2;
          }
          const e = t.getPixelForDecimal(0);
          const n = t.getPixelForDecimal(1);
          const s = Math.min(e, n);
          const o = Math.max(e, n);
          p = Math.max(Math.min(p, o), s);
          c = p + u;
        }
        if (p === t.getPixelForValue(a)) {
          const e = Le(u) * t.getLineWidthForValue(a) / 2;
          p += e;
          u -= e;
        }
        return {
          size: u,
          base: p,
          head: c,
          center: c + u / 2
        };
      }
      _calculateBarIndexPixels(e, t) {
        const n = t.scale;
        const s = this.options;
        const i = s.skipNull;
        const a = undefined === s.maxBarThickness ? Infinity : s.maxBarThickness;
        let o;
        let r;
        if (t.grouped) {
          const n = i ? this._getStackCount(e) : t.stackCount;
          const l = "flex" === s.barThickness ? function (e, t, n, s) {
            const i = t.pixels;
            const a = i[e];
            let o = e > 0 ? i[e - 1] : null;
            let r = e < i.length - 1 ? i[e + 1] : null;
            const l = n.categoryPercentage;
            if (null === o) {
              o = a - (null === r ? t.end - t.start : r - a);
            }
            if (null === r) {
              r = a + a - o;
            }
            const c = a - (a - Math.min(o, r)) / 2 * l;
            return {
              chunk: Math.abs(r - o) / 2 * l / s,
              ratio: n.barPercentage,
              start: c
            };
          }(e, t, s, n) : function (e, t, n, s) {
            const i = n.barThickness;
            let a;
            let o;
            if (null == i) {
              a = t.min * n.categoryPercentage;
              o = n.barPercentage;
            } else {
              a = i * s;
              o = 1;
            }
            return {
              chunk: a / s,
              ratio: o,
              start: t.pixels[e] - a / 2
            };
          }(e, t, s, n);
          const c = this._getStackIndex(this.index, this._cachedMeta.stack, i ? e : undefined);
          o = l.start + l.chunk * c + l.chunk / 2;
          r = Math.min(a, l.chunk * l.ratio);
        } else {
          o = n.getPixelForValue(this.getParsed(e)[n.axis], e);
          r = Math.min(a, t.min * t.ratio);
        }
        return {
          base: o - r / 2,
          head: o + r / 2,
          center: o,
          size: r
        };
      }
      draw() {
        const e = this._cachedMeta;
        const t = e.vScale;
        const n = e.data;
        const s = n.length;
        let i = 0;
        for (; i < s; ++i) {
          if (null !== this.getParsed(i)[t.axis]) {
            n[i].draw(this._ctx);
          }
        }
      }
    }
    class Zs extends Vs {
      static id = "bubble";
      static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "borderWidth", "radius"]
          }
        }
      };
      static overrides = {
        scales: {
          x: {
            type: "linear"
          },
          y: {
            type: "linear"
          }
        }
      };
      initialize() {
        this.enableOptionSharing = true;
        super.initialize();
      }
      parsePrimitiveData(e, t, n, s) {
        const i = super.parsePrimitiveData(e, t, n, s);
        for (let e = 0; e < i.length; e++) {
          i[e]._custom = this.resolveDataElementOptions(e + n).radius;
        }
        return i;
      }
      parseArrayData(e, t, n, s) {
        const i = super.parseArrayData(e, t, n, s);
        for (let e = 0; e < i.length; e++) {
          const s = t[n + e];
          i[e]._custom = undefined === s[2] ? this.resolveDataElementOptions(e + n).radius : s[2];
        }
        return i;
      }
      parseObjectData(e, t, n, s) {
        const i = super.parseObjectData(e, t, n, s);
        for (let e = 0; e < i.length; e++) {
          const s = t[n + e];
          i[e]._custom = undefined === (s && s.r && +s.r) ? this.resolveDataElementOptions(e + n).radius : s && s.r && +s.r;
        }
        return i;
      }
      getMaxOverflow() {
        const e = this._cachedMeta.data;
        let t = 0;
        for (let n = e.length - 1; n >= 0; --n) {
          t = Math.max(t, e[n].size(this.resolveDataElementOptions(n)) / 2);
        }
        return t > 0 && t;
      }
      getLabelAndValue(e) {
        const t = this._cachedMeta;
        const n = this.chart.data.labels || [];
        const {
          xScale: s,
          yScale: i
        } = t;
        const a = this.getParsed(e);
        const o = s.getLabelForValue(a.x);
        const r = i.getLabelForValue(a.y);
        const l = a._custom;
        return {
          label: n[e] || "",
          value: "(" + o + ", " + r + (l ? ", " + l : "") + ")"
        };
      }
      update(e) {
        const t = this._cachedMeta.data;
        this.updateElements(t, 0, t.length, e);
      }
      updateElements(e, t, n, s) {
        const i = "reset" === s;
        const {
          iScale: a,
          vScale: o
        } = this._cachedMeta;
        const {
          sharedOptions: r,
          includeOptions: l
        } = this._getSharedOptions(t, s);
        const c = a.axis;
        const u = o.axis;
        for (let d = t; d < t + n; d++) {
          const t = e[d];
          const n = !i && this.getParsed(d);
          const m = {};
          const h = m[c] = i ? a.getPixelForDecimal(.5) : a.getPixelForValue(n[c]);
          const g = m[u] = i ? o.getBasePixel() : o.getPixelForValue(n[u]);
          m.skip = isNaN(h) || isNaN(g);
          if (l) {
            m.options = r || this.resolveDataElementOptions(d, t.active ? "active" : s);
            if (i) {
              m.options.radius = 0;
            }
          }
          this.updateElement(t, d, m, s);
        }
      }
      resolveDataElementOptions(e, t) {
        const n = this.getParsed(e);
        let s = super.resolveDataElementOptions(e, t);
        if (s.$shared) {
          s = Object.assign({}, s, {
            $shared: false
          });
        }
        const i = s.radius;
        if ("active" !== t) {
          s.radius = 0;
        }
        s.radius += undefined === (n && n._custom) ? i : n && n._custom;
        return s;
      }
    }
    class Js extends Vs {
      static id = "doughnut";
      static defaults = {
        datasetElementType: false,
        dataElementType: "arc",
        animation: {
          animateRotate: true,
          animateScale: false
        },
        animations: {
          numbers: {
            type: "number",
            properties: ["circumference", "endAngle", "innerRadius", "outerRadius", "startAngle", "x", "y", "offset", "borderWidth", "spacing"]
          }
        },
        cutout: "50%",
        rotation: 0,
        circumference: 360,
        radius: "100%",
        spacing: 0,
        indexAxis: "r"
      };
      static descriptors = {
        _scriptable: e => "spacing" !== e,
        _indexable: e => "spacing" !== e
      };
      static overrides = {
        aspectRatio: 1,
        plugins: {
          legend: {
            labels: {
              generateLabels(e) {
                const t = e.data;
                if (t.labels.length && t.datasets.length) {
                  const {
                    labels: {
                      pointStyle: n,
                      color: s
                    }
                  } = e.legend.options;
                  return t.labels.map((t, i) => {
                    const a = e.getDatasetMeta(0).controller.getStyle(i);
                    return {
                      text: t,
                      fillStyle: a.backgroundColor,
                      strokeStyle: a.borderColor,
                      fontColor: s,
                      lineWidth: a.borderWidth,
                      pointStyle: n,
                      hidden: !e.getDataVisibility(i),
                      index: i
                    };
                  });
                }
                return [];
              }
            },
            onClick(e, t, n) {
              n.chart.toggleDataVisibility(t.index);
              n.chart.update();
            }
          }
        }
      };
      constructor(e, t) {
        super(e, t);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
      }
      linkScales() {}
      parse(e, t) {
        const n = this.getDataset().data;
        const s = this._cachedMeta;
        if (false === this._parsing) {
          s._parsed = n;
        } else {
          let i;
          let a;
          let o = e => +n[e];
          if (null !== n[e] && "[object Object]" === Object.prototype.toString.call(n[e])) {
            const {
              key: e = "value"
            } = this._parsing;
            o = t => +ve(n[t], e);
          }
          i = e;
          for (a = e + t; i < a; ++i) {
            s._parsed[i] = o(i);
          }
        }
      }
      _getRotation() {
        return (this.options.rotation - 90) * (Ie / 180);
      }
      _getCircumference() {
        return this.options.circumference * (Ie / 180);
      }
      _getRotationExtents() {
        let e = ye;
        let t = -ye;
        for (let n = 0; n < this.chart.data.datasets.length; ++n) {
          if (this.chart.isDatasetVisible(n) && this.chart.getDatasetMeta(n).type === this._type) {
            const s = this.chart.getDatasetMeta(n).controller;
            const i = s._getRotation();
            const a = s._getCircumference();
            e = Math.min(e, i);
            t = Math.max(t, i + a);
          }
        }
        return {
          rotation: e,
          circumference: t - e
        };
      }
      update(e) {
        const t = this.chart;
        const {
          chartArea: n
        } = t;
        const s = this._cachedMeta;
        const i = s.data;
        const a = this.getMaxBorderWidth() + this.getMaxOffset(i) + this.options.spacing;
        const o = Math.max((Math.min(n.width, n.height) - a) / 2, 0);
        const r = Math.min(((e, t) => "string" == typeof e && e.endsWith("%") ? parseFloat(e) / 100 : +e / t)(this.options.cutout, o), 1);
        const l = this._getRingWeight(this.index);
        const {
          circumference: c,
          rotation: u
        } = this._getRotationExtents();
        const {
          ratioX: d,
          ratioY: m,
          offsetX: h,
          offsetY: g
        } = function (e, t, n) {
          let s = 1;
          let i = 1;
          let a = 0;
          let o = 0;
          if (t < ye) {
            const l = e + t;
            const c = Math.cos(e);
            const u = Math.sin(e);
            const d = Math.cos(l);
            const m = Math.sin(l);
            const h = (e, t, s) => Ke(e, e, l, true) ? 1 : Math.max(t, t * n, s, s * n);
            const g = (e, t, s) => Ke(e, e, l, true) ? -1 : Math.min(t, t * n, s, s * n);
            const p = Ke(0, 0, l, true) ? 1 : Math.max(c, c * n, d, d * n);
            const f = Ke(Ne, Ne, l, true) ? 1 : Math.max(u, u * n, m, m * n);
            const x = Ke(Ie, Ie, l, true) ? -1 : Math.min(c, c * n, d, d * n);
            const v = Ke(Ie + Ne, Ie + Ne, l, true) ? -1 : Math.min(u, u * n, m, m * n);
            s = (p - x) / 2;
            i = (f - v) / 2;
            a = -(p + x) / 2;
            o = -(f + v) / 2;
          }
          return {
            ratioX: s,
            ratioY: i,
            offsetX: a,
            offsetY: o
          };
        }(u, c, r);
        const p = (n.width - a) / d;
        const f = (n.height - a) / m;
        const x = Math.max(Math.min(p, f) / 2, 0);
        const v = "string" == typeof this.options.radius && this.options.radius.endsWith("%") ? parseFloat(this.options.radius) / 100 * x : +this.options.radius;
        const _ = (v - Math.max(v * r, 0)) / this._getVisibleDatasetWeightTotal();
        this.offsetX = h * v;
        this.offsetY = g * v;
        s.total = this.calculateTotal();
        this.outerRadius = v - _ * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - _ * l, 0);
        this.updateElements(i, 0, i.length, e);
      }
      _circumference(e, t) {
        const n = this.options;
        const s = this._cachedMeta;
        const i = this._getCircumference();
        return t && n.animation.animateRotate || !this.chart.getDataVisibility(e) || null === s._parsed[e] || s.data[e].hidden ? 0 : this.calculateCircumference(s._parsed[e] * i / ye);
      }
      updateElements(e, t, n, s) {
        const i = "reset" === s;
        const a = this.chart;
        const o = a.chartArea;
        const r = a.options.animation;
        const l = (o.left + o.right) / 2;
        const c = (o.top + o.bottom) / 2;
        const u = i && r.animateScale;
        const d = u ? 0 : this.innerRadius;
        const m = u ? 0 : this.outerRadius;
        const {
          sharedOptions: h,
          includeOptions: g
        } = this._getSharedOptions(t, s);
        let p;
        let f = this._getRotation();
        for (p = 0; p < t; ++p) {
          f += this._circumference(p, i);
        }
        for (p = t; p < t + n; ++p) {
          const t = this._circumference(p, i);
          const n = e[p];
          const a = {
            x: l + this.offsetX,
            y: c + this.offsetY,
            startAngle: f,
            endAngle: f + t,
            circumference: t,
            outerRadius: m,
            innerRadius: d
          };
          if (g) {
            a.options = h || this.resolveDataElementOptions(p, n.active ? "active" : s);
          }
          f += t;
          this.updateElement(n, p, a, s);
        }
      }
      calculateTotal() {
        const e = this._cachedMeta;
        const t = e.data;
        let n;
        let s = 0;
        for (n = 0; n < t.length; n++) {
          const i = e._parsed[n];
          if (!(null === i || isNaN(i) || !this.chart.getDataVisibility(n) || t[n].hidden)) {
            s += Math.abs(i);
          }
        }
        return s;
      }
      calculateCircumference(e) {
        const t = this._cachedMeta.total;
        return t > 0 && !isNaN(e) ? ye * (Math.abs(e) / t) : 0;
      }
      getLabelAndValue(e) {
        const t = this._cachedMeta;
        const n = this.chart;
        const s = n.data.labels || [];
        const i = Xt(t._parsed[e], n.options.locale);
        return {
          label: s[e] || "",
          value: i
        };
      }
      getMaxBorderWidth(e) {
        let t = 0;
        const n = this.chart;
        let s;
        let i;
        let a;
        let o;
        let r;
        if (!e) {
          s = 0;
          for (i = n.data.datasets.length; s < i; ++s) {
            if (n.isDatasetVisible(s)) {
              a = n.getDatasetMeta(s);
              e = a.data;
              o = a.controller;
              break;
            }
          }
        }
        if (!e) {
          return 0;
        }
        s = 0;
        for (i = e.length; s < i; ++s) {
          r = o.resolveDataElementOptions(s);
          if ("inner" !== r.borderAlign) {
            t = Math.max(t, r.borderWidth || 0, r.hoverBorderWidth || 0);
          }
        }
        return t;
      }
      getMaxOffset(e) {
        let t = 0;
        let n = 0;
        for (let s = e.length; n < s; ++n) {
          const e = this.resolveDataElementOptions(n);
          t = Math.max(t, e.offset || 0, e.hoverOffset || 0);
        }
        return t;
      }
      _getRingWeightOffset(e) {
        let t = 0;
        for (let n = 0; n < e; ++n) {
          if (this.chart.isDatasetVisible(n)) {
            t += this._getRingWeight(n);
          }
        }
        return t;
      }
      _getRingWeight(e) {
        return Math.max(undefined === this.chart.data.datasets[e].weight ? 1 : this.chart.data.datasets[e].weight, 0);
      }
      _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
      }
    }
    class ei extends Vs {
      static id = "line";
      static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        showLine: true,
        spanGaps: false
      };
      static overrides = {
        scales: {
          _index_: {
            type: "category"
          },
          _value_: {
            type: "linear"
          }
        }
      };
      initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
      }
      update(e) {
        const t = this._cachedMeta;
        const {
          dataset: n,
          data: s = [],
          _dataset: i
        } = t;
        const a = this.chart._animationsDisabled;
        let {
          start: o,
          count: r
        } = st(t, s, a);
        this._drawStart = o;
        this._drawCount = r;
        if (it(t)) {
          o = 0;
          r = s.length;
        }
        n._chart = this.chart;
        n._datasetIndex = this.index;
        n._decimated = !!i._decimated;
        n.points = s;
        const l = this.resolveDatasetElementOptions(e);
        if (!this.options.showLine) {
          l.borderWidth = 0;
        }
        l.segment = this.options.segment;
        this.updateElement(n, undefined, {
          animated: !a,
          options: l
        }, e);
        this.updateElements(s, o, r, e);
      }
      updateElements(e, t, n, s) {
        const i = "reset" === s;
        const {
          iScale: a,
          vScale: o,
          _stacked: r,
          _dataset: l
        } = this._cachedMeta;
        const {
          sharedOptions: c,
          includeOptions: u
        } = this._getSharedOptions(t, s);
        const d = a.axis;
        const m = o.axis;
        const {
          spanGaps: h,
          segment: g
        } = this.options;
        const p = !isNaN(parseFloat(h)) && isFinite(h) ? h : Number.POSITIVE_INFINITY;
        const f = this.chart._animationsDisabled || i || "none" === s;
        const x = t + n;
        const v = e.length;
        let _ = t > 0 && this.getParsed(t - 1);
        for (let n = 0; n < v; ++n) {
          const h = e[n];
          const v = f ? h : {};
          if (n < t || n >= x) {
            v.skip = true;
            continue;
          }
          const b = this.getParsed(n);
          const T = null == b[m];
          const E = v[d] = a.getPixelForValue(b[d], n);
          const I = v[m] = i || T ? o.getBasePixel() : o.getPixelForValue(r ? this.applyStack(o, b, r) : b[m], n);
          v.skip = isNaN(E) || isNaN(I) || T;
          v.stop = n > 0 && Math.abs(b[d] - _[d]) > p;
          if (g) {
            v.parsed = b;
            v.raw = l.data[n];
          }
          if (u) {
            v.options = c || this.resolveDataElementOptions(n, h.active ? "active" : s);
          }
          if (!f) {
            this.updateElement(h, n, v, s);
          }
          _ = b;
        }
      }
      getMaxOverflow() {
        const e = this._cachedMeta;
        const t = e.dataset;
        const n = t.options && t.options.borderWidth || 0;
        const s = e.data || [];
        if (!s.length) {
          return n;
        }
        const i = s[0].size(this.resolveDataElementOptions(0));
        const a = s[s.length - 1].size(this.resolveDataElementOptions(s.length - 1));
        return Math.max(n, i, a) / 2;
      }
      draw() {
        const e = this._cachedMeta;
        e.dataset.updateControlPoints(this.chart.chartArea, e.iScale.axis);
        super.draw();
      }
    }
    class ti extends Vs {
      static id = "polarArea";
      static defaults = {
        dataElementType: "arc",
        animation: {
          animateRotate: true,
          animateScale: true
        },
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"]
          }
        },
        indexAxis: "r",
        startAngle: 0
      };
      static overrides = {
        aspectRatio: 1,
        plugins: {
          legend: {
            labels: {
              generateLabels(e) {
                const t = e.data;
                if (t.labels.length && t.datasets.length) {
                  const {
                    labels: {
                      pointStyle: n,
                      color: s
                    }
                  } = e.legend.options;
                  return t.labels.map((t, i) => {
                    const a = e.getDatasetMeta(0).controller.getStyle(i);
                    return {
                      text: t,
                      fillStyle: a.backgroundColor,
                      strokeStyle: a.borderColor,
                      fontColor: s,
                      lineWidth: a.borderWidth,
                      pointStyle: n,
                      hidden: !e.getDataVisibility(i),
                      index: i
                    };
                  });
                }
                return [];
              }
            },
            onClick(e, t, n) {
              n.chart.toggleDataVisibility(t.index);
              n.chart.update();
            }
          }
        },
        scales: {
          r: {
            type: "radialLinear",
            angleLines: {
              display: false
            },
            beginAtZero: true,
            grid: {
              circular: true
            },
            pointLabels: {
              display: false
            },
            startAngle: 0
          }
        }
      };
      constructor(e, t) {
        super(e, t);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
      }
      getLabelAndValue(e) {
        const t = this._cachedMeta;
        const n = this.chart;
        const s = n.data.labels || [];
        const i = Xt(t._parsed[e].r, n.options.locale);
        return {
          label: s[e] || "",
          value: i
        };
      }
      parseObjectData(e, t, n, s) {
        return Wn.bind(this)(e, t, n, s);
      }
      update(e) {
        const t = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(t, 0, t.length, e);
      }
      getMinMax() {
        const e = this._cachedMeta;
        const t = {
          min: Number.POSITIVE_INFINITY,
          max: Number.NEGATIVE_INFINITY
        };
        e.data.forEach((e, n) => {
          const s = this.getParsed(n).r;
          if (!isNaN(s) && this.chart.getDataVisibility(n)) {
            if (s < t.min) {
              t.min = s;
            }
            if (s > t.max) {
              t.max = s;
            }
          }
        });
        return t;
      }
      _updateRadius() {
        const e = this.chart;
        const t = e.chartArea;
        const n = e.options;
        const s = Math.min(t.right - t.left, t.bottom - t.top);
        const i = Math.max(s / 2, 0);
        const a = (i - Math.max(n.cutoutPercentage ? i / 100 * n.cutoutPercentage : 1, 0)) / e.getVisibleDatasetCount();
        this.outerRadius = i - a * this.index;
        this.innerRadius = this.outerRadius - a;
      }
      updateElements(e, t, n, s) {
        const i = "reset" === s;
        const a = this.chart;
        const o = a.options.animation;
        const r = this._cachedMeta.rScale;
        const l = r.xCenter;
        const c = r.yCenter;
        const u = r.getIndexAngle(0) - .5 * Ie;
        let d;
        let m = u;
        const h = 360 / this.countVisibleElements();
        for (d = 0; d < t; ++d) {
          m += this._computeAngle(d, s, h);
        }
        for (d = t; d < t + n; d++) {
          const t = e[d];
          let n = m;
          let g = m + this._computeAngle(d, s, h);
          let p = a.getDataVisibility(d) ? r.getDistanceFromCenterForValue(this.getParsed(d).r) : 0;
          m = g;
          if (i) {
            if (o.animateScale) {
              p = 0;
            }
            if (o.animateRotate) {
              n = g = u;
            }
          }
          const f = {
            x: l,
            y: c,
            innerRadius: 0,
            outerRadius: p,
            startAngle: n,
            endAngle: g,
            options: this.resolveDataElementOptions(d, t.active ? "active" : s)
          };
          this.updateElement(t, d, f, s);
        }
      }
      countVisibleElements() {
        const e = this._cachedMeta;
        let t = 0;
        e.data.forEach((e, n) => {
          if (!isNaN(this.getParsed(n).r) && this.chart.getDataVisibility(n)) {
            t++;
          }
        });
        return t;
      }
      _computeAngle(e, t, n) {
        return this.chart.getDataVisibility(e) ? (this.resolveDataElementOptions(e, t).angle || n) * (Ie / 180) : 0;
      }
    }
    class ni extends Js {
      static id = "pie";
      static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: "100%"
      };
    }
    class si extends Vs {
      static id = "radar";
      static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        indexAxis: "r",
        showLine: true,
        elements: {
          line: {
            fill: "start"
          }
        }
      };
      static overrides = {
        aspectRatio: 1,
        scales: {
          r: {
            type: "radialLinear"
          }
        }
      };
      getLabelAndValue(e) {
        const t = this._cachedMeta.vScale;
        const n = this.getParsed(e);
        return {
          label: t.getLabels()[e],
          value: "" + t.getLabelForValue(n[t.axis])
        };
      }
      parseObjectData(e, t, n, s) {
        return Wn.bind(this)(e, t, n, s);
      }
      update(e) {
        const t = this._cachedMeta;
        const n = t.dataset;
        const s = t.data || [];
        const i = t.iScale.getLabels();
        n.points = s;
        if ("resize" !== e) {
          const t = this.resolveDatasetElementOptions(e);
          if (!this.options.showLine) {
            t.borderWidth = 0;
          }
          const a = {
            _loop: true,
            _fullLoop: i.length === s.length,
            options: t
          };
          this.updateElement(n, undefined, a, e);
        }
        this.updateElements(s, 0, s.length, e);
      }
      updateElements(e, t, n, s) {
        const i = this._cachedMeta.rScale;
        const a = "reset" === s;
        for (let o = t; o < t + n; o++) {
          const t = e[o];
          const n = this.resolveDataElementOptions(o, t.active ? "active" : s);
          const r = i.getPointPositionForValue(o, this.getParsed(o).r);
          const l = a ? i.xCenter : r.x;
          const c = a ? i.yCenter : r.y;
          const u = {
            x: l,
            y: c,
            angle: r.angle,
            skip: isNaN(l) || isNaN(c),
            options: n
          };
          this.updateElement(t, o, u, s);
        }
      }
    }
    class ii extends Vs {
      static id = "scatter";
      static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        showLine: false,
        fill: false
      };
      static overrides = {
        interaction: {
          mode: "point"
        },
        scales: {
          x: {
            type: "linear"
          },
          y: {
            type: "linear"
          }
        }
      };
      getLabelAndValue(e) {
        const t = this._cachedMeta;
        const n = this.chart.data.labels || [];
        const {
          xScale: s,
          yScale: i
        } = t;
        const a = this.getParsed(e);
        const o = s.getLabelForValue(a.x);
        const r = i.getLabelForValue(a.y);
        return {
          label: n[e] || "",
          value: "(" + o + ", " + r + ")"
        };
      }
      update(e) {
        const t = this._cachedMeta;
        const {
          data: n = []
        } = t;
        const s = this.chart._animationsDisabled;
        let {
          start: i,
          count: a
        } = st(t, n, s);
        this._drawStart = i;
        this._drawCount = a;
        if (it(t)) {
          i = 0;
          a = n.length;
        }
        if (this.options.showLine) {
          const {
            dataset: i,
            _dataset: a
          } = t;
          i._chart = this.chart;
          i._datasetIndex = this.index;
          i._decimated = !!a._decimated;
          i.points = n;
          const o = this.resolveDatasetElementOptions(e);
          o.segment = this.options.segment;
          this.updateElement(i, undefined, {
            animated: !s,
            options: o
          }, e);
        }
        this.updateElements(n, i, a, e);
      }
      addElements() {
        const {
          showLine: e
        } = this.options;
        if (!this.datasetElementType && e) {
          this.datasetElementType = this.chart.registry.getElement("line");
        }
        super.addElements();
      }
      updateElements(e, t, n, s) {
        const i = "reset" === s;
        const {
          iScale: a,
          vScale: o,
          _stacked: r,
          _dataset: l
        } = this._cachedMeta;
        const c = this.resolveDataElementOptions(t, s);
        const u = this.getSharedOptions(c);
        const d = this.includeOptions(s, u);
        const m = a.axis;
        const h = o.axis;
        const {
          spanGaps: g,
          segment: p
        } = this.options;
        const f = !isNaN(parseFloat(g)) && isFinite(g) ? g : Number.POSITIVE_INFINITY;
        const x = this.chart._animationsDisabled || i || "none" === s;
        let v = t > 0 && this.getParsed(t - 1);
        for (let c = t; c < t + n; ++c) {
          const t = e[c];
          const n = this.getParsed(c);
          const g = x ? t : {};
          const _ = null == n[h];
          const b = g[m] = a.getPixelForValue(n[m], c);
          const T = g[h] = i || _ ? o.getBasePixel() : o.getPixelForValue(r ? this.applyStack(o, n, r) : n[h], c);
          g.skip = isNaN(b) || isNaN(T) || _;
          g.stop = c > 0 && Math.abs(n[m] - v[m]) > f;
          if (p) {
            g.parsed = n;
            g.raw = l.data[c];
          }
          if (d) {
            g.options = u || this.resolveDataElementOptions(c, t.active ? "active" : s);
          }
          if (!x) {
            this.updateElement(t, c, g, s);
          }
          v = n;
        }
        this.updateSharedOptions(u, s, c);
      }
      getMaxOverflow() {
        const e = this._cachedMeta;
        const t = e.data || [];
        if (!this.options.showLine) {
          let e = 0;
          for (let n = t.length - 1; n >= 0; --n) {
            e = Math.max(e, t[n].size(this.resolveDataElementOptions(n)) / 2);
          }
          return e > 0 && e;
        }
        const n = e.dataset;
        const s = n.options && n.options.borderWidth || 0;
        if (!t.length) {
          return s;
        }
        const i = t[0].size(this.resolveDataElementOptions(0));
        const a = t[t.length - 1].size(this.resolveDataElementOptions(t.length - 1));
        return Math.max(s, i, a) / 2;
      }
    }
    var ai = Object.freeze({
      __proto__: null,
      BarController: Qs,
      BubbleController: Zs,
      DoughnutController: Js,
      LineController: ei,
      PolarAreaController: ti,
      PieController: ni,
      RadarController: si,
      ScatterController: ii
    });
    function oi() {
      throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
    }
    class ri {
      static override(e) {
        Object.assign(ri.prototype, e);
      }
      constructor(e) {
        this.options = e || {};
      }
      init() {}
      formats() {
        return oi();
      }
      parse() {
        return oi();
      }
      format() {
        return oi();
      }
      add() {
        return oi();
      }
      diff() {
        return oi();
      }
      startOf() {
        return oi();
      }
      endOf() {
        return oi();
      }
    }
    var li = {
      _date: ri
    };
    function ci(e, t, n, s) {
      const {
        controller: i,
        data: a,
        _sorted: o
      } = e;
      const r = i._cachedMeta.iScale;
      if (r && t === r.axis && "r" !== t && o && a.length) {
        const e = r._reversePixels ? qe : $e;
        if (!s) {
          return e(a, t, n);
        }
        if (i._sharedOptions) {
          const s = a[0];
          const i = "function" == typeof s.getRange && s.getRange(t);
          if (i) {
            const s = e(a, t, n - i);
            const o = e(a, t, n + i);
            return {
              lo: s.lo,
              hi: o.hi
            };
          }
        }
      }
      return {
        lo: 0,
        hi: a.length - 1
      };
    }
    function ui(e, t, n, s, i) {
      const a = e.getSortedVisibleDatasetMetas();
      const o = n[t];
      let e = 0;
      for (let n = a.length; e < n; ++e) {
        const {
          index: n,
          data: r
        } = a[e];
        const {
          lo: l,
          hi: c
        } = ci(a[e], t, o, i);
        for (let e = l; e <= c; ++e) {
          const t = r[e];
          if (!t.skip) {
            s(t, n, e);
          }
        }
      }
    }
    function di(e, t, n, s, i) {
      const a = [];
      if (!i && !e.isPointInArea(t)) {
        return a;
      }
      ui(e, n, t, function (n, o, r) {
        if ((i || mn(n, e.chartArea, 0)) && n.inRange(t.x, t.y, s)) {
          a.push({
            element: n,
            datasetIndex: o,
            index: r
          });
        }
      }, true);
      return a;
    }
    function mi(e, t, n, s, i, a) {
      let o = [];
      const r = function (e) {
        const t = -1 !== e.indexOf("x");
        const n = -1 !== e.indexOf("y");
        return function (e, s) {
          const i = t ? Math.abs(e.x - s.x) : 0;
          const a = n ? Math.abs(e.y - s.y) : 0;
          return Math.sqrt(Math.pow(i, 2) + Math.pow(a, 2));
        };
      }(n);
      let l = Number.POSITIVE_INFINITY;
      ui(e, n, t, function (n, c, u) {
        const d = n.inRange(t.x, t.y, i);
        if (s && !d) {
          return;
        }
        const m = n.getCenterPoint(i);
        if (!(!!a || e.isPointInArea(m)) && !d) {
          return;
        }
        const h = r(t, m);
        if (h < l) {
          o = [{
            element: n,
            datasetIndex: c,
            index: u
          }];
          l = h;
        } else if (h === l) {
          o.push({
            element: n,
            datasetIndex: c,
            index: u
          });
        }
      });
      return o;
    }
    function hi(e, t, n, s, i, a) {
      return a || e.isPointInArea(t) ? "r" !== n || s ? mi(e, t, n, s, i, a) : function (e, t, n, s) {
        let i = [];
        ui(e, n, t, function (e, n, a) {
          const {
            startAngle: o,
            endAngle: r
          } = e.getProps(["startAngle", "endAngle"], s);
          const {
            angle: l
          } = Be(e, {
            x: t.x,
            y: t.y
          });
          if (Ke(l, o, r)) {
            i.push({
              element: e,
              datasetIndex: n,
              index: a
            });
          }
        });
        return i;
      }(e, t, n, i) : [];
    }
    function gi(e, t, n, s, i) {
      const a = [];
      const o = "x" === n ? "inXRange" : "inYRange";
      let r = false;
      ui(e, n, t, (e, s, l) => {
        if (e[o](t[n], i)) {
          a.push({
            element: e,
            datasetIndex: s,
            index: l
          });
          r = r || e.inRange(t.x, t.y, i);
        }
      });
      return s && !r ? [] : a;
    }
    var pi = {
      evaluateInteractionItems: ui,
      modes: {
        index(e, t, n, s) {
          const i = os(t, e);
          const a = n.axis || "x";
          const o = n.includeInvisible || false;
          const r = n.intersect ? di(e, i, a, s, o) : hi(e, i, a, false, s, o);
          const l = [];
          return r.length ? (e.getSortedVisibleDatasetMetas().forEach(e => {
            const t = r[0].index;
            const n = e.data[t];
            if (n && !n.skip) {
              l.push({
                element: n,
                datasetIndex: e.index,
                index: t
              });
            }
          }), l) : [];
        },
        dataset(e, t, n, s) {
          const i = os(t, e);
          const a = n.axis || "xy";
          const o = n.includeInvisible || false;
          let r = n.intersect ? di(e, i, a, s, o) : hi(e, i, a, false, s, o);
          if (r.length > 0) {
            const t = r[0].datasetIndex;
            const n = e.getDatasetMeta(t).data;
            r = [];
            for (let e = 0; e < n.length; ++e) {
              r.push({
                element: n[e],
                datasetIndex: t,
                index: e
              });
            }
          }
          return r;
        },
        point: (e, t, n, s) => di(e, os(t, e), n.axis || "xy", s, n.includeInvisible || false),
        nearest(e, t, n, s) {
          const i = os(t, e);
          const a = n.axis || "xy";
          const o = n.includeInvisible || false;
          return hi(e, i, a, n.intersect, s, o);
        },
        x: (e, t, n, s) => gi(e, os(t, e), "x", n.intersect, s),
        y: (e, t, n, s) => gi(e, os(t, e), "y", n.intersect, s)
      }
    };
    const fi = ["left", "top", "right", "bottom"];
    function xi(e, t) {
      return e.filter(e => e.pos === t);
    }
    function vi(e, t) {
      return e.filter(e => -1 === fi.indexOf(e.pos) && e.box.axis === t);
    }
    function _i(e, t) {
      return e.sort((e, n) => {
        const s = t ? n : e;
        const i = t ? e : n;
        return s.weight === i.weight ? s.index - i.index : s.weight - i.weight;
      });
    }
    function bi(e, t) {
      const n = function (e) {
        const t = {};
        for (const n of e) {
          const {
            stack: e,
            pos: s,
            stackWeight: i
          } = n;
          if (!e || !fi.includes(s)) {
            continue;
          }
          const a = t[e] || (t[e] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
          });
          a.count++;
          a.weight += i;
        }
        return t;
      }(e);
      const {
        vBoxMaxWidth: s,
        hBoxMaxHeight: i
      } = t;
      let a;
      let o;
      let r;
      a = 0;
      for (o = e.length; a < o; ++a) {
        r = e[a];
        const {
          fullSize: o
        } = r.box;
        const l = n[r.stack];
        const c = l && r.stackWeight / l.weight;
        if (r.horizontal) {
          r.width = c ? c * s : o && t.availableWidth;
          r.height = i;
        } else {
          r.width = s;
          r.height = c ? c * i : o && t.availableHeight;
        }
      }
      return n;
    }
    function Ti(e, t, n, s) {
      return Math.max(e[n], t[n]) + Math.max(e[s], t[s]);
    }
    function Ei(e, t) {
      e.top = Math.max(e.top, t.top);
      e.left = Math.max(e.left, t.left);
      e.bottom = Math.max(e.bottom, t.bottom);
      e.right = Math.max(e.right, t.right);
    }
    function Ii(e, t, n, s) {
      const {
        pos: i,
        box: a
      } = n;
      const o = e.maxPadding;
      if (!(null !== i && "[object Object]" === Object.prototype.toString.call(i))) {
        if (n.size) {
          e[i] -= n.size;
        }
        const t = s[n.stack] || {
          size: 0,
          count: 1
        };
        t.size = Math.max(t.size, n.horizontal ? a.height : a.width);
        n.size = t.size / t.count;
        e[i] += n.size;
      }
      if (a.getPadding) {
        Ei(o, a.getPadding());
      }
      const r = Math.max(0, t.outerWidth - (Math.max(o[n], e[n]) + Math.max(o[s], e[s])));
      const l = Math.max(0, t.outerHeight - (Math.max(o[n], e[n]) + Math.max(o[s], e[s])));
      const c = r !== e.w;
      const u = l !== e.h;
      e.w = r;
      e.h = l;
      return n.horizontal ? {
        same: c,
        other: u
      } : {
        same: u,
        other: c
      };
    }
    function yi(e, t) {
      const n = t.maxPadding;
      function s(e) {
        const s = {
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        };
        e.forEach(e => {
          s[e] = Math.max(t[e], n[e]);
        });
        return s;
      }
      return s(e ? ["left", "right"] : ["top", "bottom"]);
    }
    function Si(e, t, n, s) {
      const i = [];
      let a;
      let o;
      let r;
      let l;
      let c;
      let u;
      a = 0;
      o = e.length;
      for (c = 0; a < o; ++a) {
        r = e[a];
        l = r.box;
        l.update(r.width || t.w, r.height || t.h, yi(r.horizontal, t));
        const {
          same: o,
          other: d
        } = Ii(t, n, r, s);
        c |= o && i.length;
        u = u || d;
        if (!l.fullSize) {
          i.push(r);
        }
      }
      return c && Si(i, t, n, s) || u;
    }
    function ji(e, t, n, s, i) {
      e.top = n;
      e.left = t;
      e.right = t + s;
      e.bottom = n + i;
      e.width = s;
      e.height = i;
    }
    function Ci(e, t, n, s) {
      const i = n.padding;
      let {
        x: a,
        y: o
      } = t;
      for (const r of e) {
        const e = r.box;
        const l = s[r.stack] || {
          count: 1,
          placed: 0,
          weight: 1
        };
        const c = r.stackWeight / l.weight || 1;
        if (r.horizontal) {
          const s = t.w * c;
          const a = l.size || e.height;
          if (undefined !== l.start) {
            o = l.start;
          }
          if (e.fullSize) {
            ji(e, i.left, o, n.outerWidth - i.right - i.left, a);
          } else {
            ji(e, t.left + l.placed, o, s, a);
          }
          l.start = o;
          l.placed += s;
          o = e.bottom;
        } else {
          const s = t.h * c;
          const o = l.size || e.width;
          if (undefined !== l.start) {
            a = l.start;
          }
          if (e.fullSize) {
            ji(e, a, i.top, o, n.outerHeight - i.bottom - i.top);
          } else {
            ji(e, a, t.top + l.placed, o, s);
          }
          l.start = a;
          l.placed += s;
          a = e.right;
        }
      }
      t.x = a;
      t.y = o;
    }
    var Ni = {
      addBox(e, t) {
        if (!e.boxes) {
          e.boxes = [];
        }
        t.fullSize = t.fullSize || false;
        t.position = t.position || "top";
        t.weight = t.weight || 0;
        t._layers = t._layers || function () {
          return [{
            z: 0,
            draw(e) {
              t.draw(e);
            }
          }];
        };
        e.boxes.push(t);
      },
      removeBox(e, t) {
        const n = e.boxes ? e.boxes.indexOf(t) : -1;
        if (-1 !== n) {
          e.boxes.splice(n, 1);
        }
      },
      configure(e, t, n) {
        t.fullSize = n.fullSize;
        t.position = n.position;
        t.weight = n.weight;
      },
      update(e, t, n, s) {
        if (!e) {
          return;
        }
        const i = Nn(e.options.layout.padding);
        const a = Math.max(t - i.width, 0);
        const o = Math.max(n - i.height, 0);
        const r = function (e) {
          const t = function (e) {
            const t = [];
            let n;
            let s;
            let i;
            let a;
            let o;
            let r;
            n = 0;
            for (s = (e || []).length; n < s; ++n) {
              i = e[n];
              ({
                position: a,
                options: {
                  stack: o,
                  stackWeight: r = 1
                }
              } = i);
              t.push({
                index: n,
                box: i,
                pos: a,
                horizontal: i.isHorizontal(),
                weight: i.weight,
                stack: o && a + o,
                stackWeight: r
              });
            }
            return t;
          }(e);
          const n = _i(t.filter(e => e.box.fullSize), true);
          const s = _i(xi(t, "left"), true);
          const i = _i(xi(t, "right"));
          const a = _i(xi(t, "top"), true);
          const o = _i(xi(t, "bottom"));
          const r = vi(t, "x");
          const l = vi(t, "y");
          return {
            fullSize: n,
            leftAndTop: s.concat(a),
            rightAndBottom: i.concat(l).concat(o).concat(r),
            chartArea: xi(t, "chartArea"),
            vertical: s.concat(i).concat(l),
            horizontal: a.concat(o).concat(r)
          };
        }(e.boxes);
        const l = r.vertical;
        const c = r.horizontal;
        ce(e.boxes, e => {
          if ("function" == typeof e.beforeLayout) {
            e.beforeLayout();
          }
        });
        const u = l.reduce((e, t) => t.box.options && false === t.box.options.display ? e : e + 1, 0) || 1;
        const d = Object.freeze({
          outerWidth: t,
          outerHeight: n,
          padding: i,
          availableWidth: a,
          availableHeight: o,
          vBoxMaxWidth: a / 2 / u,
          hBoxMaxHeight: o / 2
        });
        const m = Object.assign({}, i);
        Ei(m, Nn(s));
        const h = Object.assign({
          maxPadding: m,
          w: a,
          h: o,
          x: i.left,
          y: i.top
        }, i);
        const g = bi(l.concat(c), d);
        Si(r.fullSize, h, d, g);
        Si(l, h, d, g);
        if (Si(c, h, d, g)) {
          Si(l, h, d, g);
        }
        (function (e) {
          const t = e.maxPadding;
          function n(n) {
            const s = Math.max(t[n] - e[n], 0);
            e[n] += s;
            return s;
          }
          e.y += n("top");
          e.x += n("left");
          n("right");
          n("bottom");
        })(h);
        Ci(r.leftAndTop, h, d, g);
        h.x += h.w;
        h.y += h.h;
        Ci(r.rightAndBottom, h, d, g);
        e.chartArea = {
          left: h.left,
          top: h.top,
          right: h.left + h.w,
          bottom: h.top + h.h,
          height: h.h,
          width: h.w
        };
        ce(r.chartArea, t => {
          const n = t.box;
          Object.assign(n, e.chartArea);
          n.update(h.w, h.h, {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          });
        });
      }
    };
    class wi {
      acquireContext(e, t) {}
      releaseContext(e) {
        return false;
      }
      addEventListener(e, t, n) {}
      removeEventListener(e, t, n) {}
      getDevicePixelRatio() {
        return 1;
      }
      getMaximumSize(e, t, n, s) {
        t = Math.max(0, t || e.width);
        n = n || e.height;
        return {
          width: t,
          height: Math.max(0, s ? Math.floor(t / s) : n)
        };
      }
      isAttached(e) {
        return true;
      }
      updateConfig(e) {}
    }
    class Oi extends wi {
      acquireContext(e) {
        return e && e.getContext && e.getContext("2d") || null;
      }
      updateConfig(e) {
        e.options.animation = false;
      }
    }
    const Li = {
      touchstart: "mousedown",
      touchmove: "mousemove",
      touchend: "mouseup",
      pointerenter: "mouseenter",
      pointerdown: "mousedown",
      pointermove: "mousemove",
      pointerup: "mouseup",
      pointerleave: "mouseout",
      pointerout: "mouseout"
    };
    const Ai = e => null === e || "" === e;
    const Mi = !!us && {
      passive: true
    };
    function Ri(e, t, n) {
      e.canvas.removeEventListener(t, n, Mi);
    }
    function ki(e, t) {
      for (const n of e) if (n === t || n.contains(t)) {
        return true;
      }
    }
    function Di(e, t, n) {
      const s = e.canvas;
      const i = new MutationObserver(e => {
        let t = false;
        for (const n of e) {
          t = t || ki(n.addedNodes, s);
          t = t && !ki(n.removedNodes, s);
        }
        if (t) {
          n();
        }
      });
      i.observe(document, {
        childList: true,
        subtree: true
      });
      return i;
    }
    function Fi(e, t, n) {
      const s = e.canvas;
      const i = new MutationObserver(e => {
        let t = false;
        for (const n of e) {
          t = t || ki(n.removedNodes, s);
          t = t && !ki(n.addedNodes, s);
        }
        if (t) {
          n();
        }
      });
      i.observe(document, {
        childList: true,
        subtree: true
      });
      return i;
    }
    const Ui = new Map();
    let Bi = 0;
    function Gi() {
      const e = window.devicePixelRatio;
      if (e !== Bi) {
        Bi = e;
        Ui.forEach((t, n) => {
          if (n.currentDevicePixelRatio !== e) {
            t();
          }
        });
      }
    }
    function Vi(e, t, n) {
      const s = e.canvas;
      const i = s && es(s);
      if (!i) {
        return;
      }
      const a = et((e, t) => {
        const s = i.clientWidth;
        n(e, t);
        if (s < i.clientWidth) {
          n();
        }
      }, window);
      const o = new ResizeObserver(e => {
        const t = e[0];
        const n = t.contentRect.width;
        const s = t.contentRect.height;
        if (!(0 === n && 0 === s)) {
          a(n, s);
        }
      });
      o.observe(i);
      (function (e, t) {
        if (!Ui.size) {
          window.addEventListener("resize", Gi);
        }
        Ui.set(e, t);
      })(e, a);
      return o;
    }
    function Hi(e, t, n) {
      if (n) {
        n.disconnect();
      }
      if ("resize" === t) {
        (function (e) {
          Ui.delete(e);
          if (!Ui.size) {
            window.removeEventListener("resize", Gi);
          }
        })(e);
      }
    }
    function Ki(e, t, n) {
      const s = e.canvas;
      const i = et(t => {
        if (null !== e.ctx) {
          n(function (e, t) {
            const n = Li[e.type] || e.type;
            const {
              x: s,
              y: i
            } = os(e, t);
            return {
              type: n,
              chart: t,
              native: e,
              x: undefined !== s ? s : null,
              y: undefined !== i ? i : null
            };
          }(t, e));
        }
      }, e);
      (function (e, t, n) {
        e.addEventListener(t, n, Mi);
      })(s, t, i);
      return i;
    }
    class Wi extends wi {
      acquireContext(e, t) {
        const n = e && e.getContext && e.getContext("2d");
        return n && n.canvas === e ? (function (e, t) {
          const n = e.style;
          const s = e.getAttribute("height");
          const i = e.getAttribute("width");
          e["$chartjs"] = {
            initial: {
              height: s,
              width: i,
              style: {
                display: n.display,
                height: n.height,
                width: n.width
              }
            }
          };
          n.display = n.display || "block";
          n.boxSizing = n.boxSizing || "border-box";
          if (null === i || "" === i) {
            const t = ds(e, "width");
            if (undefined !== t) {
              e.width = t;
            }
          }
          if (null === s || "" === s) {
            if ("" === e.style.height) {
              e.height = e.width / (t || 2);
            } else {
              const t = ds(e, "height");
              if (undefined !== t) {
                e.height = t;
              }
            }
          }
        }(e, t), n) : null;
      }
      releaseContext(e) {
        const t = e.canvas;
        if (!t["$chartjs"]) {
          return false;
        }
        const n = t["$chartjs"].initial;
        ["height", "width"].forEach(e => {
          const s = n[e];
          if (null == s) {
            t.removeAttribute(e);
          } else {
            t.setAttribute(e, s);
          }
        });
        const s = n.style || {};
        Object.keys(s).forEach(e => {
          t.style[e] = s[e];
        });
        t.width = t.width;
        delete t["$chartjs"];
        return true;
      }
      addEventListener(e, t, n) {
        this.removeEventListener(e, t);
        const s = e.$proxies || (e.$proxies = {});
        const i = {
          attach: Di,
          detach: Fi,
          resize: Vi
        }[t] || Ki;
        s[t] = i(e, t, n);
      }
      removeEventListener(e, t) {
        const n = e.$proxies || (e.$proxies = {});
        const s = n[t];
        if (!s) {
          return;
        }
        (({
          attach: Hi,
          detach: Hi,
          resize: Hi
        })[t] || Ri)(e, t, s);
        n[t] = undefined;
      }
      getDevicePixelRatio() {
        return window.devicePixelRatio;
      }
      getMaximumSize(e, t, n, s) {
        return ls(e, t, n, s);
      }
      isAttached(e) {
        const t = es(e);
        return !(!t || !t.isConnected);
      }
    }
    function zi(e) {
      return !("undefined" != typeof window && "undefined" != typeof document) || "undefined" != typeof OffscreenCanvas && e instanceof OffscreenCanvas ? Oi : Wi;
    }
    class Yi {
      static defaults = {};
      static defaultRoutes = undefined;
      active = false;
      tooltipPosition(e) {
        const {
          x: t,
          y: n
        } = this.getProps(["x", "y"], e);
        return {
          x: t,
          y: n
        };
      }
      hasValue() {
        return !isNaN(parseFloat(this.x)) && isFinite(this.x) && !isNaN(parseFloat(this.y)) && isFinite(this.y);
      }
      getProps(e, t) {
        const n = this.$animations;
        if (!t || !n) {
          return this;
        }
        const s = {};
        e.forEach(e => {
          s[e] = n[e] && n[e].active() ? n[e]._to : this[e];
        });
        return s;
      }
    }
    function $i(e, t) {
      const n = e.options.ticks;
      const s = function (e) {
        const t = e.options.offset;
        const n = e._tickSize();
        const s = e._length / n + (t ? 0 : 1);
        const i = e._maxLength / n;
        return Math.floor(Math.min(s, i));
      }(e);
      const i = Math.min(n.maxTicksLimit || s, s);
      const a = n.major.enabled ? function (e) {
        const t = [];
        let n;
        let s;
        n = 0;
        for (s = e.length; n < s; n++) {
          if (e[n].major) {
            t.push(n);
          }
        }
        return t;
      }(t) : [];
      const o = a.length;
      const r = a[0];
      const l = a[o - 1];
      const c = [];
      if (o > i) {
        (function (e, t, n, s) {
          let i;
          let a = 0;
          let o = n[0];
          s = Math.ceil(s);
          for (i = 0; i < e.length; i++) {
            if (i === o) {
              t.push(e[i]);
              a++;
              o = n[a * s];
            }
          }
        })(t, c, a, o / i);
        return c;
      }
      const u = function (e, t, n) {
        const s = function (e) {
          const t = e.length;
          let n;
          let s;
          if (t < 2) {
            return false;
          }
          s = e[0];
          for (n = 1; n < t; ++n) {
            if (e[n] - e[n - 1] !== s) {
              return false;
            }
          }
          return s;
        }(e);
        const i = t.length / n;
        if (!s) {
          return Math.max(i, 1);
        }
        const a = function (e) {
          const t = [];
          const n = Math.sqrt(e);
          let s;
          for (s = 1; s < n; s++) {
            if (e % s == 0) {
              t.push(s);
              t.push(e / s);
            }
          }
          if (n === (0 | n)) {
            t.push(n);
          }
          t.sort((e, t) => e - t).pop();
          return t;
        }(s);
        let e = 0;
        for (let t = a.length - 1; e < t; e++) {
          const t = a[e];
          if (t > i) {
            return t;
          }
        }
        return Math.max(i, 1);
      }(a, t, i);
      if (o > 0) {
        let e;
        let n;
        const s = o > 1 ? Math.round((l - r) / (o - 1)) : null;
        qi(t, c, u, null == s ? 0 : r - s, r);
        e = 0;
        for (n = o - 1; e < n; e++) {
          qi(t, c, u, a[e], a[e + 1]);
        }
        qi(t, c, u, l, null == s ? t.length : l + s);
        return c;
      }
      qi(t, c, u);
      return c;
    }
    function qi(e, t, n, s, i) {
      const a = undefined === s ? 0 : s;
      const o = Math.min(undefined === i ? e.length : i, e.length);
      let r;
      let l;
      let c;
      let u = 0;
      n = Math.ceil(n);
      if (i) {
        r = i - s;
        n = r / Math.floor(r / n);
      }
      for (c = a; c < 0;) {
        u++;
        c = Math.round(a + u * n);
      }
      for (l = Math.max(a, 0); l < o; l++) {
        if (l === c) {
          t.push(e[l]);
          u++;
          c = Math.round(a + u * n);
        }
      }
    }
    const Xi = (e, t, n) => "top" === t || "left" === t ? e[t] + n : e[t] - n;
    function Qi(e, t) {
      const n = [];
      const s = e.length / t;
      const i = e.length;
      let a = 0;
      for (; a < i; a += s) {
        n.push(e[Math.floor(a)]);
      }
      return n;
    }
    function Zi(e, t, n) {
      const s = e.ticks.length;
      const i = Math.min(t, s - 1);
      const a = e._startPixel;
      const o = e._endPixel;
      let l;
      let c = e.getPixelForTick(i);
      if (!(n && (l = 1 === s ? Math.max(c - a, o - c) : 0 === t ? (e.getPixelForTick(1) - c) / 2 : (c - e.getPixelForTick(i - 1)) / 2, c += i < t ? l : -l, c < a - 1e-6 || c > o + 1e-6))) {
        return c;
      }
    }
    function Ji(e) {
      return e.drawTicks ? e.tickLength : 0;
    }
    function ea(e, t) {
      if (!e.display) {
        return 0;
      }
      const n = wn(e.font, t);
      const s = Nn(e.padding);
      return (ne(e.text) ? e.text.length : 1) * n.lineHeight + s.height;
    }
    function ta(e, t, n) {
      let s = "start" === e ? "left" : "end" === e ? "right" : "center";
      if (n && "right" !== t || !n && "right" === t) {
        s = (e => "left" === e ? "right" : "right" === e ? "left" : e)(s);
      }
      return s;
    }
    class na extends Yi {
      constructor(e) {
        super();
        this.id = e.id;
        this.type = e.type;
        this.options = undefined;
        this.ctx = e.ctx;
        this.chart = e.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
      }
      init(e) {
        this.options = e.setContext(this.getContext());
        this.axis = e.axis;
        this._userMin = this.parse(e.min);
        this._userMax = this.parse(e.max);
        this._suggestedMin = this.parse(e.suggestedMin);
        this._suggestedMax = this.parse(e.suggestedMax);
      }
      parse(e, t) {
        return e;
      }
      getUserBounds() {
        let {
          _userMin: e,
          _userMax: t,
          _suggestedMin: n,
          _suggestedMax: s
        } = this;
        e = ie(e) ? e : Number.POSITIVE_INFINITY;
        t = ie(t) ? t : Number.NEGATIVE_INFINITY;
        n = ie(n) ? n : Number.POSITIVE_INFINITY;
        s = ie(s) ? s : Number.NEGATIVE_INFINITY;
        return {
          min: ie(e) ? e : n,
          max: ie(t) ? t : s,
          minDefined: ("number" == typeof e || e instanceof Number) && isFinite(+e),
          maxDefined: ("number" == typeof t || t instanceof Number) && isFinite(+t)
        };
      }
      getMinMax(e) {
        let t;
        let {
          min: n,
          max: s,
          minDefined: i,
          maxDefined: a
        } = this.getUserBounds();
        if (i && a) {
          return {
            min: n,
            max: s
          };
        }
        const o = this.getMatchingVisibleMetas();
        let r = 0;
        for (let l = o.length; r < l; ++r) {
          t = o[r].controller.getMinMax(this, e);
          if (!i) {
            n = Math.min(n, t.min);
          }
          if (!a) {
            s = Math.max(s, t.max);
          }
        }
        n = a && n > s ? s : n;
        s = i && n > s ? n : s;
        return {
          min: ie(n) ? n : ie(s) ? s : n,
          max: ie(s) ? s : ie(n) ? n : s
        };
      }
      getPadding() {
        return {
          left: this.paddingLeft || 0,
          top: this.paddingTop || 0,
          right: this.paddingRight || 0,
          bottom: this.paddingBottom || 0
        };
      }
      getTicks() {
        return this.ticks;
      }
      getLabels() {
        const e = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? e.xLabels : e.yLabels) || e.labels || [];
      }
      beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
      }
      beforeUpdate() {
        le(this.options.beforeUpdate, [this]);
      }
      update(e, t, n) {
        const {
          beginAtZero: s,
          grace: i,
          ticks: a
        } = this.options;
        const o = a.sampleSize;
        this.beforeUpdate();
        this.maxWidth = e;
        this.maxHeight = t;
        this._margins = n = Object.assign({
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, n);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + n.left + n.right : this.height + n.top + n.bottom;
        if (!this._dataLimitsCached) {
          this.beforeDataLimits();
          this.determineDataLimits();
          this.afterDataLimits();
          this._range = function (e, t, n) {
            const {
              min: s,
              max: i
            } = e;
            const a = "string" == typeof t && t.endsWith("%") ? parseFloat(t) / 100 * ((i - s) / 2) : +t;
            const o = (e, t) => n && 0 === e ? 0 : e + t;
            return {
              min: n && 0 === s ? 0 : s + -Math.abs(a),
              max: n && 0 === i ? 0 : i + a
            };
          }(this, i, s);
          this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const r = o < this.ticks.length;
        this._convertTicksToLabels(r ? Qi(this.ticks, o) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (a.display && (a.autoSkip || "auto" === a.source)) {
          this.ticks = $i(this, this.ticks);
          this._labelSizes = null;
          this.afterAutoSkip();
        }
        if (r) {
          this._convertTicksToLabels(this.ticks);
        }
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
      }
      configure() {
        let e;
        let t;
        let n = this.options.reverse;
        if (this.isHorizontal()) {
          e = this.left;
          t = this.right;
        } else {
          e = this.top;
          t = this.bottom;
          n = !n;
        }
        this._startPixel = e;
        this._endPixel = t;
        this._reversePixels = n;
        this._length = t - e;
        this._alignToPixels = this.options.alignToPixels;
      }
      afterUpdate() {
        le(this.options.afterUpdate, [this]);
      }
      beforeSetDimensions() {
        le(this.options.beforeSetDimensions, [this]);
      }
      setDimensions() {
        if (this.isHorizontal()) {
          this.width = this.maxWidth;
          this.left = 0;
          this.right = this.width;
        } else {
          this.height = this.maxHeight;
          this.top = 0;
          this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
      }
      afterSetDimensions() {
        le(this.options.afterSetDimensions, [this]);
      }
      _callHooks(e) {
        this.chart.notifyPlugins(e, this.getContext());
        le(this.options[e], [this]);
      }
      beforeDataLimits() {
        this._callHooks("beforeDataLimits");
      }
      determineDataLimits() {}
      afterDataLimits() {
        this._callHooks("afterDataLimits");
      }
      beforeBuildTicks() {
        this._callHooks("beforeBuildTicks");
      }
      buildTicks() {
        return [];
      }
      afterBuildTicks() {
        this._callHooks("afterBuildTicks");
      }
      beforeTickToLabelConversion() {
        le(this.options.beforeTickToLabelConversion, [this]);
      }
      generateTickLabels(e) {
        const t = this.options.ticks;
        let n;
        let s;
        let i;
        n = 0;
        for (s = e.length; n < s; n++) {
          i = e[n];
          i.label = le(t.callback, [i.value, n, e], this);
        }
      }
      afterTickToLabelConversion() {
        le(this.options.afterTickToLabelConversion, [this]);
      }
      beforeCalculateLabelRotation() {
        le(this.options.beforeCalculateLabelRotation, [this]);
      }
      calculateLabelRotation() {
        const e = this.options;
        const t = e.ticks;
        const n = this.ticks.length;
        const s = t.minRotation || 0;
        const i = t.maxRotation;
        let a;
        let o;
        let r;
        let l = s;
        if (!this._isVisible() || !t.display || s >= i || n <= 1 || !this.isHorizontal()) {
          return void (this.labelRotation = s);
        }
        const c = this._getLabelSizes();
        const u = c.widest.width;
        const d = c.highest.height;
        const m = Math.max(0, Math.min(this.maxWidth, this.chart.width - u));
        a = e.offset ? this.maxWidth / n : m / (n - 1);
        if (u + 6 > a) {
          a = m / (n - (e.offset ? .5 : 1));
          o = this.maxHeight - (e.grid.drawTicks ? e.grid.tickLength : 0) - t.padding - ea(e.title, this.chart.options.font);
          r = Math.sqrt(u * u + d * d);
          l = Math.min(Math.asin(Math.max(-1, Math.min(1, (c.highest.height + 6) / a))), Math.asin(Math.max(-1, Math.min(1, o / r))) - Math.asin(Math.max(-1, Math.min(1, d / r)))) * (180 / Ie);
          l = Math.max(s, Math.min(i, l));
        }
        this.labelRotation = l;
      }
      afterCalculateLabelRotation() {
        le(this.options.afterCalculateLabelRotation, [this]);
      }
      afterAutoSkip() {}
      beforeFit() {
        le(this.options.beforeFit, [this]);
      }
      fit() {
        const e = {
          width: 0,
          height: 0
        };
        const {
          chart: t,
          options: {
            ticks: n,
            title: s,
            grid: i
          }
        } = this;
        const a = this._isVisible();
        const o = this.isHorizontal();
        if (a) {
          const a = ea(s, t.options.font);
          if (o) {
            e.width = this.maxWidth;
            e.height = (i.drawTicks ? i.tickLength : 0) + a;
          } else {
            e.height = this.maxHeight;
            e.width = (i.drawTicks ? i.tickLength : 0) + a;
          }
          if (n.display && this.ticks.length) {
            const {
              first: t,
              last: s,
              widest: i,
              highest: a
            } = this._getLabelSizes();
            const r = 2 * n.padding;
            const l = this.labelRotation * (Ie / 180);
            const c = Math.cos(l);
            const u = Math.sin(l);
            if (o) {
              const t = n.mirror ? 0 : u * i.width + c * a.height;
              e.height = Math.min(this.maxHeight, e.height + t + r);
            } else {
              const t = n.mirror ? 0 : c * i.width + u * a.height;
              e.width = Math.min(this.maxWidth, e.width + t + r);
            }
            this._calculatePadding(t, s, u, c);
          }
        }
        this._handleMargins();
        if (o) {
          this.width = this._length = t.width - this._margins.left - this._margins.right;
          this.height = e.height;
        } else {
          this.width = e.width;
          this.height = this._length = t.height - this._margins.top - this._margins.bottom;
        }
      }
      _calculatePadding(e, t, n, s) {
        const {
          ticks: {
            align: i,
            padding: a
          },
          position: o
        } = this.options;
        const r = 0 !== this.labelRotation;
        const l = "top" !== o && "x" === this.axis;
        if (this.isHorizontal()) {
          const o = this.getPixelForTick(0) - this.left;
          const c = this.right - this.getPixelForTick(this.ticks.length - 1);
          let u = 0;
          let d = 0;
          if (r) {
            if (l) {
              u = s * e.width;
              d = n * t.height;
            } else {
              u = n * e.height;
              d = s * t.width;
            }
          } else if ("start" === i) {
            d = t.width;
          } else if ("end" === i) {
            u = e.width;
          } else if ("inner" !== i) {
            u = e.width / 2;
            d = t.width / 2;
          }
          this.paddingLeft = Math.max((u - o + a) * this.width / (this.width - o), 0);
          this.paddingRight = Math.max((d - c + a) * this.width / (this.width - c), 0);
        } else {
          let n = t.height / 2;
          let s = e.height / 2;
          if ("start" === i) {
            n = 0;
            s = e.height;
          } else if ("end" === i) {
            n = t.height;
            s = 0;
          }
          this.paddingTop = n + a;
          this.paddingBottom = s + a;
        }
      }
      _handleMargins() {
        if (this._margins) {
          this._margins.left = Math.max(this.paddingLeft, this._margins.left);
          this._margins.top = Math.max(this.paddingTop, this._margins.top);
          this._margins.right = Math.max(this.paddingRight, this._margins.right);
          this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
      }
      afterFit() {
        le(this.options.afterFit, [this]);
      }
      isHorizontal() {
        const {
          axis: e,
          position: t
        } = this.options;
        return "top" === t || "bottom" === t || "x" === e;
      }
      isFullSize() {
        return this.options.fullSize;
      }
      _convertTicksToLabels(e) {
        let t;
        let n;
        this.beforeTickToLabelConversion();
        this.generateTickLabels(e);
        t = 0;
        for (n = e.length; t < n; t++) {
          if (null == e[t].label) {
            e.splice(t, 1);
            n--;
            t--;
          }
        }
        this.afterTickToLabelConversion();
      }
      _getLabelSizes() {
        let e = this._labelSizes;
        if (!e) {
          const t = this.options.ticks.sampleSize;
          let n = this.ticks;
          if (t < n.length) {
            n = Qi(n, t);
          }
          this._labelSizes = e = this._computeLabelSizes(n, n.length);
        }
        return e;
      }
      _computeLabelSizes(e, t) {
        const {
          ctx: n,
          _longestTextCache: s
        } = this;
        const i = [];
        const a = [];
        let o;
        let r;
        let l;
        let c;
        let u;
        let d;
        let m;
        let h;
        let g;
        let p;
        let f;
        let x = 0;
        let v = 0;
        for (o = 0; o < t; ++o) {
          c = e[o].label;
          u = this._resolveTickFontOptions(o);
          n.font = d = u.string;
          m = s[d] = s[d] || {
            data: {},
            gc: []
          };
          h = u.lineHeight;
          g = p = 0;
          if (null == c || ne(c)) {
            if (ne(c)) {
              r = 0;
              for (l = c.length; r < l; ++r) {
                f = c[r];
                if (!(null == f || ne(f))) {
                  g = on(n, m.data, m.gc, g, f);
                  p += h;
                }
              }
            }
          } else {
            g = on(n, m.data, m.gc, g, c);
            p = h;
          }
          i.push(g);
          a.push(p);
          x = Math.max(g, x);
          v = Math.max(p, v);
        }
        !function (e, t) {
          ce(e, e => {
            const n = e.gc;
            const s = n.length / 2;
            let i;
            if (s > t) {
              for (i = 0; i < s; ++i) {
                delete e.data[n[i]];
              }
              n.splice(0, s);
            }
          });
        }(s, t);
        const _ = i.indexOf(x);
        const b = a.indexOf(v);
        const T = e => ({
          width: i[e] || 0,
          height: a[e] || 0
        });
        return {
          first: {
            width: i[e] || 0,
            height: a[e] || 0
          },
          last: {
            width: i[e] || 0,
            height: a[e] || 0
          },
          widest: {
            width: i[e] || 0,
            height: a[e] || 0
          },
          highest: {
            width: i[e] || 0,
            height: a[e] || 0
          },
          widths: i,
          heights: a
        };
      }
      getLabelForValue(e) {
        return e;
      }
      getPixelForValue(e, t) {
        return NaN;
      }
      getValueForPixel(e) {}
      getPixelForTick(e) {
        const t = this.ticks;
        return e < 0 || e > t.length - 1 ? null : this.getPixelForValue(t[e].value);
      }
      getPixelForDecimal(e) {
        if (this._reversePixels) {
          e = 1 - e;
        }
        const t = this._startPixel + e * this._length;
        return function (e) {
          return Math.max(-32768, Math.min(32767, e));
        }(this._alignToPixels ? ln(this.chart, t, 0) : t);
      }
      getDecimalForPixel(e) {
        const t = (e - this._startPixel) / this._length;
        return this._reversePixels ? 1 - t : t;
      }
      getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
      }
      getBaseValue() {
        const {
          min: e,
          max: t
        } = this;
        return e < 0 && t < 0 ? t : e > 0 && t > 0 ? e : 0;
      }
      getContext(e) {
        const t = this.ticks || [];
        if (e >= 0 && e < t.length) {
          const n = t[e];
          return n.$context || (n.$context = function (e, t, n) {
            return Object.assign(Object.create(e), {
              tick: n,
              index: t,
              type: "tick"
            });
          }(this.getContext(), e, n));
        }
        return this.$context || (this.$context = Object.assign(Object.create(this.chart.getContext()), {
          scale: this,
          type: "scale"
        }));
      }
      _tickSize() {
        const e = this.options.ticks;
        const t = this.labelRotation * (Ie / 180);
        const n = Math.abs(Math.cos(t));
        const s = Math.abs(Math.sin(t));
        const i = this._getLabelSizes();
        const a = e.autoSkipPadding || 0;
        const o = i ? i.widest.width + a : 0;
        const r = i ? i.highest.height + a : 0;
        return this.isHorizontal() ? r * n > o * s ? o / n : r / s : r * s < o * n ? r / n : o / s;
      }
      _isVisible() {
        const e = this.options.display;
        return "auto" !== e ? !!e : this.getMatchingVisibleMetas().length > 0;
      }
      _computeGridLineItems(e) {
        const t = this.axis;
        const n = this.chart;
        const s = this.options;
        const {
          grid: i,
          position: a,
          border: o
        } = s;
        const r = i.offset;
        const l = this.isHorizontal();
        const c = this.ticks.length + (r ? 1 : 0);
        const u = i.drawTicks ? i.tickLength : 0;
        const d = [];
        const m = o.setContext(this.getContext());
        const h = m.display ? m.width : 0;
        const g = h / 2;
        const p = function (e) {
          return ln(n, e, h);
        };
        let f;
        let x;
        let v;
        let _;
        let b;
        let T;
        let E;
        let I;
        let y;
        let S;
        let j;
        let C;
        if ("top" === a) {
          f = ln(n, this.bottom, h);
          T = this.bottom - u;
          I = f - g;
          S = ln(n, e.top, h) + g;
          C = e.bottom;
        } else if ("bottom" === a) {
          f = ln(n, this.top, h);
          S = e.top;
          C = ln(n, e.bottom, h) - g;
          T = f + g;
          I = this.top + u;
        } else if ("left" === a) {
          f = ln(n, this.right, h);
          b = this.right - u;
          E = f - g;
          y = ln(n, e.left, h) + g;
          j = e.right;
        } else if ("right" === a) {
          f = ln(n, this.left, h);
          y = e.left;
          j = ln(n, e.right, h) - g;
          b = f + g;
          E = this.left + u;
        } else if ("x" === t) {
          if ("center" === a) {
            f = ln(n, (e.top + e.bottom) / 2 + .5, h);
          } else if (null !== a && "[object Object]" === Object.prototype.toString.call(a)) {
            const e = Object.keys(a)[0];
            const t = a[e];
            f = ln(n, this.chart.scales[e].getPixelForValue(t), h);
          }
          S = e.top;
          C = e.bottom;
          T = f + g;
          I = T + u;
        } else if ("y" === t) {
          if ("center" === a) {
            f = ln(n, (e.left + e.right) / 2, h);
          } else if (null !== a && "[object Object]" === Object.prototype.toString.call(a)) {
            const e = Object.keys(a)[0];
            const t = a[e];
            f = ln(n, this.chart.scales[e].getPixelForValue(t), h);
          }
          b = f - g;
          E = b - u;
          y = e.left;
          j = e.right;
        }
        const N = undefined === s.ticks.maxTicksLimit ? c : s.ticks.maxTicksLimit;
        const w = Math.max(1, Math.ceil(c / N));
        for (x = 0; x < c; x += w) {
          const e = this.getContext(x);
          const t = i.setContext(e);
          const s = o.setContext(e);
          const a = t.lineWidth;
          const c = t.color;
          const u = s.dash || [];
          const m = s.dashOffset;
          const h = t.tickWidth;
          const g = t.tickColor;
          const p = t.tickBorderDash || [];
          const f = t.tickBorderDashOffset;
          v = Zi(this, x, r);
          if (undefined !== v) {
            _ = ln(n, v, a);
            if (l) {
              b = E = y = j = _;
            } else {
              T = I = S = C = _;
            }
            d.push({
              tx1: b,
              ty1: T,
              tx2: E,
              ty2: I,
              x1: y,
              y1: S,
              x2: j,
              y2: C,
              width: a,
              color: c,
              borderDash: u,
              borderDashOffset: m,
              tickWidth: h,
              tickColor: g,
              tickBorderDash: p,
              tickBorderDashOffset: f
            });
          }
        }
        this._ticksLength = c;
        this._borderValue = f;
        return d;
      }
      _computeLabelItems(e) {
        const t = this.axis;
        const n = this.options;
        const {
          position: s,
          ticks: i
        } = n;
        const a = this.isHorizontal();
        const o = this.ticks;
        const {
          align: r,
          crossAlign: l,
          padding: c,
          mirror: u
        } = i;
        const d = n.grid.drawTicks ? n.grid.tickLength : 0;
        const m = d + c;
        const h = u ? -c : m;
        const g = -(this.labelRotation * (Ie / 180));
        const p = [];
        let f;
        let x;
        let v;
        let _;
        let b;
        let T;
        let E;
        let I;
        let y;
        let S;
        let j;
        let C;
        let N = "middle";
        if ("top" === s) {
          T = this.bottom - h;
          E = this._getXAxisLabelAlignment();
        } else if ("bottom" === s) {
          T = this.top + h;
          E = this._getXAxisLabelAlignment();
        } else if ("left" === s) {
          const e = this._getYAxisLabelAlignment(d);
          E = e.textAlign;
          b = e.x;
        } else if ("right" === s) {
          const e = this._getYAxisLabelAlignment(d);
          E = e.textAlign;
          b = e.x;
        } else if ("x" === t) {
          if ("center" === s) {
            T = (e.top + e.bottom) / 2 + m;
          } else if (null !== s && "[object Object]" === Object.prototype.toString.call(s)) {
            const e = Object.keys(s)[0];
            const t = s[e];
            T = this.chart.scales[e].getPixelForValue(t) + m;
          }
          E = this._getXAxisLabelAlignment();
        } else if ("y" === t) {
          if ("center" === s) {
            b = (e.left + e.right) / 2 - m;
          } else if (null !== s && "[object Object]" === Object.prototype.toString.call(s)) {
            const e = Object.keys(s)[0];
            const t = s[e];
            b = this.chart.scales[e].getPixelForValue(t);
          }
          E = this._getYAxisLabelAlignment(d).textAlign;
        }
        if ("y" === t) {
          if ("start" === r) {
            N = "top";
          } else if ("end" === r) {
            N = "bottom";
          }
        }
        const w = this._getLabelSizes();
        f = 0;
        for (x = o.length; f < x; ++f) {
          v = o[f];
          _ = v.label;
          const e = i.setContext(this.getContext(f));
          I = this.getPixelForTick(f) + i.labelOffset;
          y = this._resolveTickFontOptions(f);
          S = y.lineHeight;
          j = ne(_) ? _.length : 1;
          const t = j / 2;
          const n = e.color;
          const r = e.textStrokeColor;
          const c = e.textStrokeWidth;
          let d;
          let m = E;
          if (a) {
            b = I;
            if ("inner" === E) {
              m = f === x - 1 ? this.options.reverse ? "left" : "right" : 0 === f ? this.options.reverse ? "right" : "left" : "center";
            }
            C = "top" === s ? "near" === l || 0 !== g ? -j * S + S / 2 : "center" === l ? -w.highest.height / 2 - t * S + S : -w.highest.height + S / 2 : "near" === l || 0 !== g ? S / 2 : "center" === l ? w.highest.height / 2 - t * S : w.highest.height - j * S;
            if (u) {
              C *= -1;
            }
            if (!(0 === g || e.showLabelBackdrop)) {
              b += S / 2 * Math.sin(g);
            }
          } else {
            T = I;
            C = (1 - j) * S / 2;
          }
          if (e.showLabelBackdrop) {
            const t = Nn(e.backdropPadding);
            const n = w.heights[f];
            const s = w.widths[f];
            let i = C - t.top;
            let a = 0 - t.left;
            switch (N) {
              case "middle":
                i -= n / 2;
                break;
              case "bottom":
                i -= n;
            }
            switch (E) {
              case "center":
                a -= s / 2;
                break;
              case "right":
                a -= s;
            }
            d = {
              left: a,
              top: i,
              width: s + t.width,
              height: n + t.height,
              color: e.backdropColor
            };
          }
          p.push({
            rotation: g,
            label: _,
            font: y,
            color: n,
            strokeColor: r,
            strokeWidth: c,
            textOffset: C,
            textAlign: m,
            textBaseline: N,
            translation: [b, T],
            backdrop: d
          });
        }
        return p;
      }
      _getXAxisLabelAlignment() {
        const {
          position: e,
          ticks: t
        } = this.options;
        if (-(this.labelRotation * (Ie / 180))) {
          return "top" === e ? "left" : "right";
        }
        let n = "center";
        if ("start" === t.align) {
          n = "left";
        } else if ("end" === t.align) {
          n = "right";
        } else if ("inner" === t.align) {
          n = "inner";
        }
        return n;
      }
      _getYAxisLabelAlignment(e) {
        const {
          position: t,
          ticks: {
            crossAlign: n,
            mirror: s,
            padding: i
          }
        } = this.options;
        const a = e + i;
        const o = this._getLabelSizes().widest.width;
        let r;
        let l;
        if ("left" === t) {
          if (s) {
            l = this.right + i;
            if ("near" === n) {
              r = "left";
            } else if ("center" === n) {
              r = "center";
              l += o / 2;
            } else {
              r = "right";
              l += o;
            }
          } else {
            l = this.right - a;
            if ("near" === n) {
              r = "right";
            } else if ("center" === n) {
              r = "center";
              l -= o / 2;
            } else {
              r = "left";
              l = this.left;
            }
          }
        } else if ("right" === t) {
          if (s) {
            l = this.left + i;
            if ("near" === n) {
              r = "right";
            } else if ("center" === n) {
              r = "center";
              l -= o / 2;
            } else {
              r = "left";
              l -= o;
            }
          } else {
            l = this.left + a;
            if ("near" === n) {
              r = "left";
            } else if ("center" === n) {
              r = "center";
              l += o / 2;
            } else {
              r = "right";
              l = this.right;
            }
          }
        } else {
          r = "right";
        }
        return {
          textAlign: r,
          x: l
        };
      }
      _computeLabelArea() {
        if (this.options.ticks.mirror) {
          return;
        }
        const e = this.chart;
        const t = this.options.position;
        return "left" === t || "right" === t ? {
          top: 0,
          left: this.left,
          bottom: e.height,
          right: this.right
        } : "top" === t || "bottom" === t ? {
          top: this.top,
          left: 0,
          bottom: this.bottom,
          right: e.width
        } : undefined;
      }
      drawBackground() {
        const {
          ctx: e,
          options: {
            backgroundColor: t
          },
          left: n,
          top: s,
          width: i,
          height: a
        } = this;
        if (t) {
          e.save();
          e.fillStyle = t;
          e.fillRect(n, s, i, a);
          e.restore();
        }
      }
      getLineWidthForValue(e) {
        const t = this.options.grid;
        if (!this._isVisible() || !t.display) {
          return 0;
        }
        const n = this.ticks.findIndex(t => t.value === e);
        if (n >= 0) {
          return t.setContext(this.getContext(n)).lineWidth;
        }
        return 0;
      }
      drawGrid(e) {
        const t = this.options.grid;
        const n = this.ctx;
        const s = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(e));
        let i;
        let a;
        const o = (e, t, s) => {
          if (s.width && s.color) {
            n.save();
            n.lineWidth = s.width;
            n.strokeStyle = s.color;
            n.setLineDash(s.borderDash || []);
            n.lineDashOffset = s.borderDashOffset;
            n.beginPath();
            n.moveTo(e.x, e.y);
            n.lineTo(t.x, t.y);
            n.stroke();
            n.restore();
          }
        };
        if (t.display) {
          i = 0;
          for (a = s.length; i < a; ++i) {
            const e = s[i];
            if (t.drawOnChartArea) {
              o({
                x: e.x1,
                y: e.y1
              }, {
                x: e.x2,
                y: e.y2
              }, e);
            }
            if (t.drawTicks) {
              o({
                x: e.tx1,
                y: e.ty1
              }, {
                x: e.tx2,
                y: e.ty2
              }, {
                color: e.tickColor,
                width: e.tickWidth,
                borderDash: e.tickBorderDash,
                borderDashOffset: e.tickBorderDashOffset
              });
            }
          }
        }
      }
      drawBorder() {
        const {
          chart: e,
          ctx: t,
          options: {
            border: n,
            grid: s
          }
        } = this;
        const i = n.setContext(this.getContext());
        const a = n.display ? i.width : 0;
        if (!a) {
          return;
        }
        const o = s.setContext(this.getContext(0)).lineWidth;
        const r = this._borderValue;
        let l;
        let c;
        let u;
        let d;
        if (this.isHorizontal()) {
          l = ln(e, this.left, a) - a / 2;
          c = ln(e, this.right, o) + o / 2;
          u = d = r;
        } else {
          u = ln(e, this.top, a) - a / 2;
          d = ln(e, this.bottom, o) + o / 2;
          l = c = r;
        }
        t.save();
        t.lineWidth = i.width;
        t.strokeStyle = i.color;
        t.beginPath();
        t.moveTo(l, u);
        t.lineTo(c, d);
        t.stroke();
        t.restore();
      }
      drawLabels(e) {
        if (!this.options.ticks.display) {
          return;
        }
        const t = this.ctx;
        const n = this._computeLabelArea();
        if (n) {
          hn(t, n);
        }
        const s = this._labelItems || (this._labelItems = this._computeLabelItems(e));
        let i;
        let a;
        i = 0;
        for (a = s.length; i < a; ++i) {
          const e = s[i];
          const n = e.font;
          xn(t, e.label, 0, e.textOffset, n, e);
        }
        if (n) {
          gn(t);
        }
      }
      drawTitle() {
        const {
          ctx: e,
          options: {
            position: t,
            title: n,
            reverse: s
          }
        } = this;
        if (!n.display) {
          return;
        }
        const i = wn(n.font);
        const a = Nn(n.padding);
        const o = n.align;
        let r = i.lineHeight / 2;
        if ("bottom" === t || "center" === t || null !== t && "[object Object]" === Object.prototype.toString.call(t)) {
          r += a.bottom;
          if (ne(n.text)) {
            r += i.lineHeight * (n.text.length - 1);
          }
        } else {
          r += a.top;
        }
        const {
          titleX: l,
          titleY: c,
          maxWidth: u,
          rotation: d
        } = function (e, t, n, s) {
          const {
            top: i,
            left: a,
            bottom: o,
            right: r,
            chart: l
          } = e;
          const {
            chartArea: c,
            scales: u
          } = l;
          let d;
          let m;
          let h;
          let g = 0;
          const p = o - i;
          const f = r - a;
          if (e.isHorizontal()) {
            m = "start" === s ? a : "end" === s ? r : (a + r) / 2;
            if (null !== n && "[object Object]" === Object.prototype.toString.call(n)) {
              const e = Object.keys(n)[0];
              const s = n[e];
              h = u[e].getPixelForValue(s) + p - t;
            } else {
              h = "center" === n ? (c.bottom + c.top) / 2 + p - t : "top" === n || "left" === n ? e[t] + t : e[t] - t;
            }
            d = r - a;
          } else {
            if (null !== n && "[object Object]" === Object.prototype.toString.call(n)) {
              const e = Object.keys(n)[0];
              const s = n[e];
              m = u[e].getPixelForValue(s) - f + t;
            } else {
              m = "center" === n ? (c.left + c.right) / 2 - f + t : "top" === n || "left" === n ? e[t] + t : e[t] - t;
            }
            h = "start" === s ? o : "end" === s ? i : (o + i) / 2;
            g = "left" === n ? -Ne : Ne;
          }
          return {
            titleX: m,
            titleY: h,
            maxWidth: d,
            rotation: g
          };
        }(this, r, t, o);
        xn(e, n.text, 0, 0, i, {
          color: n.color,
          maxWidth: u,
          rotation: d,
          textAlign: ta(o, t, s),
          textBaseline: "middle",
          translation: [l, c]
        });
      }
      draw(e) {
        if (this._isVisible()) {
          this.drawBackground();
          this.drawGrid(e);
          this.drawBorder();
          this.drawTitle();
          this.drawLabels(e);
        }
      }
      _layers() {
        const e = this.options;
        const t = e.ticks && e.ticks.z || 0;
        const n = undefined === (e.grid && e.grid.z) ? -1 : e.grid && e.grid.z;
        const s = undefined === (e.border && e.border.z) ? 0 : e.border && e.border.z;
        return this._isVisible() && this.draw === na.prototype.draw ? [{
          z: n,
          draw: e => {
            this.drawBackground();
            this.drawGrid(e);
            this.drawTitle();
          }
        }, {
          z: s,
          draw: () => {
            this.drawBorder();
          }
        }, {
          z: t,
          draw: e => {
            this.drawLabels(e);
          }
        }] : [{
          z: t,
          draw: e => {
            this.draw(e);
          }
        }];
      }
      getMatchingVisibleMetas(e) {
        const t = this.chart.getSortedVisibleDatasetMetas();
        const n = this.axis + "AxisID";
        const s = [];
        let i;
        let a;
        i = 0;
        for (a = t.length; i < a; ++i) {
          const a = t[i];
          if (!(a[n] !== this.id || e && a.type !== e)) {
            s.push(a);
          }
        }
        return s;
      }
      _resolveTickFontOptions(e) {
        return wn(this.options.ticks.setContext(this.getContext(e)).font);
      }
      _maxDigits() {
        const e = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / e;
      }
    }
    class sa {
      constructor(e, t, n) {
        this.type = e;
        this.scope = t;
        this.override = n;
        this.items = Object.create(null);
      }
      isForType(e) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, e.prototype);
      }
      register(e) {
        const t = Object.getPrototypeOf(e);
        let n;
        if (function (e) {
          return "id" in e && "defaults" in e;
        }(t)) {
          n = this.register(t);
        }
        const s = this.items;
        const i = e.id;
        const a = this.scope + "." + i;
        if (!i) {
          throw new Error("class does not have id: " + e);
        }
        if (!(i in s)) {
          s[i] = e;
          (function (e, t, n) {
            const s = ge(Object.create(null), [n ? an.get(n) : {}, an.get(t), e.defaults]);
            an.set(t, s);
            if (e.defaultRoutes) {
              (function (e, t) {
                Object.keys(t).forEach(n => {
                  const s = n.split(".");
                  const i = s.pop();
                  const a = [e].concat(s).join(".");
                  const o = t[n].split(".");
                  const r = o.pop();
                  const l = o.join(".");
                  an.route(a, i, l, r);
                });
              })(t, e.defaultRoutes);
            }
            if (e.descriptors) {
              an.describe(t, e.descriptors);
            }
          })(e, a, n);
          if (this.override) {
            an.override(e.id, e.overrides);
          }
        }
        return a;
      }
      get(e) {
        return this.items[e];
      }
      unregister(e) {
        const t = this.items;
        const n = e.id;
        const s = this.scope;
        if (n in t) {
          delete t[n];
        }
        if (s && n in an[s]) {
          delete an[s][n];
          if (this.override) {
            delete Jt[n];
          }
        }
      }
    }
    class ia {
      constructor() {
        this.controllers = new sa(Vs, "datasets", true);
        this.elements = new sa(Yi, "elements");
        this.plugins = new sa(Object, "plugins");
        this.scales = new sa(na, "scales");
        this._typedRegistries = [this.controllers, this.scales, this.elements];
      }
      add(...e) {
        this._each("register", e);
      }
      remove(...e) {
        this._each("unregister", e);
      }
      addControllers(...e) {
        this._each("register", e, this.controllers);
      }
      addElements(...e) {
        this._each("register", e, this.elements);
      }
      addPlugins(...e) {
        this._each("register", e, this.plugins);
      }
      addScales(...e) {
        this._each("register", e, this.scales);
      }
      getController(e) {
        return this._get(e, this.controllers, "controller");
      }
      getElement(e) {
        return this._get(e, this.elements, "element");
      }
      getPlugin(e) {
        return this._get(e, this.plugins, "plugin");
      }
      getScale(e) {
        return this._get(e, this.scales, "scale");
      }
      removeControllers(...e) {
        this._each("unregister", e, this.controllers);
      }
      removeElements(...e) {
        this._each("unregister", e, this.elements);
      }
      removePlugins(...e) {
        this._each("unregister", e, this.plugins);
      }
      removeScales(...e) {
        this._each("unregister", e, this.scales);
      }
      _each(e, t, n) {
        [...t].forEach(t => {
          const s = n || this._getRegistryForType(t);
          if (n || s.isForType(t) || s === this.plugins && t.id) {
            this._exec(e, s, t);
          } else {
            ce(t, t => {
              const s = n || this._getRegistryForType(t);
              this._exec(e, s, t);
            });
          }
        });
      }
      _exec(e, t, n) {
        const s = e.charAt(0).toUpperCase() + e.slice(1);
        le(n["before" + s], [], n);
        t[e](n);
        le(n["after" + s], [], n);
      }
      _getRegistryForType(e) {
        for (let t = 0; t < this._typedRegistries.length; t++) {
          const n = this._typedRegistries[t];
          if (n.isForType(e)) {
            return n;
          }
        }
        return this.plugins;
      }
      _get(e, t, n) {
        const s = t.get(e);
        if (undefined === s) {
          throw new Error('"' + e + '" is not a registered ' + n + ".");
        }
        return s;
      }
    }
    var aa = new ia();
    class oa {
      constructor() {
        this._init = [];
      }
      notify(e, t, n, s) {
        if ("beforeInit" === t) {
          this._init = this._createDescriptors(e, true);
          this._notify(this._init, e, "install");
        }
        const i = s ? this._descriptors(e).filter(s) : this._descriptors(e);
        const a = this._notify(i, e, t, n);
        if ("afterDestroy" === t) {
          this._notify(i, e, "stop");
          this._notify(this._init, e, "uninstall");
        }
        return a;
      }
      _notify(e, t, n, s) {
        s = s || {};
        for (const i of e) {
          const e = i.plugin;
          if (false === le(e[n], [t, s, i.options], e) && s.cancelable) {
            return false;
          }
        }
        return true;
      }
      invalidate() {
        if (!(null == this._cache)) {
          this._oldCache = this._cache;
          this._cache = undefined;
        }
      }
      _descriptors(e) {
        if (this._cache) {
          return this._cache;
        }
        const t = this._cache = this._createDescriptors(e);
        this._notifyStateChanges(e);
        return t;
      }
      _createDescriptors(e, t) {
        const n = e && e.config;
        const s = undefined === (n.options && n.options.plugins) ? {} : n.options && n.options.plugins;
        const i = function (e) {
          const t = {};
          const n = [];
          const s = Object.keys(aa.plugins.items);
          for (let e = 0; e < s.length; e++) {
            n.push(aa.getPlugin(s[e]));
          }
          const i = e.plugins || [];
          for (let e = 0; e < i.length; e++) {
            const s = i[e];
            if (-1 === n.indexOf(s)) {
              n.push(s);
              t[s.id] = true;
            }
          }
          return {
            plugins: n,
            localIds: t
          };
        }(n);
        return false !== s || t ? function (e, {
          plugins: t,
          localIds: n
        }, s, i) {
          const a = [];
          const o = e.getContext();
          for (const r of t) {
            const t = r.id;
            const l = i || false !== s[t] ? true === s[t] ? {} : s[t] : null;
            if (null !== l) {
              a.push({
                plugin: r,
                options: la(e.config, {
                  plugin: r,
                  local: n[t]
                }, l, o)
              });
            }
          }
          return a;
        }(e, i, s, t) : [];
      }
      _notifyStateChanges(e) {
        const t = this._oldCache || [];
        const n = this._cache;
        const s = (e, t) => e.filter(e => !t.some(t => e.plugin.id === t.plugin.id));
        this._notify(s(t, n), e, "stop");
        this._notify(s(n, t), e, "start");
      }
    }
    function ra(e, t) {
      return t || false !== e ? true === e ? {} : e : null;
    }
    function la(e, {
      plugin: t,
      local: n
    }, s, i) {
      const a = e.pluginScopeKeys(t);
      const o = e.getOptionScopes(s, a);
      if (n && t.defaults) {
        o.push(t.defaults);
      }
      return e.createResolver(o, i, [""], {
        scriptable: false,
        indexable: false,
        allKeys: true
      });
    }
    function ca(e, t) {
      const n = an.datasets[e] || {};
      return ((t.datasets || {})[e] || {}).indexAxis || t.indexAxis || n.indexAxis || "x";
    }
    function ua(e, t) {
      if ("x" === e || "y" === e || "r" === e) {
        return e;
      }
      var n;
      if (e = t.axis || ("top" === (n = t.position) || "bottom" === n ? "x" : "left" === n || "right" === n ? "y" : undefined) || e.length > 1 && ua(e[0].toLowerCase(), t)) {
        return e;
      }
      throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);
    }
    function da(e) {
      const t = e.options || (e.options = {});
      t.plugins = undefined === t.plugins ? {} : t.plugins;
      t.scales = function (e, t) {
        const n = Jt[e.type] || {
          scales: {}
        };
        const s = t.scales || {};
        const i = ca(e.type, t);
        const a = Object.create(null);
        Object.keys(s).forEach(e => {
          const t = s[e];
          if (!(null !== t && "[object Object]" === Object.prototype.toString.call(t))) {
            return console.error(`Invalid scale configuration for scale: ${e}`);
          }
          if (t._proxy) {
            return console.warn(`Ignoring resolver passed as options for scale: ${e}`);
          }
          const o = ua(e, t);
          const r = function (e, t) {
            return e === t ? "_index_" : "_value_";
          }(o, i);
          const l = n.scales || {};
          a[e] = ge(Object.create(null), [{
            axis: o
          }, t, l[o], l[r]], {
            merger: fe
          });
        });
        e.data.datasets.forEach(n => {
          const i = n.type || e.type;
          const o = n.indexAxis || ca(i, t);
          const r = (Jt[i] || {}).scales || {};
          Object.keys(r).forEach(e => {
            const t = function (e, t) {
              let n = e;
              if ("_index_" === e) {
                n = t;
              } else if ("_value_" === e) {
                n = "x" === t ? "y" : "x";
              }
              return n;
            }(e, o);
            const i = n[t + "AxisID"] || t;
            a[i] = a[i] || Object.create(null);
            ge(a[i], [{
              axis: t
            }, s[i], r[e]], {
              merger: fe
            });
          });
        });
        Object.keys(a).forEach(e => {
          const t = a[e];
          ge(t, [an.scales[t.type], an.scale], {
            merger: fe
          });
        });
        return a;
      }(e, t);
    }
    function ma(e) {
      (e = e || {}).datasets = e.datasets || [];
      e.labels = e.labels || [];
      return e;
    }
    const ha = new Map();
    const ga = new Set();
    function pa(e, t) {
      let n = ha.get(e);
      if (!n) {
        n = t();
        ha.set(e, n);
        ga.add(n);
      }
      return n;
    }
    const fa = (e, t, n) => {
      const s = ve(t, n);
      if (undefined !== s) {
        e.add(s);
      }
    };
    class xa {
      constructor(e) {
        this._config = function (e) {
          (e = e || {}).data = ma(e.data);
          da(e);
          return e;
        }(e);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
      }
      get platform() {
        return this._config.platform;
      }
      get type() {
        return this._config.type;
      }
      set type(e) {
        this._config.type = e;
      }
      get data() {
        return this._config.data;
      }
      set data(e) {
        this._config.data = ma(e);
      }
      get options() {
        return this._config.options;
      }
      set options(e) {
        this._config.options = e;
      }
      get plugins() {
        return this._config.plugins;
      }
      update() {
        const e = this._config;
        this.clearCache();
        da(e);
      }
      clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
      }
      datasetScopeKeys(e) {
        return pa(e, () => [[`datasets.${e}`, ""]]);
      }
      datasetAnimationScopeKeys(e, t) {
        return pa(`${e}.transition.${t}`, () => [[`datasets.${e}.transitions.${t}`, `transitions.${t}`], [`datasets.${e}`, ""]]);
      }
      datasetElementScopeKeys(e, t) {
        return pa(`${e}-${t}`, () => [[`datasets.${e}.elements.${t}`, `datasets.${e}`, `elements.${t}`, ""]]);
      }
      pluginScopeKeys(e) {
        const t = e.id;
        return pa(`${this.type}-plugin-${t}`, () => [[`plugins.${t}`, ...(e.additionalOptionScopes || [])]]);
      }
      _cachedScopes(e, t) {
        const n = this._scopeCache;
        let s = n.get(e);
        if (!(s && !t)) {
          s = new Map();
          n.set(e, s);
        }
        return s;
      }
      getOptionScopes(e, t, n) {
        const {
          options: s,
          type: i
        } = this;
        const a = this._cachedScopes(e, n);
        const o = a.get(t);
        if (o) {
          return o;
        }
        const r = new Set();
        t.forEach(t => {
          if (e) {
            r.add(e);
            t.forEach(t => fa(r, e, t));
          }
          t.forEach(e => fa(r, s, e));
          t.forEach(e => fa(r, Jt[i] || {}, e));
          t.forEach(e => fa(r, an, e));
          t.forEach(e => fa(r, en, e));
        });
        const l = Array.from(r);
        if (0 === l.length) {
          l.push(Object.create(null));
        }
        if (ga.has(t)) {
          a.set(t, l);
        }
        return l;
      }
      chartOptionScopes() {
        const {
          options: e,
          type: t
        } = this;
        return [e, Jt[t] || {}, an.datasets[t] || {}, {
          type: t
        }, an, en];
      }
      resolveNamedOptions(e, t, n, s = [""]) {
        const i = {
          $shared: true
        };
        const {
          resolver: a,
          subPrefixes: o
        } = va(this._resolverCache, e, s);
        let r = a;
        if (function (e, t) {
          const {
            isScriptable: n,
            isIndexable: s
          } = Mn(e);
          for (const i of t) {
            const t = n(i);
            const a = s(i);
            const o = (a || t) && e[i];
            if (t && ("function" == typeof o || _a(o)) || a && ne(o)) {
              return true;
            }
          }
          return false;
        }(a, t)) {
          i.$shared = false;
          r = An(a, n = "function" == typeof n ? n() : n, this.createResolver(e, n, o));
        }
        for (const e of t) i[e] = r[e];
        return i;
      }
      createResolver(e, t, n = [""], s) {
        const {
          resolver: i
        } = va(this._resolverCache, e, n);
        return null !== t && "[object Object]" === Object.prototype.toString.call(t) ? An(i, t, undefined, s) : i;
      }
    }
    function va(e, t, n) {
      let s = e.get(t);
      if (!s) {
        s = new Map();
        e.set(t, s);
      }
      const i = n.join();
      let a = s.get(i);
      if (!a) {
        a = {
          resolver: Ln(t, n),
          subPrefixes: n.filter(e => !e.toLowerCase().includes("hover"))
        };
        s.set(i, a);
      }
      return a;
    }
    const _a = e => null !== e && "[object Object]" === Object.prototype.toString.call(e) && Object.getOwnPropertyNames(e).reduce((t, n) => t || "function" == typeof e[n], false);
    const ba = ["top", "bottom", "left", "right", "chartArea"];
    function Ta(e, t) {
      return "top" === e || "bottom" === e || -1 === ba.indexOf(e) && "x" === t;
    }
    function Ea(e, t) {
      return function (n, s) {
        return n[e] === s[e] ? n[t] - s[t] : n[e] - s[e];
      };
    }
    function Ia(e) {
      const t = e.chart;
      const n = t.options.animation;
      t.notifyPlugins("afterRender");
      le(n && n.onComplete, [e], t);
    }
    function ya(e) {
      const t = e.chart;
      const n = t.options.animation;
      le(n && n.onProgress, [e], t);
    }
    function Sa(e) {
      if ("undefined" != typeof window && "undefined" != typeof document && "string" == typeof e) {
        e = document.getElementById(e);
      } else if (e && e.length) {
        e = e[0];
      }
      if (e && e.canvas) {
        e = e.canvas;
      }
      return e;
    }
    const ja = {};
    const Ca = e => {
      const t = Sa(e);
      return Object.values(ja).filter(e => e.canvas === t).pop();
    };
    function Na(e, t, n) {
      const s = Object.keys(e);
      for (const i of s) {
        const s = +i;
        if (s >= t) {
          const a = e[i];
          delete e[i];
          if (n > 0 || s > t) {
            e[s + n] = a;
          }
        }
      }
    }
    class wa {
      static defaults = an;
      static instances = ja;
      static overrides = Jt;
      static registry = aa;
      static version = "4.0.1";
      static getChart = Ca;
      static register(...e) {
        aa.add(...e);
        Oa();
      }
      static unregister(...e) {
        aa.remove(...e);
        Oa();
      }
      constructor(e, t) {
        const n = this.config = new xa(t);
        const s = Sa(e);
        const i = Ca(s);
        if (i) {
          throw new Error("Canvas is already in use. Chart with ID '" + i.id + "' must be destroyed before the canvas with ID '" + i.canvas.id + "' can be reused.");
        }
        const a = n.createResolver(n.chartOptionScopes(), this.getContext());
        this.platform = new (n.platform || (!Jn() || "undefined" != typeof OffscreenCanvas && s instanceof OffscreenCanvas ? Oi : Wi))();
        this.platform.updateConfig(n);
        const o = this.platform.acquireContext(s, a.aspectRatio);
        const r = o && o.canvas;
        const l = r && r.height;
        const c = r && r.width;
        this.id = ee();
        this.ctx = o;
        this.canvas = r;
        this.width = c;
        this.height = l;
        this._options = a;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new oa();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = function (e, t) {
          let n;
          return function (...s) {
            if (t) {
              clearTimeout(n);
              n = setTimeout(e, t, s);
            } else {
              e.apply(this, s);
            }
            return t;
          };
        }(e => this.update(e), a.resizeDelay || 0);
        this._dataChanges = [];
        ja[this.id] = this;
        if (o && r) {
          js.listen(this, "complete", Ia);
          js.listen(this, "progress", ya);
          this._initialize();
          if (this.attached) {
            this.update();
          }
        } else {
          console.error("Failed to create chart: can't acquire context from the given item");
        }
      }
      get aspectRatio() {
        const {
          options: {
            aspectRatio: e,
            maintainAspectRatio: t
          },
          width: n,
          height: s,
          _aspectRatio: i
        } = this;
        return null == e ? t && i ? i : s ? n / s : null : e;
      }
      get data() {
        return this.config.data;
      }
      set data(e) {
        this.config.data = e;
      }
      get options() {
        return this._options;
      }
      set options(e) {
        this.config.options = e;
      }
      get registry() {
        return aa;
      }
      _initialize() {
        this.notifyPlugins("beforeInit");
        if (this.options.responsive) {
          this.resize();
        } else {
          cs(this, this.options.devicePixelRatio);
        }
        this.bindEvents();
        this.notifyPlugins("afterInit");
        return this;
      }
      clear() {
        cn(this.canvas, this.ctx);
        return this;
      }
      stop() {
        js.stop(this);
        return this;
      }
      resize(e, t) {
        if (js.running(this)) {
          this._resizeBeforeDraw = {
            width: e,
            height: t
          };
        } else {
          this._resize(e, t);
        }
      }
      _resize(e, t) {
        const n = this.options;
        const s = this.canvas;
        const i = n.maintainAspectRatio && this.aspectRatio;
        const a = this.platform.getMaximumSize(s, e, t, i);
        const o = n.devicePixelRatio || this.platform.getDevicePixelRatio();
        const r = this.width ? "resize" : "attach";
        this.width = a.width;
        this.height = a.height;
        this._aspectRatio = this.aspectRatio;
        if (cs(this, o, true)) {
          this.notifyPlugins("resize", {
            size: a
          });
          le(n.onResize, [this, a], this);
          if (this.attached && this._doResize(r)) {
            this.render();
          }
        }
      }
      ensureScalesHaveIDs() {
        ce(this.options.scales || {}, (e, t) => {
          e.id = t;
        });
      }
      buildOrUpdateScales() {
        const e = this.options;
        const t = e.scales;
        const n = this.scales;
        const s = Object.keys(n).reduce((e, t) => (e[t] = false, e), {});
        let i = [];
        if (t) {
          i = i.concat(Object.keys(t).map(e => {
            const n = t[e];
            const s = ua(e, n);
            const i = "r" === s;
            const a = "x" === s;
            return {
              options: n,
              dposition: i ? "chartArea" : a ? "bottom" : "left",
              dtype: i ? "radialLinear" : a ? "category" : "linear"
            };
          }));
        }
        ce(i, t => {
          const i = t.options;
          const a = i.id;
          const o = ua(a, i);
          const r = undefined === i.type ? t.dtype : i.type;
          if (!(undefined !== i.position && ("top" === i.position || "bottom" === i.position || -1 === ba.indexOf(i.position) && "x" === o) === ("top" === t.dposition || "bottom" === t.dposition || -1 === ba.indexOf(t.dposition) && false))) {
            i.position = t.dposition;
          }
          s[a] = true;
          let l = null;
          if (a in n && n[a].type === r) {
            l = n[a];
          } else {
            l = new (aa.getScale(r))({
              id: a,
              type: r,
              ctx: this.ctx,
              chart: this
            });
            n[l.id] = l;
          }
          l.init(i, e);
        });
        ce(s, (e, t) => {
          if (!e) {
            delete n[t];
          }
        });
        ce(n, e => {
          Ni.configure(this, e, e.options);
          Ni.addBox(this, e);
        });
      }
      _updateMetasets() {
        const e = this._metasets;
        const t = this.data.datasets.length;
        const n = e.length;
        e.sort((e, t) => e.index - t.index);
        if (n > t) {
          for (let e = t; e < n; ++e) {
            this._destroyDatasetMeta(e);
          }
          e.splice(t, n - t);
        }
        this._sortedMetasets = e.slice(0).sort(Ea("order", "index"));
      }
      _removeUnreferencedMetasets() {
        const {
          _metasets: e,
          data: {
            datasets: t
          }
        } = this;
        if (e.length > t.length) {
          delete this._stacks;
        }
        e.forEach((e, n) => {
          if (0 === t.filter(t => t === e._dataset).length) {
            this._destroyDatasetMeta(n);
          }
        });
      }
      buildOrUpdateControllers() {
        const e = [];
        const t = this.data.datasets;
        let n;
        let s;
        this._removeUnreferencedMetasets();
        n = 0;
        for (s = t.length; n < s; n++) {
          const s = t[n];
          let i = this.getDatasetMeta(n);
          const a = s.type || this.config.type;
          if (i.type && i.type !== a) {
            this._destroyDatasetMeta(n);
            i = this.getDatasetMeta(n);
          }
          i.type = a;
          i.indexAxis = s.indexAxis || ca(a, this.options);
          i.order = s.order || 0;
          i.index = n;
          i.label = "" + s.label;
          i.visible = this.isDatasetVisible(n);
          if (i.controller) {
            i.controller.updateIndex(n);
            i.controller.linkScales();
          } else {
            const t = aa.getController(a);
            const {
              datasetElementType: s,
              dataElementType: o
            } = an.datasets[a];
            Object.assign(t, {
              dataElementType: aa.getElement(o),
              datasetElementType: s && aa.getElement(s)
            });
            i.controller = new t(this, n);
            e.push(i.controller);
          }
        }
        this._updateMetasets();
        return e;
      }
      _resetElements() {
        ce(this.data.datasets, (e, t) => {
          this.getDatasetMeta(t).controller.reset();
        }, this);
      }
      reset() {
        this._resetElements();
        this.notifyPlugins("reset");
      }
      update(e) {
        const t = this.config;
        t.update();
        const n = this._options = t.createResolver(t.chartOptionScopes(), this.getContext());
        const s = this._animationsDisabled = !n.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (false === this.notifyPlugins("beforeUpdate", {
          mode: e,
          cancelable: true
        })) {
          return;
        }
        const i = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        let a = 0;
        let e = 0;
        for (let t = this.data.datasets.length; e < t; e++) {
          const {
            controller: t
          } = this.getDatasetMeta(e);
          const n = !s && -1 === i.indexOf(t);
          t.buildOrUpdateElements(n);
          a = Math.max(+t.getMaxOverflow(), a);
        }
        a = this._minPadding = n.layout.autoPadding ? a : 0;
        this._updateLayout(a);
        if (!s) {
          ce(i, e => {
            e.reset();
          });
        }
        this._updateDatasets(e);
        this.notifyPlugins("afterUpdate", {
          mode: e
        });
        this._layers.sort(Ea("z", "_idx"));
        const {
          _active: o,
          _lastEvent: r
        } = this;
        if (r) {
          this._eventHandler(r, true);
        } else if (o.length) {
          this._updateHoverStyles(o, o, true);
        }
        this.render();
      }
      _updateScales() {
        ce(this.scales, e => {
          Ni.removeBox(this, e);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
      }
      _checkEventBindings() {
        const e = this.options;
        const t = new Set(Object.keys(this._listeners));
        const n = new Set(e.events);
        if (!(Ee(t, n) && !!this._responsiveListeners === e.responsive)) {
          this.unbindEvents();
          this.bindEvents();
        }
      }
      _updateHiddenIndices() {
        const {
          _hiddenIndices: e
        } = this;
        const t = this._getUniformDataChanges() || [];
        for (const {
          method: n,
          start: s,
          count: i
        } of t) {
          Na(e, s, "_removeElements" === n ? -i : i);
        }
      }
      _getUniformDataChanges() {
        const e = this._dataChanges;
        if (!e || !e.length) {
          return;
        }
        this._dataChanges = [];
        const t = this.data.datasets.length;
        const n = t => new Set(e.filter(e => e[0] === t).map((e, t) => t + "," + e.splice(1).join(",")));
        const s = n(0);
        for (let e = 1; e < t; e++) {
          if (!Ee(s, n(e))) {
            return;
          }
        }
        return Array.from(s).map(e => e.split(",")).map(e => ({
          method: e[1],
          start: +e[2],
          count: +e[3]
        }));
      }
      _updateLayout(e) {
        if (false === this.notifyPlugins("beforeLayout", {
          cancelable: true
        })) {
          return;
        }
        Ni.update(this, this.width, this.height, e);
        const t = this.chartArea;
        const n = t.width <= 0 || t.height <= 0;
        this._layers = [];
        ce(this.boxes, e => {
          if (!(n && "chartArea" === e.position)) {
            if (e.configure) {
              e.configure();
            }
            this._layers.push(...e._layers());
          }
        }, this);
        this._layers.forEach((e, t) => {
          e._idx = t;
        });
        this.notifyPlugins("afterLayout");
      }
      _updateDatasets(e) {
        if (false !== this.notifyPlugins("beforeDatasetsUpdate", {
          mode: e,
          cancelable: true
        })) {
          let e = 0;
          for (let t = this.data.datasets.length; e < t; ++e) {
            this.getDatasetMeta(e).controller.configure();
          }
          let t = 0;
          for (let n = this.data.datasets.length; t < n; ++t) {
            this._updateDataset(t, "function" == typeof e ? e({
              datasetIndex: t
            }) : e);
          }
          this.notifyPlugins("afterDatasetsUpdate", {
            mode: e
          });
        }
      }
      _updateDataset(e, t) {
        const n = this.getDatasetMeta(e);
        const s = {
          meta: n,
          index: e,
          mode: t,
          cancelable: true
        };
        if (false !== this.notifyPlugins("beforeDatasetUpdate", s)) {
          n.controller._update(t);
          s.cancelable = false;
          this.notifyPlugins("afterDatasetUpdate", s);
        }
      }
      render() {
        if (false !== this.notifyPlugins("beforeRender", {
          cancelable: true
        })) {
          if (js.has(this)) {
            if (this.attached && !js.running(this)) {
              js.start(this);
            }
          } else {
            this.draw();
            Ia({
              chart: this
            });
          }
        }
      }
      draw() {
        let e;
        if (this._resizeBeforeDraw) {
          const {
            width: e,
            height: t
          } = this._resizeBeforeDraw;
          this._resize(e, t);
          this._resizeBeforeDraw = null;
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) {
          return;
        }
        if (false === this.notifyPlugins("beforeDraw", {
          cancelable: true
        })) {
          return;
        }
        const t = this._layers;
        for (e = 0; e < t.length && t[e].z <= 0; ++e) {
          t[e].draw(this.chartArea);
        }
        for (this._drawDatasets(); e < t.length; ++e) {
          t[e].draw(this.chartArea);
        }
        this.notifyPlugins("afterDraw");
      }
      _getSortedDatasetMetas(e) {
        const t = this._sortedMetasets;
        const n = [];
        let s;
        let i;
        s = 0;
        for (i = t.length; s < i; ++s) {
          const i = t[s];
          if (!(e && !i.visible)) {
            n.push(i);
          }
        }
        return n;
      }
      getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
      }
      _drawDatasets() {
        if (false === this.notifyPlugins("beforeDatasetsDraw", {
          cancelable: true
        })) {
          return;
        }
        const e = this.getSortedVisibleDatasetMetas();
        for (let t = e.length - 1; t >= 0; --t) {
          this._drawDataset(e[t]);
        }
        this.notifyPlugins("afterDatasetsDraw");
      }
      _drawDataset(e) {
        const t = this.ctx;
        const n = e._clip;
        const s = !n.disabled;
        const i = function (e) {
          const {
            xScale: t,
            yScale: n
          } = e;
          if (t && n) {
            return {
              left: t.left,
              right: t.right,
              top: n.top,
              bottom: n.bottom
            };
          }
        }(e) || this.chartArea;
        const a = {
          meta: e,
          index: e.index,
          cancelable: true
        };
        if (false !== this.notifyPlugins("beforeDatasetDraw", a)) {
          if (s) {
            hn(t, {
              left: false === n.left ? 0 : i.left - n.left,
              right: false === n.right ? this.width : i.right + n.right,
              top: false === n.top ? 0 : i.top - n.top,
              bottom: false === n.bottom ? this.height : i.bottom + n.bottom
            });
          }
          e.controller.draw();
          if (s) {
            gn(t);
          }
          a.cancelable = false;
          this.notifyPlugins("afterDatasetDraw", a);
        }
      }
      isPointInArea(e) {
        return mn(e, this.chartArea, this._minPadding);
      }
      getElementsAtEventForMode(e, t, n, s) {
        const i = pi.modes[t];
        return "function" == typeof i ? i(this, e, n, s) : [];
      }
      getDatasetMeta(e) {
        const t = this.data.datasets[e];
        const n = this._metasets;
        let s = n.filter(e => e && e._dataset === t).pop();
        if (!s) {
          s = {
            type: null,
            data: [],
            dataset: null,
            controller: null,
            hidden: null,
            xAxisID: null,
            yAxisID: null,
            order: t && t.order || 0,
            index: e,
            _dataset: t,
            _parsed: [],
            _sorted: false
          };
          n.push(s);
        }
        return s;
      }
      getContext() {
        return this.$context || (this.$context = Object.assign(Object.create(null), {
          chart: this,
          type: "chart"
        }));
      }
      getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
      }
      isDatasetVisible(e) {
        const t = this.data.datasets[e];
        if (!t) {
          return false;
        }
        const n = this.getDatasetMeta(e);
        return "boolean" == typeof n.hidden ? !n.hidden : !t.hidden;
      }
      setDatasetVisibility(e, t) {
        this.getDatasetMeta(e).hidden = !t;
      }
      toggleDataVisibility(e) {
        this._hiddenIndices[e] = !this._hiddenIndices[e];
      }
      getDataVisibility(e) {
        return !this._hiddenIndices[e];
      }
      _updateVisibility(e, t, n) {
        const s = n ? "show" : "hide";
        const i = this.getDatasetMeta(e);
        const a = i.controller._resolveAnimations(undefined, s);
        if (undefined !== t) {
          i.data[t].hidden = !n;
          this.update();
        } else {
          this.setDatasetVisibility(e, n);
          a.update(i, {
            visible: n
          });
          this.update(t => t.datasetIndex === e ? s : undefined);
        }
      }
      hide(e, t) {
        this._updateVisibility(e, t, false);
      }
      show(e, t) {
        this._updateVisibility(e, t, true);
      }
      _destroyDatasetMeta(e) {
        const t = this._metasets[e];
        if (t && t.controller) {
          t.controller._destroy();
        }
        delete this._metasets[e];
      }
      _stop() {
        let e;
        let t;
        this.stop();
        js.remove(this);
        e = 0;
        for (t = this.data.datasets.length; e < t; ++e) {
          this._destroyDatasetMeta(e);
        }
      }
      destroy() {
        this.notifyPlugins("beforeDestroy");
        const {
          canvas: e,
          ctx: t
        } = this;
        this._stop();
        this.config.clearCache();
        if (e) {
          this.unbindEvents();
          cn(e, t);
          this.platform.releaseContext(t);
          this.canvas = null;
          this.ctx = null;
        }
        delete ja[this.id];
        this.notifyPlugins("afterDestroy");
      }
      toBase64Image(...e) {
        return this.canvas.toDataURL(...e);
      }
      bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) {
          this.bindResponsiveEvents();
        } else {
          this.attached = true;
        }
      }
      bindUserEvents() {
        const e = this._listeners;
        const t = this.platform;
        const n = (n, s) => {
          t.addEventListener(this, n, s);
          e[n] = s;
        };
        const s = (e, t, n) => {
          e.offsetX = t;
          e.offsetY = n;
          this._eventHandler(e);
        };
        ce(this.options.events, e => n(e, s));
      }
      bindResponsiveEvents() {
        if (!this._responsiveListeners) {
          this._responsiveListeners = {};
        }
        const e = this._responsiveListeners;
        const t = this.platform;
        const n = (n, s) => {
          t.addEventListener(this, n, s);
          e[n] = s;
        };
        const s = (n, s) => {
          if (e[n]) {
            t.removeEventListener(this, n, s);
            delete e[n];
          }
        };
        const i = (e, t) => {
          if (this.canvas) {
            this.resize(e, t);
          }
        };
        let a;
        const o = () => {
          s("attach", o);
          this.attached = true;
          this.resize();
          n("resize", i);
          n("detach", a);
        };
        a = () => {
          this.attached = false;
          s("resize", i);
          this._stop();
          this._resize(0, 0);
          n("attach", o);
        };
        if (t.isAttached(this.canvas)) {
          o();
        } else {
          a();
        }
      }
      unbindEvents() {
        ce(this._listeners, (e, t) => {
          this.platform.removeEventListener(this, t, e);
        });
        this._listeners = {};
        ce(this._responsiveListeners, (e, t) => {
          this.platform.removeEventListener(this, t, e);
        });
        this._responsiveListeners = undefined;
      }
      updateHoverStyle(e, t, n) {
        const s = n ? "set" : "remove";
        let i;
        let a;
        let o;
        let r;
        if ("dataset" === t) {
          i = this.getDatasetMeta(e[0].datasetIndex);
          i.controller["_" + s + "DatasetHoverStyle"]();
        }
        o = 0;
        for (r = e.length; o < r; ++o) {
          a = e[o];
          const t = a && this.getDatasetMeta(a.datasetIndex).controller;
          if (t) {
            t[s + "HoverStyle"](a.element, a.datasetIndex, a.index);
          }
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(e) {
        const t = this._active || [];
        const n = e.map(({
          datasetIndex: e,
          index: t
        }) => {
          const n = this.getDatasetMeta(e);
          if (!n) {
            throw new Error("No dataset found at index " + e);
          }
          return {
            datasetIndex: e,
            element: n.data[t],
            index: t
          };
        });
        if (!ue(n, t)) {
          this._active = n;
          this._lastEvent = null;
          this._updateHoverStyles(n, t);
        }
      }
      notifyPlugins(e, t, n) {
        return this._plugins.notify(this, e, t, n);
      }
      isPluginEnabled(e) {
        return 1 === this._plugins._cache.filter(t => t.plugin.id === e).length;
      }
      _updateHoverStyles(e, t, n) {
        const s = this.options.hover;
        const i = (e, t) => e.filter(e => !t.some(t => e.datasetIndex === t.datasetIndex && e.index === t.index));
        const a = i(t, e);
        const o = n ? e : i(e, t);
        if (a.length) {
          this.updateHoverStyle(a, s.mode, false);
        }
        if (o.length && s.mode) {
          this.updateHoverStyle(o, s.mode, true);
        }
      }
      _eventHandler(e, t) {
        const n = {
          event: e,
          replay: t,
          cancelable: true,
          inChartArea: this.isPointInArea(e)
        };
        const s = t => (t.options.events || this.options.events).includes(e.native.type);
        if (false === this.notifyPlugins("beforeEvent", n, s)) {
          return;
        }
        const i = this._handleEvent(e, t, n.inChartArea);
        n.cancelable = false;
        this.notifyPlugins("afterEvent", n, s);
        if (i || n.changed) {
          this.render();
        }
        return this;
      }
      _handleEvent(e, t, n) {
        const {
          _active: s = [],
          options: i
        } = this;
        const o = this._getActiveElements(e, s, n, t);
        const r = function (e) {
          return "mouseup" === e.type || "click" === e.type || "contextmenu" === e.type;
        }(e);
        const l = function (e, t, n, s) {
          return n && "mouseout" !== e.type ? s ? t : e : null;
        }(e, this._lastEvent, n, r);
        if (n) {
          this._lastEvent = null;
          le(i.onHover, [e, o, this], this);
          if (r) {
            le(i.onClick, [e, o, this], this);
          }
        }
        const c = !ue(o, s);
        if (c || t) {
          this._active = o;
          this._updateHoverStyles(o, s, t);
        }
        this._lastEvent = l;
        return c;
      }
      _getActiveElements(e, t, n, s) {
        if ("mouseout" === e.type) {
          return [];
        }
        if (!n) {
          return t;
        }
        const i = this.options.hover;
        return this.getElementsAtEventForMode(e, i.mode, i, s);
      }
    }
    function Oa() {
      return ce(wa.instances, e => e._plugins.invalidate());
    }
    function La(e, t, n, s) {
      const i = function (e) {
        return Sn(e, ["outerStart", "outerEnd", "innerStart", "innerEnd"]);
      }(e.options.borderRadius);
      const a = (n - t) / 2;
      const o = Math.min(a, s * t / 2);
      const r = e => {
        const t = (n - Math.min(a, e)) * s / 2;
        return Math.max(0, Math.min(Math.min(a, t), e));
      };
      return {
        outerStart: r(i.outerStart),
        outerEnd: r(i.outerEnd),
        innerStart: Math.max(0, Math.min(o, i.innerStart)),
        innerEnd: Math.max(0, Math.min(o, i.innerEnd))
      };
    }
    function Aa(e, t, n, s) {
      return {
        x: n + e * Math.cos(t),
        y: s + e * Math.sin(t)
      };
    }
    function Ma(e, t, n, s, i, a) {
      const {
        x: o,
        y: r,
        startAngle: l,
        pixelMargin: c,
        innerRadius: u
      } = t;
      const d = Math.max(t.outerRadius + s + n - c, 0);
      const m = u > 0 ? u + s + n + c : 0;
      let h = 0;
      const g = i - l;
      if (s) {
        const e = ((u > 0 ? u - s : 0) + (d > 0 ? d - s : 0)) / 2;
        h = (g - (0 !== e ? g * e / (e + s) : g)) / 2;
      }
      const p = (g - Math.max(.001, g * d - n / Ie) / d) / 2;
      const f = l + p + h;
      const x = i - p - h;
      const {
        outerStart: v,
        outerEnd: _,
        innerStart: b,
        innerEnd: T
      } = La(t, m, d, x - f);
      const E = d - v;
      const I = d - _;
      const y = f + v / E;
      const S = x - _ / I;
      const j = m + b;
      const C = m + T;
      const N = f + b / j;
      const w = x - T / C;
      e.beginPath();
      if (a) {
        const t = (y + S) / 2;
        e.arc(o, r, d, y, t);
        e.arc(o, r, d, t, S);
        if (_ > 0) {
          const t = {
            x: o + I * Math.cos(S),
            y: r + I * Math.sin(S)
          };
          e.arc(t.x, t.y, _, S, x + Ne);
        }
        const n = {
          x: o + C * Math.cos(x),
          y: r + C * Math.sin(x)
        };
        e.lineTo(n.x, n.y);
        if (T > 0) {
          const t = {
            x: o + C * Math.cos(w),
            y: r + C * Math.sin(w)
          };
          e.arc(t.x, t.y, T, x + Ne, w + Math.PI);
        }
        const s = (x - T / m + (f + b / m)) / 2;
        e.arc(o, r, m, x - T / m, s, true);
        e.arc(o, r, m, s, f + b / m, true);
        if (b > 0) {
          const t = {
            x: o + j * Math.cos(N),
            y: r + j * Math.sin(N)
          };
          e.arc(t.x, t.y, b, N + Math.PI, f - Ne);
        }
        const i = {
          x: o + E * Math.cos(f),
          y: r + E * Math.sin(f)
        };
        e.lineTo(i.x, i.y);
        if (v > 0) {
          const t = {
            x: o + E * Math.cos(y),
            y: r + E * Math.sin(y)
          };
          e.arc(t.x, t.y, v, f - Ne, y);
        }
      } else {
        e.moveTo(o, r);
        const t = Math.cos(y) * d + o;
        const n = Math.sin(y) * d + r;
        e.lineTo(t, n);
        const s = Math.cos(S) * d + o;
        const i = Math.sin(S) * d + r;
        e.lineTo(s, i);
      }
      e.closePath();
    }
    function Ra(e, t, n, s, i) {
      const {
        fullCircles: a,
        startAngle: o,
        circumference: r,
        options: l
      } = t;
      const {
        borderWidth: c,
        borderJoinStyle: u
      } = l;
      const d = "inner" === l.borderAlign;
      if (!c) {
        return;
      }
      if (d) {
        e.lineWidth = 2 * c;
        e.lineJoin = u || "round";
      } else {
        e.lineWidth = c;
        e.lineJoin = u || "bevel";
      }
      let m = t.endAngle;
      if (a) {
        Ma(e, t, n, s, m, i);
        for (let t = 0; t < a; ++t) {
          e.stroke();
        }
        if (!isNaN(r)) {
          m = o + (r % ye || ye);
        }
      }
      if (d) {
        (function (e, t, n) {
          const {
            startAngle: s,
            pixelMargin: i,
            x: a,
            y: o,
            outerRadius: r,
            innerRadius: l
          } = t;
          let c = i / r;
          e.beginPath();
          e.arc(a, o, r, s - c, n + c);
          if (l > i) {
            c = i / l;
            e.arc(a, o, l, n + c, s - c, true);
          } else {
            e.arc(a, o, i, n + Ne, s - Ne);
          }
          e.closePath();
          e.clip();
        })(e, t, m);
      }
      if (!a) {
        Ma(e, t, n, s, m, i);
        e.stroke();
      }
    }
    class ka extends Yi {
      static id = "arc";
      static defaults = {
        borderAlign: "center",
        borderColor: "#fff",
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined,
        circular: true
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor"
      };
      constructor(e) {
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (e) {
          Object.assign(this, e);
        }
      }
      inRange(e, t, n) {
        const s = this.getProps(["x", "y"], n);
        const {
          angle: i,
          distance: a
        } = Be(s, {
          x: e,
          y: t
        });
        const {
          startAngle: o,
          endAngle: r,
          innerRadius: l,
          outerRadius: c,
          circumference: u
        } = this.getProps(["startAngle", "endAngle", "innerRadius", "outerRadius", "circumference"], n);
        const d = this.options.spacing / 2;
        const m = (undefined === u ? r - o : u) >= ye || Ke(i, o, r);
        const h = ze(a, l + d, c + d);
        return m && h;
      }
      getCenterPoint(e) {
        const {
          x: t,
          y: n,
          startAngle: s,
          endAngle: i,
          innerRadius: a,
          outerRadius: o
        } = this.getProps(["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius", "circumference"], e);
        const {
          offset: r,
          spacing: l
        } = this.options;
        const c = (s + i) / 2;
        const u = (a + o + l + r) / 2;
        return {
          x: t + Math.cos(c) * u,
          y: n + Math.sin(c) * u
        };
      }
      tooltipPosition(e) {
        return this.getCenterPoint(e);
      }
      draw(e) {
        const {
          options: t,
          circumference: n
        } = this;
        const s = (t.offset || 0) / 4;
        const i = (t.spacing || 0) / 2;
        const a = t.circular;
        this.pixelMargin = "inner" === t.borderAlign ? .33 : 0;
        this.fullCircles = n > ye ? Math.floor(n / ye) : 0;
        if (0 === n || this.innerRadius < 0 || this.outerRadius < 0) {
          return;
        }
        e.save();
        const o = (this.startAngle + this.endAngle) / 2;
        e.translate(Math.cos(o) * s, Math.sin(o) * s);
        const r = s * (1 - Math.sin(Math.min(Ie, n || 0)));
        e.fillStyle = t.backgroundColor;
        e.strokeStyle = t.borderColor;
        (function (e, t, n, s, i) {
          const {
            fullCircles: a,
            startAngle: o,
            circumference: r
          } = t;
          let l = t.endAngle;
          if (a) {
            Ma(e, t, n, s, l, i);
            for (let t = 0; t < a; ++t) {
              e.fill();
            }
            if (!isNaN(r)) {
              l = o + (r % ye || ye);
            }
          }
          Ma(e, t, n, s, l, i);
          e.fill();
        })(e, this, r, i, a);
        Ra(e, this, r, i, a);
        e.restore();
      }
    }
    function Da(e, t, n = t) {
      e.lineCap = undefined === n.borderCapStyle ? t.borderCapStyle : n.borderCapStyle;
      e.setLineDash(undefined === n.borderDash ? t.borderDash : n.borderDash);
      e.lineDashOffset = undefined === n.borderDashOffset ? t.borderDashOffset : n.borderDashOffset;
      e.lineJoin = undefined === n.borderJoinStyle ? t.borderJoinStyle : n.borderJoinStyle;
      e.lineWidth = undefined === n.borderWidth ? t.borderWidth : n.borderWidth;
      e.strokeStyle = undefined === n.borderColor ? t.borderColor : n.borderColor;
    }
    function Fa(e, t, n) {
      e.lineTo(n.x, n.y);
    }
    function Ua(e, t, n = {}) {
      const s = e.length;
      const {
        start: i = 0,
        end: a = s - 1
      } = n;
      const {
        start: o,
        end: r
      } = t;
      const l = Math.max(i, o);
      const c = Math.min(a, r);
      const u = i < o && a < o || i > r && a > r;
      return {
        count: s,
        start: l,
        loop: t.loop,
        ilen: c < l && !u ? s + c - l : c - l
      };
    }
    function Ba(e, t, n, s) {
      const {
        points: i,
        options: a
      } = t;
      const {
        count: o,
        start: r,
        loop: l,
        ilen: c
      } = Ua(i, n, s);
      const u = function (e) {
        return e.stepped ? pn : e.tension || "monotone" === e.cubicInterpolationMode ? fn : Fa;
      }(a);
      let d;
      let m;
      let h;
      let {
        move: g = true,
        reverse: p
      } = s || {};
      for (d = 0; d <= c; ++d) {
        m = i[(r + (p ? c - d : d)) % o];
        if (!m.skip) {
          if (g) {
            e.moveTo(m.x, m.y);
            g = false;
          } else {
            u(e, h, m, p, a.stepped);
          }
          h = m;
        }
      }
      if (l) {
        m = i[(r + (p ? c : 0)) % o];
        u(e, h, m, p, a.stepped);
      }
      return !!l;
    }
    function Ga(e, t, n, s) {
      const i = t.points;
      const {
        count: a,
        start: o,
        ilen: r
      } = Ua(i, n, s);
      const {
        move: l = true,
        reverse: c
      } = s || {};
      let u;
      let d;
      let m;
      let h;
      let g;
      let p;
      let f = 0;
      let x = 0;
      const v = e => (o + (c ? r - e : e)) % a;
      const _ = () => {
        if (h !== g) {
          e.lineTo(f, g);
          e.lineTo(f, h);
          e.lineTo(f, p);
        }
      };
      if (l) {
        d = i[(o + (c ? r - 0 : 0)) % a];
        e.moveTo(d.x, d.y);
      }
      for (u = 0; u <= r; ++u) {
        d = i[(o + (c ? r - u : u)) % a];
        if (d.skip) {
          continue;
        }
        const t = d.x;
        const n = d.y;
        const s = 0 | t;
        if (s === m) {
          if (n < h) {
            h = n;
          } else if (n > g) {
            g = n;
          }
          f = (x * f + t) / ++x;
        } else {
          _();
          e.lineTo(t, n);
          m = s;
          x = 0;
          h = g = n;
        }
        p = n;
      }
      _();
    }
    function Va(e) {
      const t = e.options;
      const n = t.borderDash && t.borderDash.length;
      return !(e._decimated || e._loop || t.tension || "monotone" === t.cubicInterpolationMode || t.stepped || n) ? Ga : Ba;
    }
    const Ha = "function" == typeof Path2D;
    function Ka(e, t, n, s) {
      if (Ha && !t.options.segment) {
        (function (e, t, n, s) {
          let i = t._path;
          if (!i) {
            i = t._path = new Path2D();
            if (t.path(i, n, s)) {
              i.closePath();
            }
          }
          Da(e, t.options);
          e.stroke(i);
        })(e, t, n, s);
      } else {
        (function (e, t, n, s) {
          const {
            segments: i,
            options: a
          } = t;
          const o = Va(t);
          for (const r of i) {
            Da(e, a, r.style);
            e.beginPath();
            if (o(e, t, r, {
              start: n,
              end: n + s - 1
            })) {
              e.closePath();
            }
            e.stroke();
          }
        })(e, t, n, s);
      }
    }
    class Wa extends Yi {
      static id = "line";
      static defaults = {
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: "miter",
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: "default",
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
      };
      static descriptors = {
        _scriptable: true,
        _indexable: e => "borderDash" !== e && "fill" !== e
      };
      constructor(e) {
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (e) {
          Object.assign(this, e);
        }
      }
      updateControlPoints(e, t) {
        const n = this.options;
        if ((n.tension || "monotone" === n.cubicInterpolationMode) && !n.stepped && !this._pointsUpdated) {
          const s = n.spanGaps ? this._loop : this._fullLoop;
          Zn(this._points, n, e, s, t);
          this._pointsUpdated = true;
        }
      }
      set points(e) {
        this._points = e;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
      }
      get points() {
        return this._points;
      }
      get segments() {
        return this._segments || (this._segments = function (e, t) {
          const n = e.points;
          const s = e.options.spanGaps;
          const i = n.length;
          if (!i) {
            return [];
          }
          const a = !!e._loop;
          const {
            start: o,
            end: r
          } = function (e, t, n, s) {
            let i = 0;
            let a = t - 1;
            if (n && !s) {
              for (; i < t && !e[i].skip;) {
                i++;
              }
            }
            for (; i < t && e[i].skip;) {
              i++;
            }
            i %= t;
            for (n && (a += i); a > i && e[a % t].skip;) {
              a--;
            }
            a %= t;
            return {
              start: i,
              end: a
            };
          }(n, i, a, s);
          return Es(e, true === s ? [{
            start: o,
            end: r,
            loop: a
          }] : function (e, t, n, s) {
            const i = e.length;
            const a = [];
            let o;
            let r = t;
            let l = e[t];
            for (o = t + 1; o <= n; ++o) {
              const n = e[o % i];
              if (n.skip || n.stop) {
                if (!l.skip) {
                  s = false;
                  a.push({
                    start: t % i,
                    end: (o - 1) % i,
                    loop: s
                  });
                  t = r = n.stop ? o : null;
                }
              } else {
                r = o;
                if (l.skip) {
                  t = o;
                }
              }
              l = n;
            }
            if (null !== r) {
              a.push({
                start: t % i,
                end: r % i,
                loop: s
              });
            }
            return a;
          }(n, o, r < o ? r + i : r, !!e._fullLoop && 0 === o && r === i - 1), n, t);
        }(this, this.options.segment));
      }
      first() {
        const e = this.segments;
        const t = this.points;
        return e.length && t[e[0].start];
      }
      last() {
        const e = this.segments;
        const t = this.points;
        const n = e.length;
        return n && t[e[n - 1].end];
      }
      interpolate(e, t) {
        const n = this.options;
        const s = e[t];
        const i = this.points;
        const a = Ts(this, {
          property: t,
          start: s,
          end: s
        });
        if (!a.length) {
          return;
        }
        const o = [];
        const r = function (e) {
          return e.stepped ? hs : e.tension || "monotone" === e.cubicInterpolationMode ? gs : ms;
        }(n);
        let l;
        let c;
        l = 0;
        for (c = a.length; l < c; ++l) {
          const {
            start: c,
            end: u
          } = a[l];
          const d = i[c];
          const m = i[u];
          if (d === m) {
            o.push(d);
            continue;
          }
          const h = r(d, m, Math.abs((s - d[t]) / (m[t] - d[t])), n.stepped);
          h[t] = e[t];
          o.push(h);
        }
        return 1 === o.length ? o[0] : o;
      }
      pathSegment(e, t, n) {
        return Va(this)(e, this, t, n);
      }
      path(e, t, n) {
        const s = this.segments;
        const i = Va(this);
        let a = this._loop;
        t = t || 0;
        n = n || this.points.length - t;
        for (const o of s) a &= i(e, this, o, {
          start: t,
          end: t + n - 1
        });
        return !!a;
      }
      draw(e, t, n, s) {
        const i = this.options || {};
        if ((this.points || []).length && i.borderWidth) {
          e.save();
          Ka(e, this, n, s);
          e.restore();
        }
        if (this.animated) {
          this._pointsUpdated = false;
          this._path = undefined;
        }
      }
    }
    function za(e, t, n, s) {
      const i = e.options;
      const {
        [n]: a
      } = e.getProps([n], s);
      return Math.abs(t - a) < i.radius + i.hitRadius;
    }
    class Ya extends Yi {
      static id = "point";
      static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: "circle",
        radius: 3,
        rotation: 0
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
      };
      constructor(e) {
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (e) {
          Object.assign(this, e);
        }
      }
      inRange(e, t, n) {
        const s = this.options;
        const {
          x: i,
          y: a
        } = this.getProps(["x", "y"], n);
        return Math.pow(e - i, 2) + Math.pow(t - a, 2) < Math.pow(s.hitRadius + s.radius, 2);
      }
      inXRange(e, t) {
        return za(this, e, "x", t);
      }
      inYRange(e, t) {
        return za(this, e, "y", t);
      }
      getCenterPoint(e) {
        const {
          x: t,
          y: n
        } = this.getProps(["x", "y"], e);
        return {
          x: t,
          y: n
        };
      }
      size(e) {
        let t = (e = e || this.options || {}).radius || 0;
        t = Math.max(t, t && e.hoverRadius || 0);
        return 2 * (t + (t && e.borderWidth || 0));
      }
      draw(e, t) {
        const n = this.options;
        if (!(this.skip || n.radius < .1 || !mn(this, t, this.size(n) / 2))) {
          e.strokeStyle = n.borderColor;
          e.lineWidth = n.borderWidth;
          e.fillStyle = n.backgroundColor;
          un(e, n, this.x, this.y);
        }
      }
      getRange() {
        const e = this.options || {};
        return e.radius + e.hitRadius;
      }
    }
    function $a(e, t) {
      const {
        x: n,
        y: s,
        base: i,
        width: a,
        height: o
      } = e.getProps(["x", "y", "base", "width", "height"], t);
      let r;
      let l;
      let c;
      let u;
      let d;
      if (e.horizontal) {
        d = o / 2;
        r = Math.min(n, i);
        l = Math.max(n, i);
        c = s - d;
        u = s + d;
      } else {
        d = a / 2;
        r = n - d;
        l = n + d;
        c = Math.min(s, i);
        u = Math.max(s, i);
      }
      return {
        left: r,
        top: c,
        right: l,
        bottom: u
      };
    }
    function qa(e, t, n, s) {
      return e ? 0 : Math.max(n, Math.min(s, t));
    }
    function Xa(e) {
      const t = $a(e);
      const n = t.right - t.left;
      const s = t.bottom - t.top;
      const i = function (e, t, n) {
        const s = e.options.borderWidth;
        const i = e.borderSkipped;
        const a = Sn(s, {
          top: "y",
          right: "x",
          bottom: "y",
          left: "x"
        });
        return {
          t: i.top ? 0 : We(a.top, 0, n),
          r: i.right ? 0 : We(a.right, 0, t),
          b: i.bottom ? 0 : We(a.bottom, 0, n),
          l: i.left ? 0 : We(a.left, 0, t)
        };
      }(e, n / 2, s / 2);
      const a = function (e, t, n) {
        const {
          enableBorderRadius: s
        } = e.getProps(["enableBorderRadius"]);
        const i = e.options.borderRadius;
        const a = Sn(i, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
        const o = Math.min(t, n);
        const r = e.borderSkipped;
        const l = s || null !== i && "[object Object]" === Object.prototype.toString.call(i);
        return {
          topLeft: !l || r.top || r.left ? 0 : We(a.topLeft, 0, o),
          topRight: !l || r.top || r.right ? 0 : We(a.topRight, 0, o),
          bottomLeft: !l || r.bottom || r.left ? 0 : We(a.bottomLeft, 0, o),
          bottomRight: !l || r.bottom || r.right ? 0 : We(a.bottomRight, 0, o)
        };
      }(e, n / 2, s / 2);
      return {
        outer: {
          x: t.left,
          y: t.top,
          w: n,
          h: s,
          radius: a
        },
        inner: {
          x: t.left + i.l,
          y: t.top + i.t,
          w: n - i.l - i.r,
          h: s - i.t - i.b,
          radius: {
            topLeft: Math.max(0, a.topLeft - Math.max(i.t, i.l)),
            topRight: Math.max(0, a.topRight - Math.max(i.t, i.r)),
            bottomLeft: Math.max(0, a.bottomLeft - Math.max(i.b, i.l)),
            bottomRight: Math.max(0, a.bottomRight - Math.max(i.b, i.r))
          }
        }
      };
    }
    function Qa(e, t, n, s) {
      const i = null === t;
      const a = null === n;
      const o = e && !(i && a) && $a(e, s);
      return o && (i || ze(t, o.left, o.right)) && (a || ze(n, o.top, o.bottom));
    }
    function Za(e, t) {
      e.rect(t.x, t.y, t.w, t.h);
    }
    function Ja(e, t, n = {}) {
      const s = e.x !== n.x ? -t : 0;
      const i = e.y !== n.y ? -t : 0;
      const a = (e.x + e.w !== n.x + n.w ? t : 0) - s;
      const o = (e.y + e.h !== n.y + n.h ? t : 0) - i;
      return {
        x: e.x + s,
        y: e.y + i,
        w: e.w + a,
        h: e.h + o,
        radius: e.radius
      };
    }
    class eo extends Yi {
      static id = "bar";
      static defaults = {
        borderSkipped: "start",
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: "auto",
        pointStyle: undefined
      };
      static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
      };
      constructor(e) {
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (e) {
          Object.assign(this, e);
        }
      }
      draw(e) {
        const {
          inflateAmount: t,
          options: {
            borderColor: n,
            backgroundColor: s
          }
        } = this;
        const {
          inner: i,
          outer: a
        } = Xa(this);
        const o = (r = a.radius).topLeft || r.topRight || r.bottomLeft || r.bottomRight ? bn : Za;
        var r;
        e.save();
        if (!(a.w === i.w && a.h === i.h)) {
          e.beginPath();
          o(e, Ja(a, t, i));
          e.clip();
          o(e, Ja(i, -t, a));
          e.fillStyle = n;
          e.fill("evenodd");
        }
        e.beginPath();
        o(e, Ja(i, t));
        e.fillStyle = s;
        e.fill();
        e.restore();
      }
      inRange(e, t, n) {
        return Qa(this, e, t, n);
      }
      inXRange(e, t) {
        return Qa(this, e, null, t);
      }
      inYRange(e, t) {
        return Qa(this, null, e, t);
      }
      getCenterPoint(e) {
        const {
          x: t,
          y: n,
          base: s,
          horizontal: i
        } = this.getProps(["x", "y", "base", "horizontal"], e);
        return {
          x: i ? (t + s) / 2 : t,
          y: i ? n : (n + s) / 2
        };
      }
      getRange(e) {
        return "x" === e ? this.width / 2 : this.height / 2;
      }
    }
    var to = Object.freeze({
      __proto__: null,
      ArcElement: ka,
      LineElement: Wa,
      PointElement: Ya,
      BarElement: eo
    });
    const no = ["rgb(54, 162, 235)", "rgb(255, 99, 132)", "rgb(255, 159, 64)", "rgb(255, 205, 86)", "rgb(75, 192, 192)", "rgb(153, 102, 255)", "rgb(201, 203, 207)"];
    const so = no.map(e => e.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
    function io(e) {
      return no[e % no.length];
    }
    function ao(e) {
      return so[e % so.length];
    }
    function oo(e) {
      return "doughnut" === e || "pie" === e ? function () {
        let e = 0;
        return t => {
          t.backgroundColor = t.data.map(() => no[e++ % no.length]);
        };
      }() : "polarArea" === e ? function () {
        let e = 0;
        return t => {
          t.backgroundColor = t.data.map(() => so[e++ % so.length]);
        };
      }() : (e, t) => {
        e.borderColor = no[t % no.length];
        e.backgroundColor = so[t % so.length];
      };
    }
    function ro(e) {
      let t;
      for (t in e) if (e[t].borderColor || e[t].backgroundColor) {
        return true;
      }
      return false;
    }
    var lo = {
      id: "colors",
      defaults: {
        enabled: true
      },
      beforeLayout(e, t, n) {
        if (!n.enabled) {
          return;
        }
        const {
          type: s,
          options: {
            elements: i
          },
          data: {
            datasets: a
          }
        } = e.config;
        if (ro(a) || i && ro(i)) {
          return;
        }
        const o = oo(s);
        a.forEach(o);
      }
    };
    function co(e) {
      if (e._decimated) {
        const t = e._data;
        delete e._decimated;
        delete e._data;
        Object.defineProperty(e, "data", {
          value: t
        });
      }
    }
    function uo(e) {
      e.data.datasets.forEach(e => {
        co(e);
      });
    }
    var mo = {
      id: "decimation",
      defaults: {
        algorithm: "min-max",
        enabled: false
      },
      beforeElementsUpdate: (e, t, n) => {
        if (!n.enabled) {
          return void uo(e);
        }
        const s = e.width;
        e.data.datasets.forEach((t, i) => {
          const {
            _data: a,
            indexAxis: o
          } = t;
          const r = e.getDatasetMeta(i);
          const l = a || t.data;
          if ("y" === On([o, e.options.indexAxis])) {
            return;
          }
          if (!r.controller.supportsDecimation) {
            return;
          }
          const c = e.scales[r.xAxisID];
          if ("linear" !== c.type && "time" !== c.type) {
            return;
          }
          if (e.options.parsing) {
            return;
          }
          let {
            start: u,
            count: d
          } = function (e, t) {
            const n = t.length;
            let s;
            let i = 0;
            const {
              iScale: a
            } = e;
            const {
              min: o,
              max: r,
              minDefined: l,
              maxDefined: c
            } = a.getUserBounds();
            if (l) {
              i = Math.max(0, Math.min(n - 1, $e(t, a.axis, o).lo));
            }
            s = c ? Math.max(i, Math.min(n, $e(t, a.axis, r).hi + 1)) - i : n - i;
            return {
              start: i,
              count: s
            };
          }(r, l);
          if (d <= (n.threshold || 4 * s)) {
            return void co(t);
          }
          let m;
          if (null == a) {
            t._data = l;
            delete t.data;
            Object.defineProperty(t, "data", {
              configurable: true,
              enumerable: true,
              get: function () {
                return this._decimated;
              },
              set: function (e) {
                this._data = e;
              }
            });
          }
          switch (n.algorithm) {
            case "lttb":
              m = function (e, t, n, s, i) {
                const a = i.samples || s;
                if (a >= n) {
                  return e.slice(t, t + n);
                }
                const o = [];
                const r = (n - 2) / (a - 2);
                let l = 0;
                const c = t + n - 1;
                let u;
                let d;
                let m;
                let h;
                let g;
                let p = t;
                o[l++] = e[p];
                for (u = 0; u < a - 2; u++) {
                  let s;
                  let i = 0;
                  let a = 0;
                  const c = Math.floor((u + 1) * r) + 1 + t;
                  const f = Math.min(Math.floor((u + 2) * r) + 1, n) + t;
                  const x = f - c;
                  for (s = c; s < f; s++) {
                    i += e[s].x;
                    a += e[s].y;
                  }
                  i /= x;
                  a /= x;
                  const v = Math.floor(u * r) + 1 + t;
                  const _ = Math.min(Math.floor((u + 1) * r) + 1, n) + t;
                  const {
                    x: b,
                    y: T
                  } = e[p];
                  m = h = -1;
                  for (s = v; s < _; s++) {
                    h = .5 * Math.abs((b - i) * (e[s].y - T) - (b - e[s].x) * (a - T));
                    if (h > m) {
                      m = h;
                      d = e[s];
                      g = s;
                    }
                  }
                  o[l++] = d;
                  p = g;
                }
                o[l++] = e[c];
                return o;
              }(l, u, d, s, n);
              break;
            case "min-max":
              m = function (e, t, n, s) {
                let i;
                let a;
                let o;
                let r;
                let l;
                let c;
                let u;
                let d;
                let m;
                let h;
                let g = 0;
                let p = 0;
                const f = [];
                const x = t + n - 1;
                const v = e[t].x;
                const _ = e[x].x - v;
                for (i = t; i < t + n; ++i) {
                  a = e[i];
                  o = (a.x - v) / _ * s;
                  r = a.y;
                  const t = 0 | o;
                  if (t === l) {
                    if (r < m) {
                      m = r;
                      c = i;
                    } else if (r > h) {
                      h = r;
                      u = i;
                    }
                    g = (p * g + a.x) / ++p;
                  } else {
                    const n = i - 1;
                    if (!(null == c) && !(null == u)) {
                      const t = Math.min(c, u);
                      const s = Math.max(c, u);
                      if (t !== d && t !== n) {
                        f.push({
                          ...e[t],
                          x: g
                        });
                      }
                      if (s !== d && s !== n) {
                        f.push({
                          ...e[s],
                          x: g
                        });
                      }
                    }
                    if (i > 0 && n !== d) {
                      f.push(e[n]);
                    }
                    f.push(a);
                    l = t;
                    p = 0;
                    m = h = r;
                    c = u = d = i;
                  }
                }
                return f;
              }(l, u, d, s);
              break;
            default:
              throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`);
          }
          t._decimated = m;
        });
      },
      destroy(e) {
        uo(e);
      }
    };
    function ho(e, t, n, s) {
      if (s) {
        return;
      }
      let i = t[e];
      let a = n[e];
      if ("angle" === e) {
        i = (i % ye + ye) % ye;
        a = (a % ye + ye) % ye;
      }
      return {
        property: e,
        start: i,
        end: a
      };
    }
    function go(e, t, n) {
      for (; t > e; t--) {
        const e = n[t];
        if (!isNaN(e.x) && !isNaN(e.y)) {
          break;
        }
      }
      return t;
    }
    function po(e, t, n, s) {
      return e && t ? s(e[n], t[n]) : e ? e[n] : t ? t[n] : 0;
    }
    function fo(e, t) {
      let n = [];
      let s = false;
      if (ne(e)) {
        s = true;
        n = e;
      } else {
        n = function (e, t) {
          const {
            x: n = null,
            y: s = null
          } = e || {};
          const i = t.points;
          const a = [];
          t.segments.forEach(({
            start: e,
            end: t
          }) => {
            t = go(e, t, i);
            const o = i[e];
            const r = i[t];
            if (null !== s) {
              a.push({
                x: o.x,
                y: s
              });
              a.push({
                x: r.x,
                y: s
              });
            } else if (null !== n) {
              a.push({
                x: n,
                y: o.y
              });
              a.push({
                x: n,
                y: r.y
              });
            }
          });
          return a;
        }(e, t);
      }
      return n.length ? new Wa({
        points: n,
        options: {
          tension: 0
        },
        _loop: s,
        _fullLoop: s
      }) : null;
    }
    function xo(e) {
      return e && false !== e.fill;
    }
    function vo(e, t, n) {
      let s = e[t].fill;
      const i = [t];
      let a;
      if (!n) {
        return s;
      }
      for (; false !== s && -1 === i.indexOf(s);) {
        if (!(("number" == typeof s || s instanceof Number) && isFinite(+s))) {
          return s;
        }
        a = e[s];
        if (!a) {
          return false;
        }
        if (a.visible) {
          return s;
        }
        i.push(s);
        s = a.fill;
      }
      return false;
    }
    function _o(e, t, n) {
      const s = function (e) {
        const t = e.options;
        const n = t.fill;
        let s = undefined === (n && n.target) ? n : n && n.target;
        if (undefined === s) {
          s = !!t.backgroundColor;
        }
        if (false === s || null === s) {
          return false;
        }
        if (true === s) {
          return "origin";
        }
        return s;
      }(e);
      if (null !== s && "[object Object]" === Object.prototype.toString.call(s)) {
        return !isNaN(s.value) && s;
      }
      let i = parseFloat(s);
      return ("number" == typeof i || i instanceof Number) && isFinite(+i) && Math.floor(i) === i ? function (e, t, n, s) {
        if (!("-" !== e && "+" !== e)) {
          n = t + n;
        }
        if (n === t || n < 0 || n >= s) {
          return false;
        }
        return n;
      }(s[0], t, i, n) : ["origin", "start", "end", "stack", "shape"].indexOf(s) >= 0 && s;
    }
    function bo(e, t, n) {
      const s = [];
      for (let i = 0; i < n.length; i++) {
        const a = n[i];
        const {
          first: o,
          last: r,
          point: l
        } = To(a, t, "x");
        if (!(!l || o && r)) {
          if (o) {
            s.unshift(l);
          } else {
            e.push(l);
            if (!r) {
              break;
            }
          }
        }
      }
      e.push(...s);
    }
    function To(e, t, n) {
      const s = e.interpolate(t, n);
      if (!s) {
        return {};
      }
      const i = s[n];
      const a = e.segments;
      const o = e.points;
      let r = false;
      let l = false;
      for (let e = 0; e < a.length; e++) {
        const t = a[e];
        const s = o[t.start][n];
        const c = o[t.end][n];
        if (ze(i, s, c)) {
          r = i === s;
          l = i === c;
          break;
        }
      }
      return {
        first: r,
        last: l,
        point: s
      };
    }
    class Eo {
      constructor(e) {
        this.x = e.x;
        this.y = e.y;
        this.radius = e.radius;
      }
      pathSegment(e, t, n) {
        const {
          x: s,
          y: i,
          radius: a
        } = this;
        t = t || {
          start: 0,
          end: ye
        };
        e.arc(s, i, a, t.end, t.start, true);
        return !n.bounds;
      }
      interpolate(e) {
        const {
          x: t,
          y: n,
          radius: s
        } = this;
        const i = e.angle;
        return {
          x: t + Math.cos(i) * s,
          y: n + Math.sin(i) * s,
          angle: i
        };
      }
    }
    function Io(e) {
      const {
        chart: t,
        fill: n,
        line: s
      } = e;
      if (("number" == typeof n || n instanceof Number) && isFinite(+n)) {
        return function (e, t) {
          const n = e.getDatasetMeta(t);
          const s = n && e.isDatasetVisible(t);
          return s ? n.dataset : null;
        }(t, n);
      }
      if ("stack" === n) {
        return function (e) {
          const {
            scale: t,
            index: n,
            line: s
          } = e;
          const i = [];
          const a = s.segments;
          const o = s.points;
          const r = function (e, t) {
            const n = [];
            const s = e.getMatchingVisibleMetas("line");
            for (let e = 0; e < s.length; e++) {
              const i = s[e];
              if (i.index === t) {
                break;
              }
              if (!i.hidden) {
                n.unshift(i.dataset);
              }
            }
            return n;
          }(t, n);
          r.push(fo({
            x: null,
            y: t.bottom
          }, s));
          for (let e = 0; e < a.length; e++) {
            const t = a[e];
            for (let e = t.start; e <= t.end; e++) {
              bo(i, o[e], r);
            }
          }
          return new Wa({
            points: i,
            options: {}
          });
        }(e);
      }
      if ("shape" === n) {
        return true;
      }
      const i = function (e) {
        const t = e.scale || {};
        if (t.getPointPositionForValue) {
          return function (e) {
            const {
              scale: t,
              fill: n
            } = e;
            const s = t.options;
            const i = t.getLabels().length;
            const a = s.reverse ? t.max : t.min;
            const o = function (e, t, n) {
              let s;
              s = "start" === e ? n : "end" === e ? t.options.reverse ? t.min : t.max : null !== e && "[object Object]" === Object.prototype.toString.call(e) ? e.value : t.getBaseValue();
              return s;
            }(n, t, a);
            const r = [];
            if (s.grid.circular) {
              const e = t.getPointPositionForValue(0, a);
              return new Eo({
                x: e.x,
                y: e.y,
                radius: t.getDistanceFromCenterForValue(o)
              });
            }
            for (let e = 0; e < i; ++e) {
              r.push(t.getPointPositionForValue(e, o));
            }
            return r;
          }(e);
        }
        return function (e) {
          const {
            scale: t = {},
            fill: n
          } = e;
          const s = function (e, t) {
            let n = null;
            if ("start" === e) {
              n = t.bottom;
            } else if ("end" === e) {
              n = t.top;
            } else if (null !== e && "[object Object]" === Object.prototype.toString.call(e)) {
              n = t.getPixelForValue(e.value);
            } else if (t.getBasePixel) {
              n = t.getBasePixel();
            }
            return n;
          }(n, t);
          if (("number" == typeof s || s instanceof Number) && isFinite(+s)) {
            const e = t.isHorizontal();
            return {
              x: e ? s : null,
              y: e ? null : s
            };
          }
          return null;
        }(e);
      }(e);
      return i instanceof Eo ? i : fo(i, s);
    }
    function yo(e, t, n) {
      const s = Io(t);
      const {
        line: i,
        scale: a,
        axis: o
      } = t;
      const r = i.options;
      const l = r.fill;
      const c = r.backgroundColor;
      const {
        above: u = c,
        below: d = c
      } = l || {};
      if (s && i.points.length) {
        hn(e, n);
        (function (e, t) {
          const {
            line: n,
            target: s,
            above: i,
            below: a,
            area: o,
            scale: r
          } = t;
          const l = n._loop ? "angle" : t.axis;
          e.save();
          if ("x" === l && a !== i) {
            So(e, s, o.top);
            jo(e, {
              line: n,
              target: s,
              color: i,
              scale: r,
              property: l
            });
            e.restore();
            e.save();
            So(e, s, o.bottom);
          }
          jo(e, {
            line: n,
            target: s,
            color: a,
            scale: r,
            property: l
          });
          e.restore();
        })(e, {
          line: i,
          target: s,
          above: u,
          below: d,
          area: n,
          scale: a,
          axis: o
        });
        gn(e);
      }
    }
    function So(e, t, n) {
      const {
        segments: s,
        points: i
      } = t;
      let a = true;
      let o = false;
      e.beginPath();
      for (const r of s) {
        const {
          start: s,
          end: l
        } = r;
        const c = i[s];
        const u = i[go(s, l, i)];
        if (a) {
          e.moveTo(c.x, c.y);
          a = false;
        } else {
          e.lineTo(c.x, n);
          e.lineTo(c.x, c.y);
        }
        o = !!t.pathSegment(e, r, {
          move: o
        });
        if (o) {
          e.closePath();
        } else {
          e.lineTo(u.x, n);
        }
      }
      e.lineTo(t.first().x, n);
      e.closePath();
      e.clip();
    }
    function jo(e, t) {
      const {
        line: n,
        target: s,
        property: i,
        color: a,
        scale: o
      } = t;
      const r = function (e, t, n) {
        const s = e.segments;
        const i = e.points;
        const a = t.points;
        const o = [];
        for (const e of s) {
          let {
            start: s,
            end: r
          } = e;
          r = go(s, r, i);
          const l = ho(n, i[s], i[r], e.loop);
          if (!t.segments) {
            o.push({
              source: e,
              target: l,
              start: i[s],
              end: i[r]
            });
            continue;
          }
          const c = Ts(t, l);
          for (const t of c) {
            const s = ho(n, a[t.start], a[t.end], t.loop);
            const r = bs(e, i, s);
            for (const e of r) o.push({
              source: e,
              target: t,
              start: {
                [n]: l && s ? Math.max(l[n], s[n]) : l ? l[n] : s ? s[n] : 0
              },
              end: {
                [n]: l && s ? Math.min(l[n], s[n]) : l ? l[n] : s ? s[n] : 0
              }
            });
          }
        }
        return o;
      }(n, s, i);
      for (const {
        source: t,
        target: l,
        start: c,
        end: u
      } of r) {
        const {
          style: {
            backgroundColor: r = a
          } = {}
        } = t;
        const d = true !== s;
        e.save();
        e.fillStyle = r;
        Co(e, o, d && ho(i, c, u));
        e.beginPath();
        const m = !!n.pathSegment(e, t);
        let h;
        if (d) {
          if (m) {
            e.closePath();
          } else {
            No(e, s, u, i);
          }
          const t = !!s.pathSegment(e, l, {
            move: m,
            reverse: true
          });
          h = m && t;
          if (!h) {
            No(e, s, c, i);
          }
        }
        e.closePath();
        e.fill(h ? "evenodd" : "nonzero");
        e.restore();
      }
    }
    function Co(e, t, n) {
      const {
        top: s,
        bottom: i
      } = t.chart.chartArea;
      const {
        property: a,
        start: o,
        end: r
      } = n || {};
      if ("x" === a) {
        e.beginPath();
        e.rect(o, s, r - o, i - s);
        e.clip();
      }
    }
    function No(e, t, n, s) {
      const i = t.interpolate(n, s);
      if (i) {
        e.lineTo(i.x, i.y);
      }
    }
    var wo = {
      id: "filler",
      afterDatasetsUpdate(e, t, n) {
        const s = (e.data.datasets || []).length;
        const i = [];
        let a;
        let o;
        let r;
        let l;
        for (o = 0; o < s; ++o) {
          a = e.getDatasetMeta(o);
          r = a.dataset;
          l = null;
          if (r && r.options && r instanceof Wa) {
            l = {
              visible: e.isDatasetVisible(o),
              index: o,
              fill: _o(r, o, s),
              chart: e,
              axis: a.controller.options.indexAxis,
              scale: a.vScale,
              line: r
            };
          }
          a.$filler = l;
          i.push(l);
        }
        for (o = 0; o < s; ++o) {
          l = i[o];
          if (l && false !== l.fill) {
            l.fill = vo(i, o, n.propagate);
          }
        }
      },
      beforeDraw(e, t, n) {
        const s = "beforeDraw" === n.drawTime;
        const i = e.getSortedVisibleDatasetMetas();
        const a = e.chartArea;
        for (let t = i.length - 1; t >= 0; --t) {
          const n = i[t].$filler;
          if (n) {
            n.line.updateControlPoints(a, n.axis);
            if (s && n.fill) {
              yo(e.ctx, n, a);
            }
          }
        }
      },
      beforeDatasetsDraw(e, t, n) {
        if ("beforeDatasetsDraw" !== n.drawTime) {
          return;
        }
        const s = e.getSortedVisibleDatasetMetas();
        for (let t = s.length - 1; t >= 0; --t) {
          const n = s[t].$filler;
          if (n && false !== n.fill) {
            yo(e.ctx, n, e.chartArea);
          }
        }
      },
      beforeDatasetDraw(e, t, n) {
        const s = t.meta.$filler;
        if (s && false !== s.fill && "beforeDatasetDraw" === n.drawTime) {
          yo(e.ctx, s, e.chartArea);
        }
      },
      defaults: {
        propagate: true,
        drawTime: "beforeDatasetDraw"
      }
    };
    const Oo = (e, t) => {
      let {
        boxHeight: n = t,
        boxWidth: s = t
      } = e;
      if (e.usePointStyle) {
        n = Math.min(n, t);
        s = e.pointStyleWidth || Math.min(s, t);
      }
      return {
        boxWidth: s,
        boxHeight: n,
        itemHeight: Math.max(t, n)
      };
    };
    class Po extends Yi {
      constructor(e) {
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = e.chart;
        this.options = e.options;
        this.ctx = e.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
      }
      update(e, t, n) {
        this.maxWidth = e;
        this.maxHeight = t;
        this._margins = n;
        this.setDimensions();
        this.buildLabels();
        this.fit();
      }
      setDimensions() {
        if (this.isHorizontal()) {
          this.width = this.maxWidth;
          this.left = this._margins.left;
          this.right = this.width;
        } else {
          this.height = this.maxHeight;
          this.top = this._margins.top;
          this.bottom = this.height;
        }
      }
      buildLabels() {
        const e = this.options.labels || {};
        let t = le(e.generateLabels, [this.chart], this) || [];
        if (e.filter) {
          t = t.filter(t => e.filter(t, this.chart.data));
        }
        if (e.sort) {
          t = t.sort((t, n) => e.sort(t, n, this.chart.data));
        }
        if (this.options.reverse) {
          t.reverse();
        }
        this.legendItems = t;
      }
      fit() {
        const {
          options: e,
          ctx: t
        } = this;
        if (!e.display) {
          return void (this.width = this.height = 0);
        }
        const n = e.labels;
        const s = wn(n.font);
        const i = s.size;
        const a = this._computeTitleHeight();
        const {
          boxWidth: o,
          itemHeight: r
        } = Oo(n, i);
        let l;
        let c;
        t.font = s.string;
        if (this.isHorizontal()) {
          l = this.maxWidth;
          c = this._fitRows(a, i, o, r) + 10;
        } else {
          c = this.maxHeight;
          l = this._fitCols(a, s, o, r) + 10;
        }
        this.width = Math.min(l, e.maxWidth || this.maxWidth);
        this.height = Math.min(c, e.maxHeight || this.maxHeight);
      }
      _fitRows(e, t, n, s) {
        const {
          ctx: i,
          maxWidth: a,
          options: {
            labels: {
              padding: o
            }
          }
        } = this;
        const r = this.legendHitBoxes = [];
        const l = this.lineWidths = [0];
        const c = s + o;
        let u = e;
        i.textAlign = "left";
        i.textBaseline = "middle";
        let d = -1;
        let m = -c;
        this.legendItems.forEach((e, h) => {
          const g = n + t / 2 + i.measureText(e.text).width;
          if (0 === h || l[l.length - 1] + g + 2 * o > a) {
            u += c;
            l[l.length - (h > 0 ? 0 : 1)] = 0;
            m += c;
            d++;
          }
          r[h] = {
            left: 0,
            top: m,
            row: d,
            width: g,
            height: s
          };
          l[l.length - 1] += g + o;
        });
        return u;
      }
      _fitCols(e, t, n, s) {
        const {
          ctx: i,
          maxHeight: a,
          options: {
            labels: {
              padding: o
            }
          }
        } = this;
        const r = this.legendHitBoxes = [];
        const l = this.columnSizes = [];
        const c = a - e;
        let u = o;
        let d = 0;
        let m = 0;
        let h = 0;
        let g = 0;
        this.legendItems.forEach((e, a) => {
          const {
            itemWidth: p,
            itemHeight: f
          } = function (e, t, n, s, i) {
            const a = function (e, t, n, s) {
              let i = e.text;
              if (i && "string" != typeof i) {
                i = i.reduce((e, t) => e.length > t.length ? e : t);
              }
              return t + n.size / 2 + s.measureText(i).width;
            }(s, e, t, n);
            const o = function (e, t, n) {
              let s = e;
              if ("string" != typeof t.text) {
                s = n * (t.text ? t.text.length + .5 : 0);
              }
              return s;
            }(i, s, t.lineHeight);
            return {
              itemWidth: a,
              itemHeight: o
            };
          }(n, t, i, e, s);
          if (a > 0 && m + f + 2 * o > c) {
            u += d + o;
            l.push({
              width: d,
              height: m
            });
            h += d + o;
            g++;
            d = m = 0;
          }
          r[a] = {
            left: h,
            top: m,
            col: g,
            width: p,
            height: f
          };
          d = Math.max(d, p);
          m += f + o;
        });
        u += d;
        l.push({
          width: d,
          height: m
        });
        return u;
      }
      adjustHitBoxes() {
        if (!this.options.display) {
          return;
        }
        const e = this._computeTitleHeight();
        const {
          legendHitBoxes: t,
          options: {
            align: n,
            labels: {
              padding: s
            },
            rtl: i
          }
        } = this;
        const a = ps(i, this.left, this.width);
        if (this.isHorizontal()) {
          let i = 0;
          let o = "start" === n ? this.left + s : "end" === n ? this.right - this.lineWidths[i] : (this.left + s + (this.right - this.lineWidths[i])) / 2;
          for (const r of t) {
            if (i !== r.row) {
              i = r.row;
              o = "start" === n ? this.left + s : "end" === n ? this.right - this.lineWidths[i] : (this.left + s + (this.right - this.lineWidths[i])) / 2;
            }
            r.top += this.top + e + s;
            r.left = a.leftForLtr(a.x(o), r.width);
            o += r.width + s;
          }
        } else {
          let i = 0;
          let o = "start" === n ? this.top + e + s : "end" === n ? this.bottom - this.columnSizes[i].height : (this.top + e + s + (this.bottom - this.columnSizes[i].height)) / 2;
          for (const r of t) {
            if (r.col !== i) {
              i = r.col;
              o = "start" === n ? this.top + e + s : "end" === n ? this.bottom - this.columnSizes[i].height : (this.top + e + s + (this.bottom - this.columnSizes[i].height)) / 2;
            }
            r.top = o;
            r.left += this.left + s;
            r.left = a.leftForLtr(a.x(r.left), r.width);
            o += r.height + s;
          }
        }
      }
      isHorizontal() {
        return "top" === this.options.position || "bottom" === this.options.position;
      }
      draw() {
        if (this.options.display) {
          const e = this.ctx;
          hn(e, this);
          this._draw();
          gn(e);
        }
      }
      _draw() {
        const {
          options: e,
          columnSizes: t,
          lineWidths: n,
          ctx: s
        } = this;
        const {
          align: i,
          labels: a
        } = e;
        const o = an.color;
        const r = ps(e.rtl, this.left, this.width);
        const l = wn(a.font);
        const {
          padding: c
        } = a;
        const u = l.size;
        const d = u / 2;
        let m;
        this.drawTitle();
        s.textAlign = r.textAlign("left");
        s.textBaseline = "middle";
        s.lineWidth = .5;
        s.font = l.string;
        const {
          boxWidth: h,
          boxHeight: g,
          itemHeight: p
        } = Oo(a, u);
        const f = this.isHorizontal();
        const x = this._computeTitleHeight();
        m = f ? {
          x: "start" === i ? this.left + c : "end" === i ? this.right - n[0] : (this.left + c + (this.right - n[0])) / 2,
          y: this.top + c + x,
          line: 0
        } : {
          x: this.left + c,
          y: "start" === i ? this.top + x + c : "end" === i ? this.bottom - t[0].height : (this.top + x + c + (this.bottom - t[0].height)) / 2,
          line: 0
        };
        fs(this.ctx, e.textDirection);
        const v = p + c;
        this.legendItems.forEach((_, b) => {
          s.strokeStyle = _.fontColor;
          s.fillStyle = _.fontColor;
          const T = s.measureText(_.text).width;
          const E = r.textAlign(_.textAlign || (_.textAlign = a.textAlign));
          const I = h + d + T;
          let y = m.x;
          let S = m.y;
          r.setWidth(this.width);
          if (f) {
            if (b > 0 && y + I + c > this.right) {
              S = m.y += v;
              m.line++;
              y = m.x = "start" === i ? this.left + c : "end" === i ? this.right - n[m.line] : (this.left + c + (this.right - n[m.line])) / 2;
            }
          } else if (b > 0 && S + v > this.bottom) {
            y = m.x = y + t[m.line].width + c;
            m.line++;
            S = m.y = "start" === i ? this.top + x + c : "end" === i ? this.bottom - t[m.line].height : (this.top + x + c + (this.bottom - t[m.line].height)) / 2;
          }
          (function (e, t, n) {
            if (isNaN(h) || h <= 0 || isNaN(g) || g < 0) {
              return;
            }
            s.save();
            const i = undefined === n.lineWidth ? 1 : n.lineWidth;
            s.fillStyle = undefined === n.fillStyle ? o : n.fillStyle;
            s.lineCap = undefined === n.lineCap ? "butt" : n.lineCap;
            s.lineDashOffset = undefined === n.lineDashOffset ? 0 : n.lineDashOffset;
            s.lineJoin = undefined === n.lineJoin ? "miter" : n.lineJoin;
            s.lineWidth = i;
            s.strokeStyle = undefined === n.strokeStyle ? o : n.strokeStyle;
            s.setLineDash(undefined === n.lineDash ? [] : n.lineDash);
            if (a.usePointStyle) {
              const o = {
                radius: g * Math.SQRT2 / 2,
                pointStyle: n.pointStyle,
                rotation: n.rotation,
                borderWidth: i
              };
              const l = r.xPlus(e, h / 2);
              dn(s, o, l, t + d, a.pointStyleWidth && h);
            } else {
              const a = t + Math.max((u - g) / 2, 0);
              const o = r.leftForLtr(e, h);
              const l = Sn(n.borderRadius, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
              s.beginPath();
              if (Object.values(l).some(e => 0 !== e)) {
                bn(s, {
                  x: o,
                  y: a,
                  w: h,
                  h: g,
                  radius: l
                });
              } else {
                s.rect(o, a, h, g);
              }
              s.fill();
              if (0 !== i) {
                s.stroke();
              }
            }
            s.restore();
          })(r.x(y), S, _);
          y = ((e, t, n, s) => e === (s ? "left" : "right") ? n : "center" === e ? (t + n) / 2 : t)(E, y + h + d, f ? y + I : this.right, e.rtl);
          (function (e, t, n) {
            xn(s, n.text, e, t + p / 2, l, {
              strikethrough: n.hidden,
              textAlign: r.textAlign(n.textAlign)
            });
          })(r.x(y), S, _);
          if (f) {
            m.x += I + c;
          } else if ("string" != typeof _.text) {
            const e = l.lineHeight;
            m.y += e * (_.text ? _.text.length + .5 : 0);
          } else {
            m.y += v;
          }
        });
        xs(this.ctx, e.textDirection);
      }
      drawTitle() {
        const e = this.options;
        const t = e.title;
        const n = wn(t.font);
        const s = Nn(t.padding);
        if (!t.display) {
          return;
        }
        const i = ps(e.rtl, this.left, this.width);
        const a = this.ctx;
        const o = t.position;
        const r = n.size / 2;
        const l = s.top + r;
        let c;
        let u = this.left;
        let d = this.width;
        if (this.isHorizontal()) {
          d = Math.max(...this.lineWidths);
          c = this.top + l;
          u = "start" === e.align ? u : "end" === e.align ? this.right - d : (u + (this.right - d)) / 2;
        } else {
          const t = this.columnSizes.reduce((e, t) => Math.max(e, t.height), 0);
          c = l + ("start" === e.align ? this.top : "end" === e.align ? this.bottom - t - e.labels.padding - this._computeTitleHeight() : (this.top + (this.bottom - t - e.labels.padding - this._computeTitleHeight())) / 2);
        }
        const m = "start" === o ? u : "end" === o ? u + d : (u + (u + d)) / 2;
        a.textAlign = i.textAlign("start" === o ? "left" : "end" === o ? "right" : "center");
        a.textBaseline = "middle";
        a.strokeStyle = t.color;
        a.fillStyle = t.color;
        a.font = n.string;
        xn(a, t.text, m, c, n);
      }
      _computeTitleHeight() {
        const e = this.options.title;
        const t = wn(e.font);
        const n = Nn(e.padding);
        return e.display ? t.lineHeight + n.height : 0;
      }
      _getLegendItemAt(e, t) {
        let n;
        let s;
        let i;
        if (ze(e, this.left, this.right) && ze(t, this.top, this.bottom)) {
          i = this.legendHitBoxes;
          for (n = 0; n < i.length; ++n) {
            s = i[n];
            if (ze(e, s.left, s.left + s.width) && ze(t, s.top, s.top + s.height)) {
              return this.legendItems[n];
            }
          }
        }
        return null;
      }
      handleEvent(e) {
        const t = this.options;
        if (!function (e, t) {
          if (("mousemove" === e || "mouseout" === e) && (t.onHover || t.onLeave)) {
            return true;
          }
          if (t.onClick && ("click" === e || "mouseup" === e)) {
            return true;
          }
          return false;
        }(e.type, t)) {
          return;
        }
        const n = this._getLegendItemAt(e.x, e.y);
        if ("mousemove" === e.type || "mouseout" === e.type) {
          const a = this._hoveredItem;
          i = n;
          const o = null !== (s = a) && null !== i && s.datasetIndex === i.datasetIndex && s.index === i.index;
          if (a && !o) {
            le(t.onLeave, [e, a, this], this);
          }
          this._hoveredItem = n;
          if (n && !o) {
            le(t.onHover, [e, n, this], this);
          }
        } else if (n) {
          le(t.onClick, [e, n, this], this);
        }
        var s;
        var i;
      }
    }
    function Lo(e, t) {
      return t * (e.text ? e.text.length + .5 : 0);
    }
    var Ao = {
      id: "legend",
      _element: Po,
      start(e, t, n) {
        const s = e.legend = new Po({
          ctx: e.ctx,
          options: n,
          chart: e
        });
        Ni.configure(e, s, n);
        Ni.addBox(e, s);
      },
      stop(e) {
        Ni.removeBox(e, e.legend);
        delete e.legend;
      },
      beforeUpdate(e, t, n) {
        const s = e.legend;
        Ni.configure(e, s, n);
        s.options = n;
      },
      afterUpdate(e) {
        const t = e.legend;
        t.buildLabels();
        t.adjustHitBoxes();
      },
      afterEvent(e, t) {
        if (!t.replay) {
          e.legend.handleEvent(t.event);
        }
      },
      defaults: {
        display: true,
        position: "top",
        align: "center",
        fullSize: true,
        reverse: false,
        weight: 1e3,
        onClick(e, t, n) {
          const s = t.datasetIndex;
          const i = n.chart;
          if (i.isDatasetVisible(s)) {
            i.hide(s);
            t.hidden = true;
          } else {
            i.show(s);
            t.hidden = false;
          }
        },
        onHover: null,
        onLeave: null,
        labels: {
          color: e => e.chart.options.color,
          boxWidth: 40,
          padding: 10,
          generateLabels(e) {
            const t = e.data.datasets;
            const {
              labels: {
                usePointStyle: n,
                pointStyle: s,
                textAlign: i,
                color: a,
                useBorderRadius: o,
                borderRadius: r
              }
            } = e.legend.options;
            return e._getSortedDatasetMetas().map(e => {
              const l = e.controller.getStyle(n ? 0 : undefined);
              const c = Nn(l.borderWidth);
              return {
                text: t[e.index].label,
                fillStyle: l.backgroundColor,
                fontColor: a,
                hidden: !e.visible,
                lineCap: l.borderCapStyle,
                lineDash: l.borderDash,
                lineDashOffset: l.borderDashOffset,
                lineJoin: l.borderJoinStyle,
                lineWidth: (c.width + c.height) / 4,
                strokeStyle: l.borderColor,
                pointStyle: s || l.pointStyle,
                rotation: l.rotation,
                textAlign: i || l.textAlign,
                borderRadius: o && (r || l.borderRadius),
                datasetIndex: e.index
              };
            }, this);
          }
        },
        title: {
          color: e => e.chart.options.color,
          display: false,
          position: "center",
          text: ""
        }
      },
      descriptors: {
        _scriptable: e => !e.startsWith("on"),
        labels: {
          _scriptable: e => !["generateLabels", "filter", "sort"].includes(e)
        }
      }
    };
    class Mo extends Yi {
      constructor(e) {
        super();
        this.chart = e.chart;
        this.options = e.options;
        this.ctx = e.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
      }
      update(e, t) {
        const n = this.options;
        this.left = 0;
        this.top = 0;
        if (!n.display) {
          return void (this.width = this.height = this.right = this.bottom = 0);
        }
        this.width = this.right = e;
        this.height = this.bottom = t;
        const s = ne(n.text) ? n.text.length : 1;
        this._padding = Nn(n.padding);
        const i = s * wn(n.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) {
          this.height = i;
        } else {
          this.width = i;
        }
      }
      isHorizontal() {
        const e = this.options.position;
        return "top" === e || "bottom" === e;
      }
      _drawArgs(e) {
        const {
          top: t,
          left: n,
          bottom: s,
          right: i,
          options: a
        } = this;
        const o = a.align;
        let r;
        let l;
        let c;
        let u = 0;
        if (this.isHorizontal()) {
          l = "start" === o ? n : "end" === o ? i : (n + i) / 2;
          c = t + e;
          r = i - n;
        } else {
          if ("left" === a.position) {
            l = n + e;
            c = "start" === o ? s : "end" === o ? t : (s + t) / 2;
            u = -.5 * Ie;
          } else {
            l = i - e;
            c = "start" === o ? t : "end" === o ? s : (t + s) / 2;
            u = .5 * Ie;
          }
          r = s - t;
        }
        return {
          titleX: l,
          titleY: c,
          maxWidth: r,
          rotation: u
        };
      }
      draw() {
        const e = this.ctx;
        const t = this.options;
        if (!t.display) {
          return;
        }
        const n = wn(t.font);
        const s = n.lineHeight / 2 + this._padding.top;
        const {
          titleX: i,
          titleY: a,
          maxWidth: o,
          rotation: r
        } = this._drawArgs(s);
        xn(e, t.text, 0, 0, n, {
          color: t.color,
          maxWidth: o,
          rotation: r,
          textAlign: "start" === t.align ? "left" : "end" === t.align ? "right" : "center",
          textBaseline: "middle",
          translation: [i, a]
        });
      }
    }
    var Ro = {
      id: "title",
      _element: Mo,
      start(e, t, n) {
        !function (e, t) {
          const n = new Mo({
            ctx: e.ctx,
            options: t,
            chart: e
          });
          Ni.configure(e, n, t);
          Ni.addBox(e, n);
          e.titleBlock = n;
        }(e, n);
      },
      stop(e) {
        const t = e.titleBlock;
        Ni.removeBox(e, t);
        delete e.titleBlock;
      },
      beforeUpdate(e, t, n) {
        const s = e.titleBlock;
        Ni.configure(e, s, n);
        s.options = n;
      },
      defaults: {
        align: "center",
        display: false,
        font: {
          weight: "bold"
        },
        fullSize: true,
        padding: 10,
        position: "top",
        text: "",
        weight: 2e3
      },
      defaultRoutes: {
        color: "color"
      },
      descriptors: {
        _scriptable: true,
        _indexable: false
      }
    };
    const ko = new WeakMap();
    var Do = {
      id: "subtitle",
      start(e, t, n) {
        const s = new Mo({
          ctx: e.ctx,
          options: n,
          chart: e
        });
        Ni.configure(e, s, n);
        Ni.addBox(e, s);
        ko.set(e, s);
      },
      stop(e) {
        Ni.removeBox(e, ko.get(e));
        ko.delete(e);
      },
      beforeUpdate(e, t, n) {
        const s = ko.get(e);
        Ni.configure(e, s, n);
        s.options = n;
      },
      defaults: {
        align: "center",
        display: false,
        font: {
          weight: "normal"
        },
        fullSize: true,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500
      },
      defaultRoutes: {
        color: "color"
      },
      descriptors: {
        _scriptable: true,
        _indexable: false
      }
    };
    const Fo = {
      average(e) {
        if (!e.length) {
          return false;
        }
        let t;
        let n;
        let s = 0;
        let i = 0;
        let a = 0;
        t = 0;
        for (n = e.length; t < n; ++t) {
          const n = e[t].element;
          if (n && n.hasValue()) {
            const e = n.tooltipPosition();
            s += e.x;
            i += e.y;
            ++a;
          }
        }
        return {
          x: s / a,
          y: i / a
        };
      },
      nearest(e, t) {
        if (!e.length) {
          return false;
        }
        let n;
        let s;
        let i;
        let a = t.x;
        let o = t.y;
        let r = Number.POSITIVE_INFINITY;
        n = 0;
        for (s = e.length; n < s; ++n) {
          const s = e[n].element;
          if (s && s.hasValue()) {
            const e = Math.sqrt(Math.pow(s.getCenterPoint().x - t.x, 2) + Math.pow(s.getCenterPoint().y - t.y, 2));
            if (e < r) {
              r = e;
              i = s;
            }
          }
        }
        if (i) {
          const e = i.tooltipPosition();
          a = e.x;
          o = e.y;
        }
        return {
          x: a,
          y: o
        };
      }
    };
    function Uo(e, t) {
      if (t) {
        if (ne(t)) {
          Array.prototype.push.apply(e, t);
        } else {
          e.push(t);
        }
      }
      return e;
    }
    function Bo(e) {
      return ("string" == typeof e || e instanceof String) && e.indexOf("\n") > -1 ? e.split("\n") : e;
    }
    function Go(e, t) {
      const {
        element: n,
        datasetIndex: s,
        index: i
      } = t;
      const a = e.getDatasetMeta(s).controller;
      const {
        label: o,
        value: r
      } = a.getLabelAndValue(i);
      return {
        chart: e,
        label: o,
        parsed: a.getParsed(i),
        raw: e.data.datasets[s].data[i],
        formattedValue: r,
        dataset: a.getDataset(),
        dataIndex: i,
        datasetIndex: s,
        element: n
      };
    }
    function Vo(e, t) {
      const n = e.chart.ctx;
      const {
        body: s,
        footer: i,
        title: a
      } = e;
      const {
        boxWidth: o,
        boxHeight: r
      } = t;
      const l = wn(t.bodyFont);
      const c = wn(t.titleFont);
      const u = wn(t.footerFont);
      const d = a.length;
      const m = i.length;
      const h = s.length;
      const g = Nn(t.padding);
      let p = g.height;
      let f = 0;
      let x = s.reduce((e, t) => e + t.before.length + t.lines.length + t.after.length, 0);
      x += e.beforeBody.length + e.afterBody.length;
      if (d) {
        p += d * c.lineHeight + (d - 1) * t.titleSpacing + t.titleMarginBottom;
      }
      if (x) {
        p += h * (t.displayColors ? Math.max(r, l.lineHeight) : l.lineHeight) + (x - h) * l.lineHeight + (x - 1) * t.bodySpacing;
      }
      if (m) {
        p += t.footerMarginTop + m * u.lineHeight + (m - 1) * t.footerSpacing;
      }
      let v = 0;
      const _ = function (e) {
        f = Math.max(f, n.measureText(e).width + v);
      };
      n.save();
      n.font = c.string;
      ce(e.title, _);
      n.font = l.string;
      ce(e.beforeBody.concat(e.afterBody), _);
      v = t.displayColors ? o + 2 + t.boxPadding : 0;
      ce(s, e => {
        ce(e.before, _);
        ce(e.lines, _);
        ce(e.after, _);
      });
      v = 0;
      n.font = u.string;
      ce(e.footer, _);
      n.restore();
      f += g.width;
      return {
        width: f,
        height: p
      };
    }
    function Ho(e, t, n, s) {
      const {
        x: i,
        width: a
      } = n;
      const {
        width: o,
        chartArea: {
          left: r,
          right: l
        }
      } = e;
      let c = "center";
      if ("center" === s) {
        c = i <= (r + l) / 2 ? "left" : "right";
      } else if (i <= a / 2) {
        c = "left";
      } else if (i >= o - a / 2) {
        c = "right";
      }
      if (function (e, t, n, s) {
        const {
          x: i,
          width: a
        } = s;
        const o = n.caretSize + n.caretPadding;
        return "left" === e && i + a + o > t.width || "right" === e && i - a - o < 0 || undefined;
      }(c, e, t, n)) {
        c = "center";
      }
      return c;
    }
    function Ko(e, t, n) {
      const s = n.yAlign || t.yAlign || function (e, t) {
        const {
          y: n,
          height: s
        } = t;
        return n < s / 2 ? "top" : n > e.height - s / 2 ? "bottom" : "center";
      }(e, n);
      return {
        xAlign: n.xAlign || t.xAlign || Ho(e, t, n, s),
        yAlign: s
      };
    }
    function Wo(e, t, n, s) {
      const {
        caretSize: i,
        caretPadding: a,
        cornerRadius: o
      } = e;
      const {
        xAlign: r,
        yAlign: l
      } = n;
      const c = i + a;
      const {
        topLeft: u,
        topRight: d,
        bottomLeft: m,
        bottomRight: h
      } = Sn(o, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
      let g = function (e, t) {
        let {
          x: n,
          width: s
        } = e;
        if ("right" === t) {
          n -= s;
        } else if ("center" === t) {
          n -= s / 2;
        }
        return n;
      }(t, r);
      const p = function (e, t, n) {
        let {
          y: s,
          height: i
        } = e;
        if ("top" === t) {
          s += n;
        } else {
          s -= "bottom" === t ? i + n : i / 2;
        }
        return s;
      }(t, l, c);
      if ("center" === l) {
        if ("left" === r) {
          g += c;
        } else if ("right" === r) {
          g -= c;
        }
      } else if ("left" === r) {
        g -= Math.max(u, m) + i;
      } else if ("right" === r) {
        g += Math.max(d, h) + i;
      }
      return {
        x: Math.max(0, Math.min(s.width - t.width, g)),
        y: Math.max(0, Math.min(s.height - t.height, p))
      };
    }
    function zo(e, t, n) {
      const s = Nn(n.padding);
      return "center" === t ? e.x + e.width / 2 : "right" === t ? e.x + e.width - s.right : e.x + s.left;
    }
    function Yo(e) {
      return Uo([], ("string" == typeof e || e instanceof String) && e.indexOf("\n") > -1 ? e.split("\n") : e);
    }
    function $o(e, t) {
      const n = t && t.dataset && t.dataset.tooltip && t.dataset.tooltip.callbacks;
      return n ? e.override(n) : e;
    }
    const qo = {
      beforeTitle: J,
      title(e) {
        if (e.length > 0) {
          const t = e[0];
          const n = t.chart.data.labels;
          const s = n ? n.length : 0;
          if (this && this.options && "dataset" === this.options.mode) {
            return t.dataset.label || "";
          }
          if (t.label) {
            return t.label;
          }
          if (s > 0 && t.dataIndex < s) {
            return n[t.dataIndex];
          }
        }
        return "";
      },
      afterTitle: J,
      beforeBody: J,
      beforeLabel: J,
      label(e) {
        if (this && this.options && "dataset" === this.options.mode) {
          return e.label + ": " + e.formattedValue || e.formattedValue;
        }
        let t = e.dataset.label || "";
        if (t) {
          t += ": ";
        }
        const n = e.formattedValue;
        if (!(null == n)) {
          t += n;
        }
        return t;
      },
      labelColor(e) {
        const t = e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);
        return {
          borderColor: t.borderColor,
          backgroundColor: t.backgroundColor,
          borderWidth: t.borderWidth,
          borderDash: t.borderDash,
          borderDashOffset: t.borderDashOffset,
          borderRadius: 0
        };
      },
      labelTextColor() {
        return this.options.bodyColor;
      },
      labelPointStyle(e) {
        const t = e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);
        return {
          pointStyle: t.pointStyle,
          rotation: t.rotation
        };
      },
      afterLabel: J,
      afterBody: J,
      beforeFooter: J,
      footer: J,
      afterFooter: J
    };
    function Xo(e, t, n, s) {
      const i = e[t].call(n, s);
      return undefined === i ? qo[t].call(n, s) : i;
    }
    class Qo extends Yi {
      static positioners = Fo;
      constructor(e) {
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = e.chart;
        this.options = e.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
      }
      initialize(e) {
        this.options = e;
        this._cachedAnimations = undefined;
        this.$context = undefined;
      }
      _resolveAnimations() {
        const e = this._cachedAnimations;
        if (e) {
          return e;
        }
        const t = this.chart;
        const n = this.options.setContext(this.getContext());
        const s = n.enabled && t.options.animation && n.animations;
        const i = new Os(this.chart, s);
        if (s._cacheable) {
          this._cachedAnimations = Object.freeze(i);
        }
        return i;
      }
      getContext() {
        return this.$context || (this.$context = (e = this.chart.getContext(), t = this, n = this._tooltipItems, Object.assign(Object.create(e), {
          tooltip: t,
          tooltipItems: n,
          type: "tooltip"
        })));
        var e;
        var t;
        var n;
      }
      getTitle(e, t) {
        const {
          callbacks: n
        } = t;
        const s = Xo(n, "beforeTitle", this, e);
        const i = Xo(n, "title", this, e);
        const a = Xo(n, "afterTitle", this, e);
        let o = [];
        o = Uo(o, ("string" == typeof s || s instanceof String) && s.indexOf("\n") > -1 ? s.split("\n") : s);
        o = Uo(o, ("string" == typeof i || i instanceof String) && i.indexOf("\n") > -1 ? i.split("\n") : i);
        o = Uo(o, ("string" == typeof a || a instanceof String) && a.indexOf("\n") > -1 ? a.split("\n") : a);
        return o;
      }
      getBeforeBody(e, t) {
        return Uo([], Bo(Xo(t.callbacks, "beforeBody", this, e)));
      }
      getBody(e, t) {
        const {
          callbacks: n
        } = t;
        const s = [];
        ce(e, e => {
          const t = {
            before: [],
            lines: [],
            after: []
          };
          const i = $o(n, e);
          Uo(t.before, ("string" == typeof Xo(i, "beforeLabel", this, e) || Xo(i, "beforeLabel", this, e) instanceof String) && Xo(i, "beforeLabel", this, e).indexOf("\n") > -1 ? Xo(i, "beforeLabel", this, e).split("\n") : Xo(i, "beforeLabel", this, e));
          Uo(t.lines, Xo(i, "label", this, e));
          Uo(t.after, ("string" == typeof Xo(i, "afterLabel", this, e) || Xo(i, "afterLabel", this, e) instanceof String) && Xo(i, "afterLabel", this, e).indexOf("\n") > -1 ? Xo(i, "afterLabel", this, e).split("\n") : Xo(i, "afterLabel", this, e));
          s.push(t);
        });
        return s;
      }
      getAfterBody(e, t) {
        return Uo([], Bo(Xo(t.callbacks, "afterBody", this, e)));
      }
      getFooter(e, t) {
        const {
          callbacks: n
        } = t;
        const s = Xo(n, "beforeFooter", this, e);
        const i = Xo(n, "footer", this, e);
        const a = Xo(n, "afterFooter", this, e);
        let o = [];
        o = Uo(o, ("string" == typeof s || s instanceof String) && s.indexOf("\n") > -1 ? s.split("\n") : s);
        o = Uo(o, ("string" == typeof i || i instanceof String) && i.indexOf("\n") > -1 ? i.split("\n") : i);
        o = Uo(o, ("string" == typeof a || a instanceof String) && a.indexOf("\n") > -1 ? a.split("\n") : a);
        return o;
      }
      _createItems(e) {
        const t = this._active;
        const n = this.chart.data;
        const s = [];
        const i = [];
        const a = [];
        let o;
        let r;
        let l = [];
        o = 0;
        for (r = t.length; o < r; ++o) {
          l.push(Go(this.chart, t[o]));
        }
        if (e.filter) {
          l = l.filter((t, s, i) => e.filter(t, s, i, n));
        }
        if (e.itemSort) {
          l = l.sort((t, s) => e.itemSort(t, s, n));
        }
        ce(l, t => {
          const n = $o(e.callbacks, t);
          s.push(Xo(n, "labelColor", this, t));
          i.push(Xo(n, "labelPointStyle", this, t));
          a.push(Xo(n, "labelTextColor", this, t));
        });
        this.labelColors = s;
        this.labelPointStyles = i;
        this.labelTextColors = a;
        this.dataPoints = l;
        return l;
      }
      update(e, t) {
        const n = this.options.setContext(this.getContext());
        const s = this._active;
        let i;
        let a = [];
        if (s.length) {
          const e = Fo[n.position].call(this, s, this._eventPosition);
          a = this._createItems(n);
          this.title = this.getTitle(a, n);
          this.beforeBody = this.getBeforeBody(a, n);
          this.body = this.getBody(a, n);
          this.afterBody = this.getAfterBody(a, n);
          this.footer = this.getFooter(a, n);
          const t = this._size = Vo(this, n);
          const o = Object.assign({}, e, t);
          const r = Ko(this.chart, n, o);
          const l = Wo(n, o, r, this.chart);
          this.xAlign = r.xAlign;
          this.yAlign = r.yAlign;
          i = {
            opacity: 1,
            x: l.x,
            y: l.y,
            width: t.width,
            height: t.height,
            caretX: e.x,
            caretY: e.y
          };
        } else if (0 !== this.opacity) {
          i = {
            opacity: 0
          };
        }
        this._tooltipItems = a;
        this.$context = undefined;
        if (i) {
          this._resolveAnimations().update(this, i);
        }
        if (e && n.external) {
          n.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay: t
          });
        }
      }
      drawCaret(e, t, n, s) {
        const i = this.getCaretPosition(e, n, s);
        t.lineTo(i.x1, i.y1);
        t.lineTo(i.x2, i.y2);
        t.lineTo(i.x3, i.y3);
      }
      getCaretPosition(e, t, n) {
        const {
          xAlign: s,
          yAlign: i
        } = this;
        const {
          caretSize: a,
          cornerRadius: o
        } = n;
        const {
          topLeft: r,
          topRight: l,
          bottomLeft: c,
          bottomRight: u
        } = Sn(o, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
        const {
          x: d,
          y: m
        } = e;
        const {
          width: h,
          height: g
        } = t;
        let p;
        let f;
        let x;
        let v;
        let _;
        let b;
        if ("center" === i) {
          _ = m + g / 2;
          if ("left" === s) {
            p = d;
            f = p - a;
            v = _ + a;
            b = _ - a;
          } else {
            p = d + h;
            f = p + a;
            v = _ - a;
            b = _ + a;
          }
          x = p;
        } else {
          f = "left" === s ? d + Math.max(r, c) + a : "right" === s ? d + h - Math.max(l, u) - a : this.caretX;
          if ("top" === i) {
            v = m;
            _ = v - a;
            p = f - a;
            x = f + a;
          } else {
            v = m + g;
            _ = v + a;
            p = f + a;
            x = f - a;
          }
          b = v;
        }
        return {
          x1: p,
          x2: f,
          x3: x,
          y1: v,
          y2: _,
          y3: b
        };
      }
      drawTitle(e, t, n) {
        const s = this.title;
        const i = s.length;
        let a;
        let o;
        let r;
        if (i) {
          const l = ps(n.rtl, this.x, this.width);
          e.x = zo(this, n.titleAlign, n);
          t.textAlign = l.textAlign(n.titleAlign);
          t.textBaseline = "middle";
          a = wn(n.titleFont);
          o = n.titleSpacing;
          t.fillStyle = n.titleColor;
          t.font = a.string;
          for (r = 0; r < i; ++r) {
            t.fillText(s[r], l.x(e.x), e.y + a.lineHeight / 2);
            e.y += a.lineHeight + o;
            if (r + 1 === i) {
              e.y += n.titleMarginBottom - o;
            }
          }
        }
      }
      _drawColorBox(e, t, n, s, i) {
        const a = this.labelColors[n];
        const o = this.labelPointStyles[n];
        const {
          boxHeight: r,
          boxWidth: l,
          boxPadding: c
        } = i;
        const u = wn(i.bodyFont);
        const d = zo(this, "left", i);
        const m = s.x(d);
        const h = r < u.lineHeight ? (u.lineHeight - r) / 2 : 0;
        const g = t.y + h;
        if (i.usePointStyle) {
          const t = {
            radius: Math.min(l, r) / 2,
            pointStyle: o.pointStyle,
            rotation: o.rotation,
            borderWidth: 1
          };
          const n = s.leftForLtr(m, l) + l / 2;
          const c = g + r / 2;
          e.strokeStyle = i.multiKeyBackground;
          e.fillStyle = i.multiKeyBackground;
          un(e, t, n, c);
          e.strokeStyle = a.borderColor;
          e.fillStyle = a.backgroundColor;
          un(e, t, n, c);
        } else {
          e.lineWidth = null !== a.borderWidth && "[object Object]" === Object.prototype.toString.call(a.borderWidth) ? Math.max(...Object.values(a.borderWidth)) : a.borderWidth || 1;
          e.strokeStyle = a.borderColor;
          e.setLineDash(a.borderDash || []);
          e.lineDashOffset = a.borderDashOffset || 0;
          const t = s.leftForLtr(m, l - c);
          const n = s.leftForLtr(s.xPlus(m, 1), l - c - 2);
          const o = Sn(a.borderRadius, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
          if (Object.values(o).some(e => 0 !== e)) {
            e.beginPath();
            e.fillStyle = i.multiKeyBackground;
            bn(e, {
              x: t,
              y: g,
              w: l,
              h: r,
              radius: o
            });
            e.fill();
            e.stroke();
            e.fillStyle = a.backgroundColor;
            e.beginPath();
            bn(e, {
              x: n,
              y: g + 1,
              w: l - 2,
              h: r - 2,
              radius: o
            });
            e.fill();
          } else {
            e.fillStyle = i.multiKeyBackground;
            e.fillRect(t, g, l, r);
            e.strokeRect(t, g, l, r);
            e.fillStyle = a.backgroundColor;
            e.fillRect(n, g + 1, l - 2, r - 2);
          }
        }
        e.fillStyle = this.labelTextColors[n];
      }
      drawBody(e, t, n) {
        const {
          body: s
        } = this;
        const {
          bodySpacing: i,
          bodyAlign: a,
          displayColors: o,
          boxHeight: r,
          boxWidth: l,
          boxPadding: c
        } = n;
        const u = wn(n.bodyFont);
        let d = u.lineHeight;
        let m = 0;
        const h = ps(n.rtl, this.x, this.width);
        const g = function (n) {
          t.fillText(n, h.x(e.x + m), e.y + d / 2);
          e.y += d + i;
        };
        const p = h.textAlign(a);
        let f;
        let x;
        let v;
        let _;
        let b;
        let T;
        let E;
        t.textAlign = a;
        t.textBaseline = "middle";
        t.font = u.string;
        e.x = zo(this, p, n);
        t.fillStyle = n.bodyColor;
        ce(this.beforeBody, g);
        m = o && "right" !== p ? "center" === a ? l / 2 + c : l + 2 + c : 0;
        _ = 0;
        for (T = s.length; _ < T; ++_) {
          f = s[_];
          x = this.labelTextColors[_];
          t.fillStyle = x;
          ce(f.before, g);
          v = f.lines;
          if (o && v.length) {
            this._drawColorBox(t, e, _, h, n);
            d = Math.max(u.lineHeight, r);
          }
          b = 0;
          for (E = v.length; b < E; ++b) {
            g(v[b]);
            d = u.lineHeight;
          }
          ce(f.after, g);
        }
        m = 0;
        d = u.lineHeight;
        ce(this.afterBody, g);
        e.y -= i;
      }
      drawFooter(e, t, n) {
        const s = this.footer;
        const i = s.length;
        let a;
        let o;
        if (i) {
          const r = ps(n.rtl, this.x, this.width);
          e.x = zo(this, n.footerAlign, n);
          e.y += n.footerMarginTop;
          t.textAlign = r.textAlign(n.footerAlign);
          t.textBaseline = "middle";
          a = wn(n.footerFont);
          t.fillStyle = n.footerColor;
          t.font = a.string;
          for (o = 0; o < i; ++o) {
            t.fillText(s[o], r.x(e.x), e.y + a.lineHeight / 2);
            e.y += a.lineHeight + n.footerSpacing;
          }
        }
      }
      drawBackground(e, t, n, s) {
        const {
          xAlign: i,
          yAlign: a
        } = this;
        const {
          x: o,
          y: r
        } = e;
        const {
          width: l,
          height: c
        } = n;
        const {
          topLeft: u,
          topRight: d,
          bottomLeft: m,
          bottomRight: h
        } = Sn(s.cornerRadius, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
        t.fillStyle = s.backgroundColor;
        t.strokeStyle = s.borderColor;
        t.lineWidth = s.borderWidth;
        t.beginPath();
        t.moveTo(o + u, r);
        if ("top" === a) {
          this.drawCaret(e, t, n, s);
        }
        t.lineTo(o + l - d, r);
        t.quadraticCurveTo(o + l, r, o + l, r + d);
        if ("center" === a && "right" === i) {
          this.drawCaret(e, t, n, s);
        }
        t.lineTo(o + l, r + c - h);
        t.quadraticCurveTo(o + l, r + c, o + l - h, r + c);
        if ("bottom" === a) {
          this.drawCaret(e, t, n, s);
        }
        t.lineTo(o + m, r + c);
        t.quadraticCurveTo(o, r + c, o, r + c - m);
        if ("center" === a && "left" === i) {
          this.drawCaret(e, t, n, s);
        }
        t.lineTo(o, r + u);
        t.quadraticCurveTo(o, r, o + u, r);
        t.closePath();
        t.fill();
        if (s.borderWidth > 0) {
          t.stroke();
        }
      }
      _updateAnimationTarget(e) {
        const t = this.chart;
        const n = this.$animations;
        const s = n && n.x;
        const i = n && n.y;
        if (s || i) {
          const n = Fo[e.position].call(this, this._active, this._eventPosition);
          if (!n) {
            return;
          }
          const a = this._size = Vo(this, e);
          const o = Object.assign({}, n, this._size);
          const r = Ko(t, e, o);
          const l = Wo(e, o, r, t);
          if (!(s._to === l.x && i._to === l.y)) {
            this.xAlign = r.xAlign;
            this.yAlign = r.yAlign;
            this.width = a.width;
            this.height = a.height;
            this.caretX = n.x;
            this.caretY = n.y;
            this._resolveAnimations().update(this, l);
          }
        }
      }
      _willRender() {
        return !!this.opacity;
      }
      draw(e) {
        const t = this.options.setContext(this.getContext());
        let n = this.opacity;
        if (!n) {
          return;
        }
        this._updateAnimationTarget(t);
        const s = {
          width: this.width,
          height: this.height
        };
        const i = {
          x: this.x,
          y: this.y
        };
        n = Math.abs(n) < .001 ? 0 : n;
        const a = Nn(t.padding);
        const o = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (t.enabled && o) {
          e.save();
          e.globalAlpha = n;
          this.drawBackground(i, e, s, t);
          fs(e, t.textDirection);
          i.y += a.top;
          this.drawTitle(i, e, t);
          this.drawBody(i, e, t);
          this.drawFooter(i, e, t);
          xs(e, t.textDirection);
          e.restore();
        }
      }
      getActiveElements() {
        return this._active || [];
      }
      setActiveElements(e, t) {
        const n = this._active;
        const s = e.map(({
          datasetIndex: e,
          index: t
        }) => {
          const n = this.chart.getDatasetMeta(e);
          if (!n) {
            throw new Error("Cannot find a dataset at index " + e);
          }
          return {
            datasetIndex: e,
            element: n.data[t],
            index: t
          };
        });
        const i = !ue(n, s);
        const a = this._positionChanged(s, t);
        if (i || a) {
          this._active = s;
          this._eventPosition = t;
          this._ignoreReplayEvents = true;
          this.update(true);
        }
      }
      handleEvent(e, t, n = true) {
        if (t && this._ignoreReplayEvents) {
          return false;
        }
        this._ignoreReplayEvents = false;
        const s = this.options;
        const i = this._active || [];
        const a = this._getActiveElements(e, i, t, n);
        const o = this._positionChanged(a, e);
        const r = t || !ue(a, i) || o;
        if (r) {
          this._active = a;
          if (s.enabled || s.external) {
            this._eventPosition = {
              x: e.x,
              y: e.y
            };
            this.update(true, t);
          }
        }
        return r;
      }
      _getActiveElements(e, t, n, s) {
        const i = this.options;
        if ("mouseout" === e.type) {
          return [];
        }
        if (!s) {
          return t;
        }
        const a = this.chart.getElementsAtEventForMode(e, i.mode, i, n);
        if (i.reverse) {
          a.reverse();
        }
        return a;
      }
      _positionChanged(e, t) {
        const {
          caretX: n,
          caretY: s,
          options: i
        } = this;
        const a = Fo[i.position].call(this, e, t);
        return false !== a && (n !== a.x || s !== a.y);
      }
    }
    var Zo = {
      id: "tooltip",
      _element: Qo,
      positioners: Fo,
      afterInit(e, t, n) {
        if (n) {
          e.tooltip = new Qo({
            chart: e,
            options: n
          });
        }
      },
      beforeUpdate(e, t, n) {
        if (e.tooltip) {
          e.tooltip.initialize(n);
        }
      },
      reset(e, t, n) {
        if (e.tooltip) {
          e.tooltip.initialize(n);
        }
      },
      afterDraw(e) {
        const t = e.tooltip;
        if (t && t._willRender()) {
          const n = {
            tooltip: t
          };
          if (false === e.notifyPlugins("beforeTooltipDraw", {
            ...n,
            cancelable: true
          })) {
            return;
          }
          t.draw(e.ctx);
          e.notifyPlugins("afterTooltipDraw", n);
        }
      },
      afterEvent(e, t) {
        if (e.tooltip) {
          const n = t.replay;
          if (e.tooltip.handleEvent(t.event, n, t.inChartArea)) {
            t.changed = true;
          }
        }
      },
      defaults: {
        enabled: true,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: {
          weight: "bold"
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
          weight: "bold"
        },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (e, t) => t.bodyFont.size,
        boxWidth: (e, t) => t.bodyFont.size,
        multiKeyBackground: "#fff",
        displayColors: true,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: {
          duration: 400,
          easing: "easeOutQuart"
        },
        animations: {
          numbers: {
            type: "number",
            properties: ["x", "y", "width", "height", "caretX", "caretY"]
          },
          opacity: {
            easing: "linear",
            duration: 200
          }
        },
        callbacks: qo
      },
      defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font"
      },
      descriptors: {
        _scriptable: e => "filter" !== e && "itemSort" !== e && "external" !== e,
        _indexable: false,
        callbacks: {
          _scriptable: false,
          _indexable: false
        },
        animation: {
          _fallback: false
        },
        animations: {
          _fallback: "animation"
        }
      },
      additionalOptionScopes: ["interaction"]
    };
    var Jo = Object.freeze({
      __proto__: null,
      Colors: lo,
      Decimation: mo,
      Filler: wo,
      Legend: Ao,
      SubTitle: Do,
      Title: Ro,
      Tooltip: Zo
    });
    function er(e, t, n, s) {
      const i = e.indexOf(t);
      if (-1 === i) {
        return ((e, t, n, s) => ("string" == typeof t ? (n = e.push(t) - 1, s.unshift({
          index: n,
          label: t
        })) : isNaN(t) && (n = null), n))(e, t, n, s);
      }
      return i !== e.lastIndexOf(t) ? n : i;
    }
    function tr(e) {
      const t = this.getLabels();
      return e >= 0 && e < t.length ? t[e] : e;
    }
    class nr extends na {
      static id = "category";
      static defaults = {
        ticks: {
          callback: tr
        }
      };
      constructor(e) {
        super(e);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
      }
      init(e) {
        const t = this._addedLabels;
        if (t.length) {
          const e = this.getLabels();
          for (const {
            index: n,
            label: s
          } of t) if (e[n] === s) {
            e.splice(n, 1);
          }
          this._addedLabels = [];
        }
        super.init(e);
      }
      parse(e, t) {
        if (null == e) {
          return null;
        }
        const n = this.getLabels();
        return ((e, t) => null === e ? null : Math.max(0, Math.min(t, Math.round(e))))(t = isFinite(t) && n[t] === e ? t : er(n, e, undefined === t ? e : t, this._addedLabels), n.length - 1);
      }
      determineDataLimits() {
        const {
          minDefined: e,
          maxDefined: t
        } = this.getUserBounds();
        let {
          min: n,
          max: s
        } = this.getMinMax(true);
        if ("ticks" === this.options.bounds) {
          if (!e) {
            n = 0;
          }
          if (!t) {
            s = this.getLabels().length - 1;
          }
        }
        this.min = n;
        this.max = s;
      }
      buildTicks() {
        const e = this.min;
        const t = this.max;
        const n = this.options.offset;
        const s = [];
        let i = this.getLabels();
        i = 0 === e && t === i.length - 1 ? i : i.slice(e, t + 1);
        this._valueRange = Math.max(i.length - (n ? 0 : 1), 1);
        this._startValue = this.min - (n ? .5 : 0);
        for (let n = e; n <= t; n++) {
          s.push({
            value: n
          });
        }
        return s;
      }
      getLabelForValue(e) {
        return tr.call(this, e);
      }
      configure() {
        super.configure();
        if (!this.isHorizontal()) {
          this._reversePixels = !this._reversePixels;
        }
      }
      getPixelForValue(e) {
        if ("number" != typeof e) {
          e = this.parse(e);
        }
        return null === e ? NaN : this.getPixelForDecimal((e - this._startValue) / this._valueRange);
      }
      getPixelForTick(e) {
        const t = this.ticks;
        return e < 0 || e > t.length - 1 ? null : this.getPixelForValue(t[e].value);
      }
      getValueForPixel(e) {
        return Math.round(this._startValue + this.getDecimalForPixel(e) * this._valueRange);
      }
      getBasePixel() {
        return this.bottom;
      }
    }
    function sr(e, t) {
      const n = [];
      const {
        bounds: s,
        step: i,
        min: a,
        max: o,
        precision: r,
        count: l,
        maxTicks: c,
        maxDigits: u,
        includeBounds: d
      } = e;
      const m = i || 1;
      const h = c - 1;
      const {
        min: g,
        max: p
      } = t;
      const f = !(null == a);
      const x = !(null == o);
      const v = !(null == l);
      const _ = (p - g) / (u + 1);
      let b;
      let T;
      let E;
      let I;
      let y = Me((p - g) / h / m) * m;
      if (y < 1e-14 && !f && !x) {
        return [{
          value: g
        }, {
          value: p
        }];
      }
      I = Math.ceil(p / y) - Math.floor(g / y);
      if (I > h) {
        y = Me(I * y / h / m) * m;
      }
      if (!(null == r)) {
        b = Math.pow(10, r);
        y = Math.ceil(y * b) / b;
      }
      if ("ticks" === s) {
        T = Math.floor(g / y) * y;
        E = Math.ceil(p / y) * y;
      } else {
        T = g;
        E = p;
      }
      if (f && x && i && function (e, t) {
        const n = Math.round(e);
        return n - t <= e && n + t >= e;
      }((o - a) / i, y / 1e3)) {
        I = Math.round(Math.min((o - a) / y, c));
        y = (o - a) / I;
        T = a;
        E = o;
      } else if (v) {
        T = f ? a : T;
        E = x ? o : E;
        I = l - 1;
        y = (E - T) / I;
      } else {
        I = (E - T) / y;
        I = Math.abs(I - Math.round(I)) < y / 1e3 ? Math.round(I) : Math.ceil(I);
      }
      const S = Math.max(Ue(y), Ue(T));
      b = Math.pow(10, null == r ? S : r);
      T = Math.round(T * b) / b;
      E = Math.round(E * b) / b;
      let j = 0;
      for (f && (d && T !== a ? (n.push({
        value: a
      }), T < a && j++, Math.abs(Math.round((T + j * y) * b) / b - a) < ir(a, _, e) && j++) : T < a && j++); j < I; ++j) {
        n.push({
          value: Math.round((T + j * y) * b) / b
        });
      }
      if (x && d && E !== o) {
        if (n.length && Math.abs(n[n.length - 1].value - o) < ir(o, _, e)) {
          n[n.length - 1].value = o;
        } else {
          n.push({
            value: o
          });
        }
      } else if (!(x && E !== o)) {
        n.push({
          value: E
        });
      }
      return n;
    }
    function ir(e, t, {
      horizontal: n,
      minRotation: s
    }) {
      const i = s * (Ie / 180);
      const a = (n ? Math.sin(i) : Math.cos(i)) || .001;
      const o = .75 * t * ("" + e).length;
      return Math.min(t / a, o);
    }
    class ar extends na {
      constructor(e) {
        super(e);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
      }
      parse(e, t) {
        return null == e || ("number" == typeof e || e instanceof Number) && !isFinite(+e) ? null : +e;
      }
      handleTickRangeOptions() {
        const {
          beginAtZero: e
        } = this.options;
        const {
          minDefined: t,
          maxDefined: n
        } = this.getUserBounds();
        let {
          min: s,
          max: i
        } = this;
        const a = e => s = t ? s : e;
        const o = e => i = n ? i : e;
        if (e) {
          const e = Le(s);
          const t = Le(i);
          if (e < 0 && t < 0) {
            i = n ? i : 0;
          } else if (e > 0 && t > 0) {
            s = t ? s : 0;
          }
        }
        if (s === i) {
          let t = 0 === i ? 1 : Math.abs(.05 * i);
          i = n ? i : i + t;
          if (!e) {
            s = t ? s : s - t;
          }
        }
        this.min = s;
        this.max = i;
      }
      getTickLimit() {
        const e = this.options.ticks;
        let t;
        let {
          maxTicksLimit: n,
          stepSize: s
        } = e;
        if (s) {
          t = Math.ceil(this.max / s) - Math.floor(this.min / s) + 1;
          if (t > 1e3) {
            console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${t} ticks. Limiting to 1000.`);
            t = 1e3;
          }
        } else {
          t = this.computeTickLimit();
          n = n || 11;
        }
        if (n) {
          t = Math.min(n, t);
        }
        return t;
      }
      computeTickLimit() {
        return Number.POSITIVE_INFINITY;
      }
      buildTicks() {
        const e = this.options;
        const t = e.ticks;
        let n = this.getTickLimit();
        n = Math.max(2, n);
        const s = sr({
          maxTicks: n,
          bounds: e.bounds,
          min: e.min,
          max: e.max,
          precision: t.precision,
          step: t.stepSize,
          count: t.count,
          maxDigits: this._maxDigits(),
          horizontal: this.isHorizontal(),
          minRotation: t.minRotation || 0,
          includeBounds: false !== t.includeBounds
        }, this._range || this);
        if ("ticks" === e.bounds) {
          ke(s, this, "value");
        }
        if (e.reverse) {
          s.reverse();
          this.start = this.max;
          this.end = this.min;
        } else {
          this.start = this.min;
          this.end = this.max;
        }
        return s;
      }
      configure() {
        const e = this.ticks;
        let t = this.min;
        let n = this.max;
        super.configure();
        if (this.options.offset && e.length) {
          const s = (n - t) / Math.max(e.length - 1, 1) / 2;
          t -= s;
          n += s;
        }
        this._startValue = t;
        this._endValue = n;
        this._valueRange = n - t;
      }
      getLabelForValue(e) {
        return Xt(e, this.chart.options.locale, this.options.ticks.format);
      }
    }
    class or extends ar {
      static id = "linear";
      static defaults = {
        ticks: {
          callback: Zt.formatters.numeric
        }
      };
      determineDataLimits() {
        const {
          min: e,
          max: t
        } = this.getMinMax(true);
        this.min = ("number" == typeof e || e instanceof Number) && isFinite(+e) ? e : 0;
        this.max = ("number" == typeof t || t instanceof Number) && isFinite(+t) ? t : 1;
        this.handleTickRangeOptions();
      }
      computeTickLimit() {
        const e = this.isHorizontal();
        const t = e ? this.width : this.height;
        const n = this.options.ticks.minRotation * (Ie / 180);
        const s = (e ? Math.sin(n) : Math.cos(n)) || .001;
        const i = this._resolveTickFontOptions(0);
        return Math.ceil(t / Math.min(40, i.lineHeight / s));
      }
      getPixelForValue(e) {
        return null === e ? NaN : this.getPixelForDecimal((e - this._startValue) / this._valueRange);
      }
      getValueForPixel(e) {
        return this._startValue + this.getDecimalForPixel(e) * this._valueRange;
      }
    }
    const rr = e => Math.floor(Pe(e));
    const lr = (e, t) => Math.pow(10, Math.floor(Pe(e)) + t);
    function cr(e) {
      return 1 === e / Math.pow(10, Math.floor(Pe(e)));
    }
    function ur(e, t, n) {
      const s = Math.pow(10, n);
      const i = Math.floor(e / s);
      return Math.ceil(t / s) - i;
    }
    function dr(e, {
      min: t,
      max: n
    }) {
      t = ie(e.min) ? e.min : t;
      const s = [];
      const i = Math.floor(Pe(t));
      let a = function (e, t) {
        let n = Math.floor(Pe(t - e));
        for (; ur(e, t, n) > 10;) {
          n++;
        }
        for (; ur(e, t, n) < 10;) {
          n--;
        }
        return Math.min(n, Math.floor(Pe(e)));
      }(t, n);
      let o = a < 0 ? Math.pow(10, Math.abs(a)) : 1;
      const r = Math.pow(10, a);
      const l = i > a ? Math.pow(10, i) : 0;
      const c = Math.round((t - l) * o) / o;
      const u = Math.floor((t - l) / r / 10) * r * 10;
      let d = Math.floor((c - u) / Math.pow(10, a));
      let m = ie(e.min) ? e.min : Math.round((l + u + d * Math.pow(10, a)) * o) / o;
      for (; m < n;) {
        s.push({
          value: m,
          major: 1 === m / Math.pow(10, rr(m)),
          significand: d
        });
        if (d >= 10) {
          d = d < 15 ? 15 : 20;
        } else {
          d++;
        }
        if (d >= 20) {
          a++;
          d = 2;
          o = a >= 0 ? 1 : o;
        }
        m = Math.round((l + u + d * Math.pow(10, a)) * o) / o;
      }
      const h = ie(e.max) ? e.max : m;
      s.push({
        value: h,
        major: 1 === h / Math.pow(10, rr(h)),
        significand: d
      });
      return s;
    }
    class mr extends na {
      static id = "logarithmic";
      static defaults = {
        ticks: {
          callback: Zt.formatters.logarithmic,
          major: {
            enabled: true
          }
        }
      };
      constructor(e) {
        super(e);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
      }
      parse(e, t) {
        const n = ar.prototype.parse.apply(this, [e, t]);
        if (0 !== n) {
          return ("number" == typeof n || n instanceof Number) && isFinite(+n) && n > 0 ? n : null;
        }
        this._zero = true;
      }
      determineDataLimits() {
        const {
          min: e,
          max: t
        } = this.getMinMax(true);
        this.min = ("number" == typeof e || e instanceof Number) && isFinite(+e) ? Math.max(0, e) : null;
        this.max = ("number" == typeof t || t instanceof Number) && isFinite(+t) ? Math.max(0, t) : null;
        if (this.options.beginAtZero) {
          this._zero = true;
        }
        if (this._zero && this.min !== this._suggestedMin && !(("number" == typeof this._userMin || this._userMin instanceof Number) && isFinite(+this._userMin))) {
          this.min = e === Math.pow(10, rr(this.min) + 0) ? Math.pow(10, rr(this.min) + -1) : Math.pow(10, rr(this.min) + 0);
        }
        this.handleTickRangeOptions();
      }
      handleTickRangeOptions() {
        const {
          minDefined: e,
          maxDefined: t
        } = this.getUserBounds();
        let n = this.min;
        let s = this.max;
        const i = t => n = e ? n : t;
        const a = e => s = t ? s : e;
        if (n === s) {
          if (n <= 0) {
            n = e ? n : 1;
            s = t ? s : 10;
          } else {
            n = e ? n : Math.pow(10, rr(n) + -1);
            s = t ? s : Math.pow(10, rr(s) + 1);
          }
        }
        if (n <= 0) {
          n = e ? n : Math.pow(10, rr(s) + -1);
        }
        if (s <= 0) {
          s = t ? s : Math.pow(10, rr(n) + 1);
        }
        this.min = n;
        this.max = s;
      }
      buildTicks() {
        const e = this.options;
        const t = dr({
          min: this._userMin,
          max: this._userMax
        }, this);
        if ("ticks" === e.bounds) {
          ke(t, this, "value");
        }
        if (e.reverse) {
          t.reverse();
          this.start = this.max;
          this.end = this.min;
        } else {
          this.start = this.min;
          this.end = this.max;
        }
        return t;
      }
      getLabelForValue(e) {
        return undefined === e ? "0" : Xt(e, this.chart.options.locale, this.options.ticks.format);
      }
      configure() {
        const e = this.min;
        super.configure();
        this._startValue = Pe(e);
        this._valueRange = Pe(this.max) - Pe(e);
      }
      getPixelForValue(e) {
        if (!(undefined !== e && 0 !== e)) {
          e = this.min;
        }
        return null === e || isNaN(e) ? NaN : this.getPixelForDecimal(e === this.min ? 0 : (Pe(e) - this._startValue) / this._valueRange);
      }
      getValueForPixel(e) {
        const t = this.getDecimalForPixel(e);
        return Math.pow(10, this._startValue + t * this._valueRange);
      }
    }
    function hr(e) {
      const t = e.ticks;
      if (t.display && e.display) {
        const e = Nn(t.backdropPadding);
        return (undefined === (t.font && t.font.size) ? an.font.size : t.font && t.font.size) + e.height;
      }
      return 0;
    }
    function gr(e, t, n, s, i) {
      return e === s || e === i ? {
        start: t - n / 2,
        end: t + n / 2
      } : e < s || e > i ? {
        start: t - n,
        end: t
      } : {
        start: t,
        end: t + n
      };
    }
    function pr(e) {
      const t = {
        l: e.left + e._padding.left,
        r: e.right - e._padding.right,
        t: e.top + e._padding.top,
        b: e.bottom - e._padding.bottom
      };
      const n = Object.assign({}, t);
      const s = [];
      const i = [];
      const a = e._pointLabels.length;
      const o = e.options.pointLabels;
      const r = o.centerPointLabels ? Ie / a : 0;
      for (let d = 0; d < a; d++) {
        const a = o.setContext(e.getPointLabelContext(d));
        i[d] = a.padding;
        const m = e.getPointPosition(d, e.drawingArea + i[d], r);
        const h = wn(a.font);
        l = e.ctx;
        c = h;
        u = ne(u = e._pointLabels[d]) ? u : [u];
        const g = {
          w: rn(l, c.string, u),
          h: u.length * c.lineHeight
        };
        s[d] = g;
        const p = ((e.getIndexAngle(d) + r) % ye + ye) % ye;
        const f = Math.round(p * (180 / Ie));
        fr(n, t, p, f === 0 || f === 180 ? {
          start: m.x - g.w / 2,
          end: m.x + g.w / 2
        } : f < 0 || f > 180 ? {
          start: m.x - g.w,
          end: m.x
        } : {
          start: m.x,
          end: m.x + g.w
        }, f === 90 || f === 270 ? {
          start: m.y - g.h / 2,
          end: m.y + g.h / 2
        } : f < 90 || f > 270 ? {
          start: m.y - g.h,
          end: m.y
        } : {
          start: m.y,
          end: m.y + g.h
        });
      }
      var l;
      var c;
      var u;
      e.setCenterPoint(t.l - n.l, n.r - t.r, t.t - n.t, n.b - t.b);
      e._pointLabelItems = function (e, t, n) {
        const s = [];
        const i = e._pointLabels.length;
        const a = e.options;
        const o = hr(a) / 2;
        const r = e.drawingArea;
        const l = a.pointLabels.centerPointLabels ? Ie / i : 0;
        for (let a = 0; a < i; a++) {
          const i = e.getPointPosition(a, r + o + n[a], l);
          const c = Math.round(((i.angle + Ne) % ye + ye) % ye * (180 / Ie));
          const u = t[a];
          const d = _r(i.y, u.h, c);
          const m = 0 === c || 180 === c ? "center" : c < 180 ? "left" : "right";
          const h = vr(i.x, u.w, m);
          s.push({
            x: i.x,
            y: d,
            textAlign: m,
            left: h,
            top: d,
            right: h + u.w,
            bottom: d + u.h
          });
        }
        return s;
      }(e, s, i);
    }
    function fr(e, t, n, s, i) {
      const a = Math.abs(Math.sin(n));
      const o = Math.abs(Math.cos(n));
      let r = 0;
      let l = 0;
      if (s.start < t.l) {
        r = (t.l - s.start) / a;
        e.l = Math.min(e.l, t.l - r);
      } else if (s.end > t.r) {
        r = (s.end - t.r) / a;
        e.r = Math.max(e.r, t.r + r);
      }
      if (i.start < t.t) {
        l = (t.t - i.start) / o;
        e.t = Math.min(e.t, t.t - l);
      } else if (i.end > t.b) {
        l = (i.end - t.b) / o;
        e.b = Math.max(e.b, t.b + l);
      }
    }
    function xr(e) {
      return 0 === e || 180 === e ? "center" : e < 180 ? "left" : "right";
    }
    function vr(e, t, n) {
      if ("right" === n) {
        e -= t;
      } else if ("center" === n) {
        e -= t / 2;
      }
      return e;
    }
    function _r(e, t, n) {
      if (90 === n || 270 === n) {
        e -= t / 2;
      } else if (n > 270 || n < 90) {
        e -= t;
      }
      return e;
    }
    function br(e, t, n, s) {
      const {
        ctx: i
      } = e;
      if (n) {
        i.arc(e.xCenter, e.yCenter, t, 0, ye);
      } else {
        let n = e.getPointPosition(0, t);
        i.moveTo(n.x, n.y);
        for (let a = 1; a < s; a++) {
          n = e.getPointPosition(a, t);
          i.lineTo(n.x, n.y);
        }
      }
    }
    class Tr extends ar {
      static id = "radialLinear";
      static defaults = {
        display: true,
        animate: true,
        position: "chartArea",
        angleLines: {
          display: true,
          lineWidth: 1,
          borderDash: [],
          borderDashOffset: 0
        },
        grid: {
          circular: false
        },
        startAngle: 0,
        ticks: {
          showLabelBackdrop: true,
          callback: Zt.formatters.numeric
        },
        pointLabels: {
          backdropColor: undefined,
          backdropPadding: 2,
          display: true,
          font: {
            size: 10
          },
          callback: e => e,
          padding: 5,
          centerPointLabels: false
        }
      };
      static defaultRoutes = {
        "angleLines.color": "borderColor",
        "pointLabels.color": "color",
        "ticks.color": "color"
      };
      static descriptors = {
        angleLines: {
          _fallback: "grid"
        }
      };
      constructor(e) {
        super(e);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
      }
      setDimensions() {
        const e = this._padding = Nn(hr(this.options) / 2);
        const t = this.width = this.maxWidth - e.width;
        const n = this.height = this.maxHeight - e.height;
        this.xCenter = Math.floor(this.left + t / 2 + e.left);
        this.yCenter = Math.floor(this.top + n / 2 + e.top);
        this.drawingArea = Math.floor(Math.min(t, n) / 2);
      }
      determineDataLimits() {
        const {
          min: e,
          max: t
        } = this.getMinMax(false);
        this.min = ("number" == typeof e || e instanceof Number) && isFinite(+e) && !isNaN(e) ? e : 0;
        this.max = ("number" == typeof t || t instanceof Number) && isFinite(+t) && !isNaN(t) ? t : 0;
        this.handleTickRangeOptions();
      }
      computeTickLimit() {
        return Math.ceil(this.drawingArea / hr(this.options));
      }
      generateTickLabels(e) {
        ar.prototype.generateTickLabels.call(this, e);
        this._pointLabels = this.getLabels().map((e, t) => {
          const n = le(this.options.pointLabels.callback, [e, t], this);
          return n || 0 === n ? n : "";
        }).filter((e, t) => this.chart.getDataVisibility(t));
      }
      fit() {
        const e = this.options;
        if (e.display && e.pointLabels.display) {
          pr(this);
        } else {
          this.setCenterPoint(0, 0, 0, 0);
        }
      }
      setCenterPoint(e, t, n, s) {
        this.xCenter += Math.floor((e - t) / 2);
        this.yCenter += Math.floor((n - s) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(e, t, n, s));
      }
      getIndexAngle(e) {
        return ((e * (ye / (this._pointLabels.length || 1)) + (this.options.startAngle || 0) * (Ie / 180)) % ye + ye) % ye;
      }
      getDistanceFromCenterForValue(e) {
        if (null == e) {
          return NaN;
        }
        const t = this.drawingArea / (this.max - this.min);
        return this.options.reverse ? (this.max - e) * t : (e - this.min) * t;
      }
      getValueForDistanceFromCenter(e) {
        if (null == e) {
          return NaN;
        }
        const t = e / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - t : this.min + t;
      }
      getPointLabelContext(e) {
        const t = this._pointLabels || [];
        if (e >= 0 && e < t.length) {
          const n = t[e];
          return function (e, t, n) {
            return Object.assign(Object.create(e), {
              label: n,
              index: t,
              type: "pointLabel"
            });
          }(this.getContext(), e, n);
        }
      }
      getPointPosition(e, t, n = 0) {
        const s = this.getIndexAngle(e) - Ne + n;
        return {
          x: Math.cos(s) * t + this.xCenter,
          y: Math.sin(s) * t + this.yCenter,
          angle: s
        };
      }
      getPointPositionForValue(e, t) {
        return this.getPointPosition(e, this.getDistanceFromCenterForValue(t));
      }
      getBasePosition(e) {
        return this.getPointPositionForValue(e || 0, this.getBaseValue());
      }
      getPointLabelPosition(e) {
        const {
          left: t,
          top: n,
          right: s,
          bottom: i
        } = this._pointLabelItems[e];
        return {
          left: t,
          top: n,
          right: s,
          bottom: i
        };
      }
      drawBackground() {
        const {
          backgroundColor: e,
          grid: {
            circular: t
          }
        } = this.options;
        if (e) {
          const n = this.ctx;
          n.save();
          n.beginPath();
          br(this, this.getDistanceFromCenterForValue(this._endValue), t, this._pointLabels.length);
          n.closePath();
          n.fillStyle = e;
          n.fill();
          n.restore();
        }
      }
      drawGrid() {
        const e = this.ctx;
        const t = this.options;
        const {
          angleLines: n,
          grid: s,
          border: i
        } = t;
        const a = this._pointLabels.length;
        let o;
        let r;
        let l;
        if (t.pointLabels.display) {
          (function (e, t) {
            const {
              ctx: n,
              options: {
                pointLabels: s
              }
            } = e;
            for (let i = t - 1; i >= 0; i--) {
              const t = s.setContext(e.getPointLabelContext(i));
              const a = wn(t.font);
              const {
                x: o,
                y: r,
                textAlign: l,
                left: c,
                top: u,
                right: d,
                bottom: m
              } = e._pointLabelItems[i];
              const {
                backdropColor: h
              } = t;
              if (!(null == h)) {
                const e = Sn(t.borderRadius, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
                const s = Nn(t.backdropPadding);
                n.fillStyle = h;
                const i = c - s.left;
                const a = u - s.top;
                const o = d - c + s.width;
                const r = m - u + s.height;
                if (Object.values(e).some(e => 0 !== e)) {
                  n.beginPath();
                  bn(n, {
                    x: i,
                    y: a,
                    w: o,
                    h: r,
                    radius: e
                  });
                  n.fill();
                } else {
                  n.fillRect(i, a, o, r);
                }
              }
              xn(n, e._pointLabels[i], o, r + a.lineHeight / 2, a, {
                color: t.color,
                textAlign: l,
                textBaseline: "middle"
              });
            }
          })(this, a);
        }
        if (s.display) {
          this.ticks.forEach((e, t) => {
            if (0 !== t) {
              r = this.getDistanceFromCenterForValue(e.value);
              const n = this.getContext(t);
              const o = s.setContext(n);
              const l = i.setContext(n);
              !function (e, t, n, s, i) {
                const a = e.ctx;
                const o = t.circular;
                const {
                  color: r,
                  lineWidth: l
                } = t;
                if (!(!o && !s || !r || !l || n < 0)) {
                  a.save();
                  a.strokeStyle = r;
                  a.lineWidth = l;
                  a.setLineDash(i.dash);
                  a.lineDashOffset = i.dashOffset;
                  a.beginPath();
                  br(e, n, o, s);
                  a.closePath();
                  a.stroke();
                  a.restore();
                }
              }(this, o, r, a, l);
            }
          });
        }
        if (n.display) {
          e.save();
          for (o = a - 1; o >= 0; o--) {
            const s = n.setContext(this.getPointLabelContext(o));
            const {
              color: i,
              lineWidth: a
            } = s;
            if (a && i) {
              e.lineWidth = a;
              e.strokeStyle = i;
              e.setLineDash(s.borderDash);
              e.lineDashOffset = s.borderDashOffset;
              r = this.getDistanceFromCenterForValue(t.ticks.reverse ? this.min : this.max);
              l = this.getPointPosition(o, r);
              e.beginPath();
              e.moveTo(this.xCenter, this.yCenter);
              e.lineTo(l.x, l.y);
              e.stroke();
            }
          }
          e.restore();
        }
      }
      drawBorder() {}
      drawLabels() {
        const e = this.ctx;
        const t = this.options;
        const n = t.ticks;
        if (!n.display) {
          return;
        }
        const s = this.getIndexAngle(0);
        let i;
        let a;
        e.save();
        e.translate(this.xCenter, this.yCenter);
        e.rotate(s);
        e.textAlign = "center";
        e.textBaseline = "middle";
        this.ticks.forEach((s, o) => {
          if (0 === o && !t.reverse) {
            return;
          }
          const r = n.setContext(this.getContext(o));
          const l = wn(r.font);
          i = this.getDistanceFromCenterForValue(this.ticks[o].value);
          if (r.showLabelBackdrop) {
            e.font = l.string;
            a = e.measureText(s.label).width;
            e.fillStyle = r.backdropColor;
            const t = Nn(r.backdropPadding);
            e.fillRect(-a / 2 - t.left, -i - l.size / 2 - t.top, a + t.width, l.size + t.height);
          }
          xn(e, s.label, 0, -i, l, {
            color: r.color
          });
        });
        e.restore();
      }
      drawTitle() {}
    }
    const Er = {
      millisecond: {
        common: true,
        size: 1,
        steps: 1e3
      },
      second: {
        common: true,
        size: 1e3,
        steps: 60
      },
      minute: {
        common: true,
        size: 6e4,
        steps: 60
      },
      hour: {
        common: true,
        size: 36e5,
        steps: 24
      },
      day: {
        common: true,
        size: 864e5,
        steps: 30
      },
      week: {
        common: false,
        size: 6048e5,
        steps: 4
      },
      month: {
        common: true,
        size: 2628e6,
        steps: 12
      },
      quarter: {
        common: false,
        size: 7884e6,
        steps: 4
      },
      year: {
        common: true,
        size: 3154e7
      }
    };
    const Ir = Object.keys(Er);
    function yr(e, t) {
      return e - t;
    }
    function Sr(e, t) {
      if (null == t) {
        return null;
      }
      const n = e._adapter;
      const {
        parser: s,
        round: i,
        isoWeekday: a
      } = e._parseOpts;
      let o = t;
      if ("function" == typeof s) {
        o = s(o);
      }
      if (!(("number" == typeof o || o instanceof Number) && isFinite(+o))) {
        o = "string" == typeof s ? n.parse(o, s) : n.parse(o);
      }
      return null === o ? null : (i && (o = "week" !== i || !(!isNaN(parseFloat(a)) && isFinite(a)) && true !== a ? n.startOf(o, i) : n.startOf(o, "isoWeek", a)), +o);
    }
    function jr(e, t, n, s) {
      const i = Ir.length;
      for (let a = Ir.indexOf(e); a < i - 1; ++a) {
        const e = Er[Ir[a]];
        const i = e.steps ? e.steps : Number.MAX_SAFE_INTEGER;
        if (e.common && Math.ceil((n - t) / (i * e.size)) <= s) {
          return Ir[a];
        }
      }
      return Ir[i - 1];
    }
    function Cr(e, t, n) {
      if (n) {
        if (n.length) {
          const {
            lo: s,
            hi: i
          } = Ye(n, t);
          e[n[s] >= t ? n[s] : n[i]] = true;
        }
      } else {
        e[t] = true;
      }
    }
    function Nr(e, t, n) {
      const s = [];
      const i = {};
      const a = t.length;
      let o;
      let r;
      for (o = 0; o < a; ++o) {
        r = t[o];
        i[r] = o;
        s.push({
          value: r,
          major: false
        });
      }
      return 0 !== a && n ? function (e, t, n, s) {
        const i = e._adapter;
        const a = +i.startOf(t[0].value, s);
        const o = t[t.length - 1].value;
        let r;
        let l;
        for (r = a; r <= o; r = +i.add(r, 1, s)) {
          l = n[r];
          if (l >= 0) {
            t[l].major = true;
          }
        }
        return t;
      }(e, s, i, n) : s;
    }
    class wr extends na {
      static id = "time";
      static defaults = {
        bounds: "data",
        adapters: {},
        time: {
          parser: false,
          unit: false,
          round: false,
          isoWeekday: false,
          minUnit: "millisecond",
          displayFormats: {}
        },
        ticks: {
          source: "auto",
          callback: false,
          major: {
            enabled: false
          }
        }
      };
      constructor(e) {
        super(e);
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
        this._unit = "day";
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
      }
      init(e, t = {}) {
        const n = e.time || (e.time = {});
        const s = this._adapter = new li._date(e.adapters.date);
        s.init(t);
        ge(n.displayFormats, s.formats(), {
          merger: fe
        });
        this._parseOpts = {
          parser: n.parser,
          round: n.round,
          isoWeekday: n.isoWeekday
        };
        super.init(e);
        this._normalized = t.normalized;
      }
      parse(e, t) {
        return undefined === e ? null : Sr(this, e);
      }
      beforeLayout() {
        super.beforeLayout();
        this._cache = {
          data: [],
          labels: [],
          all: []
        };
      }
      determineDataLimits() {
        const e = this.options;
        const t = this._adapter;
        const n = e.time.unit || "day";
        let {
          min: s,
          max: i,
          minDefined: a,
          maxDefined: o
        } = this.getUserBounds();
        function r(e) {
          if (!(a || isNaN(e.min))) {
            s = Math.min(s, e.min);
          }
          if (!(o || isNaN(e.max))) {
            i = Math.max(i, e.max);
          }
        }
        if (!(a && o)) {
          r(this._getLabelBounds());
          if (!("ticks" === e.bounds && "labels" === e.ticks.source)) {
            r(this.getMinMax(false));
          }
        }
        s = ("number" == typeof s || s instanceof Number) && isFinite(+s) && !isNaN(s) ? s : +t.startOf(Date.now(), n);
        i = ("number" == typeof i || i instanceof Number) && isFinite(+i) && !isNaN(i) ? i : +t.endOf(Date.now(), n) + 1;
        this.min = Math.min(s, i - 1);
        this.max = Math.max(s + 1, i);
      }
      _getLabelBounds() {
        const e = this.getLabelTimestamps();
        let t = Number.POSITIVE_INFINITY;
        let n = Number.NEGATIVE_INFINITY;
        if (e.length) {
          t = e[0];
          n = e[e.length - 1];
        }
        return {
          min: t,
          max: n
        };
      }
      buildTicks() {
        const e = this.options;
        const t = e.time;
        const n = e.ticks;
        const s = "labels" === n.source ? this.getLabelTimestamps() : this._generate();
        if ("ticks" === e.bounds && s.length) {
          this.min = this._userMin || s[0];
          this.max = this._userMax || s[s.length - 1];
        }
        const i = this.min;
        const a = function (e, t, n) {
          let s = 0;
          let i = e.length;
          for (; s < i && e[s] < t;) {
            s++;
          }
          for (; i > s && e[i - 1] > n;) {
            i--;
          }
          return s > 0 || i < e.length ? e.slice(s, i) : e;
        }(s, i, this.max);
        this._unit = t.unit || (n.autoSkip ? jr(t.minUnit, this.min, this.max, this._getLabelCapacity(i)) : function (e, t, n, s, i) {
          for (let a = Ir.length - 1; a >= Ir.indexOf(n); a--) {
            const n = Ir[a];
            if (Er[n].common && e._adapter.diff(i, s, n) >= t - 1) {
              return n;
            }
          }
          return Ir[n ? Ir.indexOf(n) : 0];
        }(this, a.length, t.minUnit, this.min, this.max));
        this._majorUnit = n.major.enabled && "year" !== this._unit ? function (e) {
          let t = Ir.indexOf(e) + 1;
          for (let n = Ir.length; t < n; ++t) {
            if (Er[Ir[t]].common) {
              return Ir[t];
            }
          }
        }(this._unit) : undefined;
        this.initOffsets(s);
        if (e.reverse) {
          a.reverse();
        }
        return Nr(this, a, this._majorUnit);
      }
      afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) {
          this.initOffsets(this.ticks.map(e => +e.value));
        }
      }
      initOffsets(e = []) {
        let t;
        let n;
        let s = 0;
        let i = 0;
        if (this.options.offset && e.length) {
          t = this.getDecimalForValue(e[0]);
          s = 1 === e.length ? 1 - t : (this.getDecimalForValue(e[1]) - t) / 2;
          n = this.getDecimalForValue(e[e.length - 1]);
          i = 1 === e.length ? n : (n - this.getDecimalForValue(e[e.length - 2])) / 2;
        }
        const a = e.length < 3 ? .5 : .25;
        s = Math.max(0, Math.min(a, s));
        i = Math.max(0, Math.min(a, i));
        this._offsets = {
          start: s,
          end: i,
          factor: 1 / (s + 1 + i)
        };
      }
      _generate() {
        const e = this._adapter;
        const t = this.min;
        const n = this.max;
        const s = this.options;
        const i = s.time;
        const a = i.unit || jr(i.minUnit, t, n, this._getLabelCapacity(t));
        const o = undefined === s.ticks.stepSize ? 1 : s.ticks.stepSize;
        const r = "week" === a && i.isoWeekday;
        const l = !isNaN(parseFloat(r)) && isFinite(r) || true === r;
        const c = {};
        let u;
        let d;
        let m = t;
        if (l) {
          m = +e.startOf(m, "isoWeek", r);
        }
        m = +e.startOf(m, l ? "day" : a);
        if (e.diff(n, t, a) > 1e5 * o) {
          throw new Error(t + " and " + n + " are too far apart with stepSize of " + o + " " + a);
        }
        const h = "data" === s.ticks.source && this.getDataTimestamps();
        u = m;
        for (d = 0; u < n; u = +e.add(u, o, a), d++) {
          Cr(c, u, h);
        }
        if (!(u !== n && "ticks" !== s.bounds && 1 !== d)) {
          Cr(c, u, h);
        }
        return Object.keys(c).sort((e, t) => e - t).map(e => +e);
      }
      getLabelForValue(e) {
        const t = this._adapter;
        const n = this.options.time;
        return n.tooltipFormat ? t.format(e, n.tooltipFormat) : t.format(e, n.displayFormats.datetime);
      }
      _tickFormatFunction(e, t, n, s) {
        const i = this.options;
        const a = i.ticks.callback;
        if (a) {
          return le(a, [e, t, n], this);
        }
        const o = i.time.displayFormats;
        const r = this._unit;
        const l = this._majorUnit;
        const c = r && o[r];
        const u = l && o[l];
        const d = n[t];
        const m = l && u && d && d.major;
        return this._adapter.format(e, s || (m ? u : c));
      }
      generateTickLabels(e) {
        let t;
        let n;
        let s;
        t = 0;
        for (n = e.length; t < n; ++t) {
          s = e[t];
          s.label = this._tickFormatFunction(s.value, t, e);
        }
      }
      getDecimalForValue(e) {
        return null === e ? NaN : (e - this.min) / (this.max - this.min);
      }
      getPixelForValue(e) {
        const t = this._offsets;
        const n = this.getDecimalForValue(e);
        return this.getPixelForDecimal((t.start + n) * t.factor);
      }
      getValueForPixel(e) {
        const t = this._offsets;
        const n = this.getDecimalForPixel(e) / t.factor - t.end;
        return this.min + n * (this.max - this.min);
      }
      _getLabelSize(e) {
        const t = this.options.ticks;
        const n = this.ctx.measureText(e).width;
        const s = (this.isHorizontal() ? t.maxRotation : t.minRotation) * (Ie / 180);
        const i = Math.cos(s);
        const a = Math.sin(s);
        const o = this._resolveTickFontOptions(0).size;
        return {
          w: n * i + o * a,
          h: n * a + o * i
        };
      }
      _getLabelCapacity(e) {
        const t = this.options.time;
        const n = t.displayFormats;
        const s = n[t.unit] || n.millisecond;
        const i = this._tickFormatFunction(e, 0, Nr(this, [e], this._majorUnit), s);
        const a = this._getLabelSize(i);
        const o = Math.floor(this.isHorizontal() ? this.width / a.w : this.height / a.h) - 1;
        return o > 0 ? o : 1;
      }
      getDataTimestamps() {
        let e;
        let t;
        let n = this._cache.data || [];
        if (n.length) {
          return n;
        }
        const s = this.getMatchingVisibleMetas();
        if (this._normalized && s.length) {
          return this._cache.data = s[0].controller.getAllParsedValues(this);
        }
        e = 0;
        for (t = s.length; e < t; ++e) {
          n = n.concat(s[e].controller.getAllParsedValues(this));
        }
        return this._cache.data = this.normalize(n);
      }
      getLabelTimestamps() {
        const e = this._cache.labels || [];
        let t;
        let n;
        if (e.length) {
          return e;
        }
        const s = this.getLabels();
        t = 0;
        for (n = s.length; t < n; ++t) {
          e.push(Sr(this, s[t]));
        }
        return this._cache.labels = this._normalized ? e : this.normalize(e);
      }
      normalize(e) {
        return Ze(e.sort(yr));
      }
    }
    function Or(e, t, n) {
      let s;
      let i;
      let a;
      let o;
      let r = 0;
      let l = e.length - 1;
      if (n) {
        if (t >= e[r].pos && t <= e[l].pos) {
          ({
            lo: r,
            hi: l
          } = $e(e, "pos", t));
        }
        ({
          pos: s,
          time: a
        } = e[r]);
        ({
          pos: i,
          time: o
        } = e[l]);
      } else {
        if (t >= e[r].time && t <= e[l].time) {
          ({
            lo: r,
            hi: l
          } = $e(e, "time", t));
        }
        ({
          time: s,
          pos: a
        } = e[r]);
        ({
          time: i,
          pos: o
        } = e[l]);
      }
      const c = i - s;
      return c ? a + (o - a) * (t - s) / c : a;
    }
    var Pr = class extends wr {
      static id = "timeseries";
      static defaults = wr.defaults;
      constructor(e) {
        super(e);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
      }
      initOffsets() {
        const e = this._getTimestampsForTable();
        const t = this._table = this.buildLookupTable(e);
        this._minPos = Or(t, this.min);
        this._tableRange = Or(t, this.max) - this._minPos;
        super.initOffsets(e);
      }
      buildLookupTable(e) {
        const {
          min: t,
          max: n
        } = this;
        const s = [];
        const i = [];
        let a;
        let o;
        let r;
        let l;
        let c;
        a = 0;
        for (o = e.length; a < o; ++a) {
          l = e[a];
          if (l >= t && l <= n) {
            s.push(l);
          }
        }
        if (s.length < 2) {
          return [{
            time: t,
            pos: 0
          }, {
            time: n,
            pos: 1
          }];
        }
        a = 0;
        for (o = s.length; a < o; ++a) {
          c = s[a + 1];
          r = s[a - 1];
          l = s[a];
          if (Math.round((c + r) / 2) !== l) {
            i.push({
              time: l,
              pos: a / (o - 1)
            });
          }
        }
        return i;
      }
      _getTimestampsForTable() {
        let e = this._cache.all || [];
        if (e.length) {
          return e;
        }
        const t = this.getDataTimestamps();
        const n = this.getLabelTimestamps();
        e = t.length && n.length ? this.normalize(t.concat(n)) : t.length ? t : n;
        e = this._cache.all = e;
        return e;
      }
      getDecimalForValue(e) {
        return (Or(this._table, e) - this._minPos) / this._tableRange;
      }
      getValueForPixel(e) {
        const t = this._offsets;
        const n = this.getDecimalForPixel(e) / t.factor - t.end;
        return Or(this._table, n * this._tableRange + this._minPos, true);
      }
    };
    var Lr = Object.freeze({
      __proto__: null,
      CategoryScale: nr,
      LinearScale: or,
      LogarithmicScale: mr,
      RadialLinearScale: Tr,
      TimeScale: wr,
      TimeSeriesScale: Pr
    });
    const Ar = [ai, to, Jo, Lr];
    var Mr = n(611);
    var Rr = n.n(Mr);
    function kr(e, t) {
      return e === t;
    }
    function Dr({
      index: e,
      version: t
    }) {
      return `${e.toFixed(0)}:${t.toFixed(0)}`;
    }
    function Fr(e) {
      if ("string" != typeof e) {
        return;
      }
      const t = e.split(":");
      if (2 !== t.length) {
        return;
      }
      const n = parseInt(t[0]);
      const s = parseInt(t[1]);
      return isNaN(n) || isNaN(s) ? undefined : {
        index: n,
        version: s
      };
    }
    function Ur(e, t) {
      return e === t || null != e && null != t && e.index === t.index && e.version === t.version;
    }
    function Br(e, t) {
      if (e === t) {
        return true;
      }
      if (null == e || null == t || e.length !== t.length) {
        return false;
      }
      for (let n = 0; n < e.length; n++) {
        if (!Ur(e[n], t[n])) {
          return false;
        }
      }
      return true;
    }
    function Gr(e, t) {
      if (e === t) {
        return true;
      }
      if (null == e || null == t || e.length !== t.length) {
        return false;
      }
      for (let n = 0; n < e.length; n++) {
        let s = false;
        for (let i = 0; i < t.length; i++) {
          if (Ur(e[n], t[i])) {
            s = true;
            break;
          }
        }
        if (!s) {
          return false;
        }
      }
      return true;
    }
    function Vr(e) {
      return null == e || 0 === e.trim().length;
    }
    const Hr = Object.prototype.hasOwnProperty;
    function Kr(e, t, n = 1) {
      if (Object.is(e, t)) {
        return true;
      }
      if (n <= 0 || "object" != typeof e && !Array.isArray(e) || null === e || "object" != typeof t && !Array.isArray(t) || null === t) {
        return false;
      }
      if (Array.isArray(e)) {
        if (!Array.isArray(t)) {
          return false;
        }
        if (e.length !== t.length) {
          return false;
        }
        for (let s = 0; s < e.length; s++) {
          if (!Kr(e[s], t[s], n - 1)) {
            return false;
          }
        }
        return true;
      }
      const s = Object.keys(e);
      const i = Object.keys(t);
      if (s.length !== i.length) {
        return false;
      }
      for (let i = 0; i < s.length; i++) {
        if (!Hr.call(t, s[i]) || !Kr(e[s[i]], t[s[i]], n - 1)) {
          return false;
        }
      }
      return true;
    }
    function Wr(e) {
      if ("object" == typeof e && null != e) {
        const t = e.length || 0 === e.length ? [] : {};
        for (const n of Object.keys(e).sort((e, t) => e.localeCompare(t))) t[n] = Wr(e[n]);
        return JSON.stringify(t);
      }
      return e;
    }
    function zr(e) {
      if ("object" == typeof e && null != e) {
        const t = e.length || 0 === e.length ? [] : {};
        for (const n of Object.keys(e).sort((e, t) => e.localeCompare(t))) if ("__Type" !== n) {
          t[n] = Wr(e[n]);
        }
        return JSON.stringify(t);
      }
      return e;
    }
    function Yr(e, t) {
      0;
      const n = Y.useRef(e);
      if (!t(e, n.current)) {
        n.current = e;
      }
      return n.current;
    }
    function $r(e, t, n) {
      return new ul(`${e}.${t}`, n);
    }
    function qr(e) {
      return new dl(e);
    }
    function Xr(e, t, n = zr) {
      return new ml(`${e}.${t}`, n, false);
    }
    function Qr(e, t, n = zr) {
      return new ml(`${e}.${t}`, n, true);
    }
    function Zr(e, t) {
      return new fl(`${e}.${t}`);
    }
    function Jr(e, t) {
      return () => Rr().trigger(`${e}.${t}`);
    }
    function el(e, t) {
      return (...e) => Rr().trigger(`${e}.${t}`, ...e);
    }
    function tl(e, t, ...n) {
      Rr().trigger(`${e}.${t}`, ...n);
    }
    function nl(e, t, ...n) {
      return Rr().call(`${e}.${t}`, ...n);
    }
    function sl(e) {
      0;
      const t = Y.useMemo(() => e.subscribe(), [e]);
      0;
      const [n, s] = Y.useState(t.value);
      0;
      const i = Y.useRef(n);
      0;
      Y.useEffect(() => {
        const e = e => {
          if (Array.isArray(e) && Array.isArray(i.current) && !i.current.length && !e.length) {
            return;
          }
          let t = e;
          if ("number" == typeof e && e) {
            t = Math.floor(1e6 * e) / 1e6;
          }
          let n = false;
          n = "object" == typeof t && "object" == typeof i.current ? !Kr(i.current, t, 10) : t !== i.current;
          if (n) {
            i.current = t;
            s(t);
          }
        };
        e(t.value);
        t.setChangeListener(e);
        return () => t.dispose();
      }, [t]);
      return n;
    }
    function il(e, t, n) {
      0;
      const s = Y.useMemo(() => e.subscribe(), [e]);
      0;
      const [i, a] = Y.useReducer(t, t(n, s.value));
      0;
      const o = Y.useRef(s.value);
      0;
      const r = Y.useRef(i);
      0;
      Y.useEffect(() => {
        const e = e => {
          if (Array.isArray(e) && Array.isArray(o.current) && !o.current.length && !e.length) {
            return;
          }
          let n = false;
          n = "object" == typeof e && "object" == typeof o.current ? !Kr(o.current, e, 10) : e !== o.current;
          if (n) {
            const n = t(r.current, e);
            o.current = e;
            r.current = n;
            a(e);
          }
        };
        e(s.value);
        s.setChangeListener(e);
        return () => s.dispose();
      }, [s, t]);
      return i;
    }
    function al(e) {
      0;
      const t = Y.useRef(e.value);
      0;
      Y.useEffect(() => {
        const n = e.subscribe(e => t.current = e);
        return n.dispose;
      });
      return t;
    }
    function ol(e, t, n = 1) {
      0;
      Y.useEffect(() => {
        let s = e.value;
        return e.subscribe(e => {
          if (!Kr(e, s, n)) {
            t(e, s);
            s = e;
          }
        }).dispose;
      }, [e, n, t]);
      return e.value;
    }
    function rl(e, t, n) {
      0;
      const s = Y.useMemo(() => e.subscribe(t), [e, t]);
      0;
      Y.useEffect(() => {
        s.setChangeListener(n);
      }, [n, s]);
      0;
      Y.useEffect(() => s.dispose, [s]);
      return s.value;
    }
    function ll(e, t) {
      0;
      const n = Y.useMemo(() => null != t ? e.subscribe(t) : undefined, [e, t]);
      0;
      const [s, i] = Y.useState(n?.value);
      0;
      const a = Y.useRef(s);
      0;
      Y.useEffect(() => {
        if (n) {
          const e = e => {
            if (Array.isArray(e) && Array.isArray(a.current) && !a.current.length && !e.length) {
              return;
            }
            let t = e;
            if ("number" == typeof e && e) {
              t = Math.floor(1e6 * e) / 1e6;
            }
            let n = false;
            n = "object" == typeof t && "object" == typeof a.current ? !Kr(a.current, t, 10) : t !== a.current;
            if (n) {
              a.current = t;
              i(t);
            }
          };
          i(n.value);
          n.setChangeListener(e);
          return () => n.dispose();
        }
      }, [n]);
      return s;
    }
    function cl(e, t) {
      0;
      const n = Y.useMemo(() => t.map(t => e.subscribe(t)), [e, t]);
      0;
      const [s, i] = Y.useState([...n.map(e => e.value)]);
      0;
      const a = Y.useCallback(() => {
        i([...n.map(e => e.value)]);
      }, [n]);
      0;
      Y.useEffect(() => (i([...n.map(e => e.value)]), n.map(e => e.setChangeListener(a)), () => {
        n.map(e => e.dispose());
      }), [n, a]);
      return s;
    }
    X.add("game-ui/common/utils/equality.ts", {
      get defaultEqualityComparer() {
        return kr;
      },
      set defaultEqualityComparer(e) {
        kr = e;
      },
      get entityKey() {
        return Dr;
      },
      set entityKey(e) {
        Dr = e;
      },
      get parseEntityKey() {
        return Fr;
      },
      set parseEntityKey(e) {
        Fr = e;
      },
      get entityEquals() {
        return Ur;
      },
      set entityEquals(e) {
        Ur = e;
      },
      get entityArrayEquals() {
        return Br;
      },
      set entityArrayEquals(e) {
        Br = e;
      },
      get entityArrayUnorderedEquals() {
        return Gr;
      },
      set entityArrayUnorderedEquals(e) {
        Gr = e;
      },
      get isNullOrEmpty() {
        return Vr;
      },
      set isNullOrEmpty(e) {
        Vr = e;
      },
      get shallowEqual() {
        return Kr;
      },
      set shallowEqual(e) {
        Kr = e;
      },
      get stringifySorted() {
        return Wr;
      },
      set stringifySorted(e) {
        Wr = e;
      },
      get stringifySortedIgnoreBindingType() {
        return zr;
      },
      set stringifySortedIgnoreBindingType(e) {
        zr = e;
      },
      get useMemoizedValue() {
        return Yr;
      },
      set useMemoizedValue(e) {
        Yr = e;
      }
    });
    class ul {
      constructor(e, t) {
        this.fallbackValue = t;
        this.listeners = [];
        this.connections = null;
        this.disposed = false;
        this._value = undefined;
        this.subscribe = e => {
          if (this.disposed) {
            throw new Error("cannot subscribe to a disposed binding!");
          }
          this.connect();
          const t = new hl(e);
          this.listeners.push(t);
          const n = this;
          return {
            get value() {
              return n.getValueUnsafe();
            },
            setChangeListener: t.set,
            dispose() {
              const e = n.listeners.indexOf(t);
              if (-1 !== e) {
                n.listeners.splice(e, 1);
                if (0 === n.listeners.length) {
                  n.disconnect();
                }
              }
            }
          };
        };
        this.dispose = () => {
          this.disposed = true;
          this.listeners.splice(0, this.listeners.length);
          this.disconnect();
        };
        this.onUpdate = e => {
          if (e !== this._value) {
            this._value = e;
            for (const t of this.listeners) t.call(e);
          }
        };
        this.onPatch = (e, t) => {
          if (0 === e.length) {
            this.onUpdate(t);
          } else {
            if (!(null != this._value && "object" == typeof this._value)) {
              throw new Error(`cannot patch object of type ${null != this._value ? typeof this._value : this._value}!`);
            }
            {
              const n = Array.isArray(this._value) ? [...this._value] : {
                ...this._value
              };
              let s = n;
              for (let t = 0; t < e.length - 1; t++) {
                const n = e[t];
                const i = s[n];
                if (!(null != i && "object" == typeof i)) {
                  throw new Error(`'${e.slice(0, t + 1).join("->")}' is not a container`);
                }
                s[n] = Array.isArray(i) ? [...i] : {
                  ...i
                };
                s = s[n];
              }
              s[e[e.length - 1]] = t;
              this.onUpdate(n);
            }
          }
        };
        this.subscribeTrigger = `${e}.subscribe`;
        this.unsubscribeTrigger = `${e}.unsubscribe`;
        this.updateTrigger = `${e}.update`;
        this.patchTrigger = `${e}.patch`;
        this._value = t;
      }
      get value() {
        if (null != this.connections) {
          return this.getValueUnsafe();
        }
        {
          this.connect();
          const e = this.getValueUnsafe();
          this.disconnect();
          return e;
        }
      }
      connect() {
        if (null == this.connections && (this.connections = [Rr().on(this.updateTrigger, this.onUpdate), Rr().on(this.patchTrigger, this.onPatch)], Rr().trigger(this.subscribeTrigger), undefined === this._value)) {
          throw new Error(`'${this.updateTrigger}' was not called after subscribe!\nDid you forget to add the binding on the C# side?`);
        }
      }
      disconnect() {
        if (null != this.connections) {
          for (const e of this.connections) e.clear();
          this.connections = null;
          Rr().trigger(this.unsubscribeTrigger);
          this._value = this.fallbackValue;
        }
      }
      getValueUnsafe() {
        if (undefined === this._value) {
          throw new Error(`'${this.updateTrigger}' was not called before getValueUnsafe!`);
        }
        return this._value;
      }
    }
    class dl {
      listeners = [];
      disposed = false;
      constructor(e) {
        this._value = e;
      }
      get registered() {
        return true;
      }
      get value() {
        return this._value;
      }
      subscribe = e => {
        if (this.disposed) {
          throw new Error("cannot subscribe to a disposed binding!");
        }
        const t = new hl(e);
        this.listeners.push(t);
        const n = this;
        return {
          get value() {
            return n._value;
          },
          setChangeListener: t.set,
          dispose() {
            const e = n.listeners.indexOf(t);
            if (-1 !== e) {
              n.listeners.splice(e, 1);
            }
          }
        };
      };
      dispose = () => {
        this.disposed = true;
        this.listeners.splice(0, this.listeners.length);
      };
      update = e => {
        if (e !== this._value) {
          this._value = e;
          for (const t of this.listeners) t.call(e);
        }
      };
    }
    class ml {
      constructor(e, t, n = false) {
        this.keyStringifier = t;
        this.keepAlive = n;
        this.entries = new Map();
        this.updateConnection = null;
        this.disposed = false;
        this.getValue = e => {
          const t = this.getConnection(e);
          if (null != t) {
            return this.getValueUnsafe(t);
          }
          const n = this.connect(e);
          const s = this.getValueUnsafe(n);
          this.disconnect(e);
          return s;
        };
        this.subscribe = (e, t) => {
          if (this.disposed) {
            throw new Error("cannot subscribe to a disposed binding!");
          }
          const n = this.connect(e);
          const s = new hl(t);
          n.listeners.push(s);
          const i = this;
          return {
            get value() {
              return i.getValueUnsafe(n);
            },
            setChangeListener: s.set,
            dispose() {
              const t = n.listeners.indexOf(s);
              if (-1 !== t) {
                n.listeners.splice(t, 1);
                if (!(0 !== n.listeners.length || i.keepAlive)) {
                  i.disconnect(e);
                }
              }
            }
          };
        };
        this.dispose = () => {
          this.disposed = true;
          this.disconnectAll();
        };
        this.onUpdate = (e, t) => {
          const n = this.getConnection(e);
          if (null != n) {
            if (t !== n.value) {
              n.value = t;
              for (const e of n.listeners) e.call(t);
            }
          } else {
            console.warn(`'${this.updateTrigger}' was called on already unsubscribed key!`);
          }
        };
        this.subscribeTrigger = `${e}.subscribeMapEntry`;
        this.unsubscribeTrigger = `${e}.unsubscribeMapEntry`;
        this.updateTrigger = `${e}.updateMapEntry`;
      }
      getConnection(e) {
        const t = this.keyStringifier(e);
        return this.entries.get(t);
      }
      connect(e) {
        const t = this.keyStringifier(e);
        let n = this.entries.get(t);
        if (null != n) {
          return n;
        }
        if (null == this.updateConnection) {
          this.updateConnection = Rr().on(this.updateTrigger, this.onUpdate);
        }
        n = {
          key: e,
          value: undefined,
          listeners: []
        };
        this.entries.set(t, n);
        Rr().trigger(this.subscribeTrigger, e);
        if (undefined === n.value) {
          throw new Error(`'${this.updateTrigger}' was not called after subscribing the key '${t}'!\nDid you forget to add the binding on the C# side?`);
        }
        return n;
      }
      disconnectAll() {
        for (const e of this.entries.values()) Rr().trigger(this.unsubscribeTrigger, e.key, false);
        this.entries.clear();
        if (null != this.updateConnection) {
          this.updateConnection.clear();
          this.updateConnection = null;
        }
      }
      disconnect(e) {
        const t = this.keyStringifier(e);
        if (null != this.entries.get(t)) {
          this.entries.delete(t);
          if (0 === this.entries.size && null != this.updateConnection) {
            this.updateConnection.clear();
            this.updateConnection = null;
          }
          Rr().trigger(this.unsubscribeTrigger, e, this.keepAlive);
        }
      }
      getValueUnsafe(e) {
        if (undefined === e.value) {
          throw new Error(`'${this.updateTrigger}' was not called before getValueUnsafe!`);
        }
        return e.value;
      }
    }
    class hl {
      constructor(e) {
        this.listener = e;
        this.set = e => {
          this.listener = e;
        };
        this.call = e => {
          if (null != this.listener) {
            this.listener(e);
          }
        };
      }
    }
    function gl(e) {
      return Array.isArray(e) ? [...e] : {
        ...e
      };
    }
    function pl(e) {
      return null != e && "object" == typeof e;
    }
    class fl {
      listeners = [];
      updateConnection = null;
      disposed = false;
      constructor(e) {
        this.subscribeTrigger = `${e}.subscribe`;
        this.unsubscribeTrigger = `${e}.unsubscribe`;
        this.updateTrigger = `${e}.update`;
      }
      subscribe = e => {
        if (this.disposed) {
          throw new Error("cannot subscribe to a disposed binding!");
        }
        if (!this.listeners.includes(e)) {
          this.listeners.push(e);
        }
        this.subscribeValue();
        return {
          dispose: () => {
            const t = this.listeners.indexOf(e);
            if (-1 !== t) {
              this.listeners.splice(t, 1);
              if (0 === this.listeners.length) {
                this.unsubscribeValue();
              }
            }
          }
        };
      };
      dispose = () => {
        this.disposed = true;
        this.listeners.splice(0, this.listeners.length);
        this.unsubscribeValue();
      };
      subscribeValue() {
        if (null == this.updateConnection) {
          this.updateConnection = Rr().on(this.updateTrigger, this.onUpdate);
          Rr().trigger(this.subscribeTrigger);
        }
      }
      unsubscribeValue() {
        if (null != this.updateConnection) {
          this.updateConnection.clear();
          this.updateConnection = null;
          Rr().trigger(this.unsubscribeTrigger);
        }
      }
      onUpdate = e => {
        for (const t of this.listeners) t(e);
      };
    }
    X.add("game-ui/common/data-binding/binding.ts", {
      get bindValue() {
        return $r;
      },
      set bindValue(e) {
        $r = e;
      },
      get bindLocalValue() {
        return qr;
      },
      set bindLocalValue(e) {
        qr = e;
      },
      get bindMap() {
        return Xr;
      },
      set bindMap(e) {
        Xr = e;
      },
      get bindMapPersistent() {
        return Qr;
      },
      set bindMapPersistent(e) {
        Qr = e;
      },
      get bindEvent() {
        return Zr;
      },
      set bindEvent(e) {
        Zr = e;
      },
      get bindTrigger() {
        return Jr;
      },
      set bindTrigger(e) {
        Jr = e;
      },
      get bindTriggerWithArgs() {
        return el;
      },
      set bindTriggerWithArgs(e) {
        el = e;
      },
      get trigger() {
        return tl;
      },
      set trigger(e) {
        tl = e;
      },
      get call() {
        return nl;
      },
      set call(e) {
        nl = e;
      },
      get useValue() {
        return sl;
      },
      set useValue(e) {
        sl = e;
      },
      get useReducedValue() {
        return il;
      },
      set useReducedValue(e) {
        il = e;
      },
      get useValueRef() {
        return al;
      },
      set useValueRef(e) {
        al = e;
      },
      get useValueOnChange() {
        return ol;
      },
      set useValueOnChange(e) {
        ol = e;
      },
      get useMapValueOnChange() {
        return rl;
      },
      set useMapValueOnChange(e) {
        rl = e;
      },
      get useMapValue() {
        return ll;
      },
      set useMapValue(e) {
        ll = e;
      },
      get useMapValues() {
        return cl;
      },
      set useMapValues(e) {
        cl = e;
      }
    });
    X.add("game-ui/api/index.ts", {});
    const xl = /{([^{}]+)}/g;
    function vl(e, t) {
      return e.replace(xl, (e, n) => {
        const s = t[n];
        return undefined !== s ? s : e;
      });
    }
    var _l;
    X.add("game-ui/common/utils/substitute.ts", {
      get substitute() {
        return vl;
      },
      set substitute(e) {
        vl = e;
      }
    });
    (function (e) {
      e.ButtonWithConfirmation = "Game.UI.Menu.ButtonWithConfirmation";
      e.InputBindingField = "Game.UI.Menu.InputBindingField";
      e.ScreenResolutionDropdownField = "Game.UI.Menu.ScreenResolutionDropdownField";
      e.DropdownField = "Game.UI.Widgets.DropdownField";
      e.ModdingToolchainDependency = "Game.UI.Menu.ModdingToolchainDependency";
      e.DirectoryPickerField = "Game.UI.Widgets.DirectoryPickerField";
    })(_l || (_l = {}));
    var Tl;
    var El;
    var Il;
    var yl;
    var Sl = $r("options", "pages");
    var jl = $r("options", "children");
    var Cl = $r("options", "activePage");
    var Nl = $r("options", "activeSection");
    var wl = $r("options", "displayConfirmationVisible");
    var Ol = $r("options", "displayConfirmationTime");
    var Pl = $r("options", "interfaceStyle");
    var Ll = $r("options", "interfaceTransparency");
    var Al = $r("options", "interfaceScaling", true);
    var Ml = $r("options", "textScale");
    var Rl = $r("options", "unlockHighlightsEnabled");
    var kl = $r("options", "chirperPopupsEnabled");
    var Dl = $r("options", "inputHintsType");
    var Fl = $r("options", "keyboardLayout");
    var Ul = $r("options", "shortcutHints");
    var Bl = $r("options", "layoutMap");
    $r("options", "radioVolume");
    var Gl = $r("options", "unitSettings");
    function Vl({
      group: e,
      path: t
    }) {
      tl(e, "rebindInput", t);
    }
    function Hl({
      group: e,
      path: t
    }) {
      tl(e, "unsetInputBinding", t);
    }
    function Kl({
      group: e,
      path: t
    }) {
      tl(e, "resetInputBinding", t);
    }
    function Wl(e, t, n = false) {
      tl("options", "selectPage", e, t, n);
    }
    function zl(e, t) {
      tl("options", "filteredWidgets", e, t || null);
    }
    !function (e) {
      e[e.AutoDetect = 0] = "AutoDetect";
      e[e.International = 1] = "International";
    }(Tl || (Tl = {}));
    (function (e) {
      e[e.Idle = 0] = "Idle";
      e[e.Downloading = 1] = "Downloading";
      e[e.Installing = 2] = "Installing";
      e[e.WaitingForLicense = 3] = "WaitingForLicense";
      e[e.WaitingForClose = 4] = "WaitingForClose";
      e[e.Updating = 5] = "Updating";
      e[e.Uninstalling = 6] = "Uninstalling";
      e[e.NotEnoughSpaceError = 7] = "NotEnoughSpaceError";
      e[e.DownloadError = 8] = "DownloadError";
      e[e.InstallError = 9] = "InstallError";
      e[e.GetLicenseError = 10] = "GetLicenseError";
      e[e.CloseError = 11] = "CloseError";
      e[e.DeployError = 12] = "DeployError";
      e[e.UnistallError = 13] = "UnistallError";
    })(El || (El = {}));
    (function (e) {
      e[e.Install = 0] = "Install";
      e[e.Uninstall = 1] = "Uninstall";
      e[e.Update = 2] = "Update";
      e[e.Repair = 3] = "Repair";
      e[e.Cancel = 4] = "Cancel";
    })(Il || (Il = {}));
    (function (e) {
      e[e.Unknown = -1] = "Unknown";
      e[e.Installed = 0] = "Installed";
      e[e.NotInstalled = 1] = "NotInstalled";
      e[e.Outdated = 2] = "Outdated";
      e[e.Installing = 3] = "Installing";
      e[e.Downloading = 4] = "Downloading";
      e[e.Removing = 5] = "Removing";
      e[e.Queued = 6] = "Queued";
    })(yl || (yl = {}));
    var Yl;
    var $l;
    var ql;
    var Xl;
    var Ql = Jr("options", "confirmDisplay");
    var Zl = Jr("options", "revertDisplay");
    var Jl = $r("options", "directoryBrowser", []);
    var ec = $r("options", "directoryBrowserActive", false);
    var tc = Jr("options", "cancelDirectoryBrowser");
    var nc = el("options", "onOptionsPageClosed");
    !function (e) {
      e[e.TwentyFourHours = 0] = "TwentyFourHours";
      e[e.TwelveHours = 1] = "TwelveHours";
    }(Yl || (Yl = {}));
    (function (e) {
      e[e.Celsius = 0] = "Celsius";
      e[e.Fahrenheit = 1] = "Fahrenheit";
      e[e.Kelvin = 2] = "Kelvin";
    })($l || ($l = {}));
    (function (e) {
      e[e.Metric = 0] = "Metric";
      e[e.Freedom = 1] = "Freedom";
    })(ql || (ql = {}));
    (function (e) {
      e[e.None = 0] = "None";
      e[e.WithBuiltIn = 1] = "WithBuiltIn";
      e[e.WithNotBuiltIn = 2] = "WithNotBuiltIn";
    })(Xl || (Xl = {}));
    var sc = {
      timeFormat: Yl.TwentyFourHours,
      temperatureUnit: $l.Celsius,
      unitSystem: ql.Metric
    };
    X.add("game-ui/menu/data-binding/options-bindings.ts", {
      get OptionsWidgetType() {
        return _l;
      },
      set OptionsWidgetType(e) {
        _l = e;
      },
      get pages() {
        return pages;
      },
      set pages(e) {
        pages = e;
      },
      get optionsWidgets() {
        return optionsWidgets;
      },
      set optionsWidgets(e) {
        optionsWidgets = e;
      },
      get selectedPage() {
        return selectedPage;
      },
      set selectedPage(e) {
        selectedPage = e;
      },
      get selectedSection() {
        return selectedSection;
      },
      set selectedSection(e) {
        selectedSection = e;
      },
      get displayConfirmationVisible() {
        return displayConfirmationVisible;
      },
      set displayConfirmationVisible(e) {
        displayConfirmationVisible = e;
      },
      get displayConfirmationTime() {
        return displayConfirmationTime;
      },
      set displayConfirmationTime(e) {
        displayConfirmationTime = e;
      },
      get interfaceStyle() {
        return interfaceStyle;
      },
      set interfaceStyle(e) {
        interfaceStyle = e;
      },
      get interfaceTransparency() {
        return interfaceTransparency;
      },
      set interfaceTransparency(e) {
        interfaceTransparency = e;
      },
      get interfaceScaling() {
        return interfaceScaling;
      },
      set interfaceScaling(e) {
        interfaceScaling = e;
      },
      get textScale() {
        return textScale;
      },
      set textScale(e) {
        textScale = e;
      },
      get unlockHighlightsEnabled() {
        return unlockHighlightsEnabled;
      },
      set unlockHighlightsEnabled(e) {
        unlockHighlightsEnabled = e;
      },
      get chirperPopupsEnabled() {
        return chirperPopupsEnabled;
      },
      set chirperPopupsEnabled(e) {
        chirperPopupsEnabled = e;
      },
      get inputHintsType() {
        return inputHintsType;
      },
      set inputHintsType(e) {
        inputHintsType = e;
      },
      get keyboardLayout() {
        return keyboardLayout;
      },
      set keyboardLayout(e) {
        keyboardLayout = e;
      },
      get shortcutHints() {
        return shortcutHints;
      },
      set shortcutHints(e) {
        shortcutHints = e;
      },
      get layoutMap() {
        return layoutMap;
      },
      set layoutMap(e) {
        layoutMap = e;
      },
      get radioVolume() {
        return radioVolume;
      },
      set radioVolume(e) {
        radioVolume = e;
      },
      get unitSettings() {
        return unitSettings;
      },
      set unitSettings(e) {
        unitSettings = e;
      },
      get rebindInput() {
        return Vl;
      },
      set rebindInput(e) {
        Vl = e;
      },
      get unsetInputBinding() {
        return Hl;
      },
      set unsetInputBinding(e) {
        Hl = e;
      },
      get resetInputBinding() {
        return Kl;
      },
      set resetInputBinding(e) {
        Kl = e;
      },
      get selectPage() {
        return Wl;
      },
      set selectPage(e) {
        Wl = e;
      },
      get filteredWidgets() {
        return zl;
      },
      set filteredWidgets(e) {
        zl = e;
      },
      get KeyboardLayout() {
        return Tl;
      },
      set KeyboardLayout(e) {
        Tl = e;
      },
      get ModdingToolchainStatus() {
        return El;
      },
      set ModdingToolchainStatus(e) {
        El = e;
      },
      get ModdingToolchainButtonState() {
        return Il;
      },
      set ModdingToolchainButtonState(e) {
        Il = e;
      },
      get ModdingToolchainDependencyState() {
        return yl;
      },
      set ModdingToolchainDependencyState(e) {
        yl = e;
      },
      get confirmDisplay() {
        return Ql;
      },
      set confirmDisplay(e) {
        Ql = e;
      },
      get revertDisplay() {
        return Zl;
      },
      set revertDisplay(e) {
        Zl = e;
      },
      get directoryBrowser() {
        return directoryBrowser;
      },
      set directoryBrowser(e) {
        directoryBrowser = e;
      },
      get directoryBrowserActive() {
        return directoryBrowserActive;
      },
      set directoryBrowserActive(e) {
        directoryBrowserActive = e;
      },
      get cancelDirectoryBrowser() {
        return tc;
      },
      set cancelDirectoryBrowser(e) {
        tc = e;
      },
      get onOptionsPageClosed() {
        return nc;
      },
      set onOptionsPageClosed(e) {
        nc = e;
      },
      get TimeFormat() {
        return Yl;
      },
      set TimeFormat(e) {
        Yl = e;
      },
      get TemperatureUnit() {
        return $l;
      },
      set TemperatureUnit(e) {
        $l = e;
      },
      get UnitSystem() {
        return ql;
      },
      set UnitSystem(e) {
        ql = e;
      },
      get BindingConflict() {
        return Xl;
      },
      set BindingConflict(e) {
        Xl = e;
      },
      get defaultUnitSettings() {
        return sc;
      },
      set defaultUnitSettings(e) {
        sc = e;
      }
    });
    0;
    var ic = Y.createContext({
      translate: () => null,
      unitSettings: sc
    });
    function ac() {
      0;
      const e = Y.useContext(ic);
      0;
      const t = Y.useRef(true);
      t.current = true;
      0;
      return Y.useMemo(() => {
        const n = new Map();
        return {
          translate: (s, i) => {
            let a = n.get(s);
            if (undefined === a) {
              if (t.current) {
                t.current = false;
                n.clear();
              }
              a = e.translate(s, i);
              n.set(s, a);
            }
            return a;
          },
          unitSettings: e.unitSettings
        };
      }, [e]);
    }
    function oc(e) {
      const t = ac();
      const n = Yr(e, lc);
      0;
      return Y.useMemo(() => rc(t, n), [t, n]);
    }
    function rc(e, t, n) {
      return null == t ? "" : (0, Y.isValidElement)(t) ? "function" == typeof t.type.renderString && "function" == typeof t.type.propsAreEqual ? t.type.renderString(e, t.props) : function (e) {
        return e.type === Y.Fragment;
      }(t) ? Y.Children.toArray(t.props.children).map(t => rc(e, t, n)).join(n) : `[${(s = t.type, s.displayName ?? s.name ?? String(s))}/]` : String(t);
      var s;
    }
    function lc(e, t) {
      0;
      return Y.isValidElement(e) && (0, Y.isValidElement)(t) && "function" == typeof e.type.renderString && "function" == typeof e.type.propsAreEqual && "function" == typeof t.type.renderString && "function" == typeof t.type.propsAreEqual ? e.type.propsAreEqual(e.props, t.props) : Object.is(e, t);
    }
    function cc(e) {
      return "function" == typeof e.renderString && "function" == typeof e.propsAreEqual;
    }
    function uc(e, t, n) {
      const s = e => {
        const n = ac();
        0;
        const s = Y.useMemo(() => t(n, e), [n, e]);
        0;
        return z.jsx(z.Fragment, {
          children: s
        });
      };
      0;
      return Object.assign(Y.memo(s, n), {
        displayName: e,
        renderString: t,
        propsAreEqual: n
      });
    }
    X.add("game-ui/common/localization/localization.tsx", {
      get LocalizationContext() {
        return ic;
      },
      set LocalizationContext(e) {
        ic = e;
      },
      get useCachedLocalization() {
        return ac;
      },
      set useCachedLocalization(e) {
        ac = e;
      }
    });
    X.add("game-ui/common/localization/loc-component.tsx", {
      get useTranslation() {
        return oc;
      },
      set useTranslation(e) {
        oc = e;
      },
      get renderLocElement() {
        return rc;
      },
      set renderLocElement(e) {
        rc = e;
      },
      get areLocElementsEqual() {
        return lc;
      },
      set areLocElementsEqual(e) {
        lc = e;
      },
      get createLocComponent() {
        return uc;
      },
      set createLocComponent(e) {
        uc = e;
      }
    });
    var mc;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Id = 1] = "Id";
      e[e.Fallback = 2] = "Fallback";
    }(mc || (mc = {}));
    var hc;
    var gc = $r("l10n", "locales");
    var pc = $r("l10n", "debugMode", mc.None);
    var fc = Zr("l10n", "activeDictionaryChanged");
    var xc = Xr("l10n", "indexCounts");
    function vc(e) {
      tl("l10n", "selectLocale", e);
    }
    function _c(e) {
      return {
        __Type: hc.String,
        id: e,
        value: null,
        args: null
      };
    }
    function bc(e) {
      return {
        __Type: hc.String,
        id: null,
        value: e,
        args: null
      };
    }
    !function (e) {
      e.Bounds = "Game.UI.Localization.LocalizedBounds";
      e.Fraction = "Game.UI.Localization.LocalizedFraction";
      e.Number = "Game.UI.Localization.LocalizedNumber";
      e.String = "Game.UI.Localization.LocalizedString";
    }(hc || (hc = {}));
    X.add("game-ui/common/localization/localization-bindings.ts", {
      get LocalizationDebugMode() {
        return mc;
      },
      set LocalizationDebugMode(e) {
        mc = e;
      },
      get locales() {
        return locales;
      },
      set locales(e) {
        locales = e;
      },
      get debugMode() {
        return debugMode;
      },
      set debugMode(e) {
        debugMode = e;
      },
      get activeDictionaryChanged() {
        return activeDictionaryChanged;
      },
      set activeDictionaryChanged(e) {
        activeDictionaryChanged = e;
      },
      get indexCounts() {
        return indexCounts;
      },
      set indexCounts(e) {
        indexCounts = e;
      },
      get selectLocale() {
        return vc;
      },
      set selectLocale(e) {
        vc = e;
      },
      get LocElementType() {
        return hc;
      },
      set LocElementType(e) {
        hc = e;
      },
      get locStrId() {
        return _c;
      },
      set locStrId(e) {
        _c = e;
      },
      get locStrValue() {
        return bc;
      },
      set locStrValue(e) {
        bc = e;
      }
    });
    var Tc = uc("LocalizedString", (e, {
      id: t,
      fallback: n,
      showIdOnFail: s,
      args: i
    }) => Ec(e, t, n, i, s), (e, t) => e.id === t.id && e.fallback === t.fallback && function (e, t) {
      if (Object.is(e, t)) {
        return true;
      }
      if (null == e || null == t) {
        return e === t;
      }
      const n = Object.keys(e);
      const s = Object.keys(t);
      if (n.length !== s.length) {
        return false;
      }
      return n.every(n => Object.prototype.hasOwnProperty.call(t, n) && lc(e[n], t[n]));
    }(e.args, t.args));
    function Ec(e, t, n, s, i) {
      const a = (null != t ? e.translate(t, n) : n) || (i && t ? t : "");
      if (null != s) {
        const t = function (e, t) {
          return Object.fromEntries(Object.entries(t).map(([t, n]) => [t, rc(e, n)]));
        }(e, s);
        return vl(a, t);
      }
      return a;
    }
    function Ic(e, t, n) {
      return !!Object.is(t, n) || e.every(e => lc(t[e], n[e]));
    }
    function yc(e) {
      const t = Object.entries(e).map(([e, t]) => [e, Sc(e, t)]);
      return Object.fromEntries(t);
    }
    function Sc(e, t) {
      const n = Object.entries(t).map(([t, n]) => {
        return [t, uc(`${e}.${t}`, n.create(`${e}.${t}`), n.propsAreEqual.bind(n))];
      });
      return Object.fromEntries(n);
    }
    X.add("game-ui/common/localization/localized-string.tsx", {
      get LocalizedString() {
        return Tc;
      },
      set LocalizedString(e) {
        Tc = e;
      },
      get renderLocalizedString() {
        return Ec;
      },
      set renderLocalizedString(e) {
        Ec = e;
      },
      get areArgsEqual() {
        return Ic;
      },
      set areArgsEqual(e) {
        Ic = e;
      }
    });
    class jc {
      constructor(...e) {
        this.argNames = e;
      }
      create(e) {
        return (t, {
          fallback: n,
          showIdOnFail: s,
          ...i
        }) => Ec(t, e, n, i, s);
      }
      propsAreEqual(e, t) {
        return undefined !== e && undefined !== t ? Ic(this.argNames, e, t) : e === t;
      }
    }
    class Cc {
      constructor(...e) {
        this.argNames = e;
      }
      create(e) {
        return (t, {
          hash: n,
          fallback: s,
          showIdOnFail: i,
          ...a
        }) => Ec(t, `${e}[${n}]`, s, a, i);
      }
      propsAreEqual(e, t) {
        return e.hash === t.hash && Ic(this.argNames, e, t);
      }
    }
    class Nc {
      constructor(...e) {
        this.argNames = e;
      }
      create(e) {
        return (t, {
          index: n,
          fallback: s,
          showIdOnFail: i,
          ...a
        }) => Ec(t, `${e}:${n}`, s, a, i);
      }
      propsAreEqual(e, t) {
        return e.index === t.index && Ic(this.argNames, e, t);
      }
    }
    class wc {
      constructor(...e) {
        this.argNames = e;
      }
      create(e) {
        return (t, {
          hash: n,
          index: s,
          fallback: i,
          showIdOnFail: a,
          ...o
        }) => Ec(t, `${e}[${n}]:${s}`, i, o, a);
      }
      propsAreEqual(e, t) {
        return e.hash === t.hash && e.index === t.index && Ic(this.argNames, e, t);
      }
    }
    X.add("game-ui/common/localization/loc-dictionary.tsx", {
      get createLocDictionary() {
        return yc;
      },
      set createLocDictionary(e) {
        yc = e;
      }
    });
    var Oc;
    var Pc = yc({
      Achievements: {
        DESCRIPTION: new Cc(),
        TITLE: new Cc()
      },
      AirPollutionInfoPanel: {
        AVERAGE_AIR_POLLUTION: new jc()
      },
      AnimationCurve: {
        TIME_LABEL: new jc(),
        VALUE_LABEL: new jc()
      },
      Assets: {
        ADDRESS_NAME_FORMAT: new jc("NUMBER", "ROAD"),
        ALLEY_NAME: new Nc(),
        ANIMAL_NAME_DOG: new Nc(),
        BIOME: new Cc(),
        BRIDGE_NAME: new Nc(),
        CITIZEN_NAME_FEMALE: new Nc(),
        CITIZEN_NAME_FORMAT: new jc("FIRST_NAME", "LAST_NAME"),
        CITIZEN_NAME_MALE: new Nc(),
        CITIZEN_SURNAME_FEMALE: new Nc(),
        CITIZEN_SURNAME_HOUSEHOLD: new Nc(),
        CITIZEN_SURNAME_MALE: new Nc(),
        CITY_NAME: new Nc(),
        CLIMATE: new Cc(),
        DAM_NAME: new Nc(),
        DESCRIPTION: new Cc(),
        DISTRICT_NAME: new Nc(),
        DISTRICT_NAME_NEW: new jc(),
        HIGHWAY_NAME: new Nc(),
        MISSING_PREFAB_DESCRIPTION: new jc(),
        NAME: new Cc(),
        NAMED_ADDRESS_NAME_FORMAT: new jc("NAME", "NUMBER", "ROAD"),
        ROUTE_NAME: new Cc("NUMBER"),
        STREET_NAME: new Nc(),
        SUB_SERVICE_DESCRIPTION: new Cc(),
        THEME: new Cc(),
        UPGRADE_DESCRIPTION: new Cc(),
        UPGRADE_NAME: new Cc()
      },
      Budget: {
        TOOLTIP_DESCRIPTION: new Cc(),
        TOOLTIP_DESCRIPTION_TAX: new Cc(),
        TOOLTIP_DESCRIPTION_TAX_RATE: new jc(),
        TOOLTIP_TITLE: new Cc(),
        TOOLTIP_TITLE_TAX: new Cc(),
        TOOLTIP_TITLE_TAX_RATE: new jc(),
        TOOLTIP_UPKEEPS_PIECHART: new jc()
      },
      Chirper: {
        AIR_POLLUTION_HIGH: new Nc(),
        AIR_POLLUTION_NEGATIVE: new Nc(),
        AURORA_BOREALIS: new Nc(),
        BIRTH_RATE_DOWN: new Nc(),
        BIRTH_RATE_UP: new Nc(),
        BRAND: new wc(),
        BRAND_RENTED_AGRICULTURE: new Nc("LINK_1"),
        BRAND_RENTED_BANK: new Nc("LINK_1"),
        BRAND_RENTED_BAR: new Nc("LINK_1"),
        BRAND_RENTED_FACTORY: new Nc("LINK_1"),
        BRAND_RENTED_FORESTRY: new Nc("LINK_1"),
        BRAND_RENTED_GAS_STATION: new Nc("LINK_1"),
        BRAND_RENTED_HOTEL: new Nc("LINK_1"),
        BRAND_RENTED_MINE: new Nc("LINK_1"),
        BRAND_RENTED_OFFICE: new Nc("LINK_1"),
        BRAND_RENTED_OIL: new Nc("LINK_1"),
        BRAND_RENTED_RESTAURANT: new Nc("LINK_1"),
        BRAND_RENTED_STORE: new Nc("LINK_1"),
        BRAND_RENTED_WAREHOUSE: new Nc("LINK_1"),
        CITY_SERVICE_EDUCATION_EXPORT: new Nc(),
        CITY_SERVICE_EDUCATION_IMPORT: new Nc(),
        CITY_SERVICE_ELECTRICITY_EXPORT: new Nc(),
        CITY_SERVICE_ELECTRICITY_IMPORT: new Nc(),
        CITY_SERVICE_FIRE_RESCUE_EXPORT: new Nc(),
        CITY_SERVICE_FIRE_RESCUE_IMPORT: new Nc(),
        CITY_SERVICE_GARBAGE_IMPORT: new Nc(),
        CITY_SERVICE_HEALTHCARE_EXPORT: new Nc(),
        CITY_SERVICE_HEALTHCARE_IMPORT: new Nc(),
        CITY_SERVICE_POLICE_EXPORT: new Nc(),
        CITY_SERVICE_POLICE_IMPORT: new Nc(),
        CITY_SERVICE_POST_EXPORT: new Nc(),
        CITY_SERVICE_POST_IMPORT: new Nc(),
        CITY_SERVICE_WATER_SEWAGE_EXPORT: new Nc(),
        CITY_SERVICE_WATER_SEWAGE_IMPORT: new Nc(),
        COMMERCIAL_LEVEL_DOWN: new Nc(),
        COMMERCIAL_LEVEL_UP: new Nc(),
        CRIME_NEGATIVE: new Nc(),
        CRIME_RATE_HIGH: new Nc(),
        DIRTY_WATER: new Nc(),
        ELECTRICITY_BLACKOUTS: new Nc(),
        FIRST_POWER_PLANT: new Nc("LINK_TARGET_0"),
        GARBAGE_PILING_UP: new Nc(),
        GOOD_EDUCATION_SERVICE: new Nc(),
        GOOD_WELFARE_SERVICE_COVERAGE: new Nc(),
        GROUND_POLLUTION_NEGATIVE: new Nc(),
        HIGHEST_TEMP_15: new Nc(),
        HIGHEST_TEMP_NEG_15: new Nc(),
        HIGH_DEATH_RATE: new Nc(),
        HOUSING_SHORTAGE: new Nc(),
        INDUSTRIAL_LEVEL_DOWN: new Nc(),
        INDUSTRIAL_LEVEL_UP: new Nc(),
        LEISURE_TIME_NEGATIVE: new Nc(),
        LEISURE_TIME_POSITIVE: new Nc(),
        LOWEST_TEMP_15: new Nc(),
        LOWEST_TEMP_20: new Nc(),
        LOW_DEATH_RATE: new Nc(),
        LOW_HEALTH: new Nc(),
        LOW_NUMBER_OF_WORKERS: new Nc(),
        LOW_WELLBEING: new Nc(),
        MOSTLY_CLOUDY_WEATHER: new Nc(),
        MOSTLY_RAINY_WEATHER: new Nc(),
        MOSTLY_SNOWY_WEATHER: new Nc(),
        MOSTLY_STORMY_WEATHER: new Nc(),
        MOSTLY_SUNNY_WEATHER: new Nc(),
        NOISE_POLLUTION: new Nc(),
        NOISE_POLLUTION_NEGATIVE: new Nc(),
        NO_ELECTRICITY: new Nc(),
        NO_WATER: new Nc(),
        NO_WATER_SERVICE: new Nc(),
        OFFICE_LEVEL_DOWN: new Nc(),
        OFFICE_LEVEL_UP: new Nc(),
        OPENING_MESSAGE: new jc(),
        PANEL_TITLE: new jc(),
        PARK_COVERAGE: new Nc(),
        POLICE_CRIME_RATE_HIGH: new Nc(),
        POLICIES: new wc(),
        POLICIES_SERVICE: new wc(),
        POOR_EDUCATION_SERVICE: new Nc(),
        RELIABLE_ELECTRICITY_SUPPLY: new Nc(),
        RELIABLE_HEALTHCARE: new Nc(),
        RELIABLE_INTERNET_SERVICE: new Nc(),
        RELIABLE_POST_SERVICE: new Nc(),
        RESIDENTIAL_LEVEL_DOWN: new Nc(),
        RESIDENTIAL_LEVEL_UP: new Nc(),
        SERVICES_CITIZEN: new wc(),
        SERVICES_COMMUNICATIONS: new wc(),
        SERVICES_ELECTRICITY: new wc(),
        SERVICES_GARBAGE: new wc(),
        SERVICES_ROADS: new wc(),
        SERVICES_TRANSPORTATION: new wc(),
        SERVICES_WATER: new wc(),
        SEWAGE_NEGATIVE: new Nc(),
        SMALL_HOME: new Nc(),
        STORAGES_FILLING_UP: new Nc(),
        TEMPERATURE_COLDER: new Nc(),
        TOURISM_DOWN_20: new Nc(),
        TOURISM_UP_20: new Nc(),
        TRAFFIC_ACCIDENT_NEARBY: new Nc(),
        TRAFFIC_JAMS: new Nc(),
        UNCONNECTED_CITY: new Nc(),
        UNEMPLOYMENT_RATE_HIGH: new Nc(),
        UNPAID_LOAN: new Nc(),
        UNRELIABLE_ELECTRICITY_SUPPLY: new Nc(),
        UNRELIABLE_HEALTHCARE: new Nc(),
        UNRELIABLE_INTERNET_SERVICE: new Nc(),
        UNRELIABLE_POST_SERVICE: new Nc(),
        VALENTINE_DAY: new Nc(),
        WATER_NEGATIVE_SERVICE_COVERAGE: new Nc(),
        WATER_POLLUTION_NEGATIVE: new Nc()
      },
      CinematicCamera: {
        CAPTURE: new jc(),
        DELETE_DISCLAIMER: new jc("NAME"),
        DELETE_KEY: new jc(),
        DELETE_TOOLTIP: new jc(),
        FOCAL_LENGTH: new jc(),
        HIDE_UI: new jc(),
        KEY_FORMAT: new jc("KEY"),
        LOAD: new jc(),
        LOAD_TOOLTIP: new jc(),
        LOOP: new jc(),
        NEW_SEQUENCE_PLACEHOLDER: new jc(),
        OVERRIDE_DISCLAIMER: new jc("NAME"),
        PLAYBACK_DURATION: new jc(),
        RESET_TOOLTIP: new jc(),
        SAVE: new jc(),
        SAVE_LOAD_TOOLTIP: new jc(),
        SAVE_TOOLTIP: new jc(),
        SEGMENT_DURATION: new jc(),
        SIMULATION_SPEED: new jc(),
        TITLE: new jc(),
        UNSAVED_DISCLAIMER: new jc()
      },
      CityInfoPanel: {
        DEMAND_DESCRIPTION: new Cc(),
        DEMAND_FACTOR: new Cc(),
        DEMAND_FACTOR_NEGATIVE: new Cc(),
        DEMAND_FACTOR_POSITIVE: new Cc(),
        DEMAND_TITLE: new Cc(),
        HAPPINESS: new jc(),
        TAB: new Cc(),
        TITLE: new jc(),
        TOOLTIP_DESCRIPTION_DEMAND: new Cc(),
        TOOLTIP_HAPPINESS_DESCRIPTION: new jc(),
        TOOLTIP_HAPPINESS_TITLE: new jc(),
        TOOLTIP_POLICIES_DESCRIPTION: new jc(),
        TOOLTIP_POLICIES_TITLE: new jc(),
        TOOLTIP_TITLE_DEMAND: new Cc()
      },
      Climate: {
        SEASON: new Cc()
      },
      Common: {
        ACTION: new Cc(),
        BOUNDS_CELSIUS: new jc("MIN", "MAX"),
        BOUNDS_FAHRENHEIT: new jc("MIN", "MAX"),
        BOUNDS_KELVIN: new jc("MIN", "MAX"),
        BOUNDS_KILOWATT: new jc("MIN", "MAX"),
        BOUNDS_MEGAWATT: new jc("MIN", "MAX"),
        BOUNDS_PERCENT: new jc("MIN", "MAX"),
        BOUNDS_TEMPERATURE: new jc("MIN", "MAX"),
        CANCEL: new jc(),
        CLEAR_SEARCH_TOOLTIP: new jc(),
        CLOSE: new jc(),
        CONFIRMATION: new jc(),
        CONTINUE: new jc(),
        DATE_TIME_FORMAT: new jc("MONTH", "YEAR", "HOUR", "MINUTE"),
        DECIMAL_SEPARATOR: new jc(),
        DELETE_TOOLTIP: new jc(),
        DIALOG_ACTION: new Cc(),
        DIALOG_ACTION_INPUT: new Cc(),
        DIALOG_MESSAGE: new Cc(),
        DIALOG_MESSAGE_INPUT: new jc(),
        DIALOG_MESSAGE_MODDING: new Cc("MODNAME"),
        DIALOG_TITLE: new Cc(),
        DIALOG_TITLE_INPUT: new jc(),
        DIALOG_TITLE_MODDING: new Cc(),
        DISABLE: new jc(),
        DLC_TITLE: new Cc(),
        DONT_SHOW_AGAIN: new jc(),
        ENABLE: new jc(),
        ERROR: new jc(),
        ERROR_DIALOG_CONTINUE: new jc(),
        ERROR_DIALOG_COPY_DETAILS: new jc(),
        ERROR_DIALOG_QUIT_GAME: new jc(),
        ERROR_DIALOG_SAVE_CONTINUE: new jc(),
        ERROR_DIALOG_SAVE_QUIT_GAME: new jc(),
        ERROR_DIALOG_TITLE: new jc(),
        EXIT_DIALOG_TEXT: new jc(),
        EXIT_DIALOG_TITLE: new jc(),
        EXIT_TO_DESKTOP: new jc(),
        EXIT_TO_MENU: new jc(),
        FOCUS: new jc(),
        FRACTION_BODIES_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_CUBIC_METER: new jc("VALUE", "TOTAL"),
        FRACTION_CUBIC_METER_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_GALLON: new jc("VALUE", "TOTAL"),
        FRACTION_GALLON_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_INTEGER: new jc("VALUE", "TOTAL"),
        FRACTION_INTEGER_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_KG: new jc("VALUE", "TOTAL"),
        FRACTION_KG_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_KILOWATT: new jc("VALUE", "TOTAL"),
        FRACTION_KILOWATT_HOURS: new jc("VALUE", "TOTAL"),
        FRACTION_MEGAWATT: new jc("VALUE", "TOTAL"),
        FRACTION_MEGAWATT_HOURS: new jc("VALUE", "TOTAL"),
        FRACTION_POUND: new jc("VALUE", "TOTAL"),
        FRACTION_POUND_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_SHORT_TON: new jc("VALUE", "TOTAL"),
        FRACTION_SHORT_TON_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_TON: new jc("VALUE", "TOTAL"),
        FRACTION_TON_PER_MONTH: new jc("VALUE", "TOTAL"),
        FRACTION_XP: new jc("VALUE", "TOTAL"),
        GO_BACK_TOOLTIP: new jc(),
        HAPPINESS_FACTORS: new jc(),
        HAPPINESS_FACTOR_NEGATIVE: new Cc(),
        HAPPINESS_FACTOR_POSITIVE: new Cc(),
        INFORMATION: new jc(),
        INFOVIEW_MENU_TOGGLE_TOOLTIP: new jc(),
        LANGUAGE_NAME: new jc(),
        LOCKED: new jc(),
        MEDIUM_DATE_FORMAT: new jc("MONTH", "YEAR"),
        MONTH: new Nc(),
        MONTH_SHORT: new Nc(),
        NO: new jc(),
        NONE: new jc(),
        OK: new jc(),
        PAUSE_MENU_TOGGLE_TOOLTIP: new jc(),
        SAVEABILITY_REASON: new Cc(),
        SELECT: new jc(),
        SUBMIT: new jc(),
        THOUSANDS_SEPARATOR: new jc(),
        TIMESTAMP_FORMAT: new jc(),
        TIMESTAMP_FORMAT_12: new jc(),
        TIME_FORMAT: new jc("HOUR", "MINUTE"),
        TIME_FORMAT_12: new jc("HOUR", "MINUTE", "PERIOD"),
        TIME_PERIOD_AM: new jc(),
        TIME_PERIOD_PM: new jc(),
        UNLOCKED: new jc(),
        VALUE_ACRE: new jc("SIGN", "VALUE"),
        VALUE_ANGLE: new jc("SIGN", "VALUE"),
        VALUE_BYTE: new jc("SIGN", "VALUE"),
        VALUE_CELSIUS: new jc("SIGN", "VALUE"),
        VALUE_CUBIC_METER: new jc("SIGN", "VALUE"),
        VALUE_CUBIC_METER_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_FAHRENHEIT: new jc("SIGN", "VALUE"),
        VALUE_FOOT: new jc("SIGN", "VALUE"),
        VALUE_GALLON: new jc("SIGN", "VALUE"),
        VALUE_GALLON_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_GIGABIT_PER_SECOND: new jc("SIGN", "VALUE"),
        VALUE_GIGABYTE: new jc("SIGN", "VALUE"),
        VALUE_KELVIN: new jc("SIGN", "VALUE"),
        VALUE_KG_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_KILOBYTE: new jc("SIGN", "VALUE"),
        VALUE_KILOGRAM: new jc("SIGN", "VALUE"),
        VALUE_KILOMETER: new jc("SIGN", "VALUE"),
        VALUE_KILOTON: new jc("SIGN", "VALUE"),
        VALUE_KILOWATT: new jc("SIGN", "VALUE"),
        VALUE_MEGABYTE: new jc("SIGN", "VALUE"),
        VALUE_MEGAWATT: new jc("SIGN", "VALUE"),
        VALUE_MEGAWATT_HOURS: new jc("SIGN", "VALUE"),
        VALUE_METER: new jc("SIGN", "VALUE"),
        VALUE_MILE: new jc("SIGN", "VALUE"),
        VALUE_MILLION: new jc("SIGN", "VALUE"),
        VALUE_MONEY: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_CELL: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_HOUR: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_KILOMETER: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_KILOMETER_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_MILE: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_MILE_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_MONEY_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_MONTH: new jc("VALUE"),
        VALUE_MONTHS: new jc("VALUE"),
        VALUE_PERCENT: new jc("SIGN", "VALUE"),
        VALUE_PER_HOUR: new jc("SIGN", "VALUE"),
        VALUE_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_PER_SQUARE_METER: new jc("SIGN", "VALUE"),
        VALUE_POUND: new jc("SIGN", "VALUE"),
        VALUE_POUND_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_SHORT_KILOTON: new jc("SIGN", "VALUE"),
        VALUE_SHORT_TON: new jc("SIGN", "VALUE"),
        VALUE_SHORT_TON_PER_CELL: new jc("SIGN", "VALUE"),
        VALUE_SHORT_TON_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_SQUARE_FOOT: new jc("SIGN", "VALUE"),
        VALUE_SQUARE_KILOMETER: new jc("SIGN", "VALUE"),
        VALUE_SQUARE_METER: new jc("SIGN", "VALUE"),
        VALUE_TEMPERATURE: new jc("SIGN", "VALUE"),
        VALUE_TERABYTE: new jc("SIGN", "VALUE"),
        VALUE_THOUSAND: new jc("SIGN", "VALUE"),
        VALUE_TON: new jc("SIGN", "VALUE"),
        VALUE_TON_PER_CELL: new jc("SIGN", "VALUE"),
        VALUE_TON_PER_MONTH: new jc("SIGN", "VALUE"),
        VALUE_XP: new jc("SIGN", "VALUE"),
        VALUE_YARD: new jc("SIGN", "VALUE"),
        VALUE_YEAR: new jc("VALUE"),
        VALUE_YEARS: new jc("VALUE"),
        WARNING: new jc(),
        YES: new jc()
      },
      CompanyInfoPanel: {
        COMMERCIAL_PROFITABILITY: new jc(),
        INDUSTRIAL_PROFITABILITY: new jc(),
        OFFICE_PROFITABILITY: new jc()
      },
      DisasterInfoPanel: {
        CAPACITY: new jc(),
        EVACUATED: new jc(),
        SHELTER_AVAILABILITY: new jc()
      },
      EconomyPanel: {
        BUDGET_BALANCE_LABEL: new Cc(),
        BUDGET_ITEM: new Cc(),
        BUDGET_ITEM_DESCRIPTION: new Cc(),
        BUDGET_LOANS_BUTTON_ACCEPT: new jc(),
        BUDGET_LOANS_LABEL_AMOUNT: new jc(),
        BUDGET_LOANS_LABEL_CURRENT_INTEREST: new jc(),
        BUDGET_LOANS_LABEL_DAILY_INTEREST: new jc(),
        BUDGET_LOANS_LABEL_DAILY_PAYMENT: new jc(),
        BUDGET_LOANS_LABEL_DAYS_REMAINING: new jc(),
        BUDGET_LOANS_LABEL_GET_MORE: new jc(),
        BUDGET_LOANS_LABEL_NEW_LOAN: new jc(),
        BUDGET_LOANS_LABEL_PAY_BACK: new jc(),
        BUDGET_SUB_ITEM: new Cc(),
        BUDGET_TITLE_LOANS: new jc(),
        EXPENSES_SECTION_TITLE: new jc(),
        INCOME_SECTION_TITLE: new jc(),
        LOAN_CHART_BUDGET_WARNING: new jc(),
        LOAN_CHART_BUDGET_WARNING_MODIFIED: new jc(),
        LOAN_CHART_DEFICIT: new jc("TOTAL"),
        LOAN_CHART_LEGEND_EXPENSES: new jc(),
        LOAN_CHART_LEGEND_INCOME: new jc(),
        LOAN_CHART_LEGEND_LOAN_INTEREST: new jc(),
        LOAN_CHART_RELATIVE_COST: new jc("RELATIVE_LOAN_COST"),
        LOAN_CHART_REMAINING_SURPLUS: new jc("TOTAL"),
        LOAN_CHART_SURPLUS: new jc("TOTAL"),
        LOAN_FORM_ACCEPT: new jc(),
        LOAN_FORM_LESS_LABEL: new jc(),
        LOAN_FORM_LIMIT: new jc("LOAN_LIMIT"),
        LOAN_FORM_MORE_LABEL: new jc(),
        LOAN_FORM_RESET: new jc(),
        LOAN_PAGE_DESCRIPTION: new jc(),
        LOAN_PAGE_TITLE: new jc(),
        LOAN_TABLE_AMOUNT: new jc(),
        LOAN_TABLE_INTEREST_RATE: new jc(),
        LOAN_TABLE_MONTHLY_COST: new jc(),
        MONTHLY_BALANCE: new jc(),
        PRODUCTION_LABEL_EXPORT: new jc(),
        PRODUCTION_LABEL_IMPORT: new jc(),
        PRODUCTION_LABEL_INTERNAL: new jc(),
        PRODUCTION_LABEL_TOTAL: new jc(),
        PRODUCTION_PAGE_CONSUMPTION: new jc(),
        PRODUCTION_PAGE_DEFICIT: new jc(),
        PRODUCTION_PAGE_EXPORT: new jc(),
        PRODUCTION_PAGE_IMPORT: new jc(),
        PRODUCTION_PAGE_PRODUCTION: new jc(),
        PRODUCTION_PAGE_PRODUCTIONLINK: new Cc(),
        PRODUCTION_PAGE_SURPLUS: new jc(),
        PRODUCTION_TAB_IMMATERIAL: new jc(),
        PRODUCTION_TAB_MATERIAL: new jc(),
        PRODUCTION_TOOLTIP_COMMERCIAL_CONSUMPTION: new jc(),
        PRODUCTION_TOOLTIP_COMMERCIAL_WEALTH: new jc(),
        PRODUCTION_TOOLTIP_INDUSTRIAL_CONSUMPTION: new jc(),
        PRODUCTION_TOOLTIP_INDUSTRIAL_PRODUCTION: new jc(),
        PRODUCTION_TOOLTIP_INDUSTRIAL_WEALTH: new jc(),
        PRODUCTION_TOOLTIP_OFFICE_CONSUMPTION: new jc(),
        PRODUCTION_TOOLTIP_OFFICE_WEALTH: new jc(),
        RESOURCE_CATEGORY: new Cc(),
        SERVICES_BUILDING_EMPLOYMENT_LABEL: new jc(),
        SERVICES_FEES_LABEL_DAILY_EXPENSES: new jc(),
        SERVICES_FEES_LABEL_DAILY_INCOME: new jc(),
        SERVICES_FEES_LABEL_EXPORT: new jc(),
        SERVICES_FEES_LABEL_FEES: new jc(),
        SERVICES_FEES_LABEL_IMPORT: new jc(),
        SERVICES_FEES_LABEL_SERVICE_FEE: new jc(),
        SERVICES_LABEL_TOTAL: new jc(),
        SERVICES_LABEL_UPKEEP: new jc(),
        SERVICES_LABEL_WAGES: new jc(),
        SERVICES_RESOURCE_FEE_CONSUMPTION: new Cc(),
        SERVICES_RESOURCE_FEE_DESCRIPTION: new Cc(),
        SERVICES_RESOURCE_FEE_EFFICIENCY: new jc(),
        SERVICES_RESOURCE_FEE_HAPPINESS: new jc(),
        SERVICES_RESOURCE_FEE_LABEL: new Cc(),
        SERVICES_RESOURCE_LABEL: new Cc(),
        SERVICES_TITLE_BUDGET: new jc(),
        SERVICES_TITLE_BUDGETS: new jc(),
        SERVICES_TITLE_BUILDINGS: new jc(),
        SERVICES_TITLE_EXPENSES: new jc(),
        SERVICES_TITLE_IMPORT_BUDGET: new jc(),
        SERVICES_TITLE_INCOME: new jc(),
        SERVICES_TITLE_INFO: new jc(),
        SERVICES_TITLE_QUALITY: new jc(),
        SERVICE_BUDGET_EFFICIENCY: new jc(),
        SERVICE_BUDGET_SLIDER_DESCRIPTION: new Cc(),
        SERVICE_BUDGET_SLIDER_TITLE: new Cc(),
        SERVICE_DESCRIPTION: new Cc(),
        SERVICE_EXPORT_REVENUE_DESCRIPTION: new jc(),
        SERVICE_FEES_REVENUE_DESCRIPTION: new jc(),
        SERVICE_IMPORT_EXPENSE_DESCRIPTION: new jc(),
        SERVICE_UPKEEP_EXPENSE_DESCRIPTION: new jc(),
        TAB: new Cc(),
        TAXATION_COMMERCIAL_TITLE: new jc(),
        TAXATION_INDUSTRIAL_TITLE: new jc(),
        TAXATION_OFFICE_TITLE: new jc(),
        TAXATION_RESIDENTIAL_LABEL_JOBLEVEL: new jc(),
        TAXATION_RESIDENTIAL_SLIDER_JOBLEVEL: new Nc(),
        TAXATION_RESIDENTIAL_TITLE: new jc(),
        TAXATION_TAX_GROUP: new Cc(),
        TAX_AREA_COLUMN_TITLE: new jc(),
        TAX_AREA_DESCRIPTION: new Cc(),
        TAX_AREA_TITLE: new Cc(),
        TAX_INCOME_ESTIMATE_TITLE: new jc(),
        TAX_INCOME_TOTAL_TITLE: new jc(),
        TAX_RANGE: new jc("MIN", "MAX"),
        TAX_RATE_TITLE: new jc(),
        TITLE: new jc()
      },
      Editor: {
        ACTIVE_TOOLTIP: new jc(),
        ADD_COMPONENT: new jc(),
        ADD_COMPONENT_NAMED: new jc("NAME"),
        ADD_FAVORITE: new jc(),
        ADD_TRANSLATION: new jc(),
        ASSETS: new jc(),
        ASSET_CATEGORY_TITLE: new Cc(),
        ASSET_DESCRIPTION: new jc(),
        ASSET_NAME: new jc(),
        BACK_TO_EDITOR: new jc(),
        BETA_BANNER: new jc(),
        BORDER_RIVER_WATER_SOURCES: new jc(),
        BORDER_SEA_WATER_SOURCES: new jc(),
        CAMERA_ANGLE: new jc(),
        CAMERA_ANGLE_TOOLTIP: new jc(),
        CAMERA_PIVOT: new jc(),
        CAMERA_PIVOT_TOOLTIP: new jc(),
        CAMERA_STARTING_POSITION: new jc(),
        CAMERA_STARTING_POSITION_TOOLTIP: new jc(),
        CAMERA_ZOOM: new jc(),
        CAMERA_ZOOM_TOOLTIP: new jc(),
        CAPTURE_CAMERA_POSITION: new jc(),
        CAPTURE_CAMERA_POSITION_TOOLTIP: new jc(),
        CHANGE_PREFAB_TYPE: new jc(),
        CHECKLIST: new jc(),
        CHECKLIST_AIR_CONNECTION: new jc(),
        CHECKLIST_AIR_CONNECTION_TOOLTIP: new jc(),
        CHECKLIST_ELECTRICITY_CONNECTION: new jc(),
        CHECKLIST_ELECTRICITY_CONNECTION_TOOLTIP: new jc(),
        CHECKLIST_FERTILE: new jc(),
        CHECKLIST_FERTILE_TOOLTIP: new jc(),
        CHECKLIST_FOREST: new jc(),
        CHECKLIST_FOREST_TOOLTIP: new jc(),
        CHECKLIST_NAME: new jc(),
        CHECKLIST_NAME_TOOLTIP: new jc(),
        CHECKLIST_OIL: new jc(),
        CHECKLIST_OIL_TOOLTIP: new jc(),
        CHECKLIST_OPTIONAL: new jc(),
        CHECKLIST_OPTIONAL_TOOLTIP: new jc(),
        CHECKLIST_ORE: new jc(),
        CHECKLIST_ORE_TOOLTIP: new jc(),
        CHECKLIST_REQUIRED: new jc(),
        CHECKLIST_REQUIRED_TOOLTIP: new jc(),
        CHECKLIST_ROAD_CONNECTION: new jc(),
        CHECKLIST_ROAD_CONNECTION_TOOLTIP: new jc(),
        CHECKLIST_STARTING_TILES: new jc(),
        CHECKLIST_STARTING_TILES_TOOLTIP: new jc(),
        CHECKLIST_TOOLTIP: new jc(),
        CHECKLIST_TRAIN_CONNECTION: new jc(),
        CHECKLIST_TRAIN_CONNECTION_TOOLTIP: new jc(),
        CHECKLIST_WATER: new jc(),
        CHECKLIST_WATER_TOOLTIP: new jc(),
        CLEAR: new jc(),
        CLEAR_ALL: new jc(),
        CLEAR_RESOURCE: new Cc(),
        CLEAR_RESOURCE_TOOLTIP: new Cc(),
        CLIMATE: new jc(),
        CLIMATE_DEFAULT_WEATHER: new jc(),
        CLIMATE_DEFAULT_WEATHERS: new jc(),
        CLIMATE_FREEZING_TEMPERATURE: new jc(),
        CLIMATE_LATITUDE: new jc(),
        CLIMATE_LOAD_PREFAB: new jc(),
        CLIMATE_LOAD_PREFAB_TOOLTIP: new jc(),
        CLIMATE_LONGITUDE: new jc(),
        CLIMATE_SEASONS: new jc(),
        CLIMATE_SETTINGS: new jc(),
        CLIMATE_SETTINGS_TOOLTIP: new jc(),
        CLIMATE_TOOLTIP: new jc(),
        CLIMATE_WIND_DIRECTION: new jc(),
        CLIMATE_WIND_DIRECTION_TOOLTIP: new jc(),
        CLIMATE_WIND_SETTINGS: new jc(),
        CLIMATE_WIND_SETTINGS_TOOLTIP: new jc(),
        CLOUDINESS: new jc(),
        COMPONENT_TYPES: new jc(),
        CONSTANT_LEVEL_WATER_SOURCES: new jc(),
        CONSTANT_RATE_WATER_SOURCES: new jc(),
        CREATE_CUSTOM_CLIMATE: new jc(),
        CREATE_CUSTOM_CLIMATE_PROMPT: new jc(),
        CREATE_NEW_PREFAB: new jc(),
        CURRENT_YEAR_AS_DEFAULT: new jc(),
        CURRENT_YEAR_AS_DEFAULT_TOOLTIP: new jc(),
        DELETE_COMPONENT: new jc(),
        DRIVES: new jc(),
        DUPLICATE_TEMPLATE: new jc(),
        DUPLICATE_TEMPLATE_TOOLTIP: new jc(),
        ELEMENT_COUNT: new jc("COUNT"),
        EXPORT_HEIGHTMAP: new jc(),
        EXPORT_HEIGHTMAP_TOOLTIP: new jc(),
        EXPORT_WORLDMAP: new jc(),
        EXPORT_WORLDMAP_TOOLTIP: new jc(),
        FILE_NAME: new jc(),
        FILTERS: new jc(),
        FLOOD_HEIGHT: new jc(),
        FLOOD_HEIGHT_TOOLTIP: new jc(),
        HEIGHT: new jc(),
        HEIGHTMAPS: new jc(),
        HEIGHTMAPS_TOOLTIP: new jc(),
        HEIGHT_OFFSET: new jc(),
        HEIGHT_SCALE: new jc(),
        HEIGHT_SCALE_TOOLTIP: new jc(),
        HEIGHT_TOOLTIP: new jc(),
        IMPORT: new jc(),
        IMPORTING: new jc(),
        IMPORT_HEIGHTMAP: new jc(),
        IMPORT_HEIGHTMAP_TOOLTIP: new jc(),
        IMPORT_RESOURCE: new Cc(),
        IMPORT_RESOURCE_TOOLTIP: new Cc(),
        IMPORT_WORLDMAP: new jc(),
        IMPORT_WORLDMAP_TOOLTIP: new jc(),
        INCORRECT_HEIGHTMAP_MESSAGE: new jc("WIDTH", "HEIGHT"),
        INCORRECT_HEIGHTMAP_TITLE: new jc(),
        INSTALOD_LABEL: new jc(),
        LIST_ADD_ITEM: new jc(),
        LIST_COUNT: new jc("COUNT"),
        LIST_ITEM_COLLAPSE: new jc(),
        LIST_ITEM_DELETE: new jc(),
        LIST_ITEM_DUPLICATE: new jc(),
        LIST_ITEM_EXPAND: new jc(),
        LIST_ITEM_MOVE_DOWN: new jc(),
        LIST_ITEM_MOVE_UP: new jc(),
        LIST_PAGE_COUNT: new jc("PAGE", "PAGE_COUNT", "COUNT"),
        LOAD: new jc(),
        LOAD_MAP: new jc(),
        LOAD_MAP_TOOLTIP: new jc(),
        LOCALIZED_DESCRIPTION: new jc(),
        LOCALIZED_NAME: new jc(),
        LOCATE: new jc(),
        LOCATE_TOOLTIP: new jc(),
        MAP: new jc(),
        MAP_DESCRIPTION: new jc(),
        MAP_DESCRIPTION_TOOLTIP: new jc(),
        MAP_NAME: new jc(),
        MAP_NAME_AS_DEFAULT: new jc(),
        MAP_NAME_AS_DEFAULT_TOOLTIP: new jc(),
        MAP_NAME_TOOLTIP: new jc(),
        MAP_OFFSET: new jc(),
        MAP_SETTINGS: new jc(),
        MAP_SIZE: new jc(),
        MAP_TOOLTIP: new jc(),
        MATERIALS: new jc(),
        NEW_MAP: new jc(),
        NEXT_PAGE: new jc(),
        NONE_VALUE: new jc(),
        OBJECTCONTAINER: new jc(),
        OPEN_DIRECTORY: new jc(),
        PAGE_FORMAT: new jc("CURRENT", "TOTAL"),
        POLLUTION: new jc(),
        POLLUTION_TOOLTIP: new jc(),
        POSITION: new jc(),
        POSITION_TOOLTIP: new jc(),
        PREFAB_TYPES: new jc(),
        PREVIEW: new jc(),
        PREVIEW_TOOLTIP: new jc(),
        PREVIOUS_PAGE: new jc(),
        PROCESSING: new jc(),
        PROJECT_ROOT: new jc(),
        PROJECT_ROOT_TOOLTIP: new jc(),
        RADIUS: new jc(),
        RADIUS_TOOLTIP: new jc(),
        REMOVE_FAVORITE: new jc(),
        REMOVE_WORLDMAP: new jc(),
        REMOVE_WORLDMAP_TOOLTIP: new jc(),
        RESET_CLOUDINESS: new jc(),
        RESET_TIME_OF_DAY: new jc(),
        RESET_TIME_OF_YEAR: new jc(),
        RESOURCES: new jc(),
        RESOURCES_TOOLTIP: new jc(),
        RESOURCE_TEXTURE_LABEL: new jc(),
        RESOURCE_TOOLS: new jc(),
        SAVE: new jc(),
        SAVE_ASSET: new jc(),
        SAVE_MAP: new jc(),
        SAVE_MAP_SHARE: new jc(),
        SAVE_MAP_TOOLTIP: new jc(),
        SAVE_SHARE: new jc(),
        SEARCH_PLACEHOLDER: new jc(),
        SELECTED_ASSETS: new jc(),
        SELECTED_ASSETS_TOOLTIP: new jc(),
        SELECT_DIRECTORY: new jc(),
        SELECT_NOTHING_EVERYTHING: new jc(),
        SELECT_STARTING_TILES: new jc(),
        SELECT_TEMPLATE: new jc(),
        SHARE_ASSET: new jc(),
        STARTING_MONTH: new jc(),
        STARTING_TIME: new jc(),
        STARTING_YEAR: new jc(),
        STARTING_YEAR_TOOLTIP: new jc(),
        STOP_SELECTING_STARTING_TILES: new jc(),
        TERRAIN_TOOLS: new jc(),
        TERRAIN_TOOLS_TOOLTIP: new jc(),
        THEME: new jc(),
        THEME_TOOLTIP: new jc(),
        THUMBNAIL: new jc(),
        THUMBNAIL_TOOLTIP: new jc(),
        TIME_OF_DAY: new jc(),
        TIME_OF_YEAR: new jc(),
        TOOL: new Cc(),
        TOOLTIP: new Cc(),
        UNIQUE_MAP_ID: new jc(),
        WATER: new jc(),
        WATER_RATE: new jc(),
        WATER_RATE_TOOLTIP: new jc(),
        WATER_SETTINGS: new jc(),
        WATER_SETTINGS_TOOLTIP: new jc(),
        WATER_SIMULATION_SPEED: new jc(),
        WATER_SIMULATION_SPEED_TOOLTIP: new jc(),
        WATER_TOOLTIP: new jc(),
        WIDGETS: new Cc(),
        WORKSPACE: new jc(),
        WORLD_OFFSET: new jc(),
        WORLD_SIZE: new jc()
      },
      EditorTutorials: {
        DESCRIPTION: new Cc(),
        TITLE: new Cc(),
        TODO_INTRO: new jc()
      },
      EducationInfoPanel: {
        AVAILABILITY: new Cc(),
        EDUCATION_DISTRIBUTION: new jc(),
        EDUCATION_LEVEL: new Cc(),
        ELIGIBLE: new jc(),
        LEVEL: new Cc(),
        STUDENTS: new Cc(),
        STUDENT_COUNT: new jc()
      },
      ElectricityInfoPanel: {
        BATTERY_CHARGE: new jc(),
        ELECTRICITY_AVAILABILITY: new jc(),
        ELECTRICITY_EXPORT: new jc(),
        ELECTRICITY_IMPORT: new jc(),
        ELECTRICITY_TRADE: new jc(),
        ELECTRICITY_TRANSMISSION: new jc(),
        ELECTRICITY_TRANSMITTED: new jc(),
        TEMPERATURE_EFFECT: new jc()
      },
      EventJournal: {
        EFFECT: new Cc(),
        EVENT_TITLE: new Cc(),
        OPENING_MESSAGE: new jc(),
        PANEL_TITLE: new jc()
      },
      FireAndRescueInfoPanel: {
        AVERAGE_FIRE_HAZARD: new jc()
      },
      GameListScreen: {
        BIOME_LABEL: new jc(),
        BUILDABLE_AREA_LABEL: new jc(),
        CITY_DETAILS_SECTION: new jc(),
        CLIMATE_LABEL: new jc(),
        CONFIRM_OVERWRITE_MESSAGE: new jc(),
        CONFIRM_UNSAVED_MESSAGE: new jc(),
        CONNECTIONS_LABEL: new jc(),
        EQUATOR: new jc(),
        GAME_OPTION: new Cc(),
        GAME_OPTIONS_SECTION: new jc(),
        GAME_OPTION_DESCRIPTION: new Cc(),
        HEMISPHERE_N: new jc(),
        HEMISPHERE_S: new jc(),
        INVALID_NAME_MESSAGE: new jc(),
        LAST_MODIFIED_LABEL: new jc(),
        LATITUDE_LABEL: new jc(),
        LOAD_GAME_BUTTON: new jc(),
        LOAD_GAME_SCREEN_TITLE: new jc(),
        MAP_DETAILS_SECTION: new jc(),
        MAP_FILTER: new Cc(),
        MAP_LABEL: new jc(),
        MONEY_LABEL: new jc(),
        NEW_GAME_SCREEN_TITLE: new jc(),
        NEW_SAVE: new jc(),
        OVERWRITE_SAVE_GAME_BUTTON: new jc(),
        POPULATION_LABEL: new jc(),
        RESOURCES_LABEL: new jc(),
        SAVE_GAME_BUTTON: new jc(),
        SAVE_GAME_SCREEN_TITLE: new jc(),
        SAVE_NAME_LABEL: new jc(),
        START_GAME_BUTTON: new jc(),
        THEME_LABEL: new jc(),
        TUTORIAL_OPTIONS: new jc(),
        WATER_AVAILABILITY_LABEL: new jc(),
        XP_LABEL: new jc()
      },
      GarbageInfoPanel: {
        GARBAGE_RATE: new jc(),
        LANDFILL_AVAILABILITY: new jc(),
        PROCESSING_STATUS: new jc(),
        STORED_GARBAGE: new jc()
      },
      GroundPollutionInfoPanel: {
        AVERAGE_GROUND_POLLUTION: new jc()
      },
      HealthcareInfoPanel: {
        AVERAGE_HEALTH: new jc(),
        CEMETERY_AVAILABILITY: new jc(),
        CREMATORIUM_AVAILABILITY: new jc(),
        DEATH_RATE: new jc(),
        HEALTHCARE_AVAILABILITY: new jc(),
        N_A: new jc(),
        OCCUPIED: new jc(),
        PATIENTS: new jc(),
        PROCESSING_RATE: new jc(),
        SICK_OR_INJURED: new jc()
      },
      ISO: {
        COUNTRY: new Cc()
      },
      InfoPanels: {
        CAPACITY: new jc(),
        CONSUMPTION: new jc(),
        OUTPUT: new jc(),
        PROCESSING: new jc(),
        PRODUCTION: new jc(),
        STORED: new jc()
      },
      Infoviews: {
        AVAILABILITY: new jc(),
        AVERAGE_AIR_POLLUTION_TOOLTIP: new jc(),
        AVERAGE_COMMERCIAL_PROFIT_TOOLTIP: new jc(),
        AVERAGE_FIRE_HAZARD_TOOLTIP: new jc(),
        AVERAGE_GROUND_POLLUTION_TOOLTIP: new jc(),
        AVERAGE_INDUSTRIAL_PROFIT_TOOLTIP: new jc(),
        AVERAGE_LAND_VALUE_TOOLTIP: new jc(),
        AVERAGE_NOISE_POLLUTION_TOOLTIP: new jc(),
        AVERAGE_OFFICE_PROFIT_TOOLTIP: new jc(),
        AVERAGE_WATER_POLLUTION_TOOLTIP: new jc(),
        BATTERY_CHARGE_TOOLTIP: new jc(),
        CEMETERY_AVAILABILITY_TOOLTIP: new jc(),
        CITY_ATTRACTIVENESS_TOOLTIP: new jc(),
        CLOSE_INFO_VIEW: new jc(),
        COLLEGE_AVAILABILITY_TOOLTIP: new jc(),
        COMMERCIAL_LEVEL_TOOLTIP: new jc(),
        CREMATORIUM_AVAILABILITY_TOOLTIP: new jc(),
        CRIME_PROBABILITY_TOOLTIP: new jc(),
        EDUCATION_DISTRIBUTION_TOOLTIP: new jc(),
        ELECTRICITY_AVAILABILITY_TOOLTIP: new jc(),
        ELECTRICITY_TRADE_TOOLTIP: new jc(),
        ELECTRICITY_TRANSMISSION_TOOLTIP: new jc(),
        ELEMENTARY_SCHOOL_AVAILABILITY_TOOLTIP: new jc(),
        EXPORT_DISTRIBUTION_TOOLTIP: new jc(),
        FERTILE_LAND_RESOURCE_TOOLTIP: new jc(),
        GARBAGE_PROCESSING_STATUS_TOOLTIP: new jc(),
        HAPPINESS_FACTORS_TOOLTIP: new jc(),
        HEALTHCARE_AVAILABILITY_TOOLTIP: new jc(),
        HIGH_SCHOOL_AVAILABILITY_TOOLTIP: new jc(),
        IMPORT_DISTRIBUTION_TOOLTIP: new jc(),
        INDUSTRIAL_LEVEL_TOOLTIP: new jc(),
        INFOMODE: new Cc(),
        INFOMODE_TOOLTIP: new Cc(),
        INFOMODE_TYPE: new Cc(),
        INFOVIEW: new Cc(),
        JAIL_AVAILABILITY_TOOLTIP: new jc(),
        LABEL: new Cc(),
        LABEL_VALUE_FORMAT: new jc("LABEL", "VALUE"),
        LANDFILL_AVAILABILITY_TOOLTIP: new jc(),
        MAIL_SERVICE_AVAILABILITY_TOOLTIP: new jc(),
        MAP_LEGEND: new jc(),
        OFFICE_LEVEL_TOOLTIP: new jc(),
        OIL_RESOURCE_TOOLTIP: new jc(),
        ORE_RESOURCE_TOOLTIP: new jc(),
        PARKING_AVAILABILITY_TOOLTIP: new jc(),
        POPULATION_DISTRIBUTION_TOOLTIP: new jc(),
        POPULATION_STATISTICS_TOOLTIP: new jc(),
        PRISON_AVAILABILITY_TOOLTIP: new jc(),
        REMOVE_USER_INFOVIEW_BUTTON_TOOLTIP: new jc(),
        RESIDENTIAL_LEVEL_TOOLTIP: new jc(),
        SEWAGE_TRADE_TOOLTIP: new jc(),
        SEWAGE_TREATMENT_TOOLTIP: new jc(),
        SHELTER_AVAILABILITY_TOOLTIP: new jc(),
        TITLE_INFOVIEWS: new jc(),
        TRAFFIC_FLOW: new jc(),
        UNIVERSITY_AVAILABILITY_TOOLTIP: new jc(),
        USER_INFOMODE_SELECTOR_TOOLTIP: new jc(),
        WATER_AVAILABILITY_TOOLTIP: new jc(),
        WATER_STORAGE_TOOLTIP: new jc(),
        WATER_TRADE_TOOLTIP: new jc(),
        WOOD_RESOURCE_TOOLTIP: new jc(),
        WORKPLACE_DISTRIBUTION_TOOLTIP: new jc()
      },
      LandValueInfoPanel: {
        AVERAGE_LAND_VALUE: new jc()
      },
      LevelInfoPanel: {
        COMMERCIAL: new jc(),
        INDUSTRIAL: new jc(),
        LEVEL1: new jc(),
        LEVEL2: new jc(),
        LEVEL3: new jc(),
        LEVEL4: new jc(),
        LEVEL5: new jc(),
        OFFICE: new jc(),
        RESIDENTIAL: new jc()
      },
      LifePath: {
        BACK_BUTTON_TOOLTIP: new jc(),
        CITIZEN_BECAME_UNEMPLOYED: new Nc("LINK_1"),
        CITIZEN_BIRTH: new jc(),
        CITIZEN_COMMITED_ROBBERY: new Nc(),
        CITIZEN_DIED: new Nc(),
        CITIZEN_FAILED_SCHOOL: new Nc("LINK_1"),
        CITIZEN_GOT_ARRESTED: new Nc(),
        CITIZEN_GOT_INJURED: new Nc(),
        CITIZEN_GOT_INJURED_BY_EVENT: new Nc("LINK_1"),
        CITIZEN_GOT_IN_DANGER_BY_EVENT: new Nc("LINK_1"),
        CITIZEN_GOT_SICK: new Nc(),
        CITIZEN_GOT_SICK_BY_EVENT: new Nc("LINK_1"),
        CITIZEN_GOT_TRAPPED: new Nc(),
        CITIZEN_GOT_TRAPPED_BY_EVENT: new Nc("LINK_1"),
        CITIZEN_GRADUATED: new Nc("LINK_1"),
        CITIZEN_IN_DANGER: new Nc(),
        CITIZEN_LOST_FAMILY_MEMBER: new Nc("LINK_1"),
        CITIZEN_MADE_BABY_COUPLE: new Nc("LINK_1", "LINK_2"),
        CITIZEN_MADE_BABY_SINGLE: new Nc("LINK_1"),
        CITIZEN_MOVED_HOUSE: new Nc("LINK_1"),
        CITIZEN_MOVED_OUT_OF_CITY: new Nc("LINK_1"),
        CITIZEN_PARTNERED_UP: new Nc("LINK_1"),
        CITIZEN_SENTENCED_TO_PRISON: new Nc(),
        CITIZEN_SEPARATED: new Nc("LINK_1"),
        CITIZEN_STARTED_SCHOOL: new Nc("LINK_1"),
        CITIZEN_STARTED_WORKING: new Nc("LINK_1"),
        DETAIL_PANEL_TITLE: new jc("NAME"),
        LIST_PANEL_TITLE: new jc(),
        MAX_EXCEEDED_WARNING: new jc(),
        OCCUPATION: new jc("OCCUPATION", "WORKPLACE_LINK", "WORKPLACE_NAME"),
        OPENING_MESSAGE: new jc(),
        TOURIST_LEFT_CITY: new Nc("LINK_1"),
        UNFOLLOW_BUTTON_TOOLTIP: new jc()
      },
      Loading: {
        HINTMESSAGE: new Nc(),
        LOADING_TITLE: new jc()
      },
      Main: {
        TOOLTIP_DESCRIPTION_ADVISOR: new jc(),
        TOOLTIP_DESCRIPTION_CAMERA_MODES: new jc(),
        TOOLTIP_DESCRIPTION_CHIRPER: new jc(),
        TOOLTIP_DESCRIPTION_CINEMATIC_CAMERA: new jc(),
        TOOLTIP_DESCRIPTION_CITY_ECONOMY: new jc(),
        TOOLTIP_DESCRIPTION_CITY_INFO: new jc(),
        TOOLTIP_DESCRIPTION_CITY_NAME: new jc(),
        TOOLTIP_DESCRIPTION_CITY_STATISTICS: new jc(),
        TOOLTIP_DESCRIPTION_CURRENT_MILESTONE: new jc(),
        TOOLTIP_DESCRIPTION_DATE: new jc(),
        TOOLTIP_DESCRIPTION_DEMAND: new jc(),
        TOOLTIP_DESCRIPTION_ELEVATION_LOWER: new jc(),
        TOOLTIP_DESCRIPTION_ELEVATION_RAISE: new jc(),
        TOOLTIP_DESCRIPTION_EVENT_JOURNAL: new jc(),
        TOOLTIP_DESCRIPTION_FOLLOWED_CITIZENS: new jc(),
        TOOLTIP_DESCRIPTION_FREE_CAMERA: new jc(),
        TOOLTIP_DESCRIPTION_GAME_SPEED: new jc(),
        TOOLTIP_DESCRIPTION_INFO_VIEWS: new jc(),
        TOOLTIP_DESCRIPTION_LINES_OVERVIEW: new jc(),
        TOOLTIP_DESCRIPTION_MAP_TILES: new jc(),
        TOOLTIP_DESCRIPTION_MAX_MILESTONE: new jc(),
        TOOLTIP_DESCRIPTION_MONEY: new jc(),
        TOOLTIP_DESCRIPTION_NOTIFICATIONS: new jc(),
        TOOLTIP_DESCRIPTION_PAUSE: new jc(),
        TOOLTIP_DESCRIPTION_PAUSE_MENU: new jc(),
        TOOLTIP_DESCRIPTION_PHOTO_MODE: new jc(),
        TOOLTIP_DESCRIPTION_PLAY: new jc(),
        TOOLTIP_DESCRIPTION_POPULATION: new jc(),
        TOOLTIP_DESCRIPTION_PROGRESSION: new jc(),
        TOOLTIP_DESCRIPTION_RADIO: new jc(),
        TOOLTIP_DESCRIPTION_UNDERGROUND: new jc(),
        TOOLTIP_DESCRIPTION_UNLIMITED_MONEY: new jc(),
        TOOLTIP_DESCRIPTION_WEATHER: new jc(),
        TOOLTIP_DESCRIPTION_XP: new jc(),
        TOOLTIP_TITLE_ADVISOR: new jc(),
        TOOLTIP_TITLE_CAMERA_MODES: new jc(),
        TOOLTIP_TITLE_CHIRPER: new jc(),
        TOOLTIP_TITLE_CINEMATIC_CAMERA: new jc(),
        TOOLTIP_TITLE_CITY_ECONOMY: new jc(),
        TOOLTIP_TITLE_CITY_INFO: new jc(),
        TOOLTIP_TITLE_CITY_NAME: new jc(),
        TOOLTIP_TITLE_CITY_STATISTICS: new jc(),
        TOOLTIP_TITLE_CURRENT_MILESTONE: new jc(),
        TOOLTIP_TITLE_DATE: new jc(),
        TOOLTIP_TITLE_DEMAND: new jc(),
        TOOLTIP_TITLE_ELEVATION_LOWER: new jc(),
        TOOLTIP_TITLE_ELEVATION_RAISE: new jc(),
        TOOLTIP_TITLE_EVENT_JOURNAL: new jc(),
        TOOLTIP_TITLE_FOLLOWED_CITIZENS: new jc(),
        TOOLTIP_TITLE_FREE_CAMERA: new jc(),
        TOOLTIP_TITLE_GAME_SPEED: new jc(),
        TOOLTIP_TITLE_INFO_VIEWS: new jc(),
        TOOLTIP_TITLE_LINES_OVERVIEW: new jc(),
        TOOLTIP_TITLE_MAP_TILES: new jc(),
        TOOLTIP_TITLE_MONEY: new jc(),
        TOOLTIP_TITLE_NOTIFICATIONS: new jc(),
        TOOLTIP_TITLE_PAUSE: new jc(),
        TOOLTIP_TITLE_PAUSE_MENU: new jc(),
        TOOLTIP_TITLE_PHOTO_MODE: new jc(),
        TOOLTIP_TITLE_PLAY: new jc(),
        TOOLTIP_TITLE_POPULATION: new jc(),
        TOOLTIP_TITLE_PROGRESSION: new jc(),
        TOOLTIP_TITLE_RADIO: new jc(),
        TOOLTIP_TITLE_UNDERGROUND: new jc(),
        TOOLTIP_TITLE_WEATHER: new jc(),
        TOOLTIP_TITLE_XP: new jc()
      },
      MapTilePurchase: {
        AVAILABLE_EXPANSION_PERMITS: new jc("VALUE"),
        AVAILABLE_WATER: new jc(),
        BUILDABLE_AREA: new jc(),
        COST: new jc(),
        PERMITS_USED: new jc(),
        PURCHASE_STATUS: new Cc(),
        PURCHASE_STATUS_TOOLTIP: new Cc(),
        RESOURCE: new Cc(),
        RESOURCES: new jc(),
        TILE_UPKEEP: new jc(),
        TITLE: new jc(),
        TOOLTIP_COST: new jc(),
        TOOLTIP_RESOURCE: new Cc(),
        TOOLTIP_TILES: new jc(),
        TOOLTIP_TITLE_COST: new jc(),
        TOOLTIP_TITLE_RESOURCE: new Cc(),
        TOOLTIP_TITLE_TILES: new jc()
      },
      Maps: {
        MAP_DESCRIPTION: new Cc(),
        MAP_TITLE: new Cc(),
        OUTSIDE_CONNECTIONS: new Cc(),
        RESOURCE: new Cc()
      },
      Menu: {
        ACHIEVEMENTS_WARNING_GAME_OPTIONS: new jc(),
        ACHIEVEMENTS_WARNING_GAME_OPTIONS_PS: new jc(),
        ACHIEVEMENTS_WARNING_MODS: new jc(),
        ACHIEVEMENTS_WARNING_MODS_PS: new jc(),
        ACHIEVEMENTS_WARNING_PAST_MODS: new jc(),
        ACHIEVEMENTS_WARNING_PAST_MODS_PS: new jc(),
        ACHIEVEMENTS_WARNING_PAST_OPTIONS: new jc(),
        ACHIEVEMENTS_WARNING_PAST_OPTIONS_PS: new jc(),
        APPLICATION_QUIT_MESSAGE: new jc(),
        ASSET_ADD_EXTERNAL_LINK: new jc(),
        ASSET_ADD_LINK: new jc(),
        ASSET_ADD_PREVIEW_SCREENSHOT: new jc(),
        ASSET_CHANGELOG: new jc(),
        ASSET_COMPLETE: new jc(),
        ASSET_COPY_ID: new jc(),
        ASSET_ERROR_DESCRIPTION: new jc(),
        ASSET_ERROR_EMPTY_CHANGELOG: new jc(),
        ASSET_ERROR_LINK: new jc(),
        ASSET_ERROR_NAME: new jc(),
        ASSET_ERROR_VERSION: new jc(),
        ASSET_EXISTING: new jc(),
        ASSET_EXISTING_ID: new jc(),
        ASSET_EXTERNAL_LINKS: new jc(),
        ASSET_EXTERNAL_LINK_TYPE: new Cc(),
        ASSET_EXTERNAL_LINK_URL: new jc(),
        ASSET_FAILURE: new jc(),
        ASSET_FORUM_LINK: new jc("INDEX"),
        ASSET_FORUM_LINKS: new jc(),
        ASSET_FORUM_LINK_LABEL: new jc(),
        ASSET_LONG_DESCRIPTION: new jc(),
        ASSET_NAME: new jc(),
        ASSET_PREPARING: new jc(),
        ASSET_PREVIEW_SCREENSHOTS: new jc(),
        ASSET_REMOVE_PREVIEW_SCREENSHOT: new jc(),
        ASSET_SCREENSHOT_EMPTY_SUBTITLE: new jc(),
        ASSET_SCREENSHOT_EMPTY_TITLE: new jc(),
        ASSET_SHORT_DESCRIPTION: new jc(),
        ASSET_SUBMITTING: new jc(),
        ASSET_TYPE: new Cc(),
        ASSET_UPDATE_EXISTING: new jc(),
        ASSET_UPLOAD: new jc(),
        ASSET_UPLOAD_ID: new jc("ID"),
        ASSET_VERSION: new jc(),
        BACK: new jc(),
        BETA_LABEL: new jc(),
        BINARY_PACK_ASSETS: new jc(),
        BINARY_PACK_ASSETS_TOOLTIP: new jc(),
        CITY_NAME_LABEL: new jc(),
        CLOUD_TARGET: new Cc(),
        CLOUD_TARGET_LABEL: new jc(),
        CONFIRM_DELETE_SAVE_WARNING: new jc(),
        CONTINUE_GAME: new jc(),
        CREDITS: new jc(),
        DLC_TAB: new jc(),
        EDITOR: new jc(),
        EMPTY_SLOT: new jc(),
        EXIT_APPLICATION: new jc(),
        EXIT_GAME: new jc(),
        GDKCLOUD_SAVE: new jc(),
        LOAD_GAME: new jc(),
        LOAD_GAME_BUTTON: new jc(),
        MAP_OPTIONS: new jc(),
        MODS_TAB: new jc(),
        NAME_FIELD_PLACEHOLDER: new jc(),
        NEWS_PANEL_TITLE: new jc(),
        NEW_GAME: new jc(),
        NOTIFICATIONS_OPENING_MESSAGE: new jc(),
        NOTIFICATIONS_TITLE: new jc(),
        NOTIFICATION_DESCRIPTION: new Cc("LOADED", "TOTAL"),
        NOTIFICATION_TITLE: new Cc(),
        OPTIONS: new jc(),
        PARADOXCLOUD_SAVE: new jc(),
        PARADOXMODS_SAVE: new jc(),
        PDX_MODS: new jc(),
        RANDOM_CITY_NAME_BUTTON_TOOLTIP: new jc(),
        READONLY_SAVE: new jc(),
        RESUME_GAME: new jc(),
        SAVE_CITY_SIZE_WARNING: new jc(),
        SAVE_GAME: new jc(),
        SAVE_LIST: new jc(),
        SAVE_OPTIONS: new jc(),
        SAVE_ORDERING: new Cc(),
        SAVE_ORDERING_LABEL: new jc(),
        SELECT_MAP_BUTTON: new jc(),
        SIMULATION_DATE_LABEL: new jc(),
        START_GAME_BUTTON: new jc(),
        STEAMCLOUD_SAVE: new jc(),
        SWITCH_USER: new jc(),
        UNLIMITED_MONEY_LABEL: new jc()
      },
      NaturalResourcesInfoPanel: {
        AVAILABLE: new jc(),
        FERTILITY: new jc(),
        FOREST: new jc(),
        OIL: new jc(),
        ORE: new jc(),
        RATE: new jc(),
        RENEWAL_RATE: new jc()
      },
      NoisePollutionInfoPanel: {
        AVERAGE_NOISE_POLLUTION: new jc()
      },
      Notifications: {
        DESCRIPTION: new Cc(),
        TITLE: new Cc()
      },
      Options: {
        ANTIALIASINGMETHOD: new Cc(),
        AUTORELOADMODE: new Cc(),
        AUTOSAVECOUNT: new Cc(),
        AUTOSAVEINTERVAL: new Cc(),
        BATCH_SWAP_BINDINGS: new jc(),
        BATCH_SWAP_GROUP_BLOCK_RESOLUTION: new jc("CONTROL"),
        BATCH_SWAP_GROUP_NO_RESOLUTION: new jc("CONTROL"),
        BATCH_SWAP_GROUP_PROMT: new jc(),
        BATCH_SWAP_GROUP_RESET_PROMT: new jc(),
        BATCH_SWAP_GROUP_RESOLUTION: new jc("CONTROL"),
        BINDING_CONFLICT_BUILTIN_WITH_BUILTIN_TOOLTIP: new jc(),
        BINDING_CONFLICT_MOD_WITH_BUILTIN_TOOLTIP: new jc(),
        BINDING_CONFLICT_MOD_WITH_MOD_TOOLTIP: new jc(),
        CANNOT_BE_REBOUND: new jc(),
        CONFLICT_BUILTIN_BINDING_TOOLTIP: new jc(),
        CONFLICT_MODS_BINDING_TOOLTIP: new jc(),
        CURSORMODE: new Cc(),
        DEPTHOFFIELDMODE: new Cc(),
        DEPTHOFFIELDRESOLUTION: new Cc(),
        DESCRIPTION_BOX_TITLE: new jc(),
        DISPLAYMODE: new Cc(),
        DISPLAY_MODE: new Cc(),
        DISPLAY_SETTINGS_CONFIRM: new jc(),
        DISPLAY_SETTINGS_PROMPT: new jc(),
        DISPLAY_SETTINGS_REVERT: new jc("TIME"),
        DLSSQUALITY: new Cc(),
        DYNRESUPSCALEFILTER: new Cc(),
        ERROR_TOOLCHAIN: new jc(),
        ERROR_TOOLCHAIN_DEPENDENCY_DOWNLOAD: new jc("DEPENDENCY_NAME"),
        ERROR_TOOLCHAIN_DEPENDENCY_DOWNLOAD_DETAILS: new jc("DEPENDENCY_NAME", "DETAILS"),
        ERROR_TOOLCHAIN_DEPENDENCY_INSTALL: new jc("DEPENDENCY_NAME"),
        ERROR_TOOLCHAIN_DEPENDENCY_INSTALL_DETAILS: new jc("DEPENDENCY_NAME", "DETAILS"),
        ERROR_TOOLCHAIN_DEPENDENCY_UNINSTALL: new jc("DEPENDENCY_NAME"),
        ERROR_TOOLCHAIN_DEPENDENCY_UNINSTALL_DETAILS: new jc("DEPENDENCY_NAME", "DETAILS"),
        ERROR_TOOLCHAIN_INSTALL_UNKNOWN: new jc(),
        ERROR_TOOLCHAIN_NO_SPACE: new jc(),
        ERROR_TOOLCHAIN_NO_SPACE_DETAILS: new jc("DETAILS"),
        ERROR_TOOLCHAIN_UNINSTALL_UNKNOWN: new jc(),
        FILTERMODE: new Cc(),
        FORMAT: new Cc("SIGN", "VALUE"),
        FPSMODE: new Cc(),
        FSR2QUALITY: new Cc(),
        GROUP: new Cc(),
        INPUTHINTSTYPE: new Cc(),
        INPUT_CONFLICT_BATCH_NO_RESOLUTION: new jc("CONTROL", "BINDING"),
        INPUT_CONFLICT_BATCH_RESOLUTION: new jc("CONTROL", "BINDING"),
        INPUT_CONFLICT_FORMAT: new jc("MAP", "TITLE"),
        INPUT_CONFLICT_NO_RESOLUTION: new jc("CONTROL", "BINDING"),
        INPUT_CONFLICT_PROMPT: new jc("CONTROL", "BINDING"),
        INPUT_CONFLICT_TITLE: new jc(),
        INPUT_CONTROL: new Cc(),
        INPUT_CONTROL_NA: new jc(),
        INPUT_CONTROL_PS: new Cc(),
        INPUT_CONTROL_SHORT: new Cc(),
        INPUT_CONTROL_SHORT_PS: new Cc(),
        INPUT_CONTROL_SHORT_XBOX: new Cc(),
        INPUT_CONTROL_UNSET: new jc(),
        INPUT_CONTROL_XBOX: new Cc(),
        INPUT_MAP: new Cc(),
        INPUT_MODIFIER_SEPARATOR: new jc(),
        INPUT_REBIND_PROMPT: new Cc(),
        INPUT_REBIND_PROMPT_NEW: new Cc("SHIFT", "CTRL", "ALT", "LSP", "RSP"),
        INPUT_REBIND_PROMPT_NEW_PS: new Cc("LSP", "RSP"),
        INPUT_REBIND_PROMPT_NEW_XBOX: new Cc("LSP", "RSP"),
        INPUT_REBIND_PROMPT_NO_MODIFIERS: new Cc(),
        INPUT_REBIND_PROMPT_NO_MODIFIERS_PS: new Cc(),
        INPUT_REBIND_PROMPT_NO_MODIFIERS_XBOX: new Cc(),
        INPUT_REBIND_PROMPT_PS: new Cc(),
        INPUT_REBIND_PROMPT_XBOX: new Cc(),
        INPUT_REBIND_TITLE: new jc("BINDING"),
        INTERFACE_STYLE: new Cc(),
        KEYBOARDLAYOUT: new Cc(),
        LEVEL: new Cc(),
        MOD_TOOLCHAIN_STATUS: new Cc(),
        MSAASAMPLES: new Cc(),
        OPTION: new Cc(),
        OPTION_DESCRIPTION: new Cc(),
        PERFORMANCEPREFERENCE: new Cc(),
        RESET_BINDING_TOOLTIP: new jc(),
        SCREEN_RESOLUTION_FORMAT: new jc("WIDTH", "HEIGHT", "REFRESH_RATE"),
        SCREEN_TITLE: new jc(),
        SEARCH: new Cc(),
        SECTION: new Cc(),
        SKINNING: new Cc(),
        SMAAQUALITYLEVEL: new Cc(),
        STATE_TOOLCHAIN: new Cc("VERSION"),
        SWAP_BINDINGS: new jc(),
        TAB: new Cc(),
        TAB_PS: new Cc(),
        TEMPERATUREUNIT: new Cc(),
        TIMEFORMAT: new Cc(),
        UNITSYSTEM: new Cc(),
        UNSET_BINDINGS: new jc(),
        UNSET_BINDING_TOOLTIP: new jc(),
        WARNING: new Cc(),
        WARN_TOOLCHAIN_DEPENDENCY_UNINSTALL: new jc("DEPENDENCY_NAME"),
        WARN_TOOLCHAIN_DOTNET_UNINSTALL: new jc("DOTNET_VERSION"),
        WARN_TOOLCHAIN_INSTALL: new jc("UNITY_VERSION", "HOST"),
        WARN_TOOLCHAIN_INSTALL_DOTNET: new jc("DOTNET_VERSION", "HOST"),
        WARN_TOOLCHAIN_INSTALL_MOD_PROJECT: new jc(),
        WARN_TOOLCHAIN_INSTALL_NEW: new jc(),
        WARN_TOOLCHAIN_INSTALL_NODEJS: new jc("NODEJS_VERSION", "HOST"),
        WARN_TOOLCHAIN_INSTALL_PROJECT_TEMPLATE: new jc(),
        WARN_TOOLCHAIN_INSTALL_UNITY: new jc("UNITY_VERSION", "HOST"),
        WARN_TOOLCHAIN_INSTALL_UNITY_LICENSE: new jc(),
        WARN_TOOLCHAIN_MIN_VERSION: new jc("MIN_VERSION"),
        WARN_TOOLCHAIN_NODEJS_UNINSTALL: new jc("NODEJS_VERSION"),
        WARN_TOOLCHAIN_UNINSTALL: new jc("UNITY_VERSION"),
        WARN_TOOLCHAIN_UNINSTALL_NEW: new jc(),
        WARN_TOOLCHAIN_UNITY_LICENSE_RETURN: new jc(),
        WARN_TOOLCHAIN_UNITY_UNINSTALL: new jc("UNITY_VERSION")
      },
      OutsideConnectionsInfoPanel: {
        TOP_EXPORTS: new jc(),
        TOP_IMPORTS: new jc()
      },
      Overlay: {
        BACK_ACTION: new jc(),
        CHANGE_USER_ACTION: new jc(),
        CONTROLLER_DISCONNECTED: new jc(),
        CONTROLLER_DISCONNECTED_PS: new jc(),
        CONTROLLER_PAIRING_CHANGED: new jc(),
        CONTROLLER_PAIRING_CHANGED_PS: new jc(),
        CORRUPT_SAVE_DATA: new jc(),
        DELETED_ITEMS: new jc(),
        ENGAGEMENT_PROMPT_GAMEPAD: new jc(),
        ENGAGEMENT_PROMPT_KEYBOARD: new jc(),
        PLEASE_LOG_IN: new jc(),
        PLEASE_WAIT: new jc(),
        PRESS_ANY_KEY_ACTION: new jc(),
        PROCEED_ACTION: new jc(),
        QUIT_ACTION: new jc(),
        START_GAME_ACTION: new jc(),
        SWITCH_USER: new jc(),
        USER_LOGGED_OUT: new jc(),
        VALIDATION: new jc()
      },
      Paradox: {
        ACCOUNT_LINK_CONFIRMATION_TEXT: new Cc(),
        ACCOUNT_LINK_OVERWRITE_TITLE: new jc(),
        ACCOUNT_LINK_PROMPT: new jc(),
        ACCOUNT_LINK_PROMPT_SHORT: new Cc(),
        ACCOUNT_LINK_PROMPT_TEXT: new Cc(),
        ACCOUNT_LINK_PROMPT_TITLE: new jc(),
        ADDITIONAL_ASSETS: new jc(),
        ADDITIONAL_TAGS: new jc(),
        ADD_ASSET: new jc(),
        ADD_TAG: new jc(),
        BIRTH_DATE_DAY_FIELD_LABEL: new jc(),
        BIRTH_DATE_FIELD_LABEL: new jc(),
        BIRTH_DATE_MONTH_FIELD_LABEL: new jc(),
        BIRTH_DATE_YEAR_FIELD_LABEL: new jc(),
        CONSENT: new jc(),
        COUNTRY_FIELD_LABEL: new jc(),
        EMAIL_FIELD_LABEL: new jc(),
        ERROR: new Cc(),
        EXISTING_PREVIEWS_ERROR: new jc(),
        FORGOT_PASSWORD_LINK: new jc(),
        LINK_ACCOUNT_BUTTON: new jc(),
        LOADING: new jc(),
        LOGIN_BUTTON: new jc(),
        LOGIN_FORM_TITLE: new jc(),
        LOGIN_FROM_REGISTRATION_LINK: new jc(),
        LOGIN_INCENTIVE: new jc(),
        LOGOUT_BUTTON: new jc(),
        MARKETING_PERMISSION_TOGGLE_LABEL: new jc(),
        MODS_NEED_INTERNET: new jc(),
        NOT_LOGGED_IN: new jc(),
        NO_INTERNET_CONNECTION: new jc(),
        NO_SOCIAL_PROFILE: new jc(),
        OPEN_PROFILE_PAGE: new jc(),
        PARADOX_ACCOUNT: new jc(),
        PASSWORD_FIELD_LABEL: new jc(),
        PASSWORD_RESET_CONFIRMATION_TEXT: new jc("EMAIL"),
        PDX_ACCOUNT_LINK_OVERWRITE_PROMPT_TEXT: new Cc(),
        PDX_MODS_BUTTON: new jc(),
        PDX_PLATFORM_ACCOUNT_LINK_OVERWRITE_PROMPT_TEXT: new Cc(),
        PLATFORM_ACCOUNT_LINK_OVERWRITE_PROMPT_TEXT: new Cc(),
        PRIVACY_POLICY: new jc(),
        PS_MODS_DISCLAIMER: new jc(),
        PS_MODS_EXIT_DISABLE_MODS: new jc(),
        PS_MODS_EXIT_DISCLAIMER: new jc(),
        PS_MODS_EXIT_GO_BACK: new jc(),
        PS_MODS_EXIT_KEEP_MODS: new jc(),
        PS_NOT_SIGNED_INTO_PSN: new jc(),
        REGISTRATION_CONFIRMATION_TEXT: new jc(),
        REGISTRATION_CONFIRMATION_TITLE: new jc(),
        REGISTRATION_FORM_TITLE: new jc(),
        REGISTRATION_FROM_LOGIN_LINK: new jc(),
        REGISTRATION_HINT: new jc(),
        REMEMBER_ME_TOGGLE_LABEL: new jc(),
        RETRIEVING_DATA: new jc(),
        SDK_DISABLED: new jc(),
        SKIP_BUTTON: new jc(),
        SUBMIT_REGISTRATION_BUTTON: new jc(),
        TERMS_OF_USE: new jc(),
        TERMS_PRIVACY_NOTICE: new jc(),
        UGC_DISABLED: new jc(),
        UNKNOWN_ERROR: new jc(),
        UNLINK_ACCOUNT_BUTTON: new jc()
      },
      PhotoMode: {
        CAPTURE_PROPERTY_TOOLTIP: new jc(),
        CLOUDEROSIONNOISE: new Cc(),
        DEPTHOFFIELDMODE: new Cc(),
        ENABLE_PROPERTY_TOOLTIP: new jc(),
        ENVIRONMENT_DISCLAIMER: new jc(),
        FILMGRAINLOOKUP: new Cc(),
        GATEFITMODE: new Cc(),
        HIDE_UI: new jc(),
        PROPERTY_LIMIT_MAX: new jc(),
        PROPERTY_LIMIT_MIN: new jc(),
        PROPERTY_TITLE: new Cc(),
        PROPERTY_TOOLTIP: new Cc(),
        RESET_PROPERTY_TOOLTIP: new jc(),
        SENSORTYPE: new Cc(),
        TAB: new Cc(),
        TAKE_PHOTO: new jc(),
        TITLE: new jc(),
        TOGGLE_FIRST_PERSON_MODE: new jc(),
        TOGGLE_ORBIT_MODE: new jc()
      },
      PoliceInfoPanel: {
        ARRESTED_CRIMINALS: new jc(),
        AVERAGE_CRIME_PROBABILITY: new jc(),
        CRIME_SUCCESS_RATE: new jc(),
        CURRENT_NUMBER_OF_CRIMINALS: new jc(),
        IN_JAIL: new jc(),
        IN_PRISON: new jc(),
        JAIL_AVAILABILITY: new jc(),
        NUMBER_OF_CRIMES_PER_MONTH: new jc(),
        PRISONERS: new jc(),
        PRISON_AVAILABILITY: new jc()
      },
      Policy: {
        DESCRIPTION: new Cc(),
        TITLE: new Cc()
      },
      PopulationInfoPanel: {
        ADULTS: new jc(),
        AGE_DISTRIBUTION: new jc(),
        BIRTH_RATE: new jc(),
        CHILDREN: new jc(),
        DEATH_RATE: new jc(),
        EMPLOYED: new jc(),
        JOBS: new jc(),
        MOVED_AWAY: new jc(),
        MOVED_IN: new jc(),
        POPULATION: new jc(),
        SENIORS: new jc(),
        TEENS: new jc(),
        UNEMPLOYMENT: new jc()
      },
      PostInfoPanel: {
        COLLECTED_MAIL: new jc(),
        DELIVERED_MAIL: new jc(),
        MAIL_RATE: new jc(),
        MAIL_SERVICE_AVAILABILITY: new jc()
      },
      Progression: {
        AVAILABLE_DEV_POINTS: new jc("VALUE"),
        BUILDING_UNLOCK_EVENT_PANEL_TITLE: new jc(),
        BUILD_LATER_BUTTON: new jc(),
        BUILD_NOW_BUTTON: new jc(),
        DEVELOPMENT_POINTS_FIELD_LABEL: new jc(),
        DEV_TREE_UNLOCK_BADGE: new jc(),
        HAPPINESS_REQUIREMENT: new jc("VALUE"),
        INCLUDES_LABEL: new jc(),
        LOAN_LIMIT: new jc(),
        MAP_TILES_FIELD_LABEL: new jc(),
        MAX_MILESTONE_FIELD_LABEL: new jc(),
        MILESTONE_DESCRIPTION: new Nc(),
        MILESTONE_DETAIL_SUBTITLE: new jc("INDEX"),
        MILESTONE_NAME: new Nc(),
        MILESTONE_PROGRESS: new jc("CURRENT", "TARGET"),
        MILESTONE_REWARDS_LABEL: new jc(),
        MILESTONE_UNLOCK_PANEL_TITLE_PRIMARY: new jc("INDEX"),
        MILESTONE_UNLOCK_PANEL_TITLE_SECONDARY: new jc(),
        MILESTONE_UNLOCK_REQUIREMENT: new jc("INDEX", "NAME"),
        MILESTONE_VICTORY_CONFIRM_NEW_GAME: new jc(),
        MILESTONE_VICTORY_CONTINUE: new jc(),
        MILESTONE_VICTORY_DESCRIPTION_LONG: new jc(),
        MILESTONE_VICTORY_DESCRIPTION_SHORT: new jc(),
        MILESTONE_VICTORY_START_NEW: new jc(),
        MILESTONE_VICTORY_TITLE: new jc(),
        NODE_DESCRIPTION: new Cc(),
        NODE_DEV_POINTS_REQUIREMENT: new jc(),
        NODE_LOCKED: new jc(),
        NODE_MILESTONE_REQUIREMENT: new jc("INDEX"),
        NODE_NAME: new Cc(),
        NODE_PARENT_REQUIREMENT: new jc(),
        NODE_UNLOCKED: new jc(),
        NODE_UNLOCK_REQUIREMENT: new jc("NAME"),
        OBJECT_BUILT_REQUIREMENT: new Cc("CURRENT", "TARGET"),
        PANEL_TITLE: new jc(),
        POINTS_LABEL: new jc("POINTS"),
        POPULATION_REQUIREMENT: new jc("VALUE"),
        PROCESSING_REQUIREMENT: new jc("RESOURCE", "CURRENT", "TARGET"),
        PROGRESSION_PANEL_BUTTON: new jc(),
        PURCHASE_BUTTON_AVAILABLE: new jc(),
        PURCHASE_BUTTON_LOCKED: new jc(),
        PURCHASE_BUTTON_MILESTONE: new jc("MILESTONE"),
        PURCHASE_BUTTON_POINTS: new jc(),
        PURCHASE_BUTTON_UNLOCKED: new jc(),
        PURCHASE_COST: new jc("COST"),
        RADIO_MAST_REQUIREMENT: new jc("CURRENT", "TARGET"),
        REQUIREMENT: new jc(),
        REQUIREMENTS: new jc(),
        REQUIRES_ALL: new jc(),
        REQUIRES_ANY: new jc(),
        REWARD_FIELD_LABEL: new jc(),
        STRICT_OBJECT_BUILT_REQUIREMENT: new jc("NAME", "CURRENT", "TARGET"),
        TAB_TITLE: new Cc(),
        TOOLTIP_DESCRIPTION_EXPANSION_PERMITS: new jc(),
        TOOLTIP_DESCRIPTION_MONEY: new jc(),
        TOOLTIP_DESCRIPTION_POINTS: new jc(),
        TOOLTIP_DESCRIPTION_POINTS_COST: new jc(),
        TOOLTIP_DESCRIPTION_TAB: new Cc(),
        TOOLTIP_TITLE_EXPANSION_PERMITS: new jc(),
        TOOLTIP_TITLE_MONEY: new jc(),
        TOOLTIP_TITLE_POINTS: new jc(),
        TOOLTIP_TITLE_POINTS_COST: new jc(),
        TOOLTIP_TITLE_TAB: new Cc(),
        TUTORIAL_REQUIREMENT: new jc(),
        UNLOCK_NODE_BUTTON: new jc(),
        XP_REASON: new Cc(),
        ZONE_BUILT_REQUIREMENT_CELLS: new jc("ZONE", "CURRENT", "TARGET"),
        ZONE_BUILT_REQUIREMENT_CELLS_LEVEL: new jc("LEVEL", "ZONE", "CURRENT", "TARGET"),
        ZONE_BUILT_REQUIREMENT_COUNT: new jc("ZONE", "CURRENT", "TARGET"),
        ZONE_BUILT_REQUIREMENT_COUNT_LEVEL: new jc("LEVEL", "ZONE", "CURRENT", "TARGET")
      },
      Properties: {
        ADJUST_HAPPINESS_MODIFIER_EFFECT: new jc("DELTA", "TYPE", "TARGET"),
        ADJUST_HAPPINESS_MODIFIER_TARGET: new Cc(),
        ADJUST_HAPPINESS_MODIFIER_TYPE: new Cc(),
        AMBULANCE_COUNT: new jc(),
        ATTRACTION_EFFECT: new jc("VALUE"),
        ATTRACTIVENESS: new jc(),
        BATTERY_CAPACITY: new jc(),
        BATTERY_POWER_OUTPUT: new jc(),
        CARGO_CAPACITY: new jc(),
        CITY_MODIFIER: new Cc(),
        CITY_MODIFIER_EFFECT: new jc("DELTA", "TYPE"),
        COMFORT: new jc(),
        CONSTRUCTION_COST: new jc(),
        DECEASED_PROCESSING_CAPACITY: new jc(),
        DECEASED_STORAGE: new jc(),
        ELECTRICITY_CONSUMPTION: new jc(),
        EVACUATION_BUS_COUNT: new jc(),
        FIRE_ENGINE_COUNT: new jc(),
        FIRE_HELICOPTER_COUNT: new jc(),
        GARBAGE_ACCUMULATION: new jc(),
        GARBAGE_PROCESSING_CAPACITY: new jc(),
        GARBAGE_STORAGE: new jc(),
        GARBAGE_TRUCK_COUNT: new jc(),
        HEARSE_COUNT: new jc(),
        JAIL_CAPACITY: new jc(),
        LEISURE_PROVIDER_EFFECT: new jc("EFFICIENCY", "TYPE"),
        LEISURE_TYPE: new Cc(),
        LOCAL_MODIFIER: new Cc(),
        LOCAL_MODIFIER_EFFECT: new jc("DELTA", "TYPE", "RADIUS"),
        MAIL_BOX_CAPACITY: new jc(),
        MAIL_SORTING_RATE: new jc(),
        MAIL_STORAGE_CAPACITY: new jc(),
        MAINTENANCE_VEHICLES: new jc(),
        MAP_RESOURCE: new Cc(),
        MAX_UPKEEP: new jc(),
        MEDICAL_HELICOPTER_COUNT: new jc(),
        NETWORK_CAPACITY: new jc(),
        NETWORK_RANGE: new jc(),
        PATIENT_CAPACITY: new jc(),
        PATROL_CAR_COUNT: new jc(),
        POLICE_HELICOPTER_COUNT: new jc(),
        POST_TRUCK_COUNT: new jc(),
        POST_VAN_COUNT: new jc(),
        POWER_LINE_CAPACITY: new jc(),
        POWER_PLANT_OUTPUT: new jc(),
        POWER_VOLTAGE_FORMAT: new jc("VALUE", "VOLTAGE"),
        PRISON_VAN_COUNT: new jc(),
        REQUIRED_RESOURCE: new jc(),
        RESOURCE_CONSUMPTION: new jc(),
        SEWAGE_CAPACITY: new jc(),
        SEWAGE_PIPE_CAPACITY: new jc(),
        SEWAGE_PURIFICATION_RATE: new jc(),
        SHELTER_CAPACITY: new jc(),
        STUDENT_CAPACITY: new jc(),
        TRANSFORMER_CAPACITY: new jc(),
        TRANSFORMER_INPUT: new jc(),
        TRANSFORMER_OUTPUT: new jc(),
        TRANSPORT_STOP_COUNT: new Cc(),
        TRANSPORT_VEHICLE_COUNT: new jc(),
        UPKEEP: new jc(),
        VOLTAGE: new Nc(),
        WATER_CAPACITY: new jc(),
        WATER_CONSUMPTION: new jc(),
        WATER_PIPES: new jc(),
        WATER_PIPE_CAPACITY: new jc(),
        WATER_PIPE_TYPE: new Cc(),
        WATER_PURIFICATION_RATE: new jc(),
        WATER_STORAGE: new jc()
      },
      Radio: {
        ADS_BUTTON_TOOLTIP: new jc(),
        EMERGENCY_MESSAGE: new Cc(),
        FOCUS_EMERGENCY: new jc(),
        MUTE: new jc(),
        NETWORK_DESCRIPTION: new Cc(),
        NETWORK_TITLE: new Cc(),
        NEXT_BUTTON_TOOLTIP: new jc(),
        PANEL_TITLE: new jc(),
        PAUSE_BUTTON_TOOLTIP: new jc(),
        PLAY_BUTTON_TOOLTIP: new jc(),
        PREVIOUS_BUTTON_TOOLTIP: new jc(),
        PROGRAM_TITLE: new jc(),
        UNMUTE: new jc(),
        VOLUME_BUTTON_TOOLTIP: new jc()
      },
      Resources: {
        TITLE: new Cc()
      },
      RoadsInfoPanel: {
        PARKED_CARS: new jc(),
        PARKING_AVAILABILITY: new jc(),
        PARKING_INCOME: new jc(),
        TRAFFIC_FLOW: new jc()
      },
      SelectedInfoPanel: {
        ACTIVE_VEHICLES: new jc(),
        ADVISER: new jc(),
        AIR_POLLUTION: new jc(),
        ALL_IS_WELL: new jc(),
        ANIMAL_TITLE: new Cc(),
        ANIMAL_TYPE: new Cc(),
        ATTRACTIVENESS: new jc(),
        ATTRACTIVENESS_BASE: new jc(),
        ATTRACTIVENESS_FACTORS: new Cc(),
        AVERAGE_HOUSEHOLD_WEALTH: new jc(),
        BATTERY_STATE_CHARGING: new jc(),
        BATTERY_STATE_DISCHARGING: new jc(),
        BATTERY_STATE_IDLE: new jc(),
        BEGIN_EMPTYING: new jc(),
        BUILDING_FOR_RENT: new jc(),
        CARGO_TITLE: new Cc(),
        CARGO_TOOLTIP: new jc(),
        CARGO_TRANSPORT_ROUTE: new jc(),
        CARGO_TRANSPORT_VEHICLE_TITLE: new jc(),
        CITIZEN_AGE: new Cc(),
        CITIZEN_AGE_FEMALE: new Cc(),
        CITIZEN_AGE_MALE: new Cc(),
        CITIZEN_AGE_TITLE: new jc(),
        CITIZEN_CONDITION: new jc(),
        CITIZEN_CONDITION_DESCRIPTION: new Cc(),
        CITIZEN_CONDITION_TITLE: new Cc(),
        CITIZEN_CONDITION_TITLE_FEMALE: new Cc(),
        CITIZEN_CONDITION_TITLE_MALE: new Cc(),
        CITIZEN_DESTINATION: new Cc(),
        CITIZEN_EDUCATION: new Cc(),
        CITIZEN_EDUCATION_FEMALE: new Cc(),
        CITIZEN_EDUCATION_MALE: new Cc(),
        CITIZEN_EDUCATION_TITLE: new jc(),
        CITIZEN_HAPPINESS: new jc(),
        CITIZEN_HAPPINESS_DESCRIPTION: new Cc(),
        CITIZEN_HAPPINESS_TITLE: new Cc(),
        CITIZEN_HAPPINESS_TITLE_FEMALE: new Cc(),
        CITIZEN_HAPPINESS_TITLE_MALE: new Cc(),
        CITIZEN_HOUSEHOLD: new jc(),
        CITIZEN_JOB_LEVEL: new Cc(),
        CITIZEN_JOB_TITLE: new jc(),
        CITIZEN_OCCUPATION: new Cc(),
        CITIZEN_OCCUPATION_FEMALE: new Cc(),
        CITIZEN_OCCUPATION_MALE: new Cc(),
        CITIZEN_OCCUPATION_TITLE: new jc(),
        CITIZEN_RESIDENCE: new Cc(),
        CITIZEN_SCHOOL_TITLE: new Nc(),
        CITIZEN_STATE: new Cc(),
        CITIZEN_STATE_FEMALE: new Cc(),
        CITIZEN_STATE_MALE: new Cc(),
        CITIZEN_TYPE: new Cc(),
        CITIZEN_TYPE_FEMALE: new Cc(),
        CITIZEN_TYPE_MALE: new Cc(),
        CITIZEN_WEALTH: new Cc(),
        CITIZEN_WEALTH_FEMALE: new Cc(),
        CITIZEN_WEALTH_MALE: new Cc(),
        CITIZEN_WEALTH_TITLE: new jc(),
        CITIZEN_WORKPLACE: new Cc(),
        CLOSE: new jc(),
        COLOR: new jc(),
        COMPANY: new jc(),
        COMPANY_EXTRACTED: new Cc(),
        COMPANY_PRODUCES: new jc(),
        COMPANY_PROFITABILITY_TITLE: new Cc(),
        COMPANY_REQUIRES: new jc(),
        COMPANY_ROOMS: new jc(),
        COMPANY_SELLS: new jc(),
        COMPANY_STORES: new jc(),
        CONFIRM_DELETE_WARNING: new jc(),
        CREATE_DISTRICT: new jc(),
        DEACTIVATE_UPGRADE: new jc(),
        DEATHCARE_BODIES: new jc(),
        DEATHCARE_PROCESSING_SPEED: new jc(),
        DEATHCARE_TITLE: new jc(),
        DEATHCARE_VEHICLES: new Cc(),
        DEATHCARE_VEHICLE_DEAD: new jc(),
        DEATHCARE_VEHICLE_TITLE: new jc(),
        DELETE: new jc(),
        DELIVERY_VEHICLE_TITLE: new Cc(),
        DESTINATION: new jc(),
        DESTROYED: new jc(),
        DESTROYED_DESCRIPTION: new Cc(),
        DESTROYED_STATUS: new Cc(),
        DESTROYED_TREE: new jc(),
        DESTROYED_TREE_DESCRIPTION: new Cc(),
        DETAILS: new jc(),
        DEVELOPER_INFO_TITLE: new jc(),
        DISPATCHED_VEHICLES: new jc(),
        DRIVER: new jc(),
        DURATION_GREATER_YEAR: new jc(),
        EDUCATED: new jc(),
        EDUCATION: new jc(),
        EDUCATION_DROPOUT_RATE: new jc(),
        EDUCATION_GRADUATION_TIME: new jc(),
        EDUCATION_LEVELS: new Cc(),
        EDUCATION_NO_GRADUATIONS: new jc(),
        EDUCATION_STUDENTS: new jc(),
        EFFICIENCY: new jc(),
        EFFICIENCY_FACTORS: new Cc(),
        ELECTRICITY_BATTERY_CAPACITY: new jc(),
        ELECTRICITY_BATTERY_CHARGE: new jc(),
        ELECTRICITY_BATTERY_FLOW: new jc(),
        ELECTRICITY_BATTERY_STATE: new jc(),
        ELECTRICITY_POWER_PRODUCTION: new jc(),
        ELECTRICITY_POWER_USAGE: new jc(),
        ELECTRICITY_TITLE: new jc(),
        ELECTRICITY_TRANSFORMER_CAPACITY: new jc(),
        EMPLOYEES: new jc(),
        EMPLOYEE_COUNT: new jc("AMOUNT"),
        EMPTY_IN: new jc("DURATION"),
        EXPENSES: new jc(),
        EXTENSIONS: new jc(),
        FIRE_TITLE: new jc(),
        FIRE_VEHICLES: new Cc(),
        FIRE_VEHICLE_TITLE: new Cc(),
        FOCUS: new jc(),
        FOCUS_UPGRADE: new jc(),
        FOLLOW_CITIZEN: new jc(),
        FULL_IN: new jc("DURATION"),
        GARBAGE_MANAGEMENT_PROCESSING_SPEED: new jc(),
        GARBAGE_MANAGEMENT_STORAGE_LABEL: new Cc(),
        GARBAGE_MANAGEMENT_STORED_GARBAGE: new jc(),
        GARBAGE_MANAGEMENT_TITLE: new jc(),
        GARBAGE_MANAGEMENT_VEHICLES: new Cc(),
        GARBAGE_VEHICLE_TITLE: new Cc(),
        GRAVES_IN_USE: new jc(),
        GROUND_POLLUTION: new jc(),
        HEALTHCARE_PATIENTS: new jc(),
        HEALTHCARE_TITLE: new jc(),
        HEALTHCARE_VEHICLES: new Cc(),
        HEALTHCARE_VEHICLE_PATIENT: new jc(),
        HEALTHCARE_VEHICLE_TITLE: new Cc(),
        HIGHTLY_EDUCATED: new jc(),
        HOUSEHOLDS: new jc(),
        HOUSEHOLD_MEMBERS: new jc(),
        LEVEL: new jc(),
        LEVEL_MAX: new jc(),
        LEVEL_PROGRESS: new jc(),
        LINE: new jc(),
        LINES: new jc(),
        LINE_USAGE: new jc(),
        LINE_VISUALIZER_LENGTH: new jc(),
        LINE_VISUALIZER_STOPS: new jc(),
        LINE_VISUALIZER_TITLE: new jc(),
        LINE_VISUALIZER_VEHICLES: new jc(),
        LOAD_TITLE: new Cc(),
        LOCAL_SERVICES_NONE_ASSIGNED: new jc(),
        LOCAL_SERVICES_TITLE: new jc(),
        LOT_TOOL_TOOLTIP: new jc(),
        MAIL_PROCESSING_SPEED: new jc(),
        MAIL_SORTING_SPEED: new jc(),
        MAIL_STORED_MAIL: new Cc(),
        MAIL_TITLE: new jc(),
        MAIL_VEHICLES: new Cc(),
        MAINTENANCED_VEHICLES: new jc(),
        MAINTENANCE_VEHICLE_TITLE: new jc(),
        MAIN_BUILDING: new jc(),
        MAX_FOLLOWED_CITIZENS_REACHED: new jc(),
        NEXT_STOP: new jc(),
        NOISE_POLLUTION: new jc(),
        NOTIFICATIONS: new jc(),
        NO_ACTIVE_POLICIES: new jc(),
        OPEN_POSITIONS: new jc(),
        OPERATING_DISTRICTS: new jc(),
        ORIGIN: new jc(),
        OUTSIDE_CONNECTION: new jc(),
        OUT_OF_SERVICE: new jc(),
        OWNED_BY: new jc(),
        PARKING_FEE: new jc(),
        PARKING_PARKED: new jc(),
        PARKING_TITLE: new jc(),
        PARK_MAINTENANCE: new jc(),
        PARK_TITLE: new jc(),
        PASSENGERS: new Cc(),
        PASSENGERS_TITLE: new jc(),
        PASSENGERS_TOOLTIP: new jc(),
        POLICE_PRISONERS: new jc(),
        POLICE_TITLE: new jc(),
        POLICE_VEHICLES: new Cc(),
        POLICE_VEHICLE_CRIMINAL: new jc(),
        POLICE_VEHICLE_TITLE: new Cc(),
        POLICIES: new jc(),
        POLLUTION: new jc(),
        POLLUTION_LEVELS: new Nc(),
        POLLUTION_LEVELS_AIR: new jc(),
        POLLUTION_LEVELS_GROUND: new jc(),
        POLLUTION_LEVELS_NOISE: new jc(),
        POORLY_EDUCATED: new jc(),
        POST_VEHICLE_TITLE: new jc(),
        PRISON_PRISONERS: new jc(),
        PRISON_TITLE: new jc(),
        PRISON_VEHICLES: new Cc(),
        PRIVATE_VEHICLE_TITLE: new Cc(),
        PRODUCTION: new jc(),
        PUBLIC_TRANSPORT_LINE: new jc(),
        PUBLIC_TRANSPORT_VEHICLE_TITLE: new Cc(),
        REACTIVATE_UPGRADE: new jc(),
        REBUILD: new jc(),
        RELOCATE: new jc(),
        RELOCATE_UPGRADE: new jc(),
        REMOVE_OPERATING_DISTRICT: new jc(),
        REMOVE_UPGRADE: new jc(),
        RESIDENTS: new jc(),
        RESOURCE: new Cc(),
        ROAD_CONDITION: new jc(),
        ROAD_CONDITION_FORMAT: new jc("WORST", "BEST", "AVG"),
        ROAD_LENGTH: new jc(),
        ROAD_TRAFFIC_FLOW: new jc(),
        ROAD_TRAFFIC_VOLUME: new jc(),
        ROAD_UPKEEP: new jc(),
        ROUTE: new jc(),
        SCHEDULE: new jc(),
        SCHEDULE_CONTINUOUS_TOOLTIP: new Cc(),
        SCHEDULE_DAY_TOOLTIP: new Cc(),
        SCHEDULE_NIGHT_TOOLTIP: new Cc(),
        SELECT_OPERATING_DISTRICT: new jc(),
        SELECT_UPGRADE: new jc(),
        SELECT_VEHICLE: new jc(),
        SELECT_VEHICLE_SECONDARY: new Cc(),
        SEWAGE_OUTLET_USAGE: new jc(),
        SEWAGE_PROCESSING_CAPACITY: new jc(),
        SEWAGE_PURIFICATION_RATE: new jc(),
        SEWAGE_STORAGE: new jc(),
        SEWAGE_TITLE: new jc(),
        SHELTER_OCCUPANTS: new jc(),
        SHELTER_TITLE: new jc(),
        SHELTER_VEHICLES: new Cc(),
        STOP_EMPTYING: new jc(),
        SUB_BUILDINGS: new jc(),
        TICKET_PRICE: new jc(),
        TICKET_PRICE_FREE: new jc(),
        TOOLTIP: new Cc(),
        TOOLTIP_TITLE: new Cc(),
        TRAFFIC_ACCIDENT: new jc(),
        TRAFFIC_ROUTES: new Nc(),
        UNDER_CONSTRUCTION: new jc(),
        UNEDUCATED: new jc(),
        UNFOCUS: new jc(),
        UNFOCUS_UPGRADE: new jc(),
        UNFOLLOW_CITIZEN: new jc(),
        UPGRADE: new jc(),
        UPGRADES: new jc(),
        UPGRADE_ALREADY_BUILT: new jc(),
        UPGRADE_LOCKED: new jc(),
        UPGRADE_LOCKED_LABEL: new jc(),
        UPGRADE_NO_MONEY_LABEL: new jc(),
        UPGRADE_PURCHASED_LABEL: new jc(),
        UPGRADE_TYPE: new Cc(),
        UPGRADE_TYPE_LABEL: new Cc(),
        UPKEEP: new jc(),
        UPKEEPFORMAT: new jc("RESOURCE", "AMOUNT"),
        UPKEEP_MAINTENANCE: new jc("BUILDING"),
        UPKEEP_MAINTENANCE_COMBINED: new jc("BUILDING", "AMOUNT"),
        UPKEEP_MAINTENANCE_INACTIVE: new jc("BUILDING"),
        UPKEEP_MAINTENANCE_INACTIVE_COMBINED: new jc("BUILDING", "AMOUNT"),
        UPKEEP_TOTAL: new jc(),
        VEHICLES: new Cc(),
        VEHICLE_COUNT: new jc(),
        VEHICLE_STATE: new jc(),
        VEHICLE_STATES: new Cc(),
        WAGES: new jc(),
        WAITING_PASSENGERS: new jc(),
        WAREHOUSE_STORAGE: new jc(),
        WATER_OUTPUT: new jc(),
        WATER_PUMPING_CAPACITY: new jc(),
        WATER_PUMP_POLLUTION: new jc(),
        WATER_PUMP_USAGE: new jc(),
        WATER_STORAGE: new jc(),
        WATER_STORAGE_CHANGE: new jc("TIME", "CHANGE"),
        WATER_STORAGE_FULL_IN: new jc(),
        WATER_STORAGE_LASTS: new jc(),
        WATER_TITLE: new jc(),
        WELL_EDUCATED: new jc(),
        WORKPLACES: new jc(),
        WORKPLACE_COUNT: new jc("AMOUNT"),
        WORK_SHIFT: new jc()
      },
      Services: {
        DESCRIPTION: new Cc(),
        NAME: new Cc()
      },
      Statistics: {
        PANEL_TITLE: new jc(),
        STATISTIC: new Cc()
      },
      StatisticsPanel: {
        STAT_TITLE: new Cc(),
        TIME_SCALE: new Nc(),
        TIME_SCALE_NOW: new jc(),
        TIME_SCALE_TITLE: new jc()
      },
      SubServices: {
        NAME: new Cc()
      },
      ToolOptions: {
        COLOR_TITLE: new Cc(),
        COLOR_TOOLTIP: new Cc(),
        TOOLTIP: new Cc(),
        TOOLTIP_CHANGE_BRUSH: new jc(),
        TOOLTIP_DECREASE_BRUSH_HEIGHT: new jc(),
        TOOLTIP_DECREASE_BRUSH_SIZE: new jc(),
        TOOLTIP_DECREASE_BRUSH_STRENGTH: new jc(),
        TOOLTIP_DECREASE_ELEVATION: new jc(),
        TOOLTIP_DESCRIPTION: new Cc(),
        TOOLTIP_DESCRIPTION_DISTANCE: new jc(),
        TOOLTIP_ELEVATION_STEP: new jc(),
        TOOLTIP_INCREASE_BRUSH_HEIGHT: new jc(),
        TOOLTIP_INCREASE_BRUSH_SIZE: new jc(),
        TOOLTIP_INCREASE_BRUSH_STRENGTH: new jc(),
        TOOLTIP_INCREASE_ELEVATION: new jc(),
        TOOLTIP_ROTATE_BRUSH_CLOCKWISE: new jc(),
        TOOLTIP_ROTATE_BRUSH_COUNTER_CLOCKWISE: new jc(),
        TOOLTIP_SNAP_ALL: new jc(),
        TOOLTIP_TITLE: new Cc(),
        TOOLTIP_TITLE_DISTANCE: new jc()
      },
      Toolbar: {
        ASSET_ALREADY_BUILT: new jc(),
        ASSET_PACKS_PANEL_TITLE: new jc(),
        BRUSH: new jc(),
        BRUSH_ANGLE: new jc(),
        BRUSH_HEIGHT: new jc(),
        BRUSH_SIZE: new jc(),
        BRUSH_STRENGTH: new jc(),
        CALENDAR_PANEL_TOGGLE_TOOLTIP: new jc(),
        CHIRPER_PANEL_TOGGLE_TOOLTIP: new jc(),
        CITY_INFO_PANEL_TOGGLE_TOOLTIP: new jc(),
        CITY_NAME_FIELD_TOOLTIP: new jc(),
        CONTOUR_LINES_TITLE: new jc(),
        CURRENT_TREND: new jc(),
        DECREASE_PARALLEL_OFFSET: new jc(),
        ECONOMY_PANEL_TOGGLE_TOOLTIP: new jc(),
        ELEVATION_TITLE: new jc(),
        INCREASE_PARALLEL_OFFSET: new jc(),
        JOURNAL_PANEL_TOGGLE_TOOLTIP: new jc(),
        LIFEPATH_PANEL_TOGGLE_TOOLTIP: new jc(),
        MAP_TILE_PURCHASE_TOGGLE_TOOLTIP: new jc(),
        MONEY_FIELD_TOOLTIP: new jc(),
        PARALLEL_MODE_TITLE: new jc(),
        PARALLEL_OFFSET_TITLE: new jc(),
        PARALLEL_ROAD_TITLE: new jc(),
        PAUSE_BUTTON_TOOLTIP: new jc(),
        PHOTO_MODE_TOGGLE_TOOLTIP: new jc(),
        PLAY_BUTTON_TOOLTIP: new jc(),
        POPULATION_FIELD_TOOLTIP: new jc(),
        PROGRESSION_PANEL_TOGGLE_TOOLTIP: new jc(),
        SIMULATION_PAUSED: new jc(),
        SNAPPING_TITLE: new jc(),
        SPEED_BUTTON_TOOLTIP: new jc(),
        STATISTICS_PANEL_TOGGLE_TOOLTIP: new jc(),
        THEME_PANEL_TITLE: new jc(),
        TOGGLE_PARALLEL_MODE: new jc(),
        TOGGLE_UNDERGROUND_MODE: new jc(),
        TOOL_MODE_DISTANCE: new jc(),
        TOOL_MODE_TITLE: new jc(),
        TOOL_OPTIONS_PANEL_TITLE: new jc(),
        UNDERGROUND_MODE_TITLE: new jc(),
        VEGETATION_AGE_PANEL_TITLE: new jc(),
        XP_MESSAGE: new jc("XP", "REASON"),
        XP_PROGRESS: new jc("CURRENT", "NEXT")
      },
      Tools: {
        BATTERY_CHARGE: new jc(),
        BATTERY_FLOW: new jc(),
        CONFIRM_BULLDOZE_WARNING: new jc(),
        CONSTRUCTION_COST_LABEL: new jc(),
        ELECTRICITY_CONSUMPTION_LABEL: new jc(),
        ELECTRICITY_FLOW_LABEL: new jc(),
        ELECTRICITY_PRODUCTION_LABEL: new jc(),
        EXTRACTOR_CLIMATE_REQUIRED_AVAILABLE: new jc(),
        EXTRACTOR_CLIMATE_REQUIRED_UNAVAILABLE: new jc(),
        EXTRACTOR_MAP_FEATURE_REQUIRED_AVAILABLE: new jc(),
        EXTRACTOR_MAP_FEATURE_REQUIRED_MISSING: new jc(),
        EXTRACTOR_PRODUCTION_DEFICIT: new jc(),
        EXTRACTOR_PRODUCTION_SURPLUS: new jc(),
        GROUNDWATER_VOLUME: new jc(),
        GROUND_WATER_RESERVOIR_USAGE: new jc(),
        INFO: new Cc(),
        MOVING_OBJECT: new jc("OBJECT"),
        REFUND_AMOUNT_LABEL: new jc(),
        RESOURCES_LABEL: new jc(),
        SELECTING_DISTRICTS: new jc(),
        SEWAGE_CONSUMPTION_LABEL: new jc(),
        SEWAGE_FLOW_LABEL: new jc(),
        STORAGECAPACITY_LABEL: new jc(),
        TOOL_MODE: new Cc(),
        WARNING: new Cc(),
        WATER_CONSUMPTION_LABEL: new jc(),
        WATER_FLOW_LABEL: new jc(),
        WATER_OUTPUT_LABEL: new jc(),
        WATER_REFRESH_RATE_LABEL: new jc()
      },
      TourismInfoPanel: {
        ATTRACTIVENESS: new jc(),
        AVERAGE_HOTEL_PRICE: new jc(),
        TOURISM_RATE: new jc(),
        WEATHER_EFFECT: new jc()
      },
      Transport: {
        LEGEND_ACTIVE: new jc(),
        LEGEND_ACTIVITY: new jc(),
        LEGEND_CARGO: new jc(),
        LEGEND_COLOR: new jc(),
        LEGEND_DELETE: new jc(),
        LEGEND_FOCUS: new jc(),
        LEGEND_LENGTH: new jc(),
        LEGEND_NAME: new jc(),
        LEGEND_PASSENGERS: new Cc(),
        LEGEND_SHOW: new jc(),
        LEGEND_STOPS: new Cc(),
        LEGEND_USAGE: new jc(),
        LEGEND_VEHICLES: new Cc(),
        LEGEND_VISIBLE: new jc(),
        LINES: new Cc(),
        LINES_OVERVIEW_BUTTON: new jc(),
        LINES_OVERVIEW_TITLE: new jc(),
        NO_LINES: new jc(),
        NO_ROUTES: new jc(),
        ROUTES: new Cc(),
        TAB: new Cc(),
        TOOLTIP_ACTIVE: new Cc(),
        TOOLTIP_COLOR: new Cc(),
        TOOLTIP_DELETE: new Cc(),
        TOOLTIP_DETAILS: new Cc(),
        TOOLTIP_SCHEDULE: new Cc(),
        TOOLTIP_VISIBLE: new Cc()
      },
      TransportInfoPanel: {
        CARGO_LABEL: new jc(),
        CARGO_TRANSPORT_TITLE: new jc(),
        CITIZENS: new jc(),
        LINES: new jc(),
        PUBLIC_TRANSPORT_TITLE: new jc(),
        ROUTES_LABEL: new jc(),
        SUMMARY_TOOLTIP_CARGO: new Cc(),
        SUMMARY_TOOLTIP_PUBLICTRANSPORT: new Cc(),
        TOTAL: new jc(),
        TOURISTS: new jc()
      },
      Tutorials: {
        ADVISOR_TITLE: new jc(),
        BEFORE_STARTING: new jc(),
        BEFORE_STARTING_CONFIRM: new jc(),
        BEGIN_WITH_TUTORIALS: new jc(),
        BUTTON_TOOLTIP_DONE: new jc(),
        BUTTON_TOOLTIP_NEXT: new jc(),
        BUTTON_TOOLTIP_PREVIOUS: new jc(),
        DESCRIPTION: new Cc(),
        DISABLE_CONFIRMATION_TEXT: new jc(),
        DISABLE_CONFIRMATION_TEXT_GAMEPAD: new jc(),
        ENABLE_TUTORIALS_CONFIRM: new jc(),
        HINTS_TITLE: new jc(),
        INTRO: new jc(),
        INTRO_SUBTITLE: new jc(),
        INTRO_TITLE: new jc(),
        LIST_REMINDER_DESCRIPTION: new jc(),
        LIST_REMINDER_TITLE: new jc(),
        TASKS: new jc(),
        TITLE: new Cc(),
        TODO_INTRO: new jc(),
        TODO_INTRO_CONFIRM: new jc(),
        TODO_OUTRO: new jc(),
        TODO_OUTRO_CONTINUE: new jc(),
        TODO_OUTRO_GAMEPAD: new jc(),
        TODO_OUTRO_NEW_CITY: new jc(),
        TRIGGER: new Cc()
      },
      UpgradesMenu: {
        TITLE: new jc()
      },
      VirtualKeyboard: {
        TITLE: new Cc()
      },
      WaterInfoPanel: {
        SEWAGE_TRADE: new jc(),
        SEWAGE_TREATMENT: new jc(),
        STORMWATER_TREATMENT: new jc(),
        WATER_AVAILABILITY: new jc(),
        WATER_EXPORT: new jc(),
        WATER_IMPORT: new jc(),
        WATER_STORAGE: new jc(),
        WATER_TRADE: new jc()
      },
      WaterPollutionInfoPanel: {
        AVERAGE_WATER_POLLUTION: new jc()
      },
      WhatsNew: {
        BEACH_PROPERTIES_P1_DESCRIPTION: new jc(),
        BEACH_PROPERTIES_P1_HEADER: new jc(),
        BEACH_PROPERTIES_P1_TITLE: new jc(),
        BEACH_PROPERTIES_P2_DESCRIPTION: new jc(),
        BEACH_PROPERTIES_P2_HEADER: new jc(),
        BEACH_PROPERTIES_P2_TITLE: new jc(),
        BEACH_PROPERTIES_P3_DESCRIPTION: new jc(),
        BEACH_PROPERTIES_P3_HEADER: new jc(),
        BEACH_PROPERTIES_P3_TITLE: new jc(),
        WHATS_NEW: new jc()
      },
      WorkplacesInfoPanel: {
        AVAILABILITY: new jc(),
        WORKERS: new jc(),
        WORKPLACES: new jc(),
        WORKPLACE_DISTRIBUTION: new jc()
      },
      ZoningFactors: {
        NEGATIVE: new Cc(),
        PANEL_TITLE: new jc(),
        POSITIVE: new Cc()
      }
    });
    function Lc(e) {
      return 9 * e / 5 + 32;
    }
    function Ac(e) {
      return e + 273.16;
    }
    function Mc(e) {
      return 264.172 * e;
    }
    function Rc(e) {
      return e / .45359237;
    }
    function kc(e) {
      return e / 907.18474;
    }
    function Dc(e) {
      return e / .9144;
    }
    function Fc(e) {
      return e / 1.609344;
    }
    function Uc(e) {
      return e / .092903;
    }
    function Bc(e) {
      return e / 4046.873;
    }
    X.add("game-ui/common/localization/loc.generated.ts", {
      get Loc() {
        return Pc;
      },
      set Loc(e) {
        Pc = e;
      }
    });
    (function (e) {
      e.Integer = "integer";
      e.IntegerRounded = "integerRounded";
      e.IntegerPerMonth = "integerPerMonth";
      e.IntegerPerHour = "integerPerHour";
      e.FloatSingleFraction = "floatSingleFraction";
      e.FloatTwoFractions = "floatTwoFractions";
      e.FloatThreeFractions = "floatThreeFractions";
      e.Percentage = "percentage";
      e.PercentageSingleFraction = "percentageSingleFraction";
      e.Angle = "angle";
      e.Length = "length";
      e.Area = "area";
      e.Volume = "volume";
      e.VolumePerMonth = "volumePerMonth";
      e.Weight = "weight";
      e.WeightPerCell = "weightPerCell";
      e.WeightPerMonth = "weightPerMonth";
      e.Power = "power";
      e.Energy = "energy";
      e.DataRate = "dataRate";
      e.DataBytes = "dataBytes";
      e.DataMegabytes = "dataMegabytes";
      e.Money = "money";
      e.MoneyPerCell = "moneyPerCell";
      e.MoneyPerMonth = "moneyPerMonth";
      e.MoneyPerHour = "moneyPerHour";
      e.MoneyPerDistance = "moneyPerDistance";
      e.MoneyPerDistancePerMonth = "moneyPerDistancePerMonth";
      e.BodiesPerMonth = "bodiesPerMonth";
      e.XP = "xp";
      e.Temperature = "temperature";
      e.NetElevation = "netElevation";
      e.ScreenFrequency = "screenFrequency";
      e.Custom = "custom";
    })(Oc || (Oc = {}));
    X.add("game-ui/common/localization/unit.ts", {
      get Unit() {
        return Oc;
      },
      set Unit(e) {
        Oc = e;
      }
    });
    X.add("game-ui/common/localization/units-us-customary.ts", {
      get fahrenheit() {
        return Lc;
      },
      set fahrenheit(e) {
        Lc = e;
      },
      get kelvin() {
        return Ac;
      },
      set kelvin(e) {
        Ac = e;
      },
      get gallons() {
        return Mc;
      },
      set gallons(e) {
        Mc = e;
      },
      get pounds() {
        return Rc;
      },
      set pounds(e) {
        Rc = e;
      },
      get shortTons() {
        return kc;
      },
      set shortTons(e) {
        kc = e;
      },
      get yards() {
        return Dc;
      },
      set yards(e) {
        Dc = e;
      },
      get miles() {
        return Fc;
      },
      set miles(e) {
        Fc = e;
      },
      get squareFeet() {
        return Uc;
      },
      set squareFeet(e) {
        Uc = e;
      },
      get acres() {
        return Bc;
      },
      set acres(e) {
        Bc = e;
      }
    });
    var Gc = uc("LocalizedNumber", (e, {
      value: t,
      unit: n = Oc.Integer,
      signed: s = false
    }) => Wc(n)(e, t, s), (e, t) => e.value === t.value && e.unit === t.unit && e.signed === t.signed);
    var Vc = uc("LocalizedNumber", (e, {
      value: t,
      unit: n = Oc.Integer,
      signed: s = false,
      unitFormat: i,
      fractionDigits: a,
      separateThousands: o,
      maxValueWithFraction: r
    }) => Wc(n)(e, t, s, i, a, o, r), (e, t) => e.value === t.value && e.unit === t.unit && e.signed === t.signed);
    const Hc = uc("DefaultFormat", (e, t) => rc(e, t.SIGN) + rc(e, t.VALUE), () => true);
    function Kc(e, t) {
      const n = ac();
      0;
      return Y.useMemo(() => {
        const s = Wc(e);
        return e => s(n, e, t);
      }, [n, t, e]);
    }
    function Wc(e) {
      return zc[e] ?? ((t, n) => `${n} <${e}>`);
    }
    const zc = {
      [Oc.Custom]: (e, t, n, s, i, a, o) => 0 === i ? undefined !== s ? qc(e, t, s, n, a) : Yc(e, t, n, a) : undefined !== s ? Jc(e, t, s, n, i, a, true, o) : Xc(e, t, n, i, a, true, o),
      [Oc.Integer]: (e, t, n) => Yc(e, t, n, true),
      [Oc.IntegerRounded]: (e, t, n) => Math.abs(t) < 1e3 ? Yc(e, t, n, true) : Math.abs(t) < 1e6 ? Jc(e, t / 1e3, Pc.Common.VALUE_THOUSAND, n, 1) : Jc(e, t / 1e6, Pc.Common.VALUE_MILLION, n, 1),
      [Oc.IntegerPerMonth]: (e, t, n) => qc(e, t, Pc.Common.VALUE_PER_MONTH, n),
      [Oc.IntegerPerHour]: (e, t, n) => qc(e, t, Pc.Common.VALUE_PER_HOUR, n),
      [Oc.FloatSingleFraction]: (e, t, n) => Xc(e, t, n, 1),
      [Oc.FloatTwoFractions]: (e, t, n) => Xc(e, t, n, 2),
      [Oc.FloatThreeFractions]: (e, t, n) => Xc(e, t, n, 3),
      [Oc.ScreenFrequency]: (e, t, n) => Xc(e, t, n, 3, false, true, 1e3),
      [Oc.Percentage]: (e, t, n) => qc(e, t, Pc.Common.VALUE_PERCENT, n, false),
      [Oc.PercentageSingleFraction]: (e, t, n) => Jc(e, t, Pc.Common.VALUE_PERCENT, n, 1, false),
      [Oc.Length]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Math.abs(t) < 1e3 ? Jc(e, t, Pc.Common.VALUE_METER, n) : Jc(e, t / 1e3, Pc.Common.VALUE_KILOMETER, n, 1) : Math.abs(t) < 1609 ? Jc(e, Dc(t), Pc.Common.VALUE_YARD, n) : Jc(e, Fc(t / 1e3), Pc.Common.VALUE_MILE, n, 1),
      [Oc.NetElevation]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Jc(e, t, Pc.Common.VALUE_METER, n, 2) : Jc(e, 3 * t, Pc.Common.VALUE_FOOT, n, 2),
      [Oc.Area]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Math.abs(t) < 1e5 ? qc(e, t, Pc.Common.VALUE_SQUARE_METER, n) : Jc(e, t / 1e6, Pc.Common.VALUE_SQUARE_KILOMETER, n, 1) : Math.abs(t) < 1e5 ? qc(e, Uc(t), Pc.Common.VALUE_SQUARE_FOOT, n) : Jc(e, Bc(t), Pc.Common.VALUE_ACRE, n, 1),
      [Oc.Volume]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Jc(e, t, Pc.Common.VALUE_CUBIC_METER, n, 1) : qc(e, Mc(t), Pc.Common.VALUE_GALLON, n),
      [Oc.VolumePerMonth]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Jc(e, t, Pc.Common.VALUE_CUBIC_METER_PER_MONTH, n, 1) : Jc(e, Mc(t), Pc.Common.VALUE_GALLON_PER_MONTH, n, 1),
      [Oc.Weight]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Math.abs(t) < 100 ? qc(e, t, Pc.Common.VALUE_KILOGRAM, n) : Math.abs(t) < 1e7 ? Jc(e, t / 1e3, Pc.Common.VALUE_TON, n, 1) : Jc(e, t / 1e6, Pc.Common.VALUE_KILOTON, n, 1) : Math.abs(t) < 100 ? qc(e, Rc(t), Pc.Common.VALUE_POUND, n) : Math.abs(t) < 9071847.4 ? Jc(e, kc(t), Pc.Common.VALUE_SHORT_TON, n, 1) : Jc(e, kc(t) / 1e6, Pc.Common.VALUE_SHORT_KILOTON, n, 1),
      [Oc.WeightPerCell]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Jc(e, t / 1e3, Pc.Common.VALUE_TON_PER_CELL, n, 1) : Jc(e, kc(t), Pc.Common.VALUE_SHORT_TON_PER_CELL, n, 1),
      [Oc.WeightPerMonth]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Math.abs(t) < 100 ? Jc(e, t, Pc.Common.VALUE_KG_PER_MONTH, n, 1) : Jc(e, t / 1e3, Pc.Common.VALUE_TON_PER_MONTH, n, 1) : Math.abs(t) < 100 ? Jc(e, Rc(t), Pc.Common.VALUE_POUND_PER_MONTH, n, 1) : Jc(e, kc(t), Pc.Common.VALUE_SHORT_TON_PER_MONTH, n, 1),
      [Oc.Power]: (e, t, n) => Math.abs(t) < 1e4 ? Jc(e, t / 10, Pc.Common.VALUE_KILOWATT, n, 1) : Jc(e, t / 1e4, Pc.Common.VALUE_MEGAWATT, n, 2),
      [Oc.Energy]: (e, t, n) => Jc(e, t / 1e4, Pc.Common.VALUE_MEGAWATT_HOURS, n, 1),
      [Oc.DataRate]: (e, t, n) => Jc(e, t, Pc.Common.VALUE_GIGABIT_PER_SECOND, n, 1),
      [Oc.DataBytes]: (e, t, n) => nu(e, t, eu, n, 1),
      [Oc.DataMegabytes]: (e, t, n) => nu(e, 1024 * t * 1024, tu, n, 1),
      [Oc.Money]: (e, t, n) => qc(e, t, Pc.Common.VALUE_MONEY, n),
      [Oc.MoneyPerCell]: (e, t, n) => Jc(e, t, Pc.Common.VALUE_MONEY_PER_CELL, n, 1),
      [Oc.MoneyPerMonth]: (e, t, n) => qc(e, t, Pc.Common.VALUE_MONEY_PER_MONTH, n),
      [Oc.MoneyPerHour]: (e, t, n) => qc(e, t, Pc.Common.VALUE_MONEY_PER_HOUR, n),
      [Oc.MoneyPerDistance]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? qc(e, t, Pc.Common.VALUE_MONEY_PER_KILOMETER, n) : qc(e, t / 1.6, Pc.Common.VALUE_MONEY_PER_MILE, n),
      [Oc.MoneyPerDistancePerMonth]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? qc(e, t, Pc.Common.VALUE_MONEY_PER_KILOMETER_PER_MONTH, n) : qc(e, t / 1.6, Pc.Common.VALUE_MONEY_PER_MILE_PER_MONTH, n),
      [Oc.XP]: (e, t, n) => qc(e, t, Pc.Common.VALUE_XP, n),
      [Oc.Temperature]: (e, t, n) => {
        switch (e.unitSettings.temperatureUnit) {
          case $l.Celsius:
            return qc(e, t, Pc.Common.VALUE_CELSIUS, n);
          case $l.Fahrenheit:
            return qc(e, Lc(t), Pc.Common.VALUE_FAHRENHEIT, n);
          case $l.Kelvin:
            return qc(e, Ac(t), Pc.Common.VALUE_KELVIN, n);
        }
      },
      [Oc.Angle]: (e, t, n) => Jc(e, t, Pc.Common.VALUE_ANGLE, n, 1)
    };
    function Yc(e, t, n = false, s = true) {
      return qc(e, t, Hc, n, s);
    }
    const $c = /\B(?=(\d{3})+(?!\d))/g;
    function qc(e, t, n, s = false, i = true) {
      let a = Math.abs(t).toFixed(0);
      var o = su(Math.sign(t) * Number.parseInt(a), s);
      if (i) {
        const t = Pc.Common.THOUSANDS_SEPARATOR.renderString(e, {});
        a = a.replace($c, t);
      }
      return n.renderString(e, {
        SIGN: o,
        VALUE: a
      });
    }
    function Xc(e, t, n = false, s = 1, i = true, a = true, o = 100) {
      return Jc(e, t, Hc, n, s, i, a, o);
    }
    const Qc = /\.0+$|(\.\d*?[1-9])0+$/g;
    const Zc = /\B(?=(?<!\.\d*)(\d{3})+(?!\d))/g;
    function Jc(e, t, n, s = false, i = 1, a = true, o = true, r = 100) {
      let l;
      let c = Math.abs(t);
      if (c < r) {
        const e = Math.pow(10, -i);
        if (0 !== c && c < e) {
          c = e;
        }
        l = c.toFixed(i);
        if (o) {
          l = l.replace(Qc, "$1");
        }
      } else {
        l = c.toFixed(0);
      }
      const u = su(Math.sign(t) * Number.parseFloat(l), s);
      if (a) {
        const t = Pc.Common.THOUSANDS_SEPARATOR.renderString(e, {});
        l = l.replace(Zc, t);
      }
      const d = Pc.Common.DECIMAL_SEPARATOR.renderString(e, {});
      l = l.replace(".", d);
      return n.renderString(e, {
        SIGN: u,
        VALUE: l
      });
    }
    const eu = [[0, Pc.Common.VALUE_BYTE], [1, Pc.Common.VALUE_KILOBYTE], [2, Pc.Common.VALUE_MEGABYTE], [3, Pc.Common.VALUE_GIGABYTE], [4, Pc.Common.VALUE_TERABYTE]];
    const tu = [[2, Pc.Common.VALUE_MEGABYTE], [3, Pc.Common.VALUE_GIGABYTE], [4, Pc.Common.VALUE_TERABYTE]];
    function nu(e, t, n, s = false, i = 1, a = true, o = true) {
      let r = n[n.length - 1][1];
      let l = t / Math.pow(1024, n[n.length - 1][0]);
      for (let e = 0; e < n.length; ++e) {
        const s = Math.pow(1024, n[e][0]);
        if (Math.abs(t) < 512 * s) {
          r = n[e][1];
          l = t / s;
          break;
        }
      }
      return Jc(e, l, r, s, i, a, o);
    }
    function su(e, t) {
      return e < 0 ? "-" : e > 0 ? t ? "+" : "" : t ? "±" : "";
    }
    var iu = (e, t, n = Oc.Integer, s) => Wc(n)(e, t, s);
    X.add("game-ui/common/localization/localized-number.tsx", {
      get LocalizedNumber() {
        return Gc;
      },
      set LocalizedNumber(e) {
        Gc = e;
      },
      get CustomLocalizedNumber() {
        return Vc;
      },
      set CustomLocalizedNumber(e) {
        Vc = e;
      },
      get useNumberFormat() {
        return Kc;
      },
      set useNumberFormat(e) {
        Kc = e;
      },
      get formatInteger() {
        return Yc;
      },
      set formatInteger(e) {
        Yc = e;
      },
      get formatFloat() {
        return Xc;
      },
      set formatFloat(e) {
        Xc = e;
      },
      get sign() {
        return su;
      },
      set sign(e) {
        su = e;
      },
      get renderFormattedNumber() {
        return iu;
      },
      set renderFormattedNumber(e) {
        iu = e;
      }
    });
    var au = uc("LocalizedBounds", (e, {
      min: t,
      max: n,
      unit: s = Oc.Integer
    }) => t !== n ? function (e) {
      return ou[e] ?? ((t, n, s) => `${n}–${s} <${e}>`);
    }(s)(e, t, n) : Gc.renderString(e, {
      value: n,
      unit: s
    }), (e, t) => e.min === t.min && e.max === t.max && e.unit === t.unit);
    const ou = {
      [Oc.Power]: (e, t, n) => Math.abs(n) < 1e4 ? lu(e, t / 10, n / 10, Pc.Common.BOUNDS_KILOWATT, 1) : lu(e, t / 1e4, n / 1e4, Pc.Common.BOUNDS_MEGAWATT, 1),
      [Oc.PercentageSingleFraction]: (e, t, n) => lu(e, t, n, Pc.Common.BOUNDS_PERCENT, 1),
      [Oc.Temperature]: (e, t, n) => {
        switch (e.unitSettings.temperatureUnit) {
          case $l.Celsius:
            return ru(e, t, n, Pc.Common.BOUNDS_CELSIUS);
          case $l.Fahrenheit:
            return ru(e, Lc(t), Lc(n), Pc.Common.BOUNDS_FAHRENHEIT);
          case $l.Kelvin:
            return ru(e, Ac(t), Ac(n), Pc.Common.BOUNDS_KELVIN);
        }
      }
    };
    function ru(e, t, n, s, i = true) {
      return s.renderString(e, {
        MIN: Yc(e, t, false, i),
        MAX: Yc(e, n, false, i)
      });
    }
    function lu(e, t, n, s, i = 1, a = true, o = true) {
      return s.renderString(e, {
        MIN: Xc(e, t, false, i, a, o),
        MAX: Xc(e, n, false, i, a, o)
      });
    }
    X.add("game-ui/common/localization/localized-bounds.tsx", {
      get LocalizedBounds() {
        return au;
      },
      set LocalizedBounds(e) {
        au = e;
      }
    });
    var cu = uc("LocalizedFraction", (e, {
      value: t,
      total: n,
      unit: s = Oc.Integer
    }) => function (e) {
      return uu[e] ?? ((t, n, s) => `${n} / ${s} <${e}>`);
    }(s)(e, t, n), (e, t) => e.value === t.value && e.total === t.total && e.unit === t.unit);
    const uu = {
      [Oc.Volume]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? mu(e, t, n, Pc.Common.FRACTION_CUBIC_METER, 1) : mu(e, Mc(t), Mc(n), Pc.Common.FRACTION_GALLON, 1),
      [Oc.VolumePerMonth]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? mu(e, t, n, Pc.Common.FRACTION_CUBIC_METER_PER_MONTH, 1) : mu(e, Mc(t), Mc(n), Pc.Common.FRACTION_GALLON_PER_MONTH, 1),
      [Oc.Weight]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Math.abs(n) < 100 ? du(e, t, n, Pc.Common.FRACTION_KG) : mu(e, t / 1e3, n / 1e3, Pc.Common.FRACTION_TON, 2) : Math.abs(n) < 100 ? du(e, Rc(t), Rc(n), Pc.Common.FRACTION_POUND) : mu(e, kc(t), kc(n), Pc.Common.FRACTION_SHORT_TON, 2),
      [Oc.WeightPerMonth]: (e, t, n) => e.unitSettings.unitSystem === ql.Metric ? Math.abs(n) < 100 ? du(e, t, n, Pc.Common.FRACTION_KG_PER_MONTH) : mu(e, t / 1e3, n / 1e3, Pc.Common.FRACTION_TON_PER_MONTH, 2) : Math.abs(n) < 100 ? du(e, Rc(t), Rc(n), Pc.Common.FRACTION_POUND_PER_MONTH) : mu(e, kc(t), kc(n), Pc.Common.FRACTION_SHORT_TON_PER_MONTH, 2),
      [Oc.Power]: (e, t, n) => Math.abs(n) < 1e4 ? mu(e, t / 10, n / 10, Pc.Common.FRACTION_KILOWATT, 1) : mu(e, t / 1e4, n / 1e4, Pc.Common.FRACTION_MEGAWATT, 2),
      [Oc.Energy]: (e, t, n) => Math.abs(n) < 1e4 ? mu(e, t / 10, n / 10, Pc.Common.FRACTION_KILOWATT_HOURS, 1) : mu(e, t / 1e4, n / 1e4, Pc.Common.FRACTION_MEGAWATT_HOURS, 2),
      [Oc.BodiesPerMonth]: (e, t, n) => du(e, t, n, Pc.Common.FRACTION_BODIES_PER_MONTH),
      [Oc.XP]: (e, t, n) => du(e, t, n, Pc.Common.FRACTION_XP),
      [Oc.Integer]: (e, t, n) => du(e, t, n, Pc.Common.FRACTION_INTEGER),
      [Oc.IntegerPerMonth]: (e, t, n) => du(e, t, n, Pc.Common.FRACTION_INTEGER_PER_MONTH)
    };
    function du(e, t, n, s, i = true) {
      return s.renderString(e, {
        VALUE: Yc(e, t, false, i),
        TOTAL: Yc(e, n, false, i)
      });
    }
    function mu(e, t, n, s, i = 1, a = true, o = true) {
      return s.renderString(e, {
        VALUE: Xc(e, t, false, i, a, o),
        TOTAL: Xc(e, n, false, i, a, o)
      });
    }
    X.add("game-ui/common/localization/localized-fraction.tsx", {
      get LocalizedFraction() {
        return cu;
      },
      set LocalizedFraction(e) {
        cu = e;
      }
    });
    var hu = uc("Localized", (e, {
      value: t,
      transformer: n
    }) => {
      const s = gu(e, t);
      return n ? n(s) : s;
    }, (e, t) => pu(e.value, t.value) && e.transformer === t.transformer);
    function gu(e, t) {
      switch (t.__Type) {
        case hc.Bounds:
          return au.renderString(e, t);
        case hc.Fraction:
          return cu.renderString(e, t);
        case hc.Number:
          return Gc.renderString(e, t);
        case hc.String:
          return fu(e, t.id, t.value, t.args);
        default:
          return "<INVALID TYPE>";
      }
    }
    function pu(e, t) {
      if (e.__Type !== t.__Type) {
        return false;
      }
      switch (e.__Type) {
        case hc.Bounds:
          return au.propsAreEqual(e, t);
        case hc.Fraction:
          return cu.propsAreEqual(e, t);
        case hc.Number:
          return Gc.propsAreEqual(e, t);
        case hc.String:
          return function (e, t) {
            return e.id === t.id && e.value === t.value && function (e, t) {
              if (Object.is(e, t)) {
                return true;
              }
              if (null == e || null == t) {
                return e === t;
              }
              const n = Object.keys(e);
              const s = Object.keys(t);
              if (n.length !== s.length) {
                return false;
              }
              return n.every(n => Object.prototype.hasOwnProperty.call(t, n) && pu(e[n], t[n]));
            }(e.args, t.args);
          }(e, t);
        default:
          return true;
      }
    }
    function fu(e, t, n, s) {
      const i = null != t ? e.translate(t, n) ?? t : n ?? "";
      if (null != s) {
        const t = function (e, t) {
          return Object.fromEntries(Object.entries(t).map(([t, n]) => [t, gu(e, n)]));
        }(e, s);
        return vl(i, t);
      }
      return i;
    }
    function xu(e) {
      return null == e ? "" : e.replace(/\B([A-Z])/g, " $1").replace(/^([a-z])/g, (e, t) => t.toUpperCase());
    }
    function vu(e) {
      return null == e ? "" : e.replace(/\B([A-Z])/g, " $1").toUpperCase();
    }
    function _u(e) {
      return e.toFixed(0);
    }
    function bu(e, t) {
      return e.toFixed(0).padStart(t, "0").substr(0, t);
    }
    function Tu(e) {
      return null == e || 0 === e.length ? "" : 1 === e.length ? e.toUpperCase() : e.charAt(0).toUpperCase() + e.slice(1);
    }
    X.add("game-ui/common/localization/localized.tsx", {
      get Localized() {
        return hu;
      },
      set Localized(e) {
        hu = e;
      },
      get renderLocalized() {
        return gu;
      },
      set renderLocalized(e) {
        gu = e;
      },
      get renderStringElement() {
        return fu;
      },
      set renderStringElement(e) {
        fu = e;
      }
    });
    const Eu = ["{VALUE}k", "{VALUE}m", "{VALUE}b"];
    function Iu(e) {
      if (Math.abs(Math.round(e)) < 1e3) {
        return e.toFixed(0);
      }
      for (let t = 0; t < Eu.length; ++t) {
        const n = 1e3 * Math.pow(10, 3 * t);
        if (Math.round(Math.abs(e) / n) < 1e3) {
          return vl(Eu[t], {
            VALUE: (e / n).toFixed(0)
          });
        }
      }
      const t = Math.pow(10, 3 * Eu.length);
      return vl(Eu[Eu.length - 1], {
        VALUE: (e / t).toFixed(0)
      });
    }
    function yu(e) {
      0;
      return Y.useMemo(() => Iu(e), [e]);
    }
    X.add("game-ui/common/utils/format.ts", {
      get makePretty() {
        return xu;
      },
      set makePretty(e) {
        xu = e;
      },
      get makePrettyUppercase() {
        return vu;
      },
      set makePrettyUppercase(e) {
        vu = e;
      },
      get formatInteger() {
        return _u;
      },
      set formatInteger(e) {
        _u = e;
      },
      get formatFixedLengthInt() {
        return bu;
      },
      set formatFixedLengthInt(e) {
        bu = e;
      },
      get capitalize() {
        return Tu;
      },
      set capitalize(e) {
        Tu = e;
      },
      get formatLargeNumber() {
        return Iu;
      },
      set formatLargeNumber(e) {
        Iu = e;
      },
      get useFormattedLargeNumber() {
        return yu;
      },
      set useFormattedLargeNumber(e) {
        yu = e;
      }
    });
    var Su = uc("LocalizedDate", (e, {
      value: t
    }) => Cu(e, t), (e, t) => e.value.month === t.value.month && e.value.year === t.value.year);
    function ju() {
      const e = ac();
      0;
      return Y.useCallback(t => Cu(e, t), [e]);
    }
    function Cu(e, {
      year: t,
      month: n
    }) {
      return Pc.Common.MEDIUM_DATE_FORMAT.renderString(e, {
        MONTH: Pc.Common.MONTH_SHORT.renderString(e, {
          index: n
        }),
        YEAR: t.toFixed()
      });
    }
    var Nu = uc("LocalizedTime", (e, {
      value: t
    }) => Ou(e, t), (e, t) => e.value.hour === t.value.hour && e.value.minute === t.value.minute);
    function wu() {
      const e = ac();
      0;
      return Y.useCallback(t => Ou(e, t), [e]);
    }
    function Ou(e, {
      hour: t,
      minute: n
    }) {
      return e.unitSettings.timeFormat === Yl.TwentyFourHours ? Pc.Common.TIME_FORMAT.renderString(e, {
        HOUR: bu(t, 2),
        MINUTE: bu(n, 2)
      }) : Pc.Common.TIME_FORMAT_12.renderString(e, {
        HOUR: bu(t % 12 || 12, 2),
        MINUTE: bu(n, 2),
        PERIOD: t < 12 ? Pc.Common.TIME_PERIOD_AM.renderString(e, {}) : Pc.Common.TIME_PERIOD_PM.renderString(e, {})
      });
    }
    var Pu = uc("LocalizedDateTime", (e, {
      value: t
    }) => Lu(e, t), (e, t) => e.value.month === t.value.month && e.value.year === t.value.year && e.value.hour === t.value.hour && e.value.minute === t.value.minute);
    function Lu(e, t) {
      return `${Cu(e, t)} ${Ou(e, t)}`;
    }
    function Au(e, t) {
      return Pc.Common.MONTH_SHORT.renderString(e, {
        index: t
      });
    }
    var Mu = uc("LocalizedTimestamp", (e, {
      value: t
    }) => function (e, t) {
      const n = e.unitSettings.timeFormat === Yl.TwentyFourHours ? Pc.Common.TIMESTAMP_FORMAT.renderString(e, {}) : Pc.Common.TIMESTAMP_FORMAT_12.renderString(e, {});
      return n.replace(Ru, n => {
        const s = new Date(t);
        switch (n) {
          case "yyyy":
            return _u(s.getFullYear());
          case "MM":
            return bu(s.getMonth() + 1, 2);
          case "M":
            return _u(s.getMonth() + 1);
          case "dd":
            return bu(s.getDate(), 2);
          case "d":
            return _u(s.getDate());
          case "HH":
            return bu(s.getHours(), 2);
          case "H":
            return _u(s.getHours());
          case "hh":
            return bu(s.getHours() % 12 || 12, 2);
          case "h":
            return _u(s.getHours() % 12 || 12);
          case "mm":
            return bu(s.getMinutes(), 2);
          case "aa":
            return s.getHours() < 12 ? Pc.Common.TIME_PERIOD_AM.renderString(e, {}) : Pc.Common.TIME_PERIOD_PM.renderString(e, {});
          default:
            return n;
        }
      });
    }(e, t), (e, t) => e.value === t.value);
    const Ru = /(yyyy|MM|M|dd|d|HH|H|hh|h|mm|aa)/g;
    function ku(e, t) {
      return t < 12 ? Pc.Common.TIME_PERIOD_AM.renderString(e, {}) : Pc.Common.TIME_PERIOD_PM.renderString(e, {});
    }
    X.add("game-ui/common/localization/localized-date.tsx", {
      get LocalizedDate() {
        return Su;
      },
      set LocalizedDate(e) {
        Su = e;
      },
      get useDateFormat() {
        return ju;
      },
      set useDateFormat(e) {
        ju = e;
      },
      get formatDate() {
        return Cu;
      },
      set formatDate(e) {
        Cu = e;
      },
      get LocalizedTime() {
        return Nu;
      },
      set LocalizedTime(e) {
        Nu = e;
      },
      get useTimeFormat() {
        return wu;
      },
      set useTimeFormat(e) {
        wu = e;
      },
      get LocalizedDateTime() {
        return Pu;
      },
      set LocalizedDateTime(e) {
        Pu = e;
      },
      get formatDateTime() {
        return Lu;
      },
      set formatDateTime(e) {
        Lu = e;
      },
      get LocalizedTimestamp() {
        return Mu;
      },
      set LocalizedTimestamp(e) {
        Mu = e;
      }
    });
    var Du;
    var Fu = uc("LocalizedDuration", (e, {
      value: t,
      daysPerYear: n,
      maxMonths: s = n
    }) => {
      const i = Math.round(t);
      if (i >= s) {
        const s = Math.round(t / n);
        return 1 !== s ? Pc.Common.VALUE_YEARS.renderString(e, {
          VALUE: (0, z.jsx)(Gc, {
            value: s,
            unit: Oc.Integer
          })
        }) : Pc.Common.VALUE_YEAR.renderString(e, {
          VALUE: (0, z.jsx)(Gc, {
            value: s,
            unit: Oc.Integer
          })
        });
      }
      if (i > 1) {
        0;
        return Pc.Common.VALUE_MONTHS.renderString(e, {
          VALUE: z.jsx(Gc, {
            value: t,
            unit: Oc.Integer
          })
        });
      }
      if (t > 0.9791666666666666) {
        0;
        return Pc.Common.VALUE_MONTH.renderString(e, {
          VALUE: z.jsx(Gc, {
            value: t,
            unit: Oc.Integer
          })
        });
      }
      {
        const n = Math.floor(24 * t);
        const s = Math.floor(60 * (24 * t - n));
        return Pc.Common.TIME_FORMAT.renderString(e, {
          HOUR: bu(n, 2),
          MINUTE: bu(s, 2)
        });
      }
    }, (e, t) => e.value === t.value && e.daysPerYear === t.daysPerYear);
    function Uu(e) {
      return e.__Type;
    }
    function Bu(e, t) {
      return null != e && "string" == typeof e.__Type && e.__Type.match(new RegExp("^" + t + ",?"));
    }
    function Gu(e, t) {
      return {
        ...e,
        __Type: t
      };
    }
    function Vu(e) {
      return Bu(e, Du.Formatted);
    }
    X.add("game-ui/common/localization/localized-duration.tsx", {
      get LocalizedDuration() {
        return Fu;
      },
      set LocalizedDuration(e) {
        Fu = e;
      }
    });
    X.add("game-ui/common/data-binding/binding-utils.ts", {
      get getType() {
        return Uu;
      },
      set getType(e) {
        Uu = e;
      },
      get isBindingType() {
        return Bu;
      },
      set isBindingType(e) {
        Bu = e;
      },
      get typed() {
        return Gu;
      },
      set typed(e) {
        Gu = e;
      }
    });
    (function (e) {
      e.Custom = "names.CustomName";
      e.Localized = "names.LocalizedName";
      e.Formatted = "names.FormattedName";
    })(Du || (Du = {}));
    0;
    var Hu = Y.memo(function ({
      value: e
    }) {
      const t = Ku(e);
      0;
      return z.jsx(z.Fragment, {
        children: t
      });
    }, (e, t) => Kr(e, t, 3));
    function Ku(e) {
      const t = Wu();
      0;
      return Y.useMemo(() => t(e), [e, t]);
    }
    function Wu() {
      const e = ac();
      0;
      return Y.useCallback(t => {
        if (null != t) {
          if (function (e) {
            return Bu(e, Du.Custom);
          }(t)) {
            return t.name;
          }
          if (Bu(t, Du.Formatted) || function (e) {
            return Bu(e, Du.Localized);
          }(t)) {
            const n = e.translate(t.nameId);
            if (null != n) {
              if (Bu(t, Du.Formatted)) {
                const s = null != t.nameArgs ? function (e, t) {
                  return Object.entries(t).reduce((t, [n, s]) => (t[n] = e.translate(s) ?? s, t), {});
                }(e, t.nameArgs) : null;
                if (null != s) {
                  return vl(n, s);
                }
              }
              return n;
            }
            return t.nameId;
          }
        }
        return "";
      }, [e]);
    }
    function zu(e, t) {
      return Kr(e, t, 2);
    }
    X.add("game-ui/common/localization/localized-entity-name.tsx", {
      get LocalizedEntityName() {
        return Hu;
      },
      set LocalizedEntityName(e) {
        Hu = e;
      },
      get useLocalizedName() {
        return Ku;
      },
      set useLocalizedName(e) {
        Ku = e;
      },
      get useNameFormat() {
        return Wu;
      },
      set useNameFormat(e) {
        Wu = e;
      },
      get nameEquals() {
        return zu;
      },
      set nameEquals(e) {
        zu = e;
      }
    });
    var Yu = uc("LocalizedPercentage", (e, {
      value: t,
      max: n
    }) => Gc.renderString(e, {
      value: t > 0 && n > 0 ? Math.max(1, 100 * t / n) : 0,
      unit: Oc.Percentage
    }), (e, t) => e.value === t.value && e.max === t.max);
    X.add("game-ui/common/localization/localized-percentage.tsx", {
      get LocalizedPercentage() {
        return Yu;
      },
      set LocalizedPercentage(e) {
        Yu = e;
      }
    });
    X.add("game-ui/common/localization/index.ts", {});
    var $u;
    var qu;
    var Xu = n(80);
    var Qu = n.n(Xu);
    !function (e) {
      e.Always = "always";
      e.AnyChildren = "anyChildren";
      e.FocusedChild = "focusedChild";
    }($u || ($u = {}));
    (function (e) {
      e.Center = "center";
      e.Bounds = "bounds";
    })(qu || (qu = {}));
    0;
    var Zu = Y.createContext({
      isChildFocused: () => true,
      registerChild: () => {},
      unregisterChild: () => {},
      attachCallback: e => e(true, null),
      detachCallback: e => e(false, null),
      attachTo: () => {},
      detach: () => {},
      getBounds: () => null,
      getFocusedBounds: () => null,
      debugTrace: () => "<-- ROOT",
      deepDebugTrace: () => "ROOT"
    });
    var Ju = {
      isChildFocused: () => false,
      registerChild: () => {},
      unregisterChild: () => {},
      attachCallback: () => {},
      detachCallback: () => {},
      attachTo: () => {},
      detach: () => {},
      getBounds: () => null,
      getFocusedBounds: () => null,
      debugTrace: () => "<-- DISABLED",
      deepDebugTrace: () => "ROOT"
    };
    X.add("game-ui/common/focus/controller/focus-controller.ts", {
      get FocusActivation() {
        return $u;
      },
      set FocusActivation(e) {
        $u = e;
      },
      get FocusLimits() {
        return qu;
      },
      set FocusLimits(e) {
        qu = e;
      },
      get FocusContext() {
        return Zu;
      },
      set FocusContext(e) {
        Zu = e;
      },
      get disabledFocusController() {
        return Ju;
      },
      set disabledFocusController(e) {
        Ju = e;
      }
    });
    var ed;
    var td = {
      entries: () => [],
      has: () => false,
      get: () => {},
      register: () => {},
      unregister: () => {},
      attachCallback: () => {},
      detachCallback: () => {}
    };
    function nd() {
      return Y.createContext(td);
    }
    function sd(e, t) {
      0;
      const n = Y.useContext(e);
      0;
      const s = Y.useRef(null);
      0;
      return Y.useCallback(e => {
        if (e !== s.current) {
          if (null != s.current) {
            n.unregister(t, s.current);
          }
          if (null != e) {
            n.register(t, e);
          }
          s.current = e;
        }
      }, [t, n]);
    }
    function id(e, t) {
      0;
      const n = Y.useContext(e);
      0;
      const [s, i] = Y.useState(n.get(t));
      0;
      Y.useEffect(() => {
        i(n.get(t));
        const e = {
          onRegister: (e, n) => {
            if (e === t) {
              i(n);
            }
          },
          onUnregister: (e, n) => {
            if (e === t) {
              i(undefined);
            }
          }
        };
        n.attachCallback(e);
        return () => n.detachCallback(e);
      }, [t, n]);
      return s;
    }
    class ad {
      _elements = new Map();
      _callbacks = [];
      has(e) {
        return this._elements.has(e);
      }
      get(e) {
        return this._elements.get(e);
      }
      entries() {
        return this._elements;
      }
      register(e, t) {
        if (this._elements.has(e)) {
          console.warn(`Duplicate element '${String(e)}' registered!`);
        } else {
          this._elements.set(e, t);
          for (const n of this._callbacks) n.onRegister(e, t);
        }
      }
      unregister(e, t) {
        if (this._elements.get(e) === t) {
          this._elements.delete(e);
          for (const n of this._callbacks) n.onUnregister(e, t);
        }
      }
      attachCallback(e) {
        if (this._callbacks.includes(e)) {
          console.warn("Element registry callback already attached!");
        } else {
          this._callbacks.push(e);
        }
      }
      detachCallback(e) {
        const t = this._callbacks.indexOf(e);
        if (-1 !== t) {
          this._callbacks.splice(t, 1);
        } else {
          console.warn("Element registry callback not attached!");
        }
      }
    }
    X.add("game-ui/common/utils/element-registry.tsx", {
      get defaultRegistry() {
        return td;
      },
      set defaultRegistry(e) {
        td = e;
      },
      get createElementRegistryContext() {
        return nd;
      },
      set createElementRegistryContext(e) {
        nd = e;
      },
      get useRegisteredElementRef() {
        return sd;
      },
      set useRegisteredElementRef(e) {
        sd = e;
      },
      get useRegisteredElement() {
        return id;
      },
      set useRegisteredElement(e) {
        id = e;
      }
    });
    (function (e) {
      e[e.in = 0] = "in";
      e[e.enter = 1] = "enter";
      e[e.exit = 2] = "exit";
    })(ed || (ed = {}));
    var od = {
      state: ed.in,
      onMount: () => {},
      onUnmount: () => {}
    };
    var rd = Y.createContext(od);
    var ld = Y.createContext(false);
    X.add("game-ui/common/animations/transition-context.tsx", {
      get TransitionState() {
        return ed;
      },
      set TransitionState(e) {
        ed = e;
      },
      get defaultContext() {
        return od;
      },
      set defaultContext(e) {
        od = e;
      },
      get TransitionContext() {
        return rd;
      },
      set TransitionContext(e) {
        rd = e;
      },
      get ExitTransitionActive() {
        return ld;
      },
      set ExitTransitionActive(e) {
        ld = e;
      }
    });
    var cd = ({
      skipInitial: e = true,
      children: t
    }) => {
      0;
      const n = Y.useRef(e);
      0;
      Y.useEffect(() => () => {
        n.current = false;
      }, [t]);
      0;
      const s = Y.useMemo(() => {
        const e = new ad();
        e.attachCallback({
          onRegister: () => {},
          onUnregister: e => {
            o(t => {
              const n = dd(t, e);
              return Kr(n, t) ? t : n;
            });
          }
        });
        return e;
      }, []);
      0;
      const i = Y.useRef(null);
      0;
      const [a, o] = Y.useState(() => function (e) {
        const t = new Array(Y.Children.count(e));
        Y.Children.forEach(e, (e, n) => {
          t[n] = e;
        });
        return t;
      }(t));
      0;
      Y.useEffect(() => {
        const e = function (e) {
          const t = new Set();
          Y.Children.forEach(e, e => {
            const n = null !== e && "object" == typeof e ? e.key : null;
            if (null != n) {
              t.add(n);
            }
          });
          return t;
        }(t);
        if (null != i.current) {
          o(n => function (e, t, n) {
            const s = new Map();
            let i = [];
            Y.Children.forEach(e, e => {
              const t = null !== e && "object" == typeof e ? e.key : null;
              if (null != t) {
                if (n.has(t)) {
                  s.set(t, i);
                  i = [];
                } else {
                  i.push(e);
                }
              }
            });
            const a = [];
            Y.Children.forEach(t, e => {
              const t = null !== e && "object" == typeof e ? e.key : null;
              if (null != t) {
                const e = s.get(t);
                if (e) {
                  a.push(...e);
                }
              }
              a.push(e);
            });
            a.push(...i);
            return a;
          }(n, t, e));
          for (const t of i.current.values()) if (!e.has(t)) {
            const e = s.get(t);
            if (e) {
              e(ed.exit);
            } else {
              o(e => dd(e, t));
            }
          }
          for (const t of e.values()) if (!i.current.has(t)) {
            const e = s.get(t);
            if (e) {
              e(ed.enter);
            }
          }
        }
        i.current = e;
      }, [t, s]);
      0;
      const r = Y.useContext(ld);
      0;
      return z.jsx(rd.Provider, {
        value: od,
        children: a.map(e => {
          const t = null !== e && "object" == typeof e ? e.key : null;
          if (null != t) {
            const a = !i.current || i.current.has(t);
            0;
            return z.jsx(ud, {
              transitionKey: t,
              exiting: r || !a,
              transitionRegistry: s,
              skipInitialRef: n,
              children: e
            }, t);
          }
          return e;
        })
      });
    };
    const ud = ({
      transitionKey: e,
      transitionRegistry: t,
      skipInitialRef: n,
      exiting: s,
      children: i
    }) => {
      0;
      const [a, o] = Y.useState(null == e || n.current ? ed.in : ed.enter);
      0;
      const r = Y.useCallback(() => {
        if (null != e) {
          t.register(e, o);
        }
      }, [e, t]);
      0;
      const l = Y.useCallback(() => {
        if (null != e) {
          t.unregister(e, o);
        }
      }, [e, t]);
      0;
      const c = Y.useMemo(() => ({
        state: a,
        onMount: r,
        onUnmount: l
      }), [r, l, a]);
      0;
      const u = Y.useContext(Zu);
      0;
      0;
      0;
      return z.jsx(rd.Provider, {
        value: c,
        children: z.jsx(ld.Provider, {
          value: s,
          children: z.jsx(Zu.Provider, {
            value: s ? Ju : u,
            children: i
          })
        })
      });
    };
    function dd(e, t) {
      return e.filter(e => (null !== e && "object" == typeof e ? e.key : null) !== t);
    }
    function md(e) {
      return null !== e && "object" == typeof e ? e.key : null;
    }
    function hd(e, t) {
      0;
      return Y.useCallback(n => {
        gd(e, n);
        gd(t, n);
      }, [e, t]);
    }
    function gd(e, t) {
      if ("function" == typeof e) {
        e(t);
      } else if (null != e) {
        e.current = t;
      }
    }
    X.add("game-ui/common/animations/transition-group-coordinator.tsx", {
      get TransitionGroupCoordinator() {
        return cd;
      },
      set TransitionGroupCoordinator(e) {
        cd = e;
      }
    });
    X.add("game-ui/common/hooks/use-merged-ref.tsx", {
      get useMergedRef() {
        return hd;
      },
      set useMergedRef(e) {
        hd = e;
      },
      get setRef() {
        return gd;
      },
      set setRef(e) {
        gd = e;
      }
    });
    0;
    var pd = Y.createContext(null);
    var fd = ({
      children: e
    }) => {
      0;
      const t = Y.useContext(pd);
      let n = false;
      const s = hd(e.ref, t?.ref);
      const i = t?.ref ? (n = true) && s : e.ref;
      let a;
      if (t?.style || e.props.style) {
        if (t?.style && e.props.style) {
          n = true;
          a = {
            ...t?.style,
            ...e.props.style
          };
        } else if (e.props.style) {
          a = e.props.style;
        } else {
          n = true;
          a = t?.style;
        }
      }
      const o = t?.className ? (n = true) && Qu()(e.props.className, t?.className) : e.props.className;
      const r = n ? {
        ...e.props,
        className: o,
        style: a,
        ref: i
      } : undefined;
      0;
      return z.jsx(pd.Provider, {
        value: null,
        children: n ? (0, Y.cloneElement)(e, r) : e
      });
    };
    0;
    0;
    var xd = Y.memo(Y.forwardRef(function ({
      style: e,
      className: t,
      children: n
    }, s) {
      0;
      const i = Y.useContext(pd);
      0;
      const a = Y.useMemo(() => {
        let a;
        if (i?.style || e) {
          a = i?.style && e ? {
            ...i?.style,
            ...e
          } : e || i?.style;
        }
        return {
          ref: e => {
            gd(n.ref, e);
            gd(s, e);
            if (null != i?.ref) {
              i.ref(e);
            }
          },
          style: a,
          className: Qu()(i?.className, t)
        };
      }, [n.ref, t, i, s, e]);
      0;
      return z.jsx(pd.Provider, {
        value: a,
        children: "object" != typeof n || "function" != typeof n.type ? (0, z.jsx)(fd, {
          children: n
        }) : n
      });
    }), ({
      style: e,
      ...t
    }, {
      style: n,
      ...s
    }) => Kr(t, s) && Kr(e, n));
    X.add("game-ui/common/dom-node/dom-node.tsx", {
      get DOMNodeContext() {
        return pd;
      },
      set DOMNodeContext(e) {
        pd = e;
      },
      get DOMNodeProvider() {
        return fd;
      },
      set DOMNodeProvider(e) {
        fd = e;
      },
      get DOMNodeModifier() {
        return xd;
      },
      set DOMNodeModifier(e) {
        xd = e;
      }
    });
    var vd = -2147483648;
    var _d = 2147483647;
    var bd = 4294967295;
    var Td = -3402823e32;
    var Ed = 3402823e32;
    var Id = {
      x: Td,
      y: Td
    };
    var yd = {
      x: Ed,
      y: Ed
    };
    var Sd = {
      x: Td,
      y: Td,
      z: Td
    };
    var jd = {
      x: Ed,
      y: Ed,
      z: Ed
    };
    var Cd = {
      x: Td,
      y: Td,
      z: Td,
      w: Td
    };
    var Nd = {
      x: Ed,
      y: Ed,
      z: Ed,
      w: Ed
    };
    function wd(e, t, n) {
      return e <= t ? t : e >= n ? n : e;
    }
    function Od(e, t, n) {
      return e + (t - e) * n;
    }
    function Pd(e, t) {
      const n = Math.pow(10, t);
      return Math.round((e + Number.EPSILON) * n) / n;
    }
    var Ld = {
      x: 0,
      y: 0
    };
    var Ad = {
      x: -1,
      y: 0
    };
    var Md = {
      x: 0,
      y: 1
    };
    var Rd = {
      x: 1,
      y: 0
    };
    var kd = {
      x: 0,
      y: -1
    };
    function Dd(e, t) {
      return e.x === t.x && e.y === t.y;
    }
    function Fd(e, t, n) {
      return {
        x: wd(e.x, t, n),
        y: wd(e.y, t, n)
      };
    }
    function Ud(e) {
      const t = Hd(e);
      return 0 === t ? Ld : {
        x: e.x / t,
        y: e.y / t
      };
    }
    function Bd(e, t) {
      return {
        x: e.x - t.x,
        y: e.y - t.y
      };
    }
    function Gd(e, t, n) {
      return {
        x: e.x + (t.x - e.x) * n,
        y: e.y + (t.y - e.y) * n
      };
    }
    function Vd(e) {
      return {
        x: Math.trunc(e.x),
        y: Math.trunc(e.y)
      };
    }
    function Hd(e) {
      return Math.sqrt(Kd(e));
    }
    function Kd(e) {
      return e.x * e.x + e.y * e.y;
    }
    function Wd({
      x: e,
      y: t
    }, n) {
      return `(${Pd(e, n)}, ${Pd(t, n)})`;
    }
    function zd({
      clientX: e,
      clientY: t
    }) {
      return {
        x: e,
        y: t
      };
    }
    var Yd = {
      x: 0,
      y: 0,
      z: 0
    };
    function $d(e, t) {
      return e.x === t.x && e.y === t.y && e.z === t.z;
    }
    function qd({
      x: e,
      y: t,
      z: n
    }, s) {
      return `(${Pd(e, s)}, ${Pd(t, s)}, ${Pd(n, s)})`;
    }
    var Xd = {
      x: 0,
      y: 0,
      z: 0,
      w: 0
    };
    function Qd(e, t) {
      return e.x === t.x && e.y === t.y && e.z === t.z && e.w === t.w;
    }
    function Zd({
      x: e,
      y: t,
      z: n,
      w: s
    }, i) {
      return `(${Pd(e, i)}, ${Pd(t, i)}, ${Pd(n, i)}, ${Pd(s, i)})`;
    }
    var Jd = {
      min: 0,
      max: 0
    };
    function em(e, t) {
      return e.min === t.min && e.max === t.max;
    }
    var tm = {
      min: Ld,
      max: Ld
    };
    function nm(e, t) {
      return Dd(e.min, t.min) && Dd(e.max, t.max);
    }
    var sm = {
      min: Yd,
      max: Yd
    };
    function im(e, t) {
      return $d(e.min, t.min) && $d(e.max, t.max);
    }
    var am = [0, 0];
    function om(e, t) {
      return e[0] === t[0] && e[1] === t[1];
    }
    function rm(e) {
      return BigInt(e[1]) << 32n | BigInt(e[0]);
    }
    function lm(e) {
      return [Number(0xffffffffn & e), Number(e >> 32n & 0xffffffffn)];
    }
    function cm(e) {
      return {
        x: e.offsetWidth,
        y: e.offsetHeight
      };
    }
    function um(e) {
      return {
        x: e.clientWidth,
        y: e.clientHeight
      };
    }
    function dm(e) {
      return {
        x: e.scrollWidth,
        y: e.scrollHeight
      };
    }
    function mm(e, t = cm, n = true) {
      0;
      const [s, i] = Y.useState(null);
      0;
      const a = Y.useCallback(() => {
        if (null != e.current) {
          const n = t(e.current);
          i(e => null != e && Dd(n, e) ? e : n);
        } else {
          i(null);
        }
      }, [e, t]);
      pm(a, n);
      0;
      Y.useEffect(() => {
        if (n) {
          let e = window.requestAnimationFrame(() => {
            e = window.requestAnimationFrame(() => {
              e = 0;
              a();
            });
            a();
          });
          return () => window.cancelAnimationFrame(e);
        }
        i(null);
      }, [n, a]);
      return s;
    }
    function hm(e, t = true) {
      0;
      const [n, s] = Y.useState(null);
      0;
      const i = Y.useCallback(() => {
        if (null != e.current) {
          const t = e.current.getBoundingClientRect();
          s(e => {
            return null != e && (n = t, s = e, Math.abs(n.top - s.top) < .1 && Math.abs(n.bottom - s.bottom) < .1 && Math.abs(n.left - s.left) < .1 && Math.abs(n.right - s.right) < .1 && Math.abs(n.width - s.width) < .1 && Math.abs(n.height - s.height) < .1) ? e : t;
            var n;
            var s;
          });
        } else {
          s(null);
        }
      }, [e]);
      pm(i, t);
      0;
      Y.useEffect(() => {
        if (t) {
          let e = window.requestAnimationFrame(() => {
            e = window.requestAnimationFrame(() => {
              e = 0;
              i();
            });
            i();
          });
          return () => {
            window.cancelAnimationFrame(e);
          };
        }
        s(null);
      }, [t, i]);
      return n;
    }
    X.add("game-ui/common/math.ts", {
      get INT_MIN_VALUE() {
        return vd;
      },
      set INT_MIN_VALUE(e) {
        vd = e;
      },
      get INT_MAX_VALUE() {
        return _d;
      },
      set INT_MAX_VALUE(e) {
        _d = e;
      },
      get UINT_MAX_VALUE() {
        return bd;
      },
      set UINT_MAX_VALUE(e) {
        bd = e;
      },
      get FLOAT_MIN_VALUE() {
        return Td;
      },
      set FLOAT_MIN_VALUE(e) {
        Td = e;
      },
      get FLOAT_MAX_VALUE() {
        return Ed;
      },
      set FLOAT_MAX_VALUE(e) {
        Ed = e;
      },
      get FLOAT2_MIN_VALUE() {
        return Id;
      },
      set FLOAT2_MIN_VALUE(e) {
        Id = e;
      },
      get FLOAT2_MAX_VALUE() {
        return yd;
      },
      set FLOAT2_MAX_VALUE(e) {
        yd = e;
      },
      get FLOAT3_MIN_VALUE() {
        return Sd;
      },
      set FLOAT3_MIN_VALUE(e) {
        Sd = e;
      },
      get FLOAT3_MAX_VALUE() {
        return jd;
      },
      set FLOAT3_MAX_VALUE(e) {
        jd = e;
      },
      get FLOAT4_MIN_VALUE() {
        return Cd;
      },
      set FLOAT4_MIN_VALUE(e) {
        Cd = e;
      },
      get FLOAT4_MAX_VALUE() {
        return Nd;
      },
      set FLOAT4_MAX_VALUE(e) {
        Nd = e;
      },
      get clamp() {
        return wd;
      },
      set clamp(e) {
        wd = e;
      },
      get lerp() {
        return Od;
      },
      set lerp(e) {
        Od = e;
      },
      get roundDecimal() {
        return Pd;
      },
      set roundDecimal(e) {
        Pd = e;
      },
      get zero2() {
        return Ld;
      },
      set zero2(e) {
        Ld = e;
      },
      get left() {
        return Ad;
      },
      set left(e) {
        Ad = e;
      },
      get up() {
        return Md;
      },
      set up(e) {
        Md = e;
      },
      get right() {
        return Rd;
      },
      set right(e) {
        Rd = e;
      },
      get down() {
        return kd;
      },
      set down(e) {
        kd = e;
      },
      get number2Equals() {
        return Dd;
      },
      set number2Equals(e) {
        Dd = e;
      },
      get clamp2() {
        return Fd;
      },
      set clamp2(e) {
        Fd = e;
      },
      get normalize2() {
        return Ud;
      },
      set normalize2(e) {
        Ud = e;
      },
      get difference2() {
        return Bd;
      },
      set difference2(e) {
        Bd = e;
      },
      get lerp2() {
        return Gd;
      },
      set lerp2(e) {
        Gd = e;
      },
      get trunc2() {
        return Vd;
      },
      set trunc2(e) {
        Vd = e;
      },
      get distance2() {
        return Hd;
      },
      set distance2(e) {
        Hd = e;
      },
      get distanceSqr2() {
        return Kd;
      },
      set distanceSqr2(e) {
        Kd = e;
      },
      get formatNumber2() {
        return Wd;
      },
      set formatNumber2(e) {
        Wd = e;
      },
      get fromMouseEvent() {
        return zd;
      },
      set fromMouseEvent(e) {
        zd = e;
      },
      get zero3() {
        return Yd;
      },
      set zero3(e) {
        Yd = e;
      },
      get number3Equals() {
        return $d;
      },
      set number3Equals(e) {
        $d = e;
      },
      get formatNumber3() {
        return qd;
      },
      set formatNumber3(e) {
        qd = e;
      },
      get zero4() {
        return Xd;
      },
      set zero4(e) {
        Xd = e;
      },
      get number4Equals() {
        return Qd;
      },
      set number4Equals(e) {
        Qd = e;
      },
      get formatNumber4() {
        return Zd;
      },
      set formatNumber4(e) {
        Zd = e;
      },
      get zeroBounds1() {
        return Jd;
      },
      set zeroBounds1(e) {
        Jd = e;
      },
      get bounds1Equals() {
        return em;
      },
      set bounds1Equals(e) {
        em = e;
      },
      get zeroBounds2() {
        return tm;
      },
      set zeroBounds2(e) {
        tm = e;
      },
      get bounds2Equals() {
        return nm;
      },
      set bounds2Equals(e) {
        nm = e;
      },
      get zeroBounds3() {
        return sm;
      },
      set zeroBounds3(e) {
        sm = e;
      },
      get bounds3Equals() {
        return im;
      },
      set bounds3Equals(e) {
        im = e;
      },
      get zeroLong() {
        return am;
      },
      set zeroLong(e) {
        am = e;
      },
      get longEquals() {
        return om;
      },
      set longEquals(e) {
        om = e;
      },
      get longToBigInt() {
        return rm;
      },
      set longToBigInt(e) {
        rm = e;
      },
      get bigIntToLong() {
        return lm;
      },
      set bigIntToLong(e) {
        lm = e;
      }
    });
    const gm = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    function pm(e, t = true) {
      0;
      const n = Y.useRef(false);
      0;
      Y.useEffect(() => {
        if (t) {
          n.current = true;
          let t = 0;
          const s = () => {
            if (n.current && 0 === t) {
              t = window.requestAnimationFrame(() => {
                t = window.requestAnimationFrame(() => {
                  t = 0;
                  e();
                });
              });
            }
          };
          const i = new MutationObserver(s);
          i.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
          const a = e => {
            if (!(e.target instanceof HTMLElement)) {
              return;
            }
            const t = window.getComputedStyle(e.target).transitionProperty;
            if (gm.some(e => t.includes(e))) {
              s();
            }
          };
          document.addEventListener("transitionend", a);
          const o = () => {
            if (n.current) {
              window.cancelAnimationFrame(t);
              t = window.requestAnimationFrame(() => {
                t = window.requestAnimationFrame(() => {
                  t = 0;
                  e();
                });
              });
            }
          };
          window.addEventListener("resize", o);
          return () => {
            n.current = false;
            i.disconnect();
            document.removeEventListener("transitionend", a);
            window.removeEventListener("resize", o);
            window.cancelAnimationFrame(t);
          };
        }
      }, [t, e]);
    }
    X.add("game-ui/common/hooks/resize-events.tsx", {
      get OFFSET_SIZE() {
        return cm;
      },
      set OFFSET_SIZE(e) {
        cm = e;
      },
      get CLIENT_SIZE() {
        return um;
      },
      set CLIENT_SIZE(e) {
        um = e;
      },
      get SCROLL_SIZE() {
        return dm;
      },
      set SCROLL_SIZE(e) {
        dm = e;
      },
      get useElementSize() {
        return mm;
      },
      set useElementSize(e) {
        mm = e;
      },
      get useElementRect() {
        return hm;
      },
      set useElementRect(e) {
        hm = e;
      },
      get useResizeEventListener() {
        return pm;
      },
      set useResizeEventListener(e) {
        pm = e;
      }
    });
    var xm;
    var vm;
    !function (e) {
      e[e.keyboardAndMouse = 0] = "keyboardAndMouse";
      e[e.gamepad = 1] = "gamepad";
    }(xm || (xm = {}));
    (function (e) {
      e[e.Xbox = 0] = "Xbox";
      e[e.PS = 1] = "PS";
    })(vm || (vm = {}));
    var _m = $r("input", "mouseOverUI", true);
    var bm = $r("input", "hideCursor", true);
    var Tm = $r("input", "controlScheme", xm.gamepad);
    var Em = $r("input", "scrollSensitivity", 1);
    var Im = $r("input", "gamepadPointerPosition");
    var ym = $r("input", "cameraMoving", false);
    var Sm = Zr("input", "toolActionPerformed");
    var jm = Zr("input", "cameraBarrier");
    var Cm = Zr("input", "toolBarrier");
    var Nm = $r("input", "activeHints");
    var wm = Qr("input", "hints");
    var Om = el("input", "onInputHintPerformed");
    var Pm = Xr("input", "tutorialHints");
    $r("input", "gamepadType");
    var Lm = el("input", "setActiveTextFieldRect");
    var Am = $r("input", "useTextFieldInputBarrier");
    function Mm(e) {
      tl("input", "onGamepadPointerEvent", e);
    }
    function Rm() {
      return sl(Tm) === xm.keyboardAndMouse;
    }
    function km() {
      return sl(Tm) === xm.gamepad;
    }
    let Dm;
    X.add("game-ui/common/data-binding/input-bindings.ts", {
      get ControlScheme() {
        return xm;
      },
      set ControlScheme(e) {
        xm = e;
      },
      get GamepadType() {
        return vm;
      },
      set GamepadType(e) {
        vm = e;
      },
      get mouseOverUI() {
        return mouseOverUI;
      },
      set mouseOverUI(e) {
        mouseOverUI = e;
      },
      get hideCursor() {
        return hideCursor;
      },
      set hideCursor(e) {
        hideCursor = e;
      },
      get controlScheme() {
        return controlScheme;
      },
      set controlScheme(e) {
        controlScheme = e;
      },
      get scrollSensitivity() {
        return scrollSensitivity;
      },
      set scrollSensitivity(e) {
        scrollSensitivity = e;
      },
      get gamepadPointerPosition() {
        return gamepadPointerPosition;
      },
      set gamepadPointerPosition(e) {
        gamepadPointerPosition = e;
      },
      get cameraMoving() {
        return cameraMoving;
      },
      set cameraMoving(e) {
        cameraMoving = e;
      },
      get toolActionPerformed() {
        return toolActionPerformed;
      },
      set toolActionPerformed(e) {
        toolActionPerformed = e;
      },
      get cameraBarrier() {
        return cameraBarrier;
      },
      set cameraBarrier(e) {
        cameraBarrier = e;
      },
      get toolBarrier() {
        return toolBarrier;
      },
      set toolBarrier(e) {
        toolBarrier = e;
      },
      get activeInputHints() {
        return activeInputHints;
      },
      set activeInputHints(e) {
        activeInputHints = e;
      },
      get inputHints() {
        return inputHints;
      },
      set inputHints(e) {
        inputHints = e;
      },
      get onInputHintPerformed() {
        return Om;
      },
      set onInputHintPerformed(e) {
        Om = e;
      },
      get tutorialHints() {
        return tutorialHints;
      },
      set tutorialHints(e) {
        tutorialHints = e;
      },
      get gamepadType() {
        return gamepadType;
      },
      set gamepadType(e) {
        gamepadType = e;
      },
      get setActiveTextFieldRect() {
        return Lm;
      },
      set setActiveTextFieldRect(e) {
        Lm = e;
      },
      get requireTextFieldInputBarrier() {
        return requireTextFieldInputBarrier;
      },
      set requireTextFieldInputBarrier(e) {
        requireTextFieldInputBarrier = e;
      },
      get onGamepadPointerEvent() {
        return Mm;
      },
      set onGamepadPointerEvent(e) {
        Mm = e;
      }
    });
    X.add("game-ui/common/hooks/use-control-scheme.tsx", {
      get useKeyboardAndMouseActive() {
        return Rm;
      },
      set useKeyboardAndMouseActive(e) {
        Rm = e;
      },
      get useGamepadActive() {
        return km;
      },
      set useGamepadActive(e) {
        km = e;
      }
    });
    const Fm = function (e = true) {
      0;
      const [t, n] = Y.useState(() => (Dm || (Dm = {
        x: window.innerWidth,
        y: window.innerHeight
      }), Dm));
      0;
      Y.useEffect(() => {
        if (e) {
          const e = () => {
            const e = {
              x: window.innerWidth,
              y: window.innerHeight
            };
            Dm = e;
            n(t => Dd(e, t) ? t : e);
          };
          e();
          window.addEventListener("resize", e);
          return () => window.removeEventListener("resize", e);
        }
      }, [e, n]);
      return t;
    };
    X.add("game-ui/common/hooks/use-window-size.ts", {});
    var Um = () => window.innerHeight > .5625 * window.innerWidth ? window.innerWidth / 1920 : window.innerHeight / 1080;
    function Bm() {
      const e = Fm();
      return sl(Al) ? e.y > .5625 * e.x ? e.x / 1920 : e.y / 1080 : 1;
    }
    function Gm(e) {
      const t = Bm();
      if (e.endsWith("rem")) {
        return parseFloat(e.substring(0, e.length - 3)) * t;
      }
      if (e.endsWith("px")) {
        return parseFloat(e.substring(0, e.length - 2));
      }
      throw Error(`Unsupport length syntax: ${e}`);
    }
    const Vm = Bm;
    X.add("game-ui/common/hooks/use-rem.ts", {
      get getRem() {
        return Um;
      },
      set getRem(e) {
        Um = e;
      },
      get useRem() {
        return Bm;
      },
      set useRem(e) {
        Bm = e;
      },
      get useCssLength() {
        return Gm;
      },
      set useCssLength(e) {
        Gm = e;
      }
    });
    0;
    var Hm = Y.createContext(document.body);
    var Km = ({
      children: e
    }) => {
      0;
      const t = Y.useContext(Hm);
      0;
      const [n, s] = Y.useState(null);
      0;
      0;
      return z.jsx(Hm.Provider, {
        value: n ?? t,
        children: z.jsx(xd, {
          ref: s,
          children: e
        })
      });
    };
    const Wm = ({
      children: e,
      container: t
    }) => {
      const n = zm();
      return Z.createPortal(e, t ?? n);
    };
    function zm() {
      0;
      return Y.useContext(Hm);
    }
    X.add("game-ui/common/portal/portal.tsx", {
      get PortalContainerProvider() {
        return Km;
      },
      set PortalContainerProvider(e) {
        Km = e;
      },
      get Portal() {
        return Wm;
      },
      set Portal(e) {
        Wm = e;
      },
      get usePortalContainer() {
        return zm;
      },
      set usePortalContainer(e) {
        zm = e;
      }
    });
    function Ym(e, t = 300, n = 0) {
      0;
      const [s, i] = Y.useState();
      0;
      const a = Y.useRef(-1);
      0;
      const o = Y.useRef(n);
      0;
      Y.useEffect(() => (-1 !== a.current && clearTimeout(a.current), s !== e && (t && o.current <= 0 ? a.current = setTimeout(() => {
        i(e);
        a.current = -1;
      }, t) : (i(e), o.current--)), () => {
        clearTimeout(a.current);
      }), [s, e, t]);
      return s;
    }
    X.add("game-ui/common/utils/debounce.ts", {
      get useDebouncedValue() {
        return Ym;
      },
      set useDebouncedValue(e) {
        Ym = e;
      }
    });
    class $m {
      _callback = null;
      complete() {
        this._callback = null;
      }
      cancel() {
        if (this._callback) {
          this._callback();
          this._callback = null;
        }
      }
      onCancel(e) {
        if (this._callback) {
          this._callback();
        }
        this._callback = e;
      }
    }
    function qm() {
      0;
      const e = Y.useMemo(() => new $m(), []);
      0;
      Y.useEffect(() => () => e.cancel(), [e]);
      return e;
    }
    X.add("game-ui/common/utils/cancel-token.ts", {
      get useCancelToken() {
        return qm;
      },
      set useCancelToken(e) {
        qm = e;
      }
    });
    const Xm = /,\s?/;
    const Qm = /,(?![^(]*\))\s?/;
    function Zm(e) {
      if (!(e instanceof Element)) {
        return 0;
      }
      const t = window.getComputedStyle(e);
      const n = t.transitionDuration.split(Xm);
      const s = t.transitionDelay.split(Xm);
      if (n.length <= 1 && s.length <= 1) {
        return ih(1 === n.length ? n[0] : n.length > 0 ? n[t] : undefined) + ih(1 === s.length ? s[0] : s.length > 0 ? s[t] : undefined);
      }
      let i = 0;
      const a = Math.max(n.length, s.length);
      for (let e = 0; e < a; e++) {
        const t = ih(1 === n.length ? n[0] : n.length > e ? n[t] : undefined);
        const a = ih(1 === s.length ? s[0] : s.length > e ? s[t] : undefined);
        i = Math.max(i, t + a);
      }
      return i;
    }
    function Jm(e, t) {
      if (!(e instanceof Element)) {
        return null;
      }
      const n = window.getComputedStyle(e);
      const s = n.transitionProperty.split(Xm);
      const i = n.transitionDuration.split(Xm);
      const a = n.transitionDelay.split(Xm);
      const o = n.transitionTimingFunction.split(Qm);
      const r = s.indexOf(t);
      if (-1 === r) {
        return null;
      }
      const l = ah(1 === o.length ? o[0] : o.length > r ? o[t] : undefined);
      return null == l ? null : {
        duration: ih(1 === i.length ? i[0] : i.length > r ? i[t] : undefined),
        delay: ih(1 === a.length ? a[0] : a.length > r ? a[t] : undefined),
        timingFunction: l
      };
    }
    const eh = {};
    function th(e, t, n) {
      if (!(e instanceof Element)) {
        return eh;
      }
      const s = window.getComputedStyle(e);
      const i = s.transitionProperty.split(Xm);
      const a = s.transitionDuration.split(Xm);
      const o = s.transitionDelay.split(Xm);
      const r = s.transitionTimingFunction.split(/,(?![^(]*\))\s?/);
      const l = i.indexOf(t);
      return -1 === l ? eh : {
        transitionProperty: s.transitionProperty,
        transitionDuration: i.map((e, t) => t === l ? n.duration + "ms" : (1 === a.length ? a[0] : a.length > t ? a[t] : undefined) ?? "0ms").join(", "),
        transitionDelay: i.map((e, t) => t === l ? n.delay + "ms" : (1 === o.length ? o[0] : o.length > t ? o[t] : undefined) ?? "0ms").join(", "),
        transitionTimingFunction: i.map((e, t) => t === l ? rh(n.timingFunction) : (1 === r.length ? r[0] : r.length > t ? r[t] : undefined) ?? "ease").join(", ")
      };
    }
    function nh(e, t) {
      if (t < e.delay) {
        return {
          ...e,
          delay: e.delay - t
        };
      }
      if (e.duration > 0 || t < e.delay + e.duration) {
        const n = (t - e.delay) / e.duration;
        return {
          delay: 0,
          duration: (1 - n) * e.duration,
          timingFunction: oh(e.timingFunction, n)
        };
      }
      return {
        ...e,
        duration: 0,
        delay: 0
      };
    }
    function sh(e, t) {
      return 1 === e.length ? e[0] : e.length > t ? e[t] : undefined;
    }
    function ih(e) {
      if (null == e) {
        return 0;
      }
      if (e.endsWith("ms")) {
        const t = parseFloat(e.substr(0, e.length - 2));
        return isNaN(t) ? 0 : t;
      }
      if (e.endsWith("s")) {
        const t = 1e3 * parseFloat(e.substr(0, e.length - 1));
        return isNaN(t) ? 0 : t;
      }
      {
        const t = parseFloat(e);
        return isNaN(t) ? 0 : t;
      }
    }
    function ah(e) {
      if (null == e) {
        return null;
      }
      if ("linear" === e) {
        return [0, 0, 1, 1];
      }
      if ("ease" === e) {
        return [.25, .1, .25, 1];
      }
      if ("ease-in" === e) {
        return [.42, 0, 1, 1];
      }
      if ("ease-out" === e) {
        return [0, 0, .58, 1];
      }
      if ("ease-in-out" === e) {
        return [.42, 0, .58, 1];
      }
      const t = e.match(/^cubic-bezier\((-?[0-9]*\.?[0-9]*),\s?(-?[0-9]*\.?[0-9]*),\s?(-?[0-9]*\.?[0-9]*),\s?(-?[0-9]*\.?[0-9]*)\)$/);
      return null != t ? [parseFloat(t[1]), parseFloat(t[2]), parseFloat(t[3]), parseFloat(t[4])] : null;
    }
    function oh([e, t, n, s], i) {
      const a = {
        x: n,
        y: s
      };
      const o = Gd({
        x: e,
        y: t
      }, a, i);
      const r = Gd(a, {
        x: 1,
        y: 1
      }, i);
      const l = Gd(o, r, i);
      return [l.x, l.y, r.x, r.y];
    }
    function rh([e, t, n, s]) {
      return `cubic-bezier(${e}, ${t}, ${n}, ${s})`;
    }
    function lh(e, t) {
      return new Promise((n, s) => {
        const i = window.setTimeout(() => {
          t.complete();
          n(true);
        }, e);
        t.onCancel(() => {
          window.clearTimeout(i);
          n(false);
        });
      });
    }
    function ch(e) {
      return new Promise((t, n) => {
        const s = window.requestAnimationFrame(n => {
          e.complete();
          t(true);
        });
        e.onCancel(() => {
          window.cancelAnimationFrame(s);
          t(false);
        });
      });
    }
    X.add("game-ui/common/utils/css-transitions.ts", {
      get getCssTransitionTime() {
        return Zm;
      },
      set getCssTransitionTime(e) {
        Zm = e;
      },
      get getCssTransition() {
        return Jm;
      },
      set getCssTransition(e) {
        Jm = e;
      },
      get getModifiedTransitionStyles() {
        return th;
      },
      set getModifiedTransitionStyles(e) {
        th = e;
      },
      get splitCssTransition() {
        return nh;
      },
      set splitCssTransition(e) {
        nh = e;
      },
      get parseBezier() {
        return ah;
      },
      set parseBezier(e) {
        ah = e;
      },
      get splitBezier() {
        return oh;
      },
      set splitBezier(e) {
        oh = e;
      },
      get formatBezier() {
        return rh;
      },
      set formatBezier(e) {
        rh = e;
      }
    });
    X.add("game-ui/common/utils/promise.ts", {
      get delay() {
        return lh;
      },
      set delay(e) {
        lh = e;
      },
      get nextFrame() {
        return ch;
      },
      set nextFrame(e) {
        ch = e;
      }
    });
    var uh = {};
    var dh = ({
      styles: e,
      enterDuration: t,
      exitDuration: n,
      children: s
    }) => {
      const i = e ?? uh;
      0;
      const {
        state: a,
        onMount: o,
        onUnmount: r
      } = Y.useContext(rd);
      0;
      const l = Y.useRef(null);
      const c = hd(s.ref, l);
      0;
      const u = Y.useRef(false);
      0;
      const [d, m] = Y.useState(function (e, t) {
        switch (e) {
          case ed.enter:
            return t.enter;
          case ed.exit:
            return t.exit;
          default:
            return null;
        }
      }(a, i));
      0;
      const h = Y.useCallback(e => {
        if (u.current) {
          m(e);
        }
      }, []);
      0;
      const g = Y.useRef(d);
      g.current = d;
      0;
      Y.useEffect(() => (u.current || (u.current = true, o()), () => {
        if (u.current) {
          u.current = false;
          r();
        }
      }), [o, r]);
      0;
      Y.useEffect(() => {
        const e = new $m();
        (async () => {
          if (a === ed.enter) {
            h(i.enter);
            if (!(await ch(e))) {
              return;
            }
            if (!(await ch(e))) {
              return;
            }
            h(i.enterActive);
            if (!(await ch(e))) {
              return;
            }
            const n = t ?? Zm(l.current);
            if (!(await lh(n, e))) {
              return;
            }
            h(null);
          } else if (a === ed.exit) {
            if (null == g.current) {
              h(i.exit);
              if (!(await ch(e))) {
                return;
              }
              if (!(await ch(e))) {
                return;
              }
            }
            h(e => e === i.exit ? i.exitActive : null);
            if (!(await ch(e))) {
              return;
            }
            const t = n ?? Zm(l.current);
            if (!(await lh(t, e))) {
              return;
            }
            if (u.current) {
              u.current = false;
              r();
            }
          }
        })();
        return () => {
          e.cancel();
          h(null);
          if (u.current) {
            u.current = false;
            r();
          }
        };
      }, [t, n, r, a, i.enter, i.enterActive, i.exit, i.exitActive, h]);
      0;
      return z.jsx(rd.Provider, {
        value: od,
        children: Y.cloneElement(s, {
          ...s.props,
          ref: c,
          className: Qu()(s.props.className, i.base, d)
        })
      });
    };
    X.add("game-ui/common/animations/class-name-transition.tsx", {
      get emptyStyles() {
        return uh;
      },
      set emptyStyles(e) {
        uh = e;
      },
      get ClassNameTransition() {
        return dh;
      },
      set ClassNameTransition(e) {
        dh = e;
      }
    });
    let mh = {
      balloon: "balloon_H23",
      up: "up_ehW",
      start: "start_wu1",
      down: "down_ztr",
      center: "center_hug",
      end: "end_EKq",
      left: "left_LHd",
      right: "right_JdH",
      bounds: "bounds__AO",
      container: "container_jfe",
      arrow: "arrow_Xfn",
      content: "content_JQV"
    };
    X.add("game-ui/common/balloon/balloon.module.scss", {
      get classes() {
        return mh;
      },
      set classes(e) {
        Object.assign(mh, e);
      }
    });
    let gh = {
      balloon: "balloon_DNs balloon_H23",
      base: "base_uUu",
      enter: "enter_ZTs",
      "enter-active": "enter-active_bJR",
      enterActive: "enter-active_bJR",
      "exit-active": "exit-active_AqC",
      exitActive: "exit-active_AqC",
      container: "container_sGN container_jfe",
      arrow: "arrow_tFt arrow_Xfn",
      content: "content_HM0 content_JQV"
    };
    X.add("game-ui/common/balloon/themes/default-balloon.module.scss", {
      get classes() {
        return gh;
      },
      set classes(e) {
        Object.assign(gh, e);
      }
    });
    0;
    var fh = Y.forwardRef(function ({
      direction: e,
      alignment: t,
      theme: n = gh,
      className: s,
      style: i,
      children: a
    }, o) {
      0;
      const r = Y.useMemo(() => ({
        ...mh,
        ...n
      }), [n]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dh, {
        styles: r,
        children: z.jsx("div", {
          ref: o,
          style: i,
          className: Qu()(r.balloon, null != e && r[e], null != t && r[t], s),
          children: z.jsxs("div", {
            className: r.bounds,
            children: [z.jsx("div", {
              className: r.container,
              children: z.jsx("div", {
                className: r.arrow
              })
            }), z.jsx("div", {
              className: r.content,
              children: a
            })]
          })
        })
      });
    });
    X.add("game-ui/common/balloon/balloon.tsx", {
      get Balloon() {
        return fh;
      },
      set Balloon(e) {
        fh = e;
      }
    });
    let xh = {
      "anchored-balloon": "anchored-balloon_AYp",
      anchoredBalloon: "anchored-balloon_AYp",
      hidden: "hidden_W0n",
      up: "up_el0",
      down: "down_Xl7",
      left: "left_SI8",
      right: "right_RQp"
    };
    X.add("game-ui/common/balloon/anchored-balloon.module.scss", {
      get classes() {
        return xh;
      },
      set classes(e) {
        Object.assign(xh, e);
      }
    });
    0;
    var _h = Y.memo(function ({
      visible: e,
      direction: t = "up",
      alignment: n = "center",
      theme: s,
      content: i,
      balloonKey: a = "anchored-balloon",
      className: o,
      children: r,
      anchorElRef: l
    }) {
      const c = km();
      const u = Ym(e);
      const d = Vm();
      0;
      const m = Y.useRef(null);
      0;
      const h = Y.useRef(null);
      const g = Fm(u);
      const p = hm(l || m, u);
      const f = mm(h, cm, u);
      0;
      const x = Y.useMemo(() => {
        let e = 0;
        if (c) {
          e = 56 * d;
        }
        return u && p && f ? function (e, t, n, s, i, a) {
          let o = s;
          let r = i;
          let l = "up" === o ? {
            x: "start" === r ? (e.left + e.right) / 2 - t.x : "end" === r ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
            y: e.top - t.y
          } : "down" === o ? {
            x: "start" === r ? (e.left + e.right) / 2 - t.x : "end" === r ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
            y: e.bottom
          } : "left" === o ? {
            x: e.left - t.x,
            y: "start" === r ? (e.top + e.bottom) / 2 - t.y : "end" === r ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
          } : "right" === o ? {
            x: e.right,
            y: "start" === r ? (e.top + e.bottom) / 2 - t.y : "end" === r ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
          } : Ld;
          let c = l.y < 0;
          let u = l.y + t.y > n.y;
          let d = l.x < 0;
          let m = l.x + t.x > n.x;
          if (!(c || u || d || m)) {
            return {
              direction: o,
              alignment: r,
              style: yh(l, o, a)
            };
          }
          r = "left" === o || "right" === o ? bh(r, c, u) : bh(r, d, m);
          if ("up" === o) {
            if (c) {
              o = "down";
            }
          } else if ("down" === o) {
            if (u) {
              o = "up";
            }
          } else if ("left" === o) {
            if (d) {
              o = "right";
            }
          } else if ("right" === o && m) {
            o = "left";
          }
          l = "up" === o ? {
            x: "start" === r ? (e.left + e.right) / 2 - t.x : "end" === r ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
            y: e.top - t.y
          } : "down" === o ? {
            x: "start" === r ? (e.left + e.right) / 2 - t.x : "end" === r ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
            y: e.bottom
          } : "left" === o ? {
            x: e.left - t.x,
            y: "start" === r ? (e.top + e.bottom) / 2 - t.y : "end" === r ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
          } : "right" === o ? {
            x: e.right,
            y: "start" === r ? (e.top + e.bottom) / 2 - t.y : "end" === r ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
          } : Ld;
          c = l.y < 0;
          u = l.y + t.y > n.y;
          d = l.x < 0;
          m = l.x + t.x > n.x;
          if (!(c || u || d || m)) {
            return {
              direction: o,
              alignment: r,
              style: yh(l, o, a)
            };
          }
          r = "left" === o || "right" === o ? bh(r, c, u) : bh(r, d, m);
          l = "up" === o ? {
            x: "start" === r ? (e.left + e.right) / 2 - t.x : "end" === r ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
            y: e.top - t.y
          } : "down" === o ? {
            x: "start" === r ? (e.left + e.right) / 2 - t.x : "end" === r ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
            y: e.bottom
          } : "left" === o ? {
            x: e.left - t.x,
            y: "start" === r ? (e.top + e.bottom) / 2 - t.y : "end" === r ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
          } : "right" === o ? {
            x: e.right,
            y: "start" === r ? (e.top + e.bottom) / 2 - t.y : "end" === r ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
          } : Ld;
          return {
            direction: o,
            alignment: r,
            style: yh(l, o, a)
          };
        }(p, f, g, t, n, e) : null;
      }, [c, u, p, f, g, t, n, d]);
      const v = false !== i?.props?.children;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [l ? r : (0, z.jsx)(xd, {
          ref: m,
          children: r
        }), z.jsx(cd, {
          children: u && v && (0, z.jsx)(Wm, {
            children: (0, z.jsx)(fh, {
              ref: h,
              direction: x?.direction,
              alignment: x?.alignment,
              theme: s,
              className: Qu()(o, xh.anchoredBalloon, null == x && xh.hidden, null != x && xh[x.direction]),
              style: x?.style,
              children: i
            }, a)
          }, "balloon")
        })]
      });
    });
    function bh(e, t, n) {
      if (t) {
        if ("start" === e) {
          return "center";
        }
        if ("center" === e) {
          return "end";
        }
      } else if (n) {
        if ("center" === e) {
          return "start";
        }
        if ("end" === e) {
          return "center";
        }
      }
      return e;
    }
    function Th(e, t, n, s) {
      return "up" === n ? {
        x: "start" === s ? (e.left + e.right) / 2 - t.x : "end" === s ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
        y: e.top - t.y
      } : "down" === n ? {
        x: "start" === s ? (e.left + e.right) / 2 - t.x : "end" === s ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2,
        y: e.bottom
      } : "left" === n ? {
        x: e.left - t.x,
        y: "start" === s ? (e.top + e.bottom) / 2 - t.y : "end" === s ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
      } : "right" === n ? {
        x: e.right,
        y: "start" === s ? (e.top + e.bottom) / 2 - t.y : "end" === s ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2
      } : Ld;
    }
    function Eh(e, t, n) {
      return "start" === n ? (e.left + e.right) / 2 - t.x : "end" === n ? (e.left + e.right) / 2 : (e.left + e.right - t.x) / 2;
    }
    function Ih(e, t, n) {
      return "start" === n ? (e.top + e.bottom) / 2 - t.y : "end" === n ? (e.top + e.bottom) / 2 : (e.top + e.bottom - t.y) / 2;
    }
    function yh(e, t, n) {
      let s = 0;
      if (["left", "right"].includes(t) && e.y < n) {
        s = -1 * (e.y - n);
      }
      return {
        left: `${e.x.toFixed(0)}px`,
        top: `${e.y.toFixed(0)}px`,
        "--posX": `${e.x.toFixed(0)}px`,
        "--posY": `${e.y.toFixed(0)}px`,
        "--offsetY": s ? `${s}px` : "0px"
      };
    }
    X.add("game-ui/common/balloon/anchored-balloon.tsx", {
      get AnchoredBalloon() {
        return _h;
      },
      set AnchoredBalloon(e) {
        _h = e;
      }
    });
    class Sh {
      constructor(e = true) {
        this.propagateCurrent = e;
        this._parentController = null;
        this._enabled = false;
        this._focusKey = null;
        this._lastFocused = false;
        this.callbacks = [];
        this.isChildFocused = e => this.focused && this.isChildFocusedImpl(e);
        this.attachCallback = e => {
          if (this.callbacks.includes(e)) {
            console.error(`${this.constructor.name}: Focus callback already attached to controller!\n${this.debugTrace()}`);
          } else {
            this.callbacks.push(e);
            if (this._lastFocused) {
              e(true, this.propagateCurrent ? this : null);
            }
          }
        };
        this.detachCallback = e => {
          const t = this.callbacks.indexOf(e);
          if (-1 !== t) {
            this.callbacks.splice(t, 1);
            if (this._lastFocused) {
              e(false, this.propagateCurrent ? this : null);
            }
          } else {
            console.error(`${this.constructor.name}: Focus callback not attached to controller!\n${this.debugTrace()}`);
          }
        };
        this.updateChildren = e => {
          if (this._lastFocused) {
            for (const t of this.callbacks) t(true, e);
          }
        };
        this.onFocusUpdate = (e, t) => {
          const n = e && this.focused;
          if (n !== this._lastFocused) {
            this._lastFocused = n;
            for (const e of this.callbacks) e(this._lastFocused, this.propagateCurrent ? t : null);
            if (n) {
              this.onFocusEnterImpl(t);
            }
          }
        };
      }
      get focused() {
        return this._enabled && null != this._parentController && null != this._focusKey && this._parentController.isChildFocused(this._focusKey);
      }
      attachTo(e) {
        if (null == this._parentController) {
          this._parentController = e;
          this._tryAttach();
        } else {
          console.error(`${this.constructor.name}: The controller has already been attached to a parent!\n${this.debugTrace()}`);
        }
      }
      detach() {
        if (null != this._parentController) {
          this._tryDetach();
          this._parentController = null;
        } else {
          console.error(`${this.constructor.name}: The controller is not attached to parent!\n${this.debugTrace()}`);
        }
      }
      get enabled() {
        return this._enabled;
      }
      set enabled(e) {
        if (e !== this._enabled) {
          this._tryDetach();
          this._enabled = e;
          this._tryAttach();
        }
      }
      get focusKey() {
        return this._focusKey;
      }
      set focusKey(e) {
        if (e !== this._focusKey) {
          this._tryDetach();
          this._focusKey = e;
          this._tryAttach();
        }
      }
      onFocusEnterImpl(e) {}
      _tryAttach() {
        if (this._enabled && null != this._parentController && null != this._focusKey) {
          this._parentController.registerChild(this._focusKey, this);
          this._parentController.attachCallback(this.onFocusUpdate);
        }
      }
      _tryDetach() {
        if (this._enabled && null != this._parentController && null != this._focusKey) {
          this._parentController.detachCallback(this.onFocusUpdate);
          this._parentController.unregisterChild(this._focusKey);
        }
      }
      debugTrace() {
        let e = `<-- ${this.debugName}`;
        if (null != this._parentController) {
          e += "\n";
          e += this._parentController.debugTrace();
        }
        return e;
      }
      deepDebugTrace() {
        let e = `--\x3e ${this.debugName}`;
        if (null != this.debugFocusedChild) {
          e += "\n";
          e += this.debugFocusedChild.deepDebugTrace();
        }
        return e;
      }
      get debugName() {
        return this._focusKey?.toString() ?? "<no-key>";
      }
    }
    function jh(e, t = true, n = true) {
      0;
      const s = Y.useMemo(() => new Ch(), []);
      s.debugName = e;
      s.childFocused = n;
      s.enabled = t;
      return s;
    }
    X.add("game-ui/common/focus/controller/focus-controller-base.ts", {});
    class Ch extends Sh {
      childElement = null;
      _childFocused = false;
      get enabled() {
        return super.enabled;
      }
      set enabled(e) {
        super.enabled = e;
      }
      get childFocused() {
        return this._childFocused;
      }
      set childFocused(e) {
        if (e !== this._childFocused) {
          this._childFocused = e;
          this.updateChildren(this);
        }
      }
      _debugName = "PassThroughFocusController";
      get debugName() {
        return this._debugName;
      }
      set debugName(e) {
        this._debugName = e;
      }
      isChildFocusedImpl = e => this._childFocused && e === this.focusKey;
      registerChild = (e, t) => {
        if (null == this.focusKey) {
          this.childElement = t;
          this.focusKey = e;
        } else {
          console.error(`Cannot register second focus key '${e}'! PassThroughFocusControllers can only host a single child.\nRegistered key: ${this.focusKey}\n${this.debugTrace()}`);
        }
      };
      unregisterChild = e => {
        if (this.focusKey === e) {
          this.focusKey = null;
          this.childElement = null;
        } else {
          console.error(`Attempted to unregister mismatching focus key '${e}' from a PassThroughFocusController!\nRegistered key: ${this.focusKey}\n${this.debugTrace()})`);
        }
      };
      getBounds = () => this.childElement?.getBounds() ?? null;
      getFocusedBounds() {
        return this.childElement?.getFocusedBounds() ?? null;
      }
      get debugFocusedChild() {
        return this.childElement;
      }
    }
    function Nh(e) {
      0;
      const [t, n] = Y.useState(false);
      0;
      Y.useEffect(() => (e.attachCallback(n), () => e.detachCallback(n)), [e]);
      return t;
    }
    function wh(e) {
      0;
      const t = Y.useRef(false);
      0;
      Y.useEffect(() => {
        const n = e => {
          t.current = e;
        };
        e.attachCallback(n);
        return () => e.detachCallback(n);
      }, [e]);
      return t;
    }
    function Oh(e, t) {
      0;
      Y.useEffect(() => {
        if (null != t) {
          e.attachCallback(t);
          return () => e.detachCallback(t);
        }
      }, [t, e]);
    }
    X.add("game-ui/common/focus/controller/pass-through-focus-controller.tsx", {
      get usePassThroughFocusController() {
        return jh;
      },
      set usePassThroughFocusController(e) {
        jh = e;
      }
    });
    X.add("game-ui/common/focus/focus-hooks.tsx", {
      get useFocused() {
        return Nh;
      },
      set useFocused(e) {
        Nh = e;
      },
      get useFocusedRef() {
        return wh;
      },
      set useFocusedRef(e) {
        wh = e;
      },
      get useFocusCallback() {
        return Oh;
      },
      set useFocusCallback(e) {
        Oh = e;
      }
    });
    var Ph = ({
      controller: e,
      children: t
    }) => {
      0;
      const n = Y.useContext(Zu);
      0;
      Y.useEffect(() => {
        e.attachTo(n);
      }, [e, n]);
      0;
      Y.useLayoutEffect(() => () => e.detach(), [e, n]);
      0;
      return z.jsx(Zu.Provider, {
        value: e,
        children: t
      });
    };
    X.add("game-ui/common/focus/focus-node.tsx", {
      get FocusNode() {
        return Ph;
      },
      set FocusNode(e) {
        Ph = e;
      }
    });
    var Lh = ({
      disabled: e,
      children: t,
      onFocusChange: n
    }) => {
      const s = jh("FocusBoundary", !e);
      Oh(s, n);
      0;
      return z.jsx(Ph, {
        controller: s,
        children: t
      });
    };
    X.add("game-ui/common/focus/focus-boundary.tsx", {
      get FocusBoundary() {
        return Lh;
      },
      set FocusBoundary(e) {
        Lh = e;
      }
    });
    var Mh = $r("tutorials", "tutorialsEnabled");
    var Rh = $r("tutorials", "introActive");
    var kh = $r("tutorials", "activeList");
    var Dh = $r("tutorials", "next");
    var Fh = $r("tutorials", "pending");
    var Uh = $r("tutorials", "categories");
    var Bh = Xr("tutorials", "groups");
    var Gh = qr(false);
    var Vh = e => {
      Gh.update(e);
    };
    var Hh = Xr("tutorials", "tutorials");
    var Kh = $r("tutorials", "activeTutorial");
    var Wh = $r("tutorials", "activeTutorialPhase");
    var zh = $r("tutorials", "listIntroActive");
    var Yh = $r("tutorials", "listOutroActive");
    var $h = el("tutorials", "activateTutorial");
    var qh = el("tutorials", "activateTutorialPhase");
    var Xh = el("tutorials", "forceTutorial");
    var Qh = e => Vh(undefined !== e ? e : !Gh.value);
    var Zh = Jr("tutorials", "completeActiveTutorialPhase");
    var Jh = Jr("tutorials", "completeActiveTutorial");
    var eg = el("tutorials", "completeIntro");
    var tg = Jr("tutorials", "completeListIntro");
    var ng = Jr("tutorials", "completeListOutro");
    var sg = el("tutorials", "setTutorialTagActive");
    var ig = el("tutorials", "activateTutorialTrigger");
    var ag = (e, t = true) => {
      0;
      Y.useEffect(() => {
        if (e && t) {
          sg(e, true);
          return () => {
            sg(e, false);
          };
        }
      }, [t, e]);
    };
    var og = (e, t = true) => {
      0;
      Y.useEffect(() => {
        if (e && t) {
          ig(e);
        }
      }, [e, t]);
    };
    function rg(e, t = true) {
      0;
      Y.useEffect(() => {
        if (e && t) {
          ig(e);
          sg(e, true);
          return () => {
            sg(e, false);
          };
        }
      }, [t, e]);
    }
    var lg;
    var cg;
    var ug;
    var dg = qr(false);
    function mg(e) {
      dg.update("boolean" == typeof e ? e : !dg.value);
    }
    !function (e) {
      e[e.Tutorial = 0] = "Tutorial";
      e[e.Group = 1] = "Group";
    }(lg || (lg = {}));
    (function (e) {
      e[e.KeyboardAndMouse = 1] = "KeyboardAndMouse";
      e[e.Gamepad = 2] = "Gamepad";
      e[e.All = 3] = "All";
    })(cg || (cg = {}));
    (function (e) {
      e[e.Balloon = 0] = "Balloon";
      e[e.Card = 1] = "Card";
      e[e.CenterCard = 2] = "CenterCard";
    })(ug || (ug = {}));
    X.add("game-ui/game/data-binding/tutorial-bindings.ts", {
      get tutorialsEnabled() {
        return tutorialsEnabled;
      },
      set tutorialsEnabled(e) {
        tutorialsEnabled = e;
      },
      get tutorialIntroActive() {
        return tutorialIntroActive;
      },
      set tutorialIntroActive(e) {
        tutorialIntroActive = e;
      },
      get activeTutorialList() {
        return activeTutorialList;
      },
      set activeTutorialList(e) {
        activeTutorialList = e;
      },
      get nextTutorial() {
        return nextTutorial;
      },
      set nextTutorial(e) {
        nextTutorial = e;
      },
      get tutorialPending() {
        return tutorialPending;
      },
      set tutorialPending(e) {
        tutorialPending = e;
      },
      get tutorialCategories() {
        return tutorialCategories;
      },
      set tutorialCategories(e) {
        tutorialCategories = e;
      },
      get tutorialGroups() {
        return tutorialGroups;
      },
      set tutorialGroups(e) {
        tutorialGroups = e;
      },
      get tutorialListFocused() {
        return tutorialListFocused;
      },
      set tutorialListFocused(e) {
        tutorialListFocused = e;
      },
      get setTutorialListFocused() {
        return Vh;
      },
      set setTutorialListFocused(e) {
        Vh = e;
      },
      get tutorials() {
        return tutorials;
      },
      set tutorials(e) {
        tutorials = e;
      },
      get activeTutorial() {
        return activeTutorial;
      },
      set activeTutorial(e) {
        activeTutorial = e;
      },
      get activeTutorialPhase() {
        return activeTutorialPhase;
      },
      set activeTutorialPhase(e) {
        activeTutorialPhase = e;
      },
      get listIntroActive() {
        return listIntroActive;
      },
      set listIntroActive(e) {
        listIntroActive = e;
      },
      get listOutroActive() {
        return listOutroActive;
      },
      set listOutroActive(e) {
        listOutroActive = e;
      },
      get activateTutorial() {
        return $h;
      },
      set activateTutorial(e) {
        $h = e;
      },
      get activateTutorialPhase() {
        return qh;
      },
      set activateTutorialPhase(e) {
        qh = e;
      },
      get forceTutorial() {
        return Xh;
      },
      set forceTutorial(e) {
        Xh = e;
      },
      get toggleTutorialListFocus() {
        return Qh;
      },
      set toggleTutorialListFocus(e) {
        Qh = e;
      },
      get completeActiveTutorialPhase() {
        return Zh;
      },
      set completeActiveTutorialPhase(e) {
        Zh = e;
      },
      get completeActiveTutorial() {
        return Jh;
      },
      set completeActiveTutorial(e) {
        Jh = e;
      },
      get completeIntro() {
        return eg;
      },
      set completeIntro(e) {
        eg = e;
      },
      get completeListIntro() {
        return tg;
      },
      set completeListIntro(e) {
        tg = e;
      },
      get completeListOutro() {
        return ng;
      },
      set completeListOutro(e) {
        ng = e;
      },
      get activateTutorialTag() {
        return sg;
      },
      set activateTutorialTag(e) {
        sg = e;
      },
      get triggerTutorialTag() {
        return ig;
      },
      set triggerTutorialTag(e) {
        ig = e;
      },
      get useTutorialTagActivation() {
        return ag;
      },
      set useTutorialTagActivation(e) {
        ag = e;
      },
      get useTutorialTagTrigger() {
        return og;
      },
      set useTutorialTagTrigger(e) {
        og = e;
      },
      get useTutorialTag() {
        return rg;
      },
      set useTutorialTag(e) {
        rg = e;
      },
      get advisorPanelVisible() {
        return advisorPanelVisible;
      },
      set advisorPanelVisible(e) {
        advisorPanelVisible = e;
      },
      get toggleAdvisorPanel() {
        return mg;
      },
      set toggleAdvisorPanel(e) {
        mg = e;
      },
      get AdvisorItemType() {
        return lg;
      },
      set AdvisorItemType(e) {
        lg = e;
      },
      get TutorialControlScheme() {
        return cg;
      },
      set TutorialControlScheme(e) {
        cg = e;
      },
      get TutorialPhaseType() {
        return ug;
      },
      set TutorialPhaseType(e) {
        ug = e;
      }
    });
    X.add("game-ui/game/components/tutorials/tutorial-target/tutorial-target-manager.ts", {});
    const hg = new class {
      activeBlinkTags = new Array();
      activeBalloonTags = new Array();
      mountedBlinkComponents = new Map();
      mountedBalloonComponents = new Map();
      blinkTagsDirty = true;
      balloonTagsDirty = true;
      activateTags(e, t) {
        this.activeBlinkTags.length = 0;
        this.activeBalloonTags.length = 0;
        if (null !== e) {
          e.forEach(e => this.activeBlinkTags.push(e.map(e => e.toLowerCase())));
        }
        if (null !== t) {
          t.forEach(e => this.activeBalloonTags.push(e.toLowerCase()));
        }
        this.refreshBlinkTags();
        this.refreshBalloonTags();
      }
      mountBlinkListener(e, t) {
        this.mountedBlinkComponents.set(e.toLowerCase(), t);
        this.blinkTagsDirty = true;
      }
      mountBalloonListener(e, t, n, s) {
        this.mountedBalloonComponents.set(e.toLowerCase(), [t, n, s]);
        this.balloonTagsDirty = true;
      }
      unmountBlinkListener(e) {
        this.mountedBlinkComponents.delete(e.toLowerCase());
        this.blinkTagsDirty = true;
      }
      unmountBalloonListener(e) {
        this.mountedBalloonComponents.delete(e.toLowerCase());
        this.balloonTagsDirty = true;
      }
      refreshBlinkTags() {
        const e = this.FindTopBlinkTags();
        this.mountedBlinkComponents.forEach((t, n) => t(null != e && undefined !== e.find(e => e.split("|").map(e => e.trim()).includes(n))));
        this.blinkTagsDirty = false;
      }
      refreshBalloonTags() {
        const [e, t] = this.FindTopBalloonTag();
        this.mountedBalloonComponents.forEach(([n, s, i], a) => {
          let o = false;
          const r = e?.split("|").map(e => e.trim());
          if (undefined !== r) {
            const e = r.indexOf(a);
            if (e > 0) {
              let t = true;
              for (let n = e - 1; n >= 0; n--) {
                if (this.mountedBalloonComponents.has(r[n])) {
                  t = false;
                }
              }
              o = t;
            } else {
              o = 0 === e;
            }
          }
          n(o);
          s(o && e !== this.activeBalloonTags[0]);
          i(t);
        });
        this.balloonTagsDirty = false;
      }
      isBlinkTagsDirty() {
        return this.blinkTagsDirty;
      }
      isBalloonTagsDirty() {
        return this.balloonTagsDirty;
      }
      FindTopBlinkTags() {
        for (let e = 0; e < this.activeBlinkTags.length; ++e) {
          for (let t = 0; t < this.activeBlinkTags[e].length; t++) {
            if (this.mountedBlinkComponents.has(this.activeBlinkTags[e][t])) {
              return this.activeBlinkTags[e];
            }
          }
        }
        return null;
      }
      FindTopBalloonTag() {
        for (let e = 0; e < this.activeBalloonTags.length; ++e) {
          const t = this.activeBalloonTags[e].split("|").map(e => e.trim());
          for (let n = 0; n < t.length; n++) {
            if (this.mountedBalloonComponents.has(t[n])) {
              return [this.activeBalloonTags[e], e];
            }
          }
        }
        return [null, -1];
      }
    }();
    var gg = Y.createContext(hg);
    var pg = Y.createContext(false);
    var fg = ({
      children: e
    }) => {
      const t = sl(Wh);
      0;
      const n = Y.useMemo(() => null != t && t.type === ug.Balloon ? t.balloonTargets.map(e => e.uiTag) : null, [t]);
      const s = t?.trigger?.active ? t.trigger.blinkTags : null;
      xg(s, n);
      0;
      return z.jsx(gg.Provider, {
        value: hg,
        children: e
      });
    };
    const xg = (e, t) => {
      0;
      const n = Y.useContext(gg);
      0;
      Y.useEffect(() => (n.activateTags(e, t), () => n.activateTags(null, null)), [n, e, t]);
      0;
      Y.useEffect(() => {
        let e = 0;
        const t = () => {
          if (n.isBalloonTagsDirty()) {
            n.refreshBalloonTags();
          }
          if (n.isBlinkTagsDirty()) {
            n.refreshBlinkTags();
          }
          e = window.requestAnimationFrame(t);
        };
        t();
        return () => window.cancelAnimationFrame(e);
      }, [n]);
    };
    X.add("game-ui/game/components/tutorials/tutorial-target/tutorial-context.tsx", {
      get TutorialContext() {
        return gg;
      },
      set TutorialContext(e) {
        gg = e;
      },
      get TooltipDisableContext() {
        return pg;
      },
      set TooltipDisableContext(e) {
        pg = e;
      },
      get TutorialTargetProvider() {
        return fg;
      },
      set TutorialTargetProvider(e) {
        fg = e;
      }
    });
    let vg = {
      balloon: "balloon_qJY balloon_H23",
      enter: "enter_ZTk",
      "enter-active": "enter-active_AJs",
      enterActive: "enter-active_AJs",
      "exit-active": "exit-active_RfZ",
      exitActive: "exit-active_RfZ",
      container: "container_zgM container_jfe",
      arrow: "arrow_SVb arrow_Xfn",
      content: "content_A82 content_JQV"
    };
    X.add("game-ui/common/tooltip/tooltip.module.scss", {
      get classes() {
        return vg;
      },
      set classes(e) {
        Object.assign(vg, e);
      }
    });
    var bg = ({
      tooltip: e,
      forceVisible: t,
      disabled: n,
      theme: s = vg,
      direction: i,
      alignment: a,
      className: o,
      children: r,
      anchorElRef: l
    }) => {
      0;
      const [c, u] = Y.useState(false);
      0;
      const d = Y.useCallback(() => u(true), []);
      0;
      const m = Y.useCallback(() => u(false), []);
      0;
      const h = Y.useCallback(() => u(false), []);
      0;
      const [g, p] = Y.useState(false);
      0;
      const f = Y.useCallback(e => p(e), []);
      const x = km();
      0;
      Y.useEffect(() => {
        if (x && g) {
          const e = ym.subscribe(e => {
            if (e) {
              p(false);
            }
          });
          return () => e.dispose();
        }
      }, [x, g]);
      0;
      const v = Y.useRef(null);
      0;
      const _ = Y.useCallback(e => {
        if (v.current !== e) {
          if (null != v.current) {
            v.current.removeEventListener("mouseover", d);
            v.current.removeEventListener("mouseleave", m);
            v.current.removeEventListener("mousedown", h);
          }
          if (null != e) {
            e.addEventListener("mouseover", d);
            e.addEventListener("mouseleave", m);
            e.addEventListener("mousedown", h);
          }
          v.current = e;
        }
      }, [h, m, d]);
      const b = !!e && Y.Children.count(r) > 0;
      0;
      const T = Y.useContext(pg);
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(Lh, {
          onFocusChange: f,
          children: z.jsx(_h, {
            visible: (x && g || t || c) && b && !n && !T,
            direction: i,
            alignment: a,
            theme: s,
            content: e,
            className: o,
            anchorElRef: l,
            children: z.jsx(xd, {
              ref: _,
              children: r
            })
          })
        })
      });
    };
    X.add("game-ui/common/tooltip/tooltip.tsx", {
      get Tooltip() {
        return bg;
      },
      set Tooltip(e) {
        bg = e;
      }
    });
    class Tg {
      constructor(e) {
        this.debugName = e;
        this.r = Math.floor(1e6 * Math.random());
      }
      toString() {
        return `${this.debugName}:${this.r}`;
      }
    }
    var Eg = new Tg("FOCUS_DISABLED");
    var Ig = new Tg("FOCUS_AUTO");
    function yg(e, t) {
      0;
      return Y.useMemo(() => e === Eg ? null : e === Ig ? new Tg(t) : e, [e, t]);
    }
    X.add("game-ui/common/focus/focus-key.ts", {
      get FOCUS_DISABLED() {
        return Eg;
      },
      set FOCUS_DISABLED(e) {
        Eg = e;
      },
      get FOCUS_AUTO() {
        return Ig;
      },
      set FOCUS_AUTO(e) {
        Ig = e;
      },
      get useUniqueFocusKey() {
        return yg;
      },
      set useUniqueFocusKey(e) {
        yg = e;
      }
    });
    var Sg;
    var jg = {
      attachChild: () => {},
      detachChild: () => {},
      transformStack: () => {},
      setDirty: () => {}
    };
    var Cg = Y.createContext(jg);
    var Ng = Y.createContext(jg);
    function wg(e, t) {
      0;
      const n = Y.useContext(e === Sg.AlwaysActive ? Ng : Cg);
      0;
      const s = Y.useMemo(() => new Og(), []);
      0;
      Y.useEffect(() => {
        s.transformer = t;
      }, [s, t]);
      0;
      Y.useEffect(() => {
        if (e !== Sg.Disabled) {
          s.attachTo(n);
          return () => s.detach();
        }
      }, [e, s, n]);
      return s;
    }
    !function (e) {
      e[e.Disabled = 0] = "Disabled";
      e[e.ActiveOnFocus = 1] = "ActiveOnFocus";
      e[e.AlwaysActive = 2] = "AlwaysActive";
    }(Sg || (Sg = {}));
    class Og {
      _parent = null;
      _child = null;
      _transformer = null;
      get transformer() {
        return this._transformer;
      }
      set transformer(e) {
        if (this._transformer !== e) {
          this._transformer = e;
          this.setDirty();
        }
      }
      attachTo(e) {
        this._parent = e;
        this._parent.attachChild(this);
      }
      detach() {
        if (null != this._parent) {
          this._parent.detachChild(this);
          this._parent = null;
        } else {
          console.error("The input controller is not attached to parent!");
        }
      }
      attachChild(e) {
        if (this._child !== e) {
          this._child = e;
          this.setDirty();
        }
      }
      detachChild(e) {
        if (this._child === e) {
          this._child = null;
          this.setDirty();
        }
      }
      transformStack(e) {
        if (null != this._transformer) {
          this._transformer(e);
        }
        if (null != this._child) {
          this._child.transformStack(e);
        }
      }
      setDirty() {
        if (null != this._parent) {
          this._parent.setDirty();
        }
      }
    }
    class Pg {
      constructor(e, t) {
        this.stack = e;
        this.onStackChanged = t;
        this._child = [];
        this._udpateHandle = null;
      }
      attachChild(e) {
        if (this._child.indexOf(e) < 0) {
          this._child.push(e);
          this.setDirty();
        }
      }
      detachChild(e) {
        const t = this._child.indexOf(e);
        if (t >= 0) {
          this._child.splice(t, 1);
          this.setDirty();
        }
      }
      transformStack() {}
      setDirty() {
        if (this._udpateHandle) {
          cancelAnimationFrame(this._udpateHandle);
        }
        this._udpateHandle = requestAnimationFrame(() => {
          this.stack.clear();
          for (let e = 0; e < this._child.length; e += 1) {
            this._child[e].transformStack(this.stack);
          }
          this.onStackChanged();
          this._udpateHandle = null;
        });
      }
    }
    X.add("game-ui/common/input-events/input-controller.ts", {
      get defaultInputController() {
        return jg;
      },
      set defaultInputController(e) {
        jg = e;
      },
      get InputContext() {
        return Cg;
      },
      set InputContext(e) {
        Cg = e;
      },
      get InputRootContext() {
        return Ng;
      },
      set InputRootContext(e) {
        Ng = e;
      },
      get InputControllerState() {
        return Sg;
      },
      set InputControllerState(e) {
        Sg = e;
      },
      get useInputController() {
        return wg;
      },
      set useInputController(e) {
        wg = e;
      }
    });
    var Lg = Y.memo(function ({
      actions: e,
      disabled: t,
      ignoreFocusState: n = false,
      children: s
    }) {
      const i = jh("InputActionConsumer");
      const a = Nh(i);
      0;
      const o = Y.useCallback(t => {
        if (null != e) {
          const n = Object.entries(e);
          for (let e = n.length - 1; e >= 0; e--) {
            const [s, i] = n[e];
            if (null != i) {
              t.push(s, i);
            }
          }
        }
      }, [e]);
      const r = wg(n ? Sg.AlwaysActive : a ? Sg.ActiveOnFocus : Sg.Disabled, t ? null : o);
      return n ? (0, z.jsx)(z.Fragment, {
        children: s
      }) : (0, z.jsx)(Ph, {
        controller: i,
        children: (0, z.jsx)(Cg.Provider, {
          value: r,
          children: s
        })
      });
    }, (e, t) => {
      const {
        actions: n,
        ...s
      } = e;
      const {
        actions: i,
        ...a
      } = t;
      return Kr(s, a) && Kr(e.actions, t.actions);
    });
    const Ag = ({
      disabled: e,
      children: t,
      action: n,
      onAction: s
    }) => {
      0;
      const i = Y.useMemo(() => ({
        [n]: s
      }), [n, s]);
      0;
      return z.jsx(Lg, {
        actions: i,
        disabled: e,
        children: t
      });
    };
    var Mg;
    var Rg = ({
      action: e = "Select",
      ...t
    }) => (0, z.jsx)(Ag, {
      action: e,
      ...t
    });
    var kg = ({
      action: e = "Back",
      ...t
    }) => (0, z.jsx)(Ag, {
      action: e,
      ...t
    });
    var Dg = ({
      action: e = "Close",
      ...t
    }) => (0, z.jsx)(Ag, {
      action: e,
      ...t
    });
    var Fg = ({
      expanded: e,
      expandable: t,
      disabled: n,
      children: s,
      onAction: i
    }) => {
      0;
      const a = Y.useMemo(() => ({
        [e ? "Collapse Group" : "Expand Group"]: t ? i : null
      }), [t, e, i]);
      0;
      return z.jsx(Lg, {
        actions: a,
        disabled: n,
        children: s
      });
    };
    function Ug(e, t, n) {
      0;
      return Y.useMemo(() => new Bg(e, t, n), [e, t, n]);
    }
    X.add("game-ui/common/input-events/input-action-consumer.tsx", {
      get InputActionConsumer() {
        return Lg;
      },
      set InputActionConsumer(e) {
        Lg = e;
      },
      get SelectConsumer() {
        return Rg;
      },
      set SelectConsumer(e) {
        Rg = e;
      },
      get BackConsumer() {
        return kg;
      },
      set BackConsumer(e) {
        kg = e;
      },
      get CloseConsumer() {
        return Dg;
      },
      set CloseConsumer(e) {
        Dg = e;
      },
      get ExpandConsumer() {
        return Fg;
      },
      set ExpandConsumer(e) {
        Fg = e;
      }
    });
    class Bg extends Sh {
      constructor(e, t, n) {
        super();
        this.activation = t;
        this.limits = n;
        this.children = new Map();
        this._focusedChildKey = null;
        this.onRefocus = null;
        this.isChildFocusedImpl = e => e === this._focusedChildKey && this.children.has(this._focusedChildKey);
        this.registerChild = (e, t) => {
          if (this.children.has(e)) {
            console.error(`The focus key '${String(e)}' has already been registered in this MultiChildFocusController!\n${this.debugTrace()}`);
          } else {
            this.children.set(e, t);
            if (!this.enabled) {
              if (this.activation === $u.FocusedChild) {
                this.enabled = this._focusedChildKey === e;
              } else if (this.activation === $u.AnyChildren) {
                this.enabled = true;
              }
            }
            if (!(!this.onRefocus || !this.focused || null != this._focusedChildKey && this.children.has(this._focusedChildKey))) {
              this.onRefocus(null);
            }
          }
        };
        this.unregisterChild = e => {
          const t = this.children.get(e);
          if (null != t) {
            if (this.enabled) {
              if (this.activation === $u.FocusedChild) {
                this.enabled = this._focusedChildKey !== e;
              } else if (this.activation === $u.AnyChildren) {
                this.enabled = this.children.size > 1;
              }
            }
            this.children.delete(e);
            if (this.onRefocus && this.focused && e === this.focusedChildKey) {
              this.onRefocus(t);
            }
          } else {
            console.error(`Attempted to unregister mismatching focus key '${String(e)}' from a MultiChildFocusController!\n${this.debugTrace()}`);
          }
        };
        this.enabled = t === $u.Always;
        this.focusKey = e;
      }
      get focusedChildKey() {
        return this._focusedChildKey;
      }
      set focusedChildKey(e) {
        if (e === this._focusedChildKey) {
          return;
        }
        const t = null != this._focusedChildKey ? this.children.get(this._focusedChildKey) : undefined;
        const n = null != e && this.children.has(e);
        if (!n) {
          this.enabled = this.activation !== $u.FocusedChild;
        }
        this._focusedChildKey = e;
        if (n) {
          if (this.enabled) {
            this.updateChildren(t ?? null);
          } else {
            this.enabled = true;
          }
        } else {
          if (null != this.onRefocus) {
            this.onRefocus(t ?? null);
          }
          if (null != t) {
            this.updateChildren(t ?? null);
          }
        }
      }
      has(e) {
        return this.children.has(e);
      }
      get(e) {
        return this.children.get(e);
      }
      entries() {
        return this.children;
      }
      getBounds() {
        let e = 0;
        let t = 0;
        let n = 0;
        let s = 0;
        let i = false;
        for (const a of this.children.values()) {
          const o = a.getBounds();
          if (null != o) {
            if (i) {
              e = Math.min(o.left, e);
              t = Math.min(o.top, t);
              n = Math.max(o.right, n);
              s = Math.max(o.bottom, s);
            } else {
              e = o.left;
              t = o.top;
              n = o.right;
              s = o.bottom;
              i = true;
            }
          }
        }
        return i ? {
          left: e,
          top: t,
          right: n,
          bottom: s,
          width: n - e,
          height: s - t
        } : null;
      }
      getFocusedBounds() {
        if (null != this._focusedChildKey) {
          const e = this.children.get(this._focusedChildKey);
          if (null != e) {
            return e.getFocusedBounds();
          }
        }
        return null;
      }
      onFocusEnterImpl(e) {
        if (null != this.onRefocus) {
          this.onRefocus(e);
        }
      }
      get debugFocusedChild() {
        return null != this._focusedChildKey ? this.children.get(this._focusedChildKey) ?? null : null;
      }
    }
    function Gg(e, t) {
      switch (t) {
        case Mg.Horizontal:
          return Math.abs(e.x) > Math.abs(e.y) ? {
            x: Math.sign(e.x),
            y: 0
          } : Ld;
        case Mg.Vertical:
          return Math.abs(e.y) > Math.abs(e.x) ? {
            x: 0,
            y: Math.sign(e.y)
          } : Ld;
        case Mg.Both:
          return Ud(e);
        default:
          return Ld;
      }
    }
    function Vg(e, t, n) {
      let s = Number.MAX_VALUE;
      let i = null;
      for (const [a, o] of e.entries()) {
        const r = o.getBounds();
        if (null == r) {
          continue;
        }
        let l = 0;
        let c = 0;
        switch (e.limits) {
          case qu.Center:
            {
              const e = qg(r, n);
              if (null == e) {
                continue;
              }
              l = e.x - t.x;
              c = e.y - t.y;
              break;
            }
          case qu.Bounds:
            l = t.x < r.left ? r.left - t.x : r.left <= t.x && t.x <= r.right ? 0 : t.x - r.right;
            c = t.y < r.top ? r.top - t.y : r.top <= t.y && t.y <= r.bottom ? 0 : t.y - r.bottom;
        }
        const u = l * l + c * c;
        if (u < s) {
          s = u;
          i = a;
        }
      }
      return i;
    }
    function Hg(e, t, n, s, i) {
      let a = null;
      let o = Number.MAX_VALUE;
      const r = {
        x: .5 + .5 * n.x,
        y: .5 - .5 * n.y
      };
      const l = t.getFocusedBounds();
      const c = qg(l, r);
      if (l && c) {
        for (const [t, r] of e.entries()) {
          if (t === i) {
            continue;
          }
          const u = r.getBounds();
          if (null == u) {
            continue;
          }
          const d = qg(u, s);
          if (null == d) {
            continue;
          }
          const m = d.x - c.x;
          const h = d.y - c.y;
          if (m * n.x - h * n.y <= 0) {
            continue;
          }
          let g = 0;
          let p = 0;
          switch (e.limits) {
            case qu.Center:
              {
                const e = {
                  x: wd(c.x, u.left, u.right),
                  y: wd(c.y, u.top, u.bottom)
                };
                g = e.x - c.x;
                p = e.y - c.y;
                break;
              }
            case qu.Bounds:
              g = u.right <= l.left ? l.left - u.right : u.right >= l.left && u.right <= l.right || u.left >= l.left && u.left <= l.right ? 0 : l.right - u.left;
              g = u.bottom <= l.top ? l.top - u.bottom : u.bottom >= l.top && u.bottom <= l.bottom || u.top >= l.top && u.top <= l.bottom ? 0 : l.bottom - u.top;
          }
          const f = g * n.x - p * n.y;
          const x = p * n.x + g * n.y;
          const v = 1 * f + 5 * Math.abs(x);
          if (v < o) {
            a = t;
            o = v;
          }
        }
      }
      return a;
    }
    X.add("game-ui/common/focus/controller/multi-child-focus-controller.tsx", {
      get useMultiChildFocusController() {
        return Ug;
      },
      set useMultiChildFocusController(e) {
        Ug = e;
      }
    });
    (function (e) {
      e.Horizontal = "horizontal";
      e.Vertical = "vertical";
      e.Both = "both";
      e.None = "none";
    })(Mg || (Mg = {}));
    var Kg = {
      x: .5,
      y: .5
    };
    var Wg = {
      x: .5,
      y: 0
    };
    var zg = {
      x: 0,
      y: .5
    };
    var Yg = {
      x: .5,
      y: 1
    };
    var $g = {
      x: 1,
      y: .5
    };
    function qg(e, t) {
      return null != e ? {
        x: e.left * (1 - t.x) + e.right * t.x,
        y: e.top * (1 - t.y) + e.bottom * t.y
      } : null;
    }
    X.add("game-ui/common/focus/navigation.ts", {
      get NavigationDirection() {
        return Mg;
      },
      set NavigationDirection(e) {
        Mg = e;
      },
      get transformNavigationInput() {
        return Gg;
      },
      set transformNavigationInput(e) {
        Gg = e;
      },
      get getClosestKey() {
        return Vg;
      },
      set getClosestKey(e) {
        Vg = e;
      },
      get getClosestKeyInDirection() {
        return Hg;
      },
      set getClosestKeyInDirection(e) {
        Hg = e;
      },
      get focusAnchorCenter() {
        return Kg;
      },
      set focusAnchorCenter(e) {
        Kg = e;
      },
      get focusAnchorTop() {
        return Wg;
      },
      set focusAnchorTop(e) {
        Wg = e;
      },
      get focusAnchorLeft() {
        return zg;
      },
      set focusAnchorLeft(e) {
        zg = e;
      },
      get focusAnchorBottom() {
        return Yg;
      },
      set focusAnchorBottom(e) {
        Yg = e;
      },
      get focusAnchorRight() {
        return $g;
      },
      set focusAnchorRight(e) {
        $g = e;
      },
      get getElementFocusPosition() {
        return qg;
      },
      set getElementFocusPosition(e) {
        qg = e;
      }
    });
    var Xg = ({
      focusKey: e = Ig,
      debugName: t = "NavigationScope",
      focused: n,
      direction: s = Mg.Both,
      activation: i = $u.AnyChildren,
      limits: a = qu.Center,
      children: o,
      onChange: r,
      onRefocus: l,
      allowFocusExit: c = true,
      allowLooping: u = false,
      jumpSections: d = false
    }) => {
      const m = Ug(yg(e, t), i, a);
      0;
      Y.useEffect(() => {
        m.focusedChildKey = n;
      }, [m, n]);
      0;
      Y.useEffect(() => {
        if (null != l) {
          if (!(!m.focused || null != m.focusedChildKey && m.has(m.focusedChildKey))) {
            r(l(m, null));
          }
          m.onRefocus = e => {
            r(l(m, e));
          };
          return () => {
            m.onRefocus = null;
          };
        }
      }, [m, r, l]);
      0;
      const h = Y.useCallback(e => {
        const t = null !== m.focusedChildKey && m.get(m.focusedChildKey);
        let n = null;
        if ((null === m.focusedChildKey || !t) && (n = Vg(m, Ld, Kg), null !== n)) {
          r(n);
          return true;
        }
        if (t && (n = Hg(m, t, e, Kg, m.focusedChildKey || undefined), null !== n)) {
          r(n);
          return true;
        }
        if (u && m.children.size > 1) {
          const t = [...m.children.keys()];
          if (e.x > 0 || e.y < 0) {
            n = t[0];
          } else if (e.x < 0 || e.y > 0) {
            n = t[m.children.size - 1];
          }
          if (null !== n) {
            r(n);
            return true;
          }
        }
        return !c;
      }, [c, u, m, r]);
      const g = s === Mg.Both || s === Mg.Horizontal;
      const p = s === Mg.Both || s === Mg.Vertical;
      0;
      const f = Y.useCallback(e => h(g ? {
        x: e,
        y: 0
      } : {
        x: 0,
        y: e
      }), [g, h]);
      0;
      const x = Y.useMemo(() => ({
        "Move Horizontal": g ? e => h({
          x: e,
          y: 0
        }) : null,
        "Move Vertical": p ? e => h({
          x: 0,
          y: e
        }) : null,
        "Jump Section": d ? f : null
      }), [g, p, d, f, h]);
      0;
      0;
      return z.jsx(Lg, {
        actions: x,
        children: z.jsx(Ph, {
          controller: m,
          children: o
        })
      });
    };
    var Qg = (e, t) => null != e.focusedChildKey && e.has(e.focusedChildKey) ? e.focusedChildKey : Zg(e, t);
    var Zg = (e, t) => {
      if (null == t && null != e.focusedChildKey && e.has(e.focusedChildKey)) {
        return e.focusedChildKey;
      }
      let n = Ld;
      if (null != t) {
        n = qg(t.getFocusedBounds(), Kg) ?? Ld;
      }
      return Vg(e, n, Kg);
    };
    var Jg = (e, t) => null == t && null != e.focusedChildKey && e.has(e.focusedChildKey) ? e.focusedChildKey : Vg(e, Ld, Kg);
    X.add("game-ui/common/focus/navigation-scope.tsx", {
      get NavigationScope() {
        return Xg;
      },
      set NavigationScope(e) {
        Xg = e;
      },
      get refocusClosestKeyIfNoFocus() {
        return Qg;
      },
      set refocusClosestKeyIfNoFocus(e) {
        Qg = e;
      },
      get refocusClosestKey() {
        return Zg;
      },
      set refocusClosestKey(e) {
        Zg = e;
      },
      get refocusTopLeft() {
        return Jg;
      },
      set refocusTopLeft(e) {
        Jg = e;
      }
    });
    var ep = ({
      focusKey: e = Ig,
      initialFocused: t,
      direction: n,
      activation: s,
      limits: i,
      children: a,
      onChange: o,
      onRefocus: r = Zg,
      allowFocusExit: l = true,
      forceFocus: c,
      debugName: u = "AutoNavigationScope",
      allowLooping: d = false,
      jumpSections: m
    }) => {
      0;
      const [h, g] = Y.useState(t ?? null);
      0;
      const p = Y.useCallback(e => {
        g(e);
        if (o) {
          o(e);
        }
      }, [o]);
      0;
      return z.jsx(Xg, {
        focusKey: e,
        focused: c ?? h,
        direction: n,
        activation: s,
        limits: i,
        debugName: u,
        onChange: p,
        onRefocus: r,
        allowFocusExit: l,
        allowLooping: d,
        jumpSections: m,
        children: a
      });
    };
    function tp(e) {
      0;
      return Y.useMemo(() => new np(e), [e]);
    }
    X.add("game-ui/common/focus/auto-navigation-scope.tsx", {
      get AutoNavigationScope() {
        return ep;
      },
      set AutoNavigationScope(e) {
        ep = e;
      }
    });
    class np extends Sh {
      childFocusKey = null;
      childElement = null;
      constructor(e) {
        super();
        this.focusKey = e;
      }
      isChildFocusedImpl = e => e === this.childFocusKey;
      registerChild = (e, t) => {
        if (null == this.childFocusKey) {
          this.childFocusKey = e;
          this.childElement = t;
          this.enabled = true;
        } else {
          console.error(`Cannot register second focus key '${e}'! KeyFocusControllers can only host a single child.\nRegistered key: ${this.childFocusKey}\n${this.debugTrace()}`);
        }
      };
      unregisterChild = e => {
        if (this.childFocusKey === e) {
          this.enabled = false;
          this.childFocusKey = null;
          this.childElement = null;
        } else {
          console.error(`Attempted to unregister mismatching focus key '${e}' from a KeyFocusController!\nRegistered key: ${this.childFocusKey}\n${this.debugTrace()}`);
        }
      };
      getBounds = () => this.childElement?.getBounds() ?? null;
      getFocusedBounds() {
        return this.childElement?.getFocusedBounds() ?? null;
      }
      get debugFocusedChild() {
        return this.childElement;
      }
    }
    X.add("game-ui/common/focus/controller/key-focus-controller.tsx", {
      get useKeyFocusController() {
        return tp;
      },
      set useKeyFocusController(e) {
        tp = e;
      }
    });
    var sp = ({
      focusKey: e = Ig,
      children: t
    }) => {
      const n = tp(yg(e, "FocusKeyOverride"));
      0;
      return z.jsx(Ph, {
        controller: n,
        children: t
      });
    };
    X.add("game-ui/common/focus/focus-key-override.tsx", {
      get FocusKeyOverride() {
        return sp;
      },
      set FocusKeyOverride(e) {
        sp = e;
      }
    });
    var ip = ({
      focusKey: e = Ig,
      debugName: t = "FocusScope",
      focused: n,
      activation: s = $u.FocusedChild,
      limits: i = qu.Center,
      children: a
    }) => {
      const o = Ug(yg(e, t), s, i);
      0;
      Y.useEffect(() => {
        o.focusedChildKey = n;
      }, [o, n]);
      0;
      return z.jsx(Ph, {
        controller: o,
        children: a
      });
    };
    X.add("game-ui/common/focus/focus-scope.tsx", {
      get FocusScope() {
        return ip;
      },
      set FocusScope(e) {
        ip = e;
      }
    });
    var op;
    function rp(e, t) {
      const n = "number" == typeof t ? t : 1;
      if (null != e && n) {
        requestAnimationFrame(() => tl("audio", "playSound", e, n));
      }
    }
    !function (e) {
      e.selectItem = "select-item";
      e.dragSlider = "drag-slider";
      e.hoverItem = "hover-item";
      e.expandPanel = "expand-panel";
      e.grabSlider = "grabSlider";
      e.selectDropdown = "select-dropdown";
      e.selectToggle = "select-toggle";
      e.focusInputField = "focus-input-field";
      e.signatureBuildingEvent = "signature-building-event";
      e.bulldoze = "bulldoze";
      e.bulldozeEnd = "bulldoze-end";
      e.relocateBuilding = "relocate-building";
      e.mapTilePurchaseMode = "map-tile-purchase-mode";
      e.mapTilePurchaseModeEnd = "map-tile-purchase-mode-end";
      e.xpEvent = "xp-event";
      e.milestoneEvent = "milestone-event";
      e.economy = "economy";
      e.chirpEvent = "chirp-event";
      e.likeChirp = "like-chirp";
      e.chirper = "chirper";
      e.purchase = "purchase";
      e.enableBuilding = "enable-building";
      e.disableBuilding = "disable-building";
      e.pauseSimulation = "pause-simulation";
      e.resumeSimulation = "resume-simulation";
      e.simulationSpeed1 = "simulation-speed-1";
      e.simulationSpeed2 = "simulation-speed-2";
      e.simulationSpeed3 = "simulation-speed-3";
      e.togglePolicy = "toggle-policy";
      e.takeLoan = "take-loan";
      e.removeItem = "remove-item";
      e.toggleInfoMode = "toggle-info-mode";
      e.takePhoto = "take-photo";
      e.tutorialTriggerCompleteEvent = "tutorial-trigger-complete-event";
      e.selectRadioNetwork = "select-radio-network";
      e.selectRadioStation = "select-radio-station";
      e.generateRandomName = "generate-random-name";
      e.decreaseElevation = "decrease-elevation";
      e.increaseElevation = "increase-elevation";
      e.selectPreviousItem = "select-previous-item";
      e.selectNextItem = "select-next-item";
      e.openPanel = "open-panel";
      e.closePanel = "close-panel";
      e.openMenu = "open-menu";
      e.closeMenu = "close-menu";
    }(op || (op = {}));
    X.add("game-ui/common/data-binding/audio-bindings.ts", {
      get UISound() {
        return op;
      },
      set UISound(e) {
        op = e;
      },
      get playUISound() {
        return rp;
      },
      set playUISound(e) {
        rp = e;
      }
    });
    var lp = {
      enter: op.openPanel,
      exit: op.closePanel
    };
    var cp = {
      enter: op.openMenu,
      exit: op.closeMenu
    };
    function up(e) {
      0;
      const {
        state: t
      } = Y.useContext(rd);
      0;
      Y.useEffect(() => {
        if (t === ed.enter) {
          rp(e?.enter);
        } else if (t === ed.exit) {
          rp(e?.exit);
        }
      }, [t, e?.enter, e?.exit]);
    }
    X.add("game-ui/common/animations/transition-sounds.tsx", {
      get panelTransitionSounds() {
        return lp;
      },
      set panelTransitionSounds(e) {
        lp = e;
      },
      get menuTransitionSounds() {
        return cp;
      },
      set menuTransitionSounds(e) {
        cp = e;
      },
      get useTransitionSounds() {
        return up;
      },
      set useTransitionSounds(e) {
        up = e;
      }
    });
    var dp = Y.createContext({
      scrollTo: () => {},
      scrollBy: () => {},
      smoothScrollTo: () => {},
      scrollIntoView: () => {},
      updateThumbs: () => {}
    });
    function mp(e, t, n = $u.Always, s = false) {
      0;
      const i = Y.useCallback(() => t.current?.getBoundingClientRect() || null, [t]);
      0;
      const a = Y.useMemo(() => new hp(e, i, n, s), [e, i, n, s]);
      0;
      const o = Y.useContext(dp);
      const r = al(Tm);
      0;
      Oh(a, Y.useCallback(e => {
        if (e && r.current === xm.gamepad && null != t.current) {
          o.scrollIntoView(t.current);
        }
      }, [r, t, o]));
      return a;
    }
    X.add("game-ui/common/scrolling/scrollable-context.ts", {
      get ScrollableContext() {
        return dp;
      },
      set ScrollableContext(e) {
        dp = e;
      }
    });
    class hp extends Sh {
      constructor(e, t, n, s) {
        super();
        this.getBounds = t;
        this.activation = n;
        this.allowChildren = s;
        this.childFocusKey = null;
        this.childElement = null;
        this.isChildFocusedImpl = e => e === this.childFocusKey;
        this.registerChild = (e, t) => {
          if (this.allowChildren) {
            if (null == this.childFocusKey) {
              this.childFocusKey = e;
              this.childElement = t;
              if (this.activation !== $u.Always) {
                this.enabled = true;
              }
            } else {
              console.error(`Cannot register second child '${e}'. This focus node can only host a single child!\nRegistered key: ${this.childFocusKey}\n${this.debugTrace()}`);
            }
          } else {
            console.error(`${this.focusKey}: Cannot register child '${e}'. Children are not allowed in this focus node!`);
          }
        };
        this.unregisterChild = e => {
          if (this.childFocusKey === e) {
            this.childFocusKey = null;
            this.childElement = null;
            if (this.activation !== $u.Always) {
              this.enabled = false;
            }
          } else {
            console.error(`Attempted to unregister mismatching focus key '${e}'!\nRegistered key: ${this.childFocusKey}\n${this.debugTrace()}`);
          }
        };
        this.enabled = this.activation === $u.Always;
        this.focusKey = e;
      }
      getFocusedBounds() {
        return this.childElement?.getFocusedBounds() ?? this.getBounds();
      }
      get debugFocusedChild() {
        return this.childElement;
      }
    }
    function gp() {
      0;
      return Y.useMemo(() => new pp(), []);
    }
    X.add("game-ui/common/focus/controller/element-focus-context.tsx", {
      get useElementFocusController() {
        return mp;
      },
      set useElementFocusController(e) {
        mp = e;
      }
    });
    class pp extends Sh {
      childElement = null;
      constructor() {
        super(false);
        this.enabled = true;
      }
      get debugName() {
        return "<root>";
      }
      isChildFocusedImpl = e => e === this.focusKey;
      registerChild = (e, t) => {
        if (null == this.focusKey) {
          this.focusKey = e;
          this.childElement = t;
        } else {
          console.error(`Cannot register second focus key '${e}'! RootFocusControllers can only host a single child.\nRegistered key: ${this.focusKey}\n${this.debugTrace()}`);
        }
      };
      unregisterChild = e => {
        if (this.focusKey === e) {
          this.focusKey = null;
          this.childElement = null;
        } else {
          console.error(`Attempted to unregister mismatching focus key '${e}' from a RootFocusController!\nRegistered key: ${this.focusKey}\n${this.debugTrace()})`);
        }
      };
      getBounds = () => null;
      getFocusedBounds() {
        return null;
      }
      get debugFocusedChild() {
        return this.childElement;
      }
    }
    function fp(e, t) {
      0;
      return Y.useCallback(n => {
        if (null == n) {
          return;
        }
        const s = e(n);
        if (null != s) {
          t(s);
        }
      }, [e, t]);
    }
    function xp(e) {
      return fp(Fr, e);
    }
    function vp(e) {
      return fp(_p, e);
    }
    function _p(e) {
      return "string" == typeof e ? e : null;
    }
    X.add("game-ui/common/focus/controller/root-focus-controller.tsx", {
      get useRootFocusController() {
        return gp;
      },
      set useRootFocusController(e) {
        gp = e;
      }
    });
    X.add("game-ui/common/focus/focus-change-listener.tsx", {
      get useFocusChangeListener() {
        return fp;
      },
      set useFocusChangeListener(e) {
        fp = e;
      },
      get useEntityFocusChangeListener() {
        return xp;
      },
      set useEntityFocusChangeListener(e) {
        xp = e;
      },
      get useStringFocusChangeListener() {
        return vp;
      },
      set useStringFocusChangeListener(e) {
        vp = e;
      }
    });
    var bp = ({
      disabled: e = true,
      children: t
    }) => {
      0;
      const n = Y.useContext(Zu);
      0;
      return z.jsx(Zu.Provider, {
        value: e ? Ju : n,
        children: t
      });
    };
    X.add("game-ui/common/focus/focus-disabled.tsx", {
      get FocusDisabled() {
        return bp;
      },
      set FocusDisabled(e) {
        bp = e;
      }
    });
    var Tp = Y.forwardRef(function ({
      className: e,
      focusSound: t,
      children: n,
      onFocusChange: s,
      ...i
    }, a) {
      const o = jh("PassiveFocusDiv");
      Oh(o, s);
      const r = Nh(o);
      const l = km();
      0;
      Y.useEffect(() => {
        if (r && l) {
          rp(t);
        }
      }, [t, r, l]);
      0;
      0;
      0;
      return z.jsx(Ph, {
        controller: o,
        children: z.jsx(fd, {
          children: z.jsx("div", {
            ...i,
            ref: a,
            className: Qu()(e, r && l && "focused"),
            children: n
          })
        })
      });
    });
    var Ep = Y.forwardRef(function ({
      focusKey: e = Ig,
      debugName: t = "ActiveFocusDiv",
      activation: n = $u.Always,
      focusSound: s,
      className: i,
      children: a,
      onFocusChange: o,
      ...r
    }, l) {
      0;
      const c = Y.useRef(null);
      const u = hd(l, c);
      const d = mp(yg(e, t), c, n, true);
      Oh(d, o);
      const m = Nh(d);
      const h = km();
      0;
      Y.useEffect(() => {
        if (m && h) {
          rp(s);
        }
      }, [s, m, h]);
      0;
      0;
      0;
      return z.jsx(Ph, {
        controller: d,
        children: z.jsx(fd, {
          children: z.jsx("div", {
            ...r,
            ref: u,
            className: Qu()(i, m && h && "focused"),
            children: a
          })
        })
      });
    });
    X.add("game-ui/common/focus/focus-div.tsx", {
      get PassiveFocusDiv() {
        return Tp;
      },
      set PassiveFocusDiv(e) {
        Tp = e;
      },
      get ActiveFocusDiv() {
        return Ep;
      },
      set ActiveFocusDiv(e) {
        Ep = e;
      }
    });
    var Ip = ({
      children: e
    }) => {
      const t = gp();
      0;
      return z.jsx(Ph, {
        controller: t,
        children: e
      });
    };
    X.add("game-ui/common/focus/focus-root.tsx", {
      get FocusRoot() {
        return Ip;
      },
      set FocusRoot(e) {
        Ip = e;
      }
    });
    const yp = ["Debug UI"];
    var Sp = ["Move Horizontal", "Move Vertical", "Select", "Back", "Switch Tab"];
    var jp = Y.memo(function ({
      includes: e,
      excludes: t = yp,
      disabled: n,
      children: s
    }) {
      const i = jh("InputActionBarrier");
      const a = Nh(i);
      0;
      const o = Y.useCallback(n => {
        if (null != e) {
          n.removeWhere(t => e.includes(t));
        } else if (null != t) {
          n.removeWhere(e => !t.includes(e));
        } else {
          n.clear();
        }
      }, [e, t]);
      const r = wg(a ? Sg.ActiveOnFocus : Sg.Disabled, n ? null : o);
      0;
      0;
      return z.jsx(Ph, {
        controller: i,
        children: z.jsx(Cg.Provider, {
          value: r,
          children: s
        })
      });
    }, (e, t) => Kr(e, t) && Kr(e.includes, t.includes) && Kr(e.excludes, t.excludes));
    X.add("game-ui/common/input-events/input-action-barrier.tsx", {
      get navActions() {
        return Sp;
      },
      set navActions(e) {
        Sp = e;
      },
      get InputActionBarrier() {
        return jp;
      },
      set InputActionBarrier(e) {
        jp = e;
      }
    });
    var Cp;
    var Np = ({
      onSelectedStateChanged: e,
      children: t
    }) => {
      0;
      const [n, s] = Y.useState(false);
      const i = jh("SelectableFocusBoundary", true, n);
      0;
      Oh(i, Y.useCallback(t => {
        if (!t) {
          s(false);
          if (e) {
            e(false);
          }
        }
      }, [e]));
      0;
      const a = Y.useMemo(() => ({
        Select: n ? null : () => {
          s(true);
          if (e) {
            e(true);
          }
        },
        Back: n ? () => {
          s(false);
          if (e) {
            e(false);
          }
        } : null
      }), [n, e]);
      0;
      0;
      0;
      return z.jsx(jp, {
        includes: Sp,
        disabled: !n,
        children: z.jsx(Lg, {
          actions: a,
          children: z.jsx(Ph, {
            controller: i,
            children: t
          })
        })
      });
    };
    function wp(e, t = 1) {
      0;
      const n = Y.useRef(e);
      if (!Kr(e, n.current, t)) {
        n.current = e;
      }
      return n.current;
    }
    function Op(e, t, n = undefined) {
      const s = sl(Tm);
      const i = wp(e ? {
        action: e,
        controlScheme: n ?? s
      } : undefined, 2);
      const a = ll(wm, i);
      0;
      return Y.useMemo(() => t ? a : undefined, [t, a]);
    }
    X.add("game-ui/common/focus/selectable-focus-boundary.tsx", {
      get SelectableFocusBoundary() {
        return Np;
      },
      set SelectableFocusBoundary(e) {
        Np = e;
      }
    });
    X.add("game-ui/common/focus/index.ts", {});
    X.add("game-ui/common/hooks/use-shallow-memoize.tsx", {
      get useShallowMemoize() {
        return wp;
      },
      set useShallowMemoize(e) {
        wp = e;
      }
    });
    X.add("game-ui/common/input-events/action-hints/use-input-hint-data.tsx", {
      get useInputHintData() {
        return Op;
      },
      set useInputHintData(e) {
        Op = e;
      }
    });
    (function (e) {
      e[e.FallbackToLong = 1] = "FallbackToLong";
      e[e.FallbackToControl = 2] = "FallbackToControl";
    })(Cp || (Cp = {}));
    var Pp = uc("LocalizedInputPath", (e, {
      binding: t,
      modifiers: n,
      short: s,
      gamepadType: i,
      keyboardLayout: a,
      layoutMap: o
    }) => {
      if ("" !== t.name) {
        const r = Pc.Options.INPUT_MODIFIER_SEPARATOR.renderString(e, {
          fallback: " + "
        });
        return [...n, t].map(t => {
          if ("Keyboard" === t.device && a === Tl.AutoDetect && o && o[t.name]) {
            t = o[t.name];
          }
          const r = (s ? Pc.Options.INPUT_CONTROL_SHORT : Pc.Options.INPUT_CONTROL).renderString(e, {
            hash: `${t.device}.${t.name}`,
            fallback: s === Cp.FallbackToLong ? Pc.Options.INPUT_CONTROL.renderString(e, {
              hash: `${t.device}.${t.name}`,
              fallback: t.displayName ?? t.name
            }) : t.displayName ?? t.name
          });
          if ("Gamepad" === t.device) {
            if (i === vm.PS) {
              return (s ? Pc.Options.INPUT_CONTROL_SHORT_PS : Pc.Options.INPUT_CONTROL_PS).renderString(e, {
                hash: `${t.device}.${t.name}`,
                fallback: s === Cp.FallbackToLong ? Pc.Options.INPUT_CONTROL_PS.renderString(e, {
                  hash: `${t.device}.${t.name}`,
                  fallback: r
                }) : r
              });
            }
            if (i === vm.Xbox) {
              return (s ? Pc.Options.INPUT_CONTROL_SHORT_XBOX : Pc.Options.INPUT_CONTROL_XBOX).renderString(e, {
                hash: `${t.device}.${t.name}`,
                fallback: s === Cp.FallbackToLong ? Pc.Options.INPUT_CONTROL_XBOX.renderString(e, {
                  hash: `${t.device}.${t.name}`,
                  fallback: r
                }) : r
              });
            }
          }
          return r;
        }).join(r);
      }
      return Pc.Options.INPUT_CONTROL_NA.renderString(e, {
        fallback: ""
      });
    }, (e, t) => Kr(e, t));
    function Lp(e) {
      0;
      const [t, n] = Y.useState(e);
      0;
      const s = Y.useContext(ld);
      0;
      Y.useEffect(() => {
        if (!s) {
          const t = window.requestAnimationFrame(() => {
            if (!s) {
              n(e);
            }
          });
          return () => window.cancelAnimationFrame(t);
        }
      }, [s, e]);
      return t;
    }
    X.add("game-ui/common/localization/localized-input-path.tsx", {
      get ShortInputPathOption() {
        return Cp;
      },
      set ShortInputPathOption(e) {
        Cp = e;
      },
      get LocalizedInputPath() {
        return Pp;
      },
      set LocalizedInputPath(e) {
        Pp = e;
      }
    });
    var Ap = ({
      children: e
    }) => {
      const t = Lp(e);
      0;
      return z.jsx(z.Fragment, {
        children: t
      });
    };
    X.add("game-ui/common/animations/use-exit-transition-lock.tsx", {
      get useExitTransitionLock() {
        return Lp;
      },
      set useExitTransitionLock(e) {
        Lp = e;
      },
      get ExitTransitionLock() {
        return Ap;
      },
      set ExitTransitionLock(e) {
        Ap = e;
      }
    });
    var Rp;
    var kp;
    var Dp = $r("user", "switchPromptVisible");
    var Fp = $r("user", "avatar");
    var Up = $r("user", "userID");
    var Bp = $r("user", "switchUserHintOverload");
    function Gp() {
      tl("user", "switchUser");
    }
    function Vp(e) {
      return Rp[e];
    }
    function Hp(e = false) {
      0;
      Y.useEffect(() => {
        if (!e) {
          const e = () => {};
          const t = jm.subscribe(e);
          return () => t?.dispose();
        }
      }, [e]);
    }
    function Kp(e = false) {
      0;
      Y.useEffect(() => {
        if (!e) {
          const e = () => {};
          const t = Cm.subscribe(e);
          return () => t?.dispose();
        }
      }, [e]);
    }
    X.add("game-ui/common/data-binding/user-bindings.ts", {
      get switchPromptVisible() {
        return switchPromptVisible;
      },
      set switchPromptVisible(e) {
        switchPromptVisible = e;
      },
      get avatar() {
        return avatar;
      },
      set avatar(e) {
        avatar = e;
      },
      get userID() {
        return userID;
      },
      set userID(e) {
        userID = e;
      },
      get switchUserHintOverload() {
        return switchUserHintOverload;
      },
      set switchUserHintOverload(e) {
        switchUserHintOverload = e;
      },
      get switchUser() {
        return Gp;
      },
      set switchUser(e) {
        Gp = e;
      }
    });
    (function (e) {
      e[e.buttonSouth = 0] = "buttonSouth";
      e[e.buttonEast = 1] = "buttonEast";
      e[e.buttonWest = 2] = "buttonWest";
      e[e.buttonNorth = 3] = "buttonNorth";
      e[e.leftShoulder = 4] = "leftShoulder";
      e[e.rightShoulder = 5] = "rightShoulder";
      e[e.leftTrigger = 6] = "leftTrigger";
      e[e.rightTrigger = 7] = "rightTrigger";
      e[e.select = 8] = "select";
      e[e.start = 9] = "start";
      e[e.leftStickPress = 10] = "leftStickPress";
      e[e.rightStickPress = 11] = "rightStickPress";
      e[e.up = 12] = "up";
      e[e.down = 13] = "down";
      e[e.left = 14] = "left";
      e[e.right = 15] = "right";
    })(Rp || (Rp = {}));
    (function (e) {
      e[e.leftStickX = 0] = "leftStickX";
      e[e.leftStickY = 1] = "leftStickY";
      e[e.RightStickX = 2] = "RightStickX";
      e[e.RightStickY = 3] = "RightStickY";
    })(kp || (kp = {}));
    X.add("game-ui/common/input-events/devices/gamepad.ts", {
      get GamepadButton() {
        return Rp;
      },
      set GamepadButton(e) {
        Rp = e;
      },
      get gamepadButtonFromString() {
        return Vp;
      },
      set gamepadButtonFromString(e) {
        Vp = e;
      },
      get GamepadAxis() {
        return kp;
      },
      set GamepadAxis(e) {
        kp = e;
      }
    });
    X.add("game-ui/common/hooks/use-camera-action-barrier.tsx", {
      get useCameraActionBarrier() {
        return Hp;
      },
      set useCameraActionBarrier(e) {
        Hp = e;
      }
    });
    var Wp = ({
      children: e,
      ifFocused: t = true,
      ifGamepad: n = false
    }) => {
      const s = km();
      0;
      const i = Nh(Y.useContext(Zu));
      let a = false;
      if (t && !i) {
        a = true;
      }
      if (n && !s) {
        a = true;
      }
      Kp(a);
      0;
      return z.jsx(z.Fragment, {
        children: e
      });
    };
    function zp(e, t) {
      return t > 0 ? e.positive : t < 0 ? e.negative : undefined;
    }
    function Yp(e) {
      qp(document.documentElement, e);
    }
    function $p(e) {
      qp(document.body, e);
    }
    function qp(e, t) {
      0;
      Y.useEffect(() => {
        if (null != t) {
          const n = t.split(" ");
          e.classList.add(...n);
          return () => {
            e.classList.remove(...n);
          };
        }
      }, [e, t]);
    }
    X.add("game-ui/common/hooks/use-tool-action-barrier.tsx", {
      get useToolActionBarrier() {
        return Kp;
      },
      set useToolActionBarrier(e) {
        Kp = e;
      },
      get ToolActionBarrier() {
        return Wp;
      },
      set ToolActionBarrier(e) {
        Wp = e;
      }
    });
    X.add("game-ui/common/utils/class-name.tsx", {
      get signStyle() {
        return zp;
      },
      set signStyle(e) {
        zp = e;
      },
      get useRootClassName() {
        return Yp;
      },
      set useRootClassName(e) {
        Yp = e;
      },
      get useBodyClassName() {
        return $p;
      },
      set useBodyClassName(e) {
        $p = e;
      }
    });
    var Xp = Gu({
      index: 0,
      version: 0
    }, "Unity.Entities.Entity");
    X.add("game-ui/common/data-binding/common-types.ts", {
      get nullEntity() {
        return Xp;
      },
      set nullEntity(e) {
        Xp = e;
      }
    });
    var Qp = $r("infoviews", "infoviews");
    var Zp = $r("infoviews", "activeInfoview");
    function Jp() {
      Fv(Pv.InfoviewMenu);
      tf();
    }
    function ef(e) {
      tl("infoviews", "setActiveInfoview", e);
    }
    function tf() {
      ef(Xp);
    }
    function nf(e, t, n) {
      tl("infoviews", "setInfomodeActive", e, t, n);
    }
    var sf = $r("electricityInfo", "electricityConsumption");
    var af = $r("electricityInfo", "electricityProduction");
    var of = $r("electricityInfo", "electricityTransmitted");
    var rf = $r("electricityInfo", "electricityExport");
    var lf = $r("electricityInfo", "electricityImport");
    var cf = $r("electricityInfo", "electricityAvailability");
    var uf = $r("electricityInfo", "electricityTransmission");
    var df = $r("electricityInfo", "electricityTrade");
    var mf = $r("electricityInfo", "batteryCharge");
    var hf = $r("waterInfo", "waterCapacity");
    var gf = $r("waterInfo", "waterConsumption");
    var pf = $r("waterInfo", "sewageCapacity");
    var ff = $r("waterInfo", "sewageConsumption");
    var xf = $r("waterInfo", "waterExport");
    var vf = $r("waterInfo", "waterImport");
    var _f = $r("waterInfo", "sewageExport");
    var bf = $r("waterInfo", "sewageAvailability");
    var Tf = $r("waterInfo", "waterAvailability");
    var Ef = $r("waterInfo", "waterTrade");
    var If = $r("educationInfo", "elementaryEligible");
    var yf = $r("educationInfo", "highSchoolEligible");
    var Sf = $r("educationInfo", "collegeEligible");
    var jf = $r("educationInfo", "universityEligible");
    var Cf = $r("educationInfo", "elementaryCapacity");
    var Nf = $r("educationInfo", "highSchoolCapacity");
    var wf = $r("educationInfo", "collegeCapacity");
    var Of = $r("educationInfo", "universityCapacity");
    var Pf = $r("educationInfo", "educationData");
    var Lf = $r("educationInfo", "elementaryStudentCount");
    var Af = $r("educationInfo", "highSchoolStudentCount");
    var Mf = $r("educationInfo", "collegeStudentCount");
    var Rf = $r("educationInfo", "universityStudentCount");
    var kf = $r("educationInfo", "elementaryAvailability");
    var Df = $r("educationInfo", "highSchoolAvailability");
    var Ff = $r("educationInfo", "collegeAvailability");
    var Uf = $r("educationInfo", "universityAvailability");
    var Bf = $r("transportInfo", "summaries");
    var Gf = $r("healthcareInfo", "averageHealth");
    var Vf = $r("healthcareInfo", "cemeteryUse");
    var Hf = $r("healthcareInfo", "cemeteryCapacity");
    var Kf = $r("healthcareInfo", "deathRate");
    var Wf = $r("healthcareInfo", "processingRate");
    var zf = $r("healthcareInfo", "sickCount");
    var Yf = $r("healthcareInfo", "patientCount");
    var $f = $r("healthcareInfo", "patientCapacity");
    var qf = $r("healthcareInfo", "healthcareAvailability");
    var Xf = $r("healthcareInfo", "deathcareAvailability");
    var Qf = $r("healthcareInfo", "cemeteryAvailability");
    var Zf = $r("garbageInfo", "processingRate");
    var Jf = $r("garbageInfo", "capacity");
    var ex = $r("garbageInfo", "processingAvailability");
    var tx = $r("garbageInfo", "landfillAvailability");
    var nx = $r("garbageInfo", "productionRate");
    var sx = $r("garbageInfo", "storedGarbage");
    var ix = $r("roadsInfo", "parkingCapacity");
    var ax = $r("roadsInfo", "parkingIncome");
    var ox = $r("roadsInfo", "parkedCars");
    var rx = $r("roadsInfo", "parkingAvailability");
    var lx = $r("trafficInfo", "trafficFlow");
    var cx = $r("pollutionInfo", "averageGroundPollution");
    var ux = $r("pollutionInfo", "averageAirPollution");
    var dx = $r("pollutionInfo", "averageWaterPollution");
    var mx = $r("pollutionInfo", "averageNoisePollution");
    var hx = $r("fireAndRescueInfo", "averageFireHazard");
    var gx = $r("policeInfo", "averageCrimeProbability");
    var px = $r("policeInfo", "jailAvailability");
    var fx = $r("policeInfo", "prisonAvailability");
    var xx = $r("policeInfo", "crimeProducers");
    var vx = $r("policeInfo", "crimeProbability");
    var _x = $r("policeInfo", "jailCapacity");
    var bx = $r("policeInfo", "arrestedCriminals");
    var Tx = $r("policeInfo", "inJail");
    var Ex = $r("policeInfo", "prisonCapacity");
    var Ix = $r("policeInfo", "prisoners");
    var yx = $r("policeInfo", "inPrison");
    var Sx = $r("policeInfo", "criminals");
    var jx = $r("policeInfo", "crimePerMonth");
    var Cx = $r("policeInfo", "escapedRate");
    var Nx = $r("landValueInfo", "averageLandValue");
    var wx = $r("levelInfo", "residential");
    var Ox = $r("levelInfo", "commercial");
    var Px = $r("levelInfo", "industrial");
    var Lx = $r("levelInfo", "office");
    var Ax = $r("disasterInfo", "shelteredCount");
    var Mx = $r("disasterInfo", "shelterCapacity");
    var Rx = $r("disasterInfo", "shelterAvailability");
    var kx = $r("tourismInfo", "attractiveness");
    var Dx = $r("tourismInfo", "averageHotelPrice");
    var Fx = $r("tourismInfo", "tourismRate");
    var Ux = $r("tourismInfo", "weatherEffect");
    var Bx = $r("postInfo", "mailProductionRate");
    var Gx = $r("postInfo", "collectedMail");
    var Vx = $r("postInfo", "deliveredMail");
    var Hx = $r("postInfo", "postServiceAvailability");
    var Kx = $r("populationInfo", "population");
    var Wx = $r("populationInfo", "employed");
    var zx = $r("populationInfo", "jobs");
    var Yx = $r("populationInfo", "unemployment");
    var $x = $r("populationInfo", "birthRate");
    var qx = $r("populationInfo", "movedIn");
    var Xx = $r("populationInfo", "movedAway");
    var Qx = $r("populationInfo", "ageData");
    var Zx = $r("companyInfoview", "commercialProfitability");
    var Jx = $r("companyInfoview", "industrialProfitability");
    var ev = $r("companyInfoview", "officeProfitability");
    var tv = $r("outsideInfo", "topImportNames");
    var nv = $r("outsideInfo", "topImportColors");
    var sv = $r("outsideInfo", "topImportData");
    var iv = $r("outsideInfo", "topExportNames");
    var av = $r("outsideInfo", "topExportColors");
    var ov = $r("outsideInfo", "topExportData");
    var rv = $r("naturalResourceInfo", "availableOil");
    var lv = $r("naturalResourceInfo", "availableOre");
    var cv = $r("naturalResourceInfo", "availableForest");
    var uv = $r("naturalResourceInfo", "availableFertility");
    var dv = $r("naturalResourceInfo", "oilExtractionRate");
    var mv = $r("naturalResourceInfo", "oreExtractionRate");
    var hv = $r("naturalResourceInfo", "forestExtractionRate");
    var gv = $r("naturalResourceInfo", "fertilityExtractionRate");
    var pv = $r("naturalResourceInfo", "forestRenewalRate");
    var fv = $r("naturalResourceInfo", "fertilityRenewalRate");
    var xv = $r("workplaces", "workplacesData");
    var vv = $r("workplaces", "employeesData");
    var _v = $r("workplaces", "workplaces");
    var bv = $r("workplaces", "employees");
    function Tv(e) {
      const t = sl(Zp);
      const n = sl(Qp);
      0;
      const s = Y.useMemo(() => n.find(t => t.id === e), [e, n]);
      0;
      const i = Y.useMemo(() => !!s && Ur(s.entity, t?.entity), [t?.entity, s]);
      0;
      const a = Y.useMemo(() => !s || s.locked, [s]);
      0;
      const o = Y.useCallback(() => {
        if (s) {
          ef(i ? Xp : s.entity);
        }
      }, [s, i]);
      if (!a && s) {
        return o;
      }
    }
    X.add("game-ui/game/data-binding/infoview-bindings.ts", {
      get infoviews() {
        return infoviews;
      },
      set infoviews(e) {
        infoviews = e;
      },
      get activeInfoview() {
        return activeInfoview;
      },
      set activeInfoview(e) {
        activeInfoview = e;
      },
      get closeInfoviewMenu() {
        return Jp;
      },
      set closeInfoviewMenu(e) {
        Jp = e;
      },
      get setActiveInfoview() {
        return ef;
      },
      set setActiveInfoview(e) {
        ef = e;
      },
      get clearActiveInfoview() {
        return tf;
      },
      set clearActiveInfoview(e) {
        tf = e;
      },
      get setInfomodeActive() {
        return nf;
      },
      set setInfomodeActive(e) {
        nf = e;
      },
      get electricityConsumption() {
        return electricityConsumption;
      },
      set electricityConsumption(e) {
        electricityConsumption = e;
      },
      get electricityProduction() {
        return electricityProduction;
      },
      set electricityProduction(e) {
        electricityProduction = e;
      },
      get electricityTransmitted() {
        return electricityTransmitted;
      },
      set electricityTransmitted(e) {
        electricityTransmitted = e;
      },
      get electricityExport() {
        return electricityExport;
      },
      set electricityExport(e) {
        electricityExport = e;
      },
      get electricityImport() {
        return electricityImport;
      },
      set electricityImport(e) {
        electricityImport = e;
      },
      get electricityAvailability() {
        return electricityAvailability;
      },
      set electricityAvailability(e) {
        electricityAvailability = e;
      },
      get electricityTransmission() {
        return electricityTransmission;
      },
      set electricityTransmission(e) {
        electricityTransmission = e;
      },
      get electricityTrade() {
        return electricityTrade;
      },
      set electricityTrade(e) {
        electricityTrade = e;
      },
      get batteryCharge() {
        return batteryCharge;
      },
      set batteryCharge(e) {
        batteryCharge = e;
      },
      get waterCapacity() {
        return waterCapacity;
      },
      set waterCapacity(e) {
        waterCapacity = e;
      },
      get waterConsumption() {
        return waterConsumption;
      },
      set waterConsumption(e) {
        waterConsumption = e;
      },
      get sewageCapacity() {
        return sewageCapacity;
      },
      set sewageCapacity(e) {
        sewageCapacity = e;
      },
      get sewageConsumption() {
        return sewageConsumption;
      },
      set sewageConsumption(e) {
        sewageConsumption = e;
      },
      get waterExport() {
        return waterExport;
      },
      set waterExport(e) {
        waterExport = e;
      },
      get waterImport() {
        return waterImport;
      },
      set waterImport(e) {
        waterImport = e;
      },
      get sewageExport() {
        return sewageExport;
      },
      set sewageExport(e) {
        sewageExport = e;
      },
      get sewageAvailability() {
        return sewageAvailability;
      },
      set sewageAvailability(e) {
        sewageAvailability = e;
      },
      get waterAvailability() {
        return waterAvailability;
      },
      set waterAvailability(e) {
        waterAvailability = e;
      },
      get waterTrade() {
        return waterTrade;
      },
      set waterTrade(e) {
        waterTrade = e;
      },
      get elementaryEligible() {
        return elementaryEligible;
      },
      set elementaryEligible(e) {
        elementaryEligible = e;
      },
      get highSchoolEligible() {
        return highSchoolEligible;
      },
      set highSchoolEligible(e) {
        highSchoolEligible = e;
      },
      get collegeEligible() {
        return collegeEligible;
      },
      set collegeEligible(e) {
        collegeEligible = e;
      },
      get universityEligible() {
        return universityEligible;
      },
      set universityEligible(e) {
        universityEligible = e;
      },
      get elementaryCapacity() {
        return elementaryCapacity;
      },
      set elementaryCapacity(e) {
        elementaryCapacity = e;
      },
      get highSchoolCapacity() {
        return highSchoolCapacity;
      },
      set highSchoolCapacity(e) {
        highSchoolCapacity = e;
      },
      get collegeCapacity() {
        return collegeCapacity;
      },
      set collegeCapacity(e) {
        collegeCapacity = e;
      },
      get universityCapacity() {
        return universityCapacity;
      },
      set universityCapacity(e) {
        universityCapacity = e;
      },
      get educationData() {
        return educationData;
      },
      set educationData(e) {
        educationData = e;
      },
      get elementaryStudents() {
        return elementaryStudents;
      },
      set elementaryStudents(e) {
        elementaryStudents = e;
      },
      get highSchoolStudents() {
        return highSchoolStudents;
      },
      set highSchoolStudents(e) {
        highSchoolStudents = e;
      },
      get collegeStudents() {
        return collegeStudents;
      },
      set collegeStudents(e) {
        collegeStudents = e;
      },
      get universityStudents() {
        return universityStudents;
      },
      set universityStudents(e) {
        universityStudents = e;
      },
      get elementaryAvailability() {
        return elementaryAvailability;
      },
      set elementaryAvailability(e) {
        elementaryAvailability = e;
      },
      get highSchoolAvailability() {
        return highSchoolAvailability;
      },
      set highSchoolAvailability(e) {
        highSchoolAvailability = e;
      },
      get collegeAvailability() {
        return collegeAvailability;
      },
      set collegeAvailability(e) {
        collegeAvailability = e;
      },
      get universityAvailability() {
        return universityAvailability;
      },
      set universityAvailability(e) {
        universityAvailability = e;
      },
      get transportSummaries() {
        return transportSummaries;
      },
      set transportSummaries(e) {
        transportSummaries = e;
      },
      get averageHealth() {
        return averageHealth;
      },
      set averageHealth(e) {
        averageHealth = e;
      },
      get cemeteryUse() {
        return cemeteryUse;
      },
      set cemeteryUse(e) {
        cemeteryUse = e;
      },
      get cemeteryCapacity() {
        return cemeteryCapacity;
      },
      set cemeteryCapacity(e) {
        cemeteryCapacity = e;
      },
      get deathRate() {
        return deathRate;
      },
      set deathRate(e) {
        deathRate = e;
      },
      get processingRate() {
        return processingRate;
      },
      set processingRate(e) {
        processingRate = e;
      },
      get sickCount() {
        return sickCount;
      },
      set sickCount(e) {
        sickCount = e;
      },
      get patientCount() {
        return patientCount;
      },
      set patientCount(e) {
        patientCount = e;
      },
      get patientCapacity() {
        return patientCapacity;
      },
      set patientCapacity(e) {
        patientCapacity = e;
      },
      get healthcareAvailability() {
        return healthcareAvailability;
      },
      set healthcareAvailability(e) {
        healthcareAvailability = e;
      },
      get deathcareAvailability() {
        return deathcareAvailability;
      },
      set deathcareAvailability(e) {
        deathcareAvailability = e;
      },
      get cemeteryAvailability() {
        return cemeteryAvailability;
      },
      set cemeteryAvailability(e) {
        cemeteryAvailability = e;
      },
      get garbageProcessingRate() {
        return garbageProcessingRate;
      },
      set garbageProcessingRate(e) {
        garbageProcessingRate = e;
      },
      get landfillCapacity() {
        return landfillCapacity;
      },
      set landfillCapacity(e) {
        landfillCapacity = e;
      },
      get processingAvailability() {
        return processingAvailability;
      },
      set processingAvailability(e) {
        processingAvailability = e;
      },
      get landfillAvailability() {
        return landfillAvailability;
      },
      set landfillAvailability(e) {
        landfillAvailability = e;
      },
      get garbageProductionRate() {
        return garbageProductionRate;
      },
      set garbageProductionRate(e) {
        garbageProductionRate = e;
      },
      get storedGarbage() {
        return storedGarbage;
      },
      set storedGarbage(e) {
        storedGarbage = e;
      },
      get parkingCapacity() {
        return parkingCapacity;
      },
      set parkingCapacity(e) {
        parkingCapacity = e;
      },
      get parkingIncome() {
        return parkingIncome;
      },
      set parkingIncome(e) {
        parkingIncome = e;
      },
      get parkedCars() {
        return parkedCars;
      },
      set parkedCars(e) {
        parkedCars = e;
      },
      get parkingAvailability() {
        return parkingAvailability;
      },
      set parkingAvailability(e) {
        parkingAvailability = e;
      },
      get trafficFlow() {
        return trafficFlow;
      },
      set trafficFlow(e) {
        trafficFlow = e;
      },
      get averageGroundPollution() {
        return averageGroundPollution;
      },
      set averageGroundPollution(e) {
        averageGroundPollution = e;
      },
      get averageAirPollution() {
        return averageAirPollution;
      },
      set averageAirPollution(e) {
        averageAirPollution = e;
      },
      get averageWaterPollution() {
        return averageWaterPollution;
      },
      set averageWaterPollution(e) {
        averageWaterPollution = e;
      },
      get averageNoisePollution() {
        return averageNoisePollution;
      },
      set averageNoisePollution(e) {
        averageNoisePollution = e;
      },
      get averageFireHazard() {
        return averageFireHazard;
      },
      set averageFireHazard(e) {
        averageFireHazard = e;
      },
      get averageCrimeProbability() {
        return averageCrimeProbability;
      },
      set averageCrimeProbability(e) {
        averageCrimeProbability = e;
      },
      get jailAvailability() {
        return jailAvailability;
      },
      set jailAvailability(e) {
        jailAvailability = e;
      },
      get prisonAvailability() {
        return prisonAvailability;
      },
      set prisonAvailability(e) {
        prisonAvailability = e;
      },
      get crimeProducers() {
        return crimeProducers;
      },
      set crimeProducers(e) {
        crimeProducers = e;
      },
      get crimeProbability() {
        return crimeProbability;
      },
      set crimeProbability(e) {
        crimeProbability = e;
      },
      get jailCapacity() {
        return jailCapacity;
      },
      set jailCapacity(e) {
        jailCapacity = e;
      },
      get arrestedCriminals() {
        return arrestedCriminals;
      },
      set arrestedCriminals(e) {
        arrestedCriminals = e;
      },
      get inJail() {
        return inJail;
      },
      set inJail(e) {
        inJail = e;
      },
      get prisonCapacity() {
        return prisonCapacity;
      },
      set prisonCapacity(e) {
        prisonCapacity = e;
      },
      get prisoners() {
        return prisoners;
      },
      set prisoners(e) {
        prisoners = e;
      },
      get inPrison() {
        return inPrison;
      },
      set inPrison(e) {
        inPrison = e;
      },
      get criminals() {
        return criminals;
      },
      set criminals(e) {
        criminals = e;
      },
      get crimePerMonth() {
        return crimePerMonth;
      },
      set crimePerMonth(e) {
        crimePerMonth = e;
      },
      get escapedRate() {
        return escapedRate;
      },
      set escapedRate(e) {
        escapedRate = e;
      },
      get averageLandValue() {
        return averageLandValue;
      },
      set averageLandValue(e) {
        averageLandValue = e;
      },
      get residentialLevels() {
        return residentialLevels;
      },
      set residentialLevels(e) {
        residentialLevels = e;
      },
      get commercialLevels() {
        return commercialLevels;
      },
      set commercialLevels(e) {
        commercialLevels = e;
      },
      get industrialLevels() {
        return industrialLevels;
      },
      set industrialLevels(e) {
        industrialLevels = e;
      },
      get officeLevels() {
        return officeLevels;
      },
      set officeLevels(e) {
        officeLevels = e;
      },
      get shelteredCount() {
        return shelteredCount;
      },
      set shelteredCount(e) {
        shelteredCount = e;
      },
      get shelterCapacity() {
        return shelterCapacity;
      },
      set shelterCapacity(e) {
        shelterCapacity = e;
      },
      get shelterAvailability() {
        return shelterAvailability;
      },
      set shelterAvailability(e) {
        shelterAvailability = e;
      },
      get attractiveness() {
        return attractiveness;
      },
      set attractiveness(e) {
        attractiveness = e;
      },
      get averageHotelPrice() {
        return averageHotelPrice;
      },
      set averageHotelPrice(e) {
        averageHotelPrice = e;
      },
      get tourismRate() {
        return tourismRate;
      },
      set tourismRate(e) {
        tourismRate = e;
      },
      get weatherEffect() {
        return weatherEffect;
      },
      set weatherEffect(e) {
        weatherEffect = e;
      },
      get mailProductionRate() {
        return mailProductionRate;
      },
      set mailProductionRate(e) {
        mailProductionRate = e;
      },
      get collectedMail() {
        return collectedMail;
      },
      set collectedMail(e) {
        collectedMail = e;
      },
      get deliveredMail() {
        return deliveredMail;
      },
      set deliveredMail(e) {
        deliveredMail = e;
      },
      get postServiceAvailability() {
        return postServiceAvailability;
      },
      set postServiceAvailability(e) {
        postServiceAvailability = e;
      },
      get population() {
        return population;
      },
      set population(e) {
        population = e;
      },
      get employed() {
        return employed;
      },
      set employed(e) {
        employed = e;
      },
      get jobs() {
        return jobs;
      },
      set jobs(e) {
        jobs = e;
      },
      get unemployment() {
        return unemployment;
      },
      set unemployment(e) {
        unemployment = e;
      },
      get birthRate() {
        return birthRate;
      },
      set birthRate(e) {
        birthRate = e;
      },
      get movedIn() {
        return movedIn;
      },
      set movedIn(e) {
        movedIn = e;
      },
      get movedAway() {
        return movedAway;
      },
      set movedAway(e) {
        movedAway = e;
      },
      get ageData() {
        return ageData;
      },
      set ageData(e) {
        ageData = e;
      },
      get commercialProfitability() {
        return commercialProfitability;
      },
      set commercialProfitability(e) {
        commercialProfitability = e;
      },
      get industrialProfitability() {
        return industrialProfitability;
      },
      set industrialProfitability(e) {
        industrialProfitability = e;
      },
      get officeProfitability() {
        return officeProfitability;
      },
      set officeProfitability(e) {
        officeProfitability = e;
      },
      get topImportNames() {
        return topImportNames;
      },
      set topImportNames(e) {
        topImportNames = e;
      },
      get topImportColors() {
        return topImportColors;
      },
      set topImportColors(e) {
        topImportColors = e;
      },
      get topImportData() {
        return topImportData;
      },
      set topImportData(e) {
        topImportData = e;
      },
      get topExportNames() {
        return topExportNames;
      },
      set topExportNames(e) {
        topExportNames = e;
      },
      get topExportColors() {
        return topExportColors;
      },
      set topExportColors(e) {
        topExportColors = e;
      },
      get topExportData() {
        return topExportData;
      },
      set topExportData(e) {
        topExportData = e;
      },
      get availableOil() {
        return availableOil;
      },
      set availableOil(e) {
        availableOil = e;
      },
      get availableOre() {
        return availableOre;
      },
      set availableOre(e) {
        availableOre = e;
      },
      get availableForest() {
        return availableForest;
      },
      set availableForest(e) {
        availableForest = e;
      },
      get availableFertility() {
        return availableFertility;
      },
      set availableFertility(e) {
        availableFertility = e;
      },
      get oilExtractionRate() {
        return oilExtractionRate;
      },
      set oilExtractionRate(e) {
        oilExtractionRate = e;
      },
      get oreExtractionRate() {
        return oreExtractionRate;
      },
      set oreExtractionRate(e) {
        oreExtractionRate = e;
      },
      get forestExtractionRate() {
        return forestExtractionRate;
      },
      set forestExtractionRate(e) {
        forestExtractionRate = e;
      },
      get fertilityExtractionRate() {
        return fertilityExtractionRate;
      },
      set fertilityExtractionRate(e) {
        fertilityExtractionRate = e;
      },
      get forestRenewalRate() {
        return forestRenewalRate;
      },
      set forestRenewalRate(e) {
        forestRenewalRate = e;
      },
      get fertilityRenewalRate() {
        return fertilityRenewalRate;
      },
      set fertilityRenewalRate(e) {
        fertilityRenewalRate = e;
      },
      get workplacesData() {
        return workplacesData;
      },
      set workplacesData(e) {
        workplacesData = e;
      },
      get employeesData() {
        return employeesData;
      },
      set employeesData(e) {
        employeesData = e;
      },
      get worksplaces() {
        return worksplaces;
      },
      set worksplaces(e) {
        worksplaces = e;
      },
      get workers() {
        return workers;
      },
      set workers(e) {
        workers = e;
      },
      get useInfoviewToggle() {
        return Tv;
      },
      set useInfoviewToggle(e) {
        Tv = e;
      }
    });
    var Iv;
    !function (e) {
      e[e.main = 0] = "main";
      e[e.freeCamera = 1] = "freeCamera";
      e[e.pauseMenu = 10] = "pauseMenu";
      e[e.saveGame = 11] = "saveGame";
      e[e.newGame = 12] = "newGame";
      e[e.loadGame = 13] = "loadGame";
      e[e.options = 14] = "options";
    }(Iv || (Iv = {}));
    var yv;
    var Sv = $r("game", "activeScreen");
    var jv = el("game", "setActiveScreen");
    var Cv = $r("game", "canUseSaveSystem");
    function Nv() {
      jv(Iv.main);
    }
    function wv() {
      jv(Iv.pauseMenu);
    }
    function Ov() {
      jv(Iv.freeCamera);
    }
    !function (e) {
      e[e.Undefined = 0] = "Undefined";
      e[e.Left = 1] = "Left";
      e[e.Center = 2] = "Center";
      e[e.Right = 3] = "Right";
    }(yv || (yv = {}));
    var Pv;
    var Lv;
    var Av = $r("game", "activePanel");
    var Mv = $r("game", "blockingPanelActive");
    var Rv = $r("game", "activePanelPosition");
    var kv = el("game", "togglePanel");
    var Dv = el("game", "showPanel");
    var Fv = el("game", "closePanel");
    var Uv = Jr("game", "closeActivePanel");
    function Bv() {
      if (Bu(Av.value, Pv.InfoviewMenu)) {
        tf();
        Fv(Pv.InfoviewMenu);
      } else {
        Dv(Pv.InfoviewMenu);
      }
    }
    !function (e) {
      e.InfoviewMenu = "Game.UI.InGame.InfoviewMenu";
      e.Progression = "Game.UI.InGame.ProgressionPanel";
      e.Economy = "Game.UI.InGame.EconomyPanel";
      e.CityInfo = "Game.UI.InGame.CityInfoPanel";
      e.Statistics = "Game.UI.InGame.StatisticsPanel";
      e.TransportationOverview = "Game.UI.InGame.TransportationOverviewPanel";
      e.Chirper = "Game.UI.InGame.ChirperPanel";
      e.LifePath = "Game.UI.InGame.LifePathPanel";
      e.Journal = "Game.UI.InGame.JournalPanel";
      e.Radio = "Game.UI.InGame.RadioPanel";
      e.PhotoMode = "Game.UI.InGame.PhotoModePanel";
      e.CinematicCamera = "Game.UI.InGame.CinematicCameraPanel";
      e.Notifications = "Game.UI.InGame.NotificationsPanel";
    }(Pv || (Pv = {}));
    (function (e) {
      e[e.Development = 0] = "Development";
      e[e.Milestones = 1] = "Milestones";
      e[e.Achievements = 2] = "Achievements";
    })(Lv || (Lv = {}));
    var Gv;
    var Vv = el("game", "showProgressionPanel");
    !function (e) {
      e[e.Budget = 0] = "Budget";
      e[e.Loan = 1] = "Loan";
      e[e.Taxation = 2] = "Taxation";
      e[e.Services = 3] = "Services";
      e[e.Production = 4] = "Production";
    }(Gv || (Gv = {}));
    var Hv;
    var Kv = el("game", "showEconomyPanel");
    !function (e) {
      e[e.Demand = 0] = "Demand";
      e[e.Policies = 1] = "Policies";
    }(Hv || (Hv = {}));
    var Wv;
    var zv = el("game", "showCityInfoPanel");
    var Yv = el("game", "showTransportationOverviewPanel");
    function $v() {
      kv(Pv.LifePath);
    }
    function qv() {
      Dv(Pv.LifePath);
    }
    !function (e) {
      e[e.PublicTransport = 0] = "PublicTransport";
      e[e.Cargo = 1] = "Cargo";
    }(Wv || (Wv = {}));
    var Xv = el("game", "showLifePathDetail");
    function Qv() {
      kv(Pv.Radio);
    }
    function Zv() {
      kv(Pv.TransportationOverview);
    }
    X.add("game-ui/game/data-binding/game-bindings.ts", {
      get GameScreen() {
        return Iv;
      },
      set GameScreen(e) {
        Iv = e;
      },
      get activeGameScreen() {
        return activeGameScreen;
      },
      set activeGameScreen(e) {
        activeGameScreen = e;
      },
      get setActiveGameScreen() {
        return jv;
      },
      set setActiveGameScreen(e) {
        jv = e;
      },
      get canUseSaveSystem() {
        return canUseSaveSystem;
      },
      set canUseSaveSystem(e) {
        canUseSaveSystem = e;
      },
      get showMainScreen() {
        return Nv;
      },
      set showMainScreen(e) {
        Nv = e;
      },
      get showPauseScreen() {
        return wv;
      },
      set showPauseScreen(e) {
        wv = e;
      },
      get showFreeCameraScreen() {
        return Ov;
      },
      set showFreeCameraScreen(e) {
        Ov = e;
      },
      get LayoutPosition() {
        return yv;
      },
      set LayoutPosition(e) {
        yv = e;
      },
      get activeGamePanel() {
        return activeGamePanel;
      },
      set activeGamePanel(e) {
        activeGamePanel = e;
      },
      get blockingPanelActive() {
        return blockingPanelActive;
      },
      set blockingPanelActive(e) {
        blockingPanelActive = e;
      },
      get activePanelPosition() {
        return activePanelPosition;
      },
      set activePanelPosition(e) {
        activePanelPosition = e;
      },
      get toggleGamePanel() {
        return kv;
      },
      set toggleGamePanel(e) {
        kv = e;
      },
      get showGamePanel() {
        return Dv;
      },
      set showGamePanel(e) {
        Dv = e;
      },
      get closeGamePanel() {
        return Fv;
      },
      set closeGamePanel(e) {
        Fv = e;
      },
      get closeActiveGamePanel() {
        return Uv;
      },
      set closeActiveGamePanel(e) {
        Uv = e;
      },
      get GamePanelType() {
        return Pv;
      },
      set GamePanelType(e) {
        Pv = e;
      },
      get toggleInfoviewMenu() {
        return Bv;
      },
      set toggleInfoviewMenu(e) {
        Bv = e;
      },
      get ProgressionPanelTab() {
        return Lv;
      },
      set ProgressionPanelTab(e) {
        Lv = e;
      },
      get showProgressionPanel() {
        return Vv;
      },
      set showProgressionPanel(e) {
        Vv = e;
      },
      get EconomyPanelTab() {
        return Gv;
      },
      set EconomyPanelTab(e) {
        Gv = e;
      },
      get showEconomyPanel() {
        return Kv;
      },
      set showEconomyPanel(e) {
        Kv = e;
      },
      get CityInfoPanelTab() {
        return Hv;
      },
      set CityInfoPanelTab(e) {
        Hv = e;
      },
      get showCityInfoPanel() {
        return zv;
      },
      set showCityInfoPanel(e) {
        zv = e;
      },
      get showTransportationOverviewPanel() {
        return Yv;
      },
      set showTransportationOverviewPanel(e) {
        Yv = e;
      },
      get TransportationOverviewPanelTab() {
        return Wv;
      },
      set TransportationOverviewPanelTab(e) {
        Wv = e;
      },
      get toggleLifePathPanel() {
        return $v;
      },
      set toggleLifePathPanel(e) {
        $v = e;
      },
      get showLifePathList() {
        return qv;
      },
      set showLifePathList(e) {
        qv = e;
      },
      get showLifePathDetail() {
        return Xv;
      },
      set showLifePathDetail(e) {
        Xv = e;
      },
      get toggleRadioPanel() {
        return Qv;
      },
      set toggleRadioPanel(e) {
        Qv = e;
      },
      get toggleTransportationOverviewPanel() {
        return Zv;
      },
      set toggleTransportationOverviewPanel(e) {
        Zv = e;
      }
    });
    let Jv = {
      "panel-backdrop": "panel-backdrop_HbC",
      panelBackdrop: "panel-backdrop_HbC",
      "backdrop-visible": "backdrop-visible_GA6",
      backdropVisible: "backdrop-visible_GA6"
    };
    X.add("game-ui/common/panel/panel-backdrop.module.scss", {
      get classes() {
        return Jv;
      },
      set classes(e) {
        Object.assign(Jv, e);
      }
    });
    var t_ = ({
      className: e,
      children: t,
      onMouseDown: n
    }) => {
      const s = sl(Sv);
      Kp();
      Hp(s === Iv.freeCamera);
      $p(Jv.backdropVisible);
      0;
      const i = Y.useCallback(e => {
        if (e.target === e.currentTarget && n) {
          n();
        }
      }, [n]);
      0;
      0;
      return z.jsx(n_.Provider, {
        value: true,
        children: z.jsx("div", {
          className: Qu()(Jv.panelBackdrop, e),
          onMouseDown: i,
          children: t
        })
      });
    };
    const n_ = Y.createContext(false);
    var s_ = () => {
      0;
      const e = Y.useContext(n_);
      0;
      return Y.useMemo(() => {
        if (e) {
          return {
            zIndex: 1e4
          };
        }
      }, [e]);
    };
    X.add("game-ui/common/panel/panel-backdrop.tsx", {
      get PanelBackdrop() {
        return t_;
      },
      set PanelBackdrop(e) {
        t_ = e;
      },
      get usePanelBackdropStyle() {
        return s_;
      },
      set usePanelBackdropStyle(e) {
        s_ = e;
      }
    });
    let i_ = {
      "pointer-barrier": "pointer-barrier_etG",
      pointerBarrier: "pointer-barrier_etG"
    };
    X.add("game-ui/common/input-events/pointer-barrier/pointer-barrier.module.scss", {
      get classes() {
        return i_;
      },
      set classes(e) {
        Object.assign(i_, e);
      }
    });
    var o_ = ({
      onClick: e
    }) => {
      const t = s_();
      0;
      0;
      return z.jsx(Wm, {
        children: z.jsx("div", {
          className: i_.pointerBarrier,
          onClick: e,
          style: t
        })
      });
    };
    X.add("game-ui/common/input-events/pointer-barrier/pointer-barrier.tsx", {
      get PointerBarrier() {
        return o_;
      },
      set PointerBarrier(e) {
        o_ = e;
      }
    });
    let r_ = {
      "input-stack-debug-display": "input-stack-debug-display_lFP",
      inputStackDebugDisplay: "input-stack-debug-display_lFP"
    };
    X.add("game-ui/common/input-events/debug/input-stack-debug-display.module.scss", {
      get classes() {
        return r_;
      },
      set classes(e) {
        Object.assign(r_, e);
      }
    });
    var c_ = ({
      actions: e
    }) => (0, z.jsx)("div", {
      className: r_.inputStackDebugDisplay,
      children: e
    });
    X.add("game-ui/common/input-events/debug/input-stack-debug-display.tsx", {
      get InputStackDebugDisplay() {
        return c_;
      },
      set InputStackDebugDisplay(e) {
        c_ = e;
      }
    });
    var d_ = $r("input", "actionNames");
    var m_ = Zr("input", "onActionPerformed");
    var h_ = Zr("input", "onActionReleased");
    var g_ = Zr("input", "onActionsRefreshed");
    const p_ = new Map();
    function f_(e, t, n) {
      if (n || p_.get(e) !== t) {
        tl("input", "setActionPriority", e, t);
        p_.set(e, t);
      }
    }
    X.add("game-ui/common/input-events/input-bindings.ts", {
      get inputActionNames() {
        return inputActionNames;
      },
      set inputActionNames(e) {
        inputActionNames = e;
      },
      get onInputActionPerformed() {
        return onInputActionPerformed;
      },
      set onInputActionPerformed(e) {
        onInputActionPerformed = e;
      },
      get onInputActionReleased() {
        return onInputActionReleased;
      },
      set onInputActionReleased(e) {
        onInputActionReleased = e;
      },
      get onInputActionsRefreshed() {
        return onInputActionsRefreshed;
      },
      set onInputActionsRefreshed(e) {
        onInputActionsRefreshed = e;
      },
      get setInputActionPriority() {
        return f_;
      },
      set setInputActionPriority(e) {
        f_ = e;
      }
    });
    class x_ {
      _items = [];
      contains(e) {
        return -1 !== this.indexOf(e);
      }
      indexOf(e) {
        return this._items.findIndex(t => t.action === e);
      }
      push(e, t) {
        this._items = [...this._items, new v_(e, t)];
      }
      removeWhere(e) {
        this._items = this._items.filter(t => !e(t.action));
      }
      clear() {
        this._items = [];
      }
      dispatchInputEvent(e, t) {
        for (let n = this._items.length - 1; n >= 0; n--) {
          const s = this._items[n];
          if (s.action === e) {
            if (false !== s.callback(t)) {
              return true;
            }
          }
        }
        return false;
      }
      debugPrint() {
        console.log(`Input Stack:\n${this._items.map(e => e.action).join("\n")}`);
      }
    }
    class v_ {
      constructor(e, t) {
        this.action = e;
        this.callback = t;
      }
    }
    X.add("game-ui/common/input-events/input-stack.tsx", {});
    var __ = ({
      children: e
    }) => {
      0;
      const t = Y.useMemo(() => new x_(), []);
      const n = sl(d_);
      0;
      const s = Y.useRef(n);
      s.current = n;
      0;
      const [i, a] = Y.useState([]);
      0;
      const o = Y.useCallback(e => {
        const n = s.current;
        for (let s = 0; s < n.length; s++) {
          f_(n[s], t.indexOf(n[s]), e);
        }
      }, [t]);
      0;
      Y.useEffect(() => {
        o(false);
      }, [n, o]);
      0;
      const r = Y.useMemo(() => new Pg(t, () => o(false)), [t, o]);
      0;
      Y.useEffect(() => {
        const e = m_.subscribe(e => {
          t.dispatchInputEvent(e.action, e.value);
        });
        return () => e.dispose();
      }, [t]);
      0;
      Y.useEffect(() => {
        const e = h_.subscribe(e => {
          t.dispatchInputEvent(e.action, e.value);
        });
        return () => e.dispose();
      }, [t]);
      0;
      Y.useEffect(() => {
        const e = g_.subscribe(() => {
          o(true);
        });
        return () => e.dispose();
      }, [o]);
      0;
      0;
      return z.jsx(Ng.Provider, {
        value: r,
        children: z.jsxs(Cg.Provider, {
          value: r,
          children: [e, false]
        })
      });
    };
    function b_(e, t = true) {
      0;
      Y.useEffect(() => {
        if (t) {
          let t = 0;
          const n = () => {
            e();
            t = window.requestAnimationFrame(n);
          };
          t = window.requestAnimationFrame(n);
          return () => window.cancelAnimationFrame(t);
        }
      }, [e, t]);
    }
    X.add("game-ui/common/input-events/providers/event-input-provider.tsx", {
      get EventInputProvider() {
        return __;
      },
      set EventInputProvider(e) {
        __ = e;
      }
    });
    X.add("game-ui/common/utils/use-loop.ts", {
      get useLoop() {
        return b_;
      },
      set useLoop(e) {
        b_ = e;
      }
    });
    var T_ = ({
      children: e
    }) => {
      const t = km();
      const n = sl(Im);
      0;
      const s = Y.useRef(false);
      0;
      b_(Y.useCallback(() => {
        const e = document.elementFromPoint(n.x, n.y) !== document.body;
        if (e !== s.current) {
          Mm(e);
          s.current = e;
        }
      }, [n.x, n.y]), t);
      0;
      return z.jsx(z.Fragment, {
        children: e
      });
    };
    X.add("game-ui/common/input-events/providers/gamepad-pointer-event-provider.tsx", {
      get GamepadPointerEventProvider() {
        return T_;
      },
      set GamepadPointerEventProvider(e) {
        T_ = e;
      }
    });
    var E_;
    !function (e) {
      e[e.buttonSouth = 0] = "buttonSouth";
      e[e.buttonEast = 1] = "buttonEast";
      e[e.buttonWest = 2] = "buttonWest";
      e[e.buttonNorth = 3] = "buttonNorth";
      e[e.leftShoulder = 4] = "leftShoulder";
      e[e.rightShoulder = 5] = "rightShoulder";
      e[e.leftTrigger = 6] = "leftTrigger";
      e[e.rightTrigger = 7] = "rightTrigger";
      e[e.select = 8] = "select";
      e[e.start = 9] = "start";
      e[e.leftStickPress = 10] = "leftStickPress";
      e[e.rightStickPress = 11] = "rightStickPress";
      e[e.up = 12] = "up";
      e[e.down = 13] = "down";
      e[e.left = 14] = "left";
      e[e.right = 15] = "right";
    }(E_ || (E_ = {}));
    var I_ = ({
      children: e
    }) => {
      0;
      const t = Y.useMemo(() => new x_(), []);
      0;
      Y.useEffect(() => {
        const e = C_(E_.buttonSouth, false);
        const n = C_(E_.buttonEast, false);
        const s = C_(E_.buttonNorth, false);
        const i = C_(E_.leftShoulder, false);
        const a = C_(E_.rightShoulder, false);
        const o = C_(E_.select, false);
        const r = C_(E_.start, false);
        const l = C_(E_.up, true);
        const c = C_(E_.down, true);
        const u = C_(E_.left, true);
        const d = C_(E_.right, true);
        let m;
        const h = g => {
          try {
            if (1 === e(g)) {
              y_(t, [{
                action: "Select",
                value: null
              }, {
                action: "Save Game",
                value: null
              }]);
            }
            if (1 === n(g)) {
              t.dispatchInputEvent("Back", null);
            }
            const m = s(g);
            if (1 === m) {
              t.dispatchInputEvent("Debug Multiplier", 1);
            } else if (-1 === m) {
              t.dispatchInputEvent("Debug Multiplier", 0);
            }
            if (1 === i(g)) {
              y_(t, [{
                action: "Switch Tab",
                value: -1
              }, {
                action: "Switch Ordering",
                value: -1
              }]);
            }
            if (1 === a(g)) {
              y_(t, [{
                action: "Switch Tab",
                value: 1
              }, {
                action: "Switch Ordering",
                value: 1
              }]);
            }
            if (1 === o(g)) {
              t.dispatchInputEvent("Debug UI", null);
            }
            if (1 === r(g)) {
              y_(t, [{
                action: "Pause Menu",
                value: null
              }, {
                action: "Start Game",
                value: null
              }, {
                action: "Load Game",
                value: null
              }]);
            }
            if (1 === l(g)) {
              t.dispatchInputEvent("Move Vertical", 1);
            }
            if (1 === c(g)) {
              t.dispatchInputEvent("Move Vertical", -1);
            }
            if (1 === u(g)) {
              y_(t, [{
                action: "Move Horizontal",
                value: -1
              }, {
                action: "Debug Change Field",
                value: -1
              }, {
                action: "Change Slider Value",
                value: -1
              }]);
            }
            if (1 === d(g)) {
              y_(t, [{
                action: "Move Horizontal",
                value: 1
              }, {
                action: "Debug Change Field",
                value: 1
              }, {
                action: "Change Slider Value",
                value: 1
              }]);
            }
          } catch (e) {
            console.error(e);
          }
          m = window.requestAnimationFrame(h);
        };
        const g = e => {
          if (27 === e.keyCode) {
            y_(t, [{
              action: "Back",
              value: null
            }, {
              action: "Pause Menu",
              value: null
            }]);
          } else if (9 === e.keyCode) {
            t.dispatchInputEvent("Debug UI", null);
          } else if (16 === e.keyCode) {
            t.dispatchInputEvent("Debug Multiplier", 1);
          } else if (32 === e.keyCode) {
            y_(t, [{
              action: "Pause Simulation",
              value: null
            }, {
              action: "Resume Simulation",
              value: null
            }]);
          } else if (66 === e.keyCode) {
            t.dispatchInputEvent("Bulldozer", null);
          }
        };
        const p = e => {
          if (16 === e.keyCode) {
            t.dispatchInputEvent("Debug Multiplier", 0);
          }
        };
        m = window.requestAnimationFrame(h);
        window.addEventListener("keydown", g);
        window.addEventListener("keyup", p);
        return () => {
          window.cancelAnimationFrame(m);
          window.removeEventListener("keydown", g);
          window.removeEventListener("keyup", p);
        };
      }, [t]);
      0;
      const [n, s] = Y.useState([]);
      0;
      const i = Y.useCallback(() => {
        s(t._items.map(e => e.action));
      }, [t]);
      0;
      const a = Y.useMemo(() => new Pg(t, i), [t, i]);
      0;
      0;
      0;
      return z.jsx(Ng.Provider, {
        value: a,
        children: z.jsxs(Cg.Provider, {
          value: a,
          children: [e, z.jsx(c_, {
            actions: n
          })]
        })
      });
    };
    function y_(e, t) {
      let n = -1;
      let s = Number.MAX_SAFE_INTEGER;
      for (let i = 0; i < t.length; i++) {
        const a = e.indexOf(t[i].action);
        if (-1 !== a && a < s) {
          n = i;
          s = a;
        }
      }
      if (-1 !== n) {
        const s = t[n];
        return e.dispatchInputEvent(s.action, s.value);
      }
      return false;
    }
    function C_(e, t) {
      let n = false;
      let s = 0;
      return i => {
        const a = navigator.getGamepads();
        if (a.length > 0 && null != a[0] && a[0].buttons.length > e) {
          if (a[0].buttons[e].pressed) {
            if (!n) {
              n = true;
              s = i + 500;
              return 1;
            }
            if (t) {
              const e = i - s;
              if (e > 0) {
                if (e < 500) {
                  s += 100;
                } else {
                  s = i + 100;
                }
                return 1;
              }
            }
          } else if (n) {
            n = false;
            return -1;
          }
        }
        return 0;
      };
    }
    function N_(e, t, n) {
      if (!e.current) {
        return;
      }
      const s = window.getComputedStyle(e.current).getPropertyValue(t);
      const i = window.getComputedStyle(e.current).getPropertyValue(n);
      if (s && "none" !== s && i) {
        e.current.style.animation = "";
        window.requestAnimationFrame(() => window.requestAnimationFrame(() => {
          if (e.current) {
            e.current.style.animationName = s;
            e.current.style.animationDuration = i;
          }
        }));
      }
    }
    X.add("game-ui/common/input-events/providers/native-input-provider.tsx", {
      get NativeInputProvider() {
        return I_;
      },
      set NativeInputProvider(e) {
        I_ = e;
      }
    });
    X.add("game-ui/common/input-events/index.ts", {});
    X.add("game-ui/common/utils/animation.ts", {
      get playCssAnimation() {
        return N_;
      },
      set playCssAnimation(e) {
        N_ = e;
      }
    });
    let w_ = {
      button: "button_d0d",
      hint: "hint_GfT"
    };
    X.add("game-ui/common/input/button/themes/default-button.module.scss", {
      get classes() {
        return w_;
      },
      set classes(e) {
        Object.assign(w_, e);
      }
    });
    var P_ = {
      select: op.selectItem,
      hover: op.hoverItem,
      focus: op.hoverItem
    };
    0;
    var L_ = Y.forwardRef(function ({
      focusKey: e,
      debugName: t = "Button",
      selected: n,
      disabled: s,
      theme: i,
      sounds: a = P_,
      selectAction: o = "Select",
      selectSound: r,
      className: l,
      tooltipLabel: c,
      disableHint: u = false,
      onClick: d,
      onMouseEnter: m,
      onSelect: h,
      children: g,
      as: p = "button",
      hintAction: f = "Select",
      forceHint: x,
      shortcut: v,
      allowFocusableChildren: _,
      ...b
    }, T) {
      0;
      const [E, I] = Y.useState(false);
      0;
      const y = Y.useRef(null);
      const S = hd(T, y);
      const j = mp(yg(e ?? (s ? Eg : Ig), t), y, undefined, _);
      const C = Nh(j);
      const N = km();
      0;
      const w = Y.useMemo(() => undefined !== r ? {
        ...a,
        select: r
      } : a, [r, a]);
      0;
      Y.useEffect(() => {
        if (y.current) {
          const e = y.current?.firstElementChild || y.current;
          const t = e.scrollWidth > e.clientWidth;
          I(t);
        }
      }, [y, c]);
      0;
      const O = Y.useMemo(() => null != h ? {
        [o]: () => {
          N_(y, "--selectAnimation", "--selectDuration");
          rp(w?.select);
          h();
        }
      } : null, [h, o, w?.select]);
      0;
      const P = Y.useMemo(() => null != h && v ? {
        [v]: () => {
          if (!s) {
            rp(w?.select);
          }
          if (h) {
            h();
          }
        }
      } : null, [s, w?.select, h, v]);
      0;
      const L = Y.useCallback(e => {
        if (h || d) {
          if (!s) {
            rp(w?.select);
          }
          if (h) {
            h();
          }
          if (d) {
            d(e);
          }
          e.stopPropagation();
        }
      }, [s, d, h, w?.select]);
      0;
      const A = Y.useCallback(e => {
        if (!s) {
          rp(w?.hover);
        }
        if (m) {
          m(e);
        }
      }, [s, w?.hover, m]);
      0;
      Y.useEffect(() => {
        if (C && N) {
          rp(w?.focus);
        }
      }, [C, N, w?.focus]);
      const R = !s && (x || C) && !u;
      0;
      0;
      0;
      let k = z.jsx(fd, {
        children: z.jsxs(p, {
          ...b,
          ref: S,
          disabled: s,
          className: Qu()(i?.button, n && "selected", C && N && "focused", l),
          onClick: L,
          onMouseEnter: A,
          children: [z.jsx(LT, {
            action: f,
            active: R,
            className: i?.hint || w_.hint
          }), g]
        })
      });
      if (E && c) {
        0;
        k = z.jsx(bg, {
          tooltip: c,
          children: k
        });
      }
      0;
      k = z.jsx(Ph, {
        controller: j,
        children: k
      });
      if (O) {
        0;
        k = z.jsx(Lg, {
          actions: O,
          disabled: s,
          children: k
        });
      }
      if (P) {
        0;
        k = z.jsx(Lg, {
          actions: P,
          disabled: s,
          ignoreFocusState: true,
          children: k
        });
      }
      return k;
    });
    X.add("game-ui/common/input/button/button.tsx", {
      get defaultButtonSounds() {
        return P_;
      },
      set defaultButtonSounds(e) {
        P_ = e;
      },
      get Button() {
        return L_;
      },
      set Button(e) {
        L_ = e;
      }
    });
    class A_ {
      constructor(e) {
        this.time = e;
        this.refCount = 0;
      }
    }
    var M_ = new Map();
    function R_(e, t = true) {
      0;
      const [n, s] = Y.useState(0);
      0;
      Y.useEffect(() => {
        if (t) {
          const t = performance.now();
          const n = M_.get(e) ?? new A_(t);
          if (0 === n.refCount) {
            M_.set(e, n);
          }
          n.refCount++;
          s(Math.min(n.time - t, 0));
          return () => {
            n.refCount--;
            if (0 === n.refCount) {
              M_.delete(e);
            }
          };
        }
      }, [t, e]);
      return n + "ms";
    }
    X.add("game-ui/common/animations/animation-sync.tsx", {
      get AnimationSyncCache() {
        return M_;
      },
      set AnimationSyncCache(e) {
        M_ = e;
      },
      get useAnimationSyncDelay() {
        return R_;
      },
      set useAnimationSyncDelay(e) {
        R_ = e;
      }
    });
    let k_ = {
      balloon: "balloon_YD_ balloon_DNs balloon_H23",
      base: "base_CfJ",
      enter: "enter_ek6",
      "exit-active": "exit-active_s_4",
      exitActive: "exit-active_s_4",
      "enter-active": "enter-active_QVu",
      enterActive: "enter-active_QVu",
      exit: "exit_RYd",
      container: "container_p5S container_sGN container_jfe",
      arrow: "arrow_WhB arrow_tFt arrow_Xfn",
      content: "content_Bye content_HM0 content_JQV"
    };
    X.add("game-ui/common/balloon/themes/tutorial-balloon.module.scss", {
      get classes() {
        return k_;
      },
      set classes(e) {
        Object.assign(k_, e);
      }
    });
    let F_ = {
      "fixed-ratio-image": "fixed-ratio-image_XTW",
      fixedRatioImage: "fixed-ratio-image_XTW",
      ratio: "ratio_xCj",
      image: "image_EBv"
    };
    X.add("game-ui/common/image/fixed-ratio-image.module.scss", {
      get classes() {
        return F_;
      },
      set classes(e) {
        Object.assign(F_, e);
      }
    });
    var B_ = ({
      src: e,
      className: t,
      onError: n,
      ...s
    }) => (0, z.jsxs)("div", {
      ...s,
      className: Qu()(F_.fixedRatioImage, t),
      children: [(0, z.jsx)("div", {
        className: F_.ratio
      }), (0, z.jsx)("img", {
        src: e,
        className: F_.image,
        onError: n
      })]
    });
    var G_ = ({
      src: e,
      className: t,
      onImageError: n,
      ...s
    }) => (0, z.jsxs)(L_, {
      ...s,
      className: Qu()(F_.fixedRatioImage, t),
      children: [(0, z.jsx)("div", {
        className: F_.ratio
      }), (0, z.jsx)("img", {
        src: e,
        className: F_.image,
        onError: n
      })]
    });
    X.add("game-ui/common/image/fixed-ratio-image.tsx", {
      get FixedRatioImage() {
        return B_;
      },
      set FixedRatioImage(e) {
        B_ = e;
      },
      get FixedRatioImageButton() {
        return G_;
      },
      set FixedRatioImageButton(e) {
        G_ = e;
      }
    });
    const V_ = e => e.currentTarget.src = "Media/Placeholder.svg";
    X.add("game-ui/common/image/missing-icon-handler.ts", {});
    let H_ = {
      "tinted-icon": "tinted-icon_iKo",
      tintedIcon: "tinted-icon_iKo"
    };
    X.add("game-ui/common/image/tinted-icon.module.scss", {
      get classes() {
        return H_;
      },
      set classes(e) {
        Object.assign(H_, e);
      }
    });
    var W_ = Y.forwardRef(function ({
      src: e,
      className: t,
      style: n,
      ...s
    }, i) {
      0;
      return z.jsx("div", {
        ...s,
        ref: i,
        className: Qu()(e && H_.tintedIcon, t),
        style: {
          ...n,
          maskImage: e ? `url(${e})` : undefined
        }
      });
    });
    X.add("game-ui/common/image/tinted-icon.tsx", {
      get TintedIcon() {
        return W_;
      },
      set TintedIcon(e) {
        W_ = e;
      }
    });
    let z_ = {
      button: "button_M6C",
      icon: "icon_PhD"
    };
    X.add("game-ui/common/input/button/icon-button.module.scss", {
      get classes() {
        return z_;
      },
      set classes(e) {
        Object.assign(z_, e);
      }
    });
    var $_ = Y.forwardRef(function ({
      src: e,
      tinted: t,
      theme: n,
      className: s,
      children: i,
      ...a
    }, o) {
      0;
      const r = Y.useMemo(() => n ? {
        ...z_,
        ...n
      } : z_, [n]);
      0;
      return z.jsxs(L_, {
        ref: o,
        ...a,
        className: Qu()(r.button, s),
        theme: r,
        children: [t ? (0, z.jsx)(W_, {
          src: e,
          className: r.icon
        }) : (0, z.jsx)("img", {
          src: e,
          className: r.icon,
          onError: V_
        }), i]
      });
    });
    X.add("game-ui/common/input/button/icon-button.tsx", {
      get IconButton() {
        return $_;
      },
      set IconButton(e) {
        $_ = e;
      }
    });
    let q_ = {
      button: "button_bvQ"
    };
    X.add("game-ui/common/input/button/themes/round-highlight-button.module.scss", {
      get classes() {
        return q_;
      },
      set classes(e) {
        Object.assign(q_, e);
      }
    });
    var Q_ = n(4);
    var Z_ = n.n(Q_);
    function J_(e, t, n, s, i, a) {
      const o = Vm();
      0;
      Y.useEffect(() => {
        let r;
        let l;
        let c = a?.current || 0;
        let u = false;
        window.cancelAnimationFrame(c);
        if (!e || !t.current || !i) {
          return;
        }
        const d = m => {
          if (!e || !t.current || !i) {
            return;
          }
          if (undefined === r) {
            r = m;
          }
          if (m - r < i.delay) {
            c = window.requestAnimationFrame(d);
            return void (undefined !== a && (a.current = c));
          }
          if (undefined === l) {
            l = m;
          }
          const h = (m - l) / 1e3;
          const g = Math.round(i.speed * h * o);
          const p = "Vertical" === n ? t.current.scrollHeight - t.current.offsetHeight : t.current.scrollWidth - t.current.offsetWidth;
          if (p < i.minOverflow * o) {
            t.current.scrollTop = 0;
            return void s();
          }
          const f = u ? p - g : g;
          if ("Vertical" === n) {
            if (f !== t.current.scrollTop) {
              t.current.scrollTop = f;
              s();
            }
          } else if (f !== t.current.scrollLeft) {
            t.current.scrollLeft = f;
            s();
          }
          if (!u && f < p || u && f > 0) {
            c = window.requestAnimationFrame(d);
            if (undefined !== a) {
              a.current = c;
            }
          } else if (i.repeat) {
            u = !u;
            r = undefined;
            l = undefined;
            c = window.requestAnimationFrame(d);
            if (undefined !== a) {
              a.current = c;
            }
          }
        };
        c = window.requestAnimationFrame(d);
        if (undefined !== a) {
          a.current = c;
        }
        return () => window.cancelAnimationFrame(c);
      }, [a, t, n, e, s, o, i]);
    }
    function eb(e, t, n) {
      0;
      const [s, i] = Y.useState(false);
      0;
      const [a, o] = Y.useState();
      0;
      const r = Y.useCallback(t => {
        if (e(t)) {
          o(t.currentTarget);
          t.preventDefault();
          i(true);
        }
      }, [e, o]);
      0;
      const l = Y.useCallback(e => {
        e.preventDefault();
        t({
          clientX: e.clientX,
          clientY: e.clientY,
          currentTarget: a
        });
      }, [t, a]);
      0;
      const c = Y.useCallback(e => {
        e.preventDefault();
        i(false);
        n({
          clientX: e.clientX,
          clientY: e.clientY,
          currentTarget: a
        });
      }, [n, a]);
      0;
      Y.useEffect(() => {
        if (s) {
          document.addEventListener("mousemove", l);
          document.addEventListener("mouseup", c);
          return () => {
            document.removeEventListener("mousemove", l);
            document.removeEventListener("mouseup", c);
          };
        }
      }, [s, l, c]);
      return [s, r];
    }
    X.add("game-ui/common/hooks/use-auto-scroll.tsx", {
      get useAutoScroll() {
        return J_;
      },
      set useAutoScroll(e) {
        J_ = e;
      }
    });
    X.add("game-ui/common/hooks/use-mouse-drag-events.tsx", {
      get useMouseDragEvents() {
        return eb;
      },
      set useMouseDragEvents(e) {
        eb = e;
      }
    });
    let tb = {
      scrollable: "scrollable_DXr",
      viewport: "viewport_bY2",
      content: "content_gqa",
      x: "x_TNK",
      y: "y_SMM",
      "track-visible-y": "track-visible-y_RCA",
      trackVisibleY: "track-visible-y_RCA",
      track: "track_e3O",
      "track-visible-x": "track-visible-x_qNT",
      trackVisibleX: "track-visible-x_qNT",
      thumb: "thumb_Cib",
      pressed: "pressed_iMJ",
      "bottom-padding": "bottom-padding_JS3",
      bottomPadding: "bottom-padding_JS3",
      "hint-item": "hint-item__j0",
      hintItem: "hint-item__j0"
    };
    X.add("game-ui/common/scrolling/scrollable.module.scss", {
      get classes() {
        return tb;
      },
      set classes(e) {
        Object.assign(tb, e);
      }
    });
    const sb = Z_()(.445, .05, .55, .95);
    const ib = {
      speed: 20,
      delay: 3e3,
      repeat: true,
      minOverflow: 8
    };
    0;
    var ab = Y.forwardRef(function ({
      horizontal: e = false,
      vertical: t = true,
      trackVisibility: n = "scrollable",
      overshootX: s = .05,
      overshootY: i = .05,
      smooth: a = true,
      controller: o,
      className: r,
      style: l,
      children: c,
      onScroll: u,
      onOverflowX: d,
      onOverflowY: m,
      autoScroll: h = false,
      autoScrollSettings: g = ib
    }, p) {
      0;
      const [f, x] = Y.useState(h);
      0;
      const [v, _] = Y.useState(false);
      0;
      const [b, T] = Y.useState(false);
      0;
      const E = Y.useRef(null);
      const I = hd(p, E);
      0;
      const y = Y.useRef(null);
      0;
      const S = Y.useRef(null);
      0;
      const j = Y.useRef(null);
      0;
      const C = Y.useRef(null);
      0;
      const N = Y.useCallback(() => {
        if (!E.current || !y.current || !S.current) {
          return;
        }
        const e = E.current.offsetWidth;
        const t = E.current.scrollWidth;
        const n = wd(E.current.scrollLeft, 0, t - e);
        const s = y.current.offsetWidth;
        if (0 === e || 0 === t || 0 === s) {
          return;
        }
        const i = t - 1 > e;
        _(i);
        if (d) {
          d(i);
        }
        if (i) {
          const i = wd(s * e / t, Math.min(20, s / 2), s);
          const a = n / (t - e) * (s - i);
          S.current.style.width = `${i}px`;
          S.current.style.left = `${a}px`;
        }
      }, [d]);
      0;
      const w = Y.useCallback(() => {
        if (!E.current || !j.current || !C.current) {
          return;
        }
        const e = E.current.offsetHeight;
        const t = E.current.scrollHeight;
        const n = wd(E.current.scrollTop, 0, t - e);
        const s = j.current.offsetHeight;
        if (0 === e || 0 === t || 0 === s) {
          return;
        }
        const i = t - 1 > e;
        T(i);
        if (m) {
          m(i);
        }
        if (i) {
          const i = wd(s * e / t, Math.min(20, s / 2), s);
          const a = n / (t - e) * (s - i);
          C.current.style.height = `${i}px`;
          C.current.style.top = `${a}px`;
        }
      }, [m]);
      0;
      const O = Y.useCallback(() => {
        if (e) {
          N();
        }
        if (t) {
          w();
        }
      }, [e, N, w, t]);
      0;
      const P = Y.useCallback(() => {
        x(false);
      }, []);
      0;
      const L = Y.useCallback(() => {
        x(true);
      }, []);
      const A = sl(Em);
      0;
      Y.useEffect(() => {
        const e = E.current;
        if (null === e) {
          return;
        }
        const t = t => {
          t.preventDefault();
          e.scrollLeft += t.deltaX * A;
          e.scrollTop += t.deltaY * A;
          if (u) {
            u();
          }
          O();
        };
        e?.addEventListener("wheel", t);
        return () => e?.removeEventListener("wheel", t);
      }, [A, u, O]);
      0;
      const M = Y.useRef(0);
      0;
      const R = Y.useRef(0);
      0;
      const k = Y.useCallback(({
        clientX: e
      }) => {
        x(false);
        if (!S.current) {
          return false;
        }
        const {
          width: t,
          left: n
        } = S.current.getBoundingClientRect();
        return 0 !== t && (M.current = (e - n) / t, true);
      }, []);
      0;
      const D = Y.useCallback(({
        clientY: e
      }) => {
        x(false);
        if (!C.current) {
          return false;
        }
        const {
          height: t,
          top: n
        } = C.current.getBoundingClientRect();
        return 0 !== t && (R.current = (e - n) / t, true);
      }, []);
      0;
      const F = Y.useCallback(({
        clientX: e
      }) => {
        if (!E.current || !y.current || !S.current) {
          return;
        }
        const t = E.current.offsetWidth;
        const n = E.current.scrollWidth;
        const s = y.current.getBoundingClientRect();
        const i = S.current.getBoundingClientRect();
        if (0 === t || 0 === n || 0 === s.width) {
          return;
        }
        const a = s.width - i.width;
        if (0 === a) {
          return;
        }
        const o = E.current.scrollLeft;
        const r = wd((e - s.left - i.width * M.current) / a, 0, 1) * (n - t);
        if (o !== r) {
          E.current.scrollLeft = r;
          if (u) {
            u();
          }
          N();
        }
      }, [u, N]);
      0;
      const U = Y.useCallback(({
        clientY: e
      }) => {
        if (!E.current || !j.current || !C.current) {
          return;
        }
        const t = E.current.offsetHeight;
        const n = E.current.scrollHeight;
        const s = j.current.getBoundingClientRect();
        const i = C.current.getBoundingClientRect();
        if (0 === t || 0 === n || 0 === s.height) {
          return;
        }
        const a = s.height - i.height;
        if (0 === a) {
          return;
        }
        const o = E.current.scrollTop;
        const r = wd((e - s.top - i.height * R.current) / a, 0, 1) * (n - t);
        if (o !== r) {
          E.current.scrollTop = r;
          if (u) {
            u();
          }
          w();
        }
      }, [u, w]);
      0;
      const B = Y.useCallback(() => {
        x(true);
      }, []);
      const [G, V] = eb(k, F, B);
      const [H, K] = eb(D, U, B);
      pm(O);
      0;
      Y.useEffect(() => {
        let e = window.requestAnimationFrame(() => {
          e = window.requestAnimationFrame(() => {
            e = 0;
            O();
          });
        });
        return () => {
          window.cancelAnimationFrame(e);
        };
      }, [O]);
      0;
      const W = Y.useRef(0);
      0;
      const $ = Y.useCallback((e, t) => {
        if (E.current) {
          window.cancelAnimationFrame(W.current);
          e = wd(e, 0, E.current.scrollWidth - E.current.offsetWidth);
          t = wd(t, 0, E.current.scrollHeight - E.current.offsetHeight);
          if (!(e === E.current.scrollLeft && t === E.current.scrollTop)) {
            E.current.scrollLeft = e;
            E.current.scrollTop = t;
            if (u) {
              u();
            }
          }
          O();
        }
      }, [u, O]);
      0;
      const q = Y.useCallback((e, t) => {
        if (!E.current) {
          return;
        }
        window.cancelAnimationFrame(W.current);
        const n = performance.now();
        const s = E.current.scrollLeft;
        const i = E.current.scrollTop;
        const a = o => {
          if (!E.current) {
            return;
          }
          const r = (o - n) / 175;
          if (r < 1) {
            const n = sb(r);
            const o = wd(Math.round(s + (e - s) * n), 0, E.current.scrollWidth - E.current.offsetWidth);
            const l = wd(Math.round(i + (t - i) * n), 0, E.current.scrollHeight - E.current.offsetHeight);
            if (!(l === i && o === s)) {
              if (u) {
                u();
              }
            }
            E.current.scrollLeft = o;
            E.current.scrollTop = l;
            O();
            W.current = window.requestAnimationFrame(a);
          } else {
            E.current.scrollLeft = e;
            E.current.scrollTop = t;
            O();
          }
        };
        W.current = window.requestAnimationFrame(a);
      }, [u, O]);
      0;
      Y.useEffect(() => () => window.cancelAnimationFrame(W.current), []);
      0;
      const X = Y.useMemo(() => ({
        updateThumbs: () => {
          W.current = window.requestAnimationFrame(() => {
            W.current = window.requestAnimationFrame(O);
          });
        },
        scrollTo: (e, t) => {
          $(e, t);
        },
        scrollBy: (e, t) => {
          if (E.current) {
            $(E.current.scrollLeft + e, E.current.scrollTop + t);
          }
        },
        smoothScrollTo: (e, t) => {
          q(e, t);
        },
        scrollIntoView: n => {
          if (!E.current) {
            return;
          }
          const o = E.current.getBoundingClientRect();
          const r = n.getBoundingClientRect();
          let l = E.current.scrollLeft;
          let c = E.current.scrollTop;
          if (e) {
            const e = o.width * s;
            if (r.left < o.left + e) {
              l = Math.floor(E.current.scrollLeft + r.left - o.left - e);
            } else if (r.right > o.right - e) {
              l = Math.ceil(E.current.scrollLeft + r.right - o.right + e);
            }
            l = wd(l, 0, Math.ceil(E.current.scrollWidth - o.width));
          }
          if (t) {
            const e = o.height * i;
            if (r.top < o.top + e) {
              c = Math.floor(E.current.scrollTop + r.top - o.top - e);
            } else if (r.bottom > o.bottom - e) {
              c = Math.ceil(E.current.scrollTop + r.bottom - o.bottom + e);
            }
            c = wd(c, 0, Math.ceil(E.current.scrollHeight - o.height));
          }
          if (!(l === E.current.scrollLeft && c === E.current.scrollTop)) {
            if (a) {
              q(l, c);
            } else {
              $(l, c);
            }
          }
        }
      }), [O, $, q, e, t, s, i, a]);
      0;
      Y.useEffect(() => {
        if (o) {
          o._attachCallback(X);
          return () => o._detachCallback(X);
        }
      }, [o, X]);
      0;
      Y.useEffect(() => x(h), [h]);
      J_(h && f, E, t ? "Vertical" : "Horizontal", O, g, W);
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(tb.scrollable, e && tb.x, t && tb.y, e && (v || "always" === n) && tb.trackVisibleX, t && (b || "always" === n) && tb.trackVisibleY, r),
        style: l,
        onMouseEnter: P,
        onMouseLeave: L,
        children: [z.jsx("div", {
          ref: I,
          className: tb.content,
          onMouseOver: O,
          children: z.jsxs(dp.Provider, {
            value: X,
            children: [c, null != c && (0, z.jsx)("div", {
              className: tb.bottomPadding
            })]
          })
        }), e && (0, z.jsx)("div", {
          ref: y,
          className: Qu()(tb.track, tb.x),
          children: (0, z.jsx)("div", {
            ref: S,
            className: Qu()(tb.thumb, tb.x, G && tb.pressed),
            onMouseDown: V
          })
        }), t && (0, z.jsx)("div", {
          ref: j,
          className: Qu()(tb.track, tb.y),
          children: (0, z.jsx)("div", {
            ref: C,
            className: Qu()(tb.thumb, tb.y, H && tb.pressed),
            onMouseDown: K
          })
        })]
      });
    });
    0;
    var ob = Y.forwardRef(function ({
      children: e,
      hintClassName: t,
      labelClassName: n,
      focusableItems: s,
      ...i
    }, a) {
      0;
      const [o, r] = Y.useState(false);
      0;
      const [l, c] = Y.useState(false);
      0;
      const u = Y.useCallback(e => {
        r(e);
        c(false);
      }, []);
      0;
      const [d, m] = Y.useState(false);
      const h = km();
      0;
      const g = Y.useMemo(() => ({
        Select: o && !l ? () => c(true) : null,
        Back: l ? () => c(false) : null
      }), [l, o]);
      const p = d || !!s && (l || o);
      0;
      return z.jsxs(z.Fragment, {
        children: [s ? (0, z.jsx)(jp, {
          includes: ["Select", "Back"],
          excludes: ["Scroll Vertical"],
          disabled: !l,
          children: (0, z.jsx)(Lg, {
            actions: g,
            children: (0, z.jsx)(Ep, {
              onFocusChange: u,
              children: (0, z.jsx)(ab, {
                ...i,
                ref: a,
                onOverflowY: m,
                className: Qu()(i.className, h && o ? "focused" : undefined),
                children: (0, z.jsx)(bp, {
                  disabled: !l,
                  children: e
                })
              })
            })
          })
        }) : (0, z.jsx)(ab, {
          ref: a,
          onOverflowY: m,
          ...i,
          children: e
        }), p && (0, z.jsxs)("div", {
          className: t,
          children: [(0, z.jsx)(LT, {
            action: "Scroll Vertical",
            active: d,
            showLabel: true
          }), (0, z.jsx)(LT, {
            action: "Select",
            active: !!s && o && !l,
            showLabel: true
          }), (0, z.jsx)(LT, {
            action: "Back",
            active: !!s && l,
            showLabel: true
          })]
        })]
      });
    });
    X.add("game-ui/common/scrolling/scrollable.tsx", {
      get Scrollable() {
        return ab;
      },
      set Scrollable(e) {
        ab = e;
      },
      get ScrollableWithHint() {
        return ob;
      },
      set ScrollableWithHint(e) {
        ob = e;
      }
    });
    const rb = /\s/;
    class lb {
      constructor(e) {
        this.linkRenderer = e;
      }
      render(e) {
        const t = [];
        let n;
        let s = 0;
        let i = -1;
        let a = -1;
        let o = mb.None;
        for (let r = 0; r < e.length; r++) {
          if (n !== r - 1) {
            switch (e[r]) {
              case "\\":
                if ("*" === e[r + 1]) {
                  continue;
                }
                n = r - 1;
                e = e.slice(0, r) + e.slice(r + 1);
                r -= 1;
                break;
              case "-":
                if (0 === r && " " === e[r + 1]) {
                  o = mb.ListItem;
                }
                break;
              case "<":
                if (-1 === a) {
                  i = r;
                  a = -1;
                }
                break;
              case "|":
                if (-1 !== i && -1 === a) {
                  a = r;
                }
                break;
              case ">":
                if (-1 !== i) {
                  if (s < i) {
                    t.push(cb(e, s, i, null));
                  }
                  const n = e.substring(i + 1, -1 !== a ? a : r);
                  const o = r < e.length - 1 && rb.test(e[r + 1]) ? e[r + 1] : null;
                  const l = cb(e, -1 !== a ? a + 1 : i + 1, r, o);
                  const c = null != this.linkRenderer ? this.linkRenderer(n, l, i) : undefined;
                  if (undefined !== c) {
                    0;
                    t.push(z.jsxs("span", {
                      children: [c, o]
                    }, i));
                  } else {
                    0;
                    t.push(z.jsx(xb, {
                      linkData: n,
                      children: l
                    }, i));
                  }
                  s = r + 1;
                  i = -1;
                  a = -1;
                }
            }
          } else {
            n = undefined;
          }
        }
        if (s < e.length) {
          t.push(cb(e, s, e.length, null));
        }
        return {
          node: t,
          style: o,
          images: []
        };
      }
    }
    function cb(e, t, n, s) {
      const i = [];
      let a;
      let o = t;
      let r = false;
      let l = -1;
      for (let c = t; c < n; c++) {
        if (a !== c - 1) {
          switch (e[c]) {
            case "\\":
              if ("*" !== e[c + 1]) {
                continue;
              }
              a = c - 1;
              e = e.slice(0, c) + e.slice(c + 1);
              c -= 1;
              n -= 1;
              break;
            case "*":
              if (r) {
                if (-1 === l) {
                  l = c - 1;
                  r = false;
                } else {
                  if (o < l) {
                    i.push(e.substring(o, l));
                  }
                  let t = e.substring(l + 2, c - 1);
                  if (c < n - 1) {
                    if (rb.test(e[c + 1])) {
                      t += e[c + 1];
                    }
                  } else if (null != s) {
                    t += s;
                  }
                  0;
                  i.push(z.jsx("b", {
                    children: t
                  }, l));
                  o = c + 1;
                  l = -1;
                  r = false;
                }
              } else {
                r = true;
              }
              break;
            default:
              r = false;
          }
        } else {
          a = undefined;
        }
      }
      if (o < n) {
        let t = e.substring(o, n);
        if (null != s) {
          t += s;
        }
        i.push(t);
      }
      return i;
    }
    X.add("game-ui/common/text/renderers/markup-renderer.tsx", {});
    let ub = {
      h1: "h1_YPD",
      h2: "h2_TYz",
      h3: "h3__p1",
      h4: "h4_Gmc",
      h5: "h5_QKx",
      h6: "h6__nd",
      link: "link_jpN",
      p: "p_CKq",
      "list-item": "list-item_xk2",
      listItem: "list-item_xk2",
      hint: "hint_dM0"
    };
    X.add("game-ui/common/text/formatted-text.module.scss", {
      get classes() {
        return ub;
      },
      set classes(e) {
        Object.assign(ub, e);
      }
    });
    var mb;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Heading1 = 1] = "Heading1";
      e[e.Heading2 = 2] = "Heading2";
      e[e.Heading3 = 3] = "Heading3";
      e[e.Heading4 = 4] = "Heading4";
      e[e.Heading5 = 5] = "Heading5";
      e[e.Heading6 = 6] = "Heading6";
      e[e.ListItem = 7] = "ListItem";
    }(mb || (mb = {}));
    0;
    var hb = Y.createContext({
      theme: ub,
      onLinkSelect: undefined
    });
    const gb = new lb();
    var pb = ({
      focusKey: e,
      text: t = "",
      theme: n,
      renderer: s = gb,
      className: i,
      onLinkSelect: a,
      ...o
    }) => {
      0;
      const r = Y.useMemo(() => ({
        ...ub,
        ...n
      }), [n]);
      0;
      const l = Y.useMemo(() => ({
        theme: r,
        onLinkSelect: a
      }), [a, r]);
      const c = oc(t);
      0;
      const u = Y.useMemo(() => s.render(c), [s, c]);
      if ("string" == typeof t && t.includes("<inputAction:")) {
        i = `action-hint ${i || ""}`;
      }
      0;
      0;
      0;
      return z.jsx(ep, {
        focusKey: e,
        children: z.jsx(hb.Provider, {
          value: l,
          children: z.jsx("p", {
            ...o,
            className: Qu()(fb(r, u.style), i),
            cohinline: "cohinline",
            children: u.node
          })
        })
      });
    };
    function fb(e, t) {
      switch (t) {
        case mb.None:
          return e.p;
        case mb.Heading1:
          return e.h1;
        case mb.Heading2:
          return e.h2;
        case mb.Heading3:
          return e.h3;
        case mb.Heading4:
          return e.h4;
        case mb.Heading5:
          return e.h5;
        case mb.Heading6:
          return e.h6;
        case mb.ListItem:
          return e.listItem;
        default:
          return;
      }
    }
    var xb = ({
      linkData: e,
      disableHint: t = false,
      children: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      const a = Y.useContext(hb);
      0;
      const o = Y.useCallback(() => {
        if (a.onLinkSelect) {
          a.onLinkSelect(e);
        }
      }, [a, e]);
      return "" !== e ? (0, z.jsx)(Lh, {
        onFocusChange: i,
        children: (0, z.jsxs)(L_, {
          disableHint: true,
          className: a.theme.link,
          onSelect: o,
          children: [(0, z.jsx)(LT, {
            action: "Select",
            active: !t && s,
            className: ub.hint
          }), n]
        })
      }) : (0, z.jsx)(z.Fragment, {
        children: n
      });
    };
    X.add("game-ui/common/text/formatted-text.tsx", {
      get ParagraphStyle() {
        return mb;
      },
      set ParagraphStyle(e) {
        mb = e;
      },
      get FormattedTextContext() {
        return hb;
      },
      set FormattedTextContext(e) {
        hb = e;
      },
      get FormattedText() {
        return pb;
      },
      set FormattedText(e) {
        pb = e;
      },
      get Link() {
        return xb;
      },
      set Link(e) {
        xb = e;
      }
    });
    let vb = {
      paragraphs: "paragraphs_nbD"
    };
    X.add("game-ui/common/text/formatted-paragraphs.module.scss", {
      get classes() {
        return vb;
      },
      set classes(e) {
        Object.assign(vb, e);
      }
    });
    var bb = ({
      focusKey: e,
      text: t,
      theme: n,
      renderer: s,
      className: i,
      children: a,
      onLinkSelect: o,
      maxLineLength: r,
      splitLineLength: l,
      ...c
    }) => {
      0;
      const u = Y.useMemo(() => ({
        ...vb,
        ...n
      }), [n]);
      const d = function (e, t = true, n, s) {
        const i = ac();
        0;
        return Y.useMemo(() => Y.Children.toArray(e).flatMap(e => yb(rc(i, e, "\n"), t, false, n, s)), [e, i, n, s, t]);
      }(Y.Children.count(a) > 0 ? a : t, true, r, l);
      0;
      0;
      return z.jsx("div", {
        ...c,
        className: Qu()(u.paragraphs, i),
        children: z.jsx(ep, {
          focusKey: e,
          children: d.map((e, t) => (0, z.jsx)(pb, {
            text: e,
            theme: u,
            renderer: s,
            onLinkSelect: o
          }, t))
        })
      });
    };
    const Eb = (e, t) => {
      let n = e;
      const s = [];
      do {
        const e = n.substring(0, t).lastIndexOf(" ");
        if (-1 === e) {
          s.push(n.substring(0, t));
          n = n.substring(t);
        } else {
          s.push(n.substring(0, e));
          n = n.substring(e);
        }
      } while (n.length > t);
      if (n.length > 0) {
        s.push(n);
      }
      return s;
    };
    var Ib = /\r\n|\r|\n/;
    function yb(e, t = true, n = false, s, i) {
      let a = e.split(Ib);
      if (t) {
        a = a.filter((e, t, s) => "" !== e.trim() || n && "" === s[t + 1]?.trim());
      }
      const o = [];
      a.forEach(e => undefined !== s && e.length > s ? o.push(...Eb(e, i ?? 150)) : o.push(e));
      return o;
    }
    X.add("game-ui/common/text/formatted-paragraphs.tsx", {
      get FormattedParagraphs() {
        return bb;
      },
      set FormattedParagraphs(e) {
        bb = e;
      },
      get splitParagraphs() {
        return yb;
      },
      set splitParagraphs(e) {
        yb = e;
      }
    });
    let Sb = {
      button: "button_wte",
      label: "label_qmW",
      hint: "hint_AlC",
      icon: "icon_Mm0 icon_B1q"
    };
    X.add("game-ui/game/components/tutorials/tutorial-input-hints/tutorial-input-hint.module.scss", {
      get classes() {
        return Sb;
      },
      set classes(e) {
        Object.assign(Sb, e);
      }
    });
    var Nb = new lb((e, t, n) => {
      if (e.startsWith("inputAction:")) {
        const t = e.substring(12).trim();
        const [s, i] = function (e) {
          if (e.endsWith("]")) {
            const t = e.lastIndexOf("[");
            if (t < e.length - 1) {
              const n = parseInt(e.substring(t + 1, e.length - 1));
              return isNaN(n) ? [e, undefined] : [e.substring(0, t), n];
            }
          }
          return [e, undefined];
        }(t);
        0;
        return z.jsx(wb, {
          linkData: s,
          bindingIndex: i
        }, n);
      }
    });
    function wb({
      linkData: e,
      bindingIndex: t
    }) {
      const n = sl(Tm);
      0;
      const s = Y.useMemo(() => {
        const s = [];
        for (let t = e.indexOf("/"); t >= 0; t = e.indexOf("/", t + 1)) {
          s.push(t);
        }
        return s.length >= 1 ? {
          map: e.substring(0, s[0]),
          action: e.substring(s[0] + 1),
          controlScheme: n,
          index: t ?? -1
        } : {
          map: "",
          action: "",
          controlScheme: n,
          index: t ?? -1
        };
      }, [n, t, e]);
      const i = ll(Pm, s);
      0;
      return z.jsx(z.Fragment, {
        children: i.map((t, n) => t.items[0] ? (0, z.jsx)(ST, {
          bindings: t.items[0].bindings,
          modifiers: t.items[0].modifiers,
          theme: Sb,
          shortName: Cp.FallbackToControl,
          showName: "Mouse" === t.items[0].bindings[0].device
        }, e + n) : null)
      });
    }
    function Ob(e) {
      e.stopPropagation();
    }
    X.add("game-ui/game/components/tutorials/tutorial-input-hints/tutorial-input-hint.tsx", {
      get tutorialTextRenderer() {
        return Nb;
      },
      set tutorialTextRenderer(e) {
        Nb = e;
      }
    });
    X.add("game-ui/common/utils/cancel-click.ts", {
      get cancelClick() {
        return Ob;
      },
      set cancelClick(e) {
        Ob = e;
      }
    });
    let Pb = {
      hint: "hint_gBC"
    };
    X.add("game-ui/common/input/toggle/toggle-hint-theme.module.scss", {
      get classes() {
        return Pb;
      },
      set classes(e) {
        Object.assign(Pb, e);
      }
    });
    var Ab = Y.forwardRef(function ({
      focusKey: e,
      debugName: t = "Toggle",
      checked: n,
      disabled: s = false,
      style: i,
      toggleSound: a = op.selectToggle,
      className: o,
      children: r,
      showHint: l,
      onChange: c,
      onMouseOver: u,
      onMouseLeave: d
    }, m) {
      0;
      const h = Y.useCallback(() => {
        if (c) {
          rp(a);
          c(!n);
        }
      }, [n, c, a]);
      0;
      const g = Y.useCallback(e => {
        h();
        if (c && !s) {
          Ob(e);
        }
      }, [s, h, c]);
      0;
      const p = Y.useRef(null);
      const f = hd(m, p);
      const x = mp(yg(e ?? (s ? Eg : Ig), t), p);
      const v = Nh(x);
      const _ = km();
      0;
      0;
      0;
      return z.jsx(Rg, {
        onAction: s ? undefined : h,
        children: z.jsxs(Ph, {
          controller: x,
          children: [l && (0, z.jsx)(LT, {
            action: "Select",
            active: !!v,
            theme: Pb
          }), z.jsx("div", {
            ref: f,
            onClick: s ? undefined : g,
            onMouseOver: u,
            onMouseLeave: d,
            style: i,
            className: Qu()(o, n ? "checked" : "unchecked", s && "disabled", v && _ && "focused"),
            children: r
          })]
        })
      });
    });
    X.add("game-ui/common/input/toggle/toggle.tsx", {
      get Toggle() {
        return Ab;
      },
      set Toggle(e) {
        Ab = e;
      }
    });
    let Mb = {
      toggle: "toggle_cca item-mouse-states_Fmi",
      checkmark: "checkmark_NXV"
    };
    X.add("game-ui/common/input/toggle/checkbox/checkbox.module.scss", {
      get classes() {
        return Mb;
      },
      set classes(e) {
        Object.assign(Mb, e);
      }
    });
    var kb = ({
      checked: e,
      disabled: t,
      theme: n,
      className: s,
      ...i
    }) => {
      0;
      const a = Y.useMemo(() => ({
        ...Mb,
        ...n
      }), [n]);
      0;
      0;
      return z.jsx(Ab, {
        ...i,
        checked: e,
        disabled: t,
        className: Qu()(a.toggle, s),
        children: z.jsx("div", {
          className: Qu()(a.checkmark, e && "checked", t && "disabled")
        })
      });
    };
    X.add("game-ui/common/input/toggle/checkbox/checkbox.tsx", {
      get Checkbox() {
        return kb;
      },
      set Checkbox(e) {
        kb = e;
      }
    });
    let Db = {
      "trigger-item": "trigger-item_rd_",
      triggerItem: "trigger-item_rd_",
      completed: "completed_V8G",
      checkbox: "checkbox_Y9N",
      label: "label_vR9"
    };
    X.add("game-ui/game/components/tutorials/tutorial-layout/trigger-item/trigger-item.module.scss", {
      get classes() {
        return Db;
      },
      set classes(e) {
        Object.assign(Db, e);
      }
    });
    var Ub = ({
      trigger: e
    }) => ((0, Y.useEffect)(() => {
      if (e.completed) {
        rp(op.tutorialTriggerCompleteEvent);
      }
    }, [e.completed]), (0, z.jsxs)("div", {
      className: Qu()(Db.triggerItem, e.completed && Db.completed),
      children: [(0, z.jsx)(kb, {
        checked: e.completed || e.preCompleted,
        className: Db.checkbox,
        focusKey: Eg
      }), (0, z.jsx)(bb, {
        renderer: Nb,
        className: Db.label,
        children: (0, z.jsx)(Pc.Tutorials.TRIGGER, {
          hash: e.name
        })
      })]
    }));
    X.add("game-ui/game/components/tutorials/tutorial-layout/trigger-item/trigger-item.tsx", {
      get TriggerItem() {
        return Ub;
      },
      set TriggerItem(e) {
        Ub = e;
      }
    });
    let Bb = {
      "tutorial-layout": "tutorial-layout_iuN",
      tutorialLayout: "tutorial-layout_iuN",
      image: "image_NyN",
      columns: "columns_ITy",
      "icon-column": "icon-column_K_S",
      iconColumn: "icon-column_K_S",
      "content-column": "content-column_ygV",
      contentColumn: "content-column_ygV",
      top: "top_4SL",
      icon: "icon_Qax",
      content: "content_p9h",
      scrollable: "scrollable_ErH",
      title: "title_JUj",
      "close-button": "close-button_K6M",
      closeButton: "close-button_K6M",
      description: "description_Dj3",
      rows: "rows_vbh",
      row: "row_yh5",
      triggers: "triggers_Da1 row_yh5",
      bottom: "bottom_oC7 row_yh5",
      pages: "pages_kqp",
      "center-card": "center-card_JWz",
      centerCard: "center-card_JWz",
      hints: "hints_jKY",
      "hints-next-only": "hints-next-only_inP",
      hintsNextOnly: "hints-next-only_inP",
      "hints-prev-only": "hints-prev-only_YuG",
      hintsPrevOnly: "hints-prev-only_YuG",
      "pages-only": "pages-only_q3k",
      pagesOnly: "pages-only_q3k",
      hint: "hint_Elc",
      hintButton: "hintButton_j5t",
      "hints-next": "hints-next_E81",
      hintsNext: "hints-next_E81",
      "hints-prev": "hints-prev_YHO",
      hintsPrev: "hints-prev_YHO",
      "floating-hint": "floating-hint_Yt1",
      floatingHint: "floating-hint_Yt1",
      "floating-hint-top-right": "floating-hint-top-right_Vvx",
      floatingHintTopRight: "floating-hint-top-right_Vvx"
    };
    X.add("game-ui/game/components/tutorials/tutorial-layout/tutorial-layout.module.scss", {
      get classes() {
        return Bb;
      },
      set classes(e) {
        Object.assign(Bb, e);
      }
    });
    function Vb(e) {
      0;
      return Y.useMemo(() => ({
        ...Bb,
        ...e
      }), [e]);
    }
    function Hb(e, t) {
      return !e.mandatory || t.trigger?.preCompleted || null == t.trigger || e.advisorActivation || t.completed;
    }
    function Kb(e, t) {
      return Wb(e, t) > 0;
    }
    function Wb(e, t) {
      return e.phases.findIndex(e => Ur(e.entity, t.entity));
    }
    function zb() {
      const e = Kh.value;
      const t = Wh.value;
      if (null != e && null != t) {
        const n = Wb(e, t);
        const [s, i] = Yb(e, n);
        if (s > 0) {
          qh(e.entity, e.phases[n - 1].entity);
        } else if (n > 0) {
          const t = e.phases.findIndex(e => e.trigger?.phaseBranching);
          if (t >= 0) {
            qh(e.entity, e.phases[t].entity);
          }
        }
      }
    }
    function Yb(e, t) {
      const n = e.phases.length;
      const s = e.phases.findIndex(e => e?.trigger?.phaseBranching);
      if (s < 0) {
        return [t, n];
      }
      if (t <= s) {
        return [t, s + 1];
      }
      let i = -1;
      let a = -1;
      for (let i = s + 1; i < n; i++) {
        const s = e.phases[i];
        if ((s?.forcesCompletion || i === n - 1) && i >= t) {
          a = i;
          break;
        }
      }
      for (let a = n - 1; a > s; a--) {
        const n = e.phases[a];
        if (n?.isBranch && a <= t) {
          i = a;
          break;
        }
      }
      return [t - i, a - i + 1];
    }
    function $b() {
      const e = sl(Mh);
      const t = sl(Kh);
      const n = null !== sl(kh);
      0;
      return Y.useMemo(() => !(n || t?.mandatory && e), [t?.mandatory, n, e]);
    }
    X.add("game-ui/game/components/tutorials/tutorial-layout/tutorial-theme.tsx", {
      get useTutorialTheme() {
        return Vb;
      },
      set useTutorialTheme(e) {
        Vb = e;
      }
    });
    X.add("game-ui/game/components/tutorials/tutorial-layout/tutorial-utils.ts", {
      get tutorialSkipAvailable() {
        return Hb;
      },
      set tutorialSkipAvailable(e) {
        Hb = e;
      },
      get previousTutorialPhaseAvailable() {
        return Kb;
      },
      set previousTutorialPhaseAvailable(e) {
        Kb = e;
      },
      get activatePreviousTutorialPhase() {
        return zb;
      },
      set activatePreviousTutorialPhase(e) {
        zb = e;
      },
      get getBranchIndices() {
        return Yb;
      },
      set getBranchIndices(e) {
        Yb = e;
      },
      get useAdvisorPanelAvailable() {
        return $b;
      },
      set useAdvisorPanelAvailable(e) {
        $b = e;
      }
    });
    let qb = {
      item: "item_Lji",
      button: "button_iQJ item_Lji",
      animate: "animate_fHa",
      blink: "blink_HHL",
      none: "none_bxA",
      icon: "icon_G81",
      pages: "pages_Lzi item_Lji",
      label: "label_FEJ",
      divider: "divider_bFc",
      "divider-gamepad": "divider-gamepad_bWe",
      dividerGamepad: "divider-gamepad_bWe"
    };
    X.add("game-ui/game/components/tutorials/tutorial-layout/tutorial-action-button.module.scss", {
      get classes() {
        return qb;
      },
      set classes(e) {
        Object.assign(qb, e);
      }
    });
    var Qb = ({
      tutorial: e,
      phase: t,
      pagesVisible: n,
      theme: s,
      localization: i,
      closeable: a = false,
      scrollable: o = false,
      disableTooltips: r = false,
      className: l,
      closeHint: c
    }) => {
      const u = e.phases.findIndex(e => Ur(e.entity, t.entity));
      0;
      const [d, m] = Y.useMemo(() => Yb(e, u), [u, e]);
      const h = Hb(e, t);
      const g = u > 0;
      const p = i || Pc.Tutorials;
      0;
      const f = oc(z.jsx(p.DESCRIPTION, {
        hash: t.name
      }));
      const x = !e.completed && !e.advisorActivation;
      const v = t.descriptionVisible ? f : null;
      const _ = function (e) {
        const t = _T();
        return t !== vm.PS || Vr(e.overrideImagePS) ? t !== vm.Xbox || Vr(e.overrideImageXbox) ? e.image : e.overrideImageXbox : e.overrideImagePS;
      }(t);
      0;
      return z.jsx(Zb, {
        theme: s,
        image: _,
        icon: t.icon,
        title: t.titleVisible ? (0, z.jsx)(p.TITLE, {
          hash: t.name
        }) : undefined,
        description: t.descriptionVisible ? v : null,
        onClose: a ? Jh : undefined,
        scrollable: o,
        trigger: t.trigger,
        pagesVisible: n,
        phaseIndex: d,
        phaseCount: m,
        nextVisible: h,
        previousVisible: g,
        onActivatePreviousPhase: zb,
        onActivateNextPhase: Zh,
        animateButton: x,
        className: l,
        disableTooltips: r,
        isCenterCard: t.type === ug.CenterCard,
        closeHint: c
      });
    };
    var Zb = ({
      theme: e = Bb,
      className: t,
      image: n,
      icon: s,
      title: i,
      autoScroll: a = true,
      description: o,
      onClose: r,
      scrollable: l,
      trigger: c,
      pagesVisible: u,
      phaseIndex: d = 0,
      phaseCount: m = 1,
      nextVisible: h,
      previousVisible: g,
      onActivatePreviousPhase: p,
      onActivateNextPhase: f,
      animateButton: x,
      disableTooltips: v,
      isCenterCard: _,
      closeHint: b
    }) => {
      const T = Vb(e);
      const E = u && -1 !== d && m > 1;
      const I = d + 1 === m;
      const y = km();
      const S = i || o ? (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsxs)("div", {
          className: T.top,
          children: [i && (0, z.jsx)("div", {
            className: T.title,
            children: i
          }), !y && r && (0, z.jsx)($_, {
            tinted: true,
            focusKey: Eg,
            src: "Media/Glyphs/Close.svg",
            theme: q_,
            className: T.closeButton,
            onSelect: r
          }), b && (0, z.jsx)(DT, {
            action: b,
            active: true,
            className: Bb.floatingHintTopRight
          })]
        }), o && (0, z.jsx)("div", {
          className: T.description,
          children: (0, z.jsx)(bb, {
            renderer: Nb,
            children: o
          })
        })]
      }) : undefined;
      0;
      return z.jsxs("div", {
        className: Qu()(T.tutorialLayout, t),
        children: [n && (0, z.jsx)(B_, {
          src: n,
          className: T.image
        }), (s || S) && (0, z.jsxs)("div", {
          className: T.columns,
          children: [s && (0, z.jsx)("div", {
            className: T.iconColumn,
            children: (0, z.jsx)("img", {
              src: s,
              className: T.icon
            })
          }), (0, z.jsx)("div", {
            className: T.contentColumn,
            children: l ? (0, z.jsx)(ab, {
              autoScroll: a,
              className: T.scrollable,
              children: S
            }) : (0, z.jsx)("div", {
              className: T.content,
              children: S
            })
          })]
        }), (c?.displayUI || g || h || E) && (0, z.jsxs)("div", {
          className: T.rows,
          children: [c?.displayUI && (0, z.jsx)("div", {
            className: T.triggers,
            children: (0, z.jsx)(Ub, {
              trigger: c
            })
          }), (g || h || E) && (y ? (0, z.jsx)(z.Fragment, {
            children: (0, z.jsx)(Jb, {
              theme: T,
              nextVisible: h,
              previousVisible: g,
              pagesVisible: E,
              isCenterCard: _,
              phaseIndex: d,
              phaseCount: m,
              animateButton: x,
              lastPhase: I
            })
          }) : g || h ? (0, z.jsxs)("div", {
            className: T.bottom,
            children: [g && (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(bg, {
                tooltip: !v && (0, z.jsx)(Pc.Tutorials.BUTTON_TOOLTIP_PREVIOUS, {}),
                children: (0, z.jsx)($_, {
                  tinted: true,
                  focusKey: Eg,
                  src: "Media/Glyphs/FilledArrowLeft.svg",
                  theme: qb,
                  onSelect: p
                })
              }), (E || h) && (0, z.jsx)("div", {
                className: qb.divider
              })]
            }), E && (0, z.jsx)("div", {
              className: qb.pages,
              children: (0, z.jsx)("div", {
                className: qb.label,
                children: (0, z.jsx)(cu, {
                  value: d + 1,
                  total: m
                })
              })
            }), h && (0, z.jsxs)(z.Fragment, {
              children: [E && (0, z.jsx)("div", {
                className: qb.divider
              }), (0, z.jsx)(bg, {
                tooltip: v ? undefined : I ? (0, z.jsx)(Pc.Tutorials.BUTTON_TOOLTIP_DONE, {}) : (0, z.jsx)(Pc.Tutorials.BUTTON_TOOLTIP_NEXT, {}),
                children: (0, z.jsx)($_, {
                  tinted: true,
                  focusKey: Eg,
                  src: I ? "Media/Glyphs/Checkmark.svg" : "Media/Glyphs/FilledArrowRight.svg",
                  theme: qb,
                  className: Qu()(x && qb.animate),
                  onSelect: f
                })
              })]
            })]
          }) : E && (0, z.jsx)("div", {
            className: T.bottom,
            children: (0, z.jsx)("div", {
              className: T.pages,
              children: (0, z.jsx)(cu, {
                value: d + 1,
                total: m
              })
            })
          }))]
        })]
      });
    };
    const Jb = ({
      theme: e,
      previousVisible: t,
      nextVisible: n,
      pagesVisible: s,
      isCenterCard: i,
      phaseIndex: a,
      phaseCount: o,
      lastPhase: r,
      animateButton: l
    }) => {
      const c = !t && n;
      const u = t && !n;
      const d = !t && !n && s;
      0;
      return z.jsxs("div", {
        className: Qu()(e.hints, {
          [Bb.centerCard]: i,
          [Bb.hintsNextOnly]: c,
          [Bb.hintsPrevOnly]: u,
          [Bb.pagesOnly]: d
        }),
        children: [t && (0, z.jsxs)("div", {
          className: Qu()(e.hint, Bb.hintsPrev),
          children: [(0, z.jsxs)("div", {
            className: e.hintButton,
            children: [(0, z.jsx)($_, {
              tinted: true,
              focusKey: Eg,
              src: "Media/Glyphs/FilledArrowLeft.svg",
              theme: qb
            }), (0, z.jsx)("div", {
              className: Qu()(qb.divider, qb.dividerGamepad)
            })]
          }), (0, z.jsx)(fT, {
            specifiedActions: ["Previous Tutorial Phase"]
          })]
        }), s && (0, z.jsx)("div", {
          className: e.pages,
          children: (0, z.jsx)("div", {
            children: (0, z.jsx)(cu, {
              value: a + 1,
              total: o
            })
          })
        }), n && (0, z.jsxs)("div", {
          className: Qu()(e.hint, Bb.hintsNext),
          children: [(0, z.jsx)(fT, {
            specifiedActions: [r ? "Finish Tutorial" : "Continue Tutorial"]
          }), (0, z.jsxs)("div", {
            className: e.hintButton,
            children: [(0, z.jsx)("div", {
              className: Qu()(qb.divider, qb.dividerGamepad)
            }), (0, z.jsx)($_, {
              tinted: true,
              focusKey: Eg,
              src: r ? "Media/Glyphs/Checkmark.svg" : "Media/Glyphs/FilledArrowRight.svg",
              theme: qb,
              className: Qu()(l && qb.animate)
            })]
          })]
        })]
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-layout/tutorial-layout.tsx", {
      get TutorialLayout() {
        return Qb;
      },
      set TutorialLayout(e) {
        Qb = e;
      },
      get TutorialPhaseLayoutImpl() {
        return Zb;
      },
      set TutorialPhaseLayoutImpl(e) {
        Zb = e;
      }
    });
    let eT = {
      container: "container_RSa",
      image: "image_GQL image_NyN",
      "tutorial-balloon": "tutorial-balloon_PYE",
      tutorialBalloon: "tutorial-balloon_PYE"
    };
    X.add("game-ui/game/components/tutorials/tutorial-balloon/tutorial-balloon.module.scss", {
      get classes() {
        return eT;
      },
      set classes(e) {
        Object.assign(eT, e);
      }
    });
    var nT = ({
      tutorial: e,
      phase: t,
      localization: n,
      direction: s,
      alignment: i,
      children: a
    }) => {
      const o = km();
      const r = o && (e?.completed || e?.advisorActivation || !e?.mandatory) ? "Close Tutorial" : undefined;
      const l = null != e && null != t && (0, z.jsx)(Qb, {
        tutorial: e,
        phase: t,
        localization: n,
        pagesVisible: true,
        theme: eT,
        closeable: e.completed || e.advisorActivation || !e.mandatory,
        disableTooltips: o,
        closeHint: r
      });
      0;
      0;
      return z.jsx(_h, {
        balloonKey: t?.name,
        theme: k_,
        visible: null != e,
        content: z.jsx(Ap, {
          children: l
        }),
        direction: s,
        alignment: i,
        className: eT.tutorialBalloon,
        children: a
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-balloon/tutorial-balloon.tsx", {
      get TutorialBalloon() {
        return nT;
      },
      set TutorialBalloon(e) {
        nT = e;
      }
    });
    let sT = {
      "tutorial-blink-active": "tutorial-blink-active_s4x",
      tutorialBlinkActive: "tutorial-blink-active_s4x",
      "tutorial-blink": "tutorial-blink_EvY",
      tutorialBlink: "tutorial-blink_EvY"
    };
    X.add("game-ui/game/components/tutorials/tutorial-target/tutorial-target.module.scss", {
      get classes() {
        return sT;
      },
      set classes(e) {
        Object.assign(sT, e);
      }
    });
    var aT = ({
      uiTag: e,
      active: t = true,
      disableBlinking: n = false,
      editor: s = false,
      children: i
    }) => {
      if (!Y.isValidElement(i)) {
        throw new Error("TutorialGuideTarget requires a single child react element!");
      }
      const a = sl(Kh);
      const o = sl(Wh);
      const r = oT(e, t);
      const [l, c, u] = rT(e, t);
      const d = !n && (r || c);
      const m = R_(sT.tutorialBlink, d);
      const h = s ? Pc.EditorTutorials : Pc.Tutorials;
      const g = l ? a : null;
      const p = l ? o : null;
      const f = l && u >= 0 ? o?.balloonTargets[u]?.direction : undefined;
      const x = l && u >= 0 ? o?.balloonTargets[u]?.alignment : undefined;
      const _ = d ? {
        animationDelay: m
      } : undefined;
      const b = d ? sT.tutorialBlinkActive : undefined;
      0;
      0;
      0;
      return z.jsx(pg.Provider, {
        value: l,
        children: z.jsx(nT, {
          tutorial: g,
          phase: p,
          direction: f,
          alignment: x,
          localization: h,
          children: z.jsx(xd, {
            style: _,
            className: b,
            children: i
          })
        })
      });
    };
    const oT = (e, t = true) => {
      0;
      const [n, s] = Y.useState(false);
      0;
      const i = Y.useContext(gg);
      0;
      Y.useEffect(() => {
        if (undefined !== e && "" !== e && t) {
          i.mountBlinkListener(e, s);
          return () => i.unmountBlinkListener(e);
        }
        s(false);
      }, [i, e, t]);
      return n;
    };
    const rT = (e, t) => {
      0;
      const [n, s] = Y.useState(false);
      0;
      const [i, a] = Y.useState(false);
      0;
      const [o, r] = Y.useState(-1);
      0;
      const l = Y.useContext(gg);
      0;
      Y.useEffect(() => {
        if (undefined !== e && "" !== e && t) {
          l.mountBalloonListener(e, s, a, r);
          return () => l.unmountBalloonListener(e);
        }
        s(false);
      }, [l, e, t]);
      return [n, i, o];
    };
    X.add("game-ui/game/components/tutorials/tutorial-target/tutorial-target.tsx", {
      get TutorialTarget() {
        return aT;
      },
      set TutorialTarget(e) {
        aT = e;
      }
    });
    var cT = $r("prefabs", "themes");
    var uT = Xr("prefabs", "prefabDetails");
    var dT = $r("prefabs", "manualUITags");
    var mT = {
      entity: Xp,
      name: "",
      uiTag: "",
      icon: "Media/Placeholder.svg",
      dlc: null,
      preview: null,
      titleId: "",
      descriptionId: null,
      locked: false,
      uniquePlaced: false,
      constructionCost: null,
      effects: [],
      properties: [],
      requirements: {
        requireAny: [],
        requireAll: []
      }
    };
    X.add("game-ui/game/data-binding/prefab/prefab-bindings.ts", {
      get themes() {
        return themes;
      },
      set themes(e) {
        themes = e;
      },
      get prefabDetails() {
        return prefabDetails;
      },
      set prefabDetails(e) {
        prefabDetails = e;
      },
      get manualUITags() {
        return manualUITags;
      },
      set manualUITags(e) {
        manualUITags = e;
      },
      get emptyPrefabDetails() {
        return mT;
      },
      set emptyPrefabDetails(e) {
        mT = e;
      }
    });
    let hT = {
      "action-guide": "action-guide_eqv",
      actionGuide: "action-guide_eqv",
      fadeIn: "fadeIn_d4x",
      item: "item_p05",
      "item-clickable": "item-clickable_sKM item-mouse-states_Fmi",
      itemClickable: "item-clickable_sKM item-mouse-states_Fmi",
      "button-text": "button-text_U4q",
      buttonText: "button-text_U4q",
      small: "small__oP",
      xsmall: "xsmall_EJz",
      label: "label_MOA"
    };
    X.add("game-ui/common/input-events/action-hints/action-hints.module.scss", {
      get classes() {
        return hT;
      },
      set classes(e) {
        Object.assign(hT, e);
      }
    });
    var pT = ["Previous Tutorial Phase", "Continue Tutorial", "Finish Tutorial", "Start Next Tutorial", "Switch Tab", "Tool Options", "Info View", "Advisor", "Select", "Change Slider Value", "Change Line Schedule", "Change Tool Option", "Close", "Collapse Group", "Expand Group", "Back", "Purchase Map Tile", "Discard Select", "Add Or Modify Area Node", "Remove Area Node", "Undo Area Node", "Bulldoze", "Bulldoze Discard", "Default Tool", "Discard Downgrade", "Discard Replace", "Discard Upgrade", "Downgrade Net Edge", "Place Net Control Point", "Place Net Edge", "Place Net Node", "Replace Net Edge", "Undo Net Control Point", "Upgrade Net Edge", "Erase Object", "Move Object", "Paint Object", "Place Object", "Place Upgrade", "Precise Rotation", "Rotate Object", "Add Or Modify Waypoint", "Remove Waypoint", "Undo Waypoint", "Deselect Area", "Discard Deselect", "Disard Select", "Select Area", "Erase Material", "Erase Resource", "Fast Soften", "Level Terrain", "Lower Terrain", "Paint Material", "Paint Resource", "Raise Terrain", "Set Level Target", "Set Slope Target", "Slope Terrain", "Soften Terrain", "Place Upgrade", "Rebuild", "Apply Zone", "Discard Dezoning", "Discard Zoning", "Remove Zone"];
    0;
    var fT = Y.forwardRef(function ({
      disabled: e,
      specifiedActions: t,
      excludedActions: n,
      className: s,
      buttonAs: i,
      labels: a = true,
      delay: o = 0,
      delayIgnoreCounter: r = 0
    }, l) {
      0;
      const c = hd(Y.useRef(null), l);
      const u = Lp(sl(Nm));
      0;
      const d = Ym(Y.useMemo(() => u.filter(e => e.name && e.show && (!t || t.includes(e.name)) && !n?.includes(e.name)), [n, u, t]), o, r);
      0;
      return z.jsx("div", {
        className: Qu()(hT.actionGuide, s),
        ref: c,
        children: e ? null : d?.map((e, t) => (0, z.jsx)(xT, {
          buttonAs: i,
          hint: e,
          label: a,
          onSelect: Om
        }, t))
      });
    });
    const xT = ({
      hint: e,
      label: t,
      buttonAs: n,
      onSelect: s
    }) => {
      const i = sl(Bp);
      0;
      const a = Y.useCallback(() => {
        if (s) {
          s(e.name);
        }
      }, [e.name, s]);
      let o = e.name;
      if ("Switch User" === o) {
        o = i || e.name;
      }
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.actionHints + "+" + e.name,
        children: z.jsxs(vT, {
          className: hT.item,
          onSelect: a,
          as: n,
          children: [e.items.length ? e.items.map((e, t) => (0, z.jsx)(yT, {
            modifiers: e.modifiers,
            bindings: e.bindings
          }, t)) : (0, z.jsx)("span", {
            className: Qu()(hT.buttonText, hT.xsmall),
            children: (0, z.jsx)(Pc.Options.INPUT_CONTROL_NA, {})
          }), t ? (0, z.jsx)("div", {
            className: hT.label,
            children: (0, z.jsx)(Pc.Common.ACTION, {
              hash: o,
              showIdOnFail: true
            })
          }) : null]
        })
      });
    };
    var vT = ({
      children: e,
      className: t,
      ...n
    }) => (0, z.jsx)(L_, {
      className: Qu()(hT.item, t, !n.disabled && hT.itemClickable),
      focusKey: Eg,
      ...n,
      children: e
    });
    function _T() {
      return sl(Dl);
    }
    function bT() {
      return sl(Fl);
    }
    function TT() {
      return sl(Bl);
    }
    X.add("game-ui/common/input-events/action-hints/action-hints.tsx", {
      get ExcludedTopPanelActionHints() {
        return pT;
      },
      set ExcludedTopPanelActionHints(e) {
        pT = e;
      },
      get InputActionHints() {
        return fT;
      },
      set InputActionHints(e) {
        fT = e;
      },
      get ActionHintLayout() {
        return vT;
      },
      set ActionHintLayout(e) {
        vT = e;
      },
      get useGamepadType() {
        return _T;
      },
      set useGamepadType(e) {
        _T = e;
      },
      get useKeyboardLayout() {
        return bT;
      },
      set useKeyboardLayout(e) {
        bT = e;
      },
      get useLayoutMap() {
        return TT;
      },
      set useLayoutMap(e) {
        TT = e;
      }
    });
    let ET = {
      hint: "hint_vdu",
      binding: "binding_dc_",
      modifier: "modifier_iDc",
      label: "label_dTg",
      icon: "icon_B1q",
      button: "button_ehL",
      small: "small_P1I",
      xsmall: "xsmall_vkV",
      "button-text": "button-text_fw1",
      buttonText: "button-text_fw1",
      "left-tab": "left-tab_Hvf",
      leftTab: "left-tab_Hvf",
      "right-tab": "right-tab_QsA",
      rightTab: "right-tab_QsA"
    };
    X.add("game-ui/common/input-events/action-hints/input-hint/input-hint.module.scss", {
      get classes() {
        return ET;
      },
      set classes(e) {
        Object.assign(ET, e);
      }
    });
    var yT = ({
      modifiers: e,
      bindings: t,
      showName: n,
      shortName: s,
      theme: i,
      className: a,
      style: o,
      children: r
    }) => {
      const l = _T();
      const c = bT();
      const u = TT();
      0;
      const d = Y.useMemo(() => ({
        ...ET,
        ...i
      }), [i]);
      0;
      return z.jsxs("span", {
        className: Qu()(d.hint, a),
        style: o,
        children: [e.map((n, i) => (0, z.jsx)(jT, {
          binding: n,
          modifier: true,
          shortName: s,
          theme: d
        }, `${e} ${t} ${i}`)), t.map((n, i) => (0, z.jsx)(jT, {
          binding: n,
          modifier: false,
          shortName: s,
          theme: d
        }, `${e} ${t} ${i}`)), n && (0, z.jsx)("span", {
          className: Qu()(d.label),
          children: (0, z.jsx)(Pp, {
            binding: t[0],
            modifiers: e,
            short: s,
            gamepadType: l,
            keyboardLayout: c,
            layoutMap: u
          })
        }), r]
      });
    };
    var ST = ({
      ...e
    }) => (0, z.jsx)(bg, {
      tooltip: (0, z.jsx)(Pp, {
        binding: e.bindings[0],
        modifiers: e.modifiers
      }),
      children: (0, z.jsx)("span", {
        children: (0, z.jsx)(yT, {
          ...e
        })
      })
    });
    var jT = ({
      binding: e,
      modifier: t,
      shortName: n,
      theme: s
    }) => {
      const i = OT(e);
      0;
      return z.jsx("span", {
        className: t ? ET.modifier : ET.binding,
        children: null != i ? (0, z.jsx)("img", {
          src: i,
          className: s?.icon
        }) : (0, z.jsx)(CT, {
          binding: e,
          shortName: n,
          className: s?.button
        })
      });
    };
    const CT = ({
      binding: e,
      shortName: t,
      className: n
    }) => {
      const s = bT();
      const i = TT();
      0;
      0;
      return z.jsx("span", {
        className: Qu()(ET.buttonText, n),
        children: z.jsx(Pp, {
          binding: e,
          modifiers: [],
          short: t,
          keyboardLayout: s,
          layoutMap: i
        })
      });
    };
    const NT = {
      [vm.Xbox]: {
        leftStick: "Media/Gamepad/Xbox/LeftStick.svg",
        "leftStick/x": "Media/Gamepad/Xbox/LstickX.svg",
        "leftStick/y": "Media/Gamepad/Xbox/LstickY.svg",
        "leftStick/up": "Media/Gamepad/Xbox/LstickUp.svg",
        "leftStick/down": "Media/Gamepad/Xbox/LstickDown.svg",
        "leftStick/left": "Media/Gamepad/Xbox/LstickLeft.svg",
        "leftStick/right": "Media/Gamepad/Xbox/LstickRight.svg",
        rightStick: "Media/Gamepad/Xbox/RightStick.svg",
        "rightStick/x": "Media/Gamepad/Xbox/RstickX.svg",
        "rightStick/y": "Media/Gamepad/Xbox/RstickY.svg",
        "rightStick/up": "Media/Gamepad/Xbox/RstickUp.svg",
        "rightStick/down": "Media/Gamepad/Xbox/RstickDown.svg",
        "rightStick/left": "Media/Gamepad/Xbox/RstickLeft.svg",
        "rightStick/right": "Media/Gamepad/Xbox/RstickRight.svg",
        dpad: "Media/Gamepad/Xbox/Dpad.svg",
        "dpad/x": "Media/Gamepad/Xbox/DpadX.svg",
        "dpad/y": "Media/Gamepad/Xbox/DpadY.svg",
        "dpad/up": "Media/Gamepad/Xbox/DpadUp.svg",
        "dpad/down": "Media/Gamepad/Xbox/DpadDown.svg",
        "dpad/left": "Media/Gamepad/Xbox/DpadLeft.svg",
        "dpad/right": "Media/Gamepad/Xbox/DpadRight.svg",
        buttonNorth: "Media/Gamepad/Xbox/North.svg",
        buttonSouth: "Media/Gamepad/Xbox/South.svg",
        buttonWest: "Media/Gamepad/Xbox/West.svg",
        buttonEast: "Media/Gamepad/Xbox/East.svg",
        leftShoulder: "Media/Gamepad/Xbox/LeftShoulder.svg",
        rightShoulder: "Media/Gamepad/Xbox/RightShoulder.svg",
        leftTrigger: "Media/Gamepad/Xbox/LeftTrigger.svg",
        rightTrigger: "Media/Gamepad/Xbox/RightTrigger.svg",
        start: "Media/Gamepad/Xbox/Start.svg",
        select: "Media/Gamepad/Xbox/Select.svg",
        leftStickPress: "Media/Gamepad/Xbox/LstickPress.svg",
        rightStickPress: "Media/Gamepad/Xbox/RstickPress.svg"
      },
      [vm.PS]: {
        leftStick: "Media/Gamepad/PS/PS_Lstick.svg",
        "leftStick/x": "Media/Gamepad/PS/PS_LstickX.svg",
        "leftStick/y": "Media/Gamepad/PS/PS_LstickY.svg",
        "leftStick/up": "Media/Gamepad/PS/PS_LstickUp.svg",
        "leftStick/down": "Media/Gamepad/PS/PS_LstickDown.svg",
        "leftStick/left": "Media/Gamepad/PS/PS_LstickLeft.svg",
        "leftStick/right": "Media/Gamepad/PS/PS_LstickRight.svg",
        rightStick: "Media/Gamepad/PS/PS_Rstick.svg",
        "rightStick/x": "Media/Gamepad/PS/PS_RstickX.svg",
        "rightStick/y": "Media/Gamepad/PS/PS_RstickY.svg",
        "rightStick/up": "Media/Gamepad/PS/PS_RstickUp.svg",
        "rightStick/down": "Media/Gamepad/PS/PS_RstickDown.svg",
        "rightStick/left": "Media/Gamepad/PS/PS_RstickLeft.svg",
        "rightStick/right": "Media/Gamepad/PS/PS_RstickRight.svg",
        dpad: "Media/Gamepad/PS/PS_Dpad.svg",
        "dpad/x": "Media/Gamepad/PS/PS_DpadX.svg",
        "dpad/y": "Media/Gamepad/PS/PS_DpadY.svg",
        "dpad/up": "Media/Gamepad/PS/PS_DpadUp.svg",
        "dpad/down": "Media/Gamepad/PS/PS_DpadDown.svg",
        "dpad/left": "Media/Gamepad/PS/PS_DpadLeft.svg",
        "dpad/right": "Media/Gamepad/PS/PS_DpadRight.svg",
        buttonNorth: "Media/Gamepad/PS/PS_triangle.svg",
        buttonSouth: "Media/Gamepad/PS/PS_X.svg",
        buttonWest: "Media/Gamepad/PS/PS_square.svg",
        buttonEast: "Media/Gamepad/PS/PS_O.svg",
        leftShoulder: "Media/Gamepad/PS/PS_L1.svg",
        rightShoulder: "Media/Gamepad/PS/PS_R1.svg",
        leftTrigger: "Media/Gamepad/PS/PS_L2.svg",
        rightTrigger: "Media/Gamepad/PS/PS_R2.svg",
        start: "Media/Gamepad/PS/PS_Options.svg",
        select: "Media/Gamepad/PS/PS_Create.svg",
        leftStickPress: "Media/Gamepad/PS/PS_LStickPress.svg",
        rightStickPress: "Media/Gamepad/PS/PS_RStickPress.svg",
        touchpadButton: "Media/Gamepad/PS/PS_Touchpad.svg"
      }
    };
    const wT = {
      leftButton: "Media/Mouse/LMB.svg",
      rightButton: "Media/Mouse/RMB.svg",
      middleButton: "Media/Mouse/MMB.svg",
      backButton: "Media/Mouse/Backward.svg",
      forwardButton: "Media/Mouse/Forward.svg",
      "scroll/y": "Media/Mouse/Scrollwheel.svg"
    };
    function OT(e) {
      const t = _T();
      0;
      return Y.useMemo(() => {
        switch (e.device) {
          case "Gamepad":
            return NT[t][e.name] || null;
          case "Mouse":
            return wT[e.name] || null;
          default:
            return null;
        }
      }, [e.device, e.name, t]);
    }
    X.add("game-ui/common/input-events/action-hints/input-hint/control-icons.tsx", {
      get ControlIcons() {
        return yT;
      },
      set ControlIcons(e) {
        yT = e;
      },
      get ControlIconsWithTooltip() {
        return ST;
      },
      set ControlIconsWithTooltip(e) {
        ST = e;
      },
      get ControlIcon() {
        return jT;
      },
      set ControlIcon(e) {
        jT = e;
      },
      get useInputControlIcon() {
        return OT;
      },
      set useInputControlIcon(e) {
        OT = e;
      }
    });
    var PT = ({
      action: e,
      bindingIndex: t,
      active: n = true,
      shortName: s,
      controlScheme: i,
      theme: a,
      showLabel: o,
      style: r,
      className: l
    }) => {
      const c = Op(e, n, i);
      return c && c.items[0] ? (0, z.jsx)(yT, {
        bindings: undefined !== t ? [c?.items[0].bindings[t]] : c?.items[0].bindings,
        modifiers: c?.items[0].modifiers,
        shortName: s,
        theme: a,
        className: l,
        style: r,
        children: o && (0, z.jsx)("span", {
          className: a?.label || ET.label,
          children: (0, z.jsx)(Pc.Common.ACTION, {
            hash: c.name,
            showIdOnFail: true
          })
        })
      }) : null;
    };
    const LT = ({
      action: e,
      active: t = true,
      controlScheme: n = xm.gamepad,
      ...s
    }) => {
      const i = sl(Tm);
      return t && e && i === n ? (0, z.jsx)(PT, {
        action: e,
        controlScheme: n,
        ...s
      }) : null;
    };
    var AT = e => {
      const t = sl(Tm);
      0;
      return z.jsx(LT, {
        ...e,
        controlScheme: t
      });
    };
    var MT = e => Nh((0, Y.useContext)(Zu)) ? (0, z.jsx)(LT, {
      ...e
    }) : null;
    X.add("game-ui/common/input-events/action-hints/input-hint/input-hint.tsx", {
      get InputHint() {
        return LT;
      },
      set InputHint(e) {
        LT = e;
      },
      get ActiveControlSchemeInputHint() {
        return AT;
      },
      set ActiveControlSchemeInputHint(e) {
        AT = e;
      },
      get FocusedInputHint() {
        return MT;
      },
      set FocusedInputHint(e) {
        MT = e;
      }
    });
    let RT = {
      "floating-input-hint": "floating-input-hint_cCf",
      floatingInputHint: "floating-input-hint_cCf"
    };
    X.add("game-ui/common/input-events/action-hints/input-hint/floating-input-hint.module.scss", {
      get classes() {
        return RT;
      },
      set classes(e) {
        Object.assign(RT, e);
      }
    });
    var DT = ({
      action: e,
      active: t,
      className: n
    }) => (0, z.jsx)(LT, {
      action: e,
      active: t,
      showLabel: true,
      className: Qu()(RT.floatingInputHint, n)
    });
    function FT(e) {
      for (const t of Object.values(e)) {
        new Image().src = t.replaceAll('"', "");
      }
      return e;
    }
    function UT(e) {
      const t = wp(e, 1);
      0;
      return Y.useMemo(() => FT(t), [t]);
    }
    X.add("game-ui/common/input-events/action-hints/input-hint/floating-input-hint.tsx", {
      get FloatingInputHint() {
        return DT;
      },
      set FloatingInputHint(e) {
        DT = e;
      }
    });
    X.add("game-ui/common/image/preload.ts", {
      get preloadImages() {
        return FT;
      },
      set preloadImages(e) {
        FT = e;
      },
      get usePreloadedImages() {
        return UT;
      },
      set usePreloadedImages(e) {
        UT = e;
      }
    });
    let BT = {
      closeIcon: '"Media/Glyphs/Close.svg"',
      toggleIcon: '"Media/Glyphs/ThickStrokeArrowRight.svg"',
      toggleIconExpanded: '"Media/Glyphs/ThickStrokeArrowDown.svg"',
      panel: "panel_YqS",
      header: "header_Bpo child-opacity-transition_nkS",
      content: "content_AD7 child-opacity-transition_nkS",
      footer: "footer_pD5 child-opacity-transition_nkS",
      "title-bar": "title-bar_PF4",
      titleBar: "title-bar_PF4",
      title: "title_zQN",
      icon: "icon_OVK",
      "icon-space": "icon-space_h_f",
      iconSpace: "icon-space_h_f",
      "close-button": "close-button_wKK",
      closeButton: "close-button_wKK",
      toggle: "toggle_Q44"
    };
    X.add("game-ui/common/panel/panel.module.scss", {
      get classes() {
        return BT;
      },
      set classes(e) {
        Object.assign(BT, e);
      }
    });
    FT([BT.closeIcon, BT.toggleIcon, BT.toggleIconExpanded]);
    var VT = Y.createContext({
      theme: BT
    });
    var HT = Y.createContext({
      expanded: true,
      toggleExpanded: () => {},
      theme: BT
    });
    function KT(e) {
      0;
      return Y.useMemo(() => ({
        ...BT,
        ...e
      }), [e]);
    }
    X.add("game-ui/common/panel/panel-context.ts", {
      get PanelContext() {
        return VT;
      },
      set PanelContext(e) {
        VT = e;
      },
      get CollapsiblePanelContext() {
        return HT;
      },
      set CollapsiblePanelContext(e) {
        HT = e;
      }
    });
    X.add("game-ui/common/panel/panel-theme.ts", {
      get usePanelTheme() {
        return KT;
      },
      set usePanelTheme(e) {
        KT = e;
      }
    });
    let WT = {
      header: "header_H_U header_Bpo child-opacity-transition_nkS",
      content: "content_XD5 content_AD7 child-opacity-transition_nkS",
      footer: "footer_Pa9 footer_pD5 child-opacity-transition_nkS",
      title: "title_SVH title_zQN",
      "floating-hint": "floating-hint_s8E",
      floatingHint: "floating-hint_s8E"
    };
    X.add("game-ui/common/panel/themes/default.module.scss", {
      get classes() {
        return WT;
      },
      set classes(e) {
        Object.assign(WT, e);
      }
    });
    let YT = {
      enter: "enter__zh enter_kO6",
      "enter-active": "enter-active_YAb enter-active_lrI",
      enterActive: "enter-active_YAb enter-active_lrI",
      exit: "exit_KiP exit_Von",
      "exit-active": "exit-active_g0a exit-active_jtN",
      exitActive: "exit-active_g0a exit-active_jtN"
    };
    X.add("game-ui/common/panel/themes/panel-transition.module.scss", {
      get classes() {
        return YT;
      },
      set classes(e) {
        Object.assign(YT, e);
      }
    });
    const qT = new Tg("PanelHeader");
    const XT = new Tg("PanelContent");
    const QT = new Tg("PanelFooter");
    0;
    var ZT = Y.forwardRef(function ({
      focusKey: e,
      header: t,
      footer: n,
      theme: s = WT,
      transition: i = YT,
      transitionSounds: a,
      className: o,
      contentClassName: r,
      children: l,
      onClose: c,
      allowFocusExit: u,
      showCloseHint: d,
      hintClassName: m,
      unfocusedHintAction: h,
      backActionOverride: g,
      allowLooping: p,
      ...f
    }, x) {
      up(a);
      const v = KT(s);
      const _ = km();
      const b = Y.Children.count(t) > 0;
      const T = Y.Children.count(l) > 0;
      const E = Y.Children.count(n) > 0;
      0;
      const I = Y.useMemo(() => ({
        theme: v,
        onClose: c
      }), [v, c]);
      0;
      0;
      0;
      0;
      0;
      const y = z.jsx(Dg, {
        onAction: c,
        action: g,
        children: z.jsx(VT.Provider, {
          value: I,
          children: z.jsx(dh, {
            styles: i,
            children: z.jsxs(Ep, {
              ref: x,
              focusKey: e,
              className: Qu()(v.panel, o),
              ...f,
              children: [z.jsxs(ep, {
                initialFocused: XT,
                allowLooping: p,
                direction: Mg.Vertical,
                children: [b && (0, z.jsx)(sp, {
                  focusKey: qT,
                  children: (0, z.jsx)("div", {
                    className: v.header,
                    children: t
                  })
                }), T && (0, z.jsx)(sp, {
                  focusKey: XT,
                  children: (0, z.jsx)("div", {
                    className: Qu()(v.content, r),
                    children: l
                  })
                }), E && (0, z.jsx)(sp, {
                  focusKey: QT,
                  children: (0, z.jsx)("div", {
                    className: v.footer,
                    children: n
                  })
                })]
              }), _ && (d || h) && (0, z.jsx)(JT, {
                focusedAction: "string" == typeof d ? d : undefined,
                unfocusedAction: h,
                className: Qu()(WT.floatingHint, m)
              })]
            })
          })
        })
      });
      return u ? y : (0, z.jsx)(Ip, {
        children: y
      });
    });
    const JT = ({
      focusedAction: e,
      unfocusedAction: t,
      ...n
    }) => {
      const s = sl(Nm);
      0;
      const i = Nh(Y.useContext(Zu));
      0;
      const a = Y.useMemo(() => s.find(e => "Close" === e.name) || s.find(e => "Back" === e.name), [s]);
      console;
      return i ? (0, z.jsx)(DT, {
        ...n,
        action: e || a?.name,
        active: !!e || !!a?.show
      }) : t ? (0, z.jsx)(DT, {
        ...n,
        action: t,
        active: true
      }) : null;
    };
    X.add("game-ui/common/panel/panel.tsx", {
      get Panel() {
        return ZT;
      },
      set Panel(e) {
        ZT = e;
      }
    });
    let eE = {
      header: "header_jAe header_Bpo child-opacity-transition_nkS",
      content: "content_VBF content_AD7 child-opacity-transition_nkS",
      footer: "footer_CZr footer_pD5 child-opacity-transition_nkS",
      title: "title_ctd title_zQN"
    };
    X.add("game-ui/common/panel/themes/dark-opaque.module.scss", {
      get classes() {
        return eE;
      },
      set classes(e) {
        Object.assign(eE, e);
      }
    });
    var nE = ({
      icon: e,
      theme: t,
      className: n,
      children: s,
      onCloseOverride: i,
      ...a
    }) => {
      0;
      const o = Y.useContext(VT);
      const r = km();
      const l = i ?? o.onClose;
      const c = !r && null != l;
      const u = t ?? o.theme;
      0;
      0;
      return z.jsxs("div", {
        ...a,
        className: Qu()(u.titleBar, n),
        children: [null != e ? (0, z.jsx)("img", {
          src: e,
          className: u.icon
        }) : c && (0, z.jsx)("div", {
          className: u.iconSpace
        }), z.jsx("div", {
          className: u.title,
          children: s
        }), c ? (0, z.jsx)($_, {
          tinted: true,
          focusKey: Eg,
          src: u.closeIcon,
          theme: q_,
          className: u.closeButton,
          onSelect: l,
          onMouseDown: e => {
            e.preventDefault();
            e.stopPropagation();
          }
        }) : null != e && (0, z.jsx)("div", {
          className: u.iconSpace
        })]
      });
    };
    X.add("game-ui/common/panel/panel-title-bar.tsx", {
      get PanelTitleBar() {
        return nE;
      },
      set PanelTitleBar(e) {
        nE = e;
      }
    });
    let sE = {
      dialog: "dialog_E8_",
      wide: "wide_XFu",
      row: "row_L6K",
      "pdx-title": "pdx-title_qXw",
      pdxTitle: "pdx-title_qXw",
      "pdx-button-row": "pdx-button-row_Dor",
      pdxButtonRow: "pdx-button-row_Dor",
      message: "message_SFv row_L6K",
      "error-message": "error-message_r4_",
      errorMessage: "error-message_r4_",
      paragraphs: "paragraphs_MnN paragraphs_nbD",
      buttons: "buttons_lZi row_L6K",
      button: "button_gJo",
      footer: "footer_Q7P row_L6K",
      "footer-label": "footer-label_AHF",
      footerLabel: "footer-label_AHF",
      "buttons-vertical": "buttons-vertical_Zha row_L6K",
      buttonsVertical: "buttons-vertical_Zha row_L6K",
      "button-ok": "button-ok_IS9 button_gJo",
      buttonOk: "button-ok_IS9 button_gJo",
      "error-dialog": "error-dialog_iaV",
      errorDialog: "error-dialog_iaV",
      "icon-layout": "icon-layout_cZT row_L6K",
      iconLayout: "icon-layout_cZT row_L6K",
      icon: "icon_JQd",
      "main-column": "main-column_Jzk",
      mainColumn: "main-column_Jzk",
      "error-details": "error-details_RaN row_L6K",
      errorDetails: "error-details_RaN row_L6K",
      content: "content_Aju",
      "copy-button": "copy-button_V8I",
      copyButton: "copy-button_V8I",
      "scroll-hint": "scroll-hint_qfE",
      scrollHint: "scroll-hint_qfE",
      "scroll-hint-label": "scroll-hint-label_ZAM",
      scrollHintLabel: "scroll-hint-label_ZAM",
      hint: "hint_oLL"
    };
    X.add("game-ui/common/panel/dialog/dialog.module.scss", {
      get classes() {
        return sE;
      },
      set classes(e) {
        Object.assign(sE, e);
      }
    });
    var aE = ({
      wide: e,
      title: t,
      content: n,
      buttons: s,
      theme: i = eE,
      zIndex: a,
      onClose: o,
      initialFocus: r,
      children: l
    }) => ((0, Y.useEffect)(() => {
      if (undefined !== a) {
        document.body.style.setProperty("--panelBackdropIndex", `${a}`);
        return () => {
          document.body.style.removeProperty("--panelBackdropIndex");
        };
      }
    }, [a]), (0, z.jsx)(t_, {
      children: (0, z.jsxs)(ZT, {
        theme: i,
        header: t && (0, z.jsx)(nE, {
          children: t
        }),
        className: Qu()(sE.dialog, e && sE.wide),
        onClose: o,
        children: [(0, z.jsx)("div", {
          className: sE.message,
          children: l
        }), (0, z.jsx)(kg, {
          onAction: o,
          children: (0, z.jsxs)(ep, {
            initialFocused: r,
            children: [n, s]
          })
        })]
      })
    }));
    const oE = new Tg("CHILDREN_KEY");
    const rE = new Tg("DIALOG_KEY");
    0;
    var lE = Y.createContext({
      showDialog: () => {},
      closeAll: () => {}
    });
    0;
    var cE = Y.createContext({
      onClose: () => {}
    });
    var uE = ({
      children: e
    }) => {
      0;
      const [t, n] = Y.useState([]);
      0;
      const s = Y.useMemo(() => ({
        showDialog: e => n(t => [...t, e]),
        closeAll: () => n([])
      }), []);
      0;
      const i = Y.useMemo(() => ({
        onClose: () => n(e => e.slice(0, -1))
      }), []);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(lE.Provider, {
        value: s,
        children: z.jsxs(ip, {
          focused: t.length > 0 ? rE : oE,
          children: [z.jsx(sp, {
            focusKey: oE,
            children: e
          }), z.jsx(sp, {
            focusKey: rE,
            children: z.jsx(cE.Provider, {
              value: i,
              children: z.jsx(cd, {
                children: t.length > 0 && (0, z.jsx)(Y.Fragment, {
                  children: t[t.length - 1]
                }, `${t.length}`)
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/common/panel/dialog/dialog.tsx", {
      get Dialog() {
        return aE;
      },
      set Dialog(e) {
        aE = e;
      },
      get DialogStack() {
        return lE;
      },
      set DialogStack(e) {
        lE = e;
      },
      get DialogContext() {
        return cE;
      },
      set DialogContext(e) {
        cE = e;
      },
      get DialogRenderer() {
        return uE;
      },
      set DialogRenderer(e) {
        uE = e;
      }
    });
    var mE;
    var hE;
    var gE;
    var pE;
    !function (e) {
      e[e.Off = 0] = "Off";
      e[e.Simple = 1] = "Simple";
      e[e.Advanced = 2] = "Advanced";
      e[e.Precise = 3] = "Precise";
    }(mE || (mE = {}));
    (function (e) {
      e[e.Warning = 0] = "Warning";
      e[e.Error = 1] = "Error";
    })(hE || (hE = {}));
    (function (e) {
      e[e.Quit = 1] = "Quit";
      e[e.SaveAndQuit = 2] = "SaveAndQuit";
      e[e.SaveAndContinue = 4] = "SaveAndContinue";
    })(gE || (gE = {}));
    (function (e) {
      e[e.Unknown = 0] = "Unknown";
      e[e.Windows = 1] = "Windows";
      e[e.Linux = 2] = "Linux";
      e[e.OSX = 4] = "OSX";
      e[e.PS4 = 8] = "PS4";
      e[e.PS5 = 16] = "PS5";
      e[e.XBoxOne = 32] = "XBoxOne";
      e[e.XBoxSeriesX = 64] = "XBoxSeriesX";
      e[e.XBoxSeriesS = 128] = "XBoxSeriesS";
      e[e.XBoxSeries = 192] = "XBoxSeries";
      e[e.PC = 7] = "PC";
      e[e.Consoles = 248] = "Consoles";
      e[e.PS = 24] = "PS";
      e[e.XBox = 224] = "XBox";
    })(pE || (pE = {}));
    var fE = $r("app", "ready");
    var xE = $r("app", "activeUI");
    var vE = $r("app", "bodyClassNames", "");
    var _E = $r("app", "fpsMode");
    var bE = $r("app", "frameStats");
    var TE = $r("app", "activeLocale", "en-US");
    var EE = $r("app", "currentError");
    var IE = $r("app", "backgroundProcessMessage", null);
    var yE = Zr("app", "confirmationDialog");
    var SE = $r("app", "platform");
    var jE = (e, t, n) => {
      const s = oc(n);
      const i = oc(t);
      return 0 == (e & sl(SE)) || Vr(i) ? s : i;
    };
    function CE(e) {
      tl("app", "confirmationDialogCallback", e);
    }
    function NE(e, t) {
      tl("app", "dismissibleConfirmationDialogCallback", e, t);
    }
    function wE() {
      tl("app", "exitApplication");
    }
    function OE() {
      tl("app", "saveBackupAndExitApplication");
    }
    function PE() {
      tl("app", "saveBackup");
    }
    function LE(e) {
      tl("app", "setClipboard", e);
    }
    function AE() {
      tl("app", "dismissCurrentError");
    }
    var ME = $r("app", "activeUIModsLocation");
    X.add("game-ui/common/data-binding/app-bindings.ts", {
      get FPSMode() {
        return mE;
      },
      set FPSMode(e) {
        mE = e;
      },
      get Severity() {
        return hE;
      },
      set Severity(e) {
        hE = e;
      },
      get Actions() {
        return gE;
      },
      set Actions(e) {
        gE = e;
      },
      get Platform() {
        return pE;
      },
      set Platform(e) {
        pE = e;
      },
      get ready() {
        return ready;
      },
      set ready(e) {
        ready = e;
      },
      get activeUI() {
        return activeUI;
      },
      set activeUI(e) {
        activeUI = e;
      },
      get bodyClassNames() {
        return bodyClassNames;
      },
      set bodyClassNames(e) {
        bodyClassNames = e;
      },
      get fpsMode() {
        return fpsMode;
      },
      set fpsMode(e) {
        fpsMode = e;
      },
      get frameStats() {
        return frameStats;
      },
      set frameStats(e) {
        frameStats = e;
      },
      get activeLocale() {
        return activeLocale;
      },
      set activeLocale(e) {
        activeLocale = e;
      },
      get currentError() {
        return currentError;
      },
      set currentError(e) {
        currentError = e;
      },
      get backgroundProcessMessage() {
        return backgroundProcessMessage;
      },
      set backgroundProcessMessage(e) {
        backgroundProcessMessage = e;
      },
      get confirmationDialog() {
        return confirmationDialog;
      },
      set confirmationDialog(e) {
        confirmationDialog = e;
      },
      get platform() {
        return platform;
      },
      set platform(e) {
        platform = e;
      },
      get usePlatformTranslation() {
        return jE;
      },
      set usePlatformTranslation(e) {
        jE = e;
      },
      get confirmationDialogCallback() {
        return CE;
      },
      set confirmationDialogCallback(e) {
        CE = e;
      },
      get dismissibleConfirmationDialogCallback() {
        return NE;
      },
      set dismissibleConfirmationDialogCallback(e) {
        NE = e;
      },
      get exitApplication() {
        return wE;
      },
      set exitApplication(e) {
        wE = e;
      },
      get saveBackupAndExitApplication() {
        return OE;
      },
      set saveBackupAndExitApplication(e) {
        OE = e;
      },
      get saveBackup() {
        return PE;
      },
      set saveBackup(e) {
        PE = e;
      },
      get setClipboard() {
        return LE;
      },
      set setClipboard(e) {
        LE = e;
      },
      get dismissCurrentError() {
        return AE;
      },
      set dismissCurrentError(e) {
        AE = e;
      },
      get activeUIModsLocation() {
        return activeUIModsLocation;
      },
      set activeUIModsLocation(e) {
        activeUIModsLocation = e;
      }
    });
    class RE {
      _callback = null;
      scrollTo(e, t) {
        if (null != this._callback) {
          this._callback.scrollTo(e, t);
        }
      }
      scrollBy(e, t) {
        if (null != this._callback) {
          this._callback.scrollBy(e, t);
        }
      }
      smoothScrollTo(e, t) {
        if (null != this._callback) {
          this._callback.smoothScrollTo(e, t);
        }
      }
      scrollIntoView(e) {
        if (null != this._callback) {
          this._callback.scrollIntoView(e);
        }
      }
      _attachCallback(e) {
        if (null == this._callback) {
          this._callback = e;
        } else {
          console.warn("Scroll controller callback already attached!");
        }
      }
      _detachCallback(e) {
        if (this._callback === e) {
          this._callback = null;
        } else {
          console.warn("Scroll controller callback not attached!");
        }
      }
    }
    function kE() {
      0;
      return Y.useMemo(() => new RE(), []);
    }
    X.add("game-ui/common/scrolling/scroll-controller.ts", {});
    X.add("game-ui/common/hooks/use-scroll-controller.tsx", {
      get useScrollController() {
        return kE;
      },
      set useScrollController(e) {
        kE = e;
      }
    });
    let DE = {
      button: "button_HeP",
      negative: "negative_ocn"
    };
    X.add("game-ui/common/input/button/themes/dialog-button.module.scss", {
      get classes() {
        return DE;
      },
      set classes(e) {
        Object.assign(DE, e);
      }
    });
    let UE = {
      button: "button_Ylt"
    };
    X.add("game-ui/common/input/button/themes/paradox-primary-button.module.scss", {
      get classes() {
        return UE;
      },
      set classes(e) {
        Object.assign(UE, e);
      }
    });
    let GE = {
      button: "button_Yp5"
    };
    X.add("game-ui/common/input/button/themes/paradox-secondary-button.module.scss", {
      get classes() {
        return GE;
      },
      set classes(e) {
        Object.assign(GE, e);
      }
    });
    var HE = ({
      controller: e,
      children: t
    }) => {
      const n = Vm();
      0;
      const s = Y.useRef(0);
      0;
      const i = Y.useMemo(() => ({
        "Scroll Vertical": e => {
          s.current = 300 * -e;
        }
      }), []);
      0;
      Y.useEffect(() => {
        let t = performance.now();
        let i = 0;
        const a = o => {
          if (0 !== s.current) {
            const i = (o - t) / 1e3;
            e.scrollBy(0, s.current * i * n);
          }
          t = o;
          i = window.requestAnimationFrame(a);
        };
        i = window.requestAnimationFrame(a);
        return () => window.cancelAnimationFrame(i);
      }, [e, n]);
      0;
      return z.jsx(Lg, {
        actions: i,
        children: t
      });
    };
    X.add("game-ui/common/scrolling/scroll-action-consumer/scroll-action-consumer.tsx", {
      get ScrollActionConsumer() {
        return HE;
      },
      set ScrollActionConsumer(e) {
        HE = e;
      }
    });
    let KE = {
      hint: "hint_DYv"
    };
    X.add("game-ui/common/input/text/text-input-hint.module.scss", {
      get classes() {
        return KE;
      },
      set classes(e) {
        Object.assign(KE, e);
      }
    });
    var zE = Y.forwardRef(function ({
      focusKey: e,
      debugName: t = "TextInput",
      type: n = "text",
      value: s = "",
      selectAllOnFocus: i = true,
      placeholder: a = "",
      vkTitle: o = "",
      vkDescription: r = "",
      disabled: l,
      forceHint: c,
      showHint: u,
      className: d,
      multiline: m,
      onFocus: h,
      onBlur: g,
      onKeyDown: p,
      onChange: f,
      onMouseUp: x,
      onSelect: v,
      onBack: _,
      onDoubleClick: b,
      ...T
    }, E) {
      0;
      const I = Y.useRef(null);
      const y = hd(E, I);
      const S = mp(yg(e ?? (l ? Eg : Ig), t), I);
      const j = Nh(S);
      const C = km();
      const N = sl(Am);
      0;
      const [w, O] = Y.useState(false);
      0;
      const P = Y.useMemo(() => w ? {
        Back: () => {
          if (null != I.current && document.activeElement === I.current) {
            I.current.blur();
            if (_) {
              _();
            }
          }
        }
      } : {
        Select: () => {
          if (null != I.current) {
            const e = I.current.getBoundingClientRect();
            Lm(e.x, e.y, e.width, e.height);
            N_(I, "--selectAnimation", "--selectDuration");
            I.current.focus();
            if (v) {
              v();
            }
          }
        }
      }, [w, v, _]);
      0;
      const L = Y.useCallback(e => {
        A.current = false;
        if (!m && 13 === e.keyCode || 27 === e.keyCode) {
          e.currentTarget.blur();
        }
        e.stopPropagation();
        if (p) {
          p(e);
        }
      }, [m, p]);
      0;
      const A = Y.useRef(false);
      0;
      const M = Y.useCallback(e => {
        A.current = false;
        if (f) {
          f(e);
        }
      }, [f]);
      0;
      const R = Y.useCallback(e => {
        O(true);
        A.current = true;
        if (h) {
          h(e);
        }
        rp(op.selectItem);
      }, [h]);
      0;
      const k = Y.useCallback(() => rp(op.hoverItem), []);
      0;
      const D = Y.useCallback(e => {
        if (A.current) {
          if (null != I.current && I.current.selectionStart === I.current.selectionEnd) {
            const e = I.current.value.length;
            I.current.setSelectionRange(0, e);
          }
          A.current = false;
        }
        if (x) {
          x(e);
        }
      }, [x]);
      0;
      const F = Y.useCallback(e => {
        O(false);
        if (g) {
          g(e);
        }
      }, [g]);
      0;
      Y.useEffect(() => {
        if (C && !j && I.current) {
          I.current.blur();
        }
      }, [j, C]);
      0;
      Y.useEffect(() => {
        if (I.current) {
          const e = I.current;
          const t = () => {
            if (e && A.current) {
              const t = e.value.length;
              e.setSelectionRange(i ? 0 : t, t);
            }
            A.current = false;
          };
          e.addEventListener("focus", t);
          return () => e.removeEventListener("focus", t);
        }
      }, [i]);
      0;
      const U = Y.useCallback(e => {
        b?.(e);
        if (I.current) {
          I.current.setSelectionRange(0, I.current.value.length);
        }
      }, [b]);
      const B = oc(a);
      const G = !w && !s && B;
      const V = oc(o);
      const H = oc(r);
      const K = undefined !== m ? "textarea" : "input";
      const {
        displayName: W,
        hidden: $,
        tooltip: q,
        tutorialTag: X,
        uiTag: Q,
        __Type: Z,
        ...J
      } = T;
      0;
      0;
      0;
      0;
      return z.jsx(jp, {
        disabled: !w || !C || !N,
        excludes: ["Save Game", "Change Value"],
        children: z.jsx(Lg, {
          actions: P,
          children: z.jsxs(Ph, {
            controller: S,
            children: [u && (0, z.jsx)(LT, {
              action: w ? "Back" : "Select",
              active: !(!j && !c),
              theme: KE
            }), z.jsx(K, {
              ...J,
              ref: y,
              type: "password" === n && G ? "text" : n,
              disabled: l,
              className: Qu()(d, j && C && "focused", G && "placeholder"),
              "vk-title": V,
              "vk-description": H,
              "vk-type": n,
              rows: "number" == typeof m ? m : 5,
              onFocus: R,
              onBlur: F,
              onKeyDown: L,
              onMouseUp: D,
              onMouseEnter: k,
              onDoubleClick: U,
              value: G ? B : s,
              onChange: M
            })]
          })
        })
      });
    });
    X.add("game-ui/common/input/text/text-input.tsx", {
      get TextInput() {
        return zE;
      },
      set TextInput(e) {
        zE = e;
      }
    });
    var $E = $r("paradox", "requestActive");
    var qE = $r("paradox", "loggedIn");
    var XE = $r("paradox", "accountLinkState");
    var QE = $r("paradox", "accountLinkProvider");
    var ZE = $r("paradox", "userName");
    var JE = $r("paradox", "email");
    var eI = $r("paradox", "avatar");
    var tI = $r("paradox", "hasInternetConnection");
    var nI = $r("paradox", "pdxSDKEnabled");
    function sI() {
      tl("paradox", "linkAccount");
    }
    function iI() {
      tl("paradox", "unlinkAccount");
    }
    function aI() {
      tl("paradox", "logout");
    }
    var oI;
    var rI = $r("paradox", "activeDialogs");
    function lI() {
      tl("paradox", "closeActiveDialog");
    }
    function cI(e) {
      tl("paradox", "onOptionSelected", e);
    }
    function uI() {
      tl("paradox", "showLoginForm");
    }
    function dI(e) {
      tl("paradox", "submitPasswordReset", e);
    }
    function mI(e) {
      tl("paradox", "submitLoginForm", Gu(e, "Game.UI.Menu.ParadoxBindings+LoginFormData"));
    }
    !function (e) {
      e.Login = "Game.UI.Menu.ParadoxBindings+LoginDialog";
      e.Registration = "Game.UI.Menu.ParadoxBindings+RegistrationDialog";
      e.AccountLink = "Game.UI.Menu.ParadoxBindings+AccountLinkDialog";
      e.AccountLinkOverwrite = "Game.UI.Menu.ParadoxBindings+AccountLinkOverwriteDialog";
      e.LegalDocument = "Game.UI.Menu.ParadoxBindings+LegalDocumentDialog";
      e.Confirmation = "Game.UI.Menu.ParadoxBindings+ConfirmationDialog";
      e.Error = "Game.UI.Menu.ParadoxBindings+ErrorDialog";
      e.MultiOption = "Game.UI.Menu.ParadoxBindings+MultiOptionDialog";
    }(oI || (oI = {}));
    var hI;
    var gI = $r("paradox", "countryCodes");
    function pI() {
      tl("paradox", "showRegistrationForm");
    }
    function fI(e) {
      tl("paradox", "showLink", e);
    }
    function xI(e) {
      tl("paradox", "submitRegistrationForm", Gu(e, "Game.UI.Menu.ParadoxBindings+RegistrationFormData"));
    }
    function vI() {
      tl("paradox", "confirmAccountLink");
    }
    function _I() {
      tl("paradox", "confirmAccountLinkOverwrite");
    }
    function bI() {
      tl("paradox", "markLegalDocumentAsViewed");
    }
    function TI() {
      tl("paradox", "showTermsOfUse");
    }
    function EI() {
      tl("paradox", "showPrivacyPolicy");
    }
    !function (e) {
      e[e.hidden = 0] = "hidden";
      e[e.unlinked = 1] = "unlinked";
      e[e.linked = 2] = "linked";
    }(hI || (hI = {}));
    X.add("game-ui/menu/data-binding/paradox-bindings.ts", {
      get requestActive() {
        return requestActive;
      },
      set requestActive(e) {
        requestActive = e;
      },
      get loggedIn() {
        return loggedIn;
      },
      set loggedIn(e) {
        loggedIn = e;
      },
      get accountLinkState() {
        return accountLinkState;
      },
      set accountLinkState(e) {
        accountLinkState = e;
      },
      get accountLinkProvider() {
        return accountLinkProvider;
      },
      set accountLinkProvider(e) {
        accountLinkProvider = e;
      },
      get userName() {
        return userName;
      },
      set userName(e) {
        userName = e;
      },
      get email() {
        return email;
      },
      set email(e) {
        email = e;
      },
      get avatar() {
        return avatar;
      },
      set avatar(e) {
        avatar = e;
      },
      get hasInternetConnection() {
        return hasInternetConnection;
      },
      set hasInternetConnection(e) {
        hasInternetConnection = e;
      },
      get pdxSDKEnabled() {
        return pdxSDKEnabled;
      },
      set pdxSDKEnabled(e) {
        pdxSDKEnabled = e;
      },
      get linkAccount() {
        return sI;
      },
      set linkAccount(e) {
        sI = e;
      },
      get unlinkAccount() {
        return iI;
      },
      set unlinkAccount(e) {
        iI = e;
      },
      get logout() {
        return aI;
      },
      set logout(e) {
        aI = e;
      },
      get activeDialogs() {
        return activeDialogs;
      },
      set activeDialogs(e) {
        activeDialogs = e;
      },
      get closeActiveDialog() {
        return lI;
      },
      set closeActiveDialog(e) {
        lI = e;
      },
      get onOptionSelected() {
        return cI;
      },
      set onOptionSelected(e) {
        cI = e;
      },
      get ParadoxDialogType() {
        return oI;
      },
      set ParadoxDialogType(e) {
        oI = e;
      },
      get showLoginForm() {
        return uI;
      },
      set showLoginForm(e) {
        uI = e;
      },
      get submitPasswordReset() {
        return dI;
      },
      set submitPasswordReset(e) {
        dI = e;
      },
      get submitLoginForm() {
        return mI;
      },
      set submitLoginForm(e) {
        mI = e;
      },
      get countryCodes() {
        return countryCodes;
      },
      set countryCodes(e) {
        countryCodes = e;
      },
      get showRegistrationForm() {
        return pI;
      },
      set showRegistrationForm(e) {
        pI = e;
      },
      get showLink() {
        return fI;
      },
      set showLink(e) {
        fI = e;
      },
      get submitRegistrationForm() {
        return xI;
      },
      set submitRegistrationForm(e) {
        xI = e;
      },
      get confirmAccountLink() {
        return vI;
      },
      set confirmAccountLink(e) {
        vI = e;
      },
      get confirmAccountLinkOverwrite() {
        return _I;
      },
      set confirmAccountLinkOverwrite(e) {
        _I = e;
      },
      get markLegalDocumentAsViewed() {
        return bI;
      },
      set markLegalDocumentAsViewed(e) {
        bI = e;
      },
      get ShowTermsOfUse() {
        return TI;
      },
      set ShowTermsOfUse(e) {
        TI = e;
      },
      get ShowPrivacyPolicy() {
        return EI;
      },
      set ShowPrivacyPolicy(e) {
        EI = e;
      },
      get AccountLinkState() {
        return hI;
      },
      set AccountLinkState(e) {
        hI = e;
      }
    });
    let II = {
      "paradox-dialog": "paradox-dialog_wt7",
      paradoxDialog: "paradox-dialog_wt7",
      wide: "wide_h40",
      header: "header_G7_",
      "close-button": "close-button_FeS",
      closeButton: "close-button_FeS",
      content: "content_hZD",
      "form-container": "form-container_Lw7",
      formContainer: "form-container_Lw7",
      "icon-row": "icon-row_rFk",
      iconRow: "icon-row_rFk",
      icon: "icon_Bz_",
      title: "title_dnP",
      "button-row": "button-row_tSi",
      buttonRow: "button-row_tSi",
      "button-column": "button-column_o63",
      buttonColumn: "button-column_o63",
      "flex-row": "flex-row_a_W",
      flexRow: "flex-row_a_W",
      "form-row": "form-row_LB0",
      formRow: "form-row_LB0",
      "form-row-label": "form-row-label_xO0",
      formRowLabel: "form-row-label_xO0",
      "light-field": "light-field_CGM",
      lightField: "light-field_CGM",
      "dark-field": "dark-field_bE7",
      darkField: "dark-field_bE7",
      "form-field": "form-field_D62",
      formField: "form-field_D62",
      invalid: "invalid_LPr",
      placeholder: "placeholder_U9A",
      "children-focused": "children-focused_aa6",
      childrenFocused: "children-focused_aa6",
      "form-field-children": "form-field-children_xfw",
      formFieldChildren: "form-field-children_xfw",
      "form-field-input": "form-field-input_Qxc",
      formFieldInput: "form-field-input_Qxc",
      "forgot-password-link": "forgot-password-link_Wch",
      forgotPasswordLink: "forgot-password-link_Wch",
      "day-field": "day-field_fHK",
      dayField: "day-field_fHK",
      "month-field": "month-field_Um1",
      monthField: "month-field_Um1",
      "year-field": "year-field_l7n",
      yearField: "year-field_l7n",
      "labeled-toggle": "labeled-toggle_Hn2",
      labeledToggle: "labeled-toggle_Hn2",
      toggle: "toggle_Zwc",
      "primary-button": "primary-button_klN",
      primaryButton: "primary-button_klN",
      focused: "focused_vZY",
      "registration-hint": "registration-hint_iqm",
      registrationHint: "registration-hint_iqm",
      label: "label_Ujn",
      terms: "terms_p0E",
      divider: "divider_ms0",
      "document-scrollable": "document-scrollable_EHj",
      documentScrollable: "document-scrollable_EHj",
      "document-text": "document-text_T4G",
      documentText: "document-text_T4G",
      "scroll-hint": "scroll-hint_vKd",
      scrollHint: "scroll-hint_vKd",
      "scroll-hint-label": "scroll-hint-label_qUP",
      scrollHintLabel: "scroll-hint-label_qUP",
      hint: "hint_PBH",
      "dropdown-item-hint": "dropdown-item-hint_Q7U",
      dropdownItemHint: "dropdown-item-hint_Q7U",
      "checkbox-hint": "checkbox-hint_b3B",
      checkboxHint: "checkbox-hint_b3B",
      "dropdown-label": "dropdown-label_ONK",
      dropdownLabel: "dropdown-label_ONK"
    };
    X.add("game-ui/menu/components/paradox/dialogs/paradox-dialog.module.scss", {
      get classes() {
        return II;
      },
      set classes(e) {
        Object.assign(II, e);
      }
    });
    var SI = ({
      wide: e,
      onClose: t,
      children: n
    }) => {
      const s = km();
      0;
      0;
      0;
      0;
      return z.jsx(kg, {
        onAction: t,
        children: z.jsxs("div", {
          className: Qu()(II.paradoxDialog, e && II.wide),
          children: [z.jsx("div", {
            className: II.header,
            children: !s && t && (0, z.jsx)($_, {
              tinted: true,
              focusKey: Eg,
              src: "Media/Glyphs/Close.svg",
              theme: q_,
              className: II.closeButton,
              onSelect: t
            })
          }), z.jsx("div", {
            className: II.content,
            children: n
          })]
        })
      });
    };
    var jI = ({
      icon: e,
      titleId: t,
      messageId: n,
      messageArgs: s,
      children: i
    }) => (0, z.jsx)(SI, {
      onClose: lI,
      children: (0, z.jsxs)(ep, {
        children: [e && (0, z.jsx)("div", {
          className: II.iconRow,
          children: (0, z.jsx)("img", {
            src: e,
            className: II.icon
          })
        }), t && (0, z.jsx)("div", {
          className: II.title,
          children: (0, z.jsx)(Tc, {
            id: t
          })
        }), n && (0, z.jsx)("p", {
          children: (0, z.jsx)(Tc, {
            id: n,
            args: s
          })
        }), i]
      })
    });
    var CI = ({
      type: e,
      value: t,
      placeholder: n,
      invalid: s,
      className: i,
      vkTitle: a,
      children: o,
      onChange: r
    }) => {
      0;
      const l = Y.useCallback(e => r(e.target.value), [r]);
      0;
      const [c, u] = Y.useState(false);
      0;
      const [d, m] = Y.useState(false);
      0;
      const [h, g] = Y.useState(false);
      0;
      const p = Y.useCallback(() => {
        g(false);
      }, []);
      0;
      const f = Y.useCallback(() => {
        g(true);
      }, []);
      const x = !d && c;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ep, {
        onFocusChange: u,
        className: Qu()(II.formField, s && II.invalid, d && II.childrenFocused, i),
        children: z.jsxs(ep, {
          children: [z.jsx(LT, {
            action: h ? "Back" : "Select",
            active: x,
            className: II.hint
          }), z.jsx(zE, {
            type: e,
            value: t,
            placeholder: n,
            vkTitle: a,
            onChange: l,
            onBlur: p,
            onFocus: f,
            className: II.formFieldInput
          }), z.jsx(Tp, {
            onFocusChange: m,
            className: II.formFieldChildren,
            children: o
          })]
        })
      });
    };
    var NI = ({
      value: e,
      label: t,
      invalid: n,
      disabled: s,
      onChange: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        className: II.labeledToggle,
        onFocusChange: o,
        children: [z.jsx(LT, {
          action: "Select",
          active: a,
          className: II.hint
        }), z.jsx(kb, {
          checked: e,
          disabled: s,
          className: Qu()(II.toggle, n && II.invalid),
          onChange: i
        }), z.jsx("div", {
          className: II.label,
          children: t
        })]
      });
    };
    X.add("game-ui/menu/components/paradox/dialogs/paradox-dialog.tsx", {
      get ParadoxDialog() {
        return SI;
      },
      set ParadoxDialog(e) {
        SI = e;
      },
      get MessageDialog() {
        return jI;
      },
      set MessageDialog(e) {
        jI = e;
      },
      get FormField() {
        return CI;
      },
      set FormField(e) {
        CI = e;
      },
      get LabeledToggle() {
        return NI;
      },
      set LabeledToggle(e) {
        NI = e;
      }
    });
    const wI = new Tg("CANCEL_KEY");
    var OI = ({
      ...e
    }) => {
      0;
      const [t, n] = Y.useState(false);
      0;
      const s = Y.useContext(cE);
      0;
      const i = Y.useCallback(n => {
        s.onClose();
        if (e.dismissible) {
          NE(n, t);
        } else {
          CE(n);
        }
      }, [s, t, e.dismissible]);
      const a = ac();
      0;
      const o = Y.useCallback(() => {
        LE(gu(a, e.details).replaceAll("\\\\", "\\").replaceAll("**", ""));
      }, [a, e.details]);
      const r = kE();
      0;
      const [l, c] = Y.useState(false);
      return "Paradox" === e.skin ? (0, z.jsx)(t_, {
        children: (0, z.jsx)(SI, {
          onClose: () => i(-1),
          children: (0, z.jsxs)(ep, {
            children: [e.title && (0, z.jsx)("div", {
              className: sE.pdxTitle,
              children: (0, z.jsx)(hu, {
                value: e.title
              })
            }), (0, z.jsx)(bb, {
              theme: sE,
              children: (0, z.jsx)(hu, {
                value: e.message
              })
            }), (0, z.jsx)("div", {
              className: sE.pdxButtonRow,
              children: (0, z.jsx)(PI, {
                dismissed: t,
                setDismissed: n,
                callback: i,
                ...e
              })
            })]
          })
        })
      }) : (0, z.jsx)(HE, {
        controller: r,
        children: (0, z.jsx)(aE, {
          title: e.title && (0, z.jsx)(hu, {
            value: e.title
          }),
          buttons: (0, z.jsx)(PI, {
            dismissed: t,
            setDismissed: n,
            callback: i,
            ...e
          }),
          content: e.details && (0, z.jsx)("div", {
            className: sE.iconLayout,
            children: (0, z.jsx)("div", {
              className: sE.mainColumn,
              children: (0, z.jsxs)("div", {
                className: sE.errorDetails,
                children: [(0, z.jsx)(ob, {
                  controller: r,
                  className: sE.content,
                  hintClassName: sE.scrollHint,
                  labelClassName: sE.scrollHintLabel,
                  children: (0, z.jsx)(bb, {
                    children: (0, z.jsx)(hu, {
                      value: e.details
                    })
                  })
                }), e.copyButton && (0, z.jsx)(Lh, {
                  onFocusChange: c,
                  children: (0, z.jsx)($_, {
                    disableHint: true,
                    tinted: true,
                    src: "Media/Glyphs/Copy.svg",
                    className: sE.copyButton,
                    onSelect: o,
                    children: (0, z.jsx)(LT, {
                      action: "Select",
                      active: l,
                      className: sE.hint
                    })
                  })
                })]
              })
            })
          }),
          onClose: () => i(1),
          wide: null !== e.details,
          initialFocus: wI,
          children: (0, z.jsx)(bb, {
            theme: sE,
            children: (0, z.jsx)(hu, {
              value: e.message
            })
          })
        })
      });
    };
    const PI = ({
      dismissed: e,
      setDismissed: t,
      callback: n,
      ...s
    }) => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsxs)("div", {
        className: sE.buttons,
        children: [(0, z.jsx)(L_, {
          theme: "Paradox" === s.skin ? UE : DE,
          className: Qu()("Default" === s.skin && sE.button),
          onSelect: () => n(0),
          children: (0, z.jsx)(hu, {
            value: s.confirmAction
          })
        }), s.otherActions && s.otherActions.map((e, t) => (0, z.jsx)(L_, {
          theme: "Paradox" === s.skin ? UE : DE,
          className: Qu()("Default" === s.skin && sE.button),
          onSelect: () => n(t + 2),
          children: (0, z.jsx)(hu, {
            value: e
          })
        }, t)), s.cancelAction && (0, z.jsx)(L_, {
          focusKey: wI,
          theme: "Paradox" === s.skin ? GE : DE,
          className: Qu()("Default" === s.skin && sE.button, "Default" === s.skin && DE.negative),
          onSelect: () => n(1),
          children: (0, z.jsx)(hu, {
            value: s.cancelAction
          })
        })]
      }), s.dismissible && (0, z.jsxs)("div", {
        className: sE.footer,
        children: [(0, z.jsx)(kb, {
          checked: e,
          onChange: t
        }), (0, z.jsx)("div", {
          className: sE.footerLabel,
          children: (0, z.jsx)(Pc.Common.DONT_SHOW_AGAIN, {})
        })]
      })]
    });
    var LI = ({
      title: e,
      message: t,
      confirm: n,
      cancel: s,
      onConfirm: i,
      onCancel: a,
      zIndex: o,
      dismissible: r = false,
      cancellable: l = true
    }) => {
      0;
      const c = Y.useContext(cE);
      0;
      const [u, d] = Y.useState(false);
      0;
      const m = Y.useCallback(() => {
        c.onClose();
        if (a) {
          a();
        }
      }, [c, a]);
      0;
      const h = Y.useCallback(() => {
        c.onClose();
        i(u);
      }, [c, u, i]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(kg, {
        onAction: m,
        children: z.jsx(aE, {
          title: e,
          zIndex: o,
          buttons: z.jsxs(z.Fragment, {
            children: [z.jsxs("div", {
              className: sE.buttons,
              children: [false !== n && (0, z.jsx)(L_, {
                theme: DE,
                className: sE.button,
                onSelect: h,
                children: n ?? (0, z.jsx)(Pc.Common.YES, {})
              }), l && (0, z.jsx)(L_, {
                focusKey: wI,
                theme: DE,
                className: Qu()(sE.button, DE.negative),
                onSelect: m,
                children: s ?? (0, z.jsx)(Pc.Common.NO, {})
              })]
            }), r && (0, z.jsxs)("div", {
              className: sE.footer,
              children: [(0, z.jsx)(kb, {
                checked: u,
                onChange: d
              }), (0, z.jsx)("div", {
                className: sE.footerLabel,
                children: (0, z.jsx)(Pc.Common.DONT_SHOW_AGAIN, {})
              })]
            })]
          }),
          onClose: m,
          initialFocus: wI,
          children: z.jsx(bb, {
            theme: sE,
            children: t
          })
        })
      });
    };
    X.add("game-ui/common/panel/dialog/confirmation-dialog.tsx", {
      get GameTriggeredConfirmationDialog() {
        return OI;
      },
      set GameTriggeredConfirmationDialog(e) {
        OI = e;
      },
      get UITriggeredConfirmationDialog() {
        return LI;
      },
      set UITriggeredConfirmationDialog(e) {
        LI = e;
      }
    });
    let AI = {
      button: "button_ke4",
      icon: "icon_be5"
    };
    X.add("game-ui/common/input/button/floating-icon-button.module.scss", {
      get classes() {
        return AI;
      },
      set classes(e) {
        Object.assign(AI, e);
      }
    });
    var RI = ({
      theme: e,
      children: t,
      ...n
    }) => (0, z.jsx)($_, {
      ...n,
      theme: e,
      children: (0, z.jsx)("div", {
        className: e.label,
        children: t
      })
    });
    X.add("game-ui/common/input/button/labeled-icon-button.tsx", {
      get LabeledIconButton() {
        return RI;
      },
      set LabeledIconButton(e) {
        RI = e;
      }
    });
    let kI = {
      button: "button_7tF"
    };
    X.add("game-ui/common/input/button/themes/flat-button.module.scss", {
      get classes() {
        return kI;
      },
      set classes(e) {
        Object.assign(kI, e);
      }
    });
    let FI = {
      button: "button_GME",
      hint: "hint_zER"
    };
    X.add("game-ui/common/input/button/themes/primary-button.module.scss", {
      get classes() {
        return FI;
      },
      set classes(e) {
        Object.assign(FI, e);
      }
    });
    let BI = {
      button: "button_uFa child-opacity-transition_nkS",
      icon: "icon_zVk",
      label: "label_NLv"
    };
    X.add("game-ui/menu/themes/menu-item.module.scss", {
      get classes() {
        return BI;
      },
      set classes(e) {
        Object.assign(BI, e);
      }
    });
    const VI = {
      flat: kI,
      primary: FI,
      round: q_,
      menu: BI,
      default: w_,
      icon: z_,
      floating: AI
    };
    var HI = e => {
      const {
        variant: t = "default"
      } = e;
      let n = VI[t];
      return e.src ? n.label ? (0, z.jsx)(RI, {
        theme: n,
        ...e,
        src: e.src
      }) : ("default" === t && (n = VI.icon), (0, z.jsx)($_, {
        theme: n,
        ...e,
        src: e.src
      })) : (0, z.jsx)(L_, {
        theme: n,
        ...e
      });
    };
    var KI = e => {
      const t = e.src || "Media/Glyphs/Credits.svg";
      0;
      return z.jsx(HI, {
        tinted: true,
        variant: "menu",
        ...e,
        src: t
      });
    };
    var WI = e => {
      const t = e.src || "Media/Glyphs/Credits.svg";
      0;
      return z.jsx(HI, {
        tinted: true,
        variant: "floating",
        ...e,
        src: t
      });
    };
    X.add("game-ui/ui/button.tsx", {
      get Button() {
        return HI;
      },
      set Button(e) {
        HI = e;
      },
      get MenuButton() {
        return KI;
      },
      set MenuButton(e) {
        KI = e;
      },
      get FloatingButton() {
        return WI;
      },
      set FloatingButton(e) {
        WI = e;
      }
    });
    0;
    var zI = Y.createContext(true);
    var YI = ({
      visible: e,
      direction: t = "down",
      alignment: n = "left",
      minHeight: s = 0,
      minWidth: i = 0,
      className: a,
      content: o,
      children: r,
      style: l
    }) => {
      0;
      const c = Y.useRef(null);
      0;
      const u = Y.useRef(null);
      const d = hm(c, e);
      const m = hm(u, e && null != u);
      const h = Fm(e);
      const g = Vm();
      0;
      const p = Y.useMemo(() => e && null != d ? function (e, t, n, s, i, a, o) {
        const r = t.y - e.bottom;
        const l = e.top;
        if (i > 0) {
          if ("down" === n && r < i && r < l) {
            n = "up";
          } else if (l < i && l < r) {
            n = "down";
          }
        }
        let c;
        let u;
        if ("left" === s) {
          const n = null != o ? Math.max(e.left + o.width - t.x, 0) : 0;
          c = e.left - n;
        } else {
          u = t.x - e.right;
        }
        return "up" === n ? {
          position: "absolute",
          left: c,
          right: u,
          bottom: t.y - e.top,
          maxHeight: l,
          minWidth: a,
          visibility: o && o.width > 0 ? "inherit" : "hidden"
        } : {
          position: "absolute",
          left: c,
          right: u,
          top: e.bottom,
          maxHeight: r,
          minWidth: a,
          visibility: o && o.width > 0 ? "inherit" : "hidden"
        };
      }(d, h, t, n, s * g, true === i ? d?.width || 0 : i * g, m) : $I, [s, g, i, d, e, h, t, n, m]);
      const f = {
        ...p,
        ...l
      };
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(xd, {
          ref: c,
          children: r
        }), e && (0, z.jsx)(Wm, {
          children: (0, z.jsx)(zI.Provider, {
            value: e && null != d,
            children: (0, z.jsx)("div", {
              className: a,
              style: f,
              ref: u,
              children: o
            })
          })
        }, "popup")]
      });
    };
    const $I = {
      position: "absolute",
      visibility: "hidden"
    };
    X.add("game-ui/common/anchored-popup/anchored-popup.tsx", {
      get AnchoredPopupVisibleContext() {
        return zI;
      },
      set AnchoredPopupVisibleContext(e) {
        zI = e;
      },
      get AnchoredPopup() {
        return YI;
      },
      set AnchoredPopup(e) {
        YI = e;
      }
    });
    let qI = {
      hiddenIcon: '"Media/Glyphs/StrokeArrowDown.svg"',
      visibleIcon: '"Media/Glyphs/StrokeArrowUp.svg"',
      "dropdown-toggle": "dropdown-toggle_prl",
      dropdownToggle: "dropdown-toggle_prl",
      label: "label_l_4",
      "dropdown-popup": "dropdown-popup_mMv",
      dropdownPopup: "dropdown-popup_mMv",
      "dropdown-menu": "dropdown-menu_Swd",
      dropdownMenu: "dropdown-menu_Swd"
    };
    X.add("game-ui/common/input/dropdown/dropdown.module.scss", {
      get classes() {
        return qI;
      },
      set classes(e) {
        Object.assign(qI, e);
      }
    });
    let QI = {
      "dropdown-toggle": "dropdown-toggle_bN9",
      dropdownToggle: "dropdown-toggle_bN9",
      label: "label_REA",
      indicator: "indicator_lzV",
      "dropdown-popup": "dropdown-popup_duR",
      dropdownPopup: "dropdown-popup_duR",
      "dropdown-menu": "dropdown-menu_rL4",
      dropdownMenu: "dropdown-menu_rL4",
      scrollable: "scrollable_MVT",
      "dropdown-item": "dropdown-item_t3P",
      dropdownItem: "dropdown-item_t3P"
    };
    X.add("game-ui/common/input/dropdown/themes/default.module.scss", {
      get classes() {
        return QI;
      },
      set classes(e) {
        Object.assign(QI, e);
      }
    });
    0;
    var JI = Y.createContext({
      visible: false,
      theme: QI,
      show: () => {},
      hide: () => {},
      toggle: () => {}
    });
    var ey = new Tg("DROPDOWN_TOGGLE");
    var ty = new Tg("DROPDOWN_MENU");
    var ny = ({
      focusKey: e,
      initialFocused: t,
      theme: n = QI,
      content: s,
      alignment: i,
      children: a,
      onToggle: o
    }) => {
      0;
      const r = Y.useMemo(() => ({
        ...qI,
        ...n
      }), [n]);
      0;
      const [l, c] = Y.useState(false);
      0;
      const u = Y.useRef(null);
      0;
      const d = Y.useCallback(() => {
        rp(op.selectDropdown);
        c(e => !e);
        if (o) {
          o(!l);
        }
      }, [o, l]);
      0;
      const m = Y.useCallback(() => {
        c(true);
        if (o) {
          o(true);
        }
      }, [o]);
      0;
      const h = Y.useCallback(() => {
        c(false);
        if (o) {
          o(false);
        }
      }, [o]);
      0;
      const g = Y.useMemo(() => ({
        visible: l,
        theme: r,
        show: m,
        hide: h,
        toggle: d
      }), [l, r, m, h, d]);
      0;
      Y.useEffect(() => {
        if (l) {
          const e = e => {
            if (!u.current) {
              return;
            }
            const t = u.current.getBoundingClientRect();
            if (e.clientX < t.left || e.clientX > t.right || e.clientY < t.top || e.clientY > t.bottom) {
              c(false);
            }
          };
          document.addEventListener("mousedown", e);
          return () => document.removeEventListener("mousedown", e);
        }
      }, [l]);
      const p = s_();
      0;
      0;
      0;
      const f = z.jsx(Tp, {
        className: r?.dropdownMenu,
        ref: u,
        children: z.jsx(ab, {
          className: r.scrollable,
          children: z.jsx(ep, {
            focusKey: ty,
            initialFocused: t,
            direction: Mg.Vertical,
            allowLooping: true,
            children: s
          })
        })
      });
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [l && (0, z.jsx)(o_, {
          onClick: g.hide
        }), z.jsx(jp, {
          includes: Sp,
          disabled: !l,
          children: z.jsx(kg, {
            onAction: g.hide,
            disabled: !l,
            children: z.jsx(ip, {
              focusKey: e,
              focused: l ? ty : ey,
              activation: $u.AnyChildren,
              children: z.jsx(JI.Provider, {
                value: g,
                children: z.jsx(YI, {
                  visible: l,
                  className: r.dropdownPopup,
                  content: f,
                  minHeight: 300,
                  minWidth: true,
                  alignment: i,
                  style: p,
                  children: z.jsx(sp, {
                    focusKey: ey,
                    children: a
                  })
                })
              })
            })
          })
        })]
      });
    };
    X.add("game-ui/common/input/dropdown/dropdown.tsx", {
      get DropdownContext() {
        return JI;
      },
      set DropdownContext(e) {
        JI = e;
      },
      get DROPDOWN_TOGGLE_KEY() {
        return ey;
      },
      set DROPDOWN_TOGGLE_KEY(e) {
        ey = e;
      },
      get DROPDOWN_MENU_KEY() {
        return ty;
      },
      set DROPDOWN_MENU_KEY(e) {
        ty = e;
      },
      get Dropdown() {
        return ny;
      },
      set Dropdown(e) {
        ny = e;
      }
    });
    var sy = ({
      theme: e,
      openIconComponent: t,
      closeIconComponent: n,
      children: s,
      ...i
    }) => {
      0;
      const a = Y.useContext(JI);
      const o = e ?? a.theme;
      0;
      0;
      return z.jsxs(iy, {
        ...i,
        theme: e,
        children: [z.jsx("div", {
          className: o.label,
          children: s
        }), o.indicator && (0, z.jsxs)(z.Fragment, {
          children: [a.visible && o.visibleIcon && (n || (0, z.jsx)(W_, {
            src: o.visibleIcon,
            className: o.indicator
          })), !a.visible && o.hiddenIcon && (t || (0, z.jsx)(W_, {
            src: o.hiddenIcon,
            className: o.indicator
          }))]
        })]
      });
    };
    var iy = ({
      theme: e,
      buttonTheme: t,
      sounds: n,
      showHint: s,
      selectSound: i = op.selectDropdown,
      className: a,
      children: o,
      ...r
    }) => {
      0;
      const l = Y.useContext(JI);
      const c = e ?? l.theme;
      const u = km();
      0;
      return z.jsx(L_, {
        disableHint: !s,
        hintAction: l.visible ? "Back" : "Select",
        forceHint: s && l.visible,
        ...r,
        focusKey: ey,
        className: Qu()(c.dropdownToggle, a, l.visible && "active", l.visible && u && "focused"),
        theme: t,
        sounds: n,
        selectSound: i,
        onSelect: l.toggle,
        tooltipLabel: l.visible ? undefined : r.tooltipLabel,
        children: o
      });
    };
    X.add("game-ui/common/input/dropdown/dropdown-toggle.tsx", {
      get DropdownToggle() {
        return sy;
      },
      set DropdownToggle(e) {
        sy = e;
      },
      get DropdownToggleBase() {
        return iy;
      },
      set DropdownToggleBase(e) {
        iy = e;
      }
    });
    var ay = {
      ...P_,
      hover: null
    };
    function oy({
      focusKey: e,
      value: t,
      selected: n,
      theme: s,
      sounds: i = ay,
      className: a,
      onChange: o,
      onToggleSelected: r,
      closeOnSelect: l = true,
      children: c
    }) {
      0;
      const u = Y.useContext(JI);
      const d = s ?? u.theme;
      0;
      const m = Y.useCallback(() => {
        if (n) {
          if (r) {
            r(t);
          }
        } else if (o) {
          o(t);
        }
        if (l) {
          u.hide();
        }
      }, [n, l, u, o, t, r]);
      const h = null != e ? e : "string" == typeof t || "number" == typeof t ? t : undefined;
      0;
      return z.jsx(L_, {
        disableHint: true,
        focusKey: h,
        sounds: i,
        className: Qu()(d.dropdownItem, n && "selected", a),
        onSelect: m,
        children: c || " "
      });
    }
    X.add("game-ui/common/input/dropdown/items/dropdown-item.tsx", {
      get defaultDropdownItemSounds() {
        return ay;
      },
      set defaultDropdownItemSounds(e) {
        ay = e;
      },
      get DropdownItem() {
        return oy;
      },
      set DropdownItem(e) {
        oy = e;
      }
    });
    var ry = ({
      onDrag: e,
      children: t
    }) => {
      0;
      const [n, s] = Y.useState(Ld);
      0;
      const i = Y.useCallback(t => {
        const n = function (e, t, n) {
          if (n) {
            const s = n.getBoundingClientRect();
            return {
              x: e - s.left,
              y: t - s.top
            };
          }
          return Ld;
        }(t.clientX, t.clientY, t.currentTarget);
        s(n);
        e(t.clientX, t.clientY, n.x, n.y);
        return true;
      }, [e, s]);
      0;
      const a = Y.useCallback(t => {
        e(t.clientX, t.clientY, n.x, n.y);
      }, [e, n]);
      0;
      const o = Y.useCallback(t => {
        e(t.clientX, t.clientY, n.x, n.y);
      }, [e, n]);
      const [, r] = eb(i, a, o);
      0;
      return z.jsx(z.Fragment, {
        children: Y.Children.map(t, e => Y.isValidElement(e) ? Y.cloneElement(e, {
          onMouseDown: r
        }) : (0, z.jsx)("div", {
          onMouseDown: r,
          children: e
        }))
      });
    };
    X.add("game-ui/common/input/drag-handle.tsx", {
      get DragHandle() {
        return ry;
      },
      set DragHandle(e) {
        ry = e;
      }
    });
    var ly = ({
      header: e,
      initialPosition: t = {
        x: .5,
        y: .5
      },
      className: n,
      style: s,
      children: i,
      ...a
    }) => {
      0;
      const [o, r] = Y.useState(t);
      const l = Fm();
      0;
      const c = Y.useRef(null);
      const u = hm(c);
      0;
      const d = Y.useCallback((e, t, n, s) => {
        e = Math.min(Math.max(e, 0), l.x);
        t = Math.min(Math.max(t, 0), l.y);
        if (null != u) {
          r(function (e, t, n) {
            return {
              x: e.x / (n.x - t.width),
              y: e.y / (n.y - t.height)
            };
          }({
            x: e - n,
            y: t - s
          }, u, l));
        }
      }, [r, l, u]);
      0;
      return z.jsx(ZT, {
        ...a,
        ref: c,
        header: e ? (0, z.jsx)(ry, {
          onDrag: d,
          children: e
        }) : undefined,
        className: Qu()("draggable-panel", n),
        style: {
          ...s,
          visibility: u ? "inherit" : "hidden",
          left: u ? o.x * (l.x - u.width) : 0,
          top: u ? o.y * (l.y - u.height) : 0
        },
        children: i
      });
    };
    X.add("game-ui/common/panel/draggable-panel/draggable-panel.tsx", {
      get DraggablePanel() {
        return ly;
      },
      set DraggablePanel(e) {
        ly = e;
      }
    });
    let cy = {
      "info-section": "info-section_I7V",
      infoSection: "info-section_I7V",
      content: "content_Cdk item-focused_FuT",
      column: "column_aPB",
      divider: "divider_rfM",
      "no-margin": "no-margin_K7I",
      noMargin: "no-margin_K7I",
      "disable-focus-highlight": "disable-focus-highlight_ik3",
      disableFocusHighlight: "disable-focus-highlight_ik3",
      "info-wrap-box": "info-wrap-box_Rt4",
      infoWrapBox: "info-wrap-box_Rt4"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-section/info-section.module.scss", {
      get classes() {
        return cy;
      },
      set classes(e) {
        Object.assign(cy, e);
      }
    });
    var dy = ({
      focusKey: e,
      tooltip: t,
      disableFocus: n = false,
      className: s,
      children: i
    }) => (0, z.jsx)("div", {
      className: Qu()(cy.infoSection, s),
      children: (0, z.jsx)(bg, {
        tooltip: t,
        direction: "right",
        alignment: "center",
        children: n ? (0, z.jsx)(Tp, {
          className: Qu()(cy.content, cy.disableFocusHighlight),
          children: (0, z.jsx)(ep, {
            children: i
          })
        }) : (0, z.jsx)(Ep, {
          focusKey: e,
          className: cy.content,
          children: (0, z.jsx)(ep, {
            children: i
          })
        })
      })
    });
    var my = ({
      noMargin: e = false
    }) => (0, z.jsx)("div", {
      className: Qu()(cy.divider, e && cy.noMargin)
    });
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-section/info-section.tsx", {
      get InfoSection() {
        return dy;
      },
      set InfoSection(e) {
        dy = e;
      },
      get Divider() {
        return my;
      },
      set Divider(e) {
        my = e;
      }
    });
    var hy = {};
    var gy = ({
      styles: e,
      enterDuration: t,
      exitDuration: n,
      enterExpandHeight: s = true,
      exitCollapseHeight: i = true,
      children: a
    }) => {
      const o = e ?? hy;
      0;
      const {
        state: r,
        onMount: l,
        onUnmount: c
      } = Y.useContext(rd);
      0;
      const u = Y.useContext(dp);
      0;
      const d = Y.useRef(null);
      const m = hd(a.ref, d);
      0;
      const h = Y.useRef(false);
      0;
      const [g, p] = Y.useState(function (e, t) {
        switch (e) {
          case ed.enter:
            return t.enter;
          case ed.exit:
            return t.exit;
          default:
            return null;
        }
      }(r, o));
      0;
      const f = Y.useRef(g);
      f.current = g;
      0;
      const x = Y.useCallback(e => {
        if (h.current) {
          p(e);
        }
      }, []);
      0;
      const [v, _] = Y.useState(r === ed.enter && s ? {
        height: "0px"
      } : {});
      0;
      const b = Y.useCallback(e => {
        if (h.current) {
          _(e);
        }
      }, []);
      0;
      Y.useEffect(() => (h.current || (h.current = true, l()), () => {
        if (h.current) {
          h.current = false;
          c();
        }
      }), [l, c]);
      0;
      Y.useEffect(() => {
        const e = new $m();
        (async () => {
          if (r === ed.enter) {
            x(o.enter);
            if (s && d.current instanceof HTMLElement) {
              const e = d.current.offsetHeight;
              b(t => null == t ? {
                height: e + "px"
              } : t);
            }
            if (!(await ch(e))) {
              return;
            }
            if (!(await ch(e))) {
              return;
            }
            x(o.enterActive);
            if (!(await ch(e))) {
              return;
            }
            const n = t ?? Zm(d.current);
            if (s) {
              const t = performance.now();
              const s = Jm(d.current, "height");
              let i = 0;
              for (d.current instanceof HTMLElement && (i = d.current.scrollHeight, b({
                height: i + "px"
              })); performance.now() - t <= n;) {
                if (d.current instanceof HTMLElement) {
                  const e = d.current.scrollHeight;
                  if (i < e) {
                    b(null != s ? {
                      ...th(d.current, "height", nh(s, performance.now() - t)),
                      height: e + "px"
                    } : {
                      height: e + "px"
                    });
                    i = e;
                  }
                }
                if (!(await ch(e))) {
                  return;
                }
              }
            } else if (!(await lh(n, e))) {
              return;
            }
            if (s) {
              u.updateThumbs();
            }
            x(null);
            b(null);
          } else if (r === ed.exit) {
            if (null == f.current) {
              x(o.exit);
              if (i && d.current instanceof HTMLElement) {
                b({
                  height: d.current.offsetHeight + "px"
                });
              }
              if (!(await ch(e))) {
                return;
              }
              if (!(await ch(e))) {
                return;
              }
            }
            x(o.exitActive);
            if (!(await ch(e))) {
              return;
            }
            if (i && d.current instanceof HTMLElement) {
              b({
                height: "0px"
              });
            }
            const t = n ?? Zm(d.current);
            if (!(await lh(t, e))) {
              return;
            }
            if (i) {
              u.updateThumbs();
            }
            if (h.current) {
              h.current = false;
              c();
            }
          }
        })();
        return () => {
          e.cancel();
          x(null);
          b(null);
        };
      }, [t, s, i, n, c, u, r, o.enter, o.enterActive, o.exit, o.exitActive, x, b]);
      0;
      return z.jsx(rd.Provider, {
        value: od,
        children: Y.cloneElement(a, {
          ...a.props,
          ref: m,
          className: Qu()(a.props.className, o.base, g),
          style: {
            ...a.props.style,
            ...v
          }
        })
      });
    };
    X.add("game-ui/common/animations/height-transition.tsx", {
      get emptyStyles() {
        return hy;
      },
      set emptyStyles(e) {
        hy = e;
      },
      get HeightTransition() {
        return gy;
      },
      set HeightTransition(e) {
        gy = e;
      }
    });
    var py = ({
      in: e,
      skipInitial: t = true,
      onEnter: n,
      onExit: s,
      children: i
    }) => {
      0;
      const a = Y.useRef(t);
      0;
      Y.useEffect(() => {
        if (!e) {
          a.current = false;
        }
      }, [e]);
      const o = e ? a.current ? ed.in : ed.enter : ed.exit;
      0;
      const [r, l] = Y.useState(0);
      const c = e || r > 0;
      0;
      const u = Y.useRef(n);
      u.current = n;
      0;
      const d = Y.useRef(s);
      d.current = s;
      0;
      Y.useEffect(() => {
        if (c) {
          if (u.current) {
            u.current();
          }
          return () => {
            if (d.current) {
              d.current();
            }
          };
        }
      }, [c]);
      0;
      const m = Y.useCallback(() => l(e => e + 1), []);
      0;
      const h = Y.useCallback(() => l(e => e - 1), []);
      0;
      const g = Y.useMemo(() => ({
        state: o,
        onMount: m,
        onUnmount: h
      }), [m, h, o]);
      0;
      const p = Y.useContext(ld);
      0;
      const f = Y.useContext(Zu);
      0;
      0;
      0;
      return z.jsx(rd.Provider, {
        value: g,
        children: z.jsx(ld.Provider, {
          value: p || !e,
          children: z.jsx(Zu.Provider, {
            value: e ? f : Ju,
            children: c && i
          })
        })
      });
    };
    X.add("game-ui/common/animations/transition-coordinator.tsx", {
      get TransitionCoordinator() {
        return py;
      },
      set TransitionCoordinator(e) {
        py = e;
      }
    });
    let fy = {
      "foldout-item": "foldout-item_wOF",
      foldoutItem: "foldout-item_wOF",
      header: "header_8H_ item-mouse-states_Fmi item-focused_FuT",
      "header-content": "header-content_wUX",
      headerContent: "header-content_wUX",
      "disable-active-state": "disable-active-state_w8a",
      disableActiveState: "disable-active-state_w8a",
      "disable-mouse-states": "disable-mouse-states_js5",
      disableMouseStates: "disable-mouse-states_js5",
      toggle: "toggle_yQv",
      content: "content_mJm",
      enter: "enter_sm5",
      exit: "exit_ScE",
      "exit-active": "exit-active_LGX",
      exitActive: "exit-active_LGX",
      "enter-active": "enter-active_jNk",
      enterActive: "enter-active_jNk"
    };
    X.add("game-ui/common/foldout/foldout-item.module.scss", {
      get classes() {
        return fy;
      },
      set classes(e) {
        Object.assign(fy, e);
      }
    });
    var vy = Y.createContext({
      theme: fy
    });
    function _y(e) {
      0;
      return Y.useMemo(() => ({
        ...fy,
        ...e
      }), [e]);
    }
    X.add("game-ui/common/foldout/foldout-context.ts", {
      get FoldoutContext() {
        return vy;
      },
      set FoldoutContext(e) {
        vy = e;
      }
    });
    X.add("game-ui/common/foldout/foldout-theme.ts", {
      get useFoldoutTheme() {
        return _y;
      },
      set useFoldoutTheme(e) {
        _y = e;
      }
    });
    var by = ({
      header: e,
      theme: t = fy,
      type: n = "Item",
      nesting: s = 0,
      initialExpanded: i = false,
      expandFromContent: a = false,
      onSelect: o,
      onToggleExpanded: r,
      className: l,
      children: c
    }) => {
      const u = _y(t);
      const d = Y.Children.count(c) > 0;
      0;
      const [m, h] = Y.useState(i);
      0;
      const g = Y.useCallback(() => {
        rp(op.expandPanel);
        h(e => !e);
        if (r) {
          r(!m);
        }
      }, [m, r]);
      0;
      const p = Y.useCallback(() => {
        if (o) {
          rp(op.selectItem);
          o();
        }
      }, [o]);
      const f = !d && !o;
      0;
      const x = Y.useMemo(() => ({
        theme: u,
        expandable: d,
        expanded: m,
        onToggleExpanded: g,
        onSelect: p
      }), [d, m, p, g, u]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(vy.Provider, {
        value: x,
        children: z.jsxs("div", {
          style: {
            "--nesting": s
          },
          className: Qu()(u.foldoutItem, d && u.expandable, m && u.expanded, "Item" === n && u.item, "Group" === n && u.group, "Category" === n && u.category, f && u.disableMouseStates, l),
          children: [z.jsx(Rg, {
            onAction: p,
            disabled: d,
            children: z.jsx(Fg, {
              expandable: d,
              disabled: !d,
              expanded: m,
              onAction: g,
              children: e
            })
          }), z.jsx(Fg, {
            expandable: d,
            disabled: !d || !a,
            expanded: m,
            onAction: g,
            children: z.jsx(py, {
              in: d && m,
              children: z.jsx(gy, {
                styles: fy,
                children: z.jsx("div", {
                  className: Qu()(u.content, "foldout-expanded"),
                  children: z.jsx(ep, {
                    children: c
                  })
                })
              })
            })
          })]
        })
      });
    };
    var Ty = ({
      onClick: e,
      onFocusChange: t,
      children: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      const a = Y.useContext(vy);
      0;
      const o = Y.useCallback(() => rp(op.hoverItem), []);
      0;
      const r = Y.useCallback(() => {
        if (a.expandable) {
          if (a.onToggleExpanded) {
            a.onToggleExpanded();
          }
        } else if (a.onSelect) {
          a.onSelect();
        }
        if (e) {
          e();
        }
      }, [a, e]);
      0;
      const l = Y.useCallback(e => {
        i(e);
        if (t) {
          t(e);
        }
      }, [t]);
      0;
      0;
      return z.jsxs(Ep, {
        className: Qu()(a.theme.header),
        onMouseEnter: o,
        onClick: r,
        onFocusChange: l,
        children: [z.jsx("div", {
          className: a.theme.headerContent,
          children: n
        }), a.expandable && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(LT, {
            action: "Expand Group",
            active: s,
            className: fy.expandableHint
          }), (0, z.jsx)(W_, {
            className: a.theme.toggle,
            src: a.expanded ? "Media/Glyphs/ThickStrokeArrowDown.svg" : "Media/Glyphs/ThickStrokeArrowRight.svg"
          })]
        })]
      });
    };
    function Ey(e) {
      return {
        "--nesting": e
      };
    }
    X.add("game-ui/common/foldout/foldout-item.tsx", {
      get FoldoutItem() {
        return by;
      },
      set FoldoutItem(e) {
        by = e;
      },
      get FoldoutItemHeader() {
        return Ty;
      },
      set FoldoutItemHeader(e) {
        Ty = e;
      }
    });
    let Iy = {
      "foldout-item": "foldout-item_Ha3 foldout-item_wOF",
      foldoutItem: "foldout-item_Ha3 foldout-item_wOF",
      header: "header_o7z header_8H_ item-mouse-states_Fmi item-focused_FuT",
      "disable-active-state": "disable-active-state_UBt disable-active-state_w8a",
      disableActiveState: "disable-active-state_UBt disable-active-state_w8a",
      "disable-mouse-states": "disable-mouse-states_ivb disable-mouse-states_js5",
      disableMouseStates: "disable-mouse-states_ivb disable-mouse-states_js5",
      "header-content": "header-content_t6v header-content_wUX",
      headerContent: "header-content_t6v header-content_wUX",
      icon: "icon_p5g undefined",
      toggle: "toggle_r8A toggle_yQv"
    };
    X.add("game-ui/common/foldout/themes/info-section-foldout.module.scss", {
      get classes() {
        return Iy;
      },
      set classes(e) {
        Object.assign(Iy, e);
      }
    });
    var Sy = ({
      header: e,
      initialExpanded: t,
      expandFromContent: n,
      focusKey: s,
      tooltip: i,
      disableFocus: a = false,
      className: o,
      onToggleExpanded: r,
      children: l
    }) => (0, z.jsx)(by, {
      header: (0, z.jsx)(bg, {
        tooltip: i,
        direction: "right",
        alignment: "center",
        children: (0, z.jsx)(Ty, {
          children: e
        })
      }),
      theme: Iy,
      initialExpanded: t,
      expandFromContent: n,
      onToggleExpanded: r,
      className: Qu()(cy.infoSection, o),
      children: a ? (0, z.jsx)(Tp, {
        className: Qu()(cy.content, cy.disableFocusHighlight),
        children: (0, z.jsx)(ep, {
          children: l
        })
      }) : (0, z.jsx)(Ep, {
        focusKey: s,
        className: cy.content,
        children: (0, z.jsx)(ep, {
          children: l
        })
      })
    });
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-section/info-section-foldout.tsx", {
      get InfoSectionFoldout() {
        return Sy;
      },
      set InfoSectionFoldout(e) {
        Sy = e;
      }
    });
    let jy = {
      "info-row": "info-row_QQ9 item-focused_FuT",
      infoRow: "info-row_QQ9 item-focused_FuT",
      "disable-focus-highlight": "disable-focus-highlight_I85",
      disableFocusHighlight: "disable-focus-highlight_I85",
      link: "link_ICj",
      tooltipRow: "tooltipRow_uIh",
      left: "left_RyE",
      hasIcon: "hasIcon_iZ3",
      right: "right_ZUb",
      icon: "icon_ugE",
      uppercase: "uppercase_f0y",
      subRow: "subRow_NJI"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-row/info-row.module.scss", {
      get classes() {
        return jy;
      },
      set classes(e) {
        Object.assign(jy, e);
      }
    });
    var Ny = ({
      icon: e,
      left: t,
      right: n,
      tooltip: s,
      link: i,
      uppercase: a = false,
      subRow: o = false,
      disableFocus: r = false,
      className: l
    }) => (0, z.jsx)(bg, {
      tooltip: s,
      direction: "right",
      alignment: "center",
      children: i ? (0, z.jsxs)(Ep, {
        activation: $u.FocusedChild,
        className: Qu()(jy.infoRow, o && jy.subRow, i && jy.link, l),
        children: [e && (0, z.jsx)("img", {
          src: e,
          className: Qu()(jy.icon, i && jy.link)
        }), t && (0, z.jsx)("div", {
          className: Qu()(jy.left, a && jy.uppercase, i && jy.link, e && jy.hasIcon),
          children: t
        }), i && (0, z.jsx)(Ep, {
          className: Qu()(jy.right, i && jy.link),
          children: i
        }), n && (0, z.jsx)("div", {
          className: Qu()(jy.right, i && jy.link),
          children: n
        })]
      }) : r ? (0, z.jsxs)(Tp, {
        className: Qu()(jy.infoRow, o && jy.subRow, jy.disableFocusHighlight, l),
        children: [e && (0, z.jsx)("img", {
          src: e,
          className: jy.icon
        }), t && (0, z.jsx)("div", {
          className: Qu()(jy.left, a && jy.uppercase),
          children: t
        }), n && (0, z.jsx)("div", {
          className: Qu()(jy.right),
          children: n
        })]
      }) : (0, z.jsxs)(Ep, {
        focusKey: r ? Eg : Ig,
        className: Qu()(jy.infoRow, o && jy.subRow, l),
        children: [e && (0, z.jsx)("img", {
          src: e,
          className: jy.icon
        }), t && (0, z.jsx)("div", {
          className: Qu()(jy.left, a && jy.uppercase),
          children: t
        }), n && (0, z.jsx)("div", {
          className: Qu()(jy.right),
          children: n
        })]
      })
    });
    var wy = ({
      icon: e,
      left: t,
      right: n,
      uppercase: s = false,
      subRow: i = false
    }) => (0, z.jsxs)("div", {
      className: Qu()(jy.infoRow, jy.tooltipRow, i && jy.subRow),
      children: [e && (0, z.jsx)("img", {
        src: e,
        className: Qu()(jy.icon)
      }), t && (0, z.jsx)("div", {
        className: Qu()(jy.left, s && jy.uppercase, e && jy.hasIcon),
        children: t
      }), n && (0, z.jsx)("div", {
        className: Qu()(jy.right),
        children: n
      })]
    });
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-row/info-row.tsx", {
      get InfoRow() {
        return Ny;
      },
      set InfoRow(e) {
        Ny = e;
      },
      get TooltipRow() {
        return wy;
      },
      set TooltipRow(e) {
        wy = e;
      }
    });
    var Oy = e => {
      const {
        children: t,
        draggable: n,
        header: s,
        ...i
      } = e;
      const a = n ? ly : ZT;
      const o = s || n ? (0, z.jsx)(nE, {
        children: s || " "
      }) : null;
      0;
      0;
      0;
      return z.jsx(a, {
        header: o,
        ...i,
        children: z.jsx(ep, {
          children: z.jsx(ab, {
            children: t
          })
        })
      });
    };
    X.add("game-ui/ui/panel.tsx", {
      get Panel() {
        return Oy;
      },
      set Panel(e) {
        Oy = e;
      }
    });
    const Py = /thumbnail:\/\/[^/]+\/(?=.+\/)*(.*)\/.*?$/i;
    const Ly = new Set(["BuildingPrefab", "RenderPrefab", "CarPrefab"]);
    var Ay = e => {
      const t = e.currentTarget.src;
      let n = t.match(Py)?.[1];
      if (n && !Ly.has(n)) {
        n = "Generic";
      }
      e.currentTarget.src = n ? `Media/Editor/Thumbnails/Fallback_${n}.svg` : "Media/Placeholder.svg";
    };
    X.add("game-ui/common/utils/thumbnails-errors.ts", {
      get handleThumbnailError() {
        return Ay;
      },
      set handleThumbnailError(e) {
        Ay = e;
      }
    });
    let My = {
      icon: "icon_VQU",
      iconImg: "iconImg_ThV"
    };
    X.add("game-ui/ui/icon.module.scss", {
      get classes() {
        return My;
      },
      set classes(e) {
        Object.assign(My, e);
      }
    });
    var ky = ({
      tinted: e,
      className: t,
      src: n
    }) => (0, z.jsx)("div", {
      className: Qu()(t, My.icon),
      children: e ? (0, z.jsx)(W_, {
        src: n,
        className: My.iconImg
      }) : (0, z.jsx)("img", {
        "data-src": n,
        src: n,
        className: Qu()(My.iconImg),
        onError: Ay
      })
    });
    X.add("game-ui/ui/icon.tsx", {
      get Icon() {
        return ky;
      },
      set Icon(e) {
        ky = e;
      }
    });
    var Dy = Wm;
    Dy.usePortalContainer = zm;
    Dy.ContainerProvider = Km;
    X.add("game-ui/ui/portal.tsx", {
      get Portal() {
        return Dy;
      },
      set Portal(e) {
        Dy = e;
      }
    });
    const Fy = /^(#+)\s+/;
    const Uy = /\s/;
    function By() {
      0;
      return Y.useMemo(() => new Gy(), []);
    }
    class Gy {
      render(e) {
        const t = [];
        e = e.replace(/<br>/gim, "␤");
        let n = mb.None;
        const s = new Array();
        let i = 0;
        const a = Fy.exec(e);
        if (null != a) {
          n = wd(a[1].length, 1, 6);
          i = a[0].length;
        }
        let o = -1;
        let r = -1;
        let l = -1;
        let c = -1;
        for (let n = 0; n < e.length; n++) {
          switch (e[n]) {
            case "␤":
              e = e.substring(0, n) + " " + e.substring(n + 1);
              0;
              t.push(z.jsx("br", {}, n));
              break;
            case "!":
              if (n < e.length - 1 && -1 === r) {
                o = n;
              }
              break;
            case "[":
              r = n;
              l = -1;
              c = -1;
              break;
            case "]":
              if (-1 !== r && -1 === l) {
                l = n;
              } else {
                o = -1;
              }
              break;
            case "(":
              if (-1 !== r && -1 !== l && -1 === c) {
                if (l === n - 1) {
                  c = n;
                } else {
                  o = -1;
                  r = -1;
                  l = -1;
                }
              }
              break;
            case ")":
              if (-1 !== c) {
                if (-1 === o) {
                  if (i < r) {
                    t.push(Vy(e, i, r, null));
                  }
                  const s = Vy(e, r + 1, l, n < e.length - 1 && Uy.test(e[n + 1]) ? e[n + 1] : null);
                  const a = e.substring(c + 1, n);
                  0;
                  t.push(z.jsx(xb, {
                    linkData: a,
                    children: s
                  }, r));
                } else {
                  const i = e.substring(r + 1, l);
                  const a = e.substring(c + 1, n);
                  0;
                  t.push(z.jsx("img", {
                    alt: i,
                    src: a
                  }, o));
                  s.push(a);
                }
                i = n + 1;
                o = -1;
                r = -1;
                l = -1;
                c = -1;
              }
              break;
            default:
              if (-1 !== o && -1 === r) {
                o = -1;
              }
          }
        }
        if (i < e.length) {
          t.push(Vy(e, i, e.length, null));
        }
        return {
          node: t,
          style: n,
          images: s
        };
      }
    }
    function Vy(e, t, n, s) {
      const i = [];
      let a = t;
      let o = false;
      let r = -1;
      for (let l = t; l < n; l++) {
        if ("*" === e[l]) {
          if (o) {
            if (-1 === r) {
              r = l - 1;
              o = false;
            } else {
              if (a < r) {
                i.push(e.substring(a, r));
              }
              let t = e.substring(r + 2, l - 1);
              if (l < n - 1) {
                if (Uy.test(e[l + 1])) {
                  t += e[l + 1];
                }
              } else if (null != s) {
                t += s;
              }
              0;
              i.push(z.jsx("b", {
                children: t
              }, r));
              a = l + 1;
              r = -1;
              o = false;
            }
          } else {
            o = true;
          }
        } else {
          o = false;
        }
      }
      if (a < n) {
        let t = e.substring(a, n);
        if (null != s) {
          t += s;
        }
        i.push(t);
      }
      return i;
    }
    X.add("game-ui/common/text/renderers/markdown-renderer.tsx", {
      get useMarkdownRenderer() {
        return By;
      },
      set useMarkdownRenderer(e) {
        By = e;
      }
    });
    X.add("game-ui/ui/index.ts", {});
    X.add("game-ui/game/data-binding/budget-panel-types.ts", {});
    var Ky = $r("camera", "focusedEntity");
    function Wy(e) {
      tl("camera", "focusEntity", e);
    }
    X.add("game-ui/game/data-binding/camera-bindings.ts", {
      get focusedEntity() {
        return focusedEntity;
      },
      set focusedEntity(e) {
        focusedEntity = e;
      },
      get focusEntity() {
        return Wy;
      },
      set focusEntity(e) {
        Wy = e;
      }
    });
    var Yy = $r("chirper", "chirps");
    var $y = Zr("chirper", "chirpAdded");
    function qy(e) {
      tl("chirper", "addLike", e);
    }
    function Xy(e) {
      tl("chirper", "removeLike", e);
    }
    function Qy(e) {
      tl("chirper", "selectLink", e);
    }
    X.add("game-ui/game/data-binding/chirper-bindings.ts", {
      get chirps() {
        return chirps;
      },
      set chirps(e) {
        chirps = e;
      },
      get chirpAdded() {
        return chirpAdded;
      },
      set chirpAdded(e) {
        chirpAdded = e;
      },
      get addLike() {
        return qy;
      },
      set addLike(e) {
        qy = e;
      },
      get removeLike() {
        return Xy;
      },
      set removeLike(e) {
        Xy = e;
      },
      get selectLink() {
        return Qy;
      },
      set selectLink(e) {
        Qy = e;
      }
    });
    var Zy = "cinematicCamera";
    var Jy = $r(Zy, "playbackDuration");
    var eS = $r(Zy, "timelinePosition");
    var tS = $r(Zy, "timelineLength");
    var nS = $r(Zy, "loop");
    var sS = el(Zy, "toggleLoop");
    var iS = $r(Zy, "playing");
    var aS = e => tl(Zy, "setPlaybackDuration", e);
    var oS = Jr(Zy, "onAfterPlaybackDurationChange");
    var rS = e => tl(Zy, "setTimelinePosition", e);
    var lS = () => tl(Zy, "stopPlayback");
    var cS = () => tl(Zy, "togglePlayback");
    var uS = (e, t) => tl(Zy, "captureKey", e, t);
    var dS = (e, t) => tl(Zy, "removeCameraTransformKey", e, t);
    var mS = (e, t, n, s) => nl(Zy, "moveKeyFrame", e, t, n, s);
    var hS = (e, t, n) => tl(Zy, "removeKeyFrame", e, t, n);
    var gS = (e, t, n, s) => nl(Zy, "addKeyFrame", e, t, n, s);
    var pS = () => tl(Zy, "reset");
    var fS = () => nl(Zy, "getControllerDelta");
    var xS = () => nl(Zy, "getControllerZoomDelta");
    var vS = () => nl(Zy, "getControllerPanDelta");
    var _S = e => tl(Zy, "toggleCurveEditorFocus", e);
    var bS = el(Zy, "save");
    var TS = el(Zy, "load");
    var ES = el(Zy, "delete");
    var IS = $r(Zy, "lastLoaded");
    var yS = $r(Zy, "assets");
    var SS = $r(Zy, "availableCloudTargets");
    var jS = $r(Zy, "selectedCloudTarget");
    var CS = el(Zy, "selectCloudTarget");
    var NS = $r(Zy, "transformAnimationCurves");
    var wS = $r(Zy, "modifierAnimationCurves");
    var OS = (e, t) => (0, Y.useMemo)(() => ({
      onAddKeyframe: async (n, s, i) => undefined !== i && -1 !== i ? await gS(e, n, s, t ?? i) : -1,
      onMoveKeyframe: async (n, s, i, a) => null != a ? await mS(e, t ?? a, n, s) : -1,
      onRemoveKeyframe: (n, s) => {
        if (null != s) {
          hS(e, t ?? s, n);
        }
      },
      onSetKeyframes: (e, t) => {
        throw new Error("Function not implemented.");
      }
    }), [t, e]);
    X.add("game-ui/game/data-binding/cinematic-camera-bindings.ts", {
      get group() {
        return Zy;
      },
      set group(e) {
        Zy = e;
      },
      get playbackDuration() {
        return playbackDuration;
      },
      set playbackDuration(e) {
        playbackDuration = e;
      },
      get timelinePosition() {
        return timelinePosition;
      },
      set timelinePosition(e) {
        timelinePosition = e;
      },
      get timelineLength() {
        return timelineLength;
      },
      set timelineLength(e) {
        timelineLength = e;
      },
      get loop() {
        return loop;
      },
      set loop(e) {
        loop = e;
      },
      get toggleLoop() {
        return sS;
      },
      set toggleLoop(e) {
        sS = e;
      },
      get playing() {
        return playing;
      },
      set playing(e) {
        playing = e;
      },
      get setPlaybackDuration() {
        return aS;
      },
      set setPlaybackDuration(e) {
        aS = e;
      },
      get onAfterPlaybackDurationChange() {
        return oS;
      },
      set onAfterPlaybackDurationChange(e) {
        oS = e;
      },
      get setTimelinePosition() {
        return rS;
      },
      set setTimelinePosition(e) {
        rS = e;
      },
      get stopPlayback() {
        return lS;
      },
      set stopPlayback(e) {
        lS = e;
      },
      get togglePlayback() {
        return cS;
      },
      set togglePlayback(e) {
        cS = e;
      },
      get captureKey() {
        return uS;
      },
      set captureKey(e) {
        uS = e;
      },
      get removeCameraTransformKey() {
        return dS;
      },
      set removeCameraTransformKey(e) {
        dS = e;
      },
      get moveKeyFrame() {
        return mS;
      },
      set moveKeyFrame(e) {
        mS = e;
      },
      get removeKeyFrame() {
        return hS;
      },
      set removeKeyFrame(e) {
        hS = e;
      },
      get addKeyFrame() {
        return gS;
      },
      set addKeyFrame(e) {
        gS = e;
      },
      get resetCinematicCameraSequence() {
        return pS;
      },
      set resetCinematicCameraSequence(e) {
        pS = e;
      },
      get getControllerDelta() {
        return fS;
      },
      set getControllerDelta(e) {
        fS = e;
      },
      get getControllerZoomDelta() {
        return xS;
      },
      set getControllerZoomDelta(e) {
        xS = e;
      },
      get getControllerPanDelta() {
        return vS;
      },
      set getControllerPanDelta(e) {
        vS = e;
      },
      get toggleCurveEditorFocus() {
        return _S;
      },
      set toggleCurveEditorFocus(e) {
        _S = e;
      },
      get saveCinematicCameraSequence() {
        return bS;
      },
      set saveCinematicCameraSequence(e) {
        bS = e;
      },
      get loadCinematicCameraSequence() {
        return TS;
      },
      set loadCinematicCameraSequence(e) {
        TS = e;
      },
      get deleteCinematicCameraSequence() {
        return ES;
      },
      set deleteCinematicCameraSequence(e) {
        ES = e;
      },
      get lastLoadedCinematicCameraSequence() {
        return lastLoadedCinematicCameraSequence;
      },
      set lastLoadedCinematicCameraSequence(e) {
        lastLoadedCinematicCameraSequence = e;
      },
      get cinematicCameraSequenceAssets() {
        return cinematicCameraSequenceAssets;
      },
      set cinematicCameraSequenceAssets(e) {
        cinematicCameraSequenceAssets = e;
      },
      get availableCloudTargets() {
        return availableCloudTargets;
      },
      set availableCloudTargets(e) {
        availableCloudTargets = e;
      },
      get selectedCloudTarget() {
        return selectedCloudTarget;
      },
      set selectedCloudTarget(e) {
        selectedCloudTarget = e;
      },
      get selectCloudTarget() {
        return CS;
      },
      set selectCloudTarget(e) {
        CS = e;
      },
      get transformAnimationCurveData() {
        return transformAnimationCurveData;
      },
      set transformAnimationCurveData(e) {
        transformAnimationCurveData = e;
      },
      get modifierAnimationCurveData() {
        return modifierAnimationCurveData;
      },
      set modifierAnimationCurveData(e) {
        modifierAnimationCurveData = e;
      },
      get useCinematicCameraBindings() {
        return OS;
      },
      set useCinematicCameraBindings(e) {
        OS = e;
      }
    });
    var LS = $r("cityInfo", "residentialLowDemand");
    var AS = $r("cityInfo", "residentialMediumDemand");
    var MS = $r("cityInfo", "residentialHighDemand");
    var RS = $r("cityInfo", "commercialDemand");
    var kS = $r("cityInfo", "industrialDemand");
    var DS = $r("cityInfo", "officeDemand");
    var FS = $r("cityInfo", "residentialLowFactors");
    var US = $r("cityInfo", "residentialMediumFactors");
    var BS = $r("cityInfo", "residentialHighFactors");
    var GS = $r("cityInfo", "commercialFactors");
    var VS = $r("cityInfo", "industrialFactors");
    var HS = $r("cityInfo", "officeFactors");
    var KS = $r("cityInfo", "happiness");
    var WS = $r("cityInfo", "happinessFactors");
    X.add("game-ui/game/data-binding/city-info-bindings.ts", {
      get residentialLowDemand() {
        return residentialLowDemand;
      },
      set residentialLowDemand(e) {
        residentialLowDemand = e;
      },
      get residentialMediumDemand() {
        return residentialMediumDemand;
      },
      set residentialMediumDemand(e) {
        residentialMediumDemand = e;
      },
      get residentialHighDemand() {
        return residentialHighDemand;
      },
      set residentialHighDemand(e) {
        residentialHighDemand = e;
      },
      get commercialDemand() {
        return commercialDemand;
      },
      set commercialDemand(e) {
        commercialDemand = e;
      },
      get industrialDemand() {
        return industrialDemand;
      },
      set industrialDemand(e) {
        industrialDemand = e;
      },
      get officeDemand() {
        return officeDemand;
      },
      set officeDemand(e) {
        officeDemand = e;
      },
      get residentialLowFactors() {
        return residentialLowFactors;
      },
      set residentialLowFactors(e) {
        residentialLowFactors = e;
      },
      get residentialMediumFactors() {
        return residentialMediumFactors;
      },
      set residentialMediumFactors(e) {
        residentialMediumFactors = e;
      },
      get residentialHighFactors() {
        return residentialHighFactors;
      },
      set residentialHighFactors(e) {
        residentialHighFactors = e;
      },
      get commercialFactors() {
        return commercialFactors;
      },
      set commercialFactors(e) {
        commercialFactors = e;
      },
      get industrialFactors() {
        return industrialFactors;
      },
      set industrialFactors(e) {
        industrialFactors = e;
      },
      get officeFactors() {
        return officeFactors;
      },
      set officeFactors(e) {
        officeFactors = e;
      },
      get happiness() {
        return happiness;
      },
      set happiness(e) {
        happiness = e;
      },
      get happinessFactors() {
        return happinessFactors;
      },
      set happinessFactors(e) {
        happinessFactors = e;
      }
    });
    var YS;
    var $S = $r("climate", "seasonNameId");
    var qS = $r("climate", "weather");
    var XS = $r("climate", "temperature");
    !function (e) {
      e[e.Clear = 0] = "Clear";
      e[e.Few = 1] = "Few";
      e[e.Scattered = 2] = "Scattered";
      e[e.Broken = 3] = "Broken";
      e[e.Overcast = 4] = "Overcast";
      e[e.Rain = 5] = "Rain";
      e[e.Snow = 6] = "Snow";
      e[e.Hail = 7] = "Hail";
      e[e.Storm = 8] = "Storm";
    }(YS || (YS = {}));
    X.add("game-ui/game/data-binding/climate-bindings.ts", {
      get seasonNameId() {
        return seasonNameId;
      },
      set seasonNameId(e) {
        seasonNameId = e;
      },
      get weather() {
        return weather;
      },
      set weather(e) {
        weather = e;
      },
      get temperature() {
        return temperature;
      },
      set temperature(e) {
        temperature = e;
      },
      get WeatherType() {
        return YS;
      },
      set WeatherType(e) {
        YS = e;
      }
    });
    var ZS = $r("budget", "totalIncome");
    var JS = $r("budget", "totalExpenses");
    var ej = $r("budget", "incomeItems");
    var tj = $r("budget", "incomeValues");
    var nj = $r("budget", "expenseItems");
    var sj = $r("budget", "expenseValues");
    function ij(e, t) {
      return e.sources.reduce((e, n) => e + t[n.index], 0);
    }
    X.add("game-ui/game/data-binding/economy/budget-bindings.ts", {
      get totalIncome() {
        return totalIncome;
      },
      set totalIncome(e) {
        totalIncome = e;
      },
      get totalExpenses() {
        return totalExpenses;
      },
      set totalExpenses(e) {
        totalExpenses = e;
      },
      get incomeItems() {
        return incomeItems;
      },
      set incomeItems(e) {
        incomeItems = e;
      },
      get incomeValues() {
        return incomeValues;
      },
      set incomeValues(e) {
        incomeValues = e;
      },
      get expenseItems() {
        return expenseItems;
      },
      set expenseItems(e) {
        expenseItems = e;
      },
      get expenseValues() {
        return expenseValues;
      },
      set expenseValues(e) {
        expenseValues = e;
      },
      get getItemValue() {
        return ij;
      },
      set getItemValue(e) {
        ij = e;
      }
    });
    var oj = $r("loan", "loanLimit");
    var rj = $r("loan", "currentLoan");
    var lj = $r("loan", "loanOffer");
    function cj(e) {
      tl("loan", "requestLoanOffer", e);
    }
    function uj() {
      tl("loan", "acceptLoanOffer");
    }
    function dj() {
      tl("loan", "resetLoanOffer");
    }
    X.add("game-ui/game/data-binding/economy/loan-bindings.ts", {
      get loanLimit() {
        return loanLimit;
      },
      set loanLimit(e) {
        loanLimit = e;
      },
      get currentLoan() {
        return currentLoan;
      },
      set currentLoan(e) {
        currentLoan = e;
      },
      get loanOffer() {
        return loanOffer;
      },
      set loanOffer(e) {
        loanOffer = e;
      },
      get requestLoanOffer() {
        return cj;
      },
      set requestLoanOffer(e) {
        cj = e;
      },
      get acceptLoanOffer() {
        return uj;
      },
      set acceptLoanOffer(e) {
        uj = e;
      },
      get resetLoanOffer() {
        return dj;
      },
      set resetLoanOffer(e) {
        dj = e;
      }
    });
    var hj = $r("production", "maxProgress");
    var gj = $r("production", "resourceCategories");
    var pj = Xr("production", "resourceDetails");
    var fj = Xr("production", "resources");
    var xj = Xr("production", "services");
    var vj = Xr("production", "data");
    X.add("game-ui/game/data-binding/economy/production-bindings.ts", {
      get maxProgress() {
        return maxProgress;
      },
      set maxProgress(e) {
        maxProgress = e;
      },
      get resourceCategories() {
        return resourceCategories;
      },
      set resourceCategories(e) {
        resourceCategories = e;
      },
      get resourceDetails() {
        return resourceDetails;
      },
      set resourceDetails(e) {
        resourceDetails = e;
      },
      get resources() {
        return resources;
      },
      set resources(e) {
        resources = e;
      },
      get services() {
        return services;
      },
      set services(e) {
        services = e;
      },
      get resourceData() {
        return resourceData;
      },
      set resourceData(e) {
        resourceData = e;
      }
    });
    var bj = $r("serviceBudget", "services");
    var Tj = Xr("serviceBudget", "serviceDetails");
    function Ej(e, t) {
      tl("serviceBudget", "setServiceBudget", e, t);
    }
    function Ij(e, t) {
      tl("serviceBudget", "setServiceFee", e, t);
    }
    function yj(e) {
      tl("serviceBudget", "resetService", e);
    }
    X.add("game-ui/game/data-binding/economy/service-budget-bindings.ts", {
      get services() {
        return services;
      },
      set services(e) {
        services = e;
      },
      get serviceDetails() {
        return serviceDetails;
      },
      set serviceDetails(e) {
        serviceDetails = e;
      },
      get setServiceBudget() {
        return Ej;
      },
      set setServiceBudget(e) {
        Ej = e;
      },
      get setServiceFee() {
        return Ij;
      },
      set setServiceFee(e) {
        Ij = e;
      },
      get resetService() {
        return yj;
      },
      set resetService(e) {
        yj = e;
      }
    });
    var jj = Xr("eventJournal", "eventMap");
    var Cj = $r("eventJournal", "events");
    function Nj() {
      tl("eventJournal", "openJournal");
    }
    function wj() {
      tl("eventJournal", "closeJournal");
    }
    X.add("game-ui/game/data-binding/event-journal-bindings.ts", {
      get eventMap() {
        return eventMap;
      },
      set eventMap(e) {
        eventMap = e;
      },
      get events() {
        return events;
      },
      set events(e) {
        events = e;
      },
      get onOpenJournal() {
        return Nj;
      },
      set onOpenJournal(e) {
        Nj = e;
      },
      get onCloseJournal() {
        return wj;
      },
      set onCloseJournal(e) {
        wj = e;
      }
    });
    X.add("game-ui/game/data-binding/infoview-types.ts", {});
    var Pj;
    !function (e) {
      e.Chirp = "chirper.Chirp";
      e.LogEntry = "lifePath.LifePathEvent";
    }(Pj || (Pj = {}));
    var Lj = $r("lifePath", "followedCitizens");
    var Aj = Xr("lifePath", "lifePathDetails");
    var Mj = Xr("lifePath", "lifePathItems");
    var Rj = $r("lifePath", "maxFollowedCitizens");
    function kj(e) {
      tl("lifePath", "followCitizen", e);
    }
    function Dj(e) {
      tl("lifePath", "unfollowCitizen", e);
    }
    X.add("game-ui/game/data-binding/life-path-bindings.ts", {
      get LifePathItemType() {
        return Pj;
      },
      set LifePathItemType(e) {
        Pj = e;
      },
      get followedCitizens() {
        return followedCitizens;
      },
      set followedCitizens(e) {
        followedCitizens = e;
      },
      get lifePathDetails() {
        return lifePathDetails;
      },
      set lifePathDetails(e) {
        lifePathDetails = e;
      },
      get lifePathItems() {
        return lifePathItems;
      },
      set lifePathItems(e) {
        lifePathItems = e;
      },
      get maxFollowedCitizens() {
        return maxFollowedCitizens;
      },
      set maxFollowedCitizens(e) {
        maxFollowedCitizens = e;
      },
      get followCitizen() {
        return kj;
      },
      set followCitizen(e) {
        kj = e;
      },
      get unfollowCitizen() {
        return Dj;
      },
      set unfollowCitizen(e) {
        Dj = e;
      }
    });
    var Uj;
    var Bj = $r("mapTiles", "mapTilePanelVisible");
    var Gj = $r("mapTiles", "mapTileViewActive");
    var Vj = $r("mapTiles", "buildableLand");
    var Hj = $r("mapTiles", "water");
    var Kj = $r("mapTiles", "resources");
    var Wj = $r("mapTiles", "purchasePrice");
    var zj = $r("mapTiles", "purchaseUpkeep");
    var Yj = $r("mapTiles", "purchaseFlags");
    var $j = $r("mapTiles", "expansionPermits");
    var qj = $r("mapTiles", "expansionPermitCost");
    function Xj(e) {
      tl("mapTiles", "setMapTileViewActive", e);
    }
    function Qj() {
      Xj(false);
    }
    function Zj() {
      tl("mapTiles", "purchaseMapTiles");
    }
    !function (e) {
      e[e.None = 0] = "None";
      e[e.NoCurrentlyAvailable = 1] = "NoCurrentlyAvailable";
      e[e.NoAvailable = 2] = "NoAvailable";
      e[e.NoSelection = 4] = "NoSelection";
      e[e.InsufficientFunds = 8] = "InsufficientFunds";
      e[e.InsufficientPermits = 16] = "InsufficientPermits";
    }(Uj || (Uj = {}));
    X.add("game-ui/game/data-binding/map-tile-bindings.ts", {
      get mapTilePanelVisible() {
        return mapTilePanelVisible;
      },
      set mapTilePanelVisible(e) {
        mapTilePanelVisible = e;
      },
      get mapTileViewActive() {
        return mapTileViewActive;
      },
      set mapTileViewActive(e) {
        mapTileViewActive = e;
      },
      get buildableLand() {
        return buildableLand;
      },
      set buildableLand(e) {
        buildableLand = e;
      },
      get availableWater() {
        return availableWater;
      },
      set availableWater(e) {
        availableWater = e;
      },
      get resources() {
        return resources;
      },
      set resources(e) {
        resources = e;
      },
      get purchasePrice() {
        return purchasePrice;
      },
      set purchasePrice(e) {
        purchasePrice = e;
      },
      get purchaseUpkeep() {
        return purchaseUpkeep;
      },
      set purchaseUpkeep(e) {
        purchaseUpkeep = e;
      },
      get purchaseFlags() {
        return purchaseFlags;
      },
      set purchaseFlags(e) {
        purchaseFlags = e;
      },
      get permits() {
        return permits;
      },
      set permits(e) {
        permits = e;
      },
      get permitCost() {
        return permitCost;
      },
      set permitCost(e) {
        permitCost = e;
      },
      get setMapTileViewActive() {
        return Xj;
      },
      set setMapTileViewActive(e) {
        Xj = e;
      },
      get disableMapTileView() {
        return Qj;
      },
      set disableMapTileView(e) {
        Qj = e;
      },
      get purchaseMapTiles() {
        return Zj;
      },
      set purchaseMapTiles(e) {
        Zj = e;
      },
      get MapTileStatus() {
        return Uj;
      },
      set MapTileStatus(e) {
        Uj = e;
      }
    });
    var Jj = "photoMode";
    function eC() {
      tl(Jj, "resetCamera");
    }
    var tC = $r(Jj, "overlayHidden");
    function nC(e) {
      tl(Jj, "setOverlayHidden", e);
    }
    var sC = $r(Jj, "orbitCameraActive");
    function iC() {
      tl(Jj, "toggleOrbitCameraActive");
    }
    function aC() {
      tl(Jj, "takeScreenshot");
    }
    function oC(e) {
      tl(Jj, "selectTab", e);
    }
    function rC(e) {
      tl(Jj, "setCinematicCameraVisible", e);
    }
    var lC;
    var cC = $r(Jj, "cinematicCameraVisible");
    var uC = $r(Jj, "tabs");
    var dC = $r(Jj, "activeTab");
    !function (e) {
      e.DropdownField = "Game.UI.Widgets.DropdownField";
    }(lC || (lC = {}));
    var mC = {
      group: Jj,
      path: []
    };
    var hC = $r(Jj, "children");
    X.add("game-ui/game/data-binding/photo-mode-bindings.ts", {
      get group() {
        return Jj;
      },
      set group(e) {
        Jj = e;
      },
      get resetCamera() {
        return eC;
      },
      set resetCamera(e) {
        eC = e;
      },
      get overlayHidden() {
        return overlayHidden;
      },
      set overlayHidden(e) {
        overlayHidden = e;
      },
      get setOverlayHidden() {
        return nC;
      },
      set setOverlayHidden(e) {
        nC = e;
      },
      get orbitCameraActive() {
        return orbitCameraActive;
      },
      set orbitCameraActive(e) {
        orbitCameraActive = e;
      },
      get toggleOrbitCameraActive() {
        return iC;
      },
      set toggleOrbitCameraActive(e) {
        iC = e;
      },
      get takeScreenshot() {
        return aC;
      },
      set takeScreenshot(e) {
        aC = e;
      },
      get selectTab() {
        return oC;
      },
      set selectTab(e) {
        oC = e;
      },
      get toggleCinematicCamera() {
        return rC;
      },
      set toggleCinematicCamera(e) {
        rC = e;
      },
      get cinematicCameraVisible() {
        return cinematicCameraVisible;
      },
      set cinematicCameraVisible(e) {
        cinematicCameraVisible = e;
      },
      get tabs() {
        return tabs;
      },
      set tabs(e) {
        tabs = e;
      },
      get selectedTab() {
        return selectedTab;
      },
      set selectedTab(e) {
        selectedTab = e;
      },
      get PhotoWidgetType() {
        return lC;
      },
      set PhotoWidgetType(e) {
        lC = e;
      },
      get root() {
        return mC;
      },
      set root(e) {
        mC = e;
      },
      get adjustments() {
        return adjustments;
      },
      set adjustments(e) {
        adjustments = e;
      }
    });
    var pC = $r("policies", "cityPolicies");
    var fC = el("policies", "setCityPolicy");
    function xC(e, t, n = 0) {
      fC(e, t, n);
    }
    var vC;
    var _C;
    var bC;
    var TC;
    var EC = el("policies", "setPolicy");
    function IC(e, t, n = 0) {
      EC(e, t, n);
    }
    X.add("game-ui/game/data-binding/policy-bindings.ts", {
      get cityPolicies() {
        return cityPolicies;
      },
      set cityPolicies(e) {
        cityPolicies = e;
      },
      get setCityPolicy() {
        return xC;
      },
      set setCityPolicy(e) {
        xC = e;
      },
      get setPolicy() {
        return IC;
      },
      set setPolicy(e) {
        IC = e;
      }
    });
    (function (e) {
      e.CityModifier = "prefabs.CityModifierEffect";
      e.LocalModifier = "prefabs.LocalModifierEffect";
      e.LeisureProvider = "prefabs.LeisureProviderEffect";
      e.AdjustHappinessEffect = "prefabs.AdjustHappinessEffect";
    })(vC || (vC = {}));
    (function (e) {
      e.Attractiveness = "Attractiveness";
      e.CrimeAccumulation = "CrimeAccumulation";
      e.PoliceStationUpkeep = "PoliceStationUpkeep";
      e.DisasterWarningTime = "DisasterWarningTime";
      e.DisasterDamageRate = "DisasterDamageRate";
      e.DiseaseProbability = "DiseaseProbability";
      e.ParkEntertainment = "ParkEntertainment";
      e.CriminalMonitorProbability = "CriminalMonitorProbability";
      e.IndustrialAirPollution = "IndustrialAirPollution";
      e.IndustrialGroundPollution = "IndustrialGroundPollution";
      e.IndustrialGarbage = "IndustrialGarbage";
      e.RecoveryFailChange = "RecoveryFailChange";
      e.OreResourceAmount = "OreResourceAmount";
      e.OilResourceAmount = "OilResourceAmount";
      e.UniversityInterest = "UniversityInterest";
      e.OfficeSoftwareDemand = "OfficeSoftwareDemand";
      e.IndustrialElectronicsDemand = "IndustrialElectronicsDemand";
      e.OfficeSoftwareEfficiency = "OfficeSoftwareEfficiency";
      e.IndustrialElectronicsEfficiency = "IndustrialElectronicsEfficiency";
      e.TelecomCapacity = "TelecomCapacity";
      e.Entertainment = "Entertainment";
      e.HighwayTrafficSafety = "HighwayTrafficSafety";
      e.PrisonTime = "PrisonTime";
      e.CrimeProbability = "CrimeProbability";
      e.CollegeGraduation = "CollegeGraduation";
      e.UniversityGraduation = "UniversityGraduation";
      e.ImportCost = "ImportCost";
      e.LoanInterest = "LoanInterest";
      e.BuildingLevelingCost = "BuildingLevelingCost";
      e.ExportCost = "ExportCost";
      e.TaxiStartingFee = "TaxiStartingFee";
      e.IndustrialEfficiency = "IndustrialEfficiency";
      e.OfficeEfficiency = "OfficeEfficiency";
      e.PollutionHealthAffect = "PollutionHealthAffect";
      e.HospitalEfficiency = "HospitalEfficiency";
    })(_C || (_C = {}));
    (function (e) {
      e.CrimeAccumulation = "CrimeAccumulation";
      e.ForestFireResponseTime = "ForestFireResponseTime";
      e.ForestFireHazard = "ForestFireHazard";
      e.Wellbeing = "Wellbeing";
      e.Health = "Health";
    })(bC || (bC = {}));
    (function (e) {
      e.Meals = "Meals";
      e.Entertainment = "Entertainment";
      e.Commercial = "Commercial";
      e.CityIndoors = "CityIndoors";
      e.Travel = "Travel";
      e.CityPark = "CityPark";
      e.CityBeach = "CityBeach";
      e.Attractions = "Attractions";
      e.Relaxation = "Relaxation";
      e.Sightseeing = "Sightseeing";
    })(TC || (TC = {}));
    X.add("game-ui/game/data-binding/prefab/prefab-effects.ts", {
      get PrefabEffectType() {
        return vC;
      },
      set PrefabEffectType(e) {
        vC = e;
      },
      get CityModifierType() {
        return _C;
      },
      set CityModifierType(e) {
        _C = e;
      },
      get LocalModifierType() {
        return bC;
      },
      set LocalModifierType(e) {
        bC = e;
      },
      get LeisureType() {
        return TC;
      },
      set LeisureType(e) {
        TC = e;
      }
    });
    var yC;
    var SC = "prefabs.ConsumptionProperty";
    var jC = "prefabs.PollutionProperty";
    !function (e) {
      e[e.none = 0] = "none";
      e[e.low = 1] = "low";
      e[e.medium = 2] = "medium";
      e[e.high = 3] = "high";
    }(yC || (yC = {}));
    var CC;
    var NC = "prefabs.ElectricityProperty";
    !function (e) {
      e[e.low = 0] = "low";
      e[e.high = 1] = "high";
      e[e.both = 2] = "both";
    }(CC || (CC = {}));
    var wC;
    var OC;
    var PC = "prefabs.TransportStopProperty";
    var LC = "prefabs.UpkeepIntProperty";
    var AC = "prefabs.UpkeepInt2Property";
    X.add("game-ui/game/data-binding/prefab/prefab-properties.ts", {
      get CONSUMPTION_PROPERTY() {
        return SC;
      },
      set CONSUMPTION_PROPERTY(e) {
        SC = e;
      },
      get POLLUTION_PROPERTY() {
        return jC;
      },
      set POLLUTION_PROPERTY(e) {
        jC = e;
      },
      get Pollution() {
        return yC;
      },
      set Pollution(e) {
        yC = e;
      },
      get ELECTRICITY_PROPERTY() {
        return NC;
      },
      set ELECTRICITY_PROPERTY(e) {
        NC = e;
      },
      get Voltage() {
        return CC;
      },
      set Voltage(e) {
        CC = e;
      },
      get TRANSPORT_STOP_PROPERTY() {
        return PC;
      },
      set TRANSPORT_STOP_PROPERTY(e) {
        PC = e;
      },
      get UPKEEPNUMBER_PROPERTY() {
        return LC;
      },
      set UPKEEPNUMBER_PROPERTY(e) {
        LC = e;
      },
      get UPKEEPNUMBER2_PROPERTY() {
        return AC;
      },
      set UPKEEPNUMBER2_PROPERTY(e) {
        AC = e;
      }
    });
    (function (e) {
      e[e.none = 0] = "none";
      e[e.residential = 1] = "residential";
      e[e.commercial = 2] = "commercial";
      e[e.industrial = 3] = "industrial";
    })(wC || (wC = {}));
    (function (e) {
      e.Milestone = "prefabs.MilestoneRequirement";
      e.DevTreeNode = "prefabs.DevTreeNodeRequirement";
      e.StrictObjectBuilt = "prefabs.StrictObjectBuiltRequirement";
      e.ZoneBuilt = "prefabs.ZoneBuiltRequirement";
      e.Citizen = "prefabs.CitizenRequirement";
      e.Processing = "prefabs.ProcessingRequirement";
      e.ObjectBuilt = "prefabs.ObjectBuiltRequirement";
      e.Unlock = "prefabs.UnlockRequirement";
      e.Tutorial = "prefabs.TutorialRequirement";
    })(OC || (OC = {}));
    X.add("game-ui/game/data-binding/prefab/prefab-requirements.ts", {
      get AreaType() {
        return wC;
      },
      set AreaType(e) {
        wC = e;
      },
      get PrefabRequirementType() {
        return OC;
      },
      set PrefabRequirementType(e) {
        OC = e;
      }
    });
    var RC = $r("devTree", "points");
    var kC = $r("devTree", "services");
    var DC = Xr("devTree", "serviceDetails");
    var FC = Xr("devTree", "nodes");
    var UC = Xr("devTree", "nodeDetails");
    var BC = qr(Xp);
    var GC = qr(Xp);
    function VC(e) {
      tl("devTree", "purchaseNode", e);
    }
    X.add("game-ui/game/data-binding/progression/dev-tree-bindings.ts", {
      get devPoints() {
        return devPoints;
      },
      set devPoints(e) {
        devPoints = e;
      },
      get services() {
        return services;
      },
      set services(e) {
        services = e;
      },
      get serviceDetails() {
        return serviceDetails;
      },
      set serviceDetails(e) {
        serviceDetails = e;
      },
      get nodes() {
        return nodes;
      },
      set nodes(e) {
        nodes = e;
      },
      get nodeDetails() {
        return nodeDetails;
      },
      set nodeDetails(e) {
        nodeDetails = e;
      },
      get selectedDevTree() {
        return selectedDevTree;
      },
      set selectedDevTree(e) {
        selectedDevTree = e;
      },
      get selectedNode() {
        return selectedNode;
      },
      set selectedNode(e) {
        selectedNode = e;
      },
      get purchaseNode() {
        return VC;
      },
      set purchaseNode(e) {
        VC = e;
      }
    });
    var HC = $r("feature", "lockedFeatures");
    function KC(e) {
      0;
      const t = Y.useCallback((t, n) => ({
        locked: undefined !== n.find(t => t.name === e),
        requirements: n.find(t => t.name === e)?.requirements || {
          requireAny: [],
          requireAll: []
        }
      }), [e]);
      return il(HC, t, {
        locked: false,
        requirements: {
          requireAny: [],
          requireAll: []
        }
      });
    }
    function WC(e) {
      0;
      const t = Y.useCallback((t, n) => undefined !== n.find(t => t.name === e), [e]);
      return il(HC, t, false);
    }
    function zC(e) {
      return undefined !== HC.value?.find(t => t.name === e);
    }
    X.add("game-ui/game/data-binding/progression/feature-bindings.ts", {
      get lockedFeatures() {
        return lockedFeatures;
      },
      set lockedFeatures(e) {
        lockedFeatures = e;
      },
      get useFeatureUnlocking() {
        return KC;
      },
      set useFeatureUnlocking(e) {
        KC = e;
      },
      get useFeatureLocked() {
        return WC;
      },
      set useFeatureLocked(e) {
        WC = e;
      },
      get isFeatureLocked() {
        return zC;
      },
      set isFeatureLocked(e) {
        zC = e;
      }
    });
    var YC = {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    };
    var $C = {
      r: 1,
      g: 1,
      b: 1,
      a: 1
    };
    var qC = {
      r: 0,
      g: 0,
      b: 0,
      a: 0
    };
    function XC(e, t, n) {
      return {
        r: e / 255,
        g: t / 255,
        b: n / 255,
        a: 1
      };
    }
    function QC(e, t, n, s) {
      return {
        r: e / 255,
        g: t / 255,
        b: n / 255,
        a: s
      };
    }
    function ZC(e, t) {
      return Math.abs(e.r - t.r) < .001 && Math.abs(e.g - t.g) < .001 && Math.abs(e.b - t.b) < .001 && Math.abs(e.a - t.a) < .001;
    }
    function JC({
      r: e,
      g: t,
      b: n
    }) {
      return Math.max(e, t, n) === Math.min(e, t, n);
    }
    function eN(e, t) {
      return {
        ...e,
        a: t
      };
    }
    function tN({
      r: e,
      g: t,
      b: n,
      a: s
    }) {
      return `rgba(${Math.round(255 * e)},${Math.round(255 * t)},${Math.round(255 * n)},${s.toString().replace(",", ".")})`;
    }
    function nN(e) {
      if (null == e) {
        return null;
      }
      const t = e.match(/^rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d+(?:\.\d+)?)\)$/);
      return t && 5 === t.length ? {
        r: wd(parseInt(t[1]) / 255, 0, 1),
        g: wd(parseInt(t[2]) / 255, 0, 1),
        b: wd(parseInt(t[3]) / 255, 0, 1),
        a: wd(parseFloat(t[4]), 0, 1)
      } : null;
    }
    function sN({
      r: e,
      g: t,
      b: n
    }) {
      return iN(e) + iN(t) + iN(n);
    }
    function iN(e) {
      const t = Math.round(255 * e).toString(16).toUpperCase();
      return 1 === t.length ? "0" + t : t;
    }
    function aN(e) {
      e = e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (e, t, n, s) => t + t + n + n + s + s);
      const t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(e);
      if (!t) {
        return null;
      }
      const n = t.length > 3 && parseInt(t[4], 16) ? parseInt(t[4], 16) / 255 : 1;
      return {
        r: parseInt(t[1], 16) / 255,
        g: parseInt(t[2], 16) / 255,
        b: parseInt(t[3], 16) / 255,
        a: n
      };
    }
    function oN({
      h: e,
      s: t,
      v: n,
      a: s
    }) {
      let i = 0;
      let a = 0;
      let o = 0;
      const r = Math.floor(6 * e);
      const l = 6 * e - r;
      const c = n * (1 - t);
      const u = n * (1 - l * t);
      const d = n * (1 - (1 - l) * t);
      switch (r % 6) {
        case 0:
          i = n;
          a = d;
          o = c;
          break;
        case 1:
          i = u;
          a = n;
          o = c;
          break;
        case 2:
          i = c;
          a = n;
          o = d;
          break;
        case 3:
          i = c;
          a = u;
          o = n;
          break;
        case 4:
          i = d;
          a = c;
          o = n;
          break;
        case 5:
          i = n;
          a = c;
          o = u;
      }
      return {
        r: i,
        g: a,
        b: o,
        a: s
      };
    }
    function rN({
      r: e,
      g: t,
      b: n,
      a: s
    }, i = 0) {
      const a = Math.max(e, t, n);
      const o = Math.min(e, t, n);
      const r = a - o;
      let l = i;
      const c = 0 === a ? 0 : r / a;
      if (a !== o) {
        switch (a) {
          case e:
            l = (t - n) / r + (t < n ? 6 : 0);
            break;
          case t:
            l = (n - e) / r + 2;
            break;
          case n:
            l = (e - t) / r + 4;
        }
        l /= 6;
      }
      return {
        h: l,
        s: c,
        v: a,
        a: s
      };
    }
    function lN(e, t, n) {
      return {
        r: Od(e.r, t.r, n),
        g: Od(e.g, t.g, n),
        b: Od(e.b, t.b, n),
        a: Od(e.a, t.a, n)
      };
    }
    function cN(e, t, n) {
      return {
        h: Od(e.h, t.h, n),
        s: Od(e.s, t.s, n),
        v: Od(e.v, t.v, n),
        a: Od(e.a, t.a, n)
      };
    }
    function uN(e, t = "to right") {
      return `linear-gradient(${t}, ${e.stops.map(e => `${"string" == typeof e.color ? e.color : tN(e.color)} ${100 * e.offset}%`).join(",")})`;
    }
    X.add("game-ui/common/color.ts", {
      get black() {
        return YC;
      },
      set black(e) {
        YC = e;
      },
      get white() {
        return $C;
      },
      set white(e) {
        $C = e;
      },
      get transparent() {
        return qC;
      },
      set transparent(e) {
        qC = e;
      },
      get rgb() {
        return XC;
      },
      set rgb(e) {
        XC = e;
      },
      get rgba() {
        return QC;
      },
      set rgba(e) {
        QC = e;
      },
      get isColorEqual() {
        return ZC;
      },
      set isColorEqual(e) {
        ZC = e;
      },
      get isAchromatic() {
        return JC;
      },
      set isAchromatic(e) {
        JC = e;
      },
      get withAlpha() {
        return eN;
      },
      set withAlpha(e) {
        eN = e;
      },
      get formatColor() {
        return tN;
      },
      set formatColor(e) {
        tN = e;
      },
      get parseRgba() {
        return nN;
      },
      set parseRgba(e) {
        nN = e;
      },
      get formatHexColor() {
        return sN;
      },
      set formatHexColor(e) {
        sN = e;
      },
      get parseHexColor() {
        return aN;
      },
      set parseHexColor(e) {
        aN = e;
      },
      get hsvaToRgba() {
        return oN;
      },
      set hsvaToRgba(e) {
        oN = e;
      },
      get rgbaToHsva() {
        return rN;
      },
      set rgbaToHsva(e) {
        rN = e;
      },
      get lerpColor() {
        return lN;
      },
      set lerpColor(e) {
        lN = e;
      },
      get lerpHsva() {
        return cN;
      },
      set lerpHsva(e) {
        cN = e;
      },
      get buildCssLinearGradient() {
        return uN;
      },
      set buildCssLinearGradient(e) {
        uN = e;
      }
    });
    var mN;
    var hN = {
      entity: Xp,
      index: 0,
      xpRequirement: 0,
      reward: 0,
      devTreePoints: 0,
      mapTiles: 0,
      loanLimit: 0,
      image: "Media/Placeholder.svg",
      backgroundColor: qC,
      accentColor: {
        r: .18,
        g: .235,
        b: .337,
        a: 1
      },
      textColor: $C,
      locked: false
    };
    !function (e) {
      e.Feature = "milestone.Feature";
      e.Service = "milestone.Service";
      e.Zone = "milestone.Asset";
      e.Policy = "milestone.Policy";
    }(mN || (mN = {}));
    var gN = $r("milestone", "achievedMilestone");
    var pN = $r("milestone", "achievedMilestoneXP");
    var fN = $r("milestone", "nextMilestoneXP");
    var xN = $r("milestone", "totalXP");
    var vN = Zr("milestone", "xpMessageAdded");
    var _N = $r("milestone", "maxMilestoneReached");
    var bN = $r("milestone", "milestones");
    var TN = $r("milestone", "unlockedMilestone", Xp);
    function EN() {
      tl("milestone", "clearUnlockedMilestone");
    }
    var IN = Xr("milestone", "milestoneDetails");
    var yN = Xr("milestone", "milestoneUnlocks");
    var SN = Xr("milestone", "unlockDetails");
    X.add("game-ui/game/data-binding/progression/milestone-bindings.ts", {
      get defaultMilestoneDetails() {
        return hN;
      },
      set defaultMilestoneDetails(e) {
        hN = e;
      },
      get MilestoneUnlockType() {
        return mN;
      },
      set MilestoneUnlockType(e) {
        mN = e;
      },
      get achievedMilestone() {
        return achievedMilestone;
      },
      set achievedMilestone(e) {
        achievedMilestone = e;
      },
      get achievedMilestoneXP() {
        return achievedMilestoneXP;
      },
      set achievedMilestoneXP(e) {
        achievedMilestoneXP = e;
      },
      get nextMilestoneXP() {
        return nextMilestoneXP;
      },
      set nextMilestoneXP(e) {
        nextMilestoneXP = e;
      },
      get totalXP() {
        return totalXP;
      },
      set totalXP(e) {
        totalXP = e;
      },
      get xpMessageAdded() {
        return xpMessageAdded;
      },
      set xpMessageAdded(e) {
        xpMessageAdded = e;
      },
      get maxMilestoneReached() {
        return maxMilestoneReached;
      },
      set maxMilestoneReached(e) {
        maxMilestoneReached = e;
      },
      get milestones() {
        return milestones;
      },
      set milestones(e) {
        milestones = e;
      },
      get unlockedMilestone() {
        return unlockedMilestone;
      },
      set unlockedMilestone(e) {
        unlockedMilestone = e;
      },
      get clearUnlockedMilestone() {
        return EN;
      },
      set clearUnlockedMilestone(e) {
        EN = e;
      },
      get milestoneDetails() {
        return milestoneDetails;
      },
      set milestoneDetails(e) {
        milestoneDetails = e;
      },
      get milestoneUnlocks() {
        return milestoneUnlocks;
      },
      set milestoneUnlocks(e) {
        milestoneUnlocks = e;
      },
      get unlockDetails() {
        return unlockDetails;
      },
      set unlockDetails(e) {
        unlockDetails = e;
      }
    });
    var CN = $r("signatureBuildings", "unlockedSignatures");
    function NN() {
      tl("signatureBuildings", "clearUnlockedSignatures");
    }
    X.add("game-ui/game/data-binding/progression/signature-building-bindings.ts", {
      get unlockedSignatures() {
        return unlockedSignatures;
      },
      set unlockedSignatures(e) {
        unlockedSignatures = e;
      },
      get clearUnlockedSignatures() {
        return NN;
      },
      set clearUnlockedSignatures(e) {
        NN = e;
      }
    });
    var ON = $r("radio", "enabled");
    var PN = $r("radio", "volume");
    var LN = $r("radio", "paused");
    var AN = $r("radio", "muted");
    var MN = $r("radio", "skipAds");
    var RN = $r("radio", "emergencyMode");
    var kN = $r("radio", "emergencyFocusable");
    var DN = $r("radio", "emergencyMessage");
    var FN = $r("radio", "selectedNetwork");
    var UN = $r("radio", "selectedStation");
    var BN = $r("radio", "networks");
    var GN = $r("radio", "stations");
    var VN = $r("radio", "currentSegment");
    var HN = Zr("radio", "segmentChanged");
    function KN(e) {
      tl("radio", "setVolume", e);
    }
    function WN(e) {
      tl("radio", "setPaused", e);
    }
    function zN() {
      WN(!LN.value);
    }
    function YN(e) {
      tl("radio", "setMuted", e);
    }
    function $N() {
      YN(!AN.value);
    }
    function qN(e) {
      tl("radio", "setSkipAds", e);
    }
    function XN() {
      qN(!MN.value);
    }
    function QN() {
      tl("radio", "playPrevious");
    }
    function ZN() {
      tl("radio", "playNext");
    }
    function JN() {
      tl("radio", "focusEmergency");
    }
    function ew(e) {
      tl("radio", "selectNetwork", e);
    }
    function tw(e) {
      tl("radio", "selectStation", e);
    }
    function nw(e) {
      return null == e || 0 === e.length ? null : e[0];
    }
    function sw(e, t) {
      return null == e || 0 === e.length || null == e[0] ? null : e[0][t];
    }
    function iw(e, t, n) {
      const s = aw(t, e.length, n);
      return null != s ? e[s] : null;
    }
    function aw(e, t, n) {
      return 0 === t ? null : -1 === e ? 0 : e === t - 1 ? n ? 0 : e : e + 1;
    }
    function ow(e, t, n) {
      const s = rw(t, e.length, n);
      return null != s ? e[s] : null;
    }
    function rw(e, t, n) {
      return 0 === t ? null : -1 === e ? 0 : 0 === e ? n ? t - 1 : 0 : e - 1;
    }
    X.add("game-ui/game/data-binding/radio-bindings.ts", {
      get radioEnabled() {
        return radioEnabled;
      },
      set radioEnabled(e) {
        radioEnabled = e;
      },
      get volume() {
        return volume;
      },
      set volume(e) {
        volume = e;
      },
      get paused() {
        return paused;
      },
      set paused(e) {
        paused = e;
      },
      get muted() {
        return muted;
      },
      set muted(e) {
        muted = e;
      },
      get skipAds() {
        return skipAds;
      },
      set skipAds(e) {
        skipAds = e;
      },
      get emergencyMode() {
        return emergencyMode;
      },
      set emergencyMode(e) {
        emergencyMode = e;
      },
      get emergencyFocusable() {
        return emergencyFocusable;
      },
      set emergencyFocusable(e) {
        emergencyFocusable = e;
      },
      get emergencyMessage() {
        return emergencyMessage;
      },
      set emergencyMessage(e) {
        emergencyMessage = e;
      },
      get selectedNetwork() {
        return selectedNetwork;
      },
      set selectedNetwork(e) {
        selectedNetwork = e;
      },
      get selectedStation() {
        return selectedStation;
      },
      set selectedStation(e) {
        selectedStation = e;
      },
      get networks() {
        return networks;
      },
      set networks(e) {
        networks = e;
      },
      get stations() {
        return stations;
      },
      set stations(e) {
        stations = e;
      },
      get currentSegment() {
        return currentSegment;
      },
      set currentSegment(e) {
        currentSegment = e;
      },
      get segmentChanged() {
        return segmentChanged;
      },
      set segmentChanged(e) {
        segmentChanged = e;
      },
      get setVolume() {
        return KN;
      },
      set setVolume(e) {
        KN = e;
      },
      get setPaused() {
        return WN;
      },
      set setPaused(e) {
        WN = e;
      },
      get togglePaused() {
        return zN;
      },
      set togglePaused(e) {
        zN = e;
      },
      get setMuted() {
        return YN;
      },
      set setMuted(e) {
        YN = e;
      },
      get toggleMuted() {
        return $N;
      },
      set toggleMuted(e) {
        $N = e;
      },
      get setSkipAds() {
        return qN;
      },
      set setSkipAds(e) {
        qN = e;
      },
      get toggleSkipAds() {
        return XN;
      },
      set toggleSkipAds(e) {
        XN = e;
      },
      get playPrevious() {
        return QN;
      },
      set playPrevious(e) {
        QN = e;
      },
      get playNext() {
        return ZN;
      },
      set playNext(e) {
        ZN = e;
      },
      get focusEmergency() {
        return JN;
      },
      set focusEmergency(e) {
        JN = e;
      },
      get selectNetwork() {
        return ew;
      },
      set selectNetwork(e) {
        ew = e;
      },
      get selectStation() {
        return tw;
      },
      set selectStation(e) {
        tw = e;
      }
    });
    var lw = (e, t, n = 0) => {
      const s = new Array(t);
      for (let i = n; i < n + t; ++i) {
        s[i - n] = e(i);
      }
      return s;
    };
    function cw(e, t) {
      return e.some(e => (e.length > t.length ? e : t).every((n, s) => e[s] === t[s]));
    }
    function uw(e) {
      return null != e;
    }
    X.add("game-ui/common/utils/arrays.ts", {
      get firstOrNull() {
        return nw;
      },
      set firstOrNull(e) {
        nw = e;
      },
      get firstPropertyOrNull() {
        return sw;
      },
      set firstPropertyOrNull(e) {
        sw = e;
      },
      get getNextItem() {
        return iw;
      },
      set getNextItem(e) {
        iw = e;
      },
      get getNextIndex() {
        return aw;
      },
      set getNextIndex(e) {
        aw = e;
      },
      get getPreviousItem() {
        return ow;
      },
      set getPreviousItem(e) {
        ow = e;
      },
      get getPreviousIndex() {
        return rw;
      },
      set getPreviousIndex(e) {
        rw = e;
      },
      get mapRange() {
        return lw;
      },
      set mapRange(e) {
        lw = e;
      },
      get containsArray() {
        return cw;
      },
      set containsArray(e) {
        cw = e;
      },
      get notNull() {
        return uw;
      },
      set notNull(e) {
        uw = e;
      }
    });
    var mw;
    var hw;
    var gw;
    var pw;
    var fw;
    var xw = $r("selectedInfo", "selectedEntity");
    var vw = $r("selectedInfo", "selectedTrailerController");
    var _w = $r("selectedInfo", "selectedUITag");
    var bw = $r("selectedInfo", "activeSelection");
    var Tw = $r("selectedInfo", "position");
    var Ew = $r("selectedInfo", "topSections");
    var Iw = $r("selectedInfo", "middleSections");
    var yw = $r("selectedInfo", "bottomSections");
    var Sw = $r("selectedInfo", "titleSection");
    var jw = $r("selectedInfo", "developerSection");
    var Cw = $r("selectedInfo", "lineVisualizerSection");
    var Nw = $r("selectedInfo", "householdSidebarSection");
    var ww = $r("selectedInfo", "tooltipTags");
    var Ow = $r("selectedInfo", "selectedRoute");
    var Pw = el("selectedInfo", "selectEntity");
    var Lw = el("selectedInfo", "setSelectedRoute");
    var Aw = Jr("selectedInfo", "clearSelection");
    !function (e) {
      e.Resource = "Game.UI.InGame.ResourceSection";
      e.LocalServices = "Game.UI.InGame.LocalServicesSection";
      e.Actions = "Game.UI.InGame.ActionsSection";
      e.Description = "Game.UI.InGame.DescriptionSection";
      e.Developer = "Game.UI.InGame.DeveloperSection";
      e.Residents = "Game.UI.InGame.ResidentsSection";
      e.HouseholdSidebar = "Game.UI.InGame.HouseholdSidebarSection";
      e.Districts = "Game.UI.InGame.DistrictsSection";
      e.Title = "Game.UI.InGame.TitleSection";
      e.Notifications = "Game.UI.InGame.NotificationsSection";
      e.Policies = "Game.UI.InGame.PoliciesSection";
      e.Profitability = "Game.UI.InGame.ProfitabilitySection";
      e.AverageHappiness = "Game.UI.InGame.AverageHappinessSection";
      e.Schedule = "Game.UI.InGame.ScheduleSection";
      e.Line = "Game.UI.InGame.LineSection";
      e.Lines = "Game.UI.InGame.LinesSection";
      e.Color = "Game.UI.InGame.ColorSection";
      e.LineVisualizer = "Game.UI.InGame.LineVisualizerSection";
      e.TicketPrice = "Game.UI.InGame.TicketPriceSection";
      e.VehicleCount = "Game.UI.InGame.VehicleCountSection";
      e.Attractiveness = "Game.UI.InGame.AttractivenessSection";
      e.Efficiency = "Game.UI.InGame.EfficiencySection";
      e.Employees = "Game.UI.InGame.EmployeesSection";
      e.Upkeep = "Game.UI.InGame.UpkeepSection";
      e.Level = "Game.UI.InGame.LevelSection";
      e.Education = "Game.UI.InGame.EducationSection";
      e.Pollution = "Game.UI.InGame.PollutionSection";
      e.Healthcare = "Game.UI.InGame.HealthcareSection";
      e.Deathcare = "Game.UI.InGame.DeathcareSection";
      e.Garbage = "Game.UI.InGame.GarbageSection";
      e.Police = "Game.UI.InGame.PoliceSection";
      e.Vehicles = "Game.UI.InGame.VehiclesSection";
      e.DispatchedVehicles = "Game.UI.InGame.DispatchedVehiclesSection";
      e.Electricity = "Game.UI.InGame.ElectricitySection";
      e.Transformer = "Game.UI.InGame.TransformerSection";
      e.Battery = "Game.UI.InGame.BatterySection";
      e.Water = "Game.UI.InGame.WaterSection";
      e.Sewage = "Game.UI.InGame.SewageSection";
      e.Fire = "Game.UI.InGame.FireSection";
      e.Prison = "Game.UI.InGame.PrisonSection";
      e.Shelter = "Game.UI.InGame.ShelterSection";
      e.Parking = "Game.UI.InGame.ParkingSection";
      e.Park = "Game.UI.InGame.ParkSection";
      e.Mail = "Game.UI.InGame.MailSection";
      e.Road = "Game.UI.InGame.RoadSection";
      e.Company = "Game.UI.InGame.CompanySection";
      e.Storage = "Game.UI.InGame.StorageSection";
      e.PrivateVehicle = "Game.UI.InGame.PrivateVehicleSection";
      e.PublicTransportVehicle = "Game.UI.InGame.PublicTransportVehicleSection";
      e.CargoTransportVehicle = "Game.UI.InGame.CargoTransportVehicleSection";
      e.DeliveryVehicle = "Game.UI.InGame.DeliveryVehicleSection";
      e.HealthcareVehicle = "Game.UI.InGame.HealthcareVehicleSection";
      e.FireVehicle = "Game.UI.InGame.FireVehicleSection";
      e.PoliceVehicle = "Game.UI.InGame.PoliceVehicleSection";
      e.MaintenanceVehicle = "Game.UI.InGame.MaintenanceVehicleSection";
      e.DeathcareVehicle = "Game.UI.InGame.DeathcareVehicleSection";
      e.PostVehicle = "Game.UI.InGame.PostVehicleSection";
      e.GarbageVehicle = "Game.UI.InGame.GarbageVehicleSection";
      e.Passengers = "Game.UI.InGame.PassengersSection";
      e.Cargo = "Game.UI.InGame.CargoSection";
      e.Load = "Game.UI.InGame.LoadSection";
      e.Status = "Game.UI.InGame.StatusSection";
      e.Citizen = "Game.UI.InGame.CitizenSection";
      e.DummyHuman = "Game.UI.InGame.DummyHumanSection";
      e.Animal = "Game.UI.InGame.AnimalSection";
      e.SelectVehicles = "Game.UI.InGame.SelectVehiclesSection";
      e.DestroyedBuilding = "Game.UI.InGame.DestroyedBuildingSection";
      e.DestroyedTree = "Game.UI.InGame.DestroyedTreeSection";
      e.Comfort = "Game.UI.InGame.ComfortSection";
      e.Upgrades = "Game.UI.InGame.UpgradesSection";
      e.UpgradeProperties = "Game.UI.InGame.UpgradePropertiesSection";
    }(mw || (mw = {}));
    (function (e) {
      e[e.none = 0] = "none";
      e[e.low = 1] = "low";
      e[e.medium = 2] = "medium";
      e[e.high = 3] = "high";
    })(hw || (hw = {}));
    (function (e) {
      e[e.PostFacility = 0] = "PostFacility";
      e[e.MailBox = 1] = "MailBox";
    })(gw || (gw = {}));
    (function (e) {
      e.GenericInfo = "Game.UI.InGame.GenericInfo";
      e.CapacityInfo = "Game.UI.InGame.CapacityInfo";
      e.InfoList = "Game.UI.InGame.InfoList";
    })(pw || (pw = {}));
    (function (e) {
      e.Extension = "Extension";
      e.SubBuilding = "SubBuilding";
    })(fw || (fw = {}));
    var Mw;
    var Rw = "Game.UI.InGame.LineVisualizerSection+LineStop";
    var kw = "Game.UI.InGame.LineVisualizerSection+LineVehicle";
    function Dw(e) {
      const t = ac();
      0;
      return Y.useMemo(() => {
        const n = Pc.SelectedInfoPanel.TOOLTIP.renderString(t, {
          hash: e,
          fallback: ""
        });
        return "" !== n ? n : null;
      }, [t, e]);
    }
    function Fw(e) {
      const t = ac();
      0;
      return Y.useMemo(() => {
        const n = e.filter(uw).map(e => Pc.SelectedInfoPanel.TOOLTIP.renderString(t, {
          hash: e,
          fallback: ""
        })).filter(e => "" !== e);
        return n.length > 0 ? n : null;
      }, [e, t]);
    }
    function Uw(e, t, n, s = false) {
      0;
      const i = Y.useRef();
      const a = ac();
      const o = sl(ww);
      0;
      return Y.useMemo(() => {
        const r = t => Pc.SelectedInfoPanel.TOOLTIP.renderString(a, {
          hash: e + t,
          fallback: ""
        });
        const l = [!s && Pc.SelectedInfoPanel.TOOLTIP.renderString(a, {
          hash: e,
          fallback: ""
        }), ...t.map(r), ...o.filter(e => n.includes(e)).map(r)].filter(Boolean);
        if (!l.length) {
          return null;
        }
        const c = l.join("");
        return i.current && c === i.current.join("") ? i.current : (i.current = l, l);
      }, [a, o, e, s, n, t]);
    }
    function Bw(e, t) {
      return Pc.SelectedInfoPanel.TOOLTIP.renderString(e, {
        hash: t,
        fallback: ""
      });
    }
    !function (e) {
      e.Citizen = "Citizen";
      e.Household = "Household";
      e.Building = "Building";
    }(Mw || (Mw = {}));
    X.add("game-ui/game/data-binding/selected-info-bindings.ts", {
      get selectedEntity() {
        return selectedEntity;
      },
      set selectedEntity(e) {
        selectedEntity = e;
      },
      get selectedTrailerController() {
        return selectedTrailerController;
      },
      set selectedTrailerController(e) {
        selectedTrailerController = e;
      },
      get selectedUITag() {
        return selectedUITag;
      },
      set selectedUITag(e) {
        selectedUITag = e;
      },
      get activeSelection() {
        return activeSelection;
      },
      set activeSelection(e) {
        activeSelection = e;
      },
      get selectedInfoPosition() {
        return selectedInfoPosition;
      },
      set selectedInfoPosition(e) {
        selectedInfoPosition = e;
      },
      get topSections() {
        return topSections;
      },
      set topSections(e) {
        topSections = e;
      },
      get middleSections() {
        return middleSections;
      },
      set middleSections(e) {
        middleSections = e;
      },
      get bottomSections() {
        return bottomSections;
      },
      set bottomSections(e) {
        bottomSections = e;
      },
      get titleSection() {
        return titleSection;
      },
      set titleSection(e) {
        titleSection = e;
      },
      get developerSection() {
        return developerSection;
      },
      set developerSection(e) {
        developerSection = e;
      },
      get lineVisualizerSection() {
        return lineVisualizerSection;
      },
      set lineVisualizerSection(e) {
        lineVisualizerSection = e;
      },
      get householdSidebarSection() {
        return householdSidebarSection;
      },
      set householdSidebarSection(e) {
        householdSidebarSection = e;
      },
      get tooltipTags() {
        return tooltipTags;
      },
      set tooltipTags(e) {
        tooltipTags = e;
      },
      get selectedRoute() {
        return selectedRoute;
      },
      set selectedRoute(e) {
        selectedRoute = e;
      },
      get selectEntity() {
        return Pw;
      },
      set selectEntity(e) {
        Pw = e;
      },
      get setSelectedRoute() {
        return Lw;
      },
      set setSelectedRoute(e) {
        Lw = e;
      },
      get clearSelection() {
        return Aw;
      },
      set clearSelection(e) {
        Aw = e;
      },
      get SectionType() {
        return mw;
      },
      set SectionType(e) {
        mw = e;
      },
      get Pollution() {
        return hw;
      },
      set Pollution(e) {
        hw = e;
      },
      get MailSectionType() {
        return gw;
      },
      set MailSectionType(e) {
        gw = e;
      },
      get DeveloperSubsectionType() {
        return pw;
      },
      set DeveloperSubsectionType(e) {
        pw = e;
      },
      get UpgradeType() {
        return fw;
      },
      set UpgradeType(e) {
        fw = e;
      },
      get LINE_STOP() {
        return Rw;
      },
      set LINE_STOP(e) {
        Rw = e;
      },
      get LINE_VEHICLE() {
        return kw;
      },
      set LINE_VEHICLE(e) {
        kw = e;
      },
      get HouseholdSidebarVariant() {
        return Mw;
      },
      set HouseholdSidebarVariant(e) {
        Mw = e;
      },
      get useTooltipParagraph() {
        return Dw;
      },
      set useTooltipParagraph(e) {
        Dw = e;
      },
      get useTooltipParagraphs() {
        return Fw;
      },
      set useTooltipParagraphs(e) {
        Fw = e;
      },
      get useGeneratedTooltipParagraphs() {
        return Uw;
      },
      set useGeneratedTooltipParagraphs(e) {
        Uw = e;
      }
    });
    var Vw = $r("statistics", "sampleRange");
    var Hw = $r("statistics", "sampleCount");
    var Kw = $r("statistics", "activeGroup");
    var Ww = $r("statistics", "activeCategory");
    var zw = $r("statistics", "stacked");
    var Yw = $r("statistics", "categories");
    var $w = $r("statistics", "dataLabels");
    var qw = Xr("statistics", "groups");
    var Xw = $r("statistics", "data");
    var Qw = $r("statistics", "selectedStatistics");
    var Zw = Xr("statistics", "unlockingRequirements");
    var Jw = $r("statistics", "updatesPerDay");
    function eO(e) {
      tl("statistics", "addStat", Gu(e, "Game.UI.InGame.StatisticsUISystem+StatItem"));
    }
    function tO(e) {
      tl("statistics", "removeStat", Gu(e, "Game.UI.InGame.StatisticsUISystem+StatItem"));
    }
    function nO() {
      tl("statistics", "clearStats");
    }
    function sO(e) {
      tl("statistics", "setSampleRange", e);
    }
    X.add("game-ui/game/data-binding/statistics-bindings.ts", {
      get sampleRange() {
        return sampleRange;
      },
      set sampleRange(e) {
        sampleRange = e;
      },
      get sampleCount() {
        return sampleCount;
      },
      set sampleCount(e) {
        sampleCount = e;
      },
      get activeGroup() {
        return activeGroup;
      },
      set activeGroup(e) {
        activeGroup = e;
      },
      get activeCategory() {
        return activeCategory;
      },
      set activeCategory(e) {
        activeCategory = e;
      },
      get stacked() {
        return stacked;
      },
      set stacked(e) {
        stacked = e;
      },
      get statisticsCategories() {
        return statisticsCategories;
      },
      set statisticsCategories(e) {
        statisticsCategories = e;
      },
      get statLabels() {
        return statLabels;
      },
      set statLabels(e) {
        statLabels = e;
      },
      get statGroupsMap() {
        return statGroupsMap;
      },
      set statGroupsMap(e) {
        statGroupsMap = e;
      },
      get statsData() {
        return statsData;
      },
      set statsData(e) {
        statsData = e;
      },
      get selectedStatistics() {
        return selectedStatistics;
      },
      set selectedStatistics(e) {
        selectedStatistics = e;
      },
      get statUnlockingRequirements() {
        return statUnlockingRequirements;
      },
      set statUnlockingRequirements(e) {
        statUnlockingRequirements = e;
      },
      get updatesPerDay() {
        return updatesPerDay;
      },
      set updatesPerDay(e) {
        updatesPerDay = e;
      },
      get addStat() {
        return eO;
      },
      set addStat(e) {
        eO = e;
      },
      get removeStat() {
        return tO;
      },
      set removeStat(e) {
        tO = e;
      },
      get clearStats() {
        return nO;
      },
      set clearStats(e) {
        nO = e;
      },
      get setSampleRange() {
        return sO;
      },
      set setSampleRange(e) {
        sO = e;
      }
    });
    var aO = $r("taxation", "taxRate");
    var oO = $r("taxation", "taxEffect");
    var rO = $r("taxation", "taxIncome");
    var lO = $r("taxation", "minTaxRate");
    var cO = $r("taxation", "maxTaxRate");
    var uO = $r("taxation", "areaTypes");
    var dO = Xr("taxation", "areaTaxRates");
    var mO = Xr("taxation", "areaTaxIncomes");
    var hO = Xr("taxation", "areaTaxEffects");
    var gO = Xr("taxation", "areaResourceTaxRanges");
    var pO = Xr("taxation", "areaResources");
    var fO = Xr("taxation", "resourceTaxRates");
    var xO = Xr("taxation", "resourceTaxIncomes");
    var vO = Xr("taxation", "taxResourceInfos");
    var _O = e => {
      tl("taxation", "setTaxRate", e);
    };
    var bO = (e, t) => {
      tl("taxation", "setAreaTaxRate", e, t);
    };
    var TO = (e, t, n) => {
      tl("taxation", "setResourceTaxRate", e, t, n);
    };
    X.add("game-ui/game/data-binding/taxation-bindings.ts", {
      get taxRate() {
        return aO;
      },
      set taxRate(e) {
        aO = e;
      },
      get taxEffect() {
        return oO;
      },
      set taxEffect(e) {
        oO = e;
      },
      get taxIncome() {
        return rO;
      },
      set taxIncome(e) {
        rO = e;
      },
      get minTaxRate() {
        return lO;
      },
      set minTaxRate(e) {
        lO = e;
      },
      get maxTaxRate() {
        return cO;
      },
      set maxTaxRate(e) {
        cO = e;
      },
      get areaTypes() {
        return areaTypes;
      },
      set areaTypes(e) {
        areaTypes = e;
      },
      get areaTaxRates() {
        return areaTaxRates;
      },
      set areaTaxRates(e) {
        areaTaxRates = e;
      },
      get areaTaxIncomes() {
        return areaTaxIncomes;
      },
      set areaTaxIncomes(e) {
        areaTaxIncomes = e;
      },
      get areaTaxEffects() {
        return areaTaxEffects;
      },
      set areaTaxEffects(e) {
        areaTaxEffects = e;
      },
      get areaResourceTaxRanges() {
        return areaResourceTaxRanges;
      },
      set areaResourceTaxRanges(e) {
        areaResourceTaxRanges = e;
      },
      get areaResources() {
        return areaResources;
      },
      set areaResources(e) {
        areaResources = e;
      },
      get resourceTaxRates() {
        return fO;
      },
      set resourceTaxRates(e) {
        fO = e;
      },
      get resourceTaxIncomes() {
        return xO;
      },
      set resourceTaxIncomes(e) {
        xO = e;
      },
      get taxResourceInfos() {
        return vO;
      },
      set taxResourceInfos(e) {
        vO = e;
      },
      get setTaxRate() {
        return _O;
      },
      set setTaxRate(e) {
        _O = e;
      },
      get setAreaTaxRate() {
        return bO;
      },
      set setAreaTaxRate(e) {
        bO = e;
      },
      get setResourceTaxRate() {
        return TO;
      },
      set setResourceTaxRate(e) {
        TO = e;
      }
    });
    var IO;
    var yO = $r("time", "timeSettings");
    var SO = $r("time", "ticks");
    var jO = $r("time", "day");
    var CO = $r("time", "lightingState");
    var NO = $r("time", "simulationPaused");
    var wO = $r("time", "simulationSpeed");
    var OO = Zr("time", "simulationPausedBarrier");
    function PO(e) {
      tl("time", "setSimulationPaused", e);
    }
    function LO(e) {
      tl("time", "setSimulationSpeed", e);
    }
    function AO(e, t) {
      return e.year === t.year && e.month === t.month;
    }
    function MO(e) {
      const t = e % 60;
      return {
        hour: (e - t) / 60 % 24,
        minute: t
      };
    }
    function RO(e, t) {
      return kO(e, t * e.ticksPerDay);
    }
    function kO(e, t) {
      const n = e.epochTicks + t;
      const s = Math.floor(n / e.ticksPerDay);
      return {
        year: e.epochYear + Math.floor(s / e.daysPerYear),
        month: (s % e.daysPerYear + e.daysPerYear) % e.daysPerYear
      };
    }
    function DO(e, t) {
      const n = e.epochTicks + t;
      const s = Math.floor(n / e.ticksPerDay);
      const i = e.epochYear + Math.floor(s / e.daysPerYear);
      const a = (s % e.daysPerYear + e.daysPerYear) % e.daysPerYear;
      const o = (n % e.ticksPerDay + e.ticksPerDay) % e.ticksPerDay;
      return {
        year: i,
        month: a,
        hour: Math.trunc(o / e.ticksPerDay * 24),
        minute: Math.trunc((o / e.ticksPerDay * 1440 % 60 + 60) % 60)
      };
    }
    function FO(e, t) {
      const n = ((e.epochTicks + t) % e.ticksPerDay + e.ticksPerDay) % e.ticksPerDay;
      return 60 * Math.trunc(n / e.ticksPerDay * 24) + Math.trunc((n / e.ticksPerDay * 1440 % 60 + 60) % 60);
    }
    function UO(e, t) {
      return (e % t + t) % t;
    }
    !function (e) {
      e[e.Dawn = 0] = "Dawn";
      e[e.Sunrise = 1] = "Sunrise";
      e[e.Day = 2] = "Day";
      e[e.Sunset = 3] = "Sunset";
      e[e.Dusk = 4] = "Dusk";
      e[e.Night = 5] = "Night";
    }(IO || (IO = {}));
    X.add("game-ui/game/data-binding/time-bindings.ts", {
      get timeSettings() {
        return timeSettings;
      },
      set timeSettings(e) {
        timeSettings = e;
      },
      get ticks() {
        return ticks;
      },
      set ticks(e) {
        ticks = e;
      },
      get day() {
        return day;
      },
      set day(e) {
        day = e;
      },
      get lightingState() {
        return lightingState;
      },
      set lightingState(e) {
        lightingState = e;
      },
      get simulationPaused() {
        return simulationPaused;
      },
      set simulationPaused(e) {
        simulationPaused = e;
      },
      get simulationSpeed() {
        return simulationSpeed;
      },
      set simulationSpeed(e) {
        simulationSpeed = e;
      },
      get simulationPausedBarrier() {
        return simulationPausedBarrier;
      },
      set simulationPausedBarrier(e) {
        simulationPausedBarrier = e;
      },
      get setSimulationPaused() {
        return PO;
      },
      set setSimulationPaused(e) {
        PO = e;
      },
      get setSimulationSpeed() {
        return LO;
      },
      set setSimulationSpeed(e) {
        LO = e;
      },
      get LightingState() {
        return IO;
      },
      set LightingState(e) {
        IO = e;
      },
      get dateEquals() {
        return AO;
      },
      set dateEquals(e) {
        AO = e;
      },
      get calculateTimeFromMinutesSinceMidnight() {
        return MO;
      },
      set calculateTimeFromMinutesSinceMidnight(e) {
        MO = e;
      },
      get calculateDateFromDays() {
        return RO;
      },
      set calculateDateFromDays(e) {
        RO = e;
      },
      get calculateDateFromTicks() {
        return kO;
      },
      set calculateDateFromTicks(e) {
        kO = e;
      },
      get calculateDateTimeFromTicks() {
        return DO;
      },
      set calculateDateTimeFromTicks(e) {
        DO = e;
      },
      get calculateMinutesSinceMidnightFromTicks() {
        return FO;
      },
      set calculateMinutesSinceMidnightFromTicks(e) {
        FO = e;
      }
    });
    var GO = $r("tool", "activeTool");
    var VO = Zr("tool", "bulldozeConfirmationRequested");
    var HO = $r("tool", "availableSnapMask");
    var KO = $r("tool", "selectedSnapMask");
    var WO = $r("tool", "allSnapMask");
    var zO = $r("tool", "snapOptionNames");
    var YO = $r("tool", "elevationRange");
    var $O = $r("tool", "elevation");
    var qO = $r("tool", "elevationStep");
    var XO = $r("tool", "parallelModeSupported");
    var QO = $r("tool", "parallelMode");
    var ZO = $r("tool", "parallelOffset");
    var JO = $r("tool", "undergroundModeSupported");
    var eP = $r("tool", "undergroundMode");
    var tP = $r("tool", "elevationDownDisabled");
    var nP = $r("tool", "elevationUpDisabled");
    var sP = $r("tool", "colorSupported");
    var iP = $r("tool", "color");
    var aP = $r("tool", "isEditor", false);
    var oP = $r("tool", "replacingTrees", false);
    var rP = $r("tool", "distance");
    var lP = $r("tool", "distanceScale");
    function cP(e) {
      tl("tool", "setColor", e);
    }
    function uP(e) {
      tl("tool", "selectTool", e);
    }
    function dP(e) {
      tl("tool", "selectToolMode", e);
    }
    function mP(e) {
      tl("tool", "confirmBulldoze", e);
    }
    function hP(e) {
      if (e < 0) {
        pP();
      } else if (e > 0) {
        gP();
      }
    }
    function gP() {
      tl("tool", "elevationUp");
    }
    function pP() {
      tl("tool", "elevationDown");
    }
    function fP() {
      tl("tool", "elevationScroll");
    }
    function xP(e) {
      tl("tool", "setElevationStep", e);
    }
    function vP(e) {
      tl("tool", "setSelectedSnapMask", e);
    }
    function _P() {
      tl("tool", "toggleParallelMode");
    }
    function bP(e) {
      tl("tool", "setParallelOffset", e);
    }
    function TP(e) {
      tl("tool", "setUndergroundMode", e);
    }
    function EP(e) {
      tl("tool", "setDistance", e);
    }
    var IP = "Bulldoze Tool";
    var yP = "Default Tool";
    var SP = "Zone Tool";
    var jP = "Area Tool";
    var CP = "Net Tool";
    var NP = "Object Tool";
    var wP = "Upgrade Tool";
    var OP = "Terrain Tool";
    var PP = "Selection Tool";
    var LP = "Route Tool";
    var AP = $r("tool", "allowBrush");
    var MP = $r("tool", "selectedBrush");
    var RP = $r("tool", "brushes");
    var kP = $r("tool", "brushSize");
    var DP = $r("tool", "brushStrength");
    var FP = $r("tool", "brushHeight");
    var UP = $r("tool", "brushHeightMin");
    var BP = $r("tool", "brushHeightMax");
    var GP = $r("tool", "brushAngle");
    var VP = $r("tool", "brushSizeMin");
    var HP = $r("tool", "brushSizeMax");
    function KP(e) {
      tl("tool", "selectBrush", e);
    }
    function WP(e) {
      tl("tool", "setBrushSize", e);
    }
    function zP(e) {
      tl("tool", "setBrushStrength", e);
    }
    function YP(e) {
      tl("tool", "setBrushAngle", e);
    }
    function $P(e) {
      tl("tool", "setBrushHeight", e);
    }
    X.add("game-ui/game/data-binding/tool-bindings.ts", {
      get activeTool() {
        return activeTool;
      },
      set activeTool(e) {
        activeTool = e;
      },
      get bulldozeConfirmationRequested() {
        return bulldozeConfirmationRequested;
      },
      set bulldozeConfirmationRequested(e) {
        bulldozeConfirmationRequested = e;
      },
      get availableSnapMask() {
        return availableSnapMask;
      },
      set availableSnapMask(e) {
        availableSnapMask = e;
      },
      get selectedSnapMask() {
        return selectedSnapMask;
      },
      set selectedSnapMask(e) {
        selectedSnapMask = e;
      },
      get allSnapMask() {
        return allSnapMask;
      },
      set allSnapMask(e) {
        allSnapMask = e;
      },
      get snapOptionNames() {
        return snapOptionNames;
      },
      set snapOptionNames(e) {
        snapOptionNames = e;
      },
      get elevationRange() {
        return elevationRange;
      },
      set elevationRange(e) {
        elevationRange = e;
      },
      get elevation() {
        return elevation;
      },
      set elevation(e) {
        elevation = e;
      },
      get elevationStep() {
        return elevationStep;
      },
      set elevationStep(e) {
        elevationStep = e;
      },
      get parallelModeSupported() {
        return parallelModeSupported;
      },
      set parallelModeSupported(e) {
        parallelModeSupported = e;
      },
      get parallelMode() {
        return parallelMode;
      },
      set parallelMode(e) {
        parallelMode = e;
      },
      get parallelOffset() {
        return parallelOffset;
      },
      set parallelOffset(e) {
        parallelOffset = e;
      },
      get undergroundModeSupported() {
        return undergroundModeSupported;
      },
      set undergroundModeSupported(e) {
        undergroundModeSupported = e;
      },
      get undergroundMode() {
        return undergroundMode;
      },
      set undergroundMode(e) {
        undergroundMode = e;
      },
      get elevationDownDisabled() {
        return elevationDownDisabled;
      },
      set elevationDownDisabled(e) {
        elevationDownDisabled = e;
      },
      get elevationUpDisabled() {
        return elevationUpDisabled;
      },
      set elevationUpDisabled(e) {
        elevationUpDisabled = e;
      },
      get colorSupported() {
        return colorSupported;
      },
      set colorSupported(e) {
        colorSupported = e;
      },
      get color() {
        return color;
      },
      set color(e) {
        color = e;
      },
      get isEditor() {
        return isEditor;
      },
      set isEditor(e) {
        isEditor = e;
      },
      get replacingTrees() {
        return replacingTrees;
      },
      set replacingTrees(e) {
        replacingTrees = e;
      },
      get distance() {
        return distance;
      },
      set distance(e) {
        distance = e;
      },
      get distanceScale() {
        return distanceScale;
      },
      set distanceScale(e) {
        distanceScale = e;
      },
      get setColor() {
        return cP;
      },
      set setColor(e) {
        cP = e;
      },
      get selectTool() {
        return uP;
      },
      set selectTool(e) {
        uP = e;
      },
      get selectToolMode() {
        return dP;
      },
      set selectToolMode(e) {
        dP = e;
      },
      get confirmBulldoze() {
        return mP;
      },
      set confirmBulldoze(e) {
        mP = e;
      },
      get changeElevation() {
        return hP;
      },
      set changeElevation(e) {
        hP = e;
      },
      get elevationUp() {
        return gP;
      },
      set elevationUp(e) {
        gP = e;
      },
      get elevationDown() {
        return pP;
      },
      set elevationDown(e) {
        pP = e;
      },
      get elevationScroll() {
        return fP;
      },
      set elevationScroll(e) {
        fP = e;
      },
      get setElevationStep() {
        return xP;
      },
      set setElevationStep(e) {
        xP = e;
      },
      get setSelectedSnapMask() {
        return vP;
      },
      set setSelectedSnapMask(e) {
        vP = e;
      },
      get toggleParallelMode() {
        return _P;
      },
      set toggleParallelMode(e) {
        _P = e;
      },
      get setParallelOffset() {
        return bP;
      },
      set setParallelOffset(e) {
        bP = e;
      },
      get setUndergroundMode() {
        return TP;
      },
      set setUndergroundMode(e) {
        TP = e;
      },
      get setDistance() {
        return EP;
      },
      set setDistance(e) {
        EP = e;
      },
      get BULLDOZE_TOOL() {
        return IP;
      },
      set BULLDOZE_TOOL(e) {
        IP = e;
      },
      get DEFAULT_TOOL() {
        return yP;
      },
      set DEFAULT_TOOL(e) {
        yP = e;
      },
      get ZONE_TOOL() {
        return SP;
      },
      set ZONE_TOOL(e) {
        SP = e;
      },
      get AREA_TOOL() {
        return jP;
      },
      set AREA_TOOL(e) {
        jP = e;
      },
      get NET_TOOL() {
        return CP;
      },
      set NET_TOOL(e) {
        CP = e;
      },
      get OBJECT_TOOL() {
        return NP;
      },
      set OBJECT_TOOL(e) {
        NP = e;
      },
      get UPGRADE_TOOL() {
        return wP;
      },
      set UPGRADE_TOOL(e) {
        wP = e;
      },
      get TERRAIN_TOOL() {
        return OP;
      },
      set TERRAIN_TOOL(e) {
        OP = e;
      },
      get SELECTION_TOOL() {
        return PP;
      },
      set SELECTION_TOOL(e) {
        PP = e;
      },
      get ROUTE_TOOL() {
        return LP;
      },
      set ROUTE_TOOL(e) {
        LP = e;
      },
      get allowBrush() {
        return allowBrush;
      },
      set allowBrush(e) {
        allowBrush = e;
      },
      get selectedBrush() {
        return selectedBrush;
      },
      set selectedBrush(e) {
        selectedBrush = e;
      },
      get brushes() {
        return brushes;
      },
      set brushes(e) {
        brushes = e;
      },
      get brushSize() {
        return brushSize;
      },
      set brushSize(e) {
        brushSize = e;
      },
      get brushStrength() {
        return brushStrength;
      },
      set brushStrength(e) {
        brushStrength = e;
      },
      get brushHeight() {
        return brushHeight;
      },
      set brushHeight(e) {
        brushHeight = e;
      },
      get brushHeightMin() {
        return brushHeightMin;
      },
      set brushHeightMin(e) {
        brushHeightMin = e;
      },
      get brushHeightMax() {
        return brushHeightMax;
      },
      set brushHeightMax(e) {
        brushHeightMax = e;
      },
      get brushAngle() {
        return brushAngle;
      },
      set brushAngle(e) {
        brushAngle = e;
      },
      get brushSizeMin() {
        return brushSizeMin;
      },
      set brushSizeMin(e) {
        brushSizeMin = e;
      },
      get brushSizeMax() {
        return brushSizeMax;
      },
      set brushSizeMax(e) {
        brushSizeMax = e;
      },
      get selectBrush() {
        return KP;
      },
      set selectBrush(e) {
        KP = e;
      },
      get setBrushSize() {
        return WP;
      },
      set setBrushSize(e) {
        WP = e;
      },
      get setBrushStrength() {
        return zP;
      },
      set setBrushStrength(e) {
        zP = e;
      },
      get setBrushAngle() {
        return YP;
      },
      set setBrushAngle(e) {
        YP = e;
      },
      get setBrushHeight() {
        return $P;
      },
      set setBrushHeight(e) {
        $P = e;
      }
    });
    var XP;
    var QP;
    !function (e) {
      e[e.asset = 0] = "asset";
      e[e.menu = 1] = "menu";
    }(XP || (XP = {}));
    (function (e) {
      e[e.Disabled = 0] = "Disabled";
      e[e.Child = 1] = "Child";
      e[e.Teen = 2] = "Teen";
      e[e.Adult = 4] = "Adult";
      e[e.Elderly = 8] = "Elderly";
    })(QP || (QP = {}));
    var ZP = $r("toolbar", "toolbarGroups");
    var JP = Xr("toolbar", "assetCategories");
    var eL = Xr("toolbar", "assets");
    var tL = $r("toolbar", "themes");
    var nL = $r("toolbar", "selectedThemes");
    var sL = $r("toolbar", "themes");
    var iL = $r("toolbar", "assetPacks");
    var aL = $r("toolbar", "selectedAssetPacks");
    var oL = $r("toolbar", "selectedAssetMenu");
    var rL = $r("toolbar", "selectedAssetCategory");
    var lL = $r("toolbar", "selectedAsset");
    var cL = $r("toolbar", "ageMask");
    var uL = el("toolbar", "setAgeMask");
    var dL = el("toolbar", "setSelectedThemes");
    var mL = el("toolbar", "setSelectedAssetPacks");
    var hL = el("toolbar", "selectAssetMenu");
    var gL = el("toolbar", "selectAssetCategory");
    var pL = el("toolbar", "selectAsset");
    var fL = Jr("toolbar", "clearAssetSelection");
    var xL = el("toolbar", "toggleToolOptions");
    X.add("game-ui/game/data-binding/toolbar-bindings.ts", {
      get ToolbarItemType() {
        return XP;
      },
      set ToolbarItemType(e) {
        XP = e;
      },
      get AgeMask() {
        return QP;
      },
      set AgeMask(e) {
        QP = e;
      },
      get toolbarGroups() {
        return toolbarGroups;
      },
      set toolbarGroups(e) {
        toolbarGroups = e;
      },
      get assetCategories() {
        return assetCategories;
      },
      set assetCategories(e) {
        assetCategories = e;
      },
      get assets() {
        return assets;
      },
      set assets(e) {
        assets = e;
      },
      get themes() {
        return themes;
      },
      set themes(e) {
        themes = e;
      },
      get selectedThemes() {
        return selectedThemes;
      },
      set selectedThemes(e) {
        selectedThemes = e;
      },
      get vegetationAges() {
        return vegetationAges;
      },
      set vegetationAges(e) {
        vegetationAges = e;
      },
      get assetPacks() {
        return assetPacks;
      },
      set assetPacks(e) {
        assetPacks = e;
      },
      get selectedAssetPacks() {
        return selectedAssetPacks;
      },
      set selectedAssetPacks(e) {
        selectedAssetPacks = e;
      },
      get selectedAssetMenu() {
        return selectedAssetMenu;
      },
      set selectedAssetMenu(e) {
        selectedAssetMenu = e;
      },
      get selectedAssetCategory() {
        return selectedAssetCategory;
      },
      set selectedAssetCategory(e) {
        selectedAssetCategory = e;
      },
      get selectedAsset() {
        return selectedAsset;
      },
      set selectedAsset(e) {
        selectedAsset = e;
      },
      get ageMask() {
        return ageMask;
      },
      set ageMask(e) {
        ageMask = e;
      },
      get setAgeMask() {
        return uL;
      },
      set setAgeMask(e) {
        uL = e;
      },
      get setSelectedThemes() {
        return dL;
      },
      set setSelectedThemes(e) {
        dL = e;
      },
      get setSelectedAssetPacks() {
        return mL;
      },
      set setSelectedAssetPacks(e) {
        mL = e;
      },
      get selectAssetMenu() {
        return hL;
      },
      set selectAssetMenu(e) {
        hL = e;
      },
      get selectAssetCategory() {
        return gL;
      },
      set selectAssetCategory(e) {
        gL = e;
      },
      get selectAsset() {
        return pL;
      },
      set selectAsset(e) {
        pL = e;
      },
      get clearAssetSelection() {
        return fL;
      },
      set clearAssetSelection(e) {
        fL = e;
      },
      get toggleToolOptions() {
        return xL;
      },
      set toggleToolOptions(e) {
        xL = e;
      }
    });
    var vL = $r("toolbarBottom", "population");
    var _L = $r("toolbarBottom", "populationDelta");
    var bL = $r("toolbarBottom", "money");
    var TL = $r("toolbarBottom", "moneyDelta");
    var EL = $r("toolbarBottom", "cityName");
    var IL = $r("toolbarBottom", "unlimitedMoney");
    var yL = $r("toolbarBottom", "populationTrendThresholds");
    var SL = $r("toolbarBottom", "moneyTrendThresholds");
    function jL(e) {
      tl("toolbarBottom", "setCityName", e);
    }
    X.add("game-ui/game/data-binding/toolbar-bottom-bindings.ts", {
      get population() {
        return population;
      },
      set population(e) {
        population = e;
      },
      get populationDelta() {
        return populationDelta;
      },
      set populationDelta(e) {
        populationDelta = e;
      },
      get money() {
        return money;
      },
      set money(e) {
        money = e;
      },
      get moneyDelta() {
        return moneyDelta;
      },
      set moneyDelta(e) {
        moneyDelta = e;
      },
      get cityName() {
        return cityName;
      },
      set cityName(e) {
        cityName = e;
      },
      get unlimitedMoney() {
        return unlimitedMoney;
      },
      set unlimitedMoney(e) {
        unlimitedMoney = e;
      },
      get populationTrendThresholds() {
        return populationTrendThresholds;
      },
      set populationTrendThresholds(e) {
        populationTrendThresholds = e;
      },
      get moneyTrendThresholds() {
        return moneyTrendThresholds;
      },
      set moneyTrendThresholds(e) {
        moneyTrendThresholds = e;
      },
      get setCityName() {
        return jL;
      },
      set setCityName(e) {
        jL = e;
      }
    });
    var NL = $r("transportationOverview", "passengerTypes");
    var wL = $r("transportationOverview", "cargoTypes");
    var OL = $r("transportationOverview", "lines");
    var PL = $r("transportationOverview", "selectedPassengerType");
    var LL = $r("transportationOverview", "selectedCargoType");
    var AL = el("transportationOverview", "select");
    var ML = el("transportationOverview", "delete");
    var RL = el("transportationOverview", "rename");
    var kL = el("transportationOverview", "setColor");
    var DL = el("transportationOverview", "setActive");
    var FL = el("transportationOverview", "showLine");
    var UL = el("transportationOverview", "hideLine");
    var BL = el("transportationOverview", "setSchedule");
    var GL = Jr("transportationOverview", "resetVisibility");
    var VL = el("transportationOverview", "toggleHighlight");
    var HL = el("transportationOverview", "setSelectedPassengerType");
    var KL = el("transportationOverview", "setSelectedCargoType");
    X.add("game-ui/game/data-binding/transport-bindings.ts", {
      get passengerTypes() {
        return passengerTypes;
      },
      set passengerTypes(e) {
        passengerTypes = e;
      },
      get cargoTypes() {
        return cargoTypes;
      },
      set cargoTypes(e) {
        cargoTypes = e;
      },
      get transportLines() {
        return transportLines;
      },
      set transportLines(e) {
        transportLines = e;
      },
      get selectedPassengerType() {
        return selectedPassengerType;
      },
      set selectedPassengerType(e) {
        selectedPassengerType = e;
      },
      get selectedCargoType() {
        return selectedCargoType;
      },
      set selectedCargoType(e) {
        selectedCargoType = e;
      },
      get selectLine() {
        return AL;
      },
      set selectLine(e) {
        AL = e;
      },
      get deleteLine() {
        return ML;
      },
      set deleteLine(e) {
        ML = e;
      },
      get renameLine() {
        return RL;
      },
      set renameLine(e) {
        RL = e;
      },
      get setLineColor() {
        return kL;
      },
      set setLineColor(e) {
        kL = e;
      },
      get setLineActive() {
        return DL;
      },
      set setLineActive(e) {
        DL = e;
      },
      get showLine() {
        return FL;
      },
      set showLine(e) {
        FL = e;
      },
      get hideLine() {
        return UL;
      },
      set hideLine(e) {
        UL = e;
      },
      get setLineSchedule() {
        return BL;
      },
      set setLineSchedule(e) {
        BL = e;
      },
      get resetVisibility() {
        return GL;
      },
      set resetVisibility(e) {
        GL = e;
      },
      get toggleHighlight() {
        return VL;
      },
      set toggleHighlight(e) {
        VL = e;
      },
      get setSelectedPassengerType() {
        return HL;
      },
      set setSelectedPassengerType(e) {
        HL = e;
      },
      get setSelectedCargoType() {
        return KL;
      },
      set setSelectedCargoType(e) {
        KL = e;
      }
    });
    var zL = Xr("upgradeMenu", "upgrades");
    var YL = Xr("upgradeMenu", "upgradeDetails");
    var $L = $r("upgradeMenu", "selectedUpgrade");
    var qL = $r("upgradeMenu", "upgrading");
    function XL(e, t) {
      tl("upgradeMenu", "selectUpgrade", e, t);
    }
    function QL() {
      tl("upgradeMenu", "clearUpgradeSelection");
    }
    X.add("game-ui/game/data-binding/upgrade-bindings.ts", {
      get upgrades() {
        return upgrades;
      },
      set upgrades(e) {
        upgrades = e;
      },
      get upgradeDetails() {
        return upgradeDetails;
      },
      set upgradeDetails(e) {
        upgradeDetails = e;
      },
      get selectedUpgrade() {
        return selectedUpgrade;
      },
      set selectedUpgrade(e) {
        selectedUpgrade = e;
      },
      get upgrading() {
        return upgrading;
      },
      set upgrading(e) {
        upgrading = e;
      },
      get selectUpgrade() {
        return XL;
      },
      set selectUpgrade(e) {
        XL = e;
      },
      get clearUpgradeSelection() {
        return QL;
      },
      set clearUpgradeSelection(e) {
        QL = e;
      }
    });
    const ZL = X.find;
    const JL = X.get;
    Object.defineProperties(window, {
      React: {
        value: Y
      },
      ReactDOM: {
        value: Z
      },
      ReactDOMClient: {
        value: Q
      },
      "cs2/api": {
        value: t
      },
      "cs2/bindings": {
        value: V
      },
      "cs2/l10n": {
        value: s
      },
      "cs2/ui": {
        value: l
      },
      "cs2/utils": {
        value: H
      },
      "cs2/input": {
        value: K
      },
      "cs2/modding": {
        value: W
      },
      "cohtml/cohtml": {
        value: Rr()
      },
      "chart.js": {
        value: e
      }
    });
    var eA = (e, t) => {
      const n = new XMLHttpRequest();
      n.open("GET", e, true);
      n.onreadystatechange = () => {
        if (200 === n.status) {
          n.onreadystatechange = null;
          n.abort();
          const s = document.createElement("link");
          s.rel = "stylesheet";
          s.id = e.split("/").pop()?.replace(".css", "") || "";
          s.href = e;
          s.onload = () => {
            t(e);
            s.onload = null;
          };
          document.head.appendChild(s);
        }
      };
      n.send();
    };
    X.add("game-ui/modding/utils/load-css.tsx", {
      get loadCss() {
        return eA;
      },
      set loadCss(e) {
        eA = e;
      }
    });
    const tA = [];
    const nA = new Set();
    const sA = e => {
      X.reset();
      nA.clear();
      for (const t of e) t(X);
    };
    const iA = new Tg("CONTINUE_KEY");
    var aA = ({
      severity: e = hE.Error,
      title: t,
      message: n,
      errorDetails: s,
      canQuit: i = true,
      canSaveAndQuit: a = true,
      canSaveAndContinue: o = false
    }) => {
      0;
      const r = Y.useContext(cE);
      0;
      const l = Y.useCallback(() => LE((n ?? "") + "\n" + (s ?? "")), [n, s]);
      0;
      const c = Y.useCallback(() => {
        r.onClose();
        PE();
      }, [r]);
      const u = kE();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(t_, {
        children: z.jsx(HE, {
          controller: u,
          children: z.jsx(ZT, {
            theme: eE,
            header: z.jsx(nE, {
              children: null != t ? t : (0, z.jsx)(Pc.Common.ERROR_DIALOG_TITLE, {})
            }),
            className: sE.errorDialog,
            onClose: r.onClose,
            children: z.jsxs(ep, {
              initialFocused: iA,
              children: [z.jsxs("div", {
                className: sE.iconLayout,
                children: [z.jsx("img", {
                  src: e === hE.Warning ? "Media/Misc/Warning.svg" : "Media/Misc/Error.svg",
                  className: sE.icon
                }), z.jsxs("div", {
                  className: sE.mainColumn,
                  children: [z.jsx("div", {
                    className: sE.errorMessage,
                    style: {
                      maxHeight: .5 * screen.availHeight
                    },
                    children: n
                  }), null != s && (0, z.jsxs)("div", {
                    className: sE.errorDetails,
                    children: [(0, z.jsx)(ob, {
                      controller: u,
                      className: sE.content,
                      hintClassName: sE.scrollHint,
                      labelClassName: sE.scrollHintLabel,
                      children: s
                    }), (0, z.jsx)($_, {
                      tinted: true,
                      src: "Media/Glyphs/Copy.svg",
                      className: sE.copyButton,
                      onSelect: l
                    })]
                  })]
                })]
              }), z.jsxs("div", {
                className: sE.buttons,
                children: [z.jsx(L_, {
                  focusKey: iA,
                  theme: DE,
                  className: sE.button,
                  onSelect: r.onClose,
                  children: z.jsx(Pc.Common.ERROR_DIALOG_CONTINUE, {})
                }), i && (0, z.jsx)(L_, {
                  theme: DE,
                  className: sE.button,
                  onSelect: wE,
                  children: (0, z.jsx)(Pc.Common.ERROR_DIALOG_QUIT_GAME, {})
                }), a && (0, z.jsx)(L_, {
                  theme: DE,
                  className: sE.button,
                  onSelect: OE,
                  children: (0, z.jsx)(Pc.Common.ERROR_DIALOG_SAVE_QUIT_GAME, {})
                }), o && (0, z.jsx)(L_, {
                  theme: DE,
                  className: sE.button,
                  onSelect: c,
                  children: (0, z.jsx)(Pc.Common.ERROR_DIALOG_SAVE_CONTINUE, {})
                })]
              })]
            })
          })
        })
      });
    };
    function oA(e) {
      return e === hE.Warning ? "Media/Misc/Warning.svg" : "Media/Misc/Error.svg";
    }
    X.add("game-ui/common/panel/dialog/error-dialog.tsx", {
      get ErrorDialog() {
        return aA;
      },
      set ErrorDialog(e) {
        aA = e;
      }
    });
    const rA = new Tg("CHILDREN_KEY");
    const lA = new Tg("DIALOG_KEY");
    var cA = ({
      children: e
    }) => {
      const t = sl(EE);
      0;
      const n = Y.useMemo(() => ({
        onClose: () => AE()
      }), []);
      0;
      0;
      0;
      0;
      return z.jsxs(ip, {
        focused: null != t ? lA : rA,
        children: [z.jsx(sp, {
          focusKey: rA,
          children: e
        }), z.jsx(sp, {
          focusKey: lA,
          children: z.jsx(cE.Provider, {
            value: n,
            children: null != t && (0, z.jsx)(aA, {
              severity: t.severity,
              title: uA(t),
              message: (s = t, (0, z.jsx)(bb, {
                children: (0, z.jsx)(hu, {
                  value: s.localizedMessage
                })
              })),
              errorDetails: t.errorDetails,
              canQuit: 0 != (t.actions & gE.Quit),
              canSaveAndQuit: 0 != (t.actions & gE.SaveAndQuit),
              canSaveAndContinue: 0 != (t.actions & gE.SaveAndContinue)
            })
          })
        })]
      });
      var s;
    };
    function uA(e) {
      0;
      return z.jsx(hu, {
        value: e.localizedTitle
      });
    }
    X.add("game-ui/common/panel/dialog/error-dialog-renderer.tsx", {
      get ErrorDialogRenderer() {
        return cA;
      },
      set ErrorDialogRenderer(e) {
        cA = e;
      }
    });
    var mA;
    var hA;
    var gA = $r("debug", "enabled");
    var pA = $r("debug", "visible");
    var fA = $r("debug", "panels");
    var xA = $r("debug", "selectedIndex");
    var vA = $r("debug", "selectedPanel");
    var _A = $r("debug", "children");
    var bA = $r("debug", "observedBinding");
    var TA = Zr("debug", "bindingTriggered");
    var EA = $r("debug", "developerInfoVisible");
    var IA = $r("debug", "watches");
    function yA() {
      tl("debug", "show");
    }
    function SA() {
      tl("debug", "hide");
    }
    function jA() {
      tl("debug", "selectPreviousPanel");
    }
    function CA(e) {
      tl("debug", "selectPanel", e);
    }
    function NA() {
      tl("debug", "selectNextPanel");
    }
    !function (e) {
      e[e.Unknown = 0] = "Unknown";
      e[e.Trigger = 1] = "Trigger";
      e[e.Event = 2] = "Event";
      e[e.Value = 3] = "Value";
    }(mA || (mA = {}));
    (function (e) {
      e.History = "debug.HistoryWatch";
      e.Distribution = "debug.DistributionWatch";
    })(hA || (hA = {}));
    X.add("game-ui/debug/data-binding/debug-bindings.ts", {
      get enabled() {
        return enabled;
      },
      set enabled(e) {
        enabled = e;
      },
      get visible() {
        return visible;
      },
      set visible(e) {
        visible = e;
      },
      get panels() {
        return panels;
      },
      set panels(e) {
        panels = e;
      },
      get selectedIndex() {
        return selectedIndex;
      },
      set selectedIndex(e) {
        selectedIndex = e;
      },
      get selectedPanel() {
        return selectedPanel;
      },
      set selectedPanel(e) {
        selectedPanel = e;
      },
      get debugChildren() {
        return debugChildren;
      },
      set debugChildren(e) {
        debugChildren = e;
      },
      get observedBinding() {
        return observedBinding;
      },
      set observedBinding(e) {
        observedBinding = e;
      },
      get bindingTriggered() {
        return bindingTriggered;
      },
      set bindingTriggered(e) {
        bindingTriggered = e;
      },
      get developerInfoVisible() {
        return developerInfoVisible;
      },
      set developerInfoVisible(e) {
        developerInfoVisible = e;
      },
      get watches() {
        return watches;
      },
      set watches(e) {
        watches = e;
      },
      get showDebugUI() {
        return yA;
      },
      set showDebugUI(e) {
        yA = e;
      },
      get hideDebugUI() {
        return SA;
      },
      set hideDebugUI(e) {
        SA = e;
      },
      get selectPreviousPanel() {
        return jA;
      },
      set selectPreviousPanel(e) {
        jA = e;
      },
      get selectPanel() {
        return CA;
      },
      set selectPanel(e) {
        CA = e;
      },
      get selectNextPanel() {
        return NA;
      },
      set selectNextPanel(e) {
        NA = e;
      },
      get DebugBindingType() {
        return mA;
      },
      set DebugBindingType(e) {
        mA = e;
      },
      get DebugWatchType() {
        return hA;
      },
      set DebugWatchType(e) {
        hA = e;
      }
    });
    let wA = {
      button: "button_BNH"
    };
    X.add("game-ui/debug/themes/tab.module.scss", {
      get classes() {
        return wA;
      },
      set classes(e) {
        Object.assign(wA, e);
      }
    });
    function PA(e, t) {
      0;
      return Y.useCallback((...n) => e(t, ...n), [e, t]);
    }
    var LA;
    var AA;
    var MA;
    var RA;
    function kA(e, t) {
      return [...e, t];
    }
    function DA(e) {
      0;
      return Y.useMemo(() => e.join("."), [e]);
    }
    function FA({
      displayName: e,
      value: t,
      disabled: n
    }) {
      return {
        displayName: e,
        value: rm(t),
        disabled: n
      };
    }
    function UA({
      group: e,
      path: t
    }) {
      tl(e, "invoke", t);
    }
    function BA({
      group: e,
      path: t
    }, n) {
      tl(e, "setValue", t, n);
    }
    function GA({
      group: e,
      path: t
    }, n) {
      tl(e, "setExpanded", t, n);
    }
    function VA({
      group: e,
      path: t
    }) {
      tl(e, "invoke", t);
    }
    function HA({
      group: e,
      path: t
    }) {
      tl(e, "addListElement", t);
    }
    function KA({
      group: e,
      path: t
    }, n) {
      tl(e, "duplicateListElement", t, n);
    }
    function WA({
      group: e,
      path: t
    }, n, s) {
      tl(e, "moveListElement", t, n, s);
    }
    function zA({
      group: e,
      path: t
    }, n) {
      tl(e, "deleteListElement", t, n);
    }
    function YA({
      group: e,
      path: t
    }) {
      tl(e, "clearList", t);
    }
    function $A({
      group: e,
      path: t
    }, n) {
      tl(e, "setCurrentPageIndex", t, n);
    }
    function qA(e, t, n, s, i = false, a = 0) {
      return nl(e, "moveKeyframe", t, n, s, i, a);
    }
    function XA(e, t, n, s, i = 0) {
      return nl(e, "addKeyframe", t, n, s, i);
    }
    function QA(e, t, n, s = 0) {
      tl(e, "removeKeyframe", t, n, s);
    }
    function ZA(e, t, n, s = 0) {
      tl(e, "setKeyframes", t, n, s);
    }
    function JA(e, t, n) {
      return nl(e, "addSeason", t, n);
    }
    function eM(e, t, n) {
      return nl(e, "onUpdateSeason", t, n);
    }
    function tM(e, t, n) {
      tl(e, "deleteSeason", t, n);
    }
    function nM(e) {
      0;
      return Y.useMemo(() => ({
        group: e,
        path: []
      }), [e]);
    }
    function sM(e, t) {
      0;
      return Y.useMemo(() => ({
        group: e.group,
        path: kA(e.path, t)
      }), [e.group, e.path, t]);
    }
    X.add("game-ui/common/utils/element-callback.ts", {
      get useElementCallback() {
        return PA;
      },
      set useElementCallback(e) {
        PA = e;
      }
    });
    (function (e) {
      e.IntArrowField = "Game.UI.Debug.IntArrowField";
      e.UIntArrowField = "Game.UI.Debug.UIntArrowField";
      e.FloatArrowField = "Game.UI.Debug.FloatArrowField";
      e.Image = "Game.UI.Debug.Image";
    })(LA || (LA = {}));
    X.add("game-ui/debug/data-binding/debug-widgets.ts", {
      get DebugWidgetType() {
        return LA;
      },
      set DebugWidgetType(e) {
        LA = e;
      }
    });
    (function (e) {
      e.Column = "Game.UI.Widgets.Column";
      e.Row = "Game.UI.Widgets.Row";
      e.Scrollable = "Game.UI.Widgets.Scrollable";
      e.PageView = "Game.UI.Widgets.PageView";
      e.PageLayout = "Game.UI.Widgets.PageLayout";
      e.Divider = "Game.UI.Widgets.Divider";
      e.Label = "Game.UI.Widgets.Label";
      e.MultilineText = "Game.UI.Widgets.MultilineText";
      e.Breadcrumbs = "Game.UI.Widgets.Breadcrumbs";
      e.Button = "Game.UI.Widgets.Button";
      e.ButtonRow = "Game.UI.Widgets.ButtonRow";
      e.IconButton = "Game.UI.Widgets.IconButton";
      e.IconButtonGroup = "Game.UI.Widgets.IconButtonGroup";
      e.Group = "Game.UI.Widgets.Group";
      e.ExpandableGroup = "Game.UI.Widgets.ExpandableGroup";
      e.PagedList = "Game.UI.Widgets.PagedList";
      e.ValueField = "Game.UI.Widgets.ValueField";
      e.LocalizedValueField = "Game.UI.Widgets.LocalizedValueField";
      e.ToggleField = "Game.UI.Widgets.ToggleField";
      e.IntInputField = "Game.UI.Widgets.IntInputField";
      e.IntSliderField = "Game.UI.Widgets.IntSliderField";
      e.Int2InputField = "Game.UI.Widgets.Int2InputField";
      e.Int3InputField = "Game.UI.Widgets.Int3InputField";
      e.Int4InputField = "Game.UI.Widgets.Int4InputField";
      e.UIntInputField = "Game.UI.Widgets.UIntInputField";
      e.UIntSliderField = "Game.UI.Widgets.UIntSliderField";
      e.TimeSliderField = "Game.UI.Widgets.TimeSliderField";
      e.TimeBoundsSliderField = "Game.UI.Widgets.TimeBoundsSliderField";
      e.FloatInputField = "Game.UI.Widgets.FloatInputField";
      e.FloatSliderField = "Game.UI.Widgets.FloatSliderField";
      e.Float2InputField = "Game.UI.Widgets.Float2InputField";
      e.Float2SliderField = "Game.UI.Widgets.Float2SliderField";
      e.Float3InputField = "Game.UI.Widgets.Float3InputField";
      e.Float3SliderField = "Game.UI.Widgets.Float3SliderField";
      e.EulerAnglesField = "Game.UI.Widgets.EulerAnglesField";
      e.Float4InputField = "Game.UI.Widgets.Float4InputField";
      e.Float4SliderField = "Game.UI.Widgets.Float4SliderField";
      e.Bounds1SliderField = "Game.UI.Widgets.Bounds1SliderField";
      e.Bounds1InputField = "Game.UI.Widgets.Bounds1InputField";
      e.Bounds2InputField = "Game.UI.Widgets.Bounds2InputField";
      e.Bounds3InputField = "Game.UI.Widgets.Bounds3InputField";
      e.Bezier4x3Field = "Game.UI.Widgets.Bezier4x3Field";
      e.RangedSliderField = "Game.UI.Widgets.RangedSliderField";
      e.StringInputField = "Game.UI.Widgets.StringInputField";
      e.ColorField = "Game.UI.Widgets.ColorField";
      e.GradientSliderField = "Game.UI.Widgets.GradientSliderField";
      e.AnimationCurveField = "Game.UI.Widgets.AnimationCurveField";
      e.EnumField = "Game.UI.Widgets.EnumField";
      e.FlagsField = "Game.UI.Widgets.FlagsField";
      e.PopupValueField = "Game.UI.Widgets.PopupValueField";
      e.DropdownField = "Game.UI.Widgets.DropdownField";
      e.DirectoryPickerButton = "Game.UI.Widgets.DirectoryPickerButton";
      e.SeasonsField = "Game.UI.Widgets.SeasonsField";
      e.ImageField = "Game.UI.Widgets.ImageField";
    })(AA || (AA = {}));
    (function (e) {
      e[e.Vertical = 0] = "Vertical";
      e[e.Horizontal = 1] = "Horizontal";
    })(MA || (MA = {}));
    (function (e) {
      e[e.Title = 0] = "Title";
      e[e.Container = 1] = "Container";
    })(RA || (RA = {}));
    X.add("game-ui/widgets/data-binding/widget-bindings.ts", {
      get WidgetType() {
        return AA;
      },
      set WidgetType(e) {
        AA = e;
      },
      get combinePath() {
        return kA;
      },
      set combinePath(e) {
        kA = e;
      },
      get usePathFocusKey() {
        return DA;
      },
      set usePathFocusKey(e) {
        DA = e;
      },
      get ScrollableDirection() {
        return MA;
      },
      set ScrollableDirection(e) {
        MA = e;
      },
      get TooltipPos() {
        return RA;
      },
      set TooltipPos(e) {
        RA = e;
      },
      get toBigIntMember() {
        return FA;
      },
      set toBigIntMember(e) {
        FA = e;
      },
      get invoke() {
        return UA;
      },
      set invoke(e) {
        UA = e;
      },
      get setValue() {
        return BA;
      },
      set setValue(e) {
        BA = e;
      },
      get setExpanded() {
        return GA;
      },
      set setExpanded(e) {
        GA = e;
      },
      get openDirectory() {
        return VA;
      },
      set openDirectory(e) {
        VA = e;
      },
      get addListElement() {
        return HA;
      },
      set addListElement(e) {
        HA = e;
      },
      get duplicateListElement() {
        return KA;
      },
      set duplicateListElement(e) {
        KA = e;
      },
      get moveListElement() {
        return WA;
      },
      set moveListElement(e) {
        WA = e;
      },
      get deleteListElement() {
        return zA;
      },
      set deleteListElement(e) {
        zA = e;
      },
      get clearList() {
        return YA;
      },
      set clearList(e) {
        YA = e;
      },
      get setCurrentPageIndex() {
        return $A;
      },
      set setCurrentPageIndex(e) {
        $A = e;
      },
      get moveKeyframe() {
        return qA;
      },
      set moveKeyframe(e) {
        qA = e;
      },
      get addKeyframe() {
        return XA;
      },
      set addKeyframe(e) {
        XA = e;
      },
      get removeKeyframe() {
        return QA;
      },
      set removeKeyframe(e) {
        QA = e;
      },
      get setKeyframes() {
        return ZA;
      },
      set setKeyframes(e) {
        ZA = e;
      },
      get addSeason() {
        return JA;
      },
      set addSeason(e) {
        JA = e;
      },
      get updateSeason() {
        return eM;
      },
      set updateSeason(e) {
        eM = e;
      },
      get deleteSeason() {
        return tM;
      },
      set deleteSeason(e) {
        tM = e;
      }
    });
    X.add("game-ui/widgets/components/widget-props.ts", {
      get useRootId() {
        return nM;
      },
      set useRootId(e) {
        nM = e;
      },
      get useWidgetId() {
        return sM;
      },
      set useWidgetId(e) {
        sM = e;
      }
    });
    const iM = {};
    function aM(e, t) {
      return t;
    }
    function oM(e) {
      return Dr(e.entity);
    }
    function rM({
      components: e,
      data: t,
      props: n
    }) {
      const s = e[t.__Type];
      return null != s ? (0, z.jsx)(s, {
        ...t,
        ...(n || iM)
      }) : (0, z.jsx)(uM, {
        typeName: t.__Type
      });
    }
    function lM({
      components: e,
      data: t,
      props: n,
      keyProvider: s = aM
    }) {
      0;
      return z.jsx(z.Fragment, {
        children: t.map((t, i) => {
          if (null == t) {
            return;
          }
          const a = s(t, i);
          const o = e[t.__Type];
          return null != o ? (0, z.jsx)(o, {
            ...t,
            ...(n || iM)
          }, a) : (0, z.jsx)(uM, {
            typeName: t.__Type
          }, a);
        })
      });
    }
    function cM(e, t, n, s) {
      const i = e[t.__Type];
      return null != i ? (0, z.jsx)(i, {
        ...t,
        ...(n || iM)
      }, s) : undefined;
    }
    var uM = ({
      typeName: e
    }) => (0, z.jsx)("div", {
      style: {
        backgroundColor: "red",
        color: "yellow"
      },
      children: `Unknown element type ${e}`
    });
    function dM({
      parent: e,
      components: t,
      data: n
    }) {
      const s = n.props.__Type;
      const i = t[s];
      return null != i ? (0, z.jsx)(hM.Provider, {
        value: t,
        children: (0, z.jsx)(i, {
          parent: e,
          ...n
        })
      }) : (0, z.jsx)(uM, {
        typeName: s
      });
    }
    function mM({
      parent: e,
      components: t,
      data: n
    }) {
      0;
      return z.jsx(hM.Provider, {
        value: t,
        children: null != n?.map ? n.map((n, s) => {
          if (null == n || n.props.hidden) {
            return;
          }
          const i = n.path || `item-${s}`;
          const a = n.props.__Type;
          const o = t[a];
          return null != o ? (0, z.jsx)(o, {
            parent: e,
            ...n
          }, i) : (0, z.jsx)(uM, {
            typeName: a
          }, i);
        }) : JSON.stringify(n)
      });
    }
    X.add("game-ui/common/typed-renderer/typed-renderer.tsx", {
      get entityKeyProvider() {
        return oM;
      },
      set entityKeyProvider(e) {
        oM = e;
      },
      get TypedRenderer() {
        return rM;
      },
      set TypedRenderer(e) {
        rM = e;
      },
      get TypedListRenderer() {
        return lM;
      },
      set TypedListRenderer(e) {
        lM = e;
      },
      get renderTyped() {
        return cM;
      },
      set renderTyped(e) {
        cM = e;
      },
      get UnknownElement() {
        return uM;
      },
      set UnknownElement(e) {
        uM = e;
      }
    });
    0;
    var hM = Y.createContext({});
    X.add("game-ui/widgets/components/widget-renderer.tsx", {
      get WidgetRenderer() {
        return dM;
      },
      set WidgetRenderer(e) {
        dM = e;
      },
      get WidgetListRenderer() {
        return mM;
      },
      set WidgetListRenderer(e) {
        mM = e;
      },
      get WidgetComponentMapContext() {
        return hM;
      },
      set WidgetComponentMapContext(e) {
        hM = e;
      }
    });
    let gM = {
      button: "button_hxl button_k8s"
    };
    X.add("game-ui/debug/widgets/button/button.module.scss", {
      get classes() {
        return gM;
      },
      set classes(e) {
        Object.assign(gM, e);
      }
    });
    var fM = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      const i = PA(UA, s);
      const a = DA(s.path);
      0;
      0;
      return z.jsx(xM, {
        onSelect: i,
        focusKey: a,
        children: z.jsx(hu, {
          value: n.displayName
        })
      });
    };
    function xM({
      focusKey: e,
      children: t,
      onSelect: n
    }) {
      0;
      return z.jsx(L_, {
        focusKey: e,
        theme: gM,
        onSelect: n,
        children: t || " "
      });
    }
    X.add("game-ui/debug/widgets/button/button.tsx", {
      get BoundDebugButton() {
        return fM;
      },
      set BoundDebugButton(e) {
        fM = e;
      }
    });
    let vM = {
      title: "title_Xkf",
      children: "children_HxX"
    };
    X.add("game-ui/debug/widgets/container/container.module.scss", {
      get classes() {
        return vM;
      },
      set classes(e) {
        Object.assign(vM, e);
      }
    });
    var bM = ({
      parent: e,
      path: t,
      children: n,
      props: s
    }) => {
      const i = sM(e, t);
      0;
      const a = Y.useContext(hM);
      0;
      0;
      0;
      return z.jsx(TM, {
        title: z.jsx(hu, {
          value: s.displayName
        }),
        children: z.jsx(mM, {
          parent: i,
          components: a,
          data: n
        })
      });
    };
    var TM = ({
      title: e,
      children: t
    }) => (0, z.jsxs)("div", {
      className: vM.container,
      children: [e && (0, z.jsx)("div", {
        className: vM.title,
        children: e
      }), (0, z.jsx)("div", {
        className: vM.children,
        children: t
      })]
    });
    X.add("game-ui/debug/widgets/container/container.tsx", {
      get BoundContainer() {
        return bM;
      },
      set BoundContainer(e) {
        bM = e;
      },
      get Container() {
        return TM;
      },
      set Container(e) {
        TM = e;
      }
    });
    let EM = {
      button: "button__Wn",
      value: "value_fMT"
    };
    X.add("game-ui/debug/widgets/fields/arrow-control/arrow-control.module.scss", {
      get classes() {
        return EM;
      },
      set classes(e) {
        Object.assign(EM, e);
      }
    });
    var yM = ({
      onSelectLeft: e,
      onSelectRight: t,
      children: n
    }) => {
      0;
      const s = Y.useRef(false);
      0;
      const [i, a] = Y.useState(false);
      0;
      Y.useEffect(() => {
        if (!i) {
          s.current = false;
        }
      }, [i]);
      0;
      const o = Y.useMemo(() => ({
        "Debug Change Field": n => {
          if (n < 0) {
            e(s.current);
          } else {
            t(s.current);
          }
        },
        "Debug Multiplier": e => {
          s.current = e > 0;
        }
      }), [e, t]);
      0;
      const r = Y.useCallback(() => e(s.current), [e]);
      0;
      const l = Y.useCallback(() => t(s.current), [t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: a,
        children: z.jsxs(Lg, {
          actions: o,
          children: [z.jsx(L_, {
            focusKey: Eg,
            className: EM.button,
            onSelect: r,
            children: "<"
          }), z.jsx(Ep, {
            className: EM.value,
            children: n
          }), z.jsx(L_, {
            focusKey: Eg,
            className: EM.button,
            onSelect: l,
            children: ">"
          })]
        })
      });
    };
    X.add("game-ui/debug/widgets/fields/arrow-control/arrow-control.tsx", {
      get ArrowControl() {
        return yM;
      },
      set ArrowControl(e) {
        yM = e;
      }
    });
    let SM = {
      field: "field_vGA",
      label: "label_KyX",
      control: "control_b3l",
      icon: "icon_vAF"
    };
    X.add("game-ui/debug/widgets/fields/field-layout/field-layout.module.scss", {
      get classes() {
        return SM;
      },
      set classes(e) {
        Object.assign(SM, e);
      }
    });
    var CM = ({
      label: e,
      children: t
    }) => (0, z.jsxs)(Ep, {
      className: SM.field,
      children: [(0, z.jsx)("div", {
        className: SM.label,
        children: e || " "
      }), (0, z.jsx)("div", {
        className: SM.control,
        children: t
      })]
    });
    X.add("game-ui/debug/widgets/fields/field-layout/field-layout.tsx", {
      get FieldLayout() {
        return CM;
      },
      set FieldLayout(e) {
        CM = e;
      }
    });
    var NM = ({
      label: e,
      value: t,
      min: n,
      max: s,
      step: i = 1,
      stepMultiplier: a = 10,
      onChange: o
    }) => {
      0;
      const r = Y.useCallback(e => {
        let r = t - (e ? a : i);
        if (null != n) {
          r = Math.max(n, r);
        }
        if (null != s) {
          r = Math.min(r, s);
        }
        if (r !== t) {
          o(r);
        }
      }, [i, a, s, n, o, t]);
      0;
      const l = Y.useCallback(e => {
        let r = t + (e ? a : i);
        if (null != n) {
          r = Math.max(n, r);
        }
        if (null != s) {
          r = Math.min(r, s);
        }
        if (r !== t) {
          o(r);
        }
      }, [i, a, s, n, o, t]);
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(yM, {
          onSelectLeft: r,
          onSelectRight: l,
          children: `${t}`
        })
      });
    };
    var wM = ({
      label: e,
      value: t,
      min: n,
      max: s,
      step: i = 1,
      stepMultiplier: a = 10,
      fractionDigits: o = 0,
      onChange: r
    }) => {
      0;
      const l = Y.useCallback(e => {
        let o = t - (e ? a : i);
        if (null != n) {
          o = Math.max(n, o);
        }
        if (null != s) {
          o = Math.min(o, s);
        }
        if (o !== t) {
          r(o);
        }
      }, [i, a, s, n, r, t]);
      0;
      const c = Y.useCallback(e => {
        let o = t + (e ? a : i);
        if (null != n) {
          o = Math.max(n, o);
        }
        if (null != s) {
          o = Math.min(o, s);
        }
        if (o !== t) {
          r(o);
        }
      }, [i, a, s, n, r, t]);
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(yM, {
          onSelectLeft: l,
          onSelectRight: c,
          children: `${t.toFixed(o)}`
        })
      });
    };
    X.add("game-ui/debug/widgets/fields/arrow-field.tsx", {
      get IntArrowField() {
        return NM;
      },
      set IntArrowField(e) {
        NM = e;
      },
      get FloatArrowField() {
        return wM;
      },
      set FloatArrowField(e) {
        wM = e;
      }
    });
    let OM = {
      "foldout-button": "foldout-button_Ugi",
      foldoutButton: "foldout-button_Ugi",
      arrow: "arrow_wFy",
      expanded: "expanded_S2V",
      label: "label_qS_",
      value: "value_ypy"
    };
    X.add("game-ui/debug/widgets/foldout/foldout.module.scss", {
      get classes() {
        return OM;
      },
      set classes(e) {
        Object.assign(OM, e);
      }
    });
    var LM = ({
      parent: e,
      path: t,
      children: n,
      props: s
    }) => {
      const i = sM(e, t);
      0;
      const a = Y.useContext(hM);
      const o = PA(GA, i);
      0;
      0;
      0;
      return z.jsx(AM, {
        title: z.jsx(hu, {
          value: s.displayName
        }),
        opened: s.expanded,
        onOpenedChange: o,
        children: z.jsx(mM, {
          parent: i,
          components: a,
          data: n
        })
      });
    };
    var AM = ({
      title: e,
      value: t,
      opened: n,
      children: s,
      onOpenedChange: i
    }) => {
      0;
      const a = Y.useCallback(() => i(!n), [i, n]);
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(L_, {
          onSelect: a,
          className: Qu()(OM.foldoutButton, n && OM.expanded),
          children: [z.jsx("div", {
            className: OM.arrow
          }), z.jsx("div", {
            className: OM.label,
            children: e
          }), t && (0, z.jsx)("div", {
            className: OM.value,
            children: t
          })]
        }), n && (0, z.jsx)(TM, {
          title: null,
          children: s
        })]
      });
    };
    var MM = ({
      title: e,
      value: t,
      children: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      return z.jsx(AM, {
        title: e,
        value: t,
        opened: s,
        onOpenedChange: i,
        children: n
      });
    };
    X.add("game-ui/debug/widgets/foldout/foldout.tsx", {
      get BoundFoldout() {
        return LM;
      },
      set BoundFoldout(e) {
        LM = e;
      },
      get Foldout() {
        return AM;
      },
      set Foldout(e) {
        AM = e;
      },
      get StatefulFoldout() {
        return MM;
      },
      set StatefulFoldout(e) {
        MM = e;
      }
    });
    let RM = {
      slider: "slider_pUS",
      "track-bounds": "track-bounds_H8_",
      trackBounds: "track-bounds_H8_",
      "range-bounds": "range-bounds_lNt",
      rangeBounds: "range-bounds_lNt",
      range: "range_iUN",
      "thumb-container": "thumb-container_aso",
      thumbContainer: "thumb-container_aso",
      hint: "hint_oU0",
      wrapper: "wrapper_TUT"
    };
    X.add("game-ui/common/input/slider/slider.module.scss", {
      get classes() {
        return RM;
      },
      set classes(e) {
        Object.assign(RM, e);
      }
    });
    let DM = {
      slider: "slider_g0V slider_pUS",
      compact: "compact_pTl",
      thumb: "thumb_WZt",
      range: "range_K3G range_iUN"
    };
    X.add("game-ui/common/input/slider/themes/default.module.scss", {
      get classes() {
        return DM;
      },
      set classes(e) {
        Object.assign(DM, e);
      }
    });
    var UM = {
      dragStart: op.grabSlider,
      drag: op.dragSlider
    };
    var BM = {
      dragStart: op.grabSlider,
      drag: op.dragSlider,
      scaleDragVolume: true
    };
    var GM = Y.forwardRef(function ({
      focusKey: e,
      debugName: t = "Slider",
      value: n,
      start: s,
      end: i,
      gamepadStep: a,
      disabled: o,
      vertical: r = false,
      sounds: l = UM,
      thumb: c,
      theme: u = DM,
      className: d,
      style: m,
      children: h,
      noFill: g,
      hideHint: p = false,
      showHint: f = false,
      valueTransformer: x = VM,
      onChange: v,
      onDragStart: _,
      onDragEnd: b,
      onMouseOver: T,
      onMouseLeave: E
    }, I) {
      0;
      const y = Nh(Y.useContext(Zu));
      0;
      const S = Y.useMemo(() => ({
        ...RM,
        ...u
      }), [u]);
      const j = c ?? (S.thumb ? (0, z.jsx)("div", {
        className: S.thumb
      }) : undefined);
      0;
      const C = Y.useRef(null);
      const N = hd(I, C);
      const w = mp(yg(e ?? (o ? Eg : Ig), t), C);
      const O = Nh(w);
      const P = km();
      const L = i - s;
      const A = 0 !== L ? (n - s) / L : 0;
      const M = 0 !== L ? null != a && a > 0 ? a / L : .05 : 0;
      0;
      const R = Y.useMemo(() => ({
        "Change Slider Value": null != v ? e => {
          if (0 !== e) {
            if (s > i) {
              e *= -1;
            }
            const t = x(s, i, A + e * M);
            if (t !== n && C.current) {
              v(t);
              rp(l?.drag, l?.scaleDragVolume && 0 !== L ? (n - s) / L : 1);
            }
          }
        } : null
      }), [v, x, s, i, A, M, n, l?.drag, l?.scaleDragVolume, L]);
      0;
      const k = Y.useRef(null);
      0;
      const D = Y.useRef(0);
      0;
      const F = Y.useCallback(({
        clientX: e,
        clientY: t
      }) => {
        if (o || !k.current) {
          return false;
        }
        if (document.activeElement instanceof HTMLElement) {
          document.activeElement.blur();
        }
        rp(l?.dragStart);
        if (_) {
          _();
        }
        if (v) {
          const a = x(s, i, WM(k.current, e, t, D.current, r));
          if (a !== n) {
            v(a);
          }
        }
        return true;
      }, [o, i, v, _, s, l?.dragStart, n, x, r]);
      0;
      const U = Y.useCallback(({
        clientX: e,
        clientY: t
      }) => {
        if (o || !v || !k.current) {
          return;
        }
        const a = x(s, i, WM(k.current, e, t, D.current, r));
        if (a !== n) {
          v(a);
          rp(l?.drag, l?.scaleDragVolume && 0 !== L ? (n - s) / L : 1);
        }
      }, [o, v, x, s, i, r, n, l?.drag, l?.scaleDragVolume, L]);
      0;
      const B = Y.useCallback(() => {
        D.current = 0;
        if (b) {
          b();
        }
      }, [b]);
      const [G, V] = eb(F, U, B);
      0;
      const H = Y.useCallback(e => {
        if (k.current) {
          if (r) {
            const {
              top: t,
              height: n
            } = k.current.getBoundingClientRect();
            const s = t + n * (1 - A);
            D.current = e.clientY - s;
          } else {
            const {
              left: t,
              width: n
            } = k.current.getBoundingClientRect();
            const s = t + n * A;
            D.current = e.clientX - s;
          }
        }
      }, [A, r]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(RM.wrapper, d),
        children: [z.jsx(LT, {
          action: O ? "Change Slider Value" : y && f && !p ? "Select" : undefined,
          active: !p,
          className: RM.hint
        }), z.jsx(Lg, {
          actions: R,
          disabled: o,
          children: z.jsx(Ph, {
            controller: w,
            children: z.jsxs("div", {
              ref: N,
              className: Qu()(S.slider, r ? "vertical" : "horizontal", o && "disabled", O && P && "focused", G && "dragging"),
              style: m,
              onMouseDown: o ? undefined : V,
              children: [h, z.jsx("div", {
                ref: k,
                className: S.trackBounds,
                onMouseOver: T,
                onMouseLeave: E,
                children: z.jsxs("div", {
                  className: S.rangeBounds,
                  style: {
                    [r ? "height" : "width"]: `${100 * wd(A, 0, 1) || 0}%`
                  },
                  children: [!g && (0, z.jsx)("div", {
                    className: S.range
                  }), j && (0, z.jsx)("div", {
                    className: S.thumbContainer,
                    onClick: o ? undefined : Ob,
                    onMouseDown: o ? undefined : H,
                    onMouseOver: T,
                    onMouseLeave: E,
                    children: j
                  })]
                })
              })]
            })
          })
        }), z.jsx(LT, {
          action: "Back",
          active: !p && O && f,
          className: RM.hint
        })]
      });
    });
    function VM(e, t, n) {
      return wd(e + n * (t - e), Math.min(e, t), Math.max(e, t));
    }
    function HM(e, t, n) {
      return wd(Math.round(e + n * (t - e)), Math.min(e, t), Math.max(e, t));
    }
    function KM(e) {
      0;
      return Y.useCallback((t, n, s) => wd(t + Math.round(s * (n - t) / e) * e, Math.min(t, n), Math.max(t, n)), [e]);
    }
    function WM(e, t, n, s, i) {
      const {
        top: a,
        left: o,
        width: r,
        height: l
      } = e.getBoundingClientRect();
      return i ? (l - (n - a - s)) / l : (t - o - s) / r;
    }
    X.add("game-ui/common/input/slider/slider.tsx", {
      get defaultSliderSounds() {
        return UM;
      },
      set defaultSliderSounds(e) {
        UM = e;
      },
      get volumeSliderSounds() {
        return BM;
      },
      set volumeSliderSounds(e) {
        BM = e;
      },
      get Slider() {
        return GM;
      },
      set Slider(e) {
        GM = e;
      },
      get intTransformer() {
        return HM;
      },
      set intTransformer(e) {
        HM = e;
      },
      get useStepTransformer() {
        return KM;
      },
      set useStepTransformer(e) {
        KM = e;
      }
    });
    let zM = {
      slider: "slider_HvX slider_pUS",
      value: "value_Ob7",
      range: "range_LNR range_iUN"
    };
    X.add("game-ui/debug/themes/slider.module.scss", {
      get classes() {
        return zM;
      },
      set classes(e) {
        Object.assign(zM, e);
      }
    });
    var $M = ({
      label: e,
      value: t,
      min: n,
      max: s,
      step: i = 1,
      onChange: a
    }) => {
      const o = KM(i);
      0;
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(GM, {
          value: t,
          start: n,
          end: s,
          valueTransformer: o,
          theme: zM,
          onChange: a,
          children: z.jsx("div", {
            className: zM.value,
            children: `${t}`
          })
        })
      });
    };
    var qM = ({
      label: e,
      value: t,
      min: n,
      max: s,
      step: i,
      fractionDigits: a,
      onChange: o
    }) => {
      const r = KM(i || 1);
      0;
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(GM, {
          value: t,
          start: n,
          end: s,
          valueTransformer: r,
          theme: zM,
          onChange: o,
          children: z.jsx("div", {
            className: zM.value,
            children: `${t.toFixed(a)}`
          })
        })
      });
    };
    var XM = ({
      label: e,
      value: t,
      step: n,
      fractionDigits: s,
      min: i,
      max: a,
      onChange: o
    }) => {
      0;
      const r = Y.useCallback(e => o({
        ...t,
        x: e
      }), [o, t]);
      0;
      const l = Y.useCallback(e => o({
        ...t,
        y: e
      }), [o, t]);
      0;
      0;
      0;
      return z.jsxs(MM, {
        title: e,
        value: Wd(t, s ?? 1),
        children: [z.jsx(qM, {
          label: "X",
          value: t.x,
          min: i,
          max: a,
          onChange: r,
          step: n,
          fractionDigits: s
        }), z.jsx(qM, {
          label: "Y",
          value: t.y,
          min: i,
          max: a,
          onChange: l,
          step: n,
          fractionDigits: s
        })]
      });
    };
    var QM = ({
      label: e,
      value: t,
      step: n,
      fractionDigits: s,
      min: i,
      max: a,
      onChange: o
    }) => {
      0;
      const r = Y.useCallback(e => o({
        ...t,
        x: e
      }), [o, t]);
      0;
      const l = Y.useCallback(e => o({
        ...t,
        y: e
      }), [o, t]);
      0;
      const c = Y.useCallback(e => o({
        ...t,
        z: e
      }), [o, t]);
      0;
      0;
      0;
      0;
      return z.jsxs(MM, {
        title: e,
        value: qd(t, s ?? 1),
        children: [z.jsx(qM, {
          label: "X",
          value: t.x,
          min: i,
          max: a,
          onChange: r,
          step: n,
          fractionDigits: s
        }), z.jsx(qM, {
          label: "Y",
          value: t.y,
          min: i,
          max: a,
          onChange: l,
          step: n,
          fractionDigits: s
        }), z.jsx(qM, {
          label: "Z",
          value: t.z,
          min: i,
          max: a,
          onChange: c,
          step: n,
          fractionDigits: s
        })]
      });
    };
    var ZM = ({
      label: e,
      value: t,
      step: n,
      fractionDigits: s,
      min: i,
      max: a,
      onChange: o
    }) => {
      0;
      const r = Y.useCallback(e => o({
        ...t,
        x: e
      }), [o, t]);
      0;
      const l = Y.useCallback(e => o({
        ...t,
        y: e
      }), [o, t]);
      0;
      const c = Y.useCallback(e => o({
        ...t,
        z: e
      }), [o, t]);
      0;
      const u = Y.useCallback(e => o({
        ...t,
        w: e
      }), [o, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(MM, {
        title: e,
        value: Zd(t, s ?? 1),
        children: [z.jsx(qM, {
          label: "X",
          value: t.x,
          min: i,
          max: a,
          onChange: r,
          step: n,
          fractionDigits: s
        }), z.jsx(qM, {
          label: "Y",
          value: t.y,
          min: i,
          max: a,
          onChange: l,
          step: n,
          fractionDigits: s
        }), z.jsx(qM, {
          label: "Z",
          value: t.z,
          min: i,
          max: a,
          onChange: c,
          step: n,
          fractionDigits: s
        }), z.jsx(qM, {
          label: "W",
          value: t.w,
          min: i,
          max: a,
          onChange: u,
          step: n,
          fractionDigits: s
        })]
      });
    };
    X.add("game-ui/debug/widgets/fields/slider-field.tsx", {
      get IntSliderField() {
        return $M;
      },
      set IntSliderField(e) {
        $M = e;
      },
      get FloatSliderField() {
        return qM;
      },
      set FloatSliderField(e) {
        qM = e;
      },
      get Float2SliderField() {
        return XM;
      },
      set Float2SliderField(e) {
        XM = e;
      },
      get Float3SliderField() {
        return QM;
      },
      set Float3SliderField(e) {
        QM = e;
      },
      get Float4SliderField() {
        return ZM;
      },
      set Float4SliderField(e) {
        ZM = e;
      }
    });
    let JM = {
      "swatch-title": "swatch-title_d15",
      swatchTitle: "swatch-title_d15",
      "swatch-alpha": "swatch-alpha_MYB",
      swatchAlpha: "swatch-alpha_MYB",
      swatch: "swatch_OaZ",
      label: "label_FVu"
    };
    X.add("game-ui/debug/widgets/fields/color-field/color-field.module.scss", {
      get classes() {
        return JM;
      },
      set classes(e) {
        Object.assign(JM, e);
      }
    });
    var tR = ({
      label: e,
      value: t,
      showAlpha: n,
      onChange: s
    }) => {
      0;
      const i = Y.useCallback(e => s({
        ...t,
        r: e
      }), [s, t]);
      0;
      const a = Y.useCallback(e => s({
        ...t,
        g: e
      }), [s, t]);
      0;
      const o = Y.useCallback(e => s({
        ...t,
        b: e
      }), [s, t]);
      0;
      const r = Y.useCallback(e => s({
        ...t,
        a: e
      }), [s, t]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(MM, {
        title: z.jsxs("div", {
          className: JM.swatchTitle,
          children: [z.jsx("div", {
            className: JM.swatchAlpha,
            children: z.jsx("div", {
              className: JM.swatch,
              style: {
                backgroundColor: tN(t)
              }
            })
          }), z.jsx("div", {
            className: JM.label,
            children: e
          })]
        }),
        children: [z.jsx(qM, {
          label: "Red",
          value: t.r,
          onChange: i,
          min: 0,
          max: 1,
          step: .001,
          fractionDigits: 3
        }), z.jsx(qM, {
          label: "Green",
          value: t.g,
          onChange: a,
          min: 0,
          max: 1,
          step: .001,
          fractionDigits: 3
        }), z.jsx(qM, {
          label: "Blue",
          value: t.b,
          onChange: o,
          min: 0,
          max: 1,
          step: .001,
          fractionDigits: 3
        }), n && (0, z.jsx)(qM, {
          label: "Alpha",
          value: t.a,
          onChange: r,
          min: 0,
          max: 1,
          step: .001,
          fractionDigits: 3
        })]
      });
    };
    X.add("game-ui/debug/widgets/fields/color-field/color-field.tsx", {
      get ColorField() {
        return tR;
      },
      set ColorField(e) {
        tR = e;
      }
    });
    let nR = {
      toggle: "toggle_x2y"
    };
    X.add("game-ui/debug/widgets/fields/toggle-field/toggle-field.module.scss", {
      get classes() {
        return nR;
      },
      set classes(e) {
        Object.assign(nR, e);
      }
    });
    var iR = ({
      label: e,
      value: t,
      onChange: n
    }) => (0, z.jsx)(CM, {
      label: e,
      children: (0, z.jsx)(kb, {
        checked: t,
        className: nR.toggle,
        onChange: n
      })
    });
    X.add("game-ui/debug/widgets/fields/toggle-field/toggle-field.tsx", {
      get ToggleField() {
        return iR;
      },
      set ToggleField(e) {
        iR = e;
      }
    });
    var aR = ({
      label: e,
      value: t,
      enumMembers: n,
      onChange: s
    }) => {
      0;
      const i = Y.useMemo(() => n.findIndex(e => om(e.value, t)), [n, t]);
      0;
      const a = Y.useCallback(() => {
        const e = ow(n, i, true);
        if (null != e) {
          s(e.value);
        }
      }, [n, s, i]);
      0;
      const o = Y.useCallback(() => {
        const e = iw(n, i, true);
        if (null != e) {
          s(e.value);
        }
      }, [n, s, i]);
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(yM, {
          onSelectLeft: a,
          onSelectRight: o,
          children: -1 !== i ? (0, z.jsx)(hu, {
            value: n[i].displayName
          }) : `${i}`
        })
      });
    };
    var oR = ({
      label: e,
      value: t,
      enumMembers: n,
      onChange: s
    }) => {
      0;
      const i = Y.useCallback((e, n) => {
        s(lm(n ? rm(t) | rm(e.value) : rm(t) & ~rm(e.value)));
      }, [s, t]);
      0;
      return z.jsx(MM, {
        title: e,
        children: n.filter(e => !om(e.value, am)).map((e, n) => (0, z.jsx)(rR, {
          enumMember: e,
          checked: (rm(t) & rm(e.value)) === rm(e.value),
          onChange: i
        }, n))
      });
    };
    const rR = ({
      enumMember: e,
      checked: t,
      onChange: n
    }) => {
      0;
      const s = Y.useCallback(t => n(e, t), [e, n]);
      0;
      0;
      return z.jsx(iR, {
        label: z.jsx(hu, {
          value: e.displayName
        }),
        value: t,
        onChange: s
      });
    };
    X.add("game-ui/debug/widgets/fields/enum-field.tsx", {
      get EnumField() {
        return aR;
      },
      set EnumField(e) {
        aR = e;
      },
      get BitField() {
        return oR;
      },
      set BitField(e) {
        oR = e;
      }
    });
    let lR = {
      "text-input": "text-input_Y20",
      textInput: "text-input_Y20"
    };
    X.add("game-ui/debug/widgets/fields/input-field/input-field.module.scss", {
      get classes() {
        return lR;
      },
      set classes(e) {
        Object.assign(lR, e);
      }
    });
    var uR = ({
      label: e,
      value: t,
      onChange: n
    }) => {
      0;
      const [s, i] = Y.useState(t);
      0;
      Y.useEffect(() => i(t), [t]);
      0;
      const a = Y.useCallback(() => {
        n(s);
      }, [n, s]);
      0;
      const o = Y.useCallback(e => {
        i(e.target.value);
      }, []);
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(zE, {
          value: s,
          className: lR.textInput,
          onChange: o,
          onBlur: a
        })
      });
    };
    var dR = ({
      label: e,
      value: t,
      onChange: n
    }) => {
      0;
      const [s, i] = Y.useState(t.toString());
      0;
      Y.useEffect(() => i(t.toString()), [t]);
      0;
      const a = Y.useCallback(() => {
        const e = Number(s);
        if (!isNaN(e)) {
          n(e);
        }
      }, [n, s]);
      0;
      const o = Y.useCallback(e => {
        if (!("" !== e.target.value && isNaN(Number(e.target.value)))) {
          i(e.target.value);
        }
      }, []);
      0;
      0;
      return z.jsx(CM, {
        label: e,
        children: z.jsx(zE, {
          value: s,
          className: lR.textInput,
          onChange: o,
          onBlur: a
        })
      });
    };
    X.add("game-ui/debug/widgets/fields/input-field/input-field.tsx", {
      get StringInputField() {
        return uR;
      },
      set StringInputField(e) {
        uR = e;
      },
      get IntInputField() {
        return dR;
      },
      set IntInputField(e) {
        dR = e;
      }
    });
    var mR = ({
      props: e
    }) => (0, z.jsx)(CM, {
      label: (0, z.jsx)(hu, {
        value: e.displayName
      }),
      children: e.value
    });
    X.add("game-ui/debug/widgets/fields/value-field.tsx", {
      get BoundValueField() {
        return mR;
      },
      set BoundValueField(e) {
        mR = e;
      }
    });
    let hR = {
      image: "image_BEo"
    };
    X.add("game-ui/debug/widgets/image/image.module.scss", {
      get classes() {
        return hR;
      },
      set classes(e) {
        Object.assign(hR, e);
      }
    });
    var pR = ({
      props: e
    }) => (0, z.jsx)(CM, {
      label: (0, z.jsx)(hu, {
        value: e.displayName
      }),
      children: (0, z.jsx)("img", {
        src: e.uri,
        className: hR.image
      })
    });
    X.add("game-ui/debug/widgets/image/image.tsx", {
      get BoundImage() {
        return pR;
      },
      set BoundImage(e) {
        pR = e;
      }
    });
    var fR = ({
      parent: e,
      data: t
    }) => (0, z.jsx)(mM, {
      parent: e,
      components: xR,
      data: t
    });
    var xR = {
      [AA.Group]: bM,
      [AA.ExpandableGroup]: LM,
      [AA.Button]: fM,
      [AA.ValueField]: mR,
      [AA.ToggleField]: vR(iR),
      [AA.IntSliderField]: vR($M),
      [LA.IntArrowField]: vR(NM),
      [AA.IntInputField]: vR(dR),
      [AA.UIntSliderField]: vR($M),
      [LA.UIntArrowField]: vR(NM),
      [AA.FloatSliderField]: vR(qM),
      [LA.FloatArrowField]: vR(wM),
      [AA.Float2SliderField]: vR(XM),
      [AA.Float3SliderField]: vR(QM),
      [AA.Float4SliderField]: vR(ZM),
      [AA.EnumField]: vR(aR),
      [AA.FlagsField]: vR(oR),
      [AA.ColorField]: vR(tR),
      [AA.StringInputField]: vR(uR),
      [LA.Image]: pR
    };
    function vR(e) {
      const t = ({
        parent: t,
        path: n,
        props: s
      }) => {
        const i = PA(BA, sM(t, n));
        0;
        0;
        return z.jsx(e, {
          ...s,
          label: z.jsx(hu, {
            value: s.displayName
          }),
          onChange: i
        });
      };
      t.displayName = e.displayName ?? e.name;
      return t;
    }
    X.add("game-ui/debug/widgets/debug-widget-renderer.tsx", {
      get DebugWidgetListRenderer() {
        return fR;
      },
      set DebugWidgetListRenderer(e) {
        fR = e;
      },
      get debugWidgetComponents() {
        return xR;
      },
      set debugWidgetComponents(e) {
        xR = e;
      }
    });
    let _R = {
      title: "title_f1a",
      value: "value_bvH"
    };
    X.add("game-ui/debug/components/debug-binding-output/debug-binding-output.module.scss", {
      get classes() {
        return _R;
      },
      set classes(e) {
        Object.assign(_R, e);
      }
    });
    var TR = ({
      binding: e,
      className: t
    }) => {
      0;
      const [n, s] = Y.useState(0);
      0;
      const [i, a] = Y.useState("");
      0;
      Y.useEffect(() => {
        const t = e => {
          a(JSON.stringify(e, null, 2));
          s(e => e + 1);
        };
        if (e.debugType === mA.Event) {
          const n = Zr(e.group, e.name);
          const s = n.subscribe(t);
          return () => {
            s.dispose();
            n.dispose();
          };
        }
        if (e.debugType === mA.Value) {
          const n = $r(e.group, e.name, "undefined");
          const i = n.subscribe();
          a(JSON.stringify(i.value, null, 2));
          s(0);
          i.setChangeListener(t);
          return () => {
            i.dispose();
            n.dispose();
          };
        }
      }, [e.group, e.name, e.debugType]);
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(_R.debugBindingOutput, t),
        children: [z.jsx("div", {
          className: _R.title,
          children: `${e.group}.${e.name}, Update Count: ${n}`
        }), z.jsx("div", {
          className: _R.value,
          children: i
        })]
      });
    };
    X.add("game-ui/debug/components/debug-binding-output/debug-binding-output.tsx", {
      get DebugBindingOutput() {
        return TR;
      },
      set DebugBindingOutput(e) {
        TR = e;
      }
    });
    let ER = {
      "fps-display": "fps-display_t30",
      fpsDisplay: "fps-display_t30",
      value: "value_vNu",
      graph: "graph_EEa"
    };
    X.add("game-ui/debug/components/fps-display/fps-display.module.scss", {
      get classes() {
        return ER;
      },
      set classes(e) {
        Object.assign(ER, e);
      }
    });
    var yR = () => {
      switch (sl(_E)) {
        case mE.Simple:
          0;
          return z.jsx(SR, {});
        case mE.Advanced:
          0;
          return z.jsx(NR, {});
        case mE.Precise:
          0;
          return z.jsx(wR, {});
        default:
          return null;
      }
    };
    const SR = () => {
      const e = sl(bE);
      0;
      0;
      return z.jsx("div", {
        className: ER.fpsDisplay,
        children: z.jsx("div", {
          className: ER.value,
          children: `${e.fps.toFixed(0).padStart(3, " ")} FPS`
        })
      });
    };
    const NR = () => {
      const e = sl(bE);
      const t = e.fps > 0 ? 1e3 / e.fps : 0;
      const n = al(bE);
      0;
      const s = Y.useRef(null);
      0;
      Y.useEffect(() => {
        const e = new Array(250);
        let t = e.length - 1;
        let i = 30;
        for (let t = 0; t < e.length; t++) {
          e[t] = 0;
        }
        let a = 0;
        (function o() {
          t = (t + 1) % e.length;
          e[t] = n.current.fps;
          i = Math.max(n.current.fps, i);
          const r = s.current?.getContext("2d");
          if (null != r) {
            r.fillStyle = "rgb(0, 0, 0)";
            r.fillRect(0, 0, r.canvas.width, r.canvas.height);
            for (let n = 0; n < e.length; n++) {
              const s = e[(e.length + t - n) % e.length];
              const a = s / i * 50;
              r.fillStyle = tN(RR(s));
              r.fillRect(250 - n - 1, 50 - a, 1, a);
            }
          }
          a = window.requestAnimationFrame(o);
        })();
        return () => window.cancelAnimationFrame(a);
      }, [n]);
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsxs("div", {
          className: ER.fpsDisplay,
          children: [z.jsx("canvas", {
            ref: s,
            className: ER.graph,
            width: 250,
            height: 50
          }), z.jsxs("div", {
            className: ER.value,
            children: [`Frame: ${t.toFixed(2).padStart(7, " ")}ms`, `${e.fps.toFixed(2)} FPS`]
          })]
        })
      });
    };
    const wR = () => {
      const e = sl(bE);
      const t = al(bE);
      0;
      const n = Y.useRef(null);
      0;
      Y.useEffect(() => {
        const e = new Array(250);
        let s = e.length - 1;
        let i = 30;
        for (let t = 0; t < e.length; t++) {
          e[t] = 0;
        }
        let a = 0;
        (function o() {
          s = (s + 1) % e.length;
          e[s] = t.current.fps;
          i = Math.max(t.current.fps, i);
          const r = n.current?.getContext("2d");
          if (null != r) {
            r.fillStyle = "rgb(0, 0, 0)";
            r.fillRect(0, 0, r.canvas.width, r.canvas.height);
            for (let t = 0; t < e.length; t++) {
              const n = e[(e.length + s - t) % e.length];
              const a = n / i * 50;
              r.fillStyle = tN(RR(n));
              r.fillRect(250 - t - 1, 50 - a, 1, a);
            }
          }
          a = window.requestAnimationFrame(o);
        })();
        return () => window.cancelAnimationFrame(a);
      }, [t]);
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsxs("div", {
          className: ER.fpsDisplay,
          children: [z.jsx("canvas", {
            ref: n,
            className: ER.graph,
            width: 250,
            height: 50
          }), z.jsxs("div", {
            className: ER.value,
            children: [`CPU Main: ${e.cpuMainThreadTime.toFixed(2).padStart(5, " ")}ms    Render: ${e.cpuRenderThreadTime.toFixed(2).padStart(5, " ")}ms`, `GPU: ${e.gpuTime.toFixed(2).padStart(5, " ")}ms     Total: ${e.fullFameTime.toFixed(2).padStart(5, " ")}ms`, `${e.fps.toFixed(2)} FPS`]
          })]
        })
      });
    };
    const LR = {
      r: 0,
      g: 1,
      b: 0,
      a: 1
    };
    const AR = {
      r: 1,
      g: 1,
      b: 0,
      a: 1
    };
    const MR = {
      r: 1,
      g: 0,
      b: 0,
      a: 1
    };
    function RR(e) {
      const t = wd((e - 4) / 16, 0, 1);
      return t < .5 ? lN(MR, AR, 2 * t) : lN(AR, LR, 2 * t - 1);
    }
    X.add("game-ui/debug/components/fps-display/fps-display.tsx", {
      get FpsDisplay() {
        return yR;
      },
      set FpsDisplay(e) {
        yR = e;
      }
    });
    let kR = {
      "color-legend": "color-legend_Bzi",
      colorLegend: "color-legend_Bzi",
      symbol: "symbol_aAH",
      value: "value_rfe"
    };
    X.add("game-ui/common/charts/legends/color-legend.module.scss", {
      get classes() {
        return kR;
      },
      set classes(e) {
        Object.assign(kR, e);
      }
    });
    var FR = ({
      color: e,
      label: t,
      className: n,
      children: s
    }) => (0, z.jsxs)("div", {
      className: Qu()(kR.colorLegend, n),
      children: [(0, z.jsx)(UR, {
        color: e
      }), (0, z.jsx)("div", {
        className: kR.label,
        children: t
      }), Y.Children.count(s) > 0 && (0, z.jsx)("div", {
        className: kR.value,
        children: s
      })]
    });
    var UR = ({
      color: e,
      className: t
    }) => (0, z.jsx)("div", {
      className: Qu()(kR.symbol, t),
      style: {
        backgroundColor: e
      }
    });
    function BR({
      type: e,
      data: t,
      options: n,
      mergeCallback: s = VR,
      ...i
    }) {
      0;
      const a = Y.useRef(null);
      0;
      const o = Y.useRef(null);
      0;
      const r = Y.useRef(null);
      const l = mm(r) ?? Ld;
      const c = l.x > 0 && l.y > 0;
      const u = Vm();
      0;
      const d = Y.useCallback(e => {
        e.canvas.style.width = 100 * Math.trunc(l.x) / l.x + "%";
        e.canvas.style.height = 100 * Math.trunc(l.y) / l.y + "%";
      }, [l]);
      0;
      const m = Y.useMemo(() => ({
        ...n,
        responsive: false,
        maintainAspectRatio: false,
        devicePixelRatio: u,
        onResize: d
      }), [u, d, n]);
      0;
      Y.useEffect(() => {
        if (c) {
          if (null != o.current) {
            if (!(o.current.canvas === a.current && o.current.config.type === e)) {
              o.current.destroy();
              o.current = null;
            }
          }
          if (null == o.current) {
            if (null == a.current) {
              return;
            }
            const n = {
              datasets: []
            };
            GR(n, t, s);
            o.current = new wa(a.current, {
              type: e,
              data: n,
              options: m
            });
          } else {
            GR(o.current.data, t, s);
            o.current.options = m;
            o.current.update();
          }
        }
      }, [c, e, t, m, s]);
      0;
      Y.useEffect(() => {
        if (null != o.current && c) {
          o.current.resize(l.x / u, l.y / u);
          o.current.update("none");
          d(o.current);
        }
      }, [c, l, u, d]);
      0;
      Y.useEffect(() => () => {
        if (null != o.current) {
          o.current.destroy();
        }
      }, []);
      0;
      const h = Y.useMemo(() => ({
        width: "300px",
        height: "150px",
        display: "flex"
      }), []);
      0;
      0;
      return z.jsx("div", {
        ref: r,
        ...i,
        children: z.jsx("canvas", {
          ref: a,
          style: h
        })
      });
    }
    function GR(e, t, n) {
      if (t !== e) {
        Object.assign(e, {
          ...t,
          datasets: t.datasets.map(t => {
            const s = e.datasets.find(e => e.label === t.label && e.type === t.type);
            if (null != s) {
              if (t !== s) {
                const e = n(s.data, t.data);
                Object.assign(s, {
                  ...t,
                  mergedData: e
                });
              }
              return s;
            }
            return {
              ...t,
              data: [...t.data]
            };
          })
        });
      }
    }
    function VR(e, t) {
      const n = new Array(t.length);
      Object.assign(n, e, t);
      return n;
    }
    function HR(e, t) {
      let n = 0;
      for (let s = 0; s < t.length; s++) {
        const i = {
          ...t[s]
        };
        let a = 0;
        for (; n < e.length && !(e[n].x > i.x); n++) {
          if (e[n].x !== i.x) {
            a++;
          }
        }
        if (n > 0 && e[n - 1].x === i.x) {
          e[n - 1] = i;
          if (0 !== a) {
            e.splice(n - 1 - a, a);
            n -= a;
          }
        } else {
          e.splice(n - a, a, i);
          n++;
          n -= a;
        }
      }
      const s = e.length - n;
      if (s > 0) {
        e.splice(n, s);
      }
      return e;
    }
    X.add("game-ui/common/charts/legends/color-legend.tsx", {
      get ColorLegend() {
        return FR;
      },
      set ColorLegend(e) {
        FR = e;
      },
      get ColorLegendSymbol() {
        return UR;
      },
      set ColorLegendSymbol(e) {
        UR = e;
      }
    });
    wa.register(Wa, eo, Ya, Qs, ei, ii, nr, or, wo, Zo, Ao);
    wa.defaults.font.family = "Overpass";
    wa.defaults.responsive = false;
    wa.defaults.maintainAspectRatio = false;
    wa.defaults.animation = false;
    wa.defaults.plugins.tooltip.enabled = false;
    wa.defaults.plugins.legend.display = false;
    wa.defaults.events = [];
    wa.defaults.transitions.resize.animation.duration = 0;
    wa.defaults.scales.linear.ticks.callback = e => e.toString();
    X.add("game-ui/common/charts/responsive-chart/responsive-chart.tsx", {
      get ResponsiveChart() {
        return BR;
      },
      set ResponsiveChart(e) {
        BR = e;
      },
      get defaultMergeCallback() {
        return VR;
      },
      set defaultMergeCallback(e) {
        VR = e;
      },
      get xyMergeCallback() {
        return HR;
      },
      set xyMergeCallback(e) {
        HR = e;
      }
    });
    let KR = {
      "watches-output": "watches-output_GMe",
      watchesOutput: "watches-output_GMe",
      chart: "chart_u1n",
      legend: "legend_obt",
      "legend-item": "legend-item_Osn",
      legendItem: "legend-item_Osn"
    };
    X.add("game-ui/debug/components/watches-output/watches-output.module.scss", {
      get classes() {
        return KR;
      },
      set classes(e) {
        Object.assign(KR, e);
      }
    });
    var zR = ({
      watches: e,
      className: t
    }) => {
      const n = e.filter(e => e.__Type === hA.History);
      const s = e.filter(e => e.__Type === hA.Distribution);
      0;
      return z.jsxs("div", {
        className: Qu()(KR.watchesOutput, t),
        children: [n.length > 0 && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(YR, {
            watches: n
          }), (0, z.jsx)("div", {
            className: KR.legend,
            children: n.map((e, t) => (0, z.jsx)(FR, {
              color: e.color,
              label: e.name,
              className: KR.legendItem
            }, t))
          })]
        }), s.length > 0 && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)($R, {
            watches: s
          }), (0, z.jsx)("div", {
            className: KR.legend,
            children: s.map((e, t) => (0, z.jsx)(FR, {
              color: e.color,
              label: e.name,
              className: KR.legendItem
            }, t))
          })]
        })]
      });
    };
    var YR = ({
      watches: e
    }) => {
      0;
      const t = Y.useMemo(() => ({
        datasets: e.map((e, t) => ({
          label: e.name,
          showLine: true,
          data: e.history.filter(e => 0 !== e.x),
          borderColor: e.color
        }))
      }), [e]);
      const n = function () {
        const e = sl(Ml);
        0;
        return Y.useMemo(() => ({
          layout: {
            padding: {
              top: 15,
              right: 30,
              left: 30,
              bottom: 30
            }
          },
          elements: {
            line: {
              tension: 0,
              borderWidth: 2,
              backgroundColor: "transparent"
            },
            point: {
              radius: 0
            }
          },
          scales: {
            x: {
              type: "linear",
              beginAtZero: false,
              grid: {
                display: false
              },
              ticks: {
                display: false
              }
            },
            y: {
              beginAtZero: true,
              ticks: {
                font: {
                  size: 10 * e
                },
                color: "white",
                maxTicksLimit: 10,
                callback: e => _u(e)
              }
            }
          }
        }), [e]);
      }();
      0;
      return z.jsx(BR, {
        type: "scatter",
        data: t,
        options: n,
        className: KR.chart
      });
    };
    var $R = ({
      watches: e
    }) => {
      0;
      const t = Y.useMemo(() => ({
        datasets: e.map((e, t) => ({
          label: e.name,
          showLine: true,
          data: e.buckets.map(e => ({
            x: Od(e.min, e.max, .5),
            y: e.count
          })),
          borderColor: e.color,
          stepped: "middle"
        }))
      }), [e]);
      const n = function () {
        const e = sl(Ml);
        0;
        return Y.useMemo(() => ({
          layout: {
            padding: {
              top: 15,
              right: 30,
              left: 30,
              bottom: 30
            }
          },
          elements: {
            line: {
              tension: 0,
              borderWidth: 2,
              backgroundColor: "transparent"
            },
            point: {
              radius: 0
            }
          },
          scales: {
            x: {
              type: "linear",
              beginAtZero: false,
              ticks: {
                font: {
                  size: 10 * e
                },
                color: "white",
                maxTicksLimit: 25,
                callback: e => _u(e)
              }
            },
            y: {
              beginAtZero: true,
              ticks: {
                font: {
                  size: 10 * e
                },
                color: "white",
                maxTicksLimit: 10,
                callback: e => _u(e)
              }
            }
          }
        }), [e]);
      }();
      0;
      return z.jsx(BR, {
        type: "scatter",
        data: t,
        options: n,
        className: KR.chart
      });
    };
    X.add("game-ui/debug/components/watches-output/watches-output.tsx", {
      get WatchesOutput() {
        return zR;
      },
      set WatchesOutput(e) {
        zR = e;
      },
      get HistoryChart() {
        return YR;
      },
      set HistoryChart(e) {
        YR = e;
      },
      get DistributionChart() {
        return $R;
      },
      set DistributionChart(e) {
        $R = e;
      }
    });
    let qR = {
      debugging: "debugging_dvz",
      "debug-ui": "debug-ui_M_y",
      debugUi: "debug-ui_M_y",
      inspector: "inspector_GbW",
      "output-column": "output-column_py9",
      outputColumn: "output-column_py9",
      output: "output_NHr",
      "tab-bar": "tab-bar_b_c",
      tabBar: "tab-bar_b_c",
      "title-bar": "title-bar_Yno",
      titleBar: "title-bar_Yno",
      title: "title_HzQ",
      scrollable: "scrollable_ivK"
    };
    X.add("game-ui/debug/components/debug-ui.module.scss", {
      get classes() {
        return qR;
      },
      set classes(e) {
        Object.assign(qR, e);
      }
    });
    const QR = new Tg("CHILDREN");
    const ZR = new Tg("DEBUG_UI");
    var JR = ({
      children: e
    }) => {
      const t = sl(gA);
      const n = sl(pA);
      0;
      const s = Y.useMemo(() => ({
        "Debug UI": () => {
          if (n) {
            SA();
          } else {
            yA();
          }
        }
      }), [n]);
      return t ? (0, z.jsx)(Lg, {
        actions: s,
        children: (0, z.jsxs)(ip, {
          focused: n ? ZR : QR,
          children: [(0, z.jsx)(sp, {
            focusKey: QR,
            children: e
          }), (0, z.jsxs)("div", {
            className: qR.debugging,
            children: [n && (0, z.jsx)(ek, {
              focusKey: ZR
            }), (0, z.jsx)(yR, {})]
          })]
        })
      }) : (0, z.jsx)(z.Fragment, {
        children: e
      });
    };
    var ek = ({
      focusKey: e
    }) => {
      const t = sl(fA);
      const n = sl(xA);
      const s = sl(vA);
      const i = sl(_A);
      const a = sl(NO);
      0;
      const o = Y.useMemo(() => ({
        Back: SA,
        "Switch Tab": e => {
          if (e < 0) {
            jA();
          } else {
            NA();
          }
        },
        "Pause Simulation": a ? null : () => {
          rp(op.pauseSimulation);
          PO(true);
        },
        "Resume Simulation": a ? () => {
          rp(op.resumeSimulation);
          PO(false);
        } : null
      }), [a]);
      0;
      Y.useEffect(() => {
        const e = e => {
          if (!e.repeat) {
            if (37 === e.keyCode) {
              jA();
              e.preventDefault();
            } else if (39 === e.keyCode) {
              NA();
              e.preventDefault();
            }
          }
        };
        document.addEventListener("keydown", e);
        return () => document.removeEventListener("keydown", e);
      }, []);
      0;
      Y.useEffect(() => {
        const e = TA.subscribe(e => {
          if (e.debugType === mA.Trigger) {
            tl(e.group, e.name);
          }
        });
        return () => e.dispose();
      }, []);
      const r = sl(bA);
      const l = sl(IA);
      const c = nM("debug");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: o,
        children: z.jsxs(Ep, {
          focusKey: e,
          className: qR.debugUi,
          children: [z.jsxs("div", {
            className: qR.inspector,
            children: [z.jsx("div", {
              className: qR.tabBar,
              children: t.map((e, t) => (0, z.jsx)(tk, {
                index: t,
                name: e,
                selected: t === n
              }, t))
            }), z.jsx(ab, {
              smooth: false,
              className: qR.scrollable,
              children: z.jsx(ep, {
                children: null != i && (0, z.jsx)(fR, {
                  parent: c,
                  data: i
                })
              })
            }, s?.displayName)]
          }), z.jsxs(ab, {
            className: qR.outputColumn,
            children: [null != r && (0, z.jsx)(TR, {
              binding: r,
              className: qR.output
            }), l.length > 0 && (0, z.jsx)(zR, {
              watches: l,
              className: qR.output
            })]
          })]
        })
      });
    };
    const tk = ({
      index: e,
      name: t,
      selected: n
    }) => {
      0;
      const s = Y.useCallback(() => CA(e), [e]);
      0;
      return z.jsx(L_, {
        focusKey: Eg,
        selected: n,
        theme: wA,
        onSelect: s,
        children: t
      });
    };
    function nk(e) {
      for (let e = document.body.classList.length - 1; e >= 0; e--) {
        const t = document.body.classList[e];
        if (t.startsWith("style--")) {
          document.body.classList.remove(t);
        }
      }
      document.body.classList.add("style--" + e);
    }
    function sk(e) {
      const t = 1 - .75 * (-1 * e * e + 2 * e);
      document.documentElement.style.setProperty("--panelOpacityNormal", t.toString().replace(",", "."));
      const n = -.66 * t * t + 1.6600000000000001 * t;
      document.documentElement.style.setProperty("--panelOpacityDark", n.toString().replace(",", "."));
      if (0 === e) {
        document.body.classList.add("no-panel-blur");
      } else {
        document.body.classList.remove("no-panel-blur");
      }
    }
    function ik(e, t) {
      return -t * e * e + (1 + t) * e;
    }
    function ak(e) {
      document.documentElement.style.setProperty("--fontScale", e.toString().replace(",", "."));
    }
    function ok(e) {
      document.documentElement.style.fontSize = e ? "" : "1px";
    }
    X.add("game-ui/debug/components/debug-ui.tsx", {
      get DebugUIRenderer() {
        return JR;
      },
      set DebugUIRenderer(e) {
        JR = e;
      },
      get DebugUI() {
        return ek;
      },
      set DebugUI(e) {
        ek = e;
      }
    });
    X.add("game-ui/common/app/interface.ts", {
      get applyInterfaceStyle() {
        return nk;
      },
      set applyInterfaceStyle(e) {
        nk = e;
      },
      get applyInterfaceTransparency() {
        return sk;
      },
      set applyInterfaceTransparency(e) {
        sk = e;
      },
      get applyTextScale() {
        return ak;
      },
      set applyTextScale(e) {
        ak = e;
      },
      get applyInterfaceScalingEnabled() {
        return ok;
      },
      set applyInterfaceScalingEnabled(e) {
        ok = e;
      }
    });
    var rk = () => {
      0;
      const [e, t] = Y.useState(1);
      const n = KM(.1);
      0;
      Y.useEffect(() => ak(Math.round(10 * e) / 10), [e]);
      0;
      0;
      return z.jsxs("div", {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: 150,
          padding: 10,
          backgroundColor: "rgba(0,0,0,0.5)",
          zIndex: 9999,
          fontSize: 10
        },
        children: [z.jsx(GM, {
          focusKey: Eg,
          value: e,
          start: 1,
          end: 1.4,
          valueTransformer: n,
          style: {
            pointerEvents: "auto"
          },
          onChange: t
        }), Math.round(100 * e)]
      });
    };
    function lk(e = true) {
      0;
      Y.useEffect(() => {
        if (e) {
          const e = e => {
            if (!(82 !== e.keyCode && 116 !== e.keyCode || !e.metaKey && !e.ctrlKey)) {
              window.location.reload();
            }
          };
          window.addEventListener("keydown", e);
          return () => window.removeEventListener("keydown", e);
        }
      }, [e]);
    }
    X.add("game-ui/debug/components/text-scale-slider/text-scale-slider.tsx", {
      get TextScaleSlider() {
        return rk;
      },
      set TextScaleSlider(e) {
        rk = e;
      }
    });
    X.add("game-ui/debug/debug-shortcuts.ts", {
      get useDebugShortcuts() {
        return lk;
      },
      set useDebugShortcuts(e) {
        lk = e;
      }
    });
    var uk;
    var dk;
    !function (e) {
      e[e.Menu = 0] = "Menu";
      e[e.NewGame = 1] = "NewGame";
      e[e.LoadGame = 2] = "LoadGame";
      e[e.Options = 3] = "Options";
      e[e.Credits = 4] = "Credits";
    }(uk || (uk = {}));
    (function (e) {
      e[e.None = -1] = "None";
      e[e.Default = 0] = "Default";
      e[e.Custom = 1] = "Custom";
    })(dk || (dk = {}));
    var mk;
    var hk = $r("menu", "activeScreen");
    var gk = $r("menu", "gameVersion");
    var pk = $r("menu", "canContinueGame");
    var fk = $r("menu", "hasCompletedTutorials");
    var xk = $r("menu", "showTutorials");
    var vk = $r("menu", "modsEnabled");
    var _k = $r("menu", "pdxModsUIEnabled");
    var bk = $r("menu", "hideEditorButton");
    var Tk = $r("menu", "hideModsUIButton");
    var Ek = $r("menu", "displayModdingBetaBanners");
    var Ik = $r("menu", "savePreview");
    var yk = $r("menu", "mapName");
    var Sk = $r("menu", "lastSaveName");
    var jk = $r("menu", "defaultGameOptions");
    var Ck = $r("menu", "canExitGame");
    var Nk = $r("menu", "saveGameSlots");
    var wk = $r("menu", "isModsUIActive");
    var Ok = $r("menu", "themes");
    var Pk = $r("menu", "maps");
    var Lk = $r("menu", "availableMapFilters");
    var Ak = $r("menu", "selectedMapFilter");
    var Mk = $r("menu", "saves");
    var Rk = $r("menu", "creditFiles");
    var kk = $r("menu", "saveabilityStatus");
    function Dk(e) {
      tl("menu", "setActiveScreen", e);
    }
    function Fk() {
      tl("menu", "continueGame");
    }
    function Uk(e) {
      tl("menu", "newGame", e);
    }
    function Bk(e, t) {
      tl("menu", "loadGame", e, t);
    }
    function Gk(e) {
      tl("menu", "saveGame", e);
    }
    function Vk(e) {
      tl("menu", "deleteSave", e);
    }
    function Hk(e) {
      tl("menu", "shareSave", e);
    }
    function Kk(e) {
      tl("menu", "shareMap", e);
    }
    function Wk() {
      tl("menu", "startEditor");
    }
    function zk() {
      tl("menu", "exitToMainMenu");
    }
    function Yk() {
      tl("menu", "showPdxModsUI");
    }
    function $k(e) {
      tl("menu", "onSaveGameScreenVisibilityChanged", e);
    }
    function qk(e) {
      tl("menu", "applyTutorialSettings", e === mk.Continue || e === mk.Reset, e === mk.Reset);
    }
    function Xk() {
      const e = sl(xk);
      0;
      return Y.useState(e ? mk.Continue : mk.Disable);
    }
    !function (e) {
      e[e.Continue = 0] = "Continue";
      e[e.Reset = 1] = "Reset";
      e[e.Disable = 2] = "Disable";
    }(mk || (mk = {}));
    var Qk = Jr("menu", "quicksave");
    var Zk = el("menu", "quickload");
    var Jk = $r("menu", "availableCloudTargets");
    var eD = $r("menu", "selectedCloudTarget");
    var tD = $r("menu", "dismissLoadGameConfirmation");
    var nD = el("menu", "selectCloudTarget");
    var sD = el("menu", "selectMapFilter");
    X.add("game-ui/menu/data-binding/menu-bindings.ts", {
      get MenuScreen() {
        return uk;
      },
      set MenuScreen(e) {
        uk = e;
      },
      get MapFilter() {
        return dk;
      },
      set MapFilter(e) {
        dk = e;
      },
      get activeMenuScreen() {
        return activeMenuScreen;
      },
      set activeMenuScreen(e) {
        activeMenuScreen = e;
      },
      get gameVersion() {
        return gameVersion;
      },
      set gameVersion(e) {
        gameVersion = e;
      },
      get canContinueGame() {
        return canContinueGame;
      },
      set canContinueGame(e) {
        canContinueGame = e;
      },
      get hasCompletedTutorials() {
        return hasCompletedTutorials;
      },
      set hasCompletedTutorials(e) {
        hasCompletedTutorials = e;
      },
      get tutorialsEnabled() {
        return tutorialsEnabled;
      },
      set tutorialsEnabled(e) {
        tutorialsEnabled = e;
      },
      get modsEnabled() {
        return modsEnabled;
      },
      set modsEnabled(e) {
        modsEnabled = e;
      },
      get pdxModsUIEnabled() {
        return pdxModsUIEnabled;
      },
      set pdxModsUIEnabled(e) {
        pdxModsUIEnabled = e;
      },
      get hideEditor() {
        return hideEditor;
      },
      set hideEditor(e) {
        hideEditor = e;
      },
      get hideModsUI() {
        return hideModsUI;
      },
      set hideModsUI(e) {
        hideModsUI = e;
      },
      get displayModdingBetaBanners() {
        return displayModdingBetaBanners;
      },
      set displayModdingBetaBanners(e) {
        displayModdingBetaBanners = e;
      },
      get savePreview() {
        return savePreview;
      },
      set savePreview(e) {
        savePreview = e;
      },
      get mapName() {
        return mapName;
      },
      set mapName(e) {
        mapName = e;
      },
      get lastSaveName() {
        return lastSaveName;
      },
      set lastSaveName(e) {
        lastSaveName = e;
      },
      get defaultGameOptions() {
        return defaultGameOptions;
      },
      set defaultGameOptions(e) {
        defaultGameOptions = e;
      },
      get canExitGame() {
        return canExitGame;
      },
      set canExitGame(e) {
        canExitGame = e;
      },
      get saveGameSlots() {
        return saveGameSlots;
      },
      set saveGameSlots(e) {
        saveGameSlots = e;
      },
      get modsUIActive() {
        return modsUIActive;
      },
      set modsUIActive(e) {
        modsUIActive = e;
      },
      get themes() {
        return themes;
      },
      set themes(e) {
        themes = e;
      },
      get maps() {
        return maps;
      },
      set maps(e) {
        maps = e;
      },
      get availableMapFilters() {
        return availableMapFilters;
      },
      set availableMapFilters(e) {
        availableMapFilters = e;
      },
      get selectedMapFilter() {
        return selectedMapFilter;
      },
      set selectedMapFilter(e) {
        selectedMapFilter = e;
      },
      get saves() {
        return saves;
      },
      set saves(e) {
        saves = e;
      },
      get creditFiles() {
        return creditFiles;
      },
      set creditFiles(e) {
        creditFiles = e;
      },
      get saveability() {
        return saveability;
      },
      set saveability(e) {
        saveability = e;
      },
      get setActiveMenuScreen() {
        return Dk;
      },
      set setActiveMenuScreen(e) {
        Dk = e;
      },
      get continueGame() {
        return Fk;
      },
      set continueGame(e) {
        Fk = e;
      },
      get newGame() {
        return Uk;
      },
      set newGame(e) {
        Uk = e;
      },
      get loadGame() {
        return Bk;
      },
      set loadGame(e) {
        Bk = e;
      },
      get saveGame() {
        return Gk;
      },
      set saveGame(e) {
        Gk = e;
      },
      get deleteSave() {
        return Vk;
      },
      set deleteSave(e) {
        Vk = e;
      },
      get shareSave() {
        return Hk;
      },
      set shareSave(e) {
        Hk = e;
      },
      get shareMap() {
        return Kk;
      },
      set shareMap(e) {
        Kk = e;
      },
      get startEditor() {
        return Wk;
      },
      set startEditor(e) {
        Wk = e;
      },
      get exitToMainMenu() {
        return zk;
      },
      set exitToMainMenu(e) {
        zk = e;
      },
      get showPdxModsUI() {
        return Yk;
      },
      set showPdxModsUI(e) {
        Yk = e;
      },
      get onSaveGameScreenVisibilityChanged() {
        return $k;
      },
      set onSaveGameScreenVisibilityChanged(e) {
        $k = e;
      },
      get TutorialState() {
        return mk;
      },
      set TutorialState(e) {
        mk = e;
      },
      get applyTutorialSettings() {
        return qk;
      },
      set applyTutorialSettings(e) {
        qk = e;
      },
      get useTutorialSettingsState() {
        return Xk;
      },
      set useTutorialSettingsState(e) {
        Xk = e;
      },
      get quicksave() {
        return Qk;
      },
      set quicksave(e) {
        Qk = e;
      },
      get quickload() {
        return Zk;
      },
      set quickload(e) {
        Zk = e;
      },
      get availableCloudTargets() {
        return availableCloudTargets;
      },
      set availableCloudTargets(e) {
        availableCloudTargets = e;
      },
      get selectedCloudTarget() {
        return selectedCloudTarget;
      },
      set selectedCloudTarget(e) {
        selectedCloudTarget = e;
      },
      get dismissLoadGameConfirmation() {
        return dismissLoadGameConfirmation;
      },
      set dismissLoadGameConfirmation(e) {
        dismissLoadGameConfirmation = e;
      },
      get selectCloudTarget() {
        return nD;
      },
      set selectCloudTarget(e) {
        nD = e;
      },
      get selectMapFilter() {
        return sD;
      },
      set selectMapFilter(e) {
        sD = e;
      }
    });
    var iD = ({
      children: e
    }) => (0, z.jsx)(aD, {
      binding: Ek,
      children: e
    });
    var aD = ({
      children: e,
      binding: t
    }) => sl(t) ? (0, z.jsx)(z.Fragment, {
      children: e
    }) : null;
    X.add("game-ui/common/beta-element/beta-element.tsx", {
      get ModdingBetaElement() {
        return iD;
      },
      set ModdingBetaElement(e) {
        iD = e;
      },
      get BetaElement() {
        return aD;
      },
      set BetaElement(e) {
        aD = e;
      }
    });
    let oD = {
      "beta-banner": "beta-banner_qiZ",
      betaBanner: "beta-banner_qiZ"
    };
    X.add("game-ui/common/beta-element/beta-banner/beta-banner.module.scss", {
      get classes() {
        return oD;
      },
      set classes(e) {
        Object.assign(oD, e);
      }
    });
    var lD = () => (0, z.jsx)(iD, {
      children: (0, z.jsx)(cD, {
        children: (0, z.jsx)(Pc.Editor.BETA_BANNER, {})
      })
    });
    var cD = ({
      children: e
    }) => (0, z.jsx)("div", {
      className: oD.betaBanner,
      children: e
    });
    X.add("game-ui/common/beta-element/beta-banner/beta-banner.tsx", {
      get ModdingBetaBanner() {
        return lD;
      },
      set ModdingBetaBanner(e) {
        lD = e;
      },
      get BetaBanner() {
        return cD;
      },
      set BetaBanner(e) {
        cD = e;
      }
    });
    var uD;
    var dD;
    var mD;
    var hD = "editorPanel";
    !function (e) {
      e.EditorSection = "Game.UI.Editor.EditorSection";
      e.Compass = "Game.UI.Editor.Compass";
      e.TimeOfDayWeightsChart = "Game.UI.Editor.TimeOfDayWeightsChart";
      e.ItemPicker = "Game.UI.Editor.ItemPicker";
      e.ItemPickerFooter = "Game.UI.Editor.ItemPickerFooter";
      e.SearchField = "Game.UI.Editor.SearchField";
      e.PopupSearchField = "Game.UI.Editor.PopupSearchField";
      e.LocalizationField = "Game.UI.Editor.LocalizationField";
      e.FilterMenu = "Game.UI.Editor.FilterMenu";
      e.HierarchyMenu = "Game.UI.Editor.HierarchyMenu";
      e.SeasonsField = "Game.UI.Editor.SeasonsField";
      e.ModdingBetaBanner = "Game.UI.Editor.ModdingBetaBanner";
      e.ErrorLabel = "Game.UI.Editor.ErrorLabel";
      e.StringInputFieldWithError = "Game.UI.Editor.StringInputFieldWithError";
      e.ExternalLinkField = "Game.UI.Editor.ExternalLinkField";
      e.ProgressIndicator = "Game.UI.Editor.ProgressIndicator";
      e.LargeIconButton = "Game.UI.Editor.LargeIconButton";
      e.ListField = "Game.UI.Editor.ListField";
    }(uD || (uD = {}));
    (function (e) {
      e[e.Loading = 0] = "Loading";
      e[e.Success = 1] = "Success";
      e[e.Failure = 2] = "Failure";
    })(dD || (dD = {}));
    (function (e) {
      e[e.Editor = 0] = "Editor";
      e[e.PhotoMode = 1] = "PhotoMode";
    })(mD || (mD = {}));
    var gD = $r(hD, "active");
    var pD = $r(hD, "title");
    var fD = $r(hD, "width");
    var xD = $r(hD, "children");
    var vD = $r(hD, "widgetRenderer");
    var _D = el(hD, "setWidth");
    var bD = Jr(hD, "cancel");
    var TD = Jr(hD, "close");
    function ED({
      group: e,
      path: t
    }) {
      tl(e, "deleteEditorSection", t);
    }
    function ID({
      group: e,
      path: t
    }, n) {
      tl(e, "setEditorSectionActive", t, n);
    }
    function yD({
      group: e,
      path: t
    }, n) {
      tl(e, "setSelectedSeason", t, n);
    }
    function SD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setSeasonStartTimeOfYear", t, n, s);
    }
    function jD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setVisibleItemRange", t, n, s);
    }
    function CD({
      group: e,
      path: t
    }, n) {
      tl(e, "setItemSelected", t, n);
    }
    function ND({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setItemFavorite", t, n, s);
    }
    function wD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setSearchFavorite", t, n, s);
    }
    function OD({
      group: e,
      path: t
    }, n, s, i) {
      tl(e, "setLocalizationEntry", t, n, s, i);
    }
    function PD({
      group: e,
      path: t
    }) {
      tl(e, "addLocalizationEntry", t);
    }
    function LD({
      group: e,
      path: t
    }, n) {
      tl(e, "removeLocalizationEntry", t, n);
    }
    function AD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "toggleFilter", t, n, s);
    }
    function MD({
      group: e,
      path: t
    }) {
      tl(e, "clearFilters", t);
    }
    function RD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setHierarchyItemExpanded", t, n, s);
    }
    function kD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setHierarchyItemSelected", t, n, s);
    }
    function DD({
      group: e,
      path: t
    }, n, s) {
      tl(e, "setHierarchyRenderedRange", t, n, s);
    }
    function FD({
      group: e,
      path: t
    }) {
      tl(e, "addExternalLink", t);
    }
    function UD({
      group: e,
      path: t
    }, n) {
      tl(e, "removeExternalLink", t, n);
    }
    function BD({
      group: e,
      path: t
    }, n, s, i) {
      tl(e, "setExternalLink", t, n, s, i);
    }
    function GD({
      group: e,
      path: t
    }, n) {
      tl(e, "removeListItem", t, n);
    }
    X.add("game-ui/editor/data-binding/editor-panel-bindings.ts", {
      get editorPanelGroup() {
        return hD;
      },
      set editorPanelGroup(e) {
        hD = e;
      },
      get EditorWidgetType() {
        return uD;
      },
      set EditorWidgetType(e) {
        uD = e;
      },
      get ProgressIndicatorState() {
        return dD;
      },
      set ProgressIndicatorState(e) {
        dD = e;
      },
      get EditorPanelWidgetRenderer() {
        return mD;
      },
      set EditorPanelWidgetRenderer(e) {
        mD = e;
      },
      get editorPanelActive() {
        return editorPanelActive;
      },
      set editorPanelActive(e) {
        editorPanelActive = e;
      },
      get editorPanelTitle() {
        return editorPanelTitle;
      },
      set editorPanelTitle(e) {
        editorPanelTitle = e;
      },
      get editorPanelWidth() {
        return editorPanelWidth;
      },
      set editorPanelWidth(e) {
        editorPanelWidth = e;
      },
      get editorPanelChildren() {
        return editorPanelChildren;
      },
      set editorPanelChildren(e) {
        editorPanelChildren = e;
      },
      get editorPanelWidgetRenderer() {
        return editorPanelWidgetRenderer;
      },
      set editorPanelWidgetRenderer(e) {
        editorPanelWidgetRenderer = e;
      },
      get setWidth() {
        return _D;
      },
      set setWidth(e) {
        _D = e;
      },
      get cancel() {
        return bD;
      },
      set cancel(e) {
        bD = e;
      },
      get close() {
        return TD;
      },
      set close(e) {
        TD = e;
      },
      get deleteEditorSection() {
        return ED;
      },
      set deleteEditorSection(e) {
        ED = e;
      },
      get setEditorSectionActive() {
        return ID;
      },
      set setEditorSectionActive(e) {
        ID = e;
      },
      get setSelectedSeason() {
        return yD;
      },
      set setSelectedSeason(e) {
        yD = e;
      },
      get setSeasonStartTimeOfYear() {
        return SD;
      },
      set setSeasonStartTimeOfYear(e) {
        SD = e;
      },
      get setVisibleItemRange() {
        return jD;
      },
      set setVisibleItemRange(e) {
        jD = e;
      },
      get setItemSelected() {
        return CD;
      },
      set setItemSelected(e) {
        CD = e;
      },
      get setItemFavorite() {
        return ND;
      },
      set setItemFavorite(e) {
        ND = e;
      },
      get setSearchFavorite() {
        return wD;
      },
      set setSearchFavorite(e) {
        wD = e;
      },
      get setLocalizationEntry() {
        return OD;
      },
      set setLocalizationEntry(e) {
        OD = e;
      },
      get addLocalizationEntry() {
        return PD;
      },
      set addLocalizationEntry(e) {
        PD = e;
      },
      get removeLocalizationEntry() {
        return LD;
      },
      set removeLocalizationEntry(e) {
        LD = e;
      },
      get toggleFilter() {
        return AD;
      },
      set toggleFilter(e) {
        AD = e;
      },
      get clearFilters() {
        return MD;
      },
      set clearFilters(e) {
        MD = e;
      },
      get setHierarchyItemExpanded() {
        return RD;
      },
      set setHierarchyItemExpanded(e) {
        RD = e;
      },
      get setHierarchyItemSelected() {
        return kD;
      },
      set setHierarchyItemSelected(e) {
        kD = e;
      },
      get setHierarchyVisibleRange() {
        return DD;
      },
      set setHierarchyVisibleRange(e) {
        DD = e;
      },
      get addExternalLink() {
        return FD;
      },
      set addExternalLink(e) {
        FD = e;
      },
      get removeExternalLink() {
        return UD;
      },
      set removeExternalLink(e) {
        UD = e;
      },
      get setExternalLink() {
        return BD;
      },
      set setExternalLink(e) {
        BD = e;
      },
      get removeAssetItem() {
        return GD;
      },
      set removeAssetItem(e) {
        GD = e;
      }
    });
    let VD = {
      button: "button_WPv",
      hint: "hint_EbX"
    };
    X.add("game-ui/editor/themes/editor-button.module.scss", {
      get classes() {
        return VD;
      },
      set classes(e) {
        Object.assign(VD, e);
      }
    });
    let KD = {
      "editor-icon-button-group": "editor-icon-button-group_Qiw editor-widget_QQl",
      editorIconButtonGroup: "editor-icon-button-group_Qiw editor-widget_QQl",
      button: "button_qdd",
      "large-icon-button": "large-icon-button_sBX",
      largeIconButton: "large-icon-button_sBX"
    };
    X.add("game-ui/editor/widgets/icon-button/icon-button.module.scss", {
      get classes() {
        return KD;
      },
      set classes(e) {
        Object.assign(KD, e);
      }
    });
    var zD = e => (0, z.jsx)(qD, {
      children: (0, z.jsx)($D, {
        ...e
      })
    });
    var YD = ({
      parent: e,
      path: t,
      children: n
    }) => {
      const s = sM(e, t);
      0;
      return z.jsx(qD, {
        children: n.map(({
          path: e,
          ...t
        }) => (0, z.jsx)($D, {
          parent: s,
          path: e,
          ...t
        }, e))
      });
    };
    const $D = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(UA, sM(e, t));
      0;
      0;
      return z.jsx(bg, {
        tooltip: n.tooltip && (0, z.jsx)(hu, {
          value: n.tooltip
        }),
        children: z.jsx(XD, {
          src: n.icon,
          selected: n.selected,
          disabled: n.disabled,
          onSelect: s
        })
      });
    };
    var qD = ({
      children: e
    }) => (0, z.jsx)("div", {
      className: KD.editorIconButtonGroup,
      children: e
    });
    var XD = ({
      src: e,
      selected: t,
      disabled: n,
      tinted: s,
      className: i,
      onSelect: a,
      ...o
    }) => (0, z.jsx)($_, {
      src: e,
      selected: t,
      disabled: n,
      theme: VD,
      className: Qu()(KD.button, i),
      onSelect: a,
      tinted: s,
      ...o
    });
    X.add("game-ui/editor/widgets/icon-button/icon-button.tsx", {
      get BoundIconButton() {
        return zD;
      },
      set BoundIconButton(e) {
        zD = e;
      },
      get BoundIconButtonGroup() {
        return YD;
      },
      set BoundIconButtonGroup(e) {
        YD = e;
      },
      get EditorIconButtonGroup() {
        return qD;
      },
      set EditorIconButtonGroup(e) {
        qD = e;
      },
      get EditorIconButton() {
        return XD;
      },
      set EditorIconButton(e) {
        XD = e;
      }
    });
    let QD = {
      pickerMinHeight: "400rem",
      "editor-item-base": "editor-item-base_sYx editor-widget_QQl",
      editorItemBase: "editor-item-base_sYx editor-widget_QQl",
      centered: "centered_t1M",
      "editor-item": "editor-item_VnW editor-item-base_sYx editor-widget_QQl",
      editorItem: "editor-item_VnW editor-item-base_sYx editor-widget_QQl",
      row: "row_d2o",
      label: "label_BbZ",
      control: "control_Hds",
      children: "children_ab1",
      toggle: "toggle_wf6",
      input: "input_Wfi",
      "picker-toggle": "picker-toggle_d6k",
      pickerToggle: "picker-toggle_d6k",
      "dropdown-toggle": "dropdown-toggle_kaj",
      dropdownToggle: "dropdown-toggle_kaj",
      "directory-button": "directory-button_ayP",
      directoryButton: "directory-button_ayP",
      "directory-icon": "directory-icon_NVL",
      directoryIcon: "directory-icon_NVL",
      "vector-label": "vector-label_fxy",
      vectorLabel: "vector-label_fxy",
      "vector-input": "vector-input_B11 input_Wfi",
      vectorInput: "vector-input_B11 input_Wfi",
      "slider-container": "slider-container_Q_K",
      sliderContainer: "slider-container_Q_K",
      slider: "slider_ROT",
      "slider-input": "slider-input_DXM input_Wfi",
      sliderInput: "slider-input_DXM input_Wfi",
      picker: "picker_Ij2",
      "picker-popup": "picker-popup_pUb",
      pickerPopup: "picker-popup_pUb",
      swatch: "swatch_wOH",
      alpha: "alpha_Sth",
      "group-children": "group-children_Zwx",
      groupChildren: "group-children_Zwx",
      "expandable-header": "expandable-header_hQZ",
      expandableHeader: "expandable-header_hQZ",
      "header-label": "header-label_H79",
      headerLabel: "header-label_H79",
      "header-summary": "header-summary_U_C",
      headerSummary: "header-summary_U_C",
      "expandable-children": "expandable-children_e7j",
      expandableChildren: "expandable-children_e7j",
      "color-picker-container": "color-picker-container_bUs",
      colorPickerContainer: "color-picker-container_bUs",
      "details-block": "details-block_E_n",
      detailsBlock: "details-block_E_n",
      "error-label": "error-label_Tqk",
      errorLabel: "error-label_Tqk",
      "error-border": "error-border_idd",
      errorBorder: "error-border_idd",
      "label-right": "label-right__bo",
      labelRight: "label-right__bo",
      "gradient-slider": "gradient-slider_iFK",
      gradientSlider: "gradient-slider_iFK",
      "ranged-slider": "ranged-slider_zaP",
      rangedSlider: "ranged-slider_zaP",
      icon: "icon_D21",
      "tick-mark": "tick-mark_bLv",
      tickMark: "tick-mark_bLv"
    };
    X.add("game-ui/editor/widgets/item/editor-item.module.scss", {
      get classes() {
        return QD;
      },
      set classes(e) {
        Object.assign(QD, e);
      }
    });
    var JD = ({
      disabled: e,
      centered: t,
      className: n,
      children: s
    }) => (0, z.jsx)(ep, {
      children: (0, z.jsx)("div", {
        className: Qu()(QD.editorItem, e && "disabled", t && QD.centered, n),
        children: s
      })
    });
    var eF = ({
      disabled: e,
      centered: t,
      className: n,
      focusKey: s = Ig,
      onFocusChange: i,
      children: a
    }) => (0, z.jsx)(Ep, {
      focusKey: s,
      className: Qu()(QD.editorItem, e && "disabled", t && QD.centered, n),
      onFocusChange: i,
      children: a
    });
    var tF = ({
      label: e,
      summary: t,
      expanded: n,
      disabled: s,
      centered: i,
      className: a,
      tooltip: o,
      children: r,
      onExpandedChange: l
    }) => {
      0;
      const c = Y.useCallback(() => l(!n), [n, l]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ep, {
        focusKey: s ? Eg : Ig,
        className: Qu()(QD.editorItemBase, s && "disabled", i && QD.centered, a),
        children: z.jsxs(ep, {
          children: [z.jsx(bg, {
            tooltip: o && (0, z.jsx)(hu, {
              value: o
            }),
            children: z.jsxs($_, {
              tinted: true,
              src: n ? "Media/Glyphs/ThickStrokeArrowDown.svg" : "Media/Glyphs/ThickStrokeArrowRight.svg",
              className: Qu()(QD.expandableHeader, n && QD.expanded),
              onSelect: c,
              children: [z.jsx("div", {
                className: QD.headerLabel,
                children: e
              }), null != t && (0, z.jsx)("div", {
                className: QD.headerSummary,
                children: t
              })]
            })
          }), n && (0, z.jsx)("div", {
            className: QD.expandableChildren,
            children: r
          })]
        })
      });
    };
    var nF = ({
      label: e,
      onSelect: t,
      children: n
    }) => (0, z.jsxs)("div", {
      className: QD.row,
      children: [(0, z.jsx)("div", {
        className: QD.label,
        onClick: t,
        children: e
      }), n && (0, z.jsx)("div", {
        className: QD.control,
        children: n
      })]
    });
    var sF = ({
      visible: e,
      children: t
    }) => e ? (0, z.jsx)("div", {
      className: QD.detailsBlock,
      children: t
    }) : null;
    X.add("game-ui/editor/widgets/item/editor-item.tsx", {
      get EditorItem() {
        return JD;
      },
      set EditorItem(e) {
        JD = e;
      },
      get FocusableEditorItem() {
        return eF;
      },
      set FocusableEditorItem(e) {
        eF = e;
      },
      get ExpandableEditorItem() {
        return tF;
      },
      set ExpandableEditorItem(e) {
        tF = e;
      },
      get EditorItemControl() {
        return nF;
      },
      set EditorItemControl(e) {
        nF = e;
      },
      get EditorItemDetails() {
        return sF;
      },
      set EditorItemDetails(e) {
        sF = e;
      }
    });
    X.add("game-ui/editor/widgets/item/index.ts", {});
    let iF = {
      column: "column_Dex",
      row: "row_bJ0",
      label: "label_jyM",
      "remove-button": "remove-button_kUX",
      removeButton: "remove-button_kUX",
      "sub-item": "sub-item_nMN",
      subItem: "sub-item_nMN"
    };
    X.add("game-ui/editor/widgets/asset-list-field/asset-list-field.module.scss", {
      get classes() {
        return iF;
      },
      set classes(e) {
        Object.assign(iF, e);
      }
    });
    var oF = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(GD, sM(e, t));
      0;
      return z.jsx(rF, {
        data: n,
        onRemove: s
      });
    };
    var rF = ({
      data: e,
      onRemove: t
    }) => (0, z.jsx)(z.Fragment, {
      children: e.items.map((e, n) => (0, z.jsx)(lF, {
        item: e,
        index: n,
        onRemove: t
      }, n))
    });
    var lF = ({
      item: e,
      index: t,
      onRemove: n
    }) => {
      0;
      const s = Y.useCallback(() => n && n(t), [t, n]);
      0;
      0;
      0;
      0;
      return z.jsx(JD, {
        children: z.jsxs("div", {
          className: iF.column,
          children: [z.jsxs("div", {
            className: iF.row,
            children: [z.jsx("div", {
              className: iF.label,
              children: e.label
            }), e.removable && (0, z.jsx)(XD, {
              src: "Media/Glyphs/Trash.svg",
              onSelect: s,
              className: iF.removeButton,
              tinted: true
            })]
          }), e.subItems?.map((e, t) => (0, z.jsx)("div", {
            className: iF.subItem,
            children: e
          }, t))]
        })
      });
    };
    X.add("game-ui/editor/widgets/asset-list-field/asset-list-field.tsx", {
      get BoundAssetListField() {
        return oF;
      },
      set BoundAssetListField(e) {
        oF = e;
      },
      get AssetListField() {
        return rF;
      },
      set AssetListField(e) {
        rF = e;
      },
      get AssetListItem() {
        return lF;
      },
      set AssetListItem(e) {
        lF = e;
      }
    });
    let cF = {
      "editor-button-row": "editor-button-row_NuZ editor-widget_QQl",
      editorButtonRow: "editor-button-row_NuZ editor-widget_QQl",
      button: "button_dLA"
    };
    X.add("game-ui/editor/widgets/button/button.module.scss", {
      get classes() {
        return cF;
      },
      set classes(e) {
        Object.assign(cF, e);
      }
    });
    var dF = e => (0, z.jsx)(gF, {
      children: (0, z.jsx)(aT, {
        uiTag: e.props.uiTag || undefined,
        editor: true,
        children: (0, z.jsx)(hF, {
          ...e
        })
      })
    });
    var mF = ({
      parent: e,
      path: t,
      children: n
    }) => {
      const s = sM(e, t);
      0;
      return z.jsx(gF, {
        children: n.map(({
          path: e,
          ...t
        }) => (0, z.jsx)(hF, {
          parent: s,
          path: e,
          ...t
        }, e))
      });
    };
    const hF = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(UA, sM(e, t));
      return n.hidden ? null : (0, z.jsx)(pF, {
        disabled: n.disabled,
        onSelect: s,
        tooltip: n.tooltip,
        children: (0, z.jsx)(hu, {
          value: n.displayName
        })
      });
    };
    var gF = ({
      children: e
    }) => (0, z.jsx)("div", {
      className: cF.editorButtonRow,
      children: e
    });
    var pF = ({
      disabled: e,
      className: t,
      children: n,
      onSelect: s,
      tooltip: i
    }) => (0, z.jsx)(bg, {
      tooltip: null == i ? null : (0, z.jsx)(hu, {
        value: i
      }),
      children: (0, z.jsx)(L_, {
        disabled: e,
        theme: VD,
        className: Qu()(cF.button, t),
        onSelect: s,
        children: n
      })
    });
    X.add("game-ui/editor/widgets/button/button.tsx", {
      get BoundButton() {
        return dF;
      },
      set BoundButton(e) {
        dF = e;
      },
      get BoundButtonRow() {
        return mF;
      },
      set BoundButtonRow(e) {
        mF = e;
      },
      get EditorButtonRow() {
        return gF;
      },
      set EditorButtonRow(e) {
        gF = e;
      },
      get EditorButton() {
        return pF;
      },
      set EditorButton(e) {
        pF = e;
      }
    });
    let fF = {
      "dropdown-toggle": "dropdown-toggle_Iei dropdown-toggle_prl",
      dropdownToggle: "dropdown-toggle_Iei dropdown-toggle_prl",
      indicator: "indicator_Not",
      "dropdown-menu": "dropdown-menu_cSm dropdown-menu_Swd",
      dropdownMenu: "dropdown-menu_cSm dropdown-menu_Swd",
      "dropdown-item": "dropdown-item_Hjk undefined",
      dropdownItem: "dropdown-item_Hjk undefined",
      "toggle-flags-button": "toggle-flags-button_T7X undefined",
      toggleFlagsButton: "toggle-flags-button_T7X undefined",
      "dropdown-flag-item": "dropdown-flag-item_uJx dropdown-flag-item_EcT",
      dropdownFlagItem: "dropdown-flag-item_uJx dropdown-flag-item_EcT",
      toggle: "toggle_qtt toggle_RyX",
      label: "label_tNr"
    };
    X.add("game-ui/editor/themes/editor-dropdown.module.scss", {
      get classes() {
        return fF;
      },
      set classes(e) {
        Object.assign(fF, e);
      }
    });
    let vF = {
      button: "button_MqD",
      hint: "hint_Rzc"
    };
    X.add("game-ui/editor/widgets/fields/dropdown-toggle.module.scss", {
      get classes() {
        return vF;
      },
      set classes(e) {
        Object.assign(vF, e);
      }
    });
    function bF({
      parent: e,
      path: t,
      props: n
    }) {
      const s = PA(BA, sM(e, t));
      0;
      return z.jsx(EF, {
        data: n,
        onChange: s
      });
    }
    function TF({
      items: e,
      value: t,
      disabled: n = false,
      onChange: s
    }) {
      0;
      const i = Y.useMemo(() => e.find(e => e.value === t), [e, t]);
      0;
      0;
      return z.jsx(ny, {
        theme: fF,
        content: e.map((e, n) => (0, z.jsx)(oy, {
          focusKey: n,
          value: e.value,
          selected: t === e.value,
          onChange: s,
          children: (0, z.jsx)(hu, {
            value: e.displayName
          })
        }, n)),
        children: z.jsx(sy, {
          showHint: true,
          buttonTheme: vF,
          sounds: IF,
          className: QD.dropdownToggle,
          disabled: n,
          children: i?.displayName && (0, z.jsx)(hu, {
            value: i.displayName
          })
        })
      });
    }
    function EF({
      data: e,
      onChange: t
    }) {
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: e.disabled,
        children: z.jsxs("div", {
          className: QD.row,
          children: [z.jsx("div", {
            className: QD.label,
            children: z.jsx(hu, {
              value: e.displayName
            })
          }), z.jsx("div", {
            className: QD.control,
            children: z.jsx(TF, {
              items: e.items,
              value: e.value,
              disabled: e.disabled,
              onChange: t
            })
          })]
        })
      });
    }
    const IF = {
      ...P_,
      hover: null,
      focus: null
    };
    X.add("game-ui/editor/widgets/fields/dropdown-field.tsx", {
      get BoundDropdownField() {
        return bF;
      },
      set BoundDropdownField(e) {
        bF = e;
      },
      get DropdownField() {
        return TF;
      },
      set DropdownField(e) {
        TF = e;
      }
    });
    var yF = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(BA, sM(e, t));
      return n.hidden ? null : (0, z.jsx)(eF, {
        disabled: n.disabled,
        children: (0, z.jsx)(bg, {
          tooltip: n.tooltip && (0, z.jsx)(hu, {
            value: n.tooltip
          }),
          children: (0, z.jsxs)("div", {
            className: QD.row,
            children: [(0, z.jsx)("div", {
              className: QD.label,
              children: (0, z.jsx)(hu, {
                value: n.displayName
              })
            }), (0, z.jsx)("div", {
              className: QD.control,
              children: (0, z.jsx)(SF, {
                ...n,
                onChange: s,
                multiline: n.multiline >= 1 ? n.multiline : undefined,
                maxLength: n.maxLength > 0 ? n.maxLength : undefined
              })
            })]
          })
        })
      });
    };
    var SF = ({
      value: e,
      disabled: t,
      onChange: n,
      onChangeStart: s,
      onChangeEnd: i,
      className: a,
      multiline: o,
      maxLength: r
    }) => {
      0;
      const l = Y.useCallback(e => n(e.target.value || ""), [n]);
      0;
      return z.jsx(zE, {
        showHint: true,
        value: e,
        disabled: t,
        className: Qu()(QD.input, a),
        onChange: l,
        onFocus: s,
        onBlur: i,
        multiline: o,
        maxLength: r
      });
    };
    X.add("game-ui/editor/widgets/fields/string-input-field.tsx", {
      get BoundEditorStringInputField() {
        return yF;
      },
      set BoundEditorStringInputField(e) {
        yF = e;
      },
      get StringInputField() {
        return SF;
      },
      set StringInputField(e) {
        SF = e;
      }
    });
    let jF = {
      label: "label_FW0",
      control: "control_jRy",
      input: "input_Qzq"
    };
    X.add("game-ui/editor/widgets/external-link-field/external-link-field.module.scss", {
      get classes() {
        return jF;
      },
      set classes(e) {
        Object.assign(jF, e);
      }
    });
    let NF = {
      button: "button_N5R",
      hint: "hint_Izr"
    };
    X.add("game-ui/editor/widgets/external-link-field/external-link-field-button.module.scss", {
      get classes() {
        return NF;
      },
      set classes(e) {
        Object.assign(NF, e);
      }
    });
    var OF = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      const i = PA(FD, s);
      const a = PA(BD, s);
      const o = PA(UD, s);
      0;
      return z.jsx(PF, {
        data: n,
        onAdd: i,
        onChange: a,
        onRemove: o
      });
    };
    var PF = ({
      data: e,
      onAdd: t,
      onChange: n,
      onRemove: s
    }) => {
      0;
      const i = Y.useMemo(() => e.acceptedTypes.map(e => ({
        value: e,
        displayName: _c("Menu.ASSET_EXTERNAL_LINK_TYPE[" + e + "]")
      })), [e.acceptedTypes]);
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [e.links.map((e, t) => (0, z.jsx)(LF, {
          link: e,
          index: t,
          items: i,
          onChange: n,
          onRemove: s
        }, t)), z.jsx(pF, {
          onSelect: t,
          disabled: e.links.length >= e.maxLinks,
          children: z.jsx(Pc.Menu.ASSET_ADD_EXTERNAL_LINK, {})
        })]
      });
    };
    var LF = ({
      index: e,
      link: t,
      items: n,
      onChange: s,
      onRemove: i
    }) => {
      0;
      const a = Y.useCallback(n => s(e, n, t.url), [e, t.url, s]);
      0;
      const o = Y.useCallback(n => s(e, t.type, n), [e, t.type, s]);
      0;
      const r = Y.useCallback(() => i && i(e), [e, i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(JD, {
        children: z.jsxs("div", {
          className: QD.row,
          children: [z.jsx("div", {
            className: jF.label,
            children: z.jsx(TF, {
              items: n,
              value: t.type,
              disabled: t.lockType,
              onChange: a
            })
          }), z.jsxs("div", {
            className: jF.control,
            children: [z.jsx(SF, {
              value: t.url,
              onChange: o,
              className: Qu()(jF.input, t.error && QD.errorBorder)
            }), z.jsx(XD, {
              src: "Media/Glyphs/Trash.svg",
              onSelect: r,
              disabled: undefined === i,
              theme: NF,
              tinted: true
            })]
          })]
        })
      });
    };
    X.add("game-ui/editor/widgets/external-link-field/external-link-field.tsx", {
      get BoundExternalLinkField() {
        return OF;
      },
      set BoundExternalLinkField(e) {
        OF = e;
      },
      get ExternalLinkField() {
        return PF;
      },
      set ExternalLinkField(e) {
        PF = e;
      },
      get ExternalLinkItem() {
        return LF;
      },
      set ExternalLinkItem(e) {
        LF = e;
      }
    });
    var AF = ({
      props: e
    }) => (0, z.jsx)(MF, {
      ...e
    });
    var MF = e => e.visible ? (0, z.jsx)("div", {
      className: Qu()(QD.errorLabel, e.className),
      children: (0, z.jsx)(hu, {
        value: e.displayName
      })
    }) : null;
    X.add("game-ui/editor/widgets/label/error-label.tsx", {
      get BoundErrorLabel() {
        return AF;
      },
      set BoundErrorLabel(e) {
        AF = e;
      },
      get ErrorLabel() {
        return MF;
      },
      set ErrorLabel(e) {
        MF = e;
      }
    });
    var RF = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(BA, sM(e, t));
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(eF, {
        disabled: n.disabled,
        children: [z.jsxs("div", {
          className: QD.row,
          children: [z.jsx("div", {
            className: QD.label,
            children: z.jsx(hu, {
              value: n.displayName
            })
          }), z.jsx("div", {
            className: QD.control,
            children: z.jsx(SF, {
              className: n.error ? QD.errorBorder : undefined,
              value: n.value,
              onChange: s,
              multiline: n.multiline >= 1 ? n.multiline : undefined,
              maxLength: n.maxLength > 0 ? n.maxLength : undefined
            })
          })]
        }), z.jsx(MF, {
          visible: n.error,
          displayName: n.errorMessage,
          level: 0,
          className: QD.labelRight
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/string-input-field-with-error.tsx", {
      get BoundStringInputFieldWithError() {
        return RF;
      },
      set BoundStringInputFieldWithError(e) {
        RF = e;
      }
    });
    var kF = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(UA, sM(e, t));
      0;
      const i = Y.useMemo(() => "url(" + n.icon + ")", [n.icon]);
      0;
      0;
      0;
      return z.jsx(eF, {
        children: z.jsx(bg, {
          tooltip: n.tooltip && (0, z.jsx)(hu, {
            value: n.tooltip
          }),
          children: z.jsx(L_, {
            style: {
              backgroundImage: i
            },
            className: KD.largeIconButton,
            onSelect: s,
            theme: VD
          })
        })
      });
    };
    X.add("game-ui/editor/widgets/icon-button/large-icon-button.tsx", {
      get BoundLargeIconButton() {
        return kF;
      },
      set BoundLargeIconButton(e) {
        kF = e;
      }
    });
    var DF = ({
      props: e
    }) => (0, z.jsx)(JD, {
      children: (0, z.jsx)(hu, {
        value: e.displayName
      })
    });
    X.add("game-ui/editor/widgets/label/label.tsx", {
      get BoundLabel() {
        return DF;
      },
      set BoundLabel(e) {
        DF = e;
      }
    });
    let FF = {
      strokeWidth: "5",
      "progress-circle": "progress-circle_OLN",
      progressCircle: "progress-circle_OLN",
      indeterminate: "indeterminate_UIQ",
      rotate: "rotate_UME",
      image: "image_AKd",
      progress: "progress_mlv"
    };
    X.add("game-ui/common/progress-circle/progress-circle.module.scss", {
      get classes() {
        return FF;
      },
      set classes(e) {
        Object.assign(FF, e);
      }
    });
    var BF = ({
      progress: e,
      max: t,
      indeterminate: n,
      theme: s,
      className: i
    }) => {
      0;
      const a = Y.useMemo(() => ({
        ...FF,
        ...s
      }), [s]);
      const r = parseFloat(a.strokeWidth);
      const l = (100 - r) / 2;
      const c = 2 * Math.PI * wd(e / t, 0, .9999);
      const u = 50 + l * Math.sin(c);
      const d = 50 - l * Math.cos(c);
      const m = c > Math.PI ? 1 : 0;
      0;
      0;
      return z.jsx("div", {
        className: Qu()(a.progressCircle, n && a.indeterminate, i),
        children: z.jsxs("svg", {
          viewBox: "0 0 100 100",
          className: a.image,
          children: [a.circle && (0, z.jsx)("circle", {
            cx: 50,
            cy: 50,
            r: l,
            strokeWidth: r,
            className: a.circle
          }), n ? (0, z.jsx)("path", {
            d: GF(50, l, 10),
            strokeWidth: r,
            className: a.progress
          }) : (0, z.jsx)("path", {
            d: `M 50 ${50 - l} A ${l} ${l}, 0, ${m} 1, ${u} ${d}`,
            strokeWidth: r,
            className: a.progress
          })]
        })
      });
    };
    function GF(e, t, n) {
      let s = "";
      for (let i = 0; i < n; i++) {
        const a = 2 * Math.PI * i / n;
        const o = e + t * Math.sin(a);
        const r = e - t * Math.cos(a);
        const l = 2 * Math.PI * (i + .3) / n;
        s += `M ${o} ${r} A ${t} ${t}, 0, 0 1, ${e + t * Math.sin(l)} ${e - t * Math.cos(l)} `;
      }
      return s;
    }
    X.add("game-ui/common/progress-circle/progress-circle.tsx", {
      get ProgressCircle() {
        return BF;
      },
      set ProgressCircle(e) {
        BF = e;
      }
    });
    let VF = {
      "progress-circle": "progress-circle_VWp progress-circle_OLN",
      progressCircle: "progress-circle_VWp progress-circle_OLN",
      progress: "progress_sD7 progress_mlv",
      complete: "complete_om7",
      failure: "failure_ryc",
      container: "container_YQJ"
    };
    X.add("game-ui/editor/widgets/progress-indicator/progress-indicator.module.scss", {
      get classes() {
        return VF;
      },
      set classes(e) {
        Object.assign(VF, e);
      }
    });
    var KF = ({
      props: e
    }) => (0, z.jsx)(WF, {
      ...e
    });
    var WF = ({
      progress: e,
      indeterminate: t,
      state: n,
      hidden: s
    }) => s ? null : (0, z.jsx)("div", {
      className: VF.container,
      children: (0, z.jsx)(BF, {
        progress: n === dD.Loading ? e : 1,
        max: 1,
        theme: VF,
        indeterminate: n === dD.Loading && t,
        className: Qu()(n === dD.Success && VF.complete, n === dD.Failure && VF.failure)
      })
    });
    function zF(e, t) {
      0;
      return Y.useMemo(() => ({
        flex: `${e.grow} ${e.shrink} ${e.basis < 0 ? "auto" : 0 === e.basis ? "0" : `${e.basis}rem`}`,
        flexWrap: t ? "wrap" : "nowrap"
      }), [e.basis, e.grow, e.shrink, t]);
    }
    function YF(e) {
      return e < 0 ? "auto" : 0 === e ? "0" : `${e}rem`;
    }
    X.add("game-ui/editor/widgets/progress-indicator/progress-indicator.tsx", {
      get BoundProgressIndicator() {
        return KF;
      },
      set BoundProgressIndicator(e) {
        KF = e;
      },
      get ProgressIndicator() {
        return WF;
      },
      set ProgressIndicator(e) {
        WF = e;
      }
    });
    X.add("game-ui/widgets/components/flex-layout.ts", {
      get useFlexStyle() {
        return zF;
      },
      set useFlexStyle(e) {
        zF = e;
      }
    });
    let $F = {
      column: "column_iuw editor-widget_QQl"
    };
    X.add("game-ui/editor/widgets/column/column.module.scss", {
      get classes() {
        return $F;
      },
      set classes(e) {
        Object.assign($F, e);
      }
    });
    var XF = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      const a = zF(n.flex);
      0;
      const o = Y.useContext(hM);
      0;
      0;
      return z.jsx(QF, {
        style: a,
        children: z.jsx(mM, {
          parent: i,
          components: o,
          data: s
        })
      });
    };
    var QF = ({
      className: e,
      style: t,
      children: n
    }) => (0, z.jsx)("div", {
      className: Qu()($F.column, e),
      style: t,
      children: (0, z.jsx)(ep, {
        children: n
      })
    });
    X.add("game-ui/editor/widgets/column/column.tsx", {
      get BoundColumn() {
        return XF;
      },
      set BoundColumn(e) {
        XF = e;
      },
      get Column() {
        return QF;
      },
      set Column(e) {
        QF = e;
      }
    });
    let ZF = {
      compass: "compass_DU0",
      north: "north_meN",
      needle: "needle_PzX"
    };
    X.add("game-ui/editor/widgets/compass/compass.module.scss", {
      get classes() {
        return ZF;
      },
      set classes(e) {
        Object.assign(ZF, e);
      }
    });
    var eU = ({
      props: e
    }) => (0, z.jsx)(JD, {
      centered: true,
      children: (0, z.jsx)(tU, {
        angle: e.angle
      })
    });
    var tU = ({
      angle: e,
      className: t
    }) => (0, z.jsxs)("div", {
      className: Qu()(ZF.compass, t),
      children: [(0, z.jsx)("div", {
        className: ZF.north,
        children: "N"
      }), (0, z.jsx)("img", {
        src: "Media/Editor/CompassNeedle.svg",
        className: ZF.needle,
        style: {
          transform: `rotate(${e}deg)`
        }
      })]
    });
    X.add("game-ui/editor/widgets/compass/compass.tsx", {
      get BoundCompass() {
        return eU;
      },
      set BoundCompass(e) {
        eU = e;
      },
      get Compass() {
        return tU;
      },
      set Compass(e) {
        tU = e;
      }
    });
    let nU = {
      divider: "divider_FEz"
    };
    X.add("game-ui/editor/widgets/divider/divider.module.scss", {
      get classes() {
        return nU;
      },
      set classes(e) {
        Object.assign(nU, e);
      }
    });
    var iU = () => (0, z.jsx)("div", {
      className: nU.divider
    });
    X.add("game-ui/editor/widgets/divider/divider.tsx", {
      get Divider() {
        return iU;
      },
      set Divider(e) {
        iU = e;
      }
    });
    0;
    var aU = Y.createContext({});
    var oU = () => (0, Y.useContext)(aU);
    X.add("game-ui/common/svg/svg-context.ts", {
      get SVGContext() {
        return aU;
      },
      set SVGContext(e) {
        aU = e;
      },
      get useSVG() {
        return oU;
      },
      set useSVG(e) {
        oU = e;
      }
    });
    const rU = {
      x: 0,
      y: 0
    };
    var lU = (e, t, n) => {
      const {
        events: {
          bindElement: s
        },
        viewport: i
      } = oU();
      const {
        onDrag: a,
        onWindowMouseMove: o
      } = e;
      0;
      const r = Y.useRef(false);
      0;
      const [l, c] = Y.useState(false);
      0;
      const [u, d] = Y.useState(false);
      0;
      const m = Y.useRef(i);
      m.current = i;
      0;
      Y.useEffect(() => {
        if (!e) {
          return;
        }
        const i = {
          ...e
        };
        const a = i.onMouseDown;
        i.onMouseDown = (e, t) => {
          rU.x = e.clientX;
          rU.y = e.clientY;
          a?.(e, t);
        };
        if (i.onDrag) {
          const e = i.onMouseDown;
          i.onMouseDown = (t, n) => {
            e?.(t, n);
            if (n && 0 === t.button && !t.propagationStopped) {
              t.propagationStopped = true;
              c(true);
            }
          };
        }
        if (i.onMouseMove || n) {
          const e = i.onMouseMove;
          const t = i.onMouseEnter;
          const n = i.onMouseLeave;
          i.onMouseMove = (s, i) => {
            if (i) {
              if (!r.current) {
                t?.(s);
                r.current = true;
                d(true);
              }
            } else if (r.current) {
              n?.(s);
              r.current = false;
              d(false);
            }
            e?.(s, i);
          };
        }
        if (i.onSelect || i.onClick || i.onDrag) {
          const e = i.onClick;
          i.onClick = (t, n) => {
            if (n && !t.propagationStopped && t.clientX === rU.x && t.clientY === rU.y) {
              t.propagationStopped = true;
              i.onSelect?.(t);
              e?.(t);
            }
          };
        }
        return s(i, t);
      }, [s, t, n, e]);
      0;
      Y.useEffect(() => {
        if (l) {
          const e = e => {
            const n = m.current;
            if (e.buttons > 0 && n) {
              const t = n.posFromMouse(e);
              const s = n.pointFromPos(t);
              a?.({
                point: s,
                position: t,
                shiftKey: e.shiftKey,
                ctrlKey: e.ctrlKey,
                altKey: e.altKey
              });
            } else {
              t();
            }
          };
          const t = () => {
            requestAnimationFrame(() => {
              c(false);
              document.removeEventListener("mousemove", e);
              document.removeEventListener("mouseup", t);
            });
          };
          document.addEventListener("mousemove", e);
          document.addEventListener("mouseup", t);
          return () => {
            document.removeEventListener("mousemove", e);
            document.removeEventListener("mouseup", t);
          };
        }
      }, [l, a]);
      0;
      Y.useEffect(() => {
        if (o) {
          const e = e => {
            const t = m.current;
            if (t) {
              const n = t.posFromMouse(e);
              const s = t.pointFromPos(n);
              o({
                ...e,
                point: s,
                position: n,
                shiftKey: e.shiftKey,
                ctrlKey: e.ctrlKey,
                altKey: e.altKey
              });
            }
          };
          document.addEventListener("mousemove", e);
          return () => {
            document.removeEventListener("mousemove", e);
          };
        }
      }, [o]);
      0;
      Y.useEffect(() => {
        const t = !!(e.focused || e.selected || u);
        n?.(t);
      }, [u, n, e.focused, e.selected]);
    };
    X.add("game-ui/common/svg/utils/use-svg-event-handling.ts", {
      get useSVGEventHandling() {
        return lU;
      },
      set useSVGEventHandling(e) {
        lU = e;
      }
    });
    0;
    var cU = Y.forwardRef(function ({
      interaction: e,
      viewport: t,
      children: n,
      ...s
    }, i) {
      lU(s);
      const {
        onWindowMouseMove: a,
        ...o
      } = s;
      0;
      return z.jsx("svg", {
        ref: i,
        width: "100%",
        height: "100%",
        viewBox: `0 0 ${t?.size.width} ${t?.size.height}`,
        ...o,
        ...e.bindings,
        children: n
      });
    });
    X.add("game-ui/common/svg/elements/svg.tsx", {
      get SVGcomponent() {
        return cU;
      },
      set SVGcomponent(e) {
        cU = e;
      }
    });
    var uU = ["onClick", "onContextMenu", "onDoubleClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp"];
    X.add("game-ui/common/svg/types.ts", {
      get INTERACTION_EVENTS() {
        return uU;
      },
      set INTERACTION_EVENTS(e) {
        uU = e;
      }
    });
    var dU = () => {
      0;
      const e = Y.useRef();
      0;
      return Y.useMemo(() => {
        const t = {};
        const n = (n, s) => {
          if (e.current) {
            const i = {
              ...s,
              position: e.current.posFromMouse(s),
              point: e.current.pointFromMouse(s)
            };
            [...(t[n] || [])]?.forEach(e => e(i));
          }
        };
        return {
          events: {
            bindElement: (n, s) => {
              const i = [];
              Object.entries(n).forEach(([n, a]) => {
                if (uU.includes(n)) {
                  const o = t => {
                    if (e.current) {
                      const n = !s || s(e.current?.posFromMouse(t), t);
                      if (!(t.propagationStopped || "function" != typeof a)) {
                        a(t, n);
                      }
                    }
                  };
                  ((e, n) => {
                    t[e] = t[e] ? [...t[e], n] : [n];
                  })(n, o);
                  i.push([n, o]);
                }
              });
              return () => {
                i.forEach(([e, n]) => {
                  return void t[e].splice(t[e].indexOf(n), 1);
                });
              };
            }
          },
          bindings: {
            onWheel: e => n("onWheel", e),
            onClick: e => n("onClick", e),
            onDoubleClick: e => n("onDoubleClick", e),
            onMouseDown: e => n("onMouseDown", e),
            onMouseUp: e => n("onMouseUp", e),
            onMouseMove: e => n("onMouseMove", e)
          },
          updateViewport: t => {
            e.current = t;
          }
        };
      }, []);
    };
    X.add("game-ui/common/svg/use-svg-interaction.tsx", {
      get useSVGInteraction() {
        return dU;
      },
      set useSVGInteraction(e) {
        dU = e;
      }
    });
    var mU = (e, t, n, s) => {
      let i;
      let a;
      let o;
      let r;
      if ("number" == typeof e) {
        i = a = o = r = t(e);
      } else if ("x" in e) {
        i = o = t(e.y);
        r = a = t(e.x);
      } else {
        i = t(e.top);
        a = t(e.right);
        o = t(e.bottom);
        r = t(e.left);
      }
      if (r + a >= n || i + o >= s) {
        throw new Error("SVG paddings on given axis can't add up to more than the width or height of svg");
      }
      return {
        top: i,
        right: a,
        bottom: o,
        left: r
      };
    };
    X.add("game-ui/common/svg/utils/parse-paddings.ts", {
      get parsePadding() {
        return mU;
      },
      set parsePadding(e) {
        mU = e;
      }
    });
    var hU = e => (...t) => 2 === t.length ? e({
      x: t[0],
      y: t[1]
    }) : e(t[0]);
    X.add("game-ui/common/svg/utils/point-conversion.ts", {
      get createPointConversion() {
        return hU;
      },
      set createPointConversion(e) {
        hU = e;
      }
    });
    const gU = {
      x: 0,
      y: 0
    };
    var pU = (e, t, n) => {
      0;
      const [s, i] = Y.useState(gU);
      0;
      Y.useEffect(() => {
        if (e.current && t) {
          const n = e.current;
          let s;
          let a = {
            x: 0,
            y: 0
          };
          const o = e => {
            const n = e.shiftKey ? 2 : e.ctrlKey ? .5 : 1;
            i(i => {
              s = s || i;
              return {
                x: "y" === t ? 0 : s.x + (a.x - e.x) * n,
                y: "x" === t ? 0 : s.y + (a.y - e.y) * n
              };
            });
          };
          const r = e => {
            if (1 === e.button) {
              a = e;
              const t = () => {
                s = undefined;
                window.removeEventListener("mousemove", o);
                window.removeEventListener("mouseup", o);
              };
              window.addEventListener("mousemove", o);
              window.addEventListener("mouseup", t);
            }
          };
          n.addEventListener("mousedown", r);
          return () => {
            n.removeEventListener("mousedown", r);
          };
        }
      }, [t, e]);
      0;
      const a = Y.useCallback(() => i(gU), []);
      0;
      b_(Y.useCallback(async () => {
        if (n) {
          const e = await n();
          const s = "y" === t ? 0 : e.x;
          const a = "x" === t ? 0 : e.y;
          i(e => ({
            x: e.x + 2 * s,
            y: e.y + 2 * a
          }));
        }
      }, [n, t]), t && undefined !== n);
      0;
      return Y.useMemo(() => [t ? s : gU, a], [s, t, a]);
    };
    X.add("game-ui/common/svg/utils/use-pan.ts", {
      get usePan() {
        return pU;
      },
      set usePan(e) {
        pU = e;
      }
    });
    const fU = {
      x: 1,
      y: 1
    };
    var xU = (e, t, n, s) => {
      0;
      const [i, a] = Y.useState(fU);
      0;
      const o = Y.useRef(t);
      0;
      const r = Y.useCallback((e, t, s, i, o = false) => {
        a(a => {
          let r = a.x;
          let l = a.y;
          if ("y" !== n && !s) {
            if (o) {
              r = a.x + 10 * e;
            } else {
              const n = e || t;
              r = a.x + .25 * Math.sign(n);
            }
          }
          if (!("x" === n || i)) {
            l = o ? a.y + 10 * t : a.y + .25 * Math.sign(t);
          }
          const c = {
            x: Math.min(100, Math.max(.1, r)),
            y: Math.min(100, Math.max(.1, l))
          };
          return c.x === a.x && c.y === a.y ? a : c;
        });
      }, [n]);
      0;
      const l = Y.useCallback(() => a(fU), []);
      0;
      Y.useEffect(() => {
        if (n) {
          const t = e.current;
          const n = e => {
            e.preventDefault();
            r(e.deltaX, e.deltaY, e.ctrlKey, e.shiftKey);
          };
          t?.addEventListener("wheel", n);
          return () => {
            t?.removeEventListener("wheel", n);
          };
        }
      }, [r, e, n]);
      0;
      b_(Y.useCallback(async () => {
        if (s) {
          const e = await s();
          r(e.x, e.y, false, false, true);
        }
      }, [r, s]), n && undefined !== s);
      0;
      return Y.useMemo(() => {
        let n = e.current ? ((e, t) => {
          const n = (e.max.x - e.min.x) / 2 * t.x;
          const s = (e.max.x + e.min.x) / 2;
          const i = (e.max.y - e.min.y) / 2 * t.y;
          const a = (e.max.y + e.min.y) / 2;
          return {
            min: {
              x: s - n,
              y: a - i
            },
            max: {
              x: s + n,
              y: a + i
            }
          };
        })(t, i) : t;
        if (Kr(o.current, n, 2)) {
          n = o.current;
        } else {
          o.current = n;
        }
        return [n, l];
      }, [t, l, e, i]);
    };
    X.add("game-ui/common/svg/utils/use-zoom-bounds.ts", {
      get useZoomBounds() {
        return xU;
      },
      set useZoomBounds(e) {
        xU = e;
      }
    });
    var _U = (e, t) => {
      0;
      const [n, s] = Y.useState();
      const [i, a] = xU(e, t.bounds, t?.zoomable, t.zoomCallback);
      const [o, r] = pU(e, t.panable, t.panCallback);
      const l = Vm();
      const c = hm(e);
      const {
        padding: u = 0,
        inverted: d = true
      } = t || {};
      0;
      const m = Y.useCallback(() => {
        a();
        r();
      }, [a, r]);
      0;
      Y.useEffect(() => {
        if (!c || !c.width || !c.height) {
          return;
        }
        const e = e => e * l;
        const {
          width: t,
          height: n
        } = c;
        const a = mU(u, e, t, n);
        let r = i || {
          min: {
            x: 0,
            y: 0
          },
          max: {
            x: t,
            y: n
          }
        };
        const h = (t - (a.left + a.right)) / (r.max.x - r.min.x);
        const g = (n - (a.top + a.bottom)) / (r.max.y - r.min.y);
        if (o && (o.x || o.y)) {
          const e = {
            x: o.x / h,
            y: o.y / g * (d ? -1 : 1)
          };
          r = {
            min: {
              x: r.min.x + e.x,
              y: r.min.y + e.y
            },
            max: {
              x: r.max.x + e.x,
              y: r.max.y + e.y
            }
          };
        }
        const p = {
          x: c.x,
          y: c.y
        };
        const f = e => a.left + (e - r.min.x) * h;
        const x = e => a.bottom + (e - r.min.y) * g;
        const v = hU(e => ({
          x: a.left + (e.x - r.min.x) * h,
          y: a.bottom + (e.y - r.min.y) * g
        }));
        const _ = e => (e - a.left) / h + r.min.x;
        const b = e => (e - a.bottom) / g + r.min.y;
        const T = hU(e => ({
          x: (e.x - a.left) / h + r.min.x,
          y: (e.y - a.bottom) / g + r.min.y
        }));
        const E = e => e / h;
        const I = e => e / g;
        const y = hU(e => ({
          x: e.x / h,
          y: e.y / g
        }));
        const S = e => e * h;
        const j = e => e * g;
        const C = hU(e => ({
          x: e.x * h,
          y: e.y * g
        }));
        const N = e => ({
          x: e.clientX - p.x,
          y: d ? n - (e.clientY - p.y) : e.clientY - p.y
        });
        s({
          size: {
            width: t,
            height: n
          },
          bounds: r,
          offset: p,
          inverted: d,
          padding: a,
          px: _,
          py: b,
          vx: f,
          vy: x,
          sx: E,
          sy: I,
          svx: S,
          svy: j,
          rem: e,
          posFromPoint: v,
          pointFromPos: T,
          posFromMouse: N,
          pointFromMouse: e => T({
            x: e.clientX - p.x,
            y: d ? n - (e.clientY - p.y) : e.clientY - p.y
          }),
          scaleToPoint: y,
          scaleToViewport: C,
          resetViewport: m
        });
      }, [i, u, d, o, l, m, c]);
      return n;
    };
    X.add("game-ui/common/svg/use-svg-setup.tsx", {
      get useSVGSetup() {
        return _U;
      },
      set useSVGSetup(e) {
        _U = e;
      }
    });
    0;
    const bU = Y.createContext({
      registerSVGContext: () => {}
    });
    var TU = ({
      children: e
    }) => {
      0;
      const [t, n] = Y.useState();
      const {
        registerSVGContext: s
      } = EU();
      0;
      Y.useEffect(() => {
        if (t && s) {
          s(t);
        }
      }, [t, s]);
      0;
      return z.jsx(bU.Provider, {
        value: {
          registerSVGContext: n,
          svg: t
        },
        children: e
      });
    };
    var EU = () => (0, Y.useContext)(bU);
    X.add("game-ui/common/svg/utils/svg-parent-context.tsx", {
      get SVGParentContextProvider() {
        return TU;
      },
      set SVGParentContextProvider(e) {
        TU = e;
      },
      get useSVGParent() {
        return EU;
      },
      set useSVGParent(e) {
        EU = e;
      }
    });
    const IU = {
      min: {
        x: 0,
        y: 0
      },
      max: {
        x: 1,
        y: 1
      }
    };
    var yU = ({
      inverted: e = true,
      children: t,
      bounds: n = IU,
      zoomable: s,
      panable: i,
      padding: a,
      zoomCallback: o,
      panCallback: r,
      ...l
    }) => {
      0;
      const c = Y.useRef(null);
      const u = _U(c, {
        bounds: n,
        inverted: e,
        padding: a,
        zoomable: s,
        panable: i,
        zoomCallback: o,
        panCallback: r
      });
      const d = dU();
      const {
        registerSVGContext: m
      } = EU();
      0;
      Y.useEffect(() => {
        d.updateViewport(u);
      }, [d, u]);
      0;
      const h = Y.useMemo(() => {
        const e = {
          viewport: u,
          events: d.events
        };
        requestAnimationFrame(() => m(e));
        return e;
      }, [u, d, m]);
      const g = e ? `translate(0 ${u?.size.height}) scale(1 -1)` : "";
      0;
      0;
      return z.jsx(aU.Provider, {
        value: h,
        children: z.jsx(cU, {
          interaction: d,
          viewport: u,
          ref: c,
          ...l,
          children: !!h.viewport && (0, z.jsx)("g", {
            transform: g,
            children: t
          })
        })
      });
    };
    X.add("game-ui/common/svg/svg.tsx", {
      get SVG() {
        return yU;
      },
      set SVG(e) {
        yU = e;
      }
    });
    X.add("game-ui/common/svg/index.ts", {});
    const SU = Math.sqrt(50);
    const jU = Math.sqrt(10);
    const CU = Math.sqrt(2);
    function NU(e, t, n) {
      const s = (t - e) / Math.max(0, n);
      const i = Math.floor(Math.log10(s));
      const a = s / Math.pow(10, i);
      const o = a >= SU ? 10 : a >= jU ? 5 : a >= CU ? 2 : 1;
      let r;
      let l;
      let c;
      if (i < 0) {
        c = Math.pow(10, -i) / o;
        r = Math.round(e * c);
        l = Math.round(t * c);
        if (r / c < e) {
          ++r;
        }
        if (l / c > t) {
          --l;
        }
        c = -c;
      } else {
        c = Math.pow(10, i) * o;
        r = Math.round(e / c);
        l = Math.round(t / c);
        if (r * c < e) {
          ++r;
        }
        if (l * c > t) {
          --l;
        }
      }
      return l < r && .5 <= n && n < 2 ? NU(e, t, 2 * n) : [r, l, c];
    }
    function wU(e, t, n) {
      return NU(e = +e, t = +t, n = +n)[2];
    }
    function OU(e, t) {
      return null == e || null == t ? NaN : e < t ? -1 : e > t ? 1 : e >= t ? 0 : NaN;
    }
    function PU(e, t) {
      return null == e || null == t ? NaN : t < e ? -1 : t > e ? 1 : t >= e ? 0 : NaN;
    }
    function LU(e) {
      let t;
      let n;
      let s;
      function i(e, s, i = 0, a = e.length) {
        if (i < a) {
          if (0 !== t(s, s)) {
            return a;
          }
          do {
            const t = i + a >>> 1;
            if (n(e[t], s) < 0) {
              i = t + 1;
            } else {
              a = t;
            }
          } while (i < a);
        }
        return i;
      }
      if (2 !== e.length) {
        t = OU;
        n = (t, n) => null == e(t) || null == n ? NaN : e(t) < n ? -1 : e(t) > n ? 1 : e(t) >= n ? 0 : NaN;
        s = (t, n) => e(t) - n;
      } else {
        t = e === OU || e === PU ? e : AU;
        n = e;
        s = e;
      }
      return {
        left: i,
        center: function (e, t, n = 0, a = e.length) {
          const o = i(e, t, n, a - 1);
          return o > n && s(e[o - 1], t) > -s(e[o], t) ? o - 1 : o;
        },
        right: function (e, s, i = 0, a = e.length) {
          if (i < a) {
            if (0 !== t(s, s)) {
              return a;
            }
            do {
              const t = i + a >>> 1;
              if (n(e[t], s) <= 0) {
                i = t + 1;
              } else {
                a = t;
              }
            } while (i < a);
          }
          return i;
        }
      };
    }
    function AU() {
      return 0;
    }
    const MU = LU(OU);
    const RU = MU.right;
    MU.left;
    LU(function (e) {
      return null === e ? NaN : +e;
    }).center;
    const kU = RU;
    function DU(e, t, n) {
      e.prototype = t.prototype = n;
      n.constructor = e;
    }
    function FU(e, t) {
      var n = Object.create(e.prototype);
      for (var s in t) n[s] = t[s];
      return n;
    }
    function UU() {}
    var GU = 1.4285714285714286;
    var WU = /^#([0-9a-f]{3,8})$/;
    var zU = new RegExp(`^rgb\\(${"\\s*([+-]?\\d+)\\s*"},${"\\s*([+-]?\\d+)\\s*"},${"\\s*([+-]?\\d+)\\s*"}\\)$`);
    var YU = new RegExp(`^rgb\\(${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"}\\)$`);
    var $U = new RegExp(`^rgba\\(${"\\s*([+-]?\\d+)\\s*"},${"\\s*([+-]?\\d+)\\s*"},${"\\s*([+-]?\\d+)\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*"}\\)$`);
    var qU = new RegExp(`^rgba\\(${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*"}\\)$`);
    var XU = new RegExp(`^hsl\\(${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"}\\)$`);
    var QU = new RegExp(`^hsla\\(${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*"},${"\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*"}\\)$`);
    var ZU = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    function JU() {
      return this.rgb().formatHex();
    }
    function eB() {
      return this.rgb().formatRgb();
    }
    function tB(e) {
      var t;
      var n;
      e = (e + "").trim().toLowerCase();
      return (t = WU.exec(e)) ? (n = t[1].length, t = parseInt(t[1], 16), 6 === n ? new aB(t >> 16 & 255, t >> 8 & 255, 255 & t, 1) : 3 === n ? new aB(t >> 8 & 15 | t >> 4 & 240, t >> 4 & 15 | 240 & t, (15 & t) << 4 | 15 & t, 1) : 8 === n ? sB(t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, (255 & t) / 255) : 4 === n ? sB(t >> 12 & 15 | t >> 8 & 240, t >> 8 & 15 | t >> 4 & 240, t >> 4 & 15 | 240 & t, ((15 & t) << 4 | 15 & t) / 255) : null) : (t = zU.exec(e)) ? new aB(t[1], t[2], t[3], 1) : (t = YU.exec(e)) ? new aB(255 * t[1] / 100, 255 * t[2] / 100, 255 * t[3] / 100, 1) : (t = $U.exec(e)) ? sB(t[1], t[2], t[3], t[4]) : (t = qU.exec(e)) ? sB(255 * t[1] / 100, 255 * t[2] / 100, 255 * t[3] / 100, t[4]) : (t = XU.exec(e)) ? dB(t[1], t[2] / 100, t[3] / 100, 1) : (t = QU.exec(e)) ? dB(t[1], t[2] / 100, t[3] / 100, t[4]) : ZU.hasOwnProperty(e) ? new aB(ZU[e] >> 16 & 255, ZU[e] >> 8 & 255, 255 & ZU[e], 1) : "transparent" === e ? new aB(NaN, NaN, NaN, 0) : null;
    }
    function nB(e) {
      return new aB(e >> 16 & 255, e >> 8 & 255, 255 & e, 1);
    }
    function sB(e, t, n, s) {
      if (s <= 0) {
        e = t = n = NaN;
      }
      return new aB(e, t, n, s);
    }
    function iB(e, t, n, s) {
      return 1 === arguments.length ? ((i = e) instanceof UU || (i = tB(i)), i ? new aB((i = i.rgb()).r, i.g, i.b, i.opacity) : new aB()) : new aB(e, t, n, null == s ? 1 : s);
      var i;
    }
    function aB(e, t, n, s) {
      this.r = +e;
      this.g = +t;
      this.b = +n;
      this.opacity = +s;
    }
    function oB() {
      return `#${uB(this.r)}${uB(this.g)}${uB(this.b)}`;
    }
    function rB() {
      const e = isNaN(this.opacity) ? 1 : Math.max(0, Math.min(1, this.opacity));
      return `${1 === e ? "rgb(" : "rgba("}${Math.max(0, Math.min(255, Math.round(this.r) || 0))}, ${Math.max(0, Math.min(255, Math.round(this.g) || 0))}, ${Math.max(0, Math.min(255, Math.round(this.b) || 0))}${1 === e ? ")" : `, ${e})`}`;
    }
    function lB(e) {
      return isNaN(e) ? 1 : Math.max(0, Math.min(1, e));
    }
    function cB(e) {
      return Math.max(0, Math.min(255, Math.round(e) || 0));
    }
    function uB(e) {
      return ((e = Math.max(0, Math.min(255, Math.round(e) || 0))) < 16 ? "0" : "") + e.toString(16);
    }
    function dB(e, t, n, s) {
      if (s <= 0) {
        e = t = n = NaN;
      } else if (n <= 0 || n >= 1) {
        e = t = NaN;
      } else if (t <= 0) {
        e = NaN;
      }
      return new hB(e, t, n, s);
    }
    function mB(e) {
      if (e instanceof hB) {
        return new hB(e.h, e.s, e.l, e.opacity);
      }
      if (!(e instanceof UU)) {
        e = tB(e);
      }
      if (!e) {
        return new hB();
      }
      if (e instanceof hB) {
        return e;
      }
      var t = (e = e.rgb()).r / 255;
      var n = e.g / 255;
      var s = e.b / 255;
      var i = Math.min(t, n, s);
      var a = Math.max(t, n, s);
      var o = NaN;
      var r = a - i;
      var l = (a + i) / 2;
      if (r) {
        o = t === a ? (n - s) / r + 6 * (n < s) : n === a ? (s - t) / r + 2 : (t - n) / r + 4;
        r /= l < .5 ? a + i : 2 - a - i;
        o *= 60;
      } else {
        r = l > 0 && l < 1 ? 0 : o;
      }
      return new hB(o, r, l, e.opacity);
    }
    function hB(e, t, n, s) {
      this.h = +e;
      this.s = +t;
      this.l = +n;
      this.opacity = +s;
    }
    function gB(e) {
      return (e = (e || 0) % 360) < 0 ? e + 360 : e;
    }
    function pB(e) {
      return Math.max(0, Math.min(1, e || 0));
    }
    function fB(e, t, n) {
      return 255 * (e < 60 ? t + (n - t) * e / 60 : e < 180 ? n : e < 240 ? t + (n - t) * (240 - e) / 60 : t);
    }
    function xB(e, t, n, s, i) {
      var a = e * e;
      var o = a * e;
      return ((1 - 3 * e + 3 * a - o) * t + (4 - 6 * a + 3 * o) * n + (1 + 3 * e + 3 * a - 3 * o) * s + o * i) / 6;
    }
    DU(UU, tB, {
      copy(e) {
        return Object.assign(new this.constructor(), this, e);
      },
      displayable() {
        return this.rgb().displayable();
      },
      hex: JU,
      formatHex: JU,
      formatHex8: function () {
        return this.rgb().formatHex8();
      },
      formatHsl: function () {
        return mB(this).formatHsl();
      },
      formatRgb: eB,
      toString: eB
    });
    DU(aB, iB, FU(UU, {
      brighter(e) {
        e = null == e ? GU : Math.pow(GU, e);
        return new aB(this.r * e, this.g * e, this.b * e, this.opacity);
      },
      darker(e) {
        e = null == e ? .7 : Math.pow(.7, e);
        return new aB(this.r * e, this.g * e, this.b * e, this.opacity);
      },
      rgb() {
        return this;
      },
      clamp() {
        return new aB(Math.max(0, Math.min(255, Math.round(this.r) || 0)), Math.max(0, Math.min(255, Math.round(this.g) || 0)), Math.max(0, Math.min(255, Math.round(this.b) || 0)), isNaN(this.opacity) ? 1 : Math.max(0, Math.min(1, this.opacity)));
      },
      displayable() {
        return -.5 <= this.r && this.r < 255.5 && -.5 <= this.g && this.g < 255.5 && -.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
      },
      hex: oB,
      formatHex: oB,
      formatHex8: function () {
        return `#${uB(this.r)}${uB(this.g)}${uB(this.b)}${uB(255 * (isNaN(this.opacity) ? 1 : this.opacity))}`;
      },
      formatRgb: rB,
      toString: rB
    }));
    DU(hB, function (e, t, n, s) {
      return 1 === arguments.length ? mB(e) : new hB(e, t, n, null == s ? 1 : s);
    }, FU(UU, {
      brighter(e) {
        e = null == e ? GU : Math.pow(GU, e);
        return new hB(this.h, this.s, this.l * e, this.opacity);
      },
      darker(e) {
        e = null == e ? .7 : Math.pow(.7, e);
        return new hB(this.h, this.s, this.l * e, this.opacity);
      },
      rgb() {
        var e = this.h % 360 + 360 * (this.h < 0);
        var t = isNaN(e) || isNaN(this.s) ? 0 : this.s;
        var n = this.l;
        var s = n + (n < .5 ? n : 1 - n) * t;
        var i = 2 * n - s;
        return new aB(255 * ((e >= 240 ? e - 240 : e + 120) < 60 ? i + (s - i) * (e >= 240 ? e - 240 : e + 120) / 60 : (e >= 240 ? e - 240 : e + 120) < 180 ? s : (e >= 240 ? e - 240 : e + 120) < 240 ? i + (s - i) * (240 - (e >= 240 ? e - 240 : e + 120)) / 60 : i), 255 * (e < 60 ? i + (s - i) * e / 60 : e < 180 ? s : e < 240 ? i + (s - i) * (240 - e) / 60 : i), 255 * ((e < 120 ? e + 240 : e - 120) < 60 ? i + (s - i) * (e < 120 ? e + 240 : e - 120) / 60 : (e < 120 ? e + 240 : e - 120) < 180 ? s : (e < 120 ? e + 240 : e - 120) < 240 ? i + (s - i) * (240 - (e < 120 ? e + 240 : e - 120)) / 60 : i), this.opacity);
      },
      clamp() {
        return new hB(gB(this.h), Math.max(0, Math.min(1, this.s || 0)), Math.max(0, Math.min(1, this.l || 0)), isNaN(this.opacity) ? 1 : Math.max(0, Math.min(1, this.opacity)));
      },
      displayable() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
      },
      formatHsl() {
        const e = isNaN(this.opacity) ? 1 : Math.max(0, Math.min(1, this.opacity));
        return `${1 === e ? "hsl(" : "hsla("}${gB(this.h)}, ${100 * Math.max(0, Math.min(1, this.s || 0))}%, ${100 * Math.max(0, Math.min(1, this.l || 0))}%${1 === e ? ")" : `, ${e})`}`;
      }
    }));
    const vB = e => () => e;
    function _B(e, t) {
      return function (n) {
        return e + n * t;
      };
    }
    function bB(e) {
      return 1 == (e = +e) ? TB : function (t, n) {
        return n - t ? function (e, t, n) {
          e = Math.pow(e, n);
          t = Math.pow(t, n) - e;
          n = 1 / n;
          return function (s) {
            return Math.pow(e + s * t, n);
          };
        }(t, n, e) : vB(isNaN(t) ? n : t);
      };
    }
    function TB(e, t) {
      var n = t - e;
      return n ? _B(e, n) : vB(isNaN(e) ? t : e);
    }
    const EB = function e(t) {
      var n = bB(t);
      function s(e, t) {
        var s = n((e = iB(e)).r, (t = iB(t)).r);
        var i = n(e.g, t.g);
        var a = n(e.b, t.b);
        var o = TB(e.opacity, t.opacity);
        return function (t) {
          e.r = s(t);
          e.g = i(t);
          e.b = a(t);
          e.opacity = o(t);
          return e + "";
        };
      }
      s.gamma = e;
      return s;
    }(1);
    function IB(e) {
      return function (t) {
        var n;
        var s;
        var i = t.length;
        var a = new Array(i);
        var o = new Array(i);
        var r = new Array(i);
        for (n = 0; n < i; ++n) {
          s = iB(t[n]);
          a[n] = s.r || 0;
          o[n] = s.g || 0;
          r[n] = s.b || 0;
        }
        a = e(a);
        o = e(o);
        r = e(r);
        s.opacity = 1;
        return function (e) {
          s.r = a(e);
          s.g = o(e);
          s.b = r(e);
          return s + "";
        };
      };
    }
    IB(function (e) {
      var t = e.length - 1;
      return function (n) {
        var s = n <= 0 ? n = 0 : n >= 1 ? (n = 1, t - 1) : Math.floor(n * t);
        var i = e[s];
        var a = e[s + 1];
        var o = s > 0 ? e[s - 1] : 2 * i - a;
        var r = s < t - 1 ? e[s + 2] : 2 * a - i;
        return xB((n - s / t) * t, o, i, a, r);
      };
    });
    IB(function (e) {
      var t = e.length;
      return function (n) {
        var s = Math.floor(((n %= 1) < 0 ? ++n : n) * t);
        var i = e[(s + t - 1) % t];
        var a = e[s % t];
        var o = e[(s + 1) % t];
        var r = e[(s + 2) % t];
        return xB((n - s / t) * t, i, a, o, r);
      };
    });
    function yB(e, t) {
      var n;
      var s = t ? t.length : 0;
      var i = e ? Math.min(s, e.length) : 0;
      var a = new Array(i);
      var o = new Array(s);
      for (n = 0; n < i; ++n) {
        a[n] = LB(e[n], t[n]);
      }
      for (; n < s; ++n) {
        o[n] = t[n];
      }
      return function (e) {
        for (n = 0; n < i; ++n) {
          o[n] = a[n](e);
        }
        return o;
      };
    }
    function SB(e, t) {
      var n = new Date();
      e = +e;
      t = +t;
      return function (s) {
        n.setTime(e * (1 - s) + t * s);
        return n;
      };
    }
    function jB(e, t) {
      e = +e;
      t = +t;
      return function (n) {
        return e * (1 - n) + t * n;
      };
    }
    function CB(e, t) {
      var n;
      var s = {};
      var i = {};
      if (!(null !== e && "object" == typeof e)) {
        e = {};
      }
      if (!(null !== t && "object" == typeof t)) {
        t = {};
      }
      for (n in t) if (n in e) {
        s[n] = LB(e[n], t[n]);
      } else {
        i[n] = t[n];
      }
      return function (e) {
        for (n in s) i[n] = s[n](e);
        return i;
      };
    }
    var NB = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    var wB = new RegExp(NB.source, "g");
    function OB(e, t) {
      var n;
      var s;
      var i;
      var a = NB.lastIndex = wB.lastIndex = 0;
      var o = -1;
      var r = [];
      var l = [];
      e += "";
      for (t += ""; (n = NB.exec(e)) && (s = wB.exec(t));) {
        if ((i = s.index) > a) {
          i = t.slice(a, i);
          if (r[o]) {
            r[o] += i;
          } else {
            r[++o] = i;
          }
        }
        if ((n = n[0]) === (s = s[0])) {
          if (r[o]) {
            r[o] += s;
          } else {
            r[++o] = s;
          }
        } else {
          r[++o] = null;
          l.push({
            i: o,
            x: jB(n, s)
          });
        }
        a = wB.lastIndex;
      }
      if (a < t.length) {
        i = t.slice(a);
        if (r[o]) {
          r[o] += i;
        } else {
          r[++o] = i;
        }
      }
      return r.length < 2 ? l[0] ? function (e) {
        return function (t) {
          return e(t) + "";
        };
      }(l[0].x) : function (e) {
        return function () {
          return e;
        };
      }(t) : (t = l.length, function (e) {
        var n;
        for (var s = 0; s < t; ++s) {
          r[(n = l[s]).i] = n.x(e);
        }
        return r.join("");
      });
    }
    function PB(e, t) {
      if (!t) {
        t = [];
      }
      var n;
      var s = e ? Math.min(t.length, e.length) : 0;
      var i = t.slice();
      return function (a) {
        for (n = 0; n < s; ++n) {
          i[n] = e[n] * (1 - a) + t[n] * a;
        }
        return i;
      };
    }
    function LB(e, t) {
      var n;
      var s;
      var i = typeof t;
      return null == t || "boolean" === i ? vB(t) : ("number" === i ? jB : "string" === i ? (n = tB(t)) ? (t = n, EB) : OB : t instanceof tB ? EB : t instanceof Date ? SB : (s = t, !ArrayBuffer.isView(s) || s instanceof DataView ? Array.isArray(t) ? yB : "function" != typeof t.valueOf && "function" != typeof t.toString || isNaN(t) ? CB : jB : PB))(e, t);
    }
    function AB(e, t) {
      e = +e;
      t = +t;
      return function (n) {
        return Math.round(e * (1 - n) + t * n);
      };
    }
    function MB(e) {
      return +e;
    }
    var RB = [0, 1];
    function kB(e) {
      return e;
    }
    function DB(e, t) {
      return (t -= e = +e) ? function (n) {
        return (n - e) / t;
      } : (n = isNaN(t) ? NaN : .5, function () {
        return n;
      });
      var n;
    }
    function FB(e, t, n) {
      var s = e[0];
      var i = e[1];
      var a = t[0];
      var o = t[1];
      if (i < s) {
        s = DB(i, s);
        a = n(o, a);
      } else {
        s = DB(s, i);
        a = n(a, o);
      }
      return function (e) {
        return a(s(e));
      };
    }
    function UB(e, t, n) {
      var s = Math.min(e.length, t.length) - 1;
      var i = new Array(s);
      var a = new Array(s);
      var o = -1;
      for (e[s] < e[0] && (e = e.slice().reverse(), t = t.slice().reverse()); ++o < s;) {
        i[o] = DB(e[o], e[o + 1]);
        a[o] = n(t[o], t[o + 1]);
      }
      return function (t) {
        var n = kU(e, t, 1, s) - 1;
        return a[n](i[n](t));
      };
    }
    function BB() {
      var e;
      var t;
      var n;
      var s;
      var i;
      var a;
      var o = RB;
      var r = RB;
      var l = LB;
      var c = kB;
      function u() {
        var e;
        var t;
        var n;
        var l = Math.min(o.length, r.length);
        if (c !== kB) {
          e = o[0];
          t = o[l - 1];
          if (e > t) {
            n = e;
            e = t;
            t = n;
          }
          c = function (n) {
            return Math.max(e, Math.min(t, n));
          };
        }
        s = l > 2 ? UB : FB;
        i = a = null;
        return d;
      }
      function d(t) {
        return null == t || isNaN(t = +t) ? n : (i || (i = s(o.map(e), r, l)))(e(c(t)));
      }
      d.invert = function (n) {
        return c(t((a || (a = s(r, o.map(e), jB)))(n)));
      };
      d.domain = function (e) {
        return arguments.length ? (o = Array.from(e, MB), u()) : o.slice();
      };
      d.range = function (e) {
        return arguments.length ? (r = Array.from(e), u()) : r.slice();
      };
      d.rangeRound = function (e) {
        r = Array.from(e);
        l = AB;
        return u();
      };
      d.clamp = function (e) {
        return arguments.length ? (c = !!e || kB, u()) : c !== kB;
      };
      d.interpolate = function (e) {
        return arguments.length ? (l = e, u()) : l;
      };
      d.unknown = function (e) {
        return arguments.length ? (n = e, d) : n;
      };
      return function (n, s) {
        e = n;
        t = s;
        return u();
      };
    }
    function GB(e, t) {
      switch (arguments.length) {
        case 0:
          break;
        case 1:
          this.range(e);
          break;
        default:
          this.range(t).domain(e);
      }
      return this;
    }
    var VB;
    var HB = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    function KB(e) {
      if (!(t = HB.exec(e))) {
        throw new Error("invalid format: " + e);
      }
      var t;
      return new WB({
        fill: t[1],
        align: t[2],
        sign: t[3],
        symbol: t[4],
        zero: t[5],
        width: t[6],
        comma: t[7],
        precision: t[8] && t[8].slice(1),
        trim: t[9],
        type: t[10]
      });
    }
    function WB(e) {
      this.fill = undefined === e.fill ? " " : e.fill + "";
      this.align = undefined === e.align ? ">" : e.align + "";
      this.sign = undefined === e.sign ? "-" : e.sign + "";
      this.symbol = undefined === e.symbol ? "" : e.symbol + "";
      this.zero = !!e.zero;
      this.width = undefined === e.width ? undefined : +e.width;
      this.comma = !!e.comma;
      this.precision = undefined === e.precision ? undefined : +e.precision;
      this.trim = !!e.trim;
      this.type = undefined === e.type ? "" : e.type + "";
    }
    function zB(e, t) {
      if ((n = (e = t ? e.toExponential(t - 1) : e.toExponential()).indexOf("e")) < 0) {
        return null;
      }
      var n;
      var s = e.slice(0, n);
      return [s.length > 1 ? s[0] + s.slice(2) : s, +e.slice(n + 1)];
    }
    function YB(e) {
      return (e = zB(Math.abs(e))) ? e[1] : NaN;
    }
    function $B(e, t) {
      var n = zB(e, t);
      if (!n) {
        return e + "";
      }
      var s = n[0];
      var i = n[1];
      return i < 0 ? "0." + new Array(-i).join("0") + s : s.length > i + 1 ? s.slice(0, i + 1) + "." + s.slice(i + 1) : s + new Array(i - s.length + 2).join("0");
    }
    KB.prototype = WB.prototype;
    WB.prototype.toString = function () {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (undefined === this.width ? "" : Math.max(1, 0 | this.width)) + (this.comma ? "," : "") + (undefined === this.precision ? "" : "." + Math.max(0, 0 | this.precision)) + (this.trim ? "~" : "") + this.type;
    };
    const qB = {
      "%": (e, t) => (100 * e).toFixed(t),
      b: e => Math.round(e).toString(2),
      c: e => e + "",
      d: function (e) {
        return Math.abs(e = Math.round(e)) >= 1e21 ? e.toLocaleString("en").replace(/,/g, "") : e.toString(10);
      },
      e: (e, t) => e.toExponential(t),
      f: (e, t) => e.toFixed(t),
      g: (e, t) => e.toPrecision(t),
      o: e => Math.round(e).toString(8),
      p: (e, t) => $B(100 * e, t),
      r: $B,
      s: function (e, t) {
        var n = zB(e, t);
        if (!n) {
          return e + "";
        }
        var s = n[0];
        var i = n[1];
        var a = i - (VB = 3 * Math.max(-8, Math.min(8, Math.floor(i / 3)))) + 1;
        var o = s.length;
        return a === o ? s : a > o ? s + new Array(a - o + 1).join("0") : a > 0 ? s.slice(0, a) + "." + s.slice(a) : "0." + new Array(1 - a).join("0") + zB(e, Math.max(0, t + a - 1))[0];
      },
      X: e => Math.round(e).toString(16).toUpperCase(),
      x: e => Math.round(e).toString(16)
    };
    function XB(e) {
      return e;
    }
    var QB;
    var ZB;
    var JB;
    var eG = Array.prototype.map;
    var tG = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
    function nG(e) {
      var t;
      var n;
      var s = undefined === e.grouping || undefined === e.thousands ? XB : (t = eG.call(e.grouping, Number), n = e.thousands + "", function (e, s) {
        var i = e.length;
        var a = [];
        var o = 0;
        var r = t[0];
        for (var l = 0; i > 0 && r > 0 && (l + r + 1 > s && (r = Math.max(1, s - l)), a.push(e.substring(i -= r, i + r)), !((l += r + 1) > s));) {
          r = t[o = (o + 1) % t.length];
        }
        return a.reverse().join(n);
      });
      var i = undefined === e.currency ? "" : e.currency[0] + "";
      var a = undefined === e.currency ? "" : e.currency[1] + "";
      var o = undefined === e.decimal ? "." : e.decimal + "";
      var r = undefined === e.numerals ? XB : function (e) {
        return function (t) {
          return t.replace(/[0-9]/g, function (t) {
            return e[+t];
          });
        };
      }(eG.call(e.numerals, String));
      var l = undefined === e.percent ? "%" : e.percent + "";
      var c = undefined === e.minus ? "−" : e.minus + "";
      var u = undefined === e.nan ? "NaN" : e.nan + "";
      function d(e) {
        var t = (e = KB(e)).fill;
        var n = e.align;
        var d = e.sign;
        var m = e.symbol;
        var h = e.zero;
        var g = e.width;
        var p = e.comma;
        var f = e.precision;
        var x = e.trim;
        var v = e.type;
        if ("n" === v) {
          p = true;
          v = "g";
        } else if (!qB[v]) {
          if (undefined === f) {
            f = 12;
          }
          x = true;
          v = "g";
        }
        if (h || "0" === t && "=" === n) {
          h = true;
          t = "0";
          n = "=";
        }
        var _ = "$" === m ? i : "#" === m && /[boxX]/.test(v) ? "0" + v.toLowerCase() : "";
        var b = "$" === m ? a : /[%p]/.test(v) ? l : "";
        var T = qB[v];
        var E = /[defgprs%]/.test(v);
        function I(e) {
          var i;
          var a;
          var l;
          var m = _;
          var I = b;
          if ("c" === v) {
            I = T(e) + I;
            e = "";
          } else {
            var y = (e = +e) < 0 || 1 / e < 0;
            e = isNaN(e) ? u : T(Math.abs(e), f);
            if (x) {
              e = function (e) {
                var t;
                var n = e.length;
                var s = 1;
                e: for (var i = -1; s < n; ++s) {
                  switch (e[s]) {
                    case ".":
                      i = t = s;
                      break;
                    case "0":
                      if (0 === i) {
                        i = s;
                      }
                      t = s;
                      break;
                    default:
                      if (!+e[s]) {
                        break e;
                      }
                      if (i > 0) {
                        i = 0;
                      }
                  }
                }
                return i > 0 ? e.slice(0, i) + e.slice(t + 1) : e;
              }(e);
            }
            if (y && 0 == +e && "+" !== d) {
              y = false;
            }
            m = (y ? "(" === d ? d : c : "-" === d || "(" === d ? "" : d) + m;
            I = ("s" === v ? tG[8 + VB / 3] : "") + I + (y && "(" === d ? ")" : "");
            if (E) {
              i = -1;
              for (a = e.length; ++i < a;) {
                if (48 > (l = e.charCodeAt(i)) || l > 57) {
                  I = (46 === l ? o + e.slice(i + 1) : e.slice(i)) + I;
                  e = e.slice(0, i);
                  break;
                }
              }
            }
          }
          if (p && !h) {
            e = s(e, Infinity);
          }
          var S = m.length + e.length + I.length;
          var j = S < g ? new Array(g - S + 1).join(t) : "";
          if (p && h) {
            e = s(j + e, j.length ? g - I.length : Infinity);
            j = "";
          }
          switch (n) {
            case "<":
              e = m + e + I + j;
              break;
            case "=":
              e = m + j + e + I;
              break;
            case "^":
              e = j.slice(0, S = j.length >> 1) + m + e + I + j.slice(S);
              break;
            default:
              e = j + m + e + I;
          }
          return r(e);
        }
        f = undefined === f ? 6 : /[gprs]/.test(v) ? Math.max(1, Math.min(21, f)) : Math.max(0, Math.min(20, f));
        I.toString = function () {
          return e + "";
        };
        return I;
      }
      return {
        format: d,
        formatPrefix: function (e, t) {
          (e = KB(e)).type = "f";
          var n = d(e);
          var s = 3 * Math.max(-8, Math.min(8, Math.floor(YB(t) / 3)));
          var i = Math.pow(10, -s);
          var a = tG[8 + s / 3];
          return function (e) {
            return n(i * e) + a;
          };
        }
      };
    }
    function sG(e, t, n, s) {
      var i;
      var a = function (e, t, n) {
        n = +n;
        const s = (t = +t) < (e = +e);
        const i = s ? wU(t, e, n) : wU(e, t, n);
        return (s ? -1 : 1) * (i < 0 ? 1 / -i : i);
      }(e, t, n);
      switch ((s = KB(null == s ? ",f" : s)).type) {
        case "s":
          var o = Math.max(Math.abs(e), Math.abs(t));
          if (!(null != s.precision || isNaN(i = function (e, t) {
            return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(YB(t) / 3))) - YB(Math.abs(e)));
          }(a, o)))) {
            s.precision = i;
          }
          return JB(s, o);
        case "":
        case "e":
        case "g":
        case "p":
        case "r":
          if (!(null != s.precision || isNaN(i = function (e, t) {
            e = Math.abs(e);
            t = Math.abs(t) - e;
            return Math.max(0, YB(t) - YB(e)) + 1;
          }(a, Math.max(Math.abs(e), Math.abs(t)))))) {
            s.precision = i - ("e" === s.type);
          }
          break;
        case "f":
        case "%":
          if (!(null != s.precision || isNaN(i = function (e) {
            return Math.max(0, -YB(Math.abs(e)));
          }(a)))) {
            s.precision = i - 2 * ("%" === s.type);
          }
      }
      return ZB(s);
    }
    function iG(e) {
      var t = e.domain;
      e.ticks = function (e) {
        var n = t();
        return function (e, t, n) {
          if (!((n = +n) > 0)) {
            return [];
          }
          if ((e = +e) == (t = +t)) {
            return [e];
          }
          const s = t < e;
          const [i, a, o] = s ? NU(t, e, n) : NU(e, t, n);
          if (!(a >= i)) {
            return [];
          }
          const r = a - i + 1;
          const l = new Array(r);
          if (s) {
            if (o < 0) {
              for (let e = 0; e < r; ++e) {
                l[e] = (a - e) / -o;
              }
            } else {
              for (let e = 0; e < r; ++e) {
                l[e] = (a - e) * o;
              }
            }
          } else if (o < 0) {
            for (let e = 0; e < r; ++e) {
              l[e] = (i + e) / -o;
            }
          } else {
            for (let e = 0; e < r; ++e) {
              l[e] = (i + e) * o;
            }
          }
          return l;
        }(n[0], n[n.length - 1], null == e ? 10 : e);
      };
      e.tickFormat = function (e, n) {
        var s = t();
        return sG(s[0], s[s.length - 1], null == e ? 10 : e, n);
      };
      e.nice = function (n) {
        if (null == n) {
          n = 10;
        }
        var s;
        var i;
        var a = t();
        var o = 0;
        var r = a.length - 1;
        var l = a[o];
        var c = a[r];
        var u = 10;
        for (c < l && (i = l, l = c, c = i, i = o, o = r, r = i); u-- > 0;) {
          if ((i = wU(l, c, n)) === s) {
            a[o] = l;
            a[r] = c;
            return t(a);
          }
          if (i > 0) {
            l = Math.floor(l / i) * i;
            c = Math.ceil(c / i) * i;
          } else {
            if (!(i < 0)) {
              break;
            }
            l = Math.ceil(l * i) / i;
            c = Math.floor(c * i) / i;
          }
          s = i;
        }
        return e;
      };
      return e;
    }
    function aG() {
      var e = BB()(kB, kB);
      e.copy = function () {
        return aG().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());
      };
      GB.apply(e, arguments);
      return iG(e);
    }
    QB = nG({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
    ZB = QB.format;
    JB = QB.formatPrefix;
    var oG = e => {
      const {
        viewport: {
          posFromPoint: t,
          rem: n
        }
      } = oU();
      const {
        d: s,
        strokeWidth: i,
        fill: a = "transparent",
        ...o
      } = e;
      0;
      const r = Y.useMemo(() => s?.replace(/(-?\d+\.?\d*),(-?\d+\.?\d*)/g, (e, n, s) => {
        const i = t(Number(n), Number(s));
        return `${i.x},${i.y}`;
      }).replace(/([HhVv])\s*?(-?\d+\.?\d*)/g, (e, n, s) => {
        const i = "h" === n.toLowerCase();
        const a = t(Number(s), Number(s));
        return `${n} ${i ? a.x : a.y}`;
      }), [s, t]);
      0;
      return z.jsx("path", {
        d: r,
        strokeWidth: i ? n(i) : undefined,
        fill: a,
        ...o
      });
    };
    X.add("game-ui/common/svg/elements/path.tsx", {
      get Path() {
        return oG;
      },
      set Path(e) {
        oG = e;
      }
    });
    let rG = {
      "grid-lines": "grid-lines_BXH",
      gridLines: "grid-lines_BXH",
      "axis-labels": "axis-labels_IjN",
      axisLabels: "axis-labels_IjN"
    };
    X.add("game-ui/common/svg/svg.module.scss", {
      get classes() {
        return rG;
      },
      set classes(e) {
        Object.assign(rG, e);
      }
    });
    var cG = e => {
      const {
        label: t,
        x: n,
        y: s,
        fontSize: i,
        color: a,
        rotation: o = 0,
        onTop: r,
        textAnchor: l
      } = e;
      let c;
      switch (typeof t) {
        case "string":
        case "object":
          c = t;
          break;
        default:
          c = e.label.toString().replace(/^(-)?0/, "$1") || "0";
      }
      0;
      0;
      return z.jsx("g", {
        transform: `translate(${n + .5 * i} ${s + i * (r ? .5 : -1.5)}) rotate(${o}deg)`,
        children: z.jsx("text", {
          transform: "scale(1 -1)",
          fontSize: i,
          fill: a,
          textAnchor: l,
          children: c
        })
      });
    };
    var uG = ({
      fixed: e,
      overdraw: t = false,
      textScale: n = 1,
      tickWidth: s = 100,
      tickHeight: i = 100,
      formatLabelX: a,
      formatLabelY: o
    }) => {
      const {
        viewport: r
      } = oU();
      const {
        size: l,
        rem: c,
        bounds: u,
        posFromPoint: d
      } = r;
      0;
      const {
        axesPath: m,
        xLabels: h,
        yLabels: g
      } = Y.useMemo(() => {
        if (!u) {
          return {};
        }
        let r = "";
        const m = Number(t) * Math.max(c(s) / l.width, c(i) / l.height) * 2;
        const h = 1 + 2 * m;
        const g = [];
        const p = [];
        const f = Math.ceil(l.width * h / c(s));
        const x = Math.ceil(l.height * h / c(i));
        const v = u.max.x - u.min.x;
        const _ = u.max.y - u.min.y;
        const b = u.min.x - v * m;
        const T = u.max.x + v * m;
        const E = u.min.y - _ * m;
        const I = u.max.y + _ * m;
        const y = aG().domain([b, T]).nice().ticks(f);
        for (let t = 0; t < y.length; t++) {
          const s = d(y[t], 0);
          const i = a ? a(y[t]) : y[t];
          const o = t === y.length - 1 ? "end" : "mid";
          0;
          g.push(z.jsx(cG, {
            x: s.x,
            y: e ? 0 : s.y,
            label: i,
            fontSize: c(11 * n),
            onTop: e,
            textAnchor: o
          }, `${t}-${i}-${s.x}`));
        }
        const S = aG().domain([E, I]).nice().ticks(x);
        for (let t = 0; t < S.length; t++) {
          const s = d(0, S[t]);
          const i = o ? o(S[t]) : S[t];
          0;
          p.push(z.jsx(cG, {
            x: e ? 0 : s.x,
            y: s.y,
            label: i,
            fontSize: c(11 * n),
            onTop: e
          }, `${t}-${i}-${s.y}`));
        }
        if (!e) {
          r += `M ${b},0 L ${T}, 0 `;
          r += `M 0, ${E} L 0, ${I}`;
        }
        return {
          axesPath: r,
          xLabels: g,
          yLabels: p
        };
      }, [u, t, c, s, l.width, l.height, i, e, d, a, n, o]);
      0;
      0;
      0;
      return z.jsxs("g", {
        className: rG.axisLabels,
        children: [m && (0, z.jsx)(oG, {
          d: m,
          strokeWidth: .5,
          stroke: "#fff7"
        }), z.jsx("g", {
          children: h
        }), z.jsx("g", {
          children: g
        })]
      });
    };
    X.add("game-ui/common/svg/components/axis-labels.tsx", {
      get GridLineAxisTick() {
        return cG;
      },
      set GridLineAxisTick(e) {
        cG = e;
      },
      get AxisLabels() {
        return uG;
      },
      set AxisLabels(e) {
        uG = e;
      }
    });
    var dG = ({
      halfSteps: e,
      overdraw: t = false,
      drawAxes: n = true,
      tickWidth: s = 100,
      tickHeight: i = 100
    }) => {
      const {
        viewport: a
      } = oU();
      const {
        size: o,
        rem: r,
        bounds: l
      } = a;
      0;
      const {
        gridPath: c,
        halfStepsGridPath: u
      } = Y.useMemo(() => {
        if (!l || !n) {
          return {};
        }
        let a = "\n";
        let c = "\n";
        const u = Number(t) * Math.max(r(s) / o.width, r(i) / o.height) * 2;
        const d = 1 + 2 * u;
        const m = l.max.x - l.min.x;
        const h = l.max.y - l.min.y;
        const g = l.min.x - m * u;
        const p = l.max.x + m * u;
        const f = l.min.y - h * u;
        const x = l.max.y + h * u;
        if (true === n || n.includes("x")) {
          const t = Math.ceil(o.width * d / r(s));
          const n = aG().domain([g, p]).nice().ticks(t);
          const i = (n[1] - n[0]) / 2;
          for (let t = 0; t < n.length; t++) {
            a += `M ${n[t]},${f} V ${x} `;
            a += "\n";
            if (e) {
              c += `M ${n[t] + i},${f} V ${x} `;
              c += "\n";
            }
          }
          a += "\n";
          c += "\n";
        }
        if (true === n || n.includes("y")) {
          const t = Math.ceil(o.height * d / r(i));
          const n = aG().domain([f, x]).nice().ticks(t);
          const s = (n[1] - n[0]) / 2;
          for (let t = 0; t < n.length; t++) {
            a += `M ${g},${n[t]} H ${p} `;
            a += "\n";
            if (e) {
              c += `M ${g},${n[t] + s} H ${p} `;
              c += "\n";
            }
          }
        }
        return {
          gridPath: a,
          halfStepsGridPath: c,
          xLabels: [],
          yLabels: []
        };
      }, [l, n, t, r, s, o.width, o.height, i, e]);
      0;
      0;
      return z.jsxs("g", {
        className: rG.gridLines,
        children: [z.jsx(oG, {
          d: c,
          strokeWidth: .5,
          stroke: "#fff3"
        }), u && (0, z.jsx)(oG, {
          d: u,
          strokeWidth: .5,
          stroke: "#fff1"
        })]
      });
    };
    X.add("game-ui/common/svg/components/grid-lines.tsx", {
      get GridLines() {
        return dG;
      },
      set GridLines(e) {
        dG = e;
      }
    });
    let mG = {
      "tooltip-base": "tooltip-base_zwi",
      tooltipBase: "tooltip-base_zwi",
      "tooltip-fade-in": "tooltip-fade-in_S9n",
      tooltipFadeIn: "tooltip-fade-in_S9n",
      fadeIn: "fadeIn_VY9",
      tooltip: "tooltip_xe4 tooltip-base_zwi tooltip-fade-in_S9n"
    };
    X.add("game-ui/common/tooltip/floating-mouse-tooltip/floating-mouse-tooltip.module.scss", {
      get classes() {
        return mG;
      },
      set classes(e) {
        Object.assign(mG, e);
      }
    });
    var fG = ({
      position: e,
      tooltip: t,
      disabled: n,
      theme: s,
      alwaysVisible: i = false,
      forceVisible: a = false,
      screenSpacePosition: o = false,
      style: r,
      className: l,
      children: c
    }) => {
      if (!o && !Y.isValidElement(c)) {
        throw new Error("Tooltip requires a single child react element!");
      }
      0;
      const u = Y.useMemo(() => ({
        ...mG,
        ...s
      }), [s]);
      0;
      const [d, m] = Y.useState(i);
      0;
      const h = Y.useRef(Ld);
      0;
      const g = Y.useRef(null);
      0;
      const p = Y.useCallback(t => {
        g.current = t;
        if (null != t) {
          xG(t, e || h.current);
        }
      }, [e]);
      0;
      const f = Y.useCallback(e => {
        h.current = zd(e);
        m(i || true);
      }, [i]);
      0;
      const x = Y.useCallback(e => {
        h.current = zd(e);
        if (null != g.current) {
          xG(g.current, h.current, o);
        }
      }, [o]);
      0;
      const v = Y.useCallback(e => m(i || false), [i]);
      0;
      const _ = Y.useCallback(e => m(i || false), [i]);
      0;
      const b = Y.useRef(null);
      0;
      const T = Y.useCallback(e => {
        if (b.current !== e) {
          if (null != b.current) {
            b.current.removeEventListener("mouseover", f);
            b.current.removeEventListener("mousemove", x);
            b.current.removeEventListener("mouseleave", v);
            b.current.removeEventListener("mousedown", _);
          }
          if (null != e) {
            e.addEventListener("mouseover", f);
            e.addEventListener("mousemove", x);
            e.addEventListener("mouseleave", v);
            e.addEventListener("mousedown", _);
          }
          b.current = e;
        }
      }, [_, v, x, f]);
      0;
      Y.useEffect(() => {
        if (o) {
          T(document.body);
        }
      }, [o]);
      const E = !!t && (o || Y.Children.count(c) > 0);
      0;
      const I = Y.useContext(pg);
      0;
      return z.jsxs(z.Fragment, {
        children: [!o && c && (0, z.jsx)(xd, {
          ref: T,
          children: c
        }), E && !n && (d || a) && !I && (0, z.jsx)(Wm, {
          children: (0, z.jsx)("div", {
            className: Qu()(u.tooltip, l),
            style: r,
            ref: p,
            children: t
          })
        })]
      });
    };
    function xG(e, t, n) {
      const s = t.x + 0;
      const i = t.y + 16;
      if (n) {
        e.style.left = `${s}px`;
        return void (e.style.top = `${i}px`);
      }
      e.style.left = `${s}px`;
      e.style.top = `${i}px`;
      requestAnimationFrame(() => {
        const t = e.getBoundingClientRect();
        const n = window.innerWidth - t.width;
        const a = window.innerHeight - t.height;
        if (s > n) {
          e.style.left = `${n}px`;
        }
        if (i > a) {
          e.style.top = `${a}px`;
        }
      });
    }
    X.add("game-ui/common/tooltip/floating-mouse-tooltip/floating-mouse-tooltip.tsx", {
      get FloatingMouseTooltip() {
        return fG;
      },
      set FloatingMouseTooltip(e) {
        fG = e;
      }
    });
    var vG = (e, t, n, s) => e + (t - n) * s;
    var _G = (e, t) => e && e.min.y === t.min.y && e.max.y === t.max.y && e.min.x === t.min.x && e.max.x === t.max.x ? e : t;
    const bG = {
      inTangent: 0,
      outTangent: 0,
      inWeight: 0,
      outWeight: 0,
      weightedMode: 0,
      readonly: true
    };
    var TG = (e, t, n) => {
      if (e) {
        t.filter(e => e.keys.length > 0).map(t => {
          const s = t.keys;
          if (s[0].readonly) {
            s.splice(0, 1);
          }
          if (s[s.length - 1].readonly) {
            s.splice(s.length - 1, 1);
          }
          const i = s.length - 1;
          const a = s[0];
          const o = s[1];
          const r = s[i];
          const l = s[i - 1];
          if (a.time > n.min.x) {
            let t;
            if ("clamp" === e) {
              a.inTangent = 0;
              t = {
                ...bG,
                time: n.min.x,
                value: a.value
              };
            } else if ("loop" === e) {
              t = {
                ...bG,
                ...r,
                time: a.time - (r.time - l.time)
              };
              a.inTangent = r.inTangent;
              a.inWeight = r.inWeight;
            } else {
              t = {
                ...bG,
                ...o,
                outTangent: -o.inTangent,
                outWeight: o.inWeight,
                time: a.time - (o.time - a.time)
              };
              a.inTangent = -a.outTangent;
              a.inWeight = a.outWeight;
            }
            if (t) {
              s.unshift(t);
            }
          }
          if (r.time < n.max.x) {
            let t;
            if ("clamp" === e) {
              r.outTangent = 0;
              t = {
                ...bG,
                time: n.max.x,
                value: r.value
              };
            } else if ("loop" === e) {
              t = {
                ...bG,
                ...a,
                time: r.time + (o.time - a.time)
              };
              r.outTangent = a.outTangent;
              r.outWeight = a.outWeight;
            } else {
              t = {
                ...bG,
                ...l,
                inTangent: -l.outTangent,
                inWeight: l.outWeight,
                time: r.time + (r.time - l.time)
              };
              r.outTangent = -r.inTangent;
              r.outWeight = r.inWeight;
            }
            if (t) {
              s.push(t);
            }
          }
          t.keys = [...s];
        });
      }
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/utils/helpers.ts", {
      get project() {
        return vG;
      },
      set project(e) {
        vG = e;
      },
      get newBounds2IfChanged() {
        return _G;
      },
      set newBounds2IfChanged(e) {
        _G = e;
      },
      get insertDummyWrapModeKeyframes() {
        return TG;
      },
      set insertDummyWrapModeKeyframes(e) {
        TG = e;
      }
    });
    var EG = e => e.reduce((t, n, s) => {
      if (0 === s) {
        t.push(`M ${n.time},${n.value}`);
      } else {
        const i = e[s - 1];
        const a = isFinite(i.outTangent) && isFinite(n.inTangent);
        const o = i.time;
        const r = i.value;
        const l = n.time;
        const c = n.value;
        const u = i.outTangent;
        const d = n.inTangent;
        const m = i.outWeight;
        const h = 1 - n.inWeight;
        if (a) {
          const e = vG(o, l, o, m);
          const n = vG(r, e, o, u);
          const s = vG(o, l, o, h);
          const i = vG(c, s, l, d);
          t.push(`C${e},${n} ${s},${i} ${l},${c}`);
        } else if (r === c) {
          t.push(`L${l},${c}`);
        } else if (u === Number.NEGATIVE_INFINITY && d !== Number.POSITIVE_INFINITY || u !== Number.POSITIVE_INFINITY && d === Number.NEGATIVE_INFINITY) {
          t.push(`L${o},${c} ${l},${c}`);
        } else {
          t.push(`L ${l},${r} ${l},${c}`);
        }
      }
      return t;
    }, []);
    X.add("game-ui/editor/widgets/fields/animation-curve-field/utils/make-curve-path.ts", {
      get makeCurvePath() {
        return EG;
      },
      set makeCurvePath(e) {
        EG = e;
      }
    });
    let IG = {
      "animation-curve-editor": "animation-curve-editor_sfs",
      animationCurveEditor: "animation-curve-editor_sfs",
      editorItem: "editorItem_DvB",
      editor: "editor_Es7",
      row: "row_GIj row_d2o",
      controls: "controls_RpG",
      column: "column_MrW",
      label: "label_ozJ label_BbZ",
      control: "control_Ivd control_Hds",
      "animation-curve-path": "animation-curve-path_TwV",
      animationCurvePath: "animation-curve-path_TwV",
      "default-stroke": "default-stroke_Bng",
      defaultStroke: "default-stroke_Bng",
      "animation-curve-control-point-arm": "animation-curve-control-point-arm_Wh2",
      animationCurveControlPointArm: "animation-curve-control-point-arm_Wh2",
      "animation-curve-control-point-handle": "animation-curve-control-point-handle_qUn",
      animationCurveControlPointHandle: "animation-curve-control-point-handle_qUn",
      "animation-curve-keyframe": "animation-curve-keyframe_DpO",
      animationCurveKeyframe: "animation-curve-keyframe_DpO",
      "multiple-curves": "multiple-curves_HvS",
      multipleCurves: "multiple-curves_HvS",
      "animation-curve-keyframes": "animation-curve-keyframes_TMk",
      animationCurveKeyframes: "animation-curve-keyframes_TMk",
      "animation-curve-preview-path": "animation-curve-preview-path_VCR",
      animationCurvePreviewPath: "animation-curve-preview-path_VCR",
      hidden: "hidden_prB"
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/animation-curve-editor.module.scss", {
      get classes() {
        return IG;
      },
      set classes(e) {
        Object.assign(IG, e);
      }
    });
    var SG = ({
      keys: e = [],
      base: t,
      color: n,
      className: s
    }) => {
      0;
      const i = Y.useMemo(function () {
        const n = EG(e);
        const s = EG(e.map((e, n) => ({
          ...e,
          value: t[n].value - (e.value - t[n].value)
        })).reverse());
        return n.concat(s).join(" ").replace(" M", " L") + " z";
      }, [t, e]);
      0;
      return z.jsx(oG, {
        d: i,
        fill: n,
        className: Qu()(s, 0 === e.length && IG.hidden)
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/animation-curve-deviation.tsx", {
      get AnimationCurveDeviation() {
        return SG;
      },
      set AnimationCurveDeviation(e) {
        SG = e;
      }
    });
    var jG = ({
      keys: e = [],
      color: t,
      className: n
    }) => {
      0;
      const s = Y.useMemo(function () {
        return EG(e).join(" ");
      }, [e]);
      0;
      return z.jsx(oG, {
        d: s,
        stroke: t,
        className: Qu()(IG.animationCurvePath, n, 0 === e.length && IG.hidden, {
          [IG.defaultStroke]: !t
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/animation-curve-path.tsx", {
      get AnimationCurvePath() {
        return jG;
      },
      set AnimationCurvePath(e) {
        jG = e;
      }
    });
    let CG = {
      "tooltip-row": "tooltip-row_zpQ",
      tooltipRow: "tooltip-row_zpQ",
      "tooltip-label": "tooltip-label_JO7",
      tooltipLabel: "tooltip-label_JO7"
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/keyframe.module.scss", {
      get classes() {
        return CG;
      },
      set classes(e) {
        Object.assign(CG, e);
      }
    });
    const wG = e => {
      if (0 === e) {
        return "00.000s";
      }
      const t = Math.floor(e / 3600);
      const n = Math.floor((e - 3600 * t) / 60);
      const s = Math.floor(e - 3600 * t - 60 * n);
      const i = (e % 1).toFixed(3).replace("0.", "");
      let a = "";
      if (t) {
        a += t.toString().padStart(2, "0") + ":";
      }
      if (n) {
        a += n.toString().padStart(2, "0") + ":";
      }
      a += s.toString().padStart(2, "0") + ".";
      a += i;
      return a + "s";
    };
    var OG;
    var PG;
    var LG = ({
      keyframe: e,
      hide: t
    }) => e ? (0, z.jsxs)("div", {
      children: ["time" !== t && "number" == typeof e.time && (0, z.jsxs)("div", {
        className: CG.tooltipRow,
        children: [(0, z.jsxs)("div", {
          className: CG.tooltipLabel,
          children: [(0, z.jsx)(Pc.AnimationCurve.TIME_LABEL, {}), ":"]
        }), (0, z.jsx)("div", {
          children: wG(e.time)
        })]
      }), "value" !== t && "number" == typeof e.value && (0, z.jsxs)("div", {
        className: CG.tooltipRow,
        children: [(0, z.jsxs)("div", {
          className: CG.tooltipLabel,
          children: [(0, z.jsx)(Pc.AnimationCurve.VALUE_LABEL, {}), ":"]
        }), (0, z.jsx)("div", {
          children: e.value.toFixed(3)
        })]
      })]
    }) : null;
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/keyframe-tooltip.tsx", {
      get KeyframeTooltip() {
        return LG;
      },
      set KeyframeTooltip(e) {
        LG = e;
      }
    });
    (function (e) {
      e[e.None = 0] = "None";
      e[e.In = 1] = "In";
      e[e.Out = 2] = "Out";
      e[e.Both = 3] = "Both";
    })(OG || (OG = {}));
    (function (e) {
      e[e.Default = 0] = "Default";
      e[e.Clamp = 1] = "Clamp";
      e[e.Once = 1] = "Once";
      e[e.Loop = 2] = "Loop";
      e[e.PingPong = 4] = "PingPong";
      e[e.ClampForever = 8] = "ClampForever";
    })(PG || (PG = {}));
    var AG = {
      time: 0,
      value: 0,
      inTangent: 0,
      outTangent: 0,
      inWeight: 0,
      outWeight: 0,
      weightedMode: OG.None
    };
    X.add("game-ui/editor/data-binding/editor-types.ts", {
      get WeightedMode() {
        return OG;
      },
      set WeightedMode(e) {
        OG = e;
      },
      get WrapMode() {
        return PG;
      },
      set WrapMode(e) {
        PG = e;
      },
      get defaultKeyframe() {
        return AG;
      },
      set defaultKeyframe(e) {
        AG = e;
      }
    });
    const MG = {
      data: {
        curves: [{
          keys: [],
          preWrapMode: PG.Default,
          postWrapMode: PG.Default
        }],
        bounds: {
          min: {
            x: 0,
            y: 0
          },
          max: {
            x: 0,
            y: 0
          }
        }
      },
      activeKeyframe: -1,
      draggedKeyframeRef: {
        current: -1
      },
      activeCurve: 0,
      activeProperty: 0,
      canAddKeyframes: false,
      smoothenOnMove: false,
      isDraggingKeyframe: false,
      selectActiveCurve: () => {},
      deselectKeyframes: () => {},
      selectKeyframe: () => {},
      setDraggedKeyframe: () => {},
      removeKeyframe: () => {},
      setKeyframes: () => {},
      updateKeyframe: async () => -1,
      addKeyframe: async () => -1
    };
    0;
    const RG = Y.createContext(MG);
    var kG = e => {
      const {
        children: t,
        data: n,
        canAddKeyframes: s,
        smoothenOnMove: i,
        hideControlPoints: a,
        allowEditingAll: o,
        parseKeyframe: r,
        keyframeRenderer: l,
        onMoveKeyframe: c,
        onAddKeyframe: u,
        onRemoveKeyframe: d,
        onSetKeyframes: m,
        onSetActiveCurve: h,
        onSetActiveKeyFrame: g
      } = e;
      0;
      const [p, f] = Y.useState(-1);
      0;
      const [x, v] = Y.useState(false);
      0;
      const [_, b] = Y.useState(0);
      0;
      const T = Y.useRef(-1);
      0;
      const E = Y.useCallback(e => {
        T.current = e;
        v(true);
        const t = () => {
          T.current = -1;
          document.removeEventListener("mouseup", t);
          v(false);
        };
        document.addEventListener("mouseup", t);
      }, []);
      0;
      const I = Y.useMemo(() => {
        const e = n.curves[_]?.keys[0];
        const t = e?.readonly ? 1 : 0;
        const s = (e, n) => {
          if (n && _ !== n) {
            b(n);
          }
          f(t => t === e ? -1 : e);
          g?.(_, e - t);
        };
        return {
          selectActiveCurve: (e, t = -1) => {
            b(e);
            h?.(e);
            s(t, e);
            g?.(e, t);
          },
          deselectKeyframes: () => {
            s(-1);
          },
          selectKeyframe: s,
          addKeyframe: async (s, i, a) => {
            if (!u) {
              throw "onAddKeyframe not provided";
            }
            if (n.curves[a]) {
              const n = (await u(s, i, a)) + (s > e?.time ? t : 0);
              f(n);
              g?.(_, n);
              return n;
            }
            return -1;
          },
          updateKeyframe: async (n, s, i, a) => {
            if (!c) {
              throw "onMoveKeyframe not provided";
            }
            const o = Math.max(0, n - t);
            const r = (await c(o, s, i, a)) + (s.time > e?.time ? t : 0);
            f(e => -1 === e ? -1 : r);
            return r;
          },
          removeKeyframe: (e, n) => {
            if (!d) {
              throw "onRemoveKeyframe not provided";
            }
            const i = Math.max(0, e - t);
            d(i, n);
            s(-1);
          },
          setKeyframes: async (e, t) => {
            if (!m) {
              throw "onSetKeyframes not provided";
            }
            await m(e, t);
            s(-1);
          }
        };
      }, [_, n.curves, u, c, d, h, g, m]);
      0;
      Y.useEffect(() => {
        const e = n.curves[_]?.keys.length - 1 || -1;
        if (p > e) {
          f(e);
        }
      }, [_, p, n.curves]);
      0;
      const y = Y.useMemo(() => ({
        data: n,
        activeKeyframe: p,
        draggedKeyframeRef: T,
        activeCurve: _,
        canAddKeyframes: s,
        smoothenOnMove: i,
        hideControlPoints: a,
        allowEditingAll: o,
        parseKeyframe: r,
        keyframeRenderer: l,
        setDraggedKeyframe: E,
        isDraggingKeyframe: x,
        ...I
      }), [n, p, _, s, i, a, o, r, l, E, x, I]);
      0;
      return z.jsx(RG.Provider, {
        value: y,
        children: t
      });
    };
    var DG = () => (0, Y.useContext)(RG);
    X.add("game-ui/editor/widgets/fields/animation-curve-field/utils/animation-curve-editor-context.tsx", {
      get AnimationCurveEditorProvider() {
        return kG;
      },
      set AnimationCurveEditorProvider(e) {
        kG = e;
      },
      get useAnimationCurveEditor() {
        return DG;
      },
      set useAnimationCurveEditor(e) {
        DG = e;
      }
    });
    var FG = (e, t, n, s, i) => {
      const a = e.offset.x + t;
      const o = e.offset.y + (e.inverted ? e.size.height - n : n);
      return {
        x: a,
        y: o,
        width: s,
        height: i,
        left: a,
        top: o,
        right: s > 0 ? a + s : a,
        bottom: i > 0 ? o + i : o
      };
    };
    X.add("game-ui/common/svg/utils/get-svg-bounding-rect.ts", {
      get getSVGBoundingRect() {
        return FG;
      },
      set getSVGBoundingRect(e) {
        FG = e;
      }
    });
    0;
    var UG = Y.forwardRef(function (e, t) {
      const {
        cx: n,
        cy: s,
        r: i,
        rh: a,
        collisionThreshold: o = 0,
        fill: r,
        fillh: l,
        stroke: c,
        strokeh: u,
        strokeWidth: d,
        onSelect: m,
        focused: h,
        selected: g,
        className: p,
        ...f
      } = e;
      const {
        viewport: x
      } = oU();
      const {
        posFromPoint: v,
        rem: _
      } = x;
      0;
      const [b, T] = Y.useState(false);
      const E = v(n, s);
      const I = _(b && a ? a : i);
      const y = _(d || 1);
      const S = _(o) + y / 2;
      const j = y / 2 + S + I;
      0;
      Y.useEffect(() => {
        if (t && "current" in t && t.current) {
          t.current.getBoundingClientRect = () => FG(x, E.x - j / 2, E.y - j / 2, j, j);
        }
      }, [j, t, E.x, E.y, x]);
      0;
      const C = Y.useCallback(e => Math.sqrt(Math.pow(e.x - E.x, 2) + Math.pow(e.y - E.y, 2)) < I + S, [E.x, E.y, I, S]);
      lU(e, C, T);
      0;
      return z.jsx("circle", {
        ref: t,
        cx: E.x,
        cy: E.y,
        r: I,
        fill: b && l ? l : r,
        stroke: b && u ? u : c,
        strokeWidth: y,
        className: Qu()({
          hovered: b
        }, p),
        ...f
      }, "circle");
    });
    X.add("game-ui/common/svg/elements/circle.tsx", {
      get Circle() {
        return UG;
      },
      set Circle(e) {
        UG = e;
      }
    });
    var BG = ({
      x1: e,
      y1: t,
      x2: n,
      y2: s,
      strokeWidth: i,
      stroke: a,
      strokeh: o,
      collisionThreshold: r,
      ...l
    }) => {
      const {
        viewport: {
          posFromPoint: c,
          rem: u
        }
      } = oU();
      0;
      const [d, m] = Y.useState(false);
      const h = c(e, t);
      const g = c(n, s);
      const p = u(i || 1);
      const f = u(r || 5) + p / 2;
      0;
      const x = Y.useCallback(e => ((e, t, n) => {
        const s = e.x - t.x;
        const i = e.y - t.y;
        const a = n.x - t.x;
        const o = n.y - t.y;
        const r = a * a + o * o;
        const l = 0 !== r ? (s * a + i * o) / r : -1;
        let c;
        let u;
        if (l < 0) {
          c = t.x;
          u = t.y;
        } else if (l > 1) {
          c = n.x;
          u = n.y;
        } else {
          c = t.x + l * a;
          u = t.y + l * o;
        }
        const d = e.x - c;
        const m = e.y - u;
        return Math.sqrt(d * d + m * m);
      })(e, h, g) < f, [f, h, g]);
      lU(l, x, m);
      0;
      return z.jsx("line", {
        x1: h.x,
        y1: h.y,
        x2: g.x,
        y2: g.y,
        strokeWidth: p,
        stroke: d ? o ?? a : a,
        ...l
      });
    };
    X.add("game-ui/common/svg/elements/line.tsx", {
      get Line() {
        return BG;
      },
      set Line(e) {
        BG = e;
      }
    });
    0;
    var GG = Y.forwardRef(function (e, t) {
      const {
        x: n,
        y: s,
        width: i,
        height: a,
        widthh: o,
        heighth: r,
        collisionThreshold: l = 0,
        origin: c,
        fill: u,
        fillh: d,
        stroke: m,
        strokeh: h,
        strokeWidth: g,
        onSelect: p,
        focused: f,
        selected: x,
        className: v,
        transform: _,
        ...b
      } = e;
      const {
        viewport: T
      } = oU();
      const {
        posFromPoint: E,
        rem: I
      } = T;
      0;
      const [y, S] = Y.useState(false);
      let j = E(n, s);
      const C = I(y && o ? o : i);
      const N = I(y && r ? r : a);
      if ("center" === c) {
        j = {
          x: j.x - C / 2,
          y: j.y - N / 2
        };
      }
      const w = I(g || 1);
      const O = I(l) + w / 2;
      0;
      const P = Y.useCallback(e => {
        let t;
        t = "center" !== c ? {
          x: (2 * j.x + C) / 2,
          y: (2 * j.y + N) / 2
        } : j;
        return Math.abs(e.x - t.x) <= C / 2 + O && Math.abs(e.y - t.y) <= N / 2 + O;
      }, [c, C, O, N, j]);
      0;
      Y.useEffect(() => {
        if (t && "current" in t && t.current) {
          t.current.getBoundingClientRect = () => FG(T, j.x - O / 2, j.y - O / 2, C + O / 2, N + O / 2);
        }
      }, [O, N, t, T, j.x, j.y, C]);
      lU(e, P, S);
      const L = _?.replace(/rotate\((\d+)\)/, `rotate($1 ${j.x + C / 2} ${j.y + N / 2})`);
      0;
      return z.jsx("rect", {
        ref: t,
        x: j.x,
        y: j.y,
        width: C,
        height: N,
        fill: y && d ? d : u,
        stroke: y && h ? h : m,
        strokeWidth: w,
        className: Qu()({
          hovered: y
        }, v),
        transform: L,
        ...b
      });
    });
    X.add("game-ui/common/svg/elements/rect.tsx", {
      get Rect() {
        return GG;
      },
      set Rect(e) {
        GG = e;
      }
    });
    X.add("game-ui/common/svg/elements/index.ts", {});
    var VG = ({
      keyframe: e,
      index: t,
      pos: n,
      type: s,
      isFocused: i
    }) => {
      const {
        activeCurve: a,
        updateKeyframe: o
      } = DG();
      const {
        viewport: {
          rem: r,
          scaleToViewport: l,
          scaleToPoint: c,
          posFromPoint: u,
          pointFromPos: d
        }
      } = oU();
      0;
      const m = Y.useMemo(() => {
        const t = {
          x: n.x - e.time,
          y: n.y - e.value
        };
        const i = l(t);
        const a = Math.sqrt(i.x * i.x + i.y * i.y);
        const o = i.x < 0 ? -1 : 1;
        const u = i.x / a;
        const d = isFinite(n.y) ? i.y / a : Math.sign(n.y) * o;
        const m = e["in" === s ? "inWeight" : "outWeight"] || .01;
        const h = r(Od(15, 75, m));
        const g = c(u * h, d * h);
        return {
          x: e.time + g.x,
          y: e.value + g.y
        };
      }, [n.x, n.y, e, l, s, r, c]);
      0;
      const h = Y.useCallback(({
        point: n,
        position: i,
        shiftKey: r
      }) => {
        const l = e.time;
        const c = e.value;
        let d = n.x - l;
        const m = n.y - c;
        const h = wd(Hd(Bd(i, u(l, c))), 15, 75);
        if (h < 15) {
          return;
        }
        const g = Math.max((h - 15) / 60, .01);
        let p;
        let f;
        let x;
        var v;
        if ("in" === s) {
          p = "inTangent";
          f = "inWeight";
          if (d > 0) {
            d = 0;
          }
        } else {
          p = "outTangent";
          f = "outWeight";
          if (d < 0) {
            d = 0;
          }
        }
        v = d;
        0;
        x = Math.abs(0 - v) < Math.max(1e-6 * Math.max(Math.abs(v), Math.abs(0)), 8 * Number.EPSILON) ? n.y > c ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : m / d;
        o(t, r ? {
          ...e,
          inTangent: x,
          outTangent: x,
          inWeight: g,
          outWeight: g
        } : {
          ...e,
          [p]: x,
          [f]: g
        }, false, a);
      }, [a, t, e, u, s, o]);
      const g = km();
      0;
      b_(Y.useCallback(async () => {
        const e = await fS();
        const t = u(m);
        const n = {
          x: t.x + 100 * e[0],
          y: t.y + 100 * e[1]
        };
        h({
          point: d(n),
          position: n
        });
      }, [m, h, d, u]), g && i);
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(BG, {
          strokeWidth: .5,
          x1: e.time,
          y1: e.value,
          x2: m.x,
          y2: m.y,
          className: IG.animationCurveControlPointArm
        }), z.jsx(GG, {
          origin: "center",
          x: m.x,
          y: m.y,
          width: i ? 8 : 4,
          height: i ? 8 : 4,
          collisionThreshold: 10,
          onDrag: h,
          className: IG.animationCurveControlPointHandle
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/keyframe-control-point.tsx", {
      get KeyframeControlPoint() {
        return VG;
      },
      set KeyframeControlPoint(e) {
        VG = e;
      }
    });
    var HG = ({
      index: e,
      data: t,
      keyframes: n,
      editTarget: s,
      curve: i
    }) => {
      0;
      const a = Y.useMemo(() => ((e, t) => {
        let n;
        let s;
        if (t.length < 2) {
          return {};
        }
        const i = t[e];
        const a = i.time;
        const o = i.value;
        if (a < t[t.length - 1].time) {
          const n = t[e + 1].time;
          const r = vG(a, n, a, i.outWeight || .1);
          s = {
            x: r,
            y: vG(o, r, a, i.outTangent)
          };
        }
        if (a > 0) {
          const s = t[e - 1].time;
          const r = vG(a, s, a, 1 - i.inWeight || .1);
          n = {
            x: r,
            y: vG(o, r, a, i.inTangent)
          };
        }
        return {
          in: n,
          out: s
        };
      })(e, n), [e, n]);
      const o = km();
      const r = n[0].readonly ? 1 : 0;
      const l = n[n.length - 1].readonly ? 2 : 1;
      0;
      return z.jsxs(z.Fragment, {
        children: [a.in && t.inWeight >= 0 && (e > r || i.preWrapMode !== PG.Clamp && i.preWrapMode !== PG.ClampForever) && (0, z.jsx)(VG, {
          index: e,
          keyframe: t,
          type: "in",
          pos: a.in,
          isFocused: o && s === qG.LeftTangent
        }), a.out && t.outWeight >= 0 && (e < n.length - l || i.postWrapMode !== PG.Clamp && i.postWrapMode !== PG.ClampForever) && (0, z.jsx)(VG, {
          index: e,
          keyframe: t,
          type: "out",
          pos: a.out,
          isFocused: o && s === qG.RightTangent
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/keyframe-control-points.tsx", {
      get KeyframeControlPoints() {
        return HG;
      },
      set KeyframeControlPoints(e) {
        HG = e;
      }
    });
    var KG = e => {
      const {
        data: t,
        keyframes: n,
        isActive: s,
        index: i,
        curveIndex: a = 0,
        curve: o,
        onSelect: r,
        onDragStart: l,
        keyframeRenderer: c,
        editTarget: u,
        isFocused: d,
        onControllerDrag: m,
        controllerDragCallback: h
      } = e;
      0;
      const g = Y.useRef(t);
      const p = oU();
      g.current = t;
      0;
      const f = Y.useCallback(() => {
        if (!t.readonly) {
          r?.(i, a);
        }
      }, [t.readonly, r, i, a]);
      0;
      const x = Y.useCallback((e, t) => {
        if (t) {
          l?.(i);
        }
      }, [i, l]);
      const v = km();
      0;
      b_(Y.useCallback(async () => {
        if (m && h) {
          const e = await h();
          const n = {
            x: t.time,
            y: t.value
          };
          const s = p.viewport.posFromPoint(n);
          const a = {
            x: s.x + 100 * e.x,
            y: s.y + 100 * e.y
          };
          m(p.viewport.pointFromPos(a), i);
        }
      }, [h, t.time, t.value, i, m, p.viewport]), v && h && m && s && u === qG.Keyframe);
      return t.readonly ? null : (0, z.jsx)("g", {
        className: Qu()(IG.animationCurveKeyframe, {
          active: s
        }),
        children: c ? c(e, f, x) : (0, z.jsxs)(z.Fragment, {
          children: [s && (0, z.jsx)(HG, {
            data: t,
            index: i,
            curve: o,
            keyframes: n,
            editTarget: u
          }), (0, z.jsx)(UG, {
            cx: t.time,
            cy: t.value,
            r: v && s ? 4.5 : !v && s || v && d ? 3.5 : 2.5,
            rh: 3.5,
            onSelect: f,
            onMouseDown: x,
            collisionThreshold: 12
          })]
        })
      });
    };
    const WG = (e, t, n) => n && e ? 4.5 : !n && e || n && t ? 3.5 : 2.5;
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/keyframe.tsx", {
      get Keyframe() {
        return KG;
      },
      set Keyframe(e) {
        KG = e;
      }
    });
    var zG = e => {
      const {
        data: t,
        activeKeyframe: n,
        activeCurve: s,
        parseKeyframe: i,
        setDraggedKeyframe: a,
        selectKeyframe: o,
        keyframeRenderer: r
      } = DG();
      const {
        curveIndex: l,
        focusedKeyframe: c,
        editTarget: u,
        onControllerDrag: d,
        controllerDragCallback: m
      } = e;
      const h = t.curves[l]?.keys;
      0;
      return z.jsx("g", {
        children: t.curves.map((e, t) => (0, z.jsx)("g", {
          className: IG.animationCurveKeyframes,
          children: l === t && !!e.keys?.length && e.keys.map((g, p) => (0, z.jsx)(KG, {
            data: g,
            index: p,
            curveIndex: l,
            curve: e,
            keyframes: h,
            isActive: n === p && s === t,
            isFocused: c === p && s === t,
            editTarget: u,
            onSelect: o,
            onDragStart: a,
            parseKeyframe: i,
            keyframeRenderer: r,
            onControllerDrag: d,
            controllerDragCallback: m
          }, g.time))
        }, t))
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/components/keyframes.tsx", {
      get Keyframes() {
        return zG;
      },
      set Keyframes(e) {
        zG = e;
      }
    });
    const YG = e => (0, z.jsx)(LG, {
      keyframe: e
    });
    const $G = e => (0, z.jsx)(Gc, {
      value: e,
      unit: Oc.FloatTwoFractions
    });
    var qG;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.LeftTangent = 1] = "LeftTangent";
      e[e.Keyframe = 2] = "Keyframe";
      e[e.RightTangent = 3] = "RightTangent";
    }(qG || (qG = {}));
    var XG = ({
      children: e,
      style: t,
      zoomable: n,
      panable: s,
      padding: i,
      className: a,
      gridLines: o = true,
      drawPaths: r = true,
      showTooltipOnDrag: l = false,
      tooltipKeyframe: c,
      textScale: u = 1,
      formatTooltip: d = YG,
      formatLabelX: m = $G,
      formatLabelY: h = $G,
      onClick: g,
      onMouseDown: p,
      onWindowMouseMove: f,
      keyframeMoveCallback: x,
      zoomCallback: v,
      panCallback: _,
      OnFocusChange: b,
      focusKey: T
    }) => {
      const {
        data: E,
        canAddKeyframes: I,
        activeKeyframe: y,
        selectKeyframe: S,
        activeCurve: j,
        allowEditingAll: C,
        addKeyframe: N,
        removeKeyframe: w,
        deselectKeyframes: O,
        updateKeyframe: P,
        isDraggingKeyframe: L,
        draggedKeyframeRef: A,
        setDraggedKeyframe: M,
        parseKeyframe: R,
        smoothenOnMove: k
      } = DG();
      0;
      const D = Y.useRef(null);
      0;
      const F = Y.useCallback(({
        point: {
          x: e,
          y: t
        }
      }) => {
        N(e, t, j);
      }, [j, N]);
      0;
      const U = Y.useCallback(e => {
        g?.(e);
        O();
      }, [O, g]);
      0;
      const B = Y.useCallback(async (e, t, n = false) => {
        if (t > -1) {
          const s = E.curves[j].keys;
          const i = s[t];
          const a = {
            ...i,
            time: e.x,
            value: e.y
          };
          const o = R ? R(i, a, t, s, j) : a;
          const r = await P(t, o, !!k, j);
          if (n) {
            M(r);
          }
        }
      }, [j, E.curves, R, M, k, P]);
      0;
      const G = Y.useCallback(e => {
        f?.(e);
        B(e.point, A.current, true);
      }, [A, B, f]);
      0;
      Y.useEffect(() => {
        if (-1 !== y) {
          const e = e => {
            if (!("Backspace" !== e.code && "Delete" !== e.code)) {
              w(y, j);
            }
          };
          document.addEventListener("keydown", e);
          return () => {
            document.removeEventListener("keydown", e);
          };
        }
      }, [j, y, N, w]);
      0;
      Y.useEffect(() => {
        const e = e => {
          if (e.target?.parentNode !== D.current) {
            O();
          }
        };
        document.body.addEventListener("click", e);
        return () => {
          document.body.removeEventListener("click", e);
        };
      }, [O]);
      const V = c || (L ? E.curves[j]?.keys[A.current] : undefined);
      const H = V ? d(V) : undefined;
      0;
      const K = Y.useMemo(() => j >= 0 && j < E.curves.length ? E.curves[j].keys.findIndex(e => !e.readonly) : -1, [j, E.curves]);
      0;
      const [W, $] = Y.useState(-1);
      0;
      const [q, X] = Y.useState(qG.Keyframe);
      0;
      const [Q, Z] = Y.useState(false);
      0;
      const J = Y.useCallback(e => {
        Z(e);
        if (b) {
          b(e);
        }
        if (e && j >= 0 && j < E.curves.length && K >= 0) {
          const e = E.curves[j];
          if (y >= 0 && y < e.keys.length && !e.keys[y].readonly) {
            $(y);
          } else if (W < 0 || W >= e.keys.length || e.keys[W].readonly) {
            $(K);
          }
        }
      }, [b, j, y, E.curves, K, W]);
      0;
      const ee = Y.useMemo(() => ({
        "Move Horizontal": j >= 0 && j < E.curves.length && E.curves[j].keys.length > 1 ? e => {
          if (j >= 0 && j < E.curves.length) {
            const t = E.curves[j];
            if (y >= 0) {
              const n = y > 0 && !t.keys[y - 1].readonly;
              const s = y < t.keys.length - 1 && !t.keys[y + 1].readonly;
              const i = wd(q + Math.sign(e), n ? qG.LeftTangent : qG.Keyframe, s ? qG.RightTangent : qG.Keyframe);
              if (i !== q) {
                X(i);
                return true;
              }
            } else {
              const n = t.keys.findIndex(e => !e.readonly);
              const s = t.keys.length - Array.from(t.keys).reverse().findIndex(e => !e.readonly) - 1;
              if (n >= 0 && s >= 0 && s >= n) {
                const t = wd(W + Math.sign(e), n, s);
                if (t !== W && !E.curves[j].keys[t].readonly) {
                  $(t);
                  return true;
                }
              }
            }
          }
          return false;
        } : null,
        Back: () => j >= 0 && j < E.curves.length && y >= 0 && y < E.curves[j].keys.length && (O(), true),
        Select: () => {
          S(W, j);
          X(qG.Keyframe);
        }
      }), [j, y, E.curves, O, q, W, S]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: ee,
        children: z.jsxs(eF, {
          className: Qu()(IG.column, IG.editorItem, a),
          focusKey: T,
          onFocusChange: J,
          children: [z.jsx(fG, {
            disabled: !l,
            alwaysVisible: true,
            screenSpacePosition: true,
            tooltip: H
          }), z.jsx("div", {
            className: Qu()(IG.editor, {
              [IG.multipleCurves]: E.curves.length > 1
            }),
            ref: D,
            children: z.jsxs(yU, {
              bounds: E.bounds,
              padding: i || 12,
              onDoubleClick: I ? F : undefined,
              onClick: U,
              onMouseDown: p,
              onWindowMouseMove: G,
              style: t,
              zoomable: n,
              panable: s,
              zoomCallback: Q ? v : undefined,
              panCallback: Q ? _ : undefined,
              children: [o && (0, z.jsx)(dG, {
                overdraw: true,
                halfSteps: true
              }), r && (0, z.jsx)("g", {
                children: E.curves.filter(e => !e.hidePath).map((e, t) => "number" == typeof e.deviationFrom ? (0, z.jsx)(SG, {
                  keys: e.keys,
                  base: E.curves[e.deviationFrom].keys,
                  color: e.color,
                  className: Qu()({
                    active: E.curves.length > 1 && t === j
                  })
                }, t) : (0, z.jsx)(jG, {
                  keys: e.keys,
                  color: e.color,
                  className: Qu()({
                    active: E.curves.length > 1 && t === j
                  })
                }, t))
              }), (j >= 0 || C) && (0, z.jsx)(zG, {
                curveIndex: j,
                focusedKeyframe: Q ? W : -1,
                editTarget: Q ? q : qG.None,
                onControllerDrag: B,
                controllerDragCallback: x
              }), e, z.jsx(uG, {
                fixed: true,
                textScale: u,
                formatLabelX: m,
                formatLabelY: h
              })]
            })
          })]
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/animation-curve-editor.tsx", {
      get KeyframeEditTarget() {
        return qG;
      },
      set KeyframeEditTarget(e) {
        qG = e;
      },
      get AnimationCurveEditor() {
        return XG;
      },
      set AnimationCurveEditor(e) {
        XG = e;
      }
    });
    let QG = {
      button: "button_UQQ"
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/animation-curve-editor-preview.module.scss", {
      get classes() {
        return QG;
      },
      set classes(e) {
        Object.assign(QG, e);
      }
    });
    const JG = {
      x: 0,
      y: 2
    };
    var eV = ({
      data: e,
      onSelect: t,
      className: n
    }) => {
      0;
      const s = Y.useRef(null);
      0;
      0;
      return z.jsx(L_, {
        ref: s,
        theme: QG,
        onSelect: t,
        className: QD.dropdownToggle,
        children: z.jsx(yU, {
          className: n,
          bounds: e.bounds,
          padding: JG,
          children: e.curves.map((e, t) => (0, z.jsx)(jG, {
            keys: e.keys,
            className: IG.animationCurvePreviewPath
          }, t))
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/animation-curve-editor-preview.tsx", {
      get AnimationCurvePreview() {
        return eV;
      },
      set AnimationCurvePreview(e) {
        eV = e;
      }
    });
    var tV = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      0;
      const a = Y.useContext(hM);
      0;
      0;
      0;
      return z.jsx(sV, {
        label: z.jsx(hu, {
          value: n.displayName
        }),
        children: z.jsx(mM, {
          parent: i,
          components: a,
          data: s
        })
      });
    };
    var nV = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      0;
      const a = Y.useContext(hM);
      const o = PA(GA, i);
      0;
      0;
      0;
      return z.jsx(iV, {
        label: z.jsx(hu, {
          value: n.displayName
        }),
        expanded: n.expanded,
        onExpandedChange: o,
        children: z.jsx(mM, {
          parent: i,
          components: a,
          data: s
        })
      });
    };
    var sV = ({
      label: e,
      children: t
    }) => (0, z.jsxs)(JD, {
      children: [(0, z.jsx)("div", {
        className: QD.row,
        children: (0, z.jsx)("div", {
          className: QD.label,
          children: e
        })
      }), (0, z.jsx)("div", {
        className: QD.groupChildren,
        children: t
      })]
    });
    var iV = ({
      label: e,
      expanded: t,
      tooltip: n,
      children: s,
      onExpandedChange: i
    }) => (0, z.jsx)(tF, {
      label: e,
      expanded: t,
      onExpandedChange: i,
      tooltip: n,
      children: (0, z.jsx)("div", {
        className: QD.groupChildren,
        children: s
      })
    });
    X.add("game-ui/editor/widgets/group/editor-group.tsx", {
      get BoundGroup() {
        return tV;
      },
      set BoundGroup(e) {
        tV = e;
      },
      get BoundExpandableGroup() {
        return nV;
      },
      set BoundExpandableGroup(e) {
        nV = e;
      },
      get EditorGroup() {
        return sV;
      },
      set EditorGroup(e) {
        sV = e;
      },
      get ExpandableEditorGroup() {
        return iV;
      },
      set ExpandableEditorGroup(e) {
        iV = e;
      }
    });
    let aV = {
      "draggable-value": "draggable-value_l2t",
      draggableValue: "draggable-value_l2t",
      "draggable-value-cursor": "draggable-value-cursor_v5P",
      draggableValueCursor: "draggable-value-cursor_v5P",
      dragging: "dragging_d8v"
    };
    X.add("game-ui/common/input/draggable-value/draggable-value.module.scss", {
      get classes() {
        return aV;
      },
      set classes(e) {
        Object.assign(aV, e);
      }
    });
    function rV(e, t) {
      const {
        value: n,
        disabled: s,
        className: i,
        dragTransformation: a,
        onChange: o,
        onDragStart: r,
        onDragEnd: l,
        children: c
      } = e;
      0;
      const u = Y.useRef(null);
      0;
      const d = Y.useCallback(({
        clientX: e
      }) => !s && (document.activeElement instanceof HTMLElement && document.activeElement.blur(), u.current = {
        clientX: e,
        value: n
      }, r && r(), true), [s, n, r]);
      0;
      const m = Y.useCallback(({
        clientX: e
      }) => {
        if (s || null == u.current) {
          return;
        }
        const t = (e - u.current.clientX) / window.innerWidth;
        if (o) {
          o(a(u.current.value, t));
        }
      }, [s, a, o]);
      0;
      const h = Y.useCallback(() => {
        if (l) {
          l();
        }
      }, [l]);
      const [g, p] = eb(d, m, h);
      Yp(g && !s ? aV.draggableValueCursor : undefined);
      0;
      return z.jsx("div", {
        ref: t,
        className: Qu()({
          [aV.draggableValue]: !s,
          [aV.dragging]: g
        }, i),
        onMouseDown: p,
        children: c
      });
    }
    0;
    var lV = Y.forwardRef(rV);
    function cV({
      value: e,
      valueFormatter: t,
      inputValidator: n,
      inputTransformer: s = uV,
      inputParser: i,
      onChange: a,
      onFocus: o,
      onBlur: r,
      ...l
    }) {
      0;
      const [c, u] = Y.useState(null);
      0;
      const [d, m] = Y.useState(false);
      0;
      const h = Y.useMemo(() => t(e), [e, t]);
      const g = km();
      0;
      const p = Y.useCallback(e => {
        const t = s(e.target.value || "");
        if (n(t)) {
          u(t);
          if (a) {
            const n = null !== c ? i(c) : undefined;
            const s = null !== t ? i(t) : undefined;
            if (undefined !== s && s !== n) {
              return a(s);
            }
          }
        }
      }, [i, s, n, c, a]);
      0;
      const f = Y.useCallback(n => {
        m(true);
        u(t(e));
        if (o) {
          o(n);
        }
      }, [o, e, t]);
      0;
      const x = Y.useCallback(e => {
        m(false);
        u(null);
        if (r) {
          r(e);
        }
      }, [r]);
      0;
      Y.useEffect(() => {
        if (!(!g && d)) {
          u(t(e));
        }
      }, [g, d, e, t]);
      0;
      return z.jsx(zE, {
        ...l,
        value: c ?? h,
        onChange: p,
        onFocus: f,
        onBlur: x
      });
    }
    function uV(e) {
      return e;
    }
    X.add("game-ui/common/input/draggable-value/draggable-value.tsx", {
      get DraggableValue() {
        return lV;
      },
      set DraggableValue(e) {
        lV = e;
      }
    });
    X.add("game-ui/common/input/text/data-input.tsx", {
      get DataInput() {
        return cV;
      },
      set DataInput(e) {
        cV = e;
      }
    });
    var dV = ({
      min: e = Td,
      max: t = Ed,
      fractionDigits: n = 3,
      ...s
    }) => {
      0;
      const i = Y.useCallback(n => function (e, t, n) {
        if ("-" === e || "." === e) {
          return;
        }
        if ("" === e) {
          return t <= 0 && n >= 0 ? 0 : undefined;
        }
        const s = parseFloat(e);
        return isNaN(s) ? undefined : wd(s, t, n);
      }(n, e, t), [e, t]);
      0;
      const a = Y.useCallback(e => e.toFixed(n), [n]);
      0;
      return z.jsx(cV, {
        ...s,
        valueFormatter: a,
        inputParser: i,
        inputValidator: e < 0 ? mV : hV
      });
    };
    function mV(e) {
      return /^-?[0-9]*\.?[0-9]*$/.test(e);
    }
    function hV(e) {
      return /^[0-9]*\.?[0-9]*$/.test(e);
    }
    X.add("game-ui/common/input/text/float-input.tsx", {
      get FloatInput() {
        return dV;
      },
      set FloatInput(e) {
        dV = e;
      }
    });
    var gV = e => (0, z.jsx)(pV, {
      ...e
    });
    var pV = ({
      disabled: e,
      value: t,
      onChange: n,
      label: s,
      min: i = Td,
      max: a = Ed,
      fractionDigits: o = 3,
      onChangeStart: r,
      onChangeEnd: l,
      tooltip: c
    }) => {
      const u = bV(i, a);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: e,
        children: z.jsx(bg, {
          tooltip: c && (0, z.jsx)(hu, {
            value: c
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: e,
              className: QD.label,
              dragTransformation: u,
              onChange: n,
              children: s
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsx(dV, {
                showHint: true,
                value: t,
                min: i,
                max: a,
                fractionDigits: o,
                disabled: e,
                className: QD.input,
                onChange: n,
                onFocus: r,
                onBlur: l
              })
            })]
          })
        })
      });
    };
    var fV = ({
      label: e,
      value: t,
      min: n = Id,
      max: s = yd,
      disabled: i,
      onChange: a,
      ...o
    }) => {
      0;
      const r = Y.useCallback(e => a({
        ...t,
        x: e
      }), [t, a]);
      0;
      const l = Y.useCallback(e => a({
        ...t,
        y: e
      }), [t, a]);
      const c = function (e = Id, t = yd) {
        0;
        return Y.useCallback((n, s) => {
          return {
            x: wd(n.x + s * 30, e.x, t.x),
            y: wd(n.y + s * 30, e.y, t.y)
          };
        }, [t, e]);
      }(n, s);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: i,
        children: z.jsx(bg, {
          tooltip: o.tooltip && (0, z.jsx)(hu, {
            value: o.tooltip
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: i,
              className: QD.label,
              dragTransformation: c,
              onChange: a,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(_V, {
                  ...o,
                  label: "X",
                  value: t.x,
                  min: n.x,
                  max: s.x,
                  disabled: i,
                  onChange: r
                }), z.jsx(_V, {
                  ...o,
                  label: "Y",
                  value: t.y,
                  min: n.y,
                  max: s.y,
                  disabled: i,
                  onChange: l
                })]
              })
            })]
          })
        })
      });
    };
    var xV = ({
      label: e,
      value: t,
      min: n = Sd,
      max: s = jd,
      disabled: i,
      onChange: a,
      ...o
    }) => {
      0;
      const r = Y.useCallback(e => a({
        ...t,
        x: e
      }), [t, a]);
      0;
      const l = Y.useCallback(e => a({
        ...t,
        y: e
      }), [t, a]);
      0;
      const c = Y.useCallback(e => a({
        ...t,
        z: e
      }), [t, a]);
      const u = function (e = Sd, t = jd) {
        0;
        return Y.useCallback((n, s) => {
          return {
            x: wd(n.x + s * 30, e.x, t.x),
            y: wd(n.y + s * 30, e.y, t.y),
            z: wd(n.z + s * 30, e.z, t.z)
          };
        }, [t, e]);
      }(n, s);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: i,
        children: z.jsx(bg, {
          tooltip: o.tooltip && (0, z.jsx)(hu, {
            value: o.tooltip
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: i,
              className: QD.label,
              dragTransformation: u,
              onChange: a,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(_V, {
                  ...o,
                  label: "X",
                  value: t.x,
                  min: n.x,
                  max: s.x,
                  disabled: i,
                  onChange: r
                }), z.jsx(_V, {
                  ...o,
                  label: "Y",
                  value: t.y,
                  min: n.y,
                  max: s.y,
                  disabled: i,
                  onChange: l
                }), z.jsx(_V, {
                  ...o,
                  label: "Z",
                  value: t.z,
                  min: n.z,
                  max: s.z,
                  disabled: i,
                  onChange: c
                })]
              })
            })]
          })
        })
      });
    };
    var vV = ({
      label: e,
      value: t,
      min: n = Cd,
      max: s = Nd,
      disabled: i,
      onChange: a,
      ...o
    }) => {
      0;
      const r = Y.useCallback(e => a({
        ...t,
        x: e
      }), [t, a]);
      0;
      const l = Y.useCallback(e => a({
        ...t,
        y: e
      }), [t, a]);
      0;
      const c = Y.useCallback(e => a({
        ...t,
        z: e
      }), [t, a]);
      0;
      const u = Y.useCallback(e => a({
        ...t,
        w: e
      }), [t, a]);
      const d = function (e = Cd, t = Nd) {
        0;
        return Y.useCallback((n, s) => {
          return {
            x: wd(n.x + s * 30, e.x, t.x),
            y: wd(n.y + s * 30, e.y, t.y),
            z: wd(n.z + s * 30, e.z, t.z),
            w: wd(n.w + s * 30, e.w, t.w)
          };
        }, [t, e]);
      }(n, s);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: i,
        children: z.jsx(bg, {
          tooltip: o.tooltip && (0, z.jsx)(hu, {
            value: o.tooltip
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: i,
              className: QD.label,
              dragTransformation: d,
              onChange: a,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(_V, {
                  ...o,
                  label: "X",
                  value: t.x,
                  min: n.x,
                  max: s.x,
                  disabled: i,
                  onChange: r
                }), z.jsx(_V, {
                  ...o,
                  label: "Y",
                  value: t.y,
                  min: n.y,
                  max: s.y,
                  disabled: i,
                  onChange: l
                }), z.jsx(_V, {
                  ...o,
                  label: "Z",
                  value: t.z,
                  min: n.z,
                  max: s.z,
                  disabled: i,
                  onChange: c
                }), z.jsx(_V, {
                  ...o,
                  label: "W",
                  value: t.z,
                  min: n.w,
                  max: s.w,
                  disabled: i,
                  onChange: u
                })]
              })
            })]
          })
        })
      });
    };
    const _V = ({
      label: e,
      value: t,
      disabled: n,
      onChange: s,
      onChangeStart: i,
      onChangeEnd: a,
      min: o,
      max: r
    }) => {
      const l = bV(o, r);
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(lV, {
          value: t,
          disabled: n,
          className: QD.vectorLabel,
          dragTransformation: l,
          onChange: s,
          children: e
        }), z.jsx(dV, {
          showHint: true,
          value: t,
          disabled: n,
          onChange: s,
          onFocus: i,
          onBlur: a,
          className: QD.vectorInput,
          min: o,
          max: r
        })]
      });
    };
    function bV(e = Td, t = Ed) {
      0;
      return Y.useCallback((n, s) => function (e, t, n, s) {
        return wd(e + 60 * t, n, s);
      }(n, s, e, t), [t, e]);
    }
    X.add("game-ui/editor/widgets/fields/float-input-field.tsx", {
      get EditorFloatInputField() {
        return gV;
      },
      set EditorFloatInputField(e) {
        gV = e;
      },
      get FloatInputField() {
        return pV;
      },
      set FloatInputField(e) {
        pV = e;
      },
      get Float2InputField() {
        return fV;
      },
      set Float2InputField(e) {
        fV = e;
      },
      get Float3InputField() {
        return xV;
      },
      set Float3InputField(e) {
        xV = e;
      },
      get Float4InputField() {
        return vV;
      },
      set Float4InputField(e) {
        vV = e;
      }
    });
    var TV = () => {
      const {
        activeKeyframe: e,
        activeCurve: t,
        data: n,
        canAddKeyframes: s,
        parseKeyframe: i,
        updateKeyframe: a,
        removeKeyframe: o
      } = DG();
      const r = n.curves[t]?.keys[e];
      0;
      const l = Y.useMemo(() => {
        const s = (s, o) => {
          const l = {
            ...r,
            [s]: o
          };
          const c = i ? i(r, l, e, n.curves[t]?.keys, t) : l;
          a(e, c, false, t);
        };
        return {
          changeTime: e => s("time", e),
          changeValue: e => s("value", e),
          changeInTangent: e => s("inTangent", e),
          changeInWeight: e => s("inWeight", e),
          changeOutTangent: e => s("outTangent", e),
          changeOutWeight: e => s("outWeight", e),
          smoothenTangents: () => a(e, r, true, t),
          removeKeyframe: () => o(e, t)
        };
      }, [t, e, n.curves, r, i, o, a]);
      if (!r) {
        return null;
      }
      const c = n.curves[t];
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: `Keyframe ${e}`,
        children: [z.jsx(pV, {
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Time"
          }),
          value: r.time,
          onChange: l.changeTime
        }), z.jsx(pV, {
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Value"
          }),
          value: r.value,
          onChange: l.changeValue
        }), e > 0 && (0, z.jsxs)(sV, {
          label: (0, z.jsx)(Pc.Editor.WIDGETS, {
            hash: "In"
          }),
          children: [(0, z.jsx)(pV, {
            label: (0, z.jsx)(Pc.Editor.WIDGETS, {
              hash: "Tangent"
            }),
            value: r.inTangent,
            onChange: l.changeInTangent
          }), (0, z.jsx)(pV, {
            label: (0, z.jsx)(Pc.Editor.WIDGETS, {
              hash: "Weight"
            }),
            value: r.inWeight,
            min: 0,
            max: 1,
            onChange: l.changeInWeight
          })]
        }), e < c.keys.length - 1 && (0, z.jsxs)(sV, {
          label: (0, z.jsx)(Pc.Editor.WIDGETS, {
            hash: "Out"
          }),
          children: [(0, z.jsx)(pV, {
            label: (0, z.jsx)(Pc.Editor.WIDGETS, {
              hash: "Tangent"
            }),
            value: r.outTangent,
            onChange: l.changeOutTangent
          }), (0, z.jsx)(pV, {
            label: (0, z.jsx)(Pc.Editor.WIDGETS, {
              hash: "Weight"
            }),
            value: r.outWeight,
            min: 0,
            max: 1,
            onChange: l.changeOutWeight
          })]
        }), z.jsx(JD, {
          children: z.jsxs("div", {
            className: Qu()(IG.row, IG.controls),
            children: [z.jsx(L_, {
              theme: VD,
              onSelect: l.smoothenTangents,
              children: "Smoothen"
            }), s && (0, z.jsx)(L_, {
              disabled: c.keys.length < 3,
              theme: VD,
              onSelect: l.removeKeyframe,
              children: "Delete Keyframe"
            })]
          })
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/keyframe-editor.tsx", {
      get KeyframeEditor() {
        return TV;
      },
      set KeyframeEditor(e) {
        TV = e;
      }
    });
    const EV = {
      min: {
        x: 0,
        y: 0
      },
      max: {
        x: 1,
        y: 1
      }
    };
    var IV = (e, t) => {
      0;
      const n = Y.useRef();
      0;
      const s = Y.useRef();
      0;
      const i = Y.useRef();
      0;
      const a = Y.useRef();
      0;
      const o = Y.useRef();
      0;
      const r = Y.useRef();
      const {
        autoUpdateBounds: l,
        minX: c,
        maxX: u,
        minY: d,
        maxY: m,
        wrapMode: h,
        hash: g
      } = t || {};
      0;
      return Y.useMemo(() => {
        const t = Array.isArray(e) ? e : [e];
        const p = t.reduce((e, t) => t ? {
          maxKeysCount: Math.max(t.keys.filter(e => !e.readonly).length, e.maxKeysCount),
          readOnlyCount: t.keys.reduce((e, t) => e + Number(!!t.readonly), 0)
        } : {
          maxKeysCount: 0,
          readOnlyCount: 0
        }, {
          maxKeysCount: 0,
          readOnlyCount: 0
        });
        let f = EV;
        if (0 === p.maxKeysCount) {
          f = {
            min: {
              x: c ?? 0,
              y: d ?? 0
            },
            max: {
              x: u ?? 1,
              y: m ?? 1
            }
          };
          return {
            bounds: f,
            curves: t
          };
        }
        const x = s.current !== p.maxKeysCount;
        const v = o.current || {};
        const _ = v.minX !== c || v.maxX !== u || v.minY !== d || v.maxY !== m;
        const b = t.length !== a.current;
        const T = r.current !== g;
        if (l || !n.current || x || _ || h !== v?.wrapMode || b || T) {
          if (p.maxKeysCount > 0) {
            f = {
              min: {
                x: c ?? Infinity,
                y: d ?? Infinity
              },
              max: {
                x: u ?? -Infinity,
                y: m ?? -Infinity
              }
            };
          }
          const e = "number" == typeof c;
          const n = "number" == typeof u;
          const s = "number" == typeof d;
          const i = "number" == typeof m;
          t.forEach(t => t.keys.forEach(t => {
            if (t.time < f.min.x && (!e || l)) {
              f.min.x = t.time;
            }
            if (t.time > f.max.x && (!n || l)) {
              f.max.x = t.time;
            }
            if (t.value < f.min.y && (!s || l)) {
              f.min.y = t.value;
            }
            if (t.value > f.max.y && (!i || l)) {
              f.max.y = t.value;
            }
          }));
          {
            const t = f.max.x - f.min.x;
            if (t < 1) {
              f.min.x = Math.floor(f.min.x - (1 - t) / 2);
              f.max.x = Math.ceil(f.min.x + (1 - t) / 2);
            } else if (0 === t) {
              const t = Math.max(1, Math.pow(10, Math.round(Math.log10(Math.abs(f.min.x)))));
              if (e && i || !e && !n) {
                f.min.x -= t / 2;
                f.max.x += t / 2;
              } else if (e) {
                f.max.x += t;
              } else if (n) {
                f.min.x -= t;
              }
            }
          }
          {
            const e = f.max.y - f.min.y;
            if (e < 1 && 0 !== e) {
              f.min.y = Math.floor(f.min.y - (1 - e) / 2);
              f.max.y = Math.ceil(f.min.y + (1 - e) / 2);
            } else if (0 === e) {
              const e = Math.max(1, Math.pow(10, Math.round(Math.log10(Math.abs(f.min.y)))));
              if (s && i || !s && !i) {
                f.min.y -= e / 2;
                f.max.y += e / 2;
              } else if (s) {
                f.max.y += e;
              } else if (i) {
                f.min.y -= e;
              }
            }
          }
        } else {
          f = n.current;
        }
        const E = {
          bounds: _G(n.current, f),
          curves: t,
          maxKeysCount: p.maxKeysCount
        };
        if (h) {
          TG(h, t, E.bounds);
        }
        n.current = f;
        s.current = p.maxKeysCount;
        i.current = p.readOnlyCount;
        r.current = g;
        a.current = t.length;
        o.current = {
          maxX: u,
          minX: c,
          maxY: m,
          minY: d,
          wrapMode: h
        };
        return E;
      }, [e, c, u, d, m, g, l, h]);
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/utils/use-animation-curve-data.tsx", {
      get useAnimationCurveData() {
        return IV;
      },
      set useAnimationCurveData(e) {
        IV = e;
      }
    });
    var yV = ({
      label: e,
      value: t,
      disabled: n,
      hidePreview: s,
      expanded: i,
      initialEditing: a,
      autoUpdateBounds: o,
      bounds: r,
      smoothenOnMove: l,
      canAddKeyframes: c = true,
      wrapMode: u,
      parseKeyframe: d,
      onAddKeyframe: m,
      onMoveKeyframe: h,
      onRemoveKeyframe: g,
      onSetKeyframes: p
    }) => {
      const f = IV(t, {
        autoUpdateBounds: true,
        ...r
      });
      const x = IV(t, {
        autoUpdateBounds: o,
        ...r,
        wrapMode: u
      });
      0;
      const [v, _] = Y.useState(i || a);
      0;
      const b = Y.useMemo(() => {
        if (!i && !n) {
          return () => _(e => !e);
        }
      }, [i, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(eF, {
          disabled: n,
          children: z.jsx(nF, {
            label: e,
            onSelect: b,
            children: !s && (0, z.jsx)(eV, {
              data: f,
              onSelect: b
            })
          })
        }), z.jsx(sF, {
          visible: v,
          children: z.jsxs(kG, {
            data: x,
            onAddKeyframe: m,
            onMoveKeyframe: h,
            onRemoveKeyframe: g,
            onSetKeyframes: p,
            parseKeyframe: d,
            canAddKeyframes: c,
            smoothenOnMove: l,
            children: [z.jsx(XG, {
              zoomable: true,
              panable: true
            }), z.jsx(TV, {})]
          })
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/animation-curve-field.tsx", {
      get AnimationCurveField() {
        return yV;
      },
      set AnimationCurveField(e) {
        yV = e;
      }
    });
    var SV = e => {
      const t = (({
        parent: e,
        path: t
      }) => {
        0;
        const n = Y.useMemo(() => {
          const n = kA(e.path, t);
          return {
            onAddKeyframe: (t, s, i) => XA(e.group, n, t, s, i),
            onMoveKeyframe: (t, s, i, a) => qA(e.group, n, t, s, i, a),
            onRemoveKeyframe: (t, s) => QA(e.group, n, t, s),
            onSetKeyframes: (t, s) => ZA(e.group, n, t, s)
          };
        }, [e.group, e.path, t]);
        return n;
      })(e);
      0;
      0;
      return z.jsx(yV, {
        ...e.props,
        ...t,
        smoothenOnMove: false,
        label: z.jsx(hu, {
          value: e.props.displayName
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/animation-curve-field.bound.tsx", {
      get BoundAnimationCurveField() {
        return SV;
      },
      set BoundAnimationCurveField(e) {
        SV = e;
      }
    });
    var jV = ({
      label: e,
      value: t,
      onChange: n,
      ...s
    }) => {
      0;
      const i = Y.useCallback(e => n({
        ...t,
        a: e
      }), [n, t]);
      0;
      const a = Y.useCallback(e => n({
        ...t,
        b: e
      }), [n, t]);
      0;
      const o = Y.useCallback(e => n({
        ...t,
        c: e
      }), [n, t]);
      0;
      const r = Y.useCallback(e => n({
        ...t,
        d: e
      }), [n, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: e,
        children: [z.jsx(xV, {
          ...s,
          label: "A",
          value: t.a,
          onChange: i
        }), z.jsx(xV, {
          ...s,
          label: "B",
          value: t.b,
          onChange: a
        }), z.jsx(xV, {
          ...s,
          label: "C",
          value: t.c,
          onChange: o
        }), z.jsx(xV, {
          ...s,
          label: "D",
          value: t.d,
          onChange: r
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/bezier4x3-field.tsx", {
      get Bezier4x3Field() {
        return jV;
      },
      set Bezier4x3Field(e) {
        jV = e;
      }
    });
    var CV = ({
      min: e = vd,
      max: t = _d,
      ...n
    }) => {
      0;
      const s = Y.useCallback(n => function (e, t, n) {
        if ("-" === e) {
          return;
        }
        if ("" === e) {
          return t <= 0 && n >= 0 ? 0 : undefined;
        }
        const s = parseInt(e, 10);
        return isNaN(s) ? undefined : wd(s, t, n);
      }(n, e, t), [e, t]);
      0;
      return z.jsx(cV, {
        ...n,
        showHint: true,
        valueFormatter: NV,
        inputParser: s,
        inputValidator: e < 0 ? wV : OV
      });
    };
    function NV(e) {
      return Math.trunc(e).toString(10);
    }
    function wV(e) {
      return /^-?[0-9]*$/.test(e);
    }
    function OV(e) {
      return /^[0-9]*$/.test(e);
    }
    X.add("game-ui/common/input/text/int-input.tsx", {
      get IntInput() {
        return CV;
      },
      set IntInput(e) {
        CV = e;
      }
    });
    let PV = {
      slider: "slider_KXG slider_pUS",
      compact: "compact_c2g",
      range: "range_nHO range_iUN",
      thumb: "thumb_kkL"
    };
    X.add("game-ui/editor/themes/editor-slider.module.scss", {
      get classes() {
        return PV;
      },
      set classes(e) {
        Object.assign(PV, e);
      }
    });
    var AV = ({
      label: e,
      value: t,
      min: n,
      max: s,
      disabled: i,
      tooltip: a,
      onChange: o,
      onChangeStart: r,
      onChangeEnd: l
    }) => (0, z.jsx)(eF, {
      disabled: i,
      children: (0, z.jsx)(bg, {
        tooltip: a && (0, z.jsx)(hu, {
          value: a
        }),
        children: (0, z.jsxs)("div", {
          className: QD.row,
          children: [(0, z.jsx)("div", {
            className: QD.label,
            children: e
          }), (0, z.jsx)("div", {
            className: QD.control,
            children: (0, z.jsxs)(ep, {
              direction: Mg.Horizontal,
              children: [(0, z.jsx)(Tp, {
                className: QD.sliderContainer,
                children: (0, z.jsx)(Np, {
                  children: (0, z.jsx)(GM, {
                    showHint: true,
                    value: t,
                    start: n,
                    end: s,
                    disabled: i,
                    theme: PV,
                    className: QD.slider,
                    valueTransformer: HM,
                    onChange: o,
                    onDragStart: r,
                    onDragEnd: l
                  })
                })
              }), (0, z.jsx)(CV, {
                showHint: true,
                value: t,
                min: n,
                max: s,
                disabled: i,
                onChange: o,
                onFocus: r,
                onBlur: l,
                className: QD.sliderInput
              })]
            })
          })]
        })
      })
    });
    var MV = e => (0, z.jsx)(AV, {
      ...e,
      updateOnDragEnd: false
    });
    var RV = ({
      label: e,
      value: t,
      min: n,
      max: s,
      fractionDigits: i = 3,
      disabled: a,
      tooltip: o,
      onChange: r,
      onChangeStart: l,
      onChangeEnd: c
    }) => {
      const u = KM(Math.pow(10, -i));
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: a,
        children: z.jsx(bg, {
          tooltip: o && (0, z.jsx)(hu, {
            value: o
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx("div", {
              className: QD.label,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(Tp, {
                  className: QD.sliderContainer,
                  children: z.jsx(Np, {
                    children: z.jsx(GM, {
                      showHint: true,
                      value: t,
                      start: n,
                      end: s,
                      disabled: a,
                      theme: PV,
                      className: QD.slider,
                      valueTransformer: u,
                      onChange: r,
                      onDragStart: l,
                      onDragEnd: c
                    })
                  })
                }), z.jsx(dV, {
                  showHint: true,
                  value: t,
                  min: n,
                  max: s,
                  fractionDigits: i,
                  disabled: a,
                  onChange: r,
                  onFocus: l,
                  onBlur: c,
                  className: QD.sliderInput
                })]
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/number-slider-field.tsx", {
      get IntSliderField() {
        return AV;
      },
      set IntSliderField(e) {
        AV = e;
      },
      get UIntSliderField() {
        return MV;
      },
      set UIntSliderField(e) {
        MV = e;
      },
      get FloatSliderField() {
        return RV;
      },
      set FloatSliderField(e) {
        RV = e;
      }
    });
    var kV = ({
      min: e = 0,
      max: t = 0.9993055555555556,
      ...n
    }) => {
      0;
      const s = Y.useCallback(n => function (e, t, n) {
        if ("-" === e) {
          return;
        }
        if ("" === e) {
          return t <= 0 && n >= 0 ? 0 : undefined;
        }
        const s = /^(-?)(\d+):(\d+)$/g.exec(e);
        if (null != s) {
          const e = ("-" === s[1] ? -1 : 1) * (60 * parseInt(s[2]) + parseInt(s[3])) / 1440;
          if (!isNaN(e)) {
            return wd(e, t, n);
          }
        }
        const i = parseInt(e, 10) / 24;
        return isNaN(i) ? undefined : wd(i, t, n);
      }(n, e, t), [e, t]);
      0;
      return z.jsx(cV, {
        ...n,
        valueFormatter: DV,
        inputParser: s,
        inputValidator: e < 0 ? FV : UV
      });
    };
    function DV(e) {
      const t = -1 === Math.sign(e) ? "-" : "";
      const n = Math.floor(24 * (Math.abs(e) + 1e-5));
      const s = Math.round(1440 * Math.abs(e)) % 60;
      return `${t}${bu(n, 2)}:${bu(s, 2)}`;
    }
    function FV(e) {
      return /^-?[0-9]*:?[0-9]*$/.test(e);
    }
    function UV(e) {
      return /^[0-9]*:?[0-9]*$/.test(e);
    }
    X.add("game-ui/common/input/text/time-input.tsx", {
      get TimeInput() {
        return kV;
      },
      set TimeInput(e) {
        kV = e;
      }
    });
    var BV = ({
      label: e,
      value: t,
      min: n,
      max: s,
      disabled: i,
      tooltip: a,
      onChange: o,
      onChangeStart: r,
      onChangeEnd: l
    }) => (0, z.jsx)(eF, {
      disabled: i,
      children: (0, z.jsx)(bg, {
        tooltip: a && (0, z.jsx)(hu, {
          value: a
        }),
        children: (0, z.jsxs)("div", {
          className: QD.row,
          children: [(0, z.jsx)("div", {
            className: QD.label,
            children: e
          }), (0, z.jsx)("div", {
            className: QD.control,
            children: (0, z.jsxs)(ep, {
              direction: Mg.Horizontal,
              children: [(0, z.jsx)(Tp, {
                className: QD.sliderContainer,
                children: (0, z.jsx)(Np, {
                  children: (0, z.jsx)(GM, {
                    showHint: true,
                    value: t,
                    start: n,
                    end: s,
                    disabled: i,
                    theme: PV,
                    className: QD.slider,
                    valueTransformer: GV,
                    onChange: o,
                    onDragStart: r,
                    onDragEnd: l
                  })
                })
              }), (0, z.jsx)(kV, {
                showHint: true,
                value: t,
                min: n,
                max: s,
                disabled: i,
                onChange: o,
                onFocus: r,
                onBlur: l,
                className: QD.sliderInput
              })]
            })
          })]
        })
      })
    });
    function GV(e, t, n) {
      return wd(Math.round(96 * (e + n * (t - e))) / 96, Math.min(e, t), Math.max(e, t));
    }
    X.add("game-ui/editor/widgets/fields/time-slider-field.tsx", {
      get TimeSliderField() {
        return BV;
      },
      set TimeSliderField(e) {
        BV = e;
      },
      get quarterHourTransformer() {
        return GV;
      },
      set quarterHourTransformer(e) {
        GV = e;
      }
    });
    var VV = ({
      label: e,
      value: t,
      allowMinGreaterMax: n,
      onChange: s,
      ...i
    }) => {
      0;
      const a = Y.useCallback(e => s({
        ...t,
        min: n ? e : Math.min(e, t.max)
      }), [s, n, t]);
      0;
      const o = Y.useCallback(e => s({
        ...t,
        max: n ? e : Math.max(e, t.min)
      }), [s, n, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: e,
        children: [z.jsx(gV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Min"
          }),
          value: t.min,
          onChange: a
        }), z.jsx(gV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Max"
          }),
          value: t.max,
          onChange: o
        })]
      });
    };
    var HV = ({
      label: e,
      value: t,
      allowMinGreaterMax: n,
      onChange: s,
      ...i
    }) => {
      0;
      const a = Y.useCallback(e => {
        s({
          ...t,
          min: {
            x: n ? e.x : Math.min(e.x, t.max.x),
            y: n ? e.y : Math.min(e.y, t.max.y)
          }
        });
      }, [s, n, t]);
      0;
      const o = Y.useCallback(e => {
        s({
          ...t,
          max: {
            x: n ? e.x : Math.max(e.x, t.min.x),
            y: n ? e.y : Math.max(e.y, t.min.y)
          }
        });
      }, [s, n, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: e,
        children: [z.jsx(fV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Min"
          }),
          value: t.min,
          onChange: a
        }), z.jsx(fV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Max"
          }),
          value: t.max,
          onChange: o
        })]
      });
    };
    var KV = ({
      label: e,
      value: t,
      allowMinGreaterMax: n,
      onChange: s,
      ...i
    }) => {
      0;
      const a = Y.useCallback(e => {
        s({
          ...t,
          min: {
            x: n ? e.x : Math.min(e.x, t.max.x),
            y: n ? e.y : Math.min(e.y, t.max.y),
            z: n ? e.z : Math.min(e.z, t.max.z)
          }
        });
      }, [s, n, t]);
      0;
      const o = Y.useCallback(e => {
        s({
          ...t,
          max: {
            x: n ? e.x : Math.max(e.x, t.min.x),
            y: n ? e.y : Math.max(e.y, t.min.y),
            z: n ? e.z : Math.max(e.z, t.min.z)
          }
        });
      }, [s, n, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: e,
        children: [z.jsx(xV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Min"
          }),
          value: t.min,
          onChange: a
        }), z.jsx(xV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Max"
          }),
          value: t.max,
          onChange: o
        })]
      });
    };
    var WV = ({
      label: e,
      value: t,
      allowMinGreaterMax: n,
      onChange: s,
      ...i
    }) => {
      0;
      const a = Y.useCallback(e => s({
        ...t,
        min: n ? e : Math.min(e, t.max)
      }), [s, n, t]);
      0;
      const o = Y.useCallback(e => s({
        ...t,
        max: n ? e : Math.max(e, t.min)
      }), [s, n, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: e,
        children: [z.jsx(RV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Min"
          }),
          value: t.min,
          onChange: a,
          updateOnDragEnd: false
        }), z.jsx(RV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Max"
          }),
          value: t.max,
          onChange: o,
          updateOnDragEnd: false
        })]
      });
    };
    var zV = ({
      label: e,
      value: t,
      allowMinGreaterMax: n,
      onChange: s,
      ...i
    }) => {
      0;
      const a = Y.useCallback(e => s({
        ...t,
        min: n ? e : Math.min(e, t.max)
      }), [n, s, t]);
      0;
      const o = Y.useCallback(e => s({
        ...t,
        max: n ? e : Math.max(e, t.min)
      }), [n, s, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(sV, {
        label: e,
        children: [z.jsx(BV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Min"
          }),
          value: t.min,
          onChange: a
        }), z.jsx(BV, {
          ...i,
          label: z.jsx(Pc.Editor.WIDGETS, {
            hash: "Max"
          }),
          value: t.max,
          onChange: o
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/bounds-field.tsx", {
      get Bounds1InputField() {
        return VV;
      },
      set Bounds1InputField(e) {
        VV = e;
      },
      get Bounds2InputField() {
        return HV;
      },
      set Bounds2InputField(e) {
        HV = e;
      },
      get Bounds3InputField() {
        return KV;
      },
      set Bounds3InputField(e) {
        KV = e;
      },
      get Bounds1SliderField() {
        return WV;
      },
      set Bounds1SliderField(e) {
        WV = e;
      },
      get TimeBoundsSliderField() {
        return zV;
      },
      set TimeBoundsSliderField(e) {
        zV = e;
      }
    });
    var YV = e => (0, z.jsx)(cV, {
      ...e,
      valueFormatter: $V,
      inputParser: qV,
      inputTransformer: XV,
      inputValidator: QV
    });
    function $V(e) {
      return sN(e);
    }
    function qV(e) {
      return aN(e) || undefined;
    }
    function XV(e) {
      return e.toUpperCase();
    }
    function QV(e) {
      return /^#?([a-f0-9]{0,6})$/i.test(e);
    }
    X.add("game-ui/common/input/text/hex-color-input.tsx", {
      get HexColorInput() {
        return YV;
      },
      set HexColorInput(e) {
        YV = e;
      }
    });
    var ZV = JV();
    function JV({
      s: e,
      v: t
    } = {
      h: 1,
      s: 1,
      v: 1,
      a: 1
    }, n = 36) {
      return sH({
        h: 0,
        s: e,
        v: t,
        a: 1
      }, {
        h: 1,
        s: e,
        v: t,
        a: 1
      }, n);
    }
    function eH({
      h: e,
      v: t
    }) {
      return sH({
        h: e,
        s: 0,
        v: t,
        a: 1
      }, {
        h: e,
        s: 1,
        v: t,
        a: 1
      }, 2);
    }
    function tH({
      h: e,
      s: t
    }) {
      return sH({
        h: e,
        s: t,
        v: 0,
        a: 1
      }, {
        h: e,
        s: t,
        v: 1,
        a: 1
      }, 2);
    }
    function nH({
      h: e,
      s: t,
      v: n
    }) {
      return sH({
        h: e,
        s: t,
        v: n,
        a: 0
      }, {
        h: e,
        s: t,
        v: n,
        a: 1
      }, 2);
    }
    function sH(e, t, n) {
      const s = [];
      for (let i = 0; i <= n; i++) {
        s.push({
          offset: i / n,
          color: tN(oN(cN(e, t, i / n)))
        });
      }
      return {
        stops: s
      };
    }
    function iH(e, t) {
      return {
        stops: [{
          offset: 0,
          color: tN(e)
        }, {
          offset: 1,
          color: tN(t)
        }]
      };
    }
    X.add("game-ui/common/input/color-picker/color-slider/slider-backgrounds.ts", {
      get hueSliderBackground() {
        return ZV;
      },
      set hueSliderBackground(e) {
        ZV = e;
      },
      get buildHueSliderBackground() {
        return JV;
      },
      set buildHueSliderBackground(e) {
        JV = e;
      },
      get buildSaturationSliderBackground() {
        return eH;
      },
      set buildSaturationSliderBackground(e) {
        eH = e;
      },
      get buildValueSliderBackground() {
        return tH;
      },
      set buildValueSliderBackground(e) {
        tH = e;
      },
      get buildAlphaSliderBackground() {
        return nH;
      },
      set buildAlphaSliderBackground(e) {
        nH = e;
      },
      get buildHsvGradient() {
        return sH;
      },
      set buildHsvGradient(e) {
        sH = e;
      },
      get buildRgbGradient() {
        return iH;
      },
      set buildRgbGradient(e) {
        iH = e;
      }
    });
    let aH = {
      edge: "edge_xBb",
      "start-edge": "start-edge_nii edge_xBb",
      startEdge: "start-edge_nii edge_xBb",
      "end-edge": "end-edge_egi edge_xBb",
      endEdge: "end-edge_egi edge_xBb",
      "track-bounds": "track-bounds_hs9 track-bounds_H8_",
      trackBounds: "track-bounds_hs9 track-bounds_H8_"
    };
    X.add("game-ui/common/input/slider/gradient-slider/gradient-slider.module.scss", {
      get classes() {
        return aH;
      },
      set classes(e) {
        Object.assign(aH, e);
      }
    });
    var rH = ({
      gradient: e,
      theme: t,
      ...n
    }) => {
      0;
      const s = Y.useMemo(() => ({
        ...aH,
        ...t
      }), [t]);
      const i = e.stops.find(e => 0 === e.offset);
      const a = i?.color ?? "grey";
      const o = e.stops.find(e => 1 === e.offset);
      const r = o?.color ?? "grey";
      0;
      const l = Y.useMemo(() => ({
        "--startColor": "string" == typeof a ? a : tN(a),
        "--endColor": "string" == typeof r ? r : tN(r),
        "--gradient": uN(e)
      }), [a, r, e]);
      0;
      0;
      0;
      return z.jsxs(GM, {
        ...n,
        theme: s,
        style: l,
        children: [z.jsx("div", {
          className: s.startEdge
        }), z.jsx("div", {
          className: s.endEdge
        })]
      });
    };
    X.add("game-ui/common/input/slider/gradient-slider/gradient-slider.tsx", {
      get GradientSlider() {
        return rH;
      },
      set GradientSlider(e) {
        rH = e;
      }
    });
    let lH = {
      slider: "slider_fer slider_pUS",
      "gamepad-active": "gamepad-active_Elg",
      gamepadActive: "gamepad-active_Elg",
      thumb: "thumb_z1a"
    };
    X.add("game-ui/common/input/color-picker/color-slider/color-slider.module.scss", {
      get classes() {
        return lH;
      },
      set classes(e) {
        Object.assign(lH, e);
      }
    });
    let uH = {
      "color-component-input": "color-component-input_WeK",
      colorComponentInput: "color-component-input_WeK",
      label: "label_GH4",
      "slider-container": "slider-container_NuQ",
      sliderContainer: "slider-container_NuQ",
      slider: "slider_xgT",
      alpha: "alpha_N_s",
      input: "input_zfe"
    };
    X.add("game-ui/common/input/color-picker/component-input/component-input.module.scss", {
      get classes() {
        return uH;
      },
      set classes(e) {
        Object.assign(uH, e);
      }
    });
    var mH = ({
      label: e,
      value: t,
      scale: n,
      step: s,
      gradient: i,
      alpha: a,
      onChange: o,
      textField: r = true
    }) => {
      0;
      const l = Y.useCallback(e => o(wd(e / n, 0, 1)), [o, n]);
      const c = KM(s);
      const u = km();
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: uH.colorComponentInput,
        children: [r && (0, z.jsx)("div", {
          className: uH.label,
          children: e
        }), z.jsx("div", {
          className: Qu()(uH.slider, a && uH.alpha),
          children: z.jsx("div", {
            className: uH.sliderContainer,
            children: z.jsx(rH, {
              value: t * n,
              start: 0,
              end: n,
              theme: lH,
              gradient: i,
              gamepadStep: n / 50,
              valueTransformer: c,
              className: Qu()(u && lH.gamepadActive),
              onChange: l
            })
          })
        }), r && (1 !== s ? (0, z.jsx)(dV, {
          value: t * n,
          onChange: l,
          className: uH.input
        }) : (0, z.jsx)(CV, {
          value: Math.round(t * n),
          onChange: l,
          className: uH.input
        }))]
      });
    };
    X.add("game-ui/common/input/color-picker/component-input/component-input.tsx", {
      get ComponentInput() {
        return mH;
      },
      set ComponentInput(e) {
        mH = e;
      }
    });
    var hH = ({
      color: e,
      onChange: t,
      textField: n = true
    }) => {
      0;
      const s = Y.useCallback(n => t({
        ...e,
        h: n
      }), [e, t]);
      0;
      const i = Y.useCallback(n => t({
        ...e,
        s: n
      }), [e, t]);
      0;
      const a = Y.useCallback(n => t({
        ...e,
        v: n
      }), [e, t]);
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(mH, {
          label: "H",
          value: e.h,
          scale: 360,
          step: 1,
          gradient: ZV,
          onChange: s,
          textField: n
        }), z.jsx(mH, {
          label: "S",
          value: e.s,
          scale: 100,
          step: 1,
          gradient: eH(e),
          onChange: i,
          textField: n
        }), z.jsx(mH, {
          label: "V",
          value: e.v,
          scale: 100,
          step: 1,
          gradient: tH(e),
          onChange: a,
          textField: n
        })]
      });
    };
    var gH = ({
      color: e,
      onChange: t,
      scale: n = 255,
      step: s = 1,
      textField: i = true
    }) => {
      const a = oN(e);
      const o = e.h;
      0;
      const r = Y.useCallback(e => t(rN({
        ...a,
        r: e
      }, o)), [a, o, t]);
      0;
      const l = Y.useCallback(e => t(rN({
        ...a,
        g: e
      }, o)), [a, o, t]);
      0;
      const c = Y.useCallback(e => t(rN({
        ...a,
        b: e
      }, o)), [a, o, t]);
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(mH, {
          label: "R",
          value: a.r,
          scale: n,
          step: s,
          gradient: iH({
            ...a,
            r: 0,
            a: 1
          }, {
            ...a,
            r: 1,
            a: 1
          }),
          onChange: r,
          textField: i
        }), z.jsx(mH, {
          label: "G",
          value: a.g,
          scale: n,
          step: s,
          gradient: iH({
            ...a,
            g: 0,
            a: 1
          }, {
            ...a,
            g: 1,
            a: 1
          }),
          onChange: l,
          textField: i
        }), z.jsx(mH, {
          label: "B",
          value: a.b,
          scale: n,
          step: s,
          gradient: iH({
            ...a,
            b: 0,
            a: 1
          }, {
            ...a,
            b: 1,
            a: 1
          }),
          onChange: c,
          textField: i
        })]
      });
    };
    var pH = ({
      color: e,
      scale: t = 100,
      step: n = 1,
      onChange: s,
      textField: i = true
    }) => {
      0;
      const a = Y.useCallback(t => s({
        ...e,
        a: t
      }), [e, s]);
      0;
      return z.jsx(mH, {
        label: "A",
        value: e.a,
        scale: t,
        step: n,
        gradient: nH(e),
        alpha: true,
        onChange: a,
        textField: i
      });
    };
    X.add("game-ui/common/input/color-picker/component-input/component-inputs.tsx", {
      get HsvComponentInputs() {
        return hH;
      },
      set HsvComponentInputs(e) {
        hH = e;
      },
      get RgbComponentInputs() {
        return gH;
      },
      set RgbComponentInputs(e) {
        gH = e;
      },
      get AlphaComponentInput() {
        return pH;
      },
      set AlphaComponentInput(e) {
        pH = e;
      }
    });
    var fH = ({
      s: e = 1,
      v: t = 1,
      outerRadius: n,
      innerRadius: s,
      className: i
    }) => (0, Y.useMemo)(() => {
      const a = 2 * Math.PI / 360 + .02;
      const o = n - 1;
      const r = s + 1;
      const l = 2 * n;
      0;
      0;
      return z.jsx("svg", {
        width: l,
        height: l,
        viewBox: `0 0 ${l} ${l}`,
        className: i,
        children: z.jsx("g", {
          transform: `translate(${n} ${n})`,
          children: [...Array(360)].map((n, s) => {
            const i = s / 360;
            const l = 2 * Math.PI * i;
            const c = l + a;
            const u = Math.sin(l);
            const d = Math.cos(l);
            const m = Math.sin(c);
            const h = Math.cos(c);
            const g = tN(oN({
              h: i,
              s: e,
              v: t,
              a: 1
            }));
            const p = [[u * o, -d * o], [u * o, -d * o], [m * o, -h * o], [m * r, -h * r]];
            0;
            return z.jsx("path", {
              d: `M${p.join(" L")}z`,
              fill: g,
              stroke: g,
              strokeWidth: 2
            }, s);
          })
        })
      });
    }, [i, s, n, e, t]);
    X.add("game-ui/common/input/color-picker/radial-hue-picker/radial-hue-wheel.tsx", {
      get RadialHueWheel() {
        return fH;
      },
      set RadialHueWheel(e) {
        fH = e;
      }
    });
    let xH = {
      "radial-hue-picker": "radial-hue-picker_TbV",
      radialHuePicker: "radial-hue-picker_TbV",
      active: "active_JI3",
      wheel: "wheel_aXq",
      thumb: "thumb_ydk"
    };
    X.add("game-ui/common/input/color-picker/radial-hue-picker/radial-hue-picker.module.scss", {
      get classes() {
        return xH;
      },
      set classes(e) {
        Object.assign(xH, e);
      }
    });
    var _H = ({
      h: e,
      s: t = 1,
      v: n = 1,
      decimalPrecision: s = 3,
      outerRadius: i,
      innerRadius: a,
      className: o,
      onChange: r,
      onDragStart: l,
      onDragEnd: c
    }) => {
      0;
      const u = Y.useRef(null);
      0;
      const d = Y.useCallback(({
        clientX: e,
        clientY: t
      }) => !(!u.current || !function (e, t, n, s, i) {
        const {
          left: a,
          top: o,
          width: r,
          height: l
        } = e.getBoundingClientRect();
        const c = t - a - r / 2;
        const u = n - o - l / 2;
        const d = c * c + u * u;
        const m = s * s;
        const h = i * i;
        return d >= m && d <= h;
      }(u.current, e, t, a, i)) && (document.activeElement instanceof HTMLElement && document.activeElement.blur(), rp(op.grabSlider), l && l(), r && r(bH(u.current, e, t, s)), true), [a, i, l, r, s]);
      0;
      const m = Y.useCallback(({
        clientX: e,
        clientY: t
      }) => {
        if (u.current && r) {
          rp(op.dragSlider);
          r(bH(u.current, e, t, s));
        }
      }, [r, s]);
      0;
      const h = Y.useCallback(() => {
        if (c) {
          c();
        }
      }, [c]);
      const [g, p] = eb(d, m, h);
      const f = {
        width: 2 * i,
        height: 2 * i
      };
      const x = (a + i) / 2;
      const v = 2 * e * Math.PI;
      const _ = {
        transform: `translate(${x * Math.sin(v)}px, ${-x * Math.cos(v)}px) translate(-50%, -50%)`,
        top: i,
        left: i,
        backgroundColor: tN(oN({
          h: e,
          s: t,
          v: n,
          a: 1
        }))
      };
      0;
      0;
      0;
      return z.jsxs("div", {
        ref: u,
        className: Qu()(xH.radialHuePicker, g && xH.active, o),
        style: f,
        onMouseDown: p,
        children: [z.jsx(fH, {
          s: t,
          v: n,
          outerRadius: i,
          innerRadius: a,
          className: xH.wheel
        }), z.jsx("div", {
          className: xH.thumb,
          style: _
        })]
      });
    };
    function bH(e, t, n, s) {
      const {
        left: i,
        top: a,
        width: o,
        height: r
      } = e.getBoundingClientRect();
      const l = t - i - o / 2;
      const c = n - a - r / 2;
      return wd(Pd(Math.atan2(-l, c) / (2 * Math.PI) + .5, s), 0, 1);
    }
    X.add("game-ui/common/input/color-picker/radial-hue-picker/radial-hue-picker.tsx", {
      get RadialHuePicker() {
        return _H;
      },
      set RadialHuePicker(e) {
        _H = e;
      }
    });
    var TH = ({
      h: e,
      width: t,
      height: n,
      className: s
    }) => {
      0;
      const i = Y.useId();
      0;
      const a = Y.useMemo(() => {
        const a = Math.round(n / 1);
        0;
        return z.jsx("svg", {
          width: t,
          height: n,
          viewBox: `0 0 ${t} ${n}`,
          className: s,
          children: [...Array(a)].map((n, s) => {
            const o = 1 - s / a;
            const r = tN(oN({
              h: e,
              s: 0,
              v: o,
              a: 1
            }));
            const l = tN(oN({
              h: e,
              s: 1,
              v: o,
              a: 1
            }));
            const u = 1 * s;
            0;
            0;
            0;
            0;
            0;
            return z.jsxs("g", {
              children: [z.jsxs("linearGradient", {
                id: `${`g-${i}-${s}`}`,
                gradientTransform: "rotate(90)",
                children: [z.jsx("stop", {
                  offset: "0%",
                  stopColor: r
                }), z.jsx("stop", {
                  offset: "100%",
                  stopColor: l
                })]
              }), z.jsx("rect", {
                y: u,
                width: 2 * t,
                height: 1,
                fill: `url(#${`g-${i}-${s}`})`
              })]
            }, s);
          })
        });
      }, [s, e, n, i, t]);
      return a;
    };
    X.add("game-ui/common/input/color-picker/saturation-value-picker/saturation-value-gradient.tsx", {
      get SaturationValueGradient() {
        return TH;
      },
      set SaturationValueGradient(e) {
        TH = e;
      }
    });
    let EH = {
      "saturation-gradient-picker": "saturation-gradient-picker_tkk",
      saturationGradientPicker: "saturation-gradient-picker_tkk",
      active: "active_LF5",
      gradient: "gradient_LME",
      thumb: "thumb_l7W"
    };
    X.add("game-ui/common/input/color-picker/saturation-value-picker/saturation-value-picker.module.scss", {
      get classes() {
        return EH;
      },
      set classes(e) {
        Object.assign(EH, e);
      }
    });
    var yH = ({
      h: e,
      s: t,
      v: n,
      decimalPrecision: s = 3,
      width: i,
      height: a,
      className: o,
      onChange: r,
      onDragStart: l,
      onDragEnd: c
    }) => {
      0;
      const u = Y.useRef(null);
      0;
      const d = Y.useCallback(({
        clientX: t,
        clientY: n
      }) => !!u.current && (document.activeElement instanceof HTMLElement && document.activeElement.blur(), rp(op.grabSlider), l && l(), r && r(...SH(u.current, t, n, e, s)), true), [l, r, e, s]);
      0;
      const m = Y.useCallback(({
        clientX: t,
        clientY: n
      }) => {
        if (u.current && r) {
          rp(op.dragSlider);
          r(...SH(u.current, t, n, e, s));
        }
      }, [r, e, s]);
      0;
      const h = Y.useCallback(() => {
        if (c) {
          c();
        }
      }, [c]);
      const [g, p] = eb(d, m, h);
      const f = Qu()(EH.saturationGradientPicker, g && EH.active, o);
      const x = {
        width: i,
        height: a
      };
      const v = {
        transform: `translate(${t * i}px, ${(1 - n) * a}px) translate(-50%, -50%)`,
        backgroundColor: tN(oN({
          h: e,
          s: t,
          v: n,
          a: 1
        }))
      };
      0;
      0;
      0;
      return z.jsxs("div", {
        ref: u,
        className: f,
        style: x,
        onMouseDown: p,
        children: [z.jsx(TH, {
          h: e,
          width: i,
          height: a,
          className: EH.gradient
        }), z.jsx("div", {
          className: EH.thumb,
          style: v
        })]
      });
    };
    function SH(e, t, n, s, i) {
      const {
        left: a,
        top: o,
        width: r,
        height: l
      } = e.getBoundingClientRect();
      return [wd(Pd((t - a) / r, i), 0, 1), wd(Pd(1 - (n - o) / l, i), 0, 1)];
    }
    X.add("game-ui/common/input/color-picker/saturation-value-picker/saturation-value-picker.tsx", {
      get SaturationValuePicker() {
        return yH;
      },
      set SaturationValuePicker(e) {
        yH = e;
      }
    });
    let jH = {
      "color-picker": "color-picker_aNX",
      colorPicker: "color-picker_aNX",
      section: "section_cwE",
      preview: "preview_HmH",
      "preview-swatch": "preview-swatch_fDW",
      previewSwatch: "preview-swatch_fDW",
      wheel: "wheel_lpH",
      sv: "sv_Nf5",
      "sv-picker": "sv-picker_DTa",
      svPicker: "sv-picker_DTa",
      modes: "modes_ZSt",
      "mode-dropdown": "mode-dropdown_fGC",
      modeDropdown: "mode-dropdown_fGC",
      sliders: "sliders_sCL",
      hex: "hex_c98",
      "hex-label": "hex-label_yqK",
      hexLabel: "hex-label_yqK",
      "hex-input": "hex-input_hFc",
      hexInput: "hex-input_hFc"
    };
    X.add("game-ui/common/input/color-picker/color-picker/color-picker.module.scss", {
      get classes() {
        return jH;
      },
      set classes(e) {
        Object.assign(jH, e);
      }
    });
    var NH;
    var wH;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Current = 1] = "Current";
      e[e.CurrentAndLast = 2] = "CurrentAndLast";
    }(NH || (NH = {}));
    (function (e) {
      e.Hsv = "Hsv";
      e.RgbFloat = "RgbFloat";
      e.RgbByte = "RgbByte";
    })(wH || (wH = {}));
    var OH = ({
      focusKey: e,
      color: t,
      alpha: n,
      colorWheel: s = true,
      sliderTextInput: i = true,
      preview: a = NH.None,
      mode: o,
      hexInput: r = true,
      onChange: l,
      allowFocusExit: c = true
    }) => {
      t = {
        ...t,
        a: n ? t.a : 1
      };
      0;
      const u = Y.useRef(t);
      0;
      const [d, m] = Y.useState(o || wH.Hsv);
      0;
      const h = Y.useCallback(e => l({
        ...t,
        h: e
      }), [l, t]);
      0;
      const g = Y.useCallback((e, n) => l({
        ...t,
        s: e,
        v: n
      }), [l, t]);
      0;
      const p = Y.useCallback(e => l(rN({
        ...e,
        a: t.a
      }, t.h)), [l, t]);
      0;
      const f = Y.useCallback(() => l(u.current), [l]);
      const x = Vm();
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ab, {
        children: z.jsx(ep, {
          focusKey: e,
          allowFocusExit: c,
          children: z.jsxs("div", {
            className: jH.colorPicker,
            children: [a !== NH.None && (0, z.jsxs)("div", {
              className: jH.preview,
              children: [a === NH.CurrentAndLast && (0, z.jsx)("div", {
                className: jH.previewSwatch,
                style: {
                  backgroundColor: tN(oN(u.current))
                },
                onClick: f
              }), (0, z.jsx)("div", {
                className: jH.previewSwatch,
                style: {
                  backgroundColor: tN(oN(t))
                }
              })]
            }), s && (0, z.jsxs)("div", {
              className: Qu()(jH.section, jH.wheel),
              children: [(0, z.jsx)(_H, {
                h: t.h,
                outerRadius: 93 * x,
                innerRadius: 70 * x,
                onChange: h
              }), (0, z.jsx)("div", {
                className: jH.sv,
                children: (0, z.jsx)(yH, {
                  ...t,
                  width: 94 * x,
                  height: 94 * x,
                  onChange: g,
                  className: jH.svPicker
                })
              })]
            }), undefined === o && (0, z.jsx)("div", {
              className: Qu()(jH.modes, jH.section),
              children: (0, z.jsx)(ny, {
                theme: fF,
                content: Object.values(wH).map(e => (0, z.jsx)(oy, {
                  focusKey: e,
                  value: e,
                  selected: d === e,
                  onChange: m,
                  children: PH(e)
                }, e)),
                children: (0, z.jsx)(sy, {
                  className: jH.modeDropdown,
                  children: PH(d)
                })
              })
            }), z.jsx("div", {
              className: Qu()(jH.sliders, jH.section),
              children: z.jsx(LH, {
                mode: d,
                color: t,
                alpha: n,
                onChange: l,
                textField: i
              })
            }), r && (0, z.jsxs)("div", {
              className: Qu()(jH.hex, jH.section),
              children: [(0, z.jsx)("div", {
                className: jH.hexLabel,
                children: "Hex"
              }), (0, z.jsx)(YV, {
                value: oN(t),
                onChange: p,
                className: jH.hexInput
              })]
            })]
          })
        })
      });
    };
    function PH(e) {
      switch (e) {
        case wH.Hsv:
          return "HSV";
        case wH.RgbFloat:
          return "RGB 0-1.0";
        case wH.RgbByte:
          return "RGB 0-255";
      }
    }
    const LH = ({
      mode: e,
      color: t,
      alpha: n,
      onChange: s,
      textField: i = true
    }) => {
      switch (e) {
        case wH.Hsv:
          0;
          0;
          return z.jsxs(z.Fragment, {
            children: [z.jsx(hH, {
              color: t,
              onChange: s,
              textField: i
            }), n && (0, z.jsx)(pH, {
              color: t,
              scale: 100,
              step: 1,
              onChange: s,
              textField: i
            })]
          });
        case wH.RgbFloat:
          0;
          0;
          return z.jsxs(z.Fragment, {
            children: [z.jsx(gH, {
              color: t,
              scale: 1,
              step: .001,
              onChange: s,
              textField: i
            }), n && (0, z.jsx)(pH, {
              color: t,
              scale: 1,
              step: .001,
              onChange: s,
              textField: i
            })]
          });
        case wH.RgbByte:
          0;
          0;
          return z.jsxs(z.Fragment, {
            children: [z.jsx(gH, {
              color: t,
              scale: 255,
              step: 1,
              onChange: s,
              textField: i
            }), n && (0, z.jsx)(pH, {
              color: t,
              scale: 255,
              step: 1,
              onChange: s,
              textField: i
            })]
          });
      }
    };
    X.add("game-ui/common/input/color-picker/color-picker/color-picker.tsx", {
      get ColorPickerPreview() {
        return NH;
      },
      set ColorPickerPreview(e) {
        NH = e;
      },
      get ColorPickerSliderMode() {
        return wH;
      },
      set ColorPickerSliderMode(e) {
        wH = e;
      },
      get ColorPicker() {
        return OH;
      },
      set ColorPicker(e) {
        OH = e;
      }
    });
    const AH = new Tg("swatch");
    const MH = new Tg("picker");
    var RH = ({
      label: e,
      value: t,
      showAlpha: n,
      disabled: s,
      onChange: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      0;
      const r = Y.useCallback(() => o(e => !e), []);
      0;
      Y.useEffect(() => {
        if (s) {
          o(false);
        }
      }, [s]);
      0;
      const [l, c] = Y.useState(0);
      0;
      const u = Y.useCallback(e => {
        c(e.h);
        i(oN(e));
      }, [i]);
      0;
      const d = Y.useMemo(() => function (e, t) {
        const n = rN(e, t);
        if (0 === n.h && t > .99) {
          return {
            ...n,
            h: 1
          };
        }
        return n;
      }(t, l), [l, t]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: s,
        children: z.jsxs(ip, {
          focused: a ? MH : AH,
          children: [z.jsxs("div", {
            className: QD.row,
            children: [z.jsx("div", {
              className: QD.label,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsx(L_, {
                focusKey: AH,
                className: Qu()(QD.swatch, t.a < 1 && QD.alpha),
                onSelect: s ? undefined : r,
                children: z.jsx("div", {
                  style: {
                    backgroundColor: tN(t)
                  }
                })
              })
            })]
          }), a && (0, z.jsx)("div", {
            className: QD.colorPickerContainer,
            children: (0, z.jsx)(OH, {
              focusKey: MH,
              color: d,
              alpha: n,
              onChange: u
            })
          })]
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/color-field.tsx", {
      get ColorField() {
        return RH;
      },
      set ColorField(e) {
        RH = e;
      }
    });
    var kH = "​";
    function DH(e, t) {
      return e.split(" ").map(e => {
        if (e.length > t) {
          let n = "";
          for (let s = 0; s < e.length; s += t) {
            n += e.substring(s, s + t) + " ";
          }
          return n.trim();
        }
        return e;
      }).join(" ");
    }
    var FH = e => e.replaceAll(/(\\|\/)/g, (...e) => `${"\\" === e[1] ? "\\\\" : e[1]}${kH}`);
    X.add("game-ui/common/utils/strings.ts", {
      get ZERO_WIDTH_SPACE() {
        return kH;
      },
      set ZERO_WIDTH_SPACE(e) {
        kH = e;
      },
      get breakLongWords() {
        return DH;
      },
      set breakLongWords(e) {
        DH = e;
      },
      get locPathTransformer() {
        return FH;
      },
      set locPathTransformer(e) {
        FH = e;
      }
    });
    const UH = new Tg("FIELD");
    var BH = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(VA, sM(e, t));
      rg(dT.value?.assetImportButton);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: n.uiTag || undefined,
        editor: true,
        children: z.jsx(GH, {
          label: z.jsx(hu, {
            value: n.displayName
          }),
          value: n.displayValue,
          disabled: n.disabled,
          tooltip: n.tooltip && (0, z.jsx)(hu, {
            value: n.tooltip,
            transformer: FH
          }),
          onOpenDirectoryBrowser: s
        })
      });
    };
    var GH = ({
      label: e,
      value: t,
      disabled: n,
      tooltip: s,
      className: i,
      theme: a,
      onOpenDirectoryBrowser: o
    }) => {
      0;
      const r = Y.useCallback(() => o(), [o]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: n,
        className: i,
        children: z.jsx(ip, {
          focused: UH,
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx("div", {
              className: Qu()(QD.label, a?.label),
              children: e
            }), z.jsx("div", {
              className: Qu()(QD.control, a?.control),
              children: z.jsx(bg, {
                tooltip: s ?? t,
                children: z.jsxs(L_, {
                  focusKey: UH,
                  className: Qu()(QD.pickerToggle, QD.directoryButton, a?.button),
                  disabled: n,
                  onSelect: r,
                  children: [z.jsx("div", {
                    children: t
                  }), z.jsx("img", {
                    src: "Media/Editor/Folder.svg",
                    className: QD.directoryIcon
                  })]
                })
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/directory-picker-button.tsx", {
      get BoundDirectoryPickerButton() {
        return BH;
      },
      set BoundDirectoryPickerButton(e) {
        BH = e;
      },
      get DirectoryPickerButton() {
        return GH;
      },
      set DirectoryPickerButton(e) {
        GH = e;
      }
    });
    let VH = {
      "dropdown-flag-item": "dropdown-flag-item_EcT",
      dropdownFlagItem: "dropdown-flag-item_EcT",
      toggle: "toggle_RyX",
      label: "label_PwM"
    };
    X.add("game-ui/common/input/dropdown/items/dropdown-flag-item.module.scss", {
      get classes() {
        return VH;
      },
      set classes(e) {
        Object.assign(VH, e);
      }
    });
    function KH({
      focusKey: e,
      value: t,
      checked: n,
      theme: s = VH,
      toggleComponent: i = kb,
      className: a,
      onChange: o,
      children: r
    }) {
      0;
      const l = Y.useCallback(() => {
        if (o) {
          o(t, !n);
        }
      }, [n, o, t]);
      0;
      0;
      0;
      return z.jsx(Rg, {
        onAction: l,
        children: z.jsxs(Ep, {
          focusKey: e,
          className: Qu()(s.dropdownFlagItem, n && "checked", a),
          onClick: l,
          children: [Y.createElement(i, {
            checked: n,
            className: s.toggle
          }), z.jsx("div", {
            className: s.label,
            children: r
          })]
        })
      });
    }
    X.add("game-ui/common/input/dropdown/items/dropdown-flag-item.tsx", {
      get DropdownFlagItem() {
        return KH;
      },
      set DropdownFlagItem(e) {
        KH = e;
      }
    });
    var WH = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      0;
      const i = Y.useMemo(() => n.enumMembers.map(FA), [n.enumMembers]);
      0;
      const a = Y.useCallback(e => BA(s, lm(e)), [s]);
      0;
      0;
      return z.jsx(YH, {
        label: z.jsx(hu, {
          value: n.displayName
        }),
        value: rm(n.value),
        enumMembers: i,
        disabled: n.disabled,
        tooltip: n.tooltip,
        onChange: a
      });
    };
    var zH = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      0;
      const i = Y.useMemo(() => n.enumMembers.map(FA), [n.enumMembers]);
      0;
      const a = Y.useCallback(e => BA(s, lm(e)), [s]);
      0;
      0;
      return z.jsx($H, {
        label: z.jsx(hu, {
          value: n.displayName
        }),
        value: rm(n.value),
        enumMembers: i,
        disabled: n.disabled,
        onChange: a
      });
    };
    var YH = ({
      label: e,
      value: t,
      enumMembers: n,
      disabled: s,
      onChange: i,
      tooltip: a
    }) => {
      const o = ac();
      0;
      const r = Y.useMemo(() => XH(o, n, t), [o, n, t]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: s,
        children: z.jsx(bg, {
          tooltip: a && (0, z.jsx)(hu, {
            value: a
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx("div", {
              className: QD.label,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsx(ny, {
                theme: fF,
                initialFocused: r,
                content: n?.map((e, n) => (0, z.jsx)(oy, {
                  focusKey: n,
                  value: e.value,
                  selected: t === e.value,
                  onChange: i,
                  children: (0, z.jsx)(hu, {
                    value: e.displayName
                  })
                }, n)),
                children: z.jsx(sy, {
                  sounds: qH,
                  className: QD.dropdownToggle,
                  disabled: s,
                  children: r
                })
              })
            })]
          })
        })
      });
    };
    var $H = ({
      label: e,
      value: t,
      enumMembers: n,
      disabled: s,
      onChange: i
    }) => {
      const a = ac();
      0;
      const o = Y.useMemo(() => function (e, t, n) {
        if (0n !== n) {
          const s = t.map(e => e.value).find(e => e === n);
          return s ? XH(e, t, s) : t.filter(e => 0n !== e.value && (n & e.value) === e.value).map(t => gu(e, t.displayName)).join(", ") || " ";
        }
        return XH(e, t, 0n);
      }(a, n, t), [a, n, t]);
      0;
      const r = Y.useCallback((e, n) => {
        i(n ? t | e : t & ~e);
      }, [i, t]);
      0;
      const l = Y.useMemo(() => n.map(e => e.value).reduce((e, t) => e | t), [n]);
      const c = l === t;
      0;
      const u = Y.useCallback(() => i(l), [l, i]);
      0;
      const d = Y.useCallback(() => i(0n), [i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: s,
        children: z.jsxs("div", {
          className: QD.row,
          children: [z.jsx("div", {
            className: QD.label,
            children: e
          }), z.jsx("div", {
            className: QD.control,
            children: z.jsx(ny, {
              theme: fF,
              initialFocused: 0,
              content: z.jsxs(z.Fragment, {
                children: [z.jsx(L_, {
                  onSelect: c ? d : u,
                  selected: c,
                  className: fF.toggleFlagsButton,
                  children: z.jsx(Pc.Editor.SELECT_NOTHING_EVERYTHING, {})
                }), n.map((e, n) => (0, z.jsx)(KH, {
                  theme: fF,
                  focusKey: n,
                  value: e.value,
                  checked: (e.value & t) === e.value,
                  onChange: r,
                  children: (0, z.jsx)(hu, {
                    value: e.displayName
                  })
                }, n))]
              }),
              children: z.jsx(sy, {
                sounds: qH,
                className: QD.dropdownToggle,
                children: o
              })
            })
          })]
        })
      });
    };
    const qH = {
      ...P_,
      hover: null,
      focus: null
    };
    function XH(e, t, n) {
      const s = t.find(e => e.value === n);
      return null != s ? gu(e, s.displayName) : " ";
    }
    function QH(e) {
      return Object.entries(e).filter(e => "number" == typeof e[1]).map(([e, t]) => ({
        displayName: bc(e),
        value: BigInt(t)
      }));
    }
    X.add("game-ui/editor/widgets/fields/enum-field.tsx", {
      get BoundEnumField() {
        return WH;
      },
      set BoundEnumField(e) {
        WH = e;
      },
      get BoundFlagsField() {
        return zH;
      },
      set BoundFlagsField(e) {
        zH = e;
      },
      get EnumField() {
        return YH;
      },
      set EnumField(e) {
        YH = e;
      },
      get FlagsField() {
        return $H;
      },
      set FlagsField(e) {
        $H = e;
      },
      get getEnumMembers() {
        return QH;
      },
      set getEnumMembers(e) {
        QH = e;
      }
    });
    var ZH = ({
      gradient: e,
      iconSrc: t,
      label: n,
      value: s,
      min: i,
      max: a,
      tooltip: o,
      onChange: r
    }) => {
      const l = KM(Math.pow(10, -1));
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        children: z.jsx(bg, {
          tooltip: o && (0, z.jsx)(hu, {
            value: o
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx("div", {
              className: QD.label,
              children: n
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(Tp, {
                  className: QD.sliderContainer,
                  children: z.jsx(Np, {
                    children: z.jsx(rH, {
                      gradient: e,
                      value: s,
                      start: i,
                      end: a,
                      theme: lH,
                      className: QD.gradientSlider,
                      valueTransformer: l,
                      onChange: r,
                      showHint: true
                    })
                  })
                }), z.jsx(dV, {
                  showHint: true,
                  value: s,
                  min: i,
                  max: a,
                  fractionDigits: 1,
                  onChange: r,
                  className: QD.sliderInput
                })]
              })
            }), t && (0, z.jsx)(W_, {
              src: t,
              className: QD.icon
            })]
          })
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/gradient-slider-field.tsx", {
      get GradientSliderField() {
        return ZH;
      },
      set GradientSliderField(e) {
        ZH = e;
      }
    });
    var JH = e => (0, z.jsx)(eK, {
      ...e
    });
    var eK = ({
      disabled: e,
      value: t,
      onChange: n,
      label: s,
      min: i = vd,
      max: a = _d,
      onChangeStart: o,
      onChangeEnd: r,
      tooltip: l
    }) => {
      0;
      const c = Y.useCallback((e, t) => wd(Math.trunc(e + 30 * t), i, a), [i, a]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: e,
        children: z.jsx(bg, {
          tooltip: l && (0, z.jsx)(hu, {
            value: l
          }),
          children: z.jsxs("div", {
            "data-type": "field",
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: e,
              className: QD.label,
              dragTransformation: c,
              onChange: n,
              children: s
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsx(CV, {
                showHint: true,
                value: t,
                min: i,
                max: a,
                disabled: e,
                className: QD.input,
                onChange: n,
                onFocus: o,
                onBlur: r
              })
            })]
          })
        })
      });
    };
    var tK = ({
      min: e = 0,
      max: t = bd,
      ...n
    }) => (0, z.jsx)(JH, {
      ...n,
      min: e,
      max: t
    });
    var nK = ({
      label: e,
      value: t,
      onChange: n,
      ...s
    }) => {
      0;
      const i = Y.useCallback(e => n({
        ...t,
        x: e
      }), [t, n]);
      0;
      const a = Y.useCallback(e => n({
        ...t,
        y: e
      }), [t, n]);
      const o = function (e = vd, t = _d) {
        0;
        return Y.useCallback((n, s) => {
          return {
            x: wd(Math.trunc(n.x + s * 60), e, t),
            y: wd(Math.trunc(n.y + s * 60), e, t)
          };
        }, [t, e]);
      }(s.min, s.max);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: s.disabled,
        children: z.jsx(bg, {
          tooltip: s.tooltip && (0, z.jsx)(hu, {
            value: s.tooltip
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: s.disabled,
              className: QD.label,
              dragTransformation: o,
              onChange: n,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(aK, {
                  ...s,
                  label: "X",
                  value: t.x,
                  onChange: i
                }), z.jsx(aK, {
                  ...s,
                  label: "Y",
                  value: t.y,
                  onChange: a
                })]
              })
            })]
          })
        })
      });
    };
    var sK = ({
      label: e,
      value: t,
      onChange: n,
      ...s
    }) => {
      0;
      const i = Y.useCallback(e => n({
        ...t,
        x: e
      }), [t, n]);
      0;
      const a = Y.useCallback(e => n({
        ...t,
        y: e
      }), [t, n]);
      0;
      const o = Y.useCallback(e => n({
        ...t,
        z: e
      }), [t, n]);
      const r = function (e = vd, t = _d) {
        0;
        return Y.useCallback((n, s) => {
          return {
            x: wd(Math.trunc(n.x + s * 60), e, t),
            y: wd(Math.trunc(n.y + s * 60), e, t),
            z: wd(Math.trunc(n.z + s * 60), e, t)
          };
        }, [t, e]);
      }(s.min, s.max);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: s.disabled,
        children: z.jsx(bg, {
          tooltip: s.tooltip && (0, z.jsx)(hu, {
            value: s.tooltip
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: s.disabled,
              className: QD.label,
              dragTransformation: r,
              onChange: n,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(aK, {
                  ...s,
                  label: "X",
                  value: t.x,
                  onChange: i
                }), z.jsx(aK, {
                  ...s,
                  label: "Y",
                  value: t.y,
                  onChange: a
                }), z.jsx(aK, {
                  ...s,
                  label: "Z",
                  value: t.z,
                  onChange: o
                })]
              })
            })]
          })
        })
      });
    };
    var iK = ({
      label: e,
      value: t,
      onChange: n,
      ...s
    }) => {
      0;
      const i = Y.useCallback(e => n({
        ...t,
        x: e
      }), [t, n]);
      0;
      const a = Y.useCallback(e => n({
        ...t,
        y: e
      }), [t, n]);
      0;
      const o = Y.useCallback(e => n({
        ...t,
        z: e
      }), [t, n]);
      0;
      const r = Y.useCallback(e => n({
        ...t,
        w: e
      }), [t, n]);
      const l = function (e = vd, t = _d) {
        0;
        return Y.useCallback((n, s) => {
          return {
            x: wd(Math.trunc(n.x + s * 60), e, t),
            y: wd(Math.trunc(n.y + s * 60), e, t),
            z: wd(Math.trunc(n.z + s * 60), e, t),
            w: wd(Math.trunc(n.w + s * 60), e, t)
          };
        }, [t, e]);
      }(s.min, s.max);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: s.disabled,
        children: z.jsx(bg, {
          tooltip: s.tooltip && (0, z.jsx)(hu, {
            value: s.tooltip
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx(lV, {
              value: t,
              disabled: s.disabled,
              className: QD.label,
              dragTransformation: l,
              onChange: n,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(aK, {
                  ...s,
                  label: "X",
                  value: t.x,
                  onChange: i
                }), z.jsx(aK, {
                  ...s,
                  label: "Y",
                  value: t.y,
                  onChange: a
                }), z.jsx(aK, {
                  ...s,
                  label: "Z",
                  value: t.z,
                  onChange: o
                }), z.jsx(aK, {
                  ...s,
                  label: "W",
                  value: t.w,
                  onChange: r
                })]
              })
            })]
          })
        })
      });
    };
    const aK = ({
      label: e,
      value: t,
      disabled: n,
      onChange: s,
      onChangeStart: i,
      onChangeEnd: a,
      min: o,
      max: r
    }) => {
      const l = function (e = vd, t = _d) {
        0;
        return Y.useCallback((n, s) => wd(Math.trunc(n + 30 * s), e, t), [t, e]);
      }(o, r);
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(lV, {
          value: t,
          disabled: n,
          className: QD.vectorLabel,
          dragTransformation: l,
          onChange: s,
          onDragStart: i,
          onDragEnd: a,
          children: e
        }), z.jsx(CV, {
          showHint: true,
          value: t,
          disabled: n,
          className: QD.vectorInput,
          onChange: s,
          onFocus: i,
          onBlur: a,
          min: o,
          max: r
        })]
      });
    };
    function oK(e, t, n, s) {
      return wd(Math.trunc(e + 30 * t), n, s);
    }
    X.add("game-ui/editor/widgets/fields/int-input-field.tsx", {
      get EditorIntInputField() {
        return JH;
      },
      set EditorIntInputField(e) {
        JH = e;
      },
      get IntInputField() {
        return eK;
      },
      set IntInputField(e) {
        eK = e;
      },
      get UIntInputField() {
        return tK;
      },
      set UIntInputField(e) {
        tK = e;
      },
      get Int2InputField() {
        return nK;
      },
      set Int2InputField(e) {
        nK = e;
      },
      get Int3InputField() {
        return sK;
      },
      set Int3InputField(e) {
        sK = e;
      },
      get Int4InputField() {
        return iK;
      },
      set Int4InputField(e) {
        iK = e;
      }
    });
    const rK = new Tg("FIELD");
    const lK = new Tg("PICKER");
    var cK = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      0;
      const a = Y.useContext(hM);
      const o = PA(GA, i);
      return n.hidden ? null : (0, z.jsx)(aT, {
        uiTag: n.uiTag || undefined,
        editor: true,
        children: (0, z.jsx)(uK, {
          label: (0, z.jsx)(hu, {
            value: n.displayName
          }),
          value: (0, z.jsx)(hu, {
            value: n.displayValue
          }),
          expanded: n.expanded,
          disabled: n.disabled,
          tooltip: n.tooltip,
          onExpandedChange: o,
          children: (0, z.jsx)(mM, {
            parent: i,
            components: a,
            data: s
          })
        })
      });
    };
    var uK = ({
      label: e,
      value: t,
      expanded: n,
      disabled: s,
      children: i,
      tooltip: a,
      onExpandedChange: o
    }) => {
      0;
      const r = Y.useCallback(() => o(!n), [n, o]);
      0;
      const l = Y.useCallback(() => o(false), [o]);
      const c = Gm(QD.pickerMinHeight);
      0;
      0;
      const u = z.jsx(kg, {
        onAction: r,
        children: z.jsx(ep, {
          focusKey: lK,
          allowFocusExit: false,
          children: i
        })
      });
      const d = s_();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [n && (0, z.jsx)(o_, {
          onClick: l
        }), z.jsx(eF, {
          disabled: s,
          children: z.jsx(bg, {
            tooltip: a && (0, z.jsx)(hu, {
              value: a
            }),
            children: z.jsx(ip, {
              focused: n ? lK : rK,
              activation: n ? $u.Always : $u.FocusedChild,
              children: z.jsx(YI, {
                visible: n,
                minHeight: c,
                content: u,
                className: QD.pickerPopup,
                style: d,
                minWidth: true,
                children: z.jsxs("div", {
                  className: QD.row,
                  children: [z.jsx("div", {
                    className: QD.label,
                    children: e
                  }), z.jsx("div", {
                    className: QD.control,
                    children: z.jsx(L_, {
                      focusKey: rK,
                      className: Qu()(QD.pickerToggle, n && QD.expanded),
                      disabled: s,
                      onSelect: r,
                      children: t
                    })
                  })]
                })
              })
            })
          })
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/popup-value-field.tsx", {
      get BoundPopupValueField() {
        return cK;
      },
      set BoundPopupValueField(e) {
        cK = e;
      },
      get PopupValueField() {
        return uK;
      },
      set PopupValueField(e) {
        uK = e;
      }
    });
    var dK = ({
      label: e,
      iconSrc: t,
      value: n,
      min: s,
      max: i,
      fractionDigits: a = 3,
      disabled: o,
      tooltip: r,
      onChange: l,
      onChangeStart: c,
      onChangeEnd: u
    }) => {
      const d = KM(Math.pow(10, -a));
      const m = ((e, t, n) => {
        const s = [];
        for (let i = e; i <= t; i += n) {
          0;
          s.push(z.jsx("div", {
            className: QD.tickMark,
            style: {
              left: (i - e) / (t - e) * 100 + "%"
            }
          }, i));
        }
        return s;
      })(s, i, (i - s) / 10);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        disabled: o,
        children: z.jsx(bg, {
          tooltip: r && (0, z.jsx)(hu, {
            value: r
          }),
          children: z.jsxs("div", {
            className: QD.row,
            children: [z.jsx("div", {
              className: QD.label,
              children: e
            }), z.jsx("div", {
              className: QD.control,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                children: [z.jsx(Tp, {
                  className: QD.sliderContainer,
                  children: z.jsx(Np, {
                    children: z.jsx(GM, {
                      showHint: true,
                      value: n,
                      start: s,
                      end: i,
                      disabled: o,
                      theme: PV,
                      className: Qu()(QD.slider, QD.rangedSlider),
                      valueTransformer: d,
                      onChange: l,
                      onDragStart: c,
                      onDragEnd: u,
                      children: m
                    })
                  })
                }), z.jsx(dV, {
                  showHint: true,
                  value: n,
                  min: s,
                  max: i,
                  fractionDigits: a,
                  disabled: o,
                  onChange: l,
                  onFocus: c,
                  onBlur: u,
                  className: QD.sliderInput
                })]
              })
            }), t && (0, z.jsx)(W_, {
              src: t,
              className: QD.icon
            })]
          })
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/ranged-slider-field.tsx", {
      get RangedSliderField() {
        return dK;
      },
      set RangedSliderField(e) {
        dK = e;
      }
    });
    var mK = ({
      seasons: e,
      tickHeight: t = 50
    }) => {
      const {
        viewport: n
      } = oU();
      const {
        padding: s,
        rem: i,
        bounds: a,
        posFromPoint: o
      } = n;
      0;
      0;
      return z.jsxs("g", {
        children: [e.map((e, t) => {
          const n = o(e.startTime, a.max.y);
          0;
          0;
          0;
          return z.jsxs("g", {
            children: [z.jsx(BG, {
              x1: e.startTime,
              x2: e.startTime,
              y1: a.min.y - s.bottom,
              y2: a.max.y + s.top,
              stroke: "#fff3",
              strokeWidth: 1
            }), z.jsx(cG, {
              fontSize: i(12),
              x: Math.max(n.x - i(10), i(10)),
              y: n.y + i(s.top - 10),
              label: e.name,
              color: "#fff6",
              rotation: 90,
              textAnchor: "end"
            })]
          }, `${e.name}${t}`);
        }), z.jsx(dG, {
          overdraw: true,
          halfSteps: true,
          drawAxes: "y",
          tickHeight: t
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/seasons-field/seasons-grid-lines.tsx", {
      get SeasonsGridLines() {
        return mK;
      },
      set SeasonsGridLines(e) {
        mK = e;
      }
    });
    const hK = {
      left: 0,
      bottom: 10,
      top: 40,
      right: 0
    };
    const gK = () => "";
    var pK = e => {
      const {
        label: t,
        data: n,
        type: s,
        seasons: i,
        editorClassName: a,
        curveDataOptions: o,
        gridLinesTickHeight: r,
        onAddKeyframe: l,
        onRemoveKeyframe: c,
        onUpdateSeasonProperty: u
      } = e;
      const d = IV(n[s], {
        minX: 0,
        maxX: 1,
        minY: 0,
        maxY: 100,
        autoUpdateBounds: false,
        wrapMode: "loop",
        ...o
      });
      0;
      const m = Y.useCallback(async (e, t, n, i) => u(e, s, i || 0, t), [u, s]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        children: [z.jsx("p", {
          children: t
        }), z.jsx(kG, {
          data: d,
          onRemoveKeyframe: c,
          onAddKeyframe: l,
          onMoveKeyframe: m,
          canAddKeyframes: true,
          hideControlPoints: true,
          allowEditingAll: true,
          children: z.jsx(XG, {
            padding: hK,
            gridLines: false,
            formatLabelX: gK,
            className: a,
            children: z.jsx(mK, {
              seasons: i,
              tickHeight: r
            })
          })
        })]
      });
    };
    X.add("game-ui/editor/widgets/fields/seasons-field/seasons-curve-editor.tsx", {
      get SeasonsCurveEditor() {
        return pK;
      },
      set SeasonsCurveEditor(e) {
        pK = e;
      }
    });
    let fK = {
      "seasons-field": "seasons-field_wTf",
      seasonsField: "seasons-field_wTf",
      "cloudiness-editor": "cloudiness-editor_bcT",
      cloudinessEditor: "cloudiness-editor_bcT",
      "fog-editor": "fog-editor_FS_",
      fogEditor: "fog-editor_FS_",
      "temperature-gradient": "temperature-gradient_hNT",
      temperatureGradient: "temperature-gradient_hNT"
    };
    X.add("game-ui/editor/widgets/fields/seasons-field/seasons.module.scss", {
      get classes() {
        return fK;
      },
      set classes(e) {
        Object.assign(fK, e);
      }
    });
    var vK = ({
      value: e,
      seasons: t,
      label: n,
      ...s
    }) => (0, z.jsxs)("div", {
      className: fK.seasonsField,
      children: [n && (0, z.jsx)("p", {
        children: n
      }), (0, z.jsx)(pK, {
        data: e,
        label: "Temperature",
        type: "temperature",
        curveDataOptions: {
          minY: -40,
          maxY: 40
        },
        seasons: t,
        ...s
      }), (0, z.jsx)(pK, {
        data: e,
        label: "Fog",
        type: "fog",
        seasons: t,
        gridLinesTickHeight: 75,
        editorClassName: fK.fogEditor,
        ...s
      }), (0, z.jsx)(pK, {
        data: e,
        label: "Cloudiness",
        type: "cloudiness",
        seasons: t,
        editorClassName: fK.cloudinessEditor,
        ...s
      }), (0, z.jsx)(pK, {
        data: e,
        label: "Percipitation",
        type: "precipitation",
        seasons: t,
        ...s
      }), (0, z.jsx)(pK, {
        data: e,
        label: "Aurora",
        type: "aurora",
        seasons: t,
        ...s
      })]
    });
    X.add("game-ui/editor/widgets/fields/seasons-field/seasons-field.tsx", {
      get SeasonsField() {
        return vK;
      },
      set SeasonsField(e) {
        vK = e;
      }
    });
    const _K = {
      inTangent: 0,
      outTangent: 0,
      inWeight: .33,
      outWeight: .33,
      weightedMode: OG.None
    };
    const bK = {
      temperature: ["final", "tempNightDay.y", "tempDeviationNightDay.y", "tempNightDay.x", "tempDeviationNightDay.x"],
      cloudiness: ["final", "cloudAmount", "cloudAmountDeviation", "cloudChance", "turbulence"],
      precipitation: ["final", "precipitationAmount", "precipitationAmountDeviation", "precipitationChance", "turbulence"],
      aurora: ["final", "auroraAmount", "auroraChance"],
      fog: ["final"]
    };
    var TK = (e, t) => bK[e][t];
    var EK = (e, t, n, s) => ({
      label: e,
      color: t,
      keys: [],
      preWrapMode: PG.Loop,
      postWrapMode: PG.Loop,
      deviationFrom: n,
      readonly: s
    });
    const IK = () => ({
      temperature: [EK("final", "#f3f3f3", undefined, true), EK("day", "#f00f"), EK("dayDeviation", "#f967", 1), EK("night", "#00ff"), EK("nightDeviation", "#74f7", 3)],
      cloudiness: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("amountDeviation", "#aaf7", 1), EK("chance", "#0f0a"), EK("turbulence", "#fffa")],
      precipitation: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("amountDeviation", "#44f7", 1), EK("chance", "#0f0a"), EK("turbulence", "#fffa")],
      aurora: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("chance", "#0f0a")],
      fog: [EK("final", "#f3f3f3", undefined, true)]
    });
    const yK = (e, t) => ({
      ..._K,
      time: e,
      value: t
    });
    var SK = e => (0, Y.useMemo)(() => {
      if (e && e.seasons) {
        const t = {
          temperature: [EK("final", "#f3f3f3", undefined, true), EK("day", "#f00f"), EK("dayDeviation", "#f967", 1), EK("night", "#00ff"), EK("nightDeviation", "#74f7", 3)],
          cloudiness: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("amountDeviation", "#aaf7", 1), EK("chance", "#0f0a"), EK("turbulence", "#fffa")],
          precipitation: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("amountDeviation", "#44f7", 1), EK("chance", "#0f0a"), EK("turbulence", "#fffa")],
          aurora: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("chance", "#0f0a")],
          fog: [EK("final", "#f3f3f3", undefined, true)]
        };
        t.temperature[0].keys = e.curves?.temperature.keys || [];
        t.temperature[0].keys.forEach(e => e.time = e.time / 12);
        t.fog[0].keys = e.curves?.fog.keys || [];
        t.fog[0].keys.forEach(e => {
          e.time = e.time / 12;
          e.value = 100 * e.value;
        });
        t.cloudiness[0].keys = e.curves?.cloudiness.keys || [];
        t.cloudiness[0].keys.forEach(e => {
          e.time = e.time / 12;
          e.value = 100 * e.value;
        });
        t.precipitation[0].keys = e.curves?.precipitation.keys || [];
        t.precipitation[0].keys.forEach(e => {
          e.time = e.time / 12;
          e.value = 100 * e.value;
        });
        t.aurora[0].keys = e.curves?.aurora.keys || [];
        t.aurora[0].keys.forEach(e => {
          e.time = e.time / 12;
          e.value = 100 * e.value;
        });
        return e.seasons.reduce((t, n, s) => {
          const i = ((s < e.seasons.length - 1 ? e.seasons[s + 1].startTime : 1 + e.seasons[0].startTime) + n.startTime) / 2;
          t.temperature[1].keys.push({
            ..._K,
            time: i,
            value: n.tempNightDay.y
          });
          t.temperature[2].keys.push({
            ..._K,
            time: i,
            value: n.tempNightDay.y + n.tempDeviationNightDay.y
          });
          t.temperature[3].keys.push({
            ..._K,
            time: i,
            value: n.tempNightDay.x
          });
          t.temperature[4].keys.push({
            ..._K,
            time: i,
            value: n.tempNightDay.x + n.tempDeviationNightDay.x
          });
          t.cloudiness[1].keys.push({
            ..._K,
            time: i,
            value: n.cloudAmount
          });
          t.cloudiness[2].keys.push({
            ..._K,
            time: i,
            value: n.cloudAmount + n.cloudAmountDeviation
          });
          t.cloudiness[3].keys.push({
            ..._K,
            time: i,
            value: n.cloudChance
          });
          t.cloudiness[4].keys.push({
            ..._K,
            time: i,
            value: 100 * n.turbulence
          });
          t.precipitation[1].keys.push({
            ..._K,
            time: i,
            value: n.precipitationAmount
          });
          t.precipitation[2].keys.push({
            ..._K,
            time: i,
            value: n.precipitationAmount + n.precipitationAmountDeviation
          });
          t.precipitation[3].keys.push({
            ..._K,
            time: i,
            value: n.precipitationChance
          });
          t.precipitation[4].keys.push({
            ..._K,
            time: i,
            value: 100 * n.turbulence
          });
          t.aurora[1].keys.push({
            ..._K,
            time: i,
            value: 100 * n.auroraAmount
          });
          t.aurora[2].keys.push({
            ..._K,
            time: i,
            value: n.auroraChance
          });
          return t;
        }, t);
      }
      return {
        temperature: [EK("final", "#f3f3f3", undefined, true), EK("day", "#f00f"), EK("dayDeviation", "#f967", 1), EK("night", "#00ff"), EK("nightDeviation", "#74f7", 3)],
        cloudiness: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("amountDeviation", "#aaf7", 1), EK("chance", "#0f0a"), EK("turbulence", "#fffa")],
        precipitation: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("amountDeviation", "#44f7", 1), EK("chance", "#0f0a"), EK("turbulence", "#fffa")],
        aurora: [EK("final", "#f3f3f3", undefined, true), EK("amount", "#00ff"), EK("chance", "#0f0a")],
        fog: [EK("final", "#f3f3f3", undefined, true)]
      };
    }, [e]);
    X.add("game-ui/editor/widgets/fields/seasons-field/utils.ts", {
      get getSeasonProperty() {
        return TK;
      },
      set getSeasonProperty(e) {
        TK = e;
      },
      get makeSeasonPropertyCurve() {
        return EK;
      },
      set makeSeasonPropertyCurve(e) {
        EK = e;
      },
      get useCurvesForSeasonsData() {
        return SK;
      },
      set useCurvesForSeasonsData(e) {
        SK = e;
      }
    });
    var jK = e => {
      const t = e.props;
      const n = SK(t);
      const s = (({
        parent: e,
        path: t,
        props: n
      }) => {
        0;
        const s = Y.useMemo(() => {
          const s = kA(e.path, t);
          return {
            onAddKeyframe: async t => JA(e.group, s, t),
            onRemoveKeyframe: t => {
              tM(e.group, s, t);
            },
            onUpdateSeasonProperty: async (t, i, a, o) => {
              const r = n.seasons;
              const [l, c] = TK(i, a).split(".");
              const u = r[t];
              let d = o.value;
              if (l.includes("Deviation")) {
                const e = u[l.replace("Deviation", "")];
                d -= c && "object" == typeof e ? e[c] : e;
              }
              if (!("turbulence" !== l && "auroraAmount" !== l)) {
                d /= 100;
              }
              const m = ((t < r.length - 1 ? r[t + 1].startTime : 1 + r[0].startTime) + u.startTime) / 2;
              const h = {
                ...u,
                [l]: c ? {
                  ...u[l],
                  [c]: d
                } : d,
                startTime: u.startTime + (o.time - m)
              };
              return eM(e.group, s, h);
            }
          };
        }, [e.group, e.path, t, n]);
        return s;
      })(e);
      0;
      0;
      0;
      return z.jsx("div", {
        children: z.jsx(vK, {
          ...e.props,
          ...s,
          value: n,
          seasons: t.seasons,
          label: z.jsx(hu, {
            value: bc("Climate settings")
          })
        })
      });
    };
    X.add("game-ui/editor/widgets/fields/seasons-field/seasons-field.bound.tsx", {
      get updateSeasonProperty() {
        return updateSeasonProperty;
      },
      set updateSeasonProperty(e) {
        updateSeasonProperty = e;
      },
      get BoundSeasonsField() {
        return jK;
      },
      set BoundSeasonsField(e) {
        jK = e;
      }
    });
    var CK = ({
      label: e,
      value: t,
      disabled: n,
      tooltip: s,
      onChange: i
    }) => (0, z.jsx)(eF, {
      disabled: n,
      children: (0, z.jsx)(bg, {
        tooltip: s && (0, z.jsx)(hu, {
          value: s
        }),
        children: (0, z.jsxs)("div", {
          className: QD.row,
          children: [(0, z.jsx)("div", {
            className: QD.label,
            children: e
          }), (0, z.jsx)(kb, {
            showHint: true,
            checked: t,
            disabled: n,
            onChange: i,
            className: QD.toggle
          })]
        })
      })
    });
    X.add("game-ui/editor/widgets/fields/toggle-field.tsx", {
      get ToggleField() {
        return CK;
      },
      set ToggleField(e) {
        CK = e;
      }
    });
    var NK = e => (0, z.jsx)(wK, {
      ...e.props
    });
    const wK = ({
      value: e,
      hidden: t
    }) => t ? null : (0, z.jsx)(JD, {
      children: (0, z.jsx)(hu, {
        value: e
      })
    });
    X.add("game-ui/editor/widgets/fields/value-field.tsx", {
      get BoundLocalizedValueField() {
        return NK;
      },
      set BoundLocalizedValueField(e) {
        NK = e;
      }
    });
    let OK = {
      "popup-content": "popup-content_QLL",
      popupContent: "popup-content_QLL",
      "popup-content-scrollable": "popup-content-scrollable_clr",
      popupContentScrollable: "popup-content-scrollable_clr"
    };
    X.add("game-ui/editor/widgets/filter-menu/filter-menu.module.scss", {
      get classes() {
        return OK;
      },
      set classes(e) {
        Object.assign(OK, e);
      }
    });
    var LK = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      const i = PA(AD, s);
      const a = PA(MD, s);
      0;
      return z.jsx(AK, {
        availableFilters: n.availableFilters,
        activeFilters: n.activeFilters,
        onToggleFilter: i,
        onClear: a
      });
    };
    var AK = ({
      availableFilters: e,
      activeFilters: t,
      onToggleFilter: n,
      onClear: s
    }) => {
      0;
      const [i, a] = Y.useState(false);
      const o = RK(e, t);
      0;
      const r = Y.useMemo(() => t.length > 0 ? t.join(", ") : (0, z.jsx)(Pc.Common.NONE, {}), [t]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(uK, {
        label: z.jsx(Pc.Editor.FILTERS, {}),
        value: r,
        expanded: i,
        onExpandedChange: a,
        children: z.jsxs("div", {
          className: OK.popupContent,
          children: [z.jsx(ab, {
            className: OK.popupContentScrollable,
            children: o.map(e => (0, z.jsx)(MK, {
              filter: e.filter,
              active: e.active,
              onToggle: n
            }, e.filter))
          }), z.jsx(pF, {
            onSelect: s,
            children: z.jsx(Pc.Editor.CLEAR_ALL, {})
          })]
        })
      });
    };
    const MK = ({
      filter: e,
      active: t,
      onToggle: n
    }) => {
      0;
      const s = Y.useCallback(() => n(e, !t), [t, e, n]);
      0;
      return z.jsx(CK, {
        label: e,
        value: t,
        onChange: s
      });
    };
    const RK = (e, t) => (0, Y.useMemo)(() => e.map(e => ({
      filter: e,
      active: t.includes(e)
    })), [t, e]);
    X.add("game-ui/editor/widgets/filter-menu/filter-menu.tsx", {
      get BoundFilterMenu() {
        return LK;
      },
      set BoundFilterMenu(e) {
        LK = e;
      },
      get FilterMenu() {
        return AK;
      },
      set FilterMenu(e) {
        AK = e;
      }
    });
    let kK = {
      "virtual-list": "virtual-list_Amj",
      virtualList: "virtual-list_Amj",
      vertical: "vertical_RRQ",
      horizontal: "horizontal_QEG"
    };
    X.add("game-ui/common/scrolling/virtual-list/virtual-list.module.scss", {
      get classes() {
        return kK;
      },
      set classes(e) {
        Object.assign(kK, e);
      }
    });
    var FK = Y.forwardRef(function ({
      sizeProvider: e,
      direction: t = "vertical",
      controller: n,
      smooth: s,
      className: i,
      style: a,
      renderItem: o,
      onRenderedRangeChange: r
    }, l) {
      0;
      const c = Y.useRef(null);
      const u = hd(l, c);
      const {
        list: d,
        onScroll: m
      } = UK(c, e, t, undefined, o, r);
      const h = "vertical" === t;
      0;
      return z.jsx(ab, {
        ref: u,
        vertical: h,
        horizontal: !h,
        controller: n,
        smooth: s,
        className: i,
        style: a,
        onScroll: m,
        children: d
      });
    });
    function UK(e, t, n, s, i, a) {
      const o = mm(e, um);
      const r = Fm();
      const l = o ?? r;
      const c = "vertical" === n;
      const u = c ? l.y : l.x;
      0;
      const [d, m] = Y.useState(0);
      0;
      const h = Y.useMemo(() => t.getRenderedRange(d, u), [u, d, t]);
      0;
      Y.useEffect(() => {
        if (null != a) {
          a(h.startIndex, h.endIndex);
        }
      }, [a, h.endIndex, h.startIndex]);
      0;
      const g = Y.useCallback(() => {
        if (e.current) {
          m(c ? e.current.scrollTop : e.current.scrollLeft);
        }
      }, [e, c]);
      0;
      Y.useEffect(() => {
        let e = 0;
        (function t() {
          g();
          e = window.requestAnimationFrame(t);
        })();
        return () => window.cancelAnimationFrame(e);
      }, [g]);
      0;
      const p = Y.useMemo(() => {
        const e = [];
        for (let t = 0; t < h.endIndex - h.startIndex; t++) {
          e[t] = i(h.startIndex + t, t);
        }
        const n = t.getTotalSize() + "px";
        const a = h.offset + "px";
        0;
        return z.jsx("div", {
          className: Qu()(kK.virtualList, s, c ? kK.vertical : kK.horizontal),
          style: c ? {
            height: n,
            paddingTop: a
          } : {
            width: n,
            paddingLeft: a
          },
          children: e
        });
      }, [h.endIndex, h.startIndex, h.offset, t, s, c, i]);
      0;
      return Y.useMemo(() => ({
        list: p,
        onScroll: g
      }), [p, g]);
    }
    X.add("game-ui/common/scrolling/virtual-list/virtual-list.tsx", {
      get VirtualList() {
        return FK;
      },
      set VirtualList(e) {
        FK = e;
      },
      get useVirtualList() {
        return UK;
      },
      set useVirtualList(e) {
        UK = e;
      }
    });
    var BK = {
      getRenderedRange: () => ({
        offset: 0,
        size: 0,
        startIndex: 0,
        endIndex: 0
      }),
      getTotalSize: () => 0
    };
    function GK(e, t, n) {
      0;
      return Y.useMemo(() => ({
        getRenderedRange: (s, i) => {
          const a = wd(Math.floor(s / e) - n, 0, t);
          const o = wd(Math.ceil((s + i) / e) + n, a, t);
          return {
            offset: e * a,
            startIndex: a,
            endIndex: o
          };
        },
        getTotalSize: () => e * t
      }), [t, e, n]);
    }
    function VK(e, t, n) {
      0;
      return Y.useMemo(() => {
        const s = function (e, t) {
          const n = [];
          let s = 0;
          for (let i = 0; i < t; ++i) {
            const t = s;
            s += e(i);
            n.push({
              x: t,
              y: s
            });
          }
          return n;
        }(n => e(t[n], n), t.length);
        return {
          getRenderedRange: (e, i) => {
            const a = wd(HK(s, e) - n, 0, t.length);
            const o = wd(HK(s, i + e) + n, a, t.length);
            return {
              offset: s[a].x,
              startIndex: a,
              endIndex: o
            };
          },
          getTotalSize: () => s[s.length - 1].y
        };
      }, [t, n, e]);
    }
    function HK(e, t) {
      for (let n = e.length - 1; n >= 0; --n) {
        if (t >= e[n].x) {
          return n;
        }
      }
      return 0;
    }
    X.add("game-ui/common/scrolling/virtual-list/virtual-list-size-provider.ts", {
      get emptySizeProvider() {
        return BK;
      },
      set emptySizeProvider(e) {
        BK = e;
      },
      get useUniformSizeProvider() {
        return GK;
      },
      set useUniformSizeProvider(e) {
        GK = e;
      },
      get useArraySizeProvider() {
        return VK;
      },
      set useArraySizeProvider(e) {
        VK = e;
      }
    });
    let KK = {
      listItemHeight: "24rem",
      imageSize: "20rem",
      dirArrowSrc: "Media/Glyphs/ThickStrokeArrowRight.svg",
      "hierarchy-menu": "hierarchy-menu_Tm_ editor-widget_QQl",
      hierarchyMenu: "hierarchy-menu_Tm_ editor-widget_QQl",
      item: "item_qWj",
      "list-item": "list-item_eZG item_qWj",
      listItem: "list-item_eZG item_qWj",
      image: "image_IPH",
      name: "name_Mx8",
      "icon-container": "icon-container_OHi",
      iconContainer: "icon-container_OHi",
      "arrow-expanded": "arrow-expanded_Df1",
      arrowExpanded: "arrow-expanded_Df1",
      "placeholder-margin": "placeholder-margin_S8d",
      placeholderMargin: "placeholder-margin_S8d",
      "single-selection": "single-selection_s_l",
      singleSelection: "single-selection_s_l"
    };
    X.add("game-ui/editor/widgets/hierarchy-menu/hierarchy-menu.module.scss", {
      get classes() {
        return KK;
      },
      set classes(e) {
        Object.assign(KK, e);
      }
    });
    var zK;
    var YK = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      const i = PA(RD, s);
      const a = PA(kD, s);
      const o = PA(DD, s);
      0;
      return z.jsx($K, {
        ...n,
        onSetExpanded: i,
        onSelect: a,
        onRenderedRangeChange: o
      });
    };
    var $K = ({
      viewport: e,
      flex: t,
      visibleCount: n,
      onSelect: s,
      onSetExpanded: i,
      singleSelection: a,
      onRenderedRangeChange: o
    }) => {
      const r = GK(Gm(KK.listItemHeight), n, 10);
      const l = zF(t);
      0;
      const c = Y.useCallback((t, n) => {
        if (n < 0 || n >= e.length) {
          return null;
        }
        const o = e[n];
        0;
        return z.jsx(qK, {
          ...o,
          viewportIndex: n,
          singleSelection: a,
          onSelect: s,
          onSetExpanded: i
        }, t);
      }, [s, i, a, e]);
      0;
      return z.jsx(FK, {
        style: l,
        className: KK.hierarchyMenu,
        sizeProvider: r,
        renderItem: c,
        onRenderedRangeChange: o
      });
    };
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Icon = 1] = "Icon";
      e[e.ExpandArrow = 2] = "ExpandArrow";
    }(zK || (zK = {}));
    const qK = ({
      displayName: e,
      icon: t,
      tooltip: n,
      level: s,
      selectable: i,
      viewportIndex: a,
      selected: o,
      expandable: r,
      onSelect: l,
      expanded: c,
      onSetExpanded: u,
      singleSelection: d
    }) => {
      0;
      const m = Y.useCallback(() => {
        if (r && u) {
          u(a, !c);
        }
      }, [r, c, u, a]);
      0;
      const h = Y.useCallback(() => {
        if (!(!i || !l || d && o)) {
          l(a, !o);
        }
      }, [i, l, d, o, a]);
      const g = r ? zK.ExpandArrow : Vr(t) ? zK.None : zK.Icon;
      0;
      const p = Y.useMemo(() => ({
        [c ? "Collapse Group" : "Expand Group"]: r ? m : null
      }), [c, r, m]);
      0;
      0;
      0;
      const f = z.jsxs(L_, {
        style: {
          "--level": s
        },
        className: Qu()(KK.listItem, d && KK.singleSelection),
        onSelect: h,
        selected: o,
        children: [z.jsx("div", {
          className: Qu()(KK.name, g === zK.None && KK.placeholderMargin),
          children: z.jsx(hu, {
            value: e
          })
        }), g === zK.Icon ? (0, z.jsx)("img", {
          src: t,
          className: KK.image
        }) : null, g === zK.ExpandArrow ? (0, z.jsx)(XK, {
          expanded: c,
          onSelect: m
        }) : null]
      });
      0;
      return z.jsx(Lg, {
        actions: p,
        children: null != n ? (0, z.jsx)(bg, {
          tooltip: (0, z.jsx)(hu, {
            value: n
          }),
          children: f
        }) : f
      });
    };
    const XK = ({
      expanded: e,
      onSelect: t
    }) => (0, z.jsx)("div", {
      className: KK.iconContainer,
      children: (0, z.jsx)("img", {
        src: KK.dirArrowSrc,
        className: Qu()(KK.image, e && KK.arrowExpanded),
        onClick: t
      })
    });
    X.add("game-ui/editor/widgets/hierarchy-menu/hierarchy-menu.tsx", {
      get BoundHierarchyMenu() {
        return YK;
      },
      set BoundHierarchyMenu(e) {
        YK = e;
      },
      get HierarchyMenu() {
        return $K;
      },
      set HierarchyMenu(e) {
        $K = e;
      }
    });
    let QK = {
      "image-field": "image-field_PPC",
      imageField: "image-field_PPC",
      label: "label_dKE",
      "image-container": "image-container_jpQ",
      imageContainer: "image-container_jpQ",
      image: "image_xoS"
    };
    X.add("game-ui/editor/widgets/image/image-field.module.scss", {
      get classes() {
        return QK;
      },
      set classes(e) {
        Object.assign(QK, e);
      }
    });
    var JK = e => (0, z.jsx)(eW, {
      ...e.props
    });
    var eW = ({
      uri: e,
      label: t,
      tooltip: n
    }) => (0, z.jsx)(bg, {
      tooltip: n && (0, z.jsx)(hu, {
        value: n
      }),
      children: (0, z.jsxs)("div", {
        className: QK.imageField,
        children: [(0, z.jsx)("div", {
          className: QK.label,
          children: (0, z.jsx)(hu, {
            value: t
          })
        }), (0, z.jsx)("div", {
          className: QK.imageContainer,
          children: (0, z.jsx)("img", {
            src: e,
            className: QK.image
          })
        })]
      })
    });
    function tW(e, t) {
      0;
      const [n, s] = Y.useState(false);
      0;
      Y.useEffect(() => {
        const t = t => {
          if (t.button === e) {
            s(false);
          }
        };
        window.addEventListener("mouseup", t);
        return () => window.removeEventListener("mouseup", t);
      }, [e]);
      0;
      return Y.useMemo(() => null != t ? {
        mouseDown: n,
        onMouseDown: t => {
          if (t.button === e) {
            s(true);
          }
        },
        onMouseUp: i => {
          if (n && i.button === e) {
            s(false);
            t(i);
          }
        }
      } : {
        mouseDown: n
      }, [e, t, n]);
    }
    X.add("game-ui/editor/widgets/image/image-field.tsx", {
      get BoundImageField() {
        return JK;
      },
      set BoundImageField(e) {
        JK = e;
      },
      get ImageField() {
        return eW;
      },
      set ImageField(e) {
        eW = e;
      }
    });
    X.add("game-ui/common/hooks/use-secondary-click.tsx", {
      get useSecondaryClick() {
        return tW;
      },
      set useSecondaryClick(e) {
        tW = e;
      }
    });
    let nW = {
      "theme-icon": "theme-icon_YTM",
      themeIcon: "theme-icon_YTM",
      icon: "icon_QMC"
    };
    X.add("game-ui/common/image/theme-icon.module.scss", {
      get classes() {
        return nW;
      },
      set classes(e) {
        Object.assign(nW, e);
      }
    });
    var iW = ({
      src: e,
      className: t
    }) => (0, z.jsx)("div", {
      className: Qu()(nW.themeIcon, t),
      children: (0, z.jsx)("img", {
        src: e,
        className: nW.icon
      })
    });
    X.add("game-ui/common/image/theme-icon.tsx", {
      get ThemeIcon() {
        return iW;
      },
      set ThemeIcon(e) {
        iW = e;
      }
    });
    let aW = {
      "full-width-digits": "full-width-digits_dns",
      fullWidthDigits: "full-width-digits_dns",
      digits: "digits_a1g",
      blind: "blind_u0R"
    };
    X.add("game-ui/common/text/full-width-digits/full-width-digits.module.scss", {
      get classes() {
        return aW;
      },
      set classes(e) {
        Object.assign(aW, e);
      }
    });
    const rW = /([\d:-]+)|([^\d:-]+)/g;
    const lW = /\d/g;
    var cW = ({
      className: e,
      children: t
    }) => {
      const n = oc(t);
      0;
      const s = Y.useMemo(() => n.match(rW)?.map((e, t) => lW.test(e) ? (0, z.jsxs)("div", {
        className: aW.digits,
        children: [e, (0, z.jsx)("div", {
          className: aW.blind,
          children: e.replace(lW, "0")
        })]
      }, t) : e), [n]);
      0;
      return z.jsx("div", {
        className: Qu()(aW.fullWidthDigits, e),
        children: s
      });
    };
    X.add("game-ui/common/text/full-width-digits/full-width-digits.tsx", {
      get FullWidthDigits() {
        return cW;
      },
      set FullWidthDigits(e) {
        cW = e;
      }
    });
    let uW = {
      wrapper: "wrapper_dff wrapper_onO",
      container: "container_Hgg container_kOI",
      input: "input_sYI",
      label: "label_FEo"
    };
    X.add("game-ui/common/input/text/ellipsis-text-input/themes/default.module.scss", {
      get classes() {
        return uW;
      },
      set classes(e) {
        Object.assign(uW, e);
      }
    });
    function mW(e) {
      0;
      return Y.useMemo(() => ({
        ...uW,
        ...e
      }), [e]);
    }
    X.add("game-ui/common/input/text/ellipsis-text-input/ellipsis-text-input-theme.tsx", {
      get useTextInputTheme() {
        return mW;
      },
      set useTextInputTheme(e) {
        mW = e;
      }
    });
    let hW = {
      wrapper: "wrapper_onO",
      container: "container_kOI",
      input: "input_MMV",
      label: "label_qsp",
      hint: "hint_aHi"
    };
    X.add("game-ui/common/input/text/ellipsis-text-input/ellipsis-text-input.module.scss", {
      get classes() {
        return hW;
      },
      set classes(e) {
        Object.assign(hW, e);
      }
    });
    var pW = Y.forwardRef(function ({
      value: e,
      maxLength: t = 64,
      theme: n = uW,
      disableHint: s = false,
      forceHint: i = false,
      className: a,
      onFocus: o,
      onBlur: r,
      ...l
    }, c) {
      0;
      const [u, d] = Y.useState(false);
      0;
      const [m, h] = Y.useState(false);
      const g = mW(n);
      0;
      const p = Y.useCallback(e => {
        d(true);
        if (o) {
          o(e);
        }
      }, [o]);
      0;
      const f = Y.useCallback(e => {
        d(false);
        if (r) {
          r(e);
        }
      }, [r]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(hW.wrapper, g.wrapper, a),
        children: [z.jsx(LT, {
          action: u ? "Back" : "Select",
          active: !s && (m || i),
          className: hW.hint
        }), z.jsxs(Tp, {
          onFocusChange: h,
          className: Qu()(hW.container, g.container),
          children: [z.jsx(zE, {
            ref: c,
            value: e,
            maxLength: t,
            className: Qu()(hW.input, g.input),
            onFocus: p,
            onBlur: f,
            ...l
          }), z.jsx("div", {
            className: Qu()(hW.label, g.label),
            children: e || " "
          })]
        })]
      });
    });
    X.add("game-ui/common/input/text/ellipsis-text-input/ellipsis-text-input.tsx", {
      get EllipsisTextInput() {
        return pW;
      },
      set EllipsisTextInput(e) {
        pW = e;
      }
    });
    var fW = (e, t) => {
      let n = null;
      let s = -1;
      const i = a => {
        if (!n) {
          n = a;
        }
        if (a - n >= t) {
          e();
        } else {
          s = requestAnimationFrame(i);
        }
      };
      s = requestAnimationFrame(i);
      return () => {
        cancelAnimationFrame(s);
      };
    };
    X.add("game-ui/common/utils/wait.ts", {
      get wait() {
        return fW;
      },
      set wait(e) {
        fW = e;
      }
    });
    var xW = ({
      action: e = "Switch Tab",
      children: t,
      hidden: n
    }) => {
      const s = Op(e, km());
      const i = 2 === s?.items.length;
      const a = !!s?.items.length && (i || 2 === s?.items[0]?.bindings.length);
      return n || !a ? (0, z.jsx)(z.Fragment, {
        children: t
      }) : (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)(yT, {
          modifiers: s.items[0].modifiers,
          bindings: [s.items[0].bindings[0]],
          className: ET.leftTab
        }), t, (0, z.jsx)(yT, {
          modifiers: s.items[i ? 1 : 0].modifiers,
          bindings: [s.items[i ? 1 : 0].bindings[i ? 0 : 1]],
          className: ET.rightTab
        })]
      });
    };
    X.add("game-ui/common/input-events/action-hints/input-hint/tab-hint-icons.tsx", {
      get TabHintIcons() {
        return xW;
      },
      set TabHintIcons(e) {
        xW = e;
      }
    });
    var vW = function (e, t) {
      return e < t ? -1 : e > t ? 1 : 0;
    };
    var _W = function (e, t) {
      var n = e.localeCompare(t);
      return n ? n / Math.abs(n) : 0;
    };
    var bW = /(^0x[\da-fA-F]+$|^([+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?!\.\d+)(?=\D|\s|$))|\d+)/g;
    var TW = /^\s+|\s+$/g;
    var EW = /\s+/g;
    var IW = /^[+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?$/;
    var yW = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[/-]\d{1,4}[/-]\d{1,4}|^\w+, \w+ \d+, \d{4})/;
    var SW = /^0+[1-9]{1}[0-9]*$/;
    var jW = /[^\x00-\x80]/;
    var CW = function (e, t) {
      return e < t ? -1 : e > t ? 1 : 0;
    };
    var NW = function (e, t) {
      return e.value === t.value ? 0 : undefined !== e.parsedNumber && undefined !== t.parsedNumber ? e.parsedNumber < t.parsedNumber ? -1 : e.parsedNumber > t.parsedNumber ? 1 : 0 : e.chunks && t.chunks ? function (e, t) {
        var n = e.length;
        var s = t.length;
        var i = Math.min(n, s);
        for (var a = 0; a < i; a++) {
          var o = e[a];
          var r = t[a];
          if (o.normalizedString !== r.normalizedString) {
            if ("" === o.normalizedString != ("" === r.normalizedString)) {
              return "" === o.normalizedString ? -1 : 1;
            }
            if (undefined !== o.parsedNumber && undefined !== r.parsedNumber) {
              var l = o.parsedNumber < r.parsedNumber ? -1 : o.parsedNumber > r.parsedNumber ? 1 : 0;
              return 0 === l ? o.normalizedString < r.normalizedString ? -1 : o.normalizedString > r.normalizedString ? 1 : 0 : l;
            }
            return undefined !== o.parsedNumber || undefined !== r.parsedNumber ? undefined !== o.parsedNumber ? -1 : 1 : jW.test(o.normalizedString + r.normalizedString) ? _W(o.normalizedString, r.normalizedString) : o.normalizedString < r.normalizedString ? -1 : o.normalizedString > r.normalizedString ? 1 : 0;
          }
        }
        return n > i || s > i ? n <= i ? -1 : 1 : 0;
      }(e.chunks, t.chunks) : function (e, t) {
        return (e.chunks ? !t.chunks : t.chunks) ? e.chunks ? -1 : 1 : (e.isNaN ? !t.isNaN : t.isNaN) ? e.isNaN ? -1 : 1 : (e.isSymbol ? !t.isSymbol : t.isSymbol) ? e.isSymbol ? -1 : 1 : (e.isObject ? !t.isObject : t.isObject) ? e.isObject ? -1 : 1 : (e.isArray ? !t.isArray : t.isArray) ? e.isArray ? -1 : 1 : (e.isFunction ? !t.isFunction : t.isFunction) ? e.isFunction ? -1 : 1 : (e.isNull ? !t.isNull : t.isNull) ? e.isNull ? -1 : 1 : 0;
      }(e, t);
    };
    var wW = function (e) {
      return e.replace(EW, " ").replace(TW, "");
    };
    var OW = function (e) {
      if (0 !== e.length) {
        var t = Number(e);
        if (!Number.isNaN(t)) {
          return t;
        }
      }
    };
    var PW = function (e, t, n) {
      if (IW.test(e) && (!SW.test(e) || 0 === t || "." !== n[t - 1])) {
        return OW(e) || 0;
      }
    };
    var LW = function (e, t, n) {
      return {
        parsedNumber: PW(e, t, n),
        normalizedString: e.replace(EW, " ").replace(TW, "")
      };
    };
    var AW = function (e) {
      var t = function (e) {
        return e.replace(bW, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0");
      }(e).map(LW);
      return t;
    };
    var MW = function (e) {
      return "function" == typeof e;
    };
    var RW = function (e) {
      return Number.isNaN(e) || e instanceof Number && Number.isNaN(e.valueOf());
    };
    var kW = function (e) {
      return null === e;
    };
    var DW = function (e) {
      return !(null === e || "object" != typeof e || Array.isArray(e) || e instanceof Number || e instanceof String || e instanceof Boolean || e instanceof Date);
    };
    var FW = function (e) {
      return "symbol" == typeof e;
    };
    var UW = function (e) {
      return undefined === e;
    };
    var BW = function (e) {
      var t = OW(e);
      return undefined !== t ? t : function (e) {
        if (yW.test(e)) {
          var t = Date.parse(e);
          if (!Number.isNaN(t)) {
            return t;
          }
        }
      }(e);
    };
    var GW = function (e) {
      if ("string" == typeof e || e instanceof String || ("number" == typeof e || e instanceof Number) && !(Number.isNaN(e) || e instanceof Number && Number.isNaN(e.valueOf())) || "boolean" == typeof e || e instanceof Boolean || e instanceof Date) {
        var t = function (e) {
          return "boolean" == typeof e || e instanceof Boolean ? Number(e).toString() : "number" == typeof e || e instanceof Number ? e.toString() : e instanceof Date ? e.getTime().toString() : "string" == typeof e || e instanceof String ? e.toLowerCase().replace(TW, "") : "";
        }(e);
        var n = BW(t);
        return {
          parsedNumber: n,
          chunks: AW(n ? "" + n : t),
          value: e
        };
      }
      return {
        isArray: Array.isArray(e),
        isFunction: "function" == typeof e,
        isNaN: Number.isNaN(e) || e instanceof Number && Number.isNaN(e.valueOf()),
        isNull: null === e,
        isObject: !(null === e || "object" != typeof e || Array.isArray(e) || e instanceof Number || e instanceof String || e instanceof Boolean || e instanceof Date),
        isSymbol: "symbol" == typeof e,
        isUndefined: undefined === e,
        value: e
      };
    };
    var VW = function (e) {
      return function (t, n) {
        var s = GW(t);
        var i = GW(n);
        return NW(s, i) * ("desc" === e.order ? -1 : 1);
      };
    };
    var HW = function (e) {
      return "string" == typeof e && ("asc" === e || "desc" === e);
    };
    var KW = function (e) {
      var t = "asc";
      if ("string" == typeof e && "string" == typeof e && ("asc" === e || "desc" === e)) {
        t = e;
      } else if (e && "object" == typeof e && e.order && "string" == typeof e.order && ("asc" === e.order || "desc" === e.order)) {
        t = e.order;
      }
      return {
        order: t
      };
    };
    function WW(e) {
      var t = KW(e);
      return VW(t);
    }
    var zW;
    function YW(e, t) {
      const n = WW();
      return (t === zW.Downloaded || t === zW.Name ? YW(e, zW.LastModified) : e).sort((e, s) => {
        switch (t) {
          case zW.LastModified:
            return new Date(s.lastModified).getTime() - new Date(e.lastModified).getTime() || n(e.displayName, s.displayName);
          case zW.Population:
            return s.population - e.population || n(e.displayName, s.displayName);
          case zW.Downloaded:
            return "ParadoxMods" === s.cloudTarget ? 1 : -1;
          default:
            return n(e.displayName, s.displayName);
        }
      });
    }
    !function (e) {
      e[e.Name = 0] = "Name";
      e[e.LastModified = 1] = "LastModified";
      e[e.Population = 2] = "Population";
      e[e.Downloaded = 3] = "Downloaded";
    }(zW || (zW = {}));
    X.add("game-ui/menu/components/shared/save-list-header/save-list-ordering.ts", {
      get Ordering() {
        return zW;
      },
      set Ordering(e) {
        zW = e;
      },
      get sort() {
        return YW;
      },
      set sort(e) {
        YW = e;
      }
    });
    let $W = {
      "save-list-header": "save-list-header_f5S",
      saveListHeader: "save-list-header_f5S",
      "sort-label": "sort-label_KDJ",
      sortLabel: "sort-label_KDJ",
      "sort-buttons": "sort-buttons_vQU",
      sortButtons: "sort-buttons_vQU",
      "sort-button": "sort-button_UDY",
      sortButton: "sort-button_UDY"
    };
    X.add("game-ui/menu/components/shared/save-list-header/save-list-header.module.scss", {
      get classes() {
        return $W;
      },
      set classes(e) {
        Object.assign($W, e);
      }
    });
    var XW = [zW.Name, zW.Population, zW.LastModified, zW.Downloaded];
    var QW = ({
      selectedOrdering: e,
      className: t,
      options: n,
      onSelectOrdering: s
    }) => (0, z.jsx)(ez, {
      label: (0, z.jsx)(Pc.Menu.SAVE_ORDERING_LABEL, {}),
      options: n,
      selectedOption: e,
      onSelectOption: s,
      getOptionLabel: e => (0, z.jsx)(Pc.Menu.SAVE_ORDERING, {
        hash: zW[e]
      }),
      className: t
    });
    var ZW = ({
      targets: e,
      selectedTarget: t,
      className: n,
      onSelectTarget: s
    }) => (0, z.jsx)(ez, {
      label: (0, z.jsx)(Pc.Menu.CLOUD_TARGET_LABEL, {}),
      options: e,
      selectedOption: t,
      onSelectOption: s,
      getOptionLabel: e => (0, z.jsx)(Pc.Menu.CLOUD_TARGET, {
        hash: e
      }),
      className: n
    });
    var JW = ({
      categories: e,
      selectedCategory: t,
      className: n,
      onSelectCategory: s
    }) => (0, z.jsx)(ez, {
      label: "",
      options: e,
      selectedOption: t,
      onSelectOption: s,
      getOptionLabel: e => (0, z.jsx)(Pc.GameListScreen.MAP_FILTER, {
        hash: dk[e]
      }),
      className: n
    });
    function ez({
      label: e,
      options: t,
      selectedOption: n,
      className: s,
      onSelectOption: i,
      getOptionLabel: a
    }) {
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()($W.saveListHeader, s),
        children: [z.jsx("div", {
          className: $W.sortLabel,
          children: e
        }), z.jsx(xW, {
          children: z.jsx("div", {
            className: $W.sortButtons,
            children: t.map((e, t) => (0, z.jsx)(L_, {
              focusKey: Eg,
              selected: n === e,
              className: $W.sortButton,
              onSelect: () => i(e),
              children: a(e)
            }, t))
          })
        })]
      });
    }
    X.add("game-ui/menu/components/shared/save-list-header/save-list-header.tsx", {
      get orderings() {
        return XW;
      },
      set orderings(e) {
        XW = e;
      },
      get OrderingSaveListHeader() {
        return QW;
      },
      set OrderingSaveListHeader(e) {
        QW = e;
      },
      get CloudTargetSaveListHeader() {
        return ZW;
      },
      set CloudTargetSaveListHeader(e) {
        ZW = e;
      },
      get NewGameMapsSaveListHeader() {
        return JW;
      },
      set NewGameMapsSaveListHeader(e) {
        JW = e;
      }
    });
    let tz = {
      wrapper: "wrapper_P37",
      container: "container_W62",
      input: "input_AhI",
      label: "label_quF"
    };
    X.add("game-ui/menu/themes/save-list-input-field.module.scss", {
      get classes() {
        return tz;
      },
      set classes(e) {
        Object.assign(tz, e);
      }
    });
    var sz = ({
      title: e,
      message: t,
      onConfirm: n
    }) => {
      0;
      const s = Y.useContext(cE);
      0;
      const i = Y.useCallback(() => {
        s.onClose();
        if (n) {
          n();
        }
      }, [s, n]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aE, {
        title: e,
        buttons: z.jsx("div", {
          className: sE.buttons,
          children: z.jsx(L_, {
            theme: DE,
            className: sE.buttonOk,
            onSelect: i,
            children: z.jsx(Pc.Common.OK, {})
          })
        }),
        onClose: s.onClose,
        children: z.jsx(bb, {
          theme: sE,
          children: t
        })
      });
    };
    X.add("game-ui/common/panel/dialog/message-dialog.tsx", {
      get MessageDialog() {
        return sz;
      },
      set MessageDialog(e) {
        sz = e;
      }
    });
    let iz = {
      enter: "enter_vUK enter_kO6",
      "enter-active": "enter-active_K1n enter-active_lrI",
      enterActive: "enter-active_K1n enter-active_lrI",
      exit: "exit_NNr exit_Von",
      "exit-active": "exit-active_kYK exit-active_jtN",
      exitActive: "exit-active_kYK exit-active_jtN",
      base: "base_V9Q"
    };
    X.add("game-ui/menu/transitions/shrink-fade-children.module.scss", {
      get classes() {
        return iz;
      },
      set classes(e) {
        Object.assign(iz, e);
      }
    });
    var rz;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Splash1 = 1] = "Splash1";
      e[e.Splash2 = 2] = "Splash2";
      e[e.Splash3 = 3] = "Splash3";
      e[e.Splash4 = 4] = "Splash4";
      e[e.PiracyDisclaimer = 5] = "PiracyDisclaimer";
      e[e.PhotosensitivityDisclaimer = 6] = "PhotosensitivityDisclaimer";
      e[e.Wait = 7] = "Wait";
      e[e.UserLoggedOut = 8] = "UserLoggedOut";
      e[e.ControllerDisconnected = 9] = "ControllerDisconnected";
      e[e.ControllerPairingChanged = 10] = "ControllerPairingChanged";
      e[e.Engagement = 11] = "Engagement";
      e[e.Loading = 12] = "Loading";
      e[e.CorruptSaveData = 13] = "CorruptSaveData";
      e[e.Validation = 14] = "Validation";
    }(rz || (rz = {}));
    var lz = $r("overlay", "activeScreen");
    var cz = $r("overlay", "progress");
    var uz = $r("overlay", "hintMessages");
    var dz = $r("overlay", "corruptDataMessages");
    X.add("game-ui/overlay/overlay-bindings.tsx", {
      get OverlayScreen() {
        return rz;
      },
      set OverlayScreen(e) {
        rz = e;
      },
      get activeScreen() {
        return activeScreen;
      },
      set activeScreen(e) {
        activeScreen = e;
      },
      get progress() {
        return progress;
      },
      set progress(e) {
        progress = e;
      },
      get hintMessages() {
        return hintMessages;
      },
      set hintMessages(e) {
        hintMessages = e;
      },
      get corruptDataMessages() {
        return corruptDataMessages;
      },
      set corruptDataMessages(e) {
        corruptDataMessages = e;
      }
    });
    let mz = {
      "sub-screen": "sub-screen__iU",
      subScreen: "sub-screen__iU",
      header: "header_DFK child-opacity-transition_nkS",
      "header-title": "header-title_Lr3",
      headerTitle: "header-title_Lr3",
      title: "title_TgD",
      "header-button": "header-button_Hid",
      headerButton: "header-button_Hid",
      "back-button": "back-button_sEa header-button_Hid",
      backButton: "back-button_sEa header-button_Hid",
      content: "content_Ds0",
      "header-aside": "header-aside_Pkh",
      headerAside: "header-aside_Pkh"
    };
    X.add("game-ui/menu/components/shared/sub-screen/sub-screen.module.scss", {
      get classes() {
        return mz;
      },
      set classes(e) {
        Object.assign(mz, e);
      }
    });
    var gz = new Tg("SUB_SCREEN_CONTENT_KEY");
    const pz = {
      setFocusedKey: () => {}
    };
    var fz = Y.createContext(pz);
    var xz = Y.forwardRef(function ({
      focusKey: e,
      title: t,
      header: n,
      className: s,
      children: i,
      onClose: a,
      onFocusChanged: o = () => {}
    }, r) {
      up(lz.value !== rz.Loading ? cp : undefined);
      0;
      const [l, c] = Y.useState(gz);
      0;
      const u = Y.useContext(fz);
      0;
      Y.useEffect(() => {
        u.setFocusedKey = c;
      }, [u]);
      const d = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(sp, {
        focusKey: e,
        children: z.jsx(Ip, {
          children: z.jsx(kg, {
            onAction: a,
            children: z.jsx(dh, {
              styles: iz,
              children: z.jsx(Ep, {
                ref: r,
                className: Qu()(mz.subScreen, s),
                children: z.jsxs(Xg, {
                  focused: l,
                  onChange: e => {
                    c(e);
                    o(e);
                  },
                  children: [z.jsxs("div", {
                    className: mz.header,
                    children: [z.jsxs("div", {
                      className: mz.headerTitle,
                      children: [!d && (0, z.jsx)(bg, {
                        tooltip: (0, z.jsx)(Pc.Menu.BACK, {}),
                        children: (0, z.jsx)($_, {
                          tinted: true,
                          focusKey: Eg,
                          src: "Media/Glyphs/TriangleArrowLeft.svg",
                          className: mz.backButton,
                          onSelect: a
                        })
                      }), z.jsx("div", {
                        className: mz.title,
                        children: t
                      })]
                    }), !!n && (0, z.jsx)("div", {
                      className: mz.headerAside,
                      children: n
                    })]
                  }), z.jsx(Ep, {
                    focusKey: gz,
                    className: mz.content,
                    children: i
                  })]
                })
              })
            })
          })
        })
      });
    });
    X.add("game-ui/menu/components/shared/sub-screen/sub-screen.tsx", {
      get SUB_SCREEN_CONTENT_KEY() {
        return gz;
      },
      set SUB_SCREEN_CONTENT_KEY(e) {
        gz = e;
      },
      get SubScreenContext() {
        return fz;
      },
      set SubScreenContext(e) {
        fz = e;
      },
      get SubScreen() {
        return xz;
      },
      set SubScreen(e) {
        xz = e;
      }
    });
    let vz = {
      "detail-section": "detail-section_aIw child-opacity-transition_nkS",
      detailSection: "detail-section_aIw child-opacity-transition_nkS",
      title: "title_eSB",
      image: "image_xzf",
      scrollable: "scrollable_zgX",
      "scrollable-content": "scrollable-content_lJB",
      scrollableContent: "scrollable-content_lJB",
      description: "description_dxc",
      field: "field_rvA",
      label: "label_Sfx",
      value: "value_TJa",
      ellipsis: "ellipsis_MBL",
      "theme-icon": "theme-icon_mTh",
      themeIcon: "theme-icon_mTh",
      "humidity-icon": "humidity-icon_jtJ",
      humidityIcon: "humidity-icon_jtJ",
      "scrollable-footer": "scrollable-footer_VMh",
      scrollableFooter: "scrollable-footer_VMh",
      footer: "footer_uQp",
      "footer-button": "footer-button_d4A",
      footerButton: "footer-button_d4A",
      "achievement-warning-banner": "achievement-warning-banner_lKw",
      achievementWarningBanner: "achievement-warning-banner_lKw",
      "achievement-warning-banner-container": "achievement-warning-banner-container_e0d",
      achievementWarningBannerContainer: "achievement-warning-banner-container_e0d",
      "current-preview": "current-preview_WlX",
      currentPreview: "current-preview_WlX"
    };
    X.add("game-ui/menu/components/shared/detail-section/detail-section.module.scss", {
      get classes() {
        return vz;
      },
      set classes(e) {
        Object.assign(vz, e);
      }
    });
    var bz = ({
      title: e,
      preview: t,
      currentPreview: n,
      content: s,
      footer: i,
      className: a
    }) => {
      const o = Y.Children.count(e) > 0;
      const r = Y.Children.count(s) > 0;
      const l = Y.Children.count(i) > 0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(vz.detailSection, a),
        children: [o && (0, z.jsx)("div", {
          className: vz.title,
          children: e
        }), null != t && (0, z.jsx)(B_, {
          src: t,
          className: vz.image
        }), n && t !== n && (0, z.jsx)(B_, {
          src: n,
          className: vz.currentPreview
        }), z.jsx(ab, {
          autoScroll: true,
          className: vz.scrollable,
          children: r && (0, z.jsxs)("div", {
            className: vz.scrollableContent,
            children: [s, !l && (0, z.jsx)("div", {
              className: vz.scrollableFooter
            })]
          })
        }), l && (0, z.jsx)("div", {
          className: vz.footer,
          children: i
        })]
      });
    };
    var Tz = ({
      label: e,
      ellipsis: t,
      children: n
    }) => (0, z.jsxs)("div", {
      className: vz.field,
      children: [(0, z.jsx)("div", {
        className: vz.label,
        children: e
      }), (0, z.jsx)("div", {
        className: Qu()(vz.value, {
          [vz.ellipsis]: t
        }),
        children: n
      })]
    });
    var Ez = ({
      disabled: e,
      children: t,
      className: n,
      onSelect: s
    }) => (0, z.jsx)(L_, {
      focusKey: Eg,
      theme: FI,
      className: Qu()(vz.footerButton, n),
      disabled: e,
      onSelect: s,
      children: t
    });
    X.add("game-ui/menu/components/shared/detail-section/detail-section.tsx", {
      get DetailSection() {
        return bz;
      },
      set DetailSection(e) {
        bz = e;
      },
      get Field() {
        return Tz;
      },
      set Field(e) {
        Tz = e;
      },
      get FooterButton() {
        return Ez;
      },
      set FooterButton(e) {
        Ez = e;
      }
    });
    var Iz = ({
      className: e,
      save: t,
      onSaveGameSelect: n,
      saveName: s
    }) => {
      const i = km();
      const a = sl(Cv);
      const o = sl(Ik);
      const r = sl(EL);
      const l = sl(vL);
      const c = sl(bL);
      const u = sl(xN);
      const d = sl(yk);
      const m = DO(sl(yO), sl(SO));
      const h = sl(IL);
      const g = sl(kk);
      const p = {
        preview: t?.preview || o,
        population: t?.population || l,
        money: t?.money || c,
        cityName: t?.cityName || r,
        totalXP: t?.xp || u,
        mapName: t?.mapName || d,
        simulationDate: t?.simulationDate || m,
        unlimitedMoney: t ? undefined : h
      };
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(bz, {
        className: e,
        title: DH(p.cityName, 28),
        preview: p.preview,
        currentPreview: o,
        content: z.jsxs(z.Fragment, {
          children: [z.jsx(Tz, {
            label: z.jsx(Pc.Menu.CITY_NAME_LABEL, {}),
            ellipsis: true,
            children: p.cityName
          }), z.jsx(Tz, {
            label: z.jsx(Pc.GameListScreen.POPULATION_LABEL, {}),
            children: z.jsx(Gc, {
              value: p.population,
              unit: Oc.Integer
            })
          }), z.jsx(Tz, {
            label: z.jsx(Pc.Menu.SIMULATION_DATE_LABEL, {}),
            children: z.jsx(Pu, {
              value: p.simulationDate
            })
          }), z.jsx(Tz, {
            label: z.jsx(Pc.GameListScreen.MONEY_LABEL, {}),
            children: p.unlimitedMoney ? (0, z.jsx)(Pc.Menu.UNLIMITED_MONEY_LABEL, {}) : (0, z.jsx)(Gc, {
              value: p.money,
              unit: Oc.Money
            })
          }), z.jsx(Tz, {
            label: z.jsx(Pc.GameListScreen.XP_LABEL, {}),
            children: z.jsx(Gc, {
              value: p.totalXP,
              unit: Oc.Integer
            })
          }), null != p.mapName && (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.MAP_LABEL, {}),
            children: (0, z.jsx)(Pc.Maps.MAP_TITLE, {
              hash: p.mapName
            })
          })]
        }),
        footer: i ? undefined : (0, z.jsx)(bg, {
          tooltip: g.reasonHash && (0, z.jsx)(Pc.Common.SAVEABILITY_REASON, {
            hash: g.reasonHash
          }),
          children: (0, z.jsx)(Ez, {
            onSelect: n,
            disabled: !s?.trim() || !g.canSave || !a,
            children: t ? (0, z.jsx)(Pc.GameListScreen.OVERWRITE_SAVE_GAME_BUTTON, {}) : (0, z.jsx)(Pc.GameListScreen.SAVE_GAME_BUTTON, {})
          })
        })
      });
    };
    X.add("game-ui/menu/components/save-game-screen/game-detail/game-detail.tsx", {
      get GameDetail() {
        return Iz;
      },
      set GameDetail(e) {
        Iz = e;
      }
    });
    let yz = {
      container: "container_vNp",
      input: "input_Lfn",
      label: "label_F5D"
    };
    X.add("game-ui/menu/themes/save-slot-list-item-input-field.module.scss", {
      get classes() {
        return yz;
      },
      set classes(e) {
        Object.assign(yz, e);
      }
    });
    let jz = {
      "save-slot-item": "save-slot-item_oai",
      saveSlotItem: "save-slot-item_oai",
      locked: "locked_k9Y",
      "theme-icon": "theme-icon_tB3",
      themeIcon: "theme-icon_tB3",
      title: "title_Y9K",
      "population-value": "population-value_XhI",
      populationValue: "population-value_XhI",
      "population-icon": "population-icon_aqa",
      populationIcon: "population-icon_aqa",
      date: "date_Oac",
      "state-icon": "state-icon_zkF",
      stateIcon: "state-icon_zkF",
      "title-inner": "title-inner_nf4",
      titleInner: "title-inner_nf4",
      space: "space_evY",
      tooltip: "tooltip_N74",
      hint: "hint_iLn"
    };
    X.add("game-ui/menu/components/shared/save-slot-item/save-slot-item.module.scss", {
      get classes() {
        return jz;
      },
      set classes(e) {
        Object.assign(jz, e);
      }
    });
    var Nz = ({
      focusKey: e,
      locked: t = false,
      selected: n = false,
      saveName: s,
      saveGame: i,
      slotId: a,
      inputAction: o,
      onSaveNameChange: r,
      onSelectSave: l,
      onSelect: c
    }) => {
      0;
      const u = Y.useRef(null);
      0;
      const [d, m] = Y.useState(false);
      const h = Wz();
      const g = sl(Ok).find(e => e.id === i?.theme);
      const p = i ? nY(i.cloudTarget, i.isReadonly) : null;
      0;
      Y.useEffect(() => {
        if (n) {
          if (u.current) {
            u.current.focus();
            const e = u.current.value.length;
            u.current.setSelectionRange(0, e);
          }
          if (i) {
            if (r) {
              r(i.displayName);
            }
            if (l) {
              l(i);
            }
          } else if (s && r) {
            r(s);
          }
        }
      }, [r, c, l, i, s, n]);
      0;
      const f = Y.useCallback(e => r && r(e.target.value), [r]);
      0;
      const x = Y.useCallback(e => {
        if (e) {
          if (i) {
            if (l) {
              l(i);
            }
            if (r) {
              r(i.displayName);
            }
          }
          if (c) {
            c(a);
          }
        }
        m(e);
      }, [r, c, l, i, a]);
      0;
      const v = Y.useCallback(() => {
        if (i) {
          if (!t) {
            if (l) {
              l(i);
            }
          }
          if (r) {
            r(i.displayName);
          }
        }
        if (!t) {
          if (c) {
            c(a);
          }
        }
      }, [t, r, c, l, i, a]);
      0;
      const _ = Y.useCallback(() => {
        if (!s) {
          if (r) {
            r(h);
          }
        }
      }, [h, r, s]);
      0;
      0;
      0;
      return z.jsxs(Ep, {
        onClick: v,
        focusKey: t ? Eg : e || Eg,
        className: Qu()(jz.saveSlotItem, t && jz.locked, n && "selected"),
        onFocusChange: x,
        children: [z.jsx(LT, {
          action: o,
          active: d,
          className: jz.hint
        }), i && (0, z.jsx)(iW, {
          src: g?.icon ?? "",
          className: jz.themeIcon
        }), null != p && (0, z.jsx)(W_, {
          src: p,
          className: jz.stateIcon
        }), z.jsx("div", {
          className: jz.title,
          children: !i && n ? (0, z.jsx)(pW, {
            ref: u,
            maxLength: 85,
            placeholder: (0, z.jsx)(Pc.Menu.NAME_FIELD_PLACEHOLDER, {}),
            value: s || h,
            onChange: f,
            onBlur: _,
            vkTitle: (0, z.jsx)(Pc.VirtualKeyboard.TITLE, {
              hash: "SaveName"
            }),
            theme: yz
          }) : (0, z.jsx)("div", {
            className: jz.titleInner,
            children: i ? i.displayName : (0, z.jsx)(Pc.Menu.EMPTY_SLOT, {})
          })
        }), i && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)("div", {
            className: jz.populationValue,
            children: (0, z.jsx)(Gc, {
              value: i.population,
              unit: Oc.Integer
            })
          }), (0, z.jsx)(W_, {
            src: "Media/Game/Icons/Citizen.svg",
            className: jz.populationIcon
          }), (0, z.jsx)(cW, {
            className: jz.date,
            children: (0, z.jsx)(Mu, {
              value: i.lastModified
            })
          })]
        })]
      });
    };
    X.add("game-ui/menu/components/shared/save-slot-item/save-slot-item.tsx", {
      get SaveSlotItem() {
        return Nz;
      },
      set SaveSlotItem(e) {
        Nz = e;
      }
    });
    let wz = {
      "save-slot-list": "save-slot-list_MCn child-opacity-transition_nkS",
      saveSlotList: "save-slot-list_MCn child-opacity-transition_nkS",
      scrollable: "scrollable_W3E",
      "name-field": "name-field__Sm",
      nameField: "name-field__Sm",
      "name-input": "name-input_khn",
      nameInput: "name-input_khn"
    };
    X.add("game-ui/menu/components/save-game-screen/save-slot-list/save-slot-list.module.scss", {
      get classes() {
        return wz;
      },
      set classes(e) {
        Object.assign(wz, e);
      }
    });
    var Pz = Y.forwardRef(function ({
      sortedSaves: e,
      saveName: t,
      cloudTarget: n,
      slots: s,
      selectedSlotId: i,
      className: a,
      onSaveNameChange: o,
      onSelectCloudTarget: r,
      onSelectSlot: l
    }, c) {
      const u = sl(Jk);
      0;
      const d = Y.useMemo(() => u.length > 1 ? {
        "Switch Savegame Location": e => {
          rp(op.dragSlider);
          if (e < 0) {
            rp(op.selectPreviousItem);
            r(ow(u, u.indexOf(n), true) ?? n);
          } else if (e > 0) {
            rp(op.selectNextItem);
            r(iw(u, u.indexOf(n), true) ?? n);
          }
        }
      } : {}, [r, u, n]);
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: d,
        children: z.jsxs("div", {
          ref: c,
          className: Qu()(wz.saveSlotList, a),
          children: [u.length > 1 && (0, z.jsx)(ZW, {
            targets: u,
            selectedTarget: n,
            onSelectTarget: r
          }), z.jsx(ep, {
            initialFocused: i > e.length - 1 ? `Save->Empty:${i}` : `Save->${e[i].id}`,
            children: z.jsx(ab, {
              className: wz.scrollable,
              children: Array.from({
                length: s
              }, (n, s) => s > e.length - 1 ? (0, z.jsx)(Nz, {
                focusKey: `Save->Empty:${s}`,
                slotId: s,
                selected: i === s,
                inputAction: "Save Game",
                onSaveNameChange: o,
                onSelect: l
              }, s) : (0, z.jsx)(Nz, {
                focusKey: `Save->${e[s].id}`,
                slotId: s,
                selected: i === s,
                saveGame: e[s],
                saveName: t,
                inputAction: "Save Game",
                onSaveNameChange: o,
                onSelect: l
              }, s))
            })
          })]
        })
      });
    });
    X.add("game-ui/menu/components/save-game-screen/save-slot-list/save-slot-list.tsx", {
      get SaveSlotList() {
        return Pz;
      },
      set SaveSlotList(e) {
        Pz = e;
      }
    });
    let Lz = {
      container: "container_K3P",
      input: "input_f_x",
      label: "label_OFp"
    };
    X.add("game-ui/menu/themes/save-slot-input-field.module.scss", {
      get classes() {
        return Lz;
      },
      set classes(e) {
        Object.assign(Lz, e);
      }
    });
    let Mz = {
      "save-slot": "save-slot_vY4 child-opacity-transition_nkS",
      saveSlot: "save-slot_vY4 child-opacity-transition_nkS",
      locked: "locked_GCS",
      "theme-icon": "theme-icon_lGm",
      themeIcon: "theme-icon_lGm",
      "humidity-icon": "humidity-icon_zZV",
      humidityIcon: "humidity-icon_zZV",
      title: "title_L43",
      field: "field_Yxz",
      "population-icon": "population-icon_mlk",
      populationIcon: "population-icon_mlk",
      date: "date_tTu",
      "empty-label": "empty-label_OR4",
      emptyLabel: "empty-label_OR4",
      input: "input_q53",
      "title-content": "title-content_SFM",
      titleContent: "title-content_SFM",
      image: "image_u6c",
      scrollable: "scrollable_khn",
      "scrollable-content": "scrollable-content_hzP",
      scrollableContent: "scrollable-content_hzP",
      description: "description_DTi",
      label: "label_out",
      value: "value_wmH",
      "scrollable-footer": "scrollable-footer_nav",
      scrollableFooter: "scrollable-footer_nav"
    };
    X.add("game-ui/menu/components/save-game-screen/save-slots/save-slot/save-slot.module.scss", {
      get classes() {
        return Mz;
      },
      set classes(e) {
        Object.assign(Mz, e);
      }
    });
    var kz = ({
      focusKey: e,
      slotId: t,
      saveName: n,
      saveGame: s,
      selected: i = false,
      className: a,
      onSaveNameChange: o,
      onSelect: r
    }) => {
      const l = Wz();
      0;
      const c = Y.useRef(null);
      0;
      Y.useEffect(() => {
        if (i) {
          if (c.current) {
            c.current.focus();
            const e = c.current.value.length;
            c.current.setSelectionRange(0, e);
          }
          if (s) {
            if (o) {
              o(s.displayName);
            }
          } else if (n && o) {
            o(n);
          }
        }
      }, [o, r, s, n, i]);
      const u = sl(Ik);
      const d = sl(EL);
      const m = sl(vL);
      const h = sl(bL);
      const g = sl(xN);
      const p = sl(yk);
      const f = DO(sl(yO), sl(SO));
      const x = sl(IL);
      0;
      const v = Y.useCallback(e => o && o(e.target.value), [o]);
      0;
      const _ = Y.useCallback(e => {
        if (e) {
          r(t);
          if (s && o) {
            o(s.displayName);
          }
        }
      }, [o, r, s, t]);
      0;
      const b = Y.useCallback(() => {
        if (s && o) {
          o(s.displayName);
        }
        if (c.current) {
          c.current.focus();
        }
        r(t);
      }, [o, r, s, t]);
      0;
      const T = Y.useCallback(() => {
        if (!n) {
          if (o) {
            o(l);
          }
        }
      }, [o, n, l]);
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        focusKey: e,
        onFocusChange: _,
        onClick: b,
        className: Qu()(Mz.saveSlot, i && "selected", a),
        children: [(s || i) && (0, z.jsx)("div", {
          className: Mz.title,
          children: (0, z.jsx)("div", {
            className: Mz.titleContent,
            children: !s && i ? (0, z.jsx)(pW, {
              ref: c,
              maxLength: 85,
              placeholder: (0, z.jsx)(Pc.Menu.NAME_FIELD_PLACEHOLDER, {}),
              value: n,
              onChange: v,
              onBlur: T,
              vkTitle: (0, z.jsx)(Pc.VirtualKeyboard.TITLE, {
                hash: "SaveName"
              }),
              theme: Lz
            }) : s?.displayName
          })
        }), s ? i ? null != u && (0, z.jsx)(B_, {
          src: u,
          className: Mz.image
        }) : (0, z.jsx)(B_, {
          src: s?.preview,
          className: Mz.image
        }) : null != u && i && (0, z.jsx)(B_, {
          src: u,
          className: Mz.image
        }), z.jsx(ab, {
          autoScroll: true,
          className: Mz.scrollable,
          children: z.jsxs("div", {
            className: Mz.scrollableContent,
            children: [s || i ? (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.Menu.CITY_NAME_LABEL, {}),
                children: s?.cityName ?? d
              }), (0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.GameListScreen.POPULATION_LABEL, {}),
                children: (0, z.jsx)(Gc, {
                  value: s?.population ?? m,
                  unit: Oc.Integer
                })
              }), (0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.Menu.SIMULATION_DATE_LABEL, {}),
                children: (0, z.jsx)(Pu, {
                  value: s?.simulationDate ?? f
                })
              }), (0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.GameListScreen.MONEY_LABEL, {}),
                children: !s && x ? (0, z.jsx)(Pc.Menu.UNLIMITED_MONEY_LABEL, {}) : (0, z.jsx)(Gc, {
                  value: s?.money ?? h,
                  unit: Oc.Money
                })
              }), (0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.GameListScreen.XP_LABEL, {}),
                children: (0, z.jsx)(Gc, {
                  value: s?.xp ?? g,
                  unit: Oc.Integer
                })
              }), null != s?.mapName ? (0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.GameListScreen.MAP_LABEL, {}),
                children: (0, z.jsx)(Pc.Maps.MAP_TITLE, {
                  hash: s.mapName,
                  fallback: s.mapName
                })
              }) : null != p && (0, z.jsx)(Dz, {
                label: (0, z.jsx)(Pc.GameListScreen.MAP_LABEL, {}),
                children: (0, z.jsx)(Pc.Maps.MAP_TITLE, {
                  hash: p,
                  fallback: p
                })
              })]
            }) : (0, z.jsx)("div", {
              className: Mz.emptyLabel,
              children: (0, z.jsx)(Pc.Menu.EMPTY_SLOT, {})
            }), z.jsx("div", {
              className: Mz.scrollableFooter
            })]
          })
        })]
      });
    };
    const Dz = ({
      label: e,
      children: t
    }) => (0, z.jsxs)("div", {
      className: Mz.field,
      children: [(0, z.jsx)("div", {
        className: Mz.label,
        children: e
      }), (0, z.jsx)("div", {
        className: Mz.value,
        children: t
      })]
    });
    X.add("game-ui/menu/components/save-game-screen/save-slots/save-slot/save-slot.tsx", {
      get SaveSlot() {
        return kz;
      },
      set SaveSlot(e) {
        kz = e;
      }
    });
    let Fz = {
      "save-game-slots": "save-game-slots_y4R",
      saveGameSlots: "save-game-slots_y4R",
      header: "header_iE9 child-opacity-transition_nkS",
      slots: "slots_s__",
      slot: "slot_DnC",
      "name-field": "name-field_E4B child-opacity-transition_nkS",
      nameField: "name-field_E4B child-opacity-transition_nkS",
      footer: "footer_TH2 child-opacity-transition_nkS",
      "footer-button": "footer-button_qPc",
      footerButton: "footer-button_qPc"
    };
    X.add("game-ui/menu/components/save-game-screen/save-slots/save-slots.module.scss", {
      get classes() {
        return Fz;
      },
      set classes(e) {
        Object.assign(Fz, e);
      }
    });
    var Bz = ({
      sortedSaves: e,
      saveName: t,
      cloudTarget: n,
      slots: s,
      selectedSlotId: i,
      className: a,
      onSaveNameChange: o,
      onSelectCloudTarget: r,
      onSelectSlot: l
    }) => {
      const c = sl(Jk);
      0;
      const u = Y.useMemo(() => c.length > 1 ? {
        "Switch Savegame Location": e => {
          rp(op.dragSlider);
          if (e < 0) {
            rp(op.selectPreviousItem);
            r(ow(c, c.indexOf(n), true) ?? n);
          } else if (e > 0) {
            rp(op.selectNextItem);
            r(iw(c, c.indexOf(n), true) ?? n);
          }
        }
      } : {}, [r, c, n]);
      0;
      const d = Y.useMemo(() => !e || 0 === e.length || i > e.length - 1 ? `Save->Empty:${i}` : `Save->${e[i]?.id}`, [i, e]);
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: u,
        children: z.jsxs("div", {
          className: Qu()(Fz.saveGameSlots, a),
          children: [c.length > 1 && (0, z.jsx)(ZW, {
            targets: c,
            selectedTarget: n,
            onSelectTarget: r,
            className: Fz.header
          }), z.jsx("div", {
            className: Fz.slots,
            children: z.jsx(ep, {
              initialFocused: d,
              children: Array.from({
                length: s
              }, (n, s) => !e || 0 === e.length || s > e.length - 1 ? (0, z.jsx)(kz, {
                slotId: s,
                saveName: t,
                focusKey: `Save->Empty:${s}`,
                className: Fz.slot,
                selected: i === s,
                onSelect: l,
                onSaveNameChange: o
              }, s) : (0, z.jsx)(kz, {
                slotId: s,
                focusKey: `Save->${e[s].id}`,
                saveGame: e[s],
                selected: i === s,
                className: Fz.slot,
                onSelect: l,
                onSaveNameChange: o
              }, s))
            })
          })]
        })
      });
    };
    X.add("game-ui/menu/components/save-game-screen/save-slots/save-slots.tsx", {
      get SaveSlots() {
        return Bz;
      },
      set SaveSlots(e) {
        Bz = e;
      }
    });
    let Gz = {
      content: "content_ZK4",
      list: "list_Lyo",
      detail: "detail_LOs"
    };
    X.add("game-ui/menu/components/save-game-screen/save-game-screen.module.scss", {
      get classes() {
        return Gz;
      },
      set classes(e) {
        Object.assign(Gz, e);
      }
    });
    var Hz = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n
    }, s) {
      0;
      Y.useEffect(() => ($k(true), () => $k(false)), []);
      const i = sl(Mk);
      const a = sl(Nk);
      const o = sl(eD);
      0;
      const r = Y.useMemo(() => YW(i.filter(e => !e.isReadonly && e.cloudTarget === o && !e.autoSave), zW.LastModified), [o, i]);
      const l = Wz(r);
      0;
      const [c, u] = Y.useState(l);
      const d = c.trim();
      0;
      const [m, h] = Y.useState(function (e, t) {
        const n = e.findIndex(e => e.displayName === t);
        return n > 0 ? n : 0;
      }(r, d));
      0;
      const g = Y.useContext(lE);
      const p = r.find(e => e.displayName === d);
      0;
      Y.useEffect(() => {
        u(e => e?.trim() ? e : l);
      }, [l]);
      0;
      const f = Y.useCallback(() => {
        if (Vr(d)) {
          0;
          0;
          0;
          g.showDialog(z.jsx(sz, {
            title: z.jsx(Pc.Common.ERROR, {}),
            message: z.jsx(Pc.GameListScreen.INVALID_NAME_MESSAGE, {})
          }));
        } else {
          Gk(d);
        }
      }, [g, d]);
      const x = sl(kk);
      0;
      const v = Y.useMemo(() => x.canSave ? {
        "Save Game": p ? undefined : () => {
          rp(op.selectItem);
          f();
        },
        "Overwrite Save": p ? () => {
          rp(op.selectItem);
          f();
        } : undefined
      } : {}, [f, x.canSave, p]);
      0;
      0;
      0;
      0;
      return z.jsx(xz, {
        ref: s,
        focusKey: e,
        title: z.jsx(Pc.Menu.SAVE_GAME, {}),
        className: t,
        onClose: n,
        children: z.jsx(Lg, {
          actions: v,
          children: z.jsx("div", {
            className: Gz.content,
            children: a > 3 ? (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(Pz, {
                slots: a,
                selectedSlotId: m,
                sortedSaves: r,
                saveName: c,
                cloudTarget: o,
                onSelectCloudTarget: nD,
                onSaveNameChange: u,
                onSelectSlot: h,
                className: Gz.list
              }), (0, z.jsx)(Iz, {
                className: Gz.detail,
                onSaveGameSelect: f
              })]
            }) : a > 0 ? (0, z.jsx)(Bz, {
              slots: a,
              selectedSlotId: m,
              sortedSaves: r,
              saveName: c,
              cloudTarget: o,
              onSaveNameChange: u,
              onSelectCloudTarget: nD,
              onSelectSlot: h
            }) : (0, z.jsxs)(ep, {
              children: [(0, z.jsx)(Qz, {
                saveName: c,
                cloudTarget: o,
                onSelectCloudTarget: nD,
                onSaveNameChange: u,
                onSaveGameSelect: f,
                className: Gz.list
              }), (0, z.jsx)(Iz, {
                className: Gz.detail,
                onSaveGameSelect: f,
                save: p,
                saveName: c
              })]
            })
          })
        })
      });
    });
    function Kz() {
      return Sk.value ?? EL.value;
    }
    function Wz(e) {
      const t = sl(EL).trim();
      const n = sl(Sk);
      const s = ac();
      let i = t;
      let a = 2;
      if (e) {
        for (; e?.find(e => e.displayName === i);) {
          i = `${t} ${a}`;
          a++;
        }
      }
      return i || n || Pc.GameListScreen.NEW_SAVE.renderString(s, {});
    }
    function zz() {
      const e = sl(Sk);
      0;
      return Y.useCallback(() => {
        if (Vr(e)) {
          jv(Iv.saveGame);
        } else {
          Qk();
        }
      }, [e]);
    }
    X.add("game-ui/menu/components/save-game-screen/save-game-screen.tsx", {
      get SaveGameScreen() {
        return Hz;
      },
      set SaveGameScreen(e) {
        Hz = e;
      },
      get getInitialSaveName() {
        return Kz;
      },
      set getInitialSaveName(e) {
        Kz = e;
      },
      get useInitialSaveName() {
        return Wz;
      },
      set useInitialSaveName(e) {
        Wz = e;
      },
      get useQuicksave() {
        return zz;
      },
      set useQuicksave(e) {
        zz = e;
      }
    });
    let Yz = {
      itemHeight: "50rem",
      "save-list": "save-list_zHX child-opacity-transition_nkS",
      saveList: "save-list_zHX child-opacity-transition_nkS",
      scrollable: "scrollable_t4Z",
      "name-field": "name-field_FGr",
      nameField: "name-field_FGr"
    };
    X.add("game-ui/menu/components/save-game-screen/save-list/save-list.module.scss", {
      get classes() {
        return Yz;
      },
      set classes(e) {
        Object.assign(Yz, e);
      }
    });
    const qz = new Tg("nameField");
    var Xz = "NEW_SAVE";
    var Qz = Y.forwardRef(function ({
      saveName: e,
      cloudTarget: t,
      className: n,
      onSaveNameChange: s,
      onSelectCloudTarget: i,
      onSaveGameSelect: a
    }, o) {
      const r = sl(Jk);
      0;
      const [l, c] = Y.useState(Ig);
      const u = sl(Mk);
      0;
      const d = Y.useMemo(() => YW(u.filter(e => !e.isReadonly && e.cloudTarget === t && !e.autoSave), zW.LastModified), [t, u]);
      const m = Wz(d);
      0;
      const [h, g] = Y.useState(d.find(t => t.displayName === e)?.id || "");
      const p = d.find(e => e.id === l);
      const f = d.find(e => e.id === h);
      const x = e.trim();
      const v = x !== p?.displayName && (l !== qz || x !== f?.displayName) && false === d.some(e => e.displayName === x);
      0;
      const _ = Y.useRef(null);
      const b = GK(Gm(Yz.itemHeight), d.length || 1, 3);
      const T = km();
      0;
      const E = Y.useMemo(() => r.length > 1 ? {
        "Switch Savegame Location": e => {
          rp(op.dragSlider);
          if (e < 0) {
            rp(op.selectPreviousItem);
            i(ow(r, r.indexOf(t), true) ?? t);
          } else if (e > 0) {
            rp(op.selectNextItem);
            i(iw(r, r.indexOf(t), true) ?? t);
          }
        }
      } : {}, [r, i, t]);
      0;
      const I = Y.useCallback(e => {
        if ("string" != typeof e) {
          g(l);
          c(qz);
          if (_.current) {
            s(m);
            _.current.focus();
          }
        } else if (e === Xz) {
          if ("string" == typeof h) {
            s(m);
          }
          g(l);
          c(e);
        } else {
          const t = d.find(t => t.id === e);
          if (null != t) {
            if (l !== qz) {
              g(l);
            }
            c(e);
            s(t.displayName);
            if (_.current) {
              _.current.blur();
            }
          }
        }
      }, [l, m, h, s, d]);
      0;
      const y = Y.useCallback(e => {
        if (e) {
          if (e.id === p?.id) {
            return void _.current?.focus();
          }
          c(e.id);
          s(e.displayName);
        } else {
          s(m);
          c(qz);
        }
        fW(() => {
          if (_.current) {
            _.current.focus();
          }
        }, 10);
      }, [p?.id, m, s]);
      0;
      const S = Y.useCallback(e => {
        if (e) {
          g(e.id);
        } else {
          g(Xz);
          s(m);
        }
        c(qz);
        fW(() => {
          if (_.current) {
            _.current.focus();
          }
        }, 10);
      }, [m, s]);
      0;
      const j = Y.useCallback(e => {
        s(e.target.value);
      }, [s]);
      0;
      const C = Y.useCallback(() => {
        if (T) {
          c(h);
        }
      }, [T, h]);
      0;
      const N = Y.useCallback(() => {
        fW(a, 1);
      }, [a]);
      0;
      const w = Y.useCallback(e => {
        const t = d[e];
        const n = d.findIndex(e => e.displayName === x) === e;
        const s = !!t && n && (x === t.displayName || l === qz && x === t.displayName);
        0;
        return z.jsxs(Y.Fragment, {
          children: [0 === e && (0, z.jsx)(aY, {
            selected: v,
            onSelect: T ? () => S() : undefined,
            onClick: () => S(),
            onDoubleClick: N,
            inputAction: "Save Game"
          }), t && (0, z.jsx)(eY, {
            save: t,
            selected: s,
            locked: false,
            tooltipsInactive: true,
            inputAction: "Save Game",
            onClick: y,
            onDoubleClick: N,
            onSelect: T ? S : undefined
          })]
        }, t?.id || "New save");
      }, [d, x, l, v, T, N, y, S]);
      0;
      Y.useEffect(() => {
        if (t) {
          s(m);
          c(Xz);
          g("");
        }
      }, [t]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: E,
        children: z.jsxs("div", {
          ref: o,
          className: Qu()(Yz.saveList, n),
          children: [r.length > 1 && (0, z.jsx)(ZW, {
            targets: r,
            selectedTarget: t,
            onSelectTarget: i
          }), z.jsxs(Xg, {
            focused: l,
            onChange: I,
            onRefocus: Zg,
            allowLooping: true,
            children: [z.jsx(FK, {
              className: Qu()(Yz.scrollable),
              sizeProvider: b,
              renderItem: w
            }), z.jsx("div", {
              className: Yz.nameField,
              children: z.jsx(pW, {
                ref: _,
                maxLength: 85,
                focusKey: qz,
                placeholder: z.jsx(Pc.Menu.NAME_FIELD_PLACEHOLDER, {}),
                value: e,
                onChange: j,
                onBlur: C,
                vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                  hash: "SaveName"
                }),
                theme: tz,
                forceHint: true
              })
            })]
          })]
        })
      });
    });
    X.add("game-ui/menu/components/save-game-screen/save-list/save-list.tsx", {
      get NEW_SAVE_ID() {
        return Xz;
      },
      set NEW_SAVE_ID(e) {
        Xz = e;
      },
      get SaveList() {
        return Qz;
      },
      set SaveList(e) {
        Qz = e;
      }
    });
    let Zz = {
      item: "item_OsC",
      locked: "locked_Yoi",
      "theme-icon": "theme-icon_yUd",
      themeIcon: "theme-icon_yUd",
      title: "title_qyE",
      "population-value": "population-value_yQT",
      populationValue: "population-value_yQT",
      "population-icon": "population-icon_PF9",
      populationIcon: "population-icon_PF9",
      date: "date_OyK",
      "state-icon": "state-icon_YfD",
      stateIcon: "state-icon_YfD",
      "title-inner": "title-inner_io2",
      titleInner: "title-inner_io2",
      space: "space_Mad",
      tooltip: "tooltip_cZx",
      hint: "hint_s2u",
      "item-new": "item-new_owe",
      itemNew: "item-new_owe",
      "item-new-selected": "item-new-selected_XrB",
      itemNewSelected: "item-new-selected_XrB"
    };
    X.add("game-ui/menu/components/shared/save-item/save-item.module.scss", {
      get classes() {
        return Zz;
      },
      set classes(e) {
        Object.assign(Zz, e);
      }
    });
    var eY = ({
      save: e,
      selected: t,
      locked: n,
      tooltipsInactive: s,
      inputAction: i,
      onClick: a,
      onDoubleClick: o,
      onSelect: r
    }) => {
      0;
      const l = Y.useCallback(() => a(e), [e, a]);
      0;
      const c = Y.useCallback(() => o?.(e), [e, o]);
      const u = sl(Ok).find(t => t.id === e.theme);
      const d = nY(e.cloudTarget, e.isReadonly);
      const m = tY(e.cloudTarget);
      0;
      const [h, g] = Y.useState(false);
      0;
      const p = Y.useCallback(() => r && r(e), [r, e]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: g,
        children: z.jsxs(L_, {
          disableHint: true,
          focusKey: e?.id || Xz,
          selected: t,
          className: Qu()(Zz.item, n && Zz.locked),
          onClick: l,
          onDoubleClick: o && c,
          onSelect: r && p,
          children: [z.jsx(LT, {
            action: i,
            active: h,
            className: Zz.hint
          }), z.jsx(iW, {
            src: u?.icon ?? "",
            className: Zz.themeIcon
          }), null != d && (0, z.jsx)(fG, {
            tooltip: sY(e),
            disabled: s,
            className: Zz.tooltip,
            children: (0, z.jsx)(ky, {
              src: d,
              className: Zz.stateIcon,
              tinted: m
            })
          }), z.jsx("div", {
            className: Zz.title,
            children: z.jsx(fG, {
              tooltip: iY(e.path),
              disabled: s,
              className: Zz.tooltip,
              style: {
                maxWidth: screen.availWidth
              },
              children: z.jsx("div", {
                className: Zz.titleInner,
                children: e.displayName
              })
            })
          }), z.jsx("div", {
            className: Zz.populationValue,
            children: z.jsx(Gc, {
              value: e.population,
              unit: Oc.Integer
            })
          }), z.jsx(W_, {
            src: "Media/Game/Icons/Citizen.svg",
            className: Zz.populationIcon
          }), z.jsx(cW, {
            className: Zz.date,
            children: z.jsx(Mu, {
              value: e.lastModified
            })
          })]
        })
      });
    };
    function tY(e) {
      return "ParadoxMods" !== e;
    }
    function nY(e, t) {
      return "ParadoxMods" === e ? "Media/Glyphs/ParadoxModsCloud.svg" : "PdxSdk" === e ? "Media/Glyphs/PDXCloud.svg" : "Steamworks" === e ? "Media/Glyphs/SteamCloud.svg" : "Gdk" === e ? "Media/Glyphs/GdkCloud.svg" : t ? "Media/Glyphs/Lock.svg" : null;
    }
    function sY(e) {
      return "ParadoxMods" === e.cloudTarget ? (0, z.jsx)(Pc.Menu.PARADOXMODS_SAVE, {}) : "PdxSdk" === e.cloudTarget ? (0, z.jsx)(Pc.Menu.PARADOXCLOUD_SAVE, {}) : "Steamworks" === e.cloudTarget ? (0, z.jsx)(Pc.Menu.STEAMCLOUD_SAVE, {}) : "Gdk" === e.cloudTarget ? (0, z.jsx)(Pc.Menu.GDKCLOUD_SAVE, {}) : e.isReadonly ? (0, z.jsx)(Pc.Menu.READONLY_SAVE, {}) : null;
    }
    function iY(e) {
      return e?.replaceAll(/([/\\])/g, "$1​");
    }
    var aY = ({
      selected: e,
      inputAction: t,
      onSelect: n,
      onClick: s,
      onDoubleClick: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: o,
        children: z.jsxs(L_, {
          disableHint: true,
          focusKey: Xz,
          selected: e,
          className: Qu()(Zz.item, Zz.itemNew, {
            [Zz.itemNewSelected]: e
          }),
          onSelect: n,
          onClick: s,
          onDoubleClick: i,
          children: [z.jsx(LT, {
            action: t,
            active: a || e,
            className: Zz.hint
          }), z.jsx("div", {
            className: Zz.title,
            children: z.jsx("div", {
              className: Zz.titleInner,
              children: z.jsx(Pc.GameListScreen.NEW_SAVE, {})
            })
          })]
        })
      });
    };
    X.add("game-ui/menu/components/shared/save-item/save-item.tsx", {
      get SaveItem() {
        return eY;
      },
      set SaveItem(e) {
        eY = e;
      },
      get getStateTintedIcon() {
        return tY;
      },
      set getStateTintedIcon(e) {
        tY = e;
      },
      get getStateIcon() {
        return nY;
      },
      set getStateIcon(e) {
        nY = e;
      },
      get withZeroSpaces() {
        return iY;
      },
      set withZeroSpaces(e) {
        iY = e;
      },
      get NewSaveItem() {
        return aY;
      },
      set NewSaveItem(e) {
        aY = e;
      }
    });
    let oY = {
      listItemHeight: "24rem",
      horizontalPadding: "26rem",
      defaultImageSrc: "Media/Editor/DefaultObject.svg",
      dirArrowSrc: "Media/Glyphs/ThickStrokeArrowRight.svg",
      "item-picker": "item-picker_ORP editor-widget_QQl",
      itemPicker: "item-picker_ORP editor-widget_QQl",
      item: "item_H00",
      "item-container": "item-container_NoI",
      itemContainer: "item-container_NoI",
      "grid-mode": "grid-mode_bUv",
      gridMode: "grid-mode_bUv",
      "favorite-icon": "favorite-icon_bgV",
      favoriteIcon: "favorite-icon_bgV",
      favorite: "favorite_pLV",
      "list-item": "list-item_qRg item_H00",
      listItem: "list-item_qRg item_H00",
      image: "image_scT",
      badge: "badge_H2J",
      name: "name_u39",
      "dir-arrow": "dir-arrow_DVY",
      dirArrow: "dir-arrow_DVY",
      "grid-row": "grid-row_Uxw",
      gridRow: "grid-row_Uxw",
      "grid-item": "grid-item_qEa item_H00",
      gridItem: "grid-item_qEa item_H00",
      "badge-padding": "badge-padding_KbI",
      badgePadding: "badge-padding_KbI"
    };
    X.add("game-ui/editor/widgets/item-picker/item-picker.module.scss", {
      get classes() {
        return oY;
      },
      set classes(e) {
        Object.assign(oY, e);
      }
    });
    let lY = {
      button: "button_bUk",
      hint: "hint_zzq"
    };
    X.add("game-ui/editor/widgets/item-picker/item-picker-button.module.scss", {
      get classes() {
        return lY;
      },
      set classes(e) {
        Object.assign(lY, e);
      }
    });
    var uY = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      0;
      const i = Y.useMemo(() => ({
        length: n.length,
        get: e => {
          const t = e - n.visibleStartIndex;
          return t >= 0 && t < n.visibleItems.length ? n.visibleItems[t] : null;
        }
      }), [n.length, n.visibleItems, n.visibleStartIndex]);
      0;
      const a = Y.useCallback((e, t) => {
        const i = e - e % 64;
        const a = Math.min(t - t % 64 + 64, n.length);
        jD(s, i, a);
      }, [s, n.length]);
      const o = PA(CD, s);
      0;
      const r = Y.useCallback((e, t) => {
        ND(s, e, t);
        if (e === n.selectedIndex && l.current) {
          l.current.scrollToSelected();
        }
      }, [s, n.selectedIndex]);
      0;
      const l = Y.useRef(null);
      0;
      const c = Y.useContext(zI);
      0;
      Y.useLayoutEffect(() => {
        if (c && l.current) {
          l.current.scrollToSelected();
        }
      }, [n.columnCount, n.length, c]);
      const u = zF(n.flex);
      0;
      return z.jsx(dY, {
        ref: l,
        selectedIndex: n.selectedIndex,
        columnCount: n.columnCount,
        hasImages: n.hasImages,
        data: i,
        style: u,
        onRenderedRangeChange: a,
        onSelect: o,
        onToggleFavorite: n.hasFavorites ? r : undefined,
        selectOnFocus: n.selectOnFocus
      });
    };
    var dY = Y.forwardRef(function ({
      focusKey: e,
      selectedIndex: t,
      columnCount: n,
      hasImages: s = true,
      data: i,
      className: a,
      style: o,
      onRenderedRangeChange: r,
      onSelect: l,
      onToggleFavorite: c,
      selectOnFocus: u = true
    }, d) {
      0;
      const m = Y.useRef(null);
      const h = kE();
      0;
      const g = Y.useCallback(e => {
        if (u && "number" == typeof e) {
          l(e);
        }
      }, [l, u]);
      const p = 1 === n;
      const f = Gm(oY.listItemHeight);
      const x = GK(f, i.length, 2);
      0;
      const v = Y.useCallback((e, n) => {
        const a = i.get(e);
        0;
        return z.jsx(mY, {
          index: e,
          name: null != a ? (0, z.jsx)(hu, {
            value: a.displayName
          }) : " ",
          image: a?.image ?? null,
          tinted: a?.tinted ?? false,
          hasImage: s,
          directory: a?.directory ?? false,
          favorite: a?.favorite ?? false,
          selected: t === e,
          className: oY.listItem,
          onSelect: l,
          onToggleFavorite: c,
          tooltip: (a && a.tooltip && (0, z.jsx)(hu, {
            value: a.tooltip,
            transformer: FH
          })) ?? null,
          listMode: true,
          badge: a?.badge ?? null
        }, n);
      }, [i, s, t, l, c]);
      const _ = mm(m);
      const b = Gm(oY.horizontalPadding);
      const T = (null != _ ? _.x - b : n) / n;
      const E = null != _ ? Math.ceil(i.length / n) : 0;
      const I = GK(T, E, 2);
      0;
      const y = Y.useCallback((e, a) => {
        const o = e * n;
        const r = Math.min((e + 1) * n, i.length);
        0;
        return z.jsx("div", {
          className: oY.gridRow,
          style: {
            "--itemSize": T + "px"
          },
          children: [...Array(r - o).keys()].map(e => {
            const n = o + e;
            const a = i.get(n);
            0;
            return z.jsx(mY, {
              index: n,
              name: null != a ? (0, z.jsx)(hu, {
                value: a.displayName
              }) : " ",
              image: a?.image ?? null,
              tinted: a?.tinted ?? false,
              hasImage: s,
              directory: a?.directory ?? false,
              favorite: a?.favorite ?? false,
              selected: t === n,
              className: oY.gridItem,
              onSelect: l,
              onToggleFavorite: c,
              tooltip: (a && a.tooltip && (0, z.jsx)(hu, {
                value: a.tooltip
              })) ?? null,
              listMode: false,
              badge: a?.badge ?? null
            }, e);
          })
        }, a);
      }, [n, i, T, s, t, l, c]);
      0;
      const S = Y.useCallback((e, t) => {
        if (r) {
          r(e * n, t * n);
        }
      }, [n, r]);
      0;
      const j = Y.useRef(0);
      j.current = -1 === t || null === _ ? 0 : p ? f * (t + .5) - _.y / 2 : T * (Math.floor(t / n) + .5) - _.y / 2;
      0;
      const C = Y.useRef(0);
      0;
      Y.useImperativeHandle(d, () => ({
        scrollToSelected: () => {
          window.cancelAnimationFrame(C.current);
          h.scrollTo(0, j.current);
          C.current = window.requestAnimationFrame(() => {
            h.scrollTo(0, j.current);
            C.current = window.requestAnimationFrame(() => {
              h.scrollTo(0, j.current);
            });
          });
        }
      }));
      0;
      Y.useEffect(() => () => window.cancelAnimationFrame(C.current), []);
      0;
      0;
      return z.jsx(ep, {
        focusKey: e,
        initialFocused: t,
        onChange: g,
        children: z.jsx(FK, {
          ref: m,
          controller: h,
          smooth: false,
          className: Qu()(oY.itemPicker, a),
          style: o,
          sizeProvider: null != _ ? p ? x : I : BK,
          renderItem: p ? v : y,
          onRenderedRangeChange: S
        })
      });
    });
    const mY = ({
      index: e,
      name: t,
      image: n,
      tinted: s,
      hasImage: i,
      directory: a,
      favorite: o,
      selected: r,
      className: l,
      onSelect: c,
      onToggleFavorite: u,
      tooltip: d,
      listMode: m,
      badge: h
    }) => {
      0;
      const g = Y.useCallback(() => c(e), [e, c]);
      0;
      const p = Y.useMemo(() => null != u ? () => {
        u(e, !o);
        rp(op.selectToggle);
      } : undefined, [e, o, u]);
      const {
        onMouseUp: f,
        onMouseDown: x
      } = tW(2, p);
      0;
      const [v, _] = Y.useMemo(() => {
        if (null !== h) {
          const e = nY(h, false);
          if (null !== e) {
            return [e, tY(h)];
          }
          if (h.indexOf("://") >= 0) {
            return [h, false];
          }
        }
        return [null, false];
      }, [h]);
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: d,
        children: z.jsxs("div", {
          className: Qu()(oY.itemContainer),
          children: [z.jsxs(L_, {
            focusKey: e,
            selected: r,
            className: Qu()(l, {
              [oY.favorite]: o
            }),
            onSelect: g,
            onMouseDown: x,
            onMouseUp: f,
            theme: lY,
            children: [i && (0, z.jsx)(ky, {
              src: n || oY.defaultImageSrc,
              className: oY.image,
              tinted: s
            }), v && (0, z.jsx)(ky, {
              src: v,
              className: oY.badge,
              tinted: _
            }), z.jsx("div", {
              className: Qu()(oY.name, {
                [oY.badgePadding]: v
              }),
              children: t
            }), a && (0, z.jsx)(W_, {
              src: oY.dirArrowSrc,
              className: oY.dirArrow
            })]
          }), null != u && (0, z.jsx)(W_, {
            className: Qu()(l, oY.favoriteIcon, {
              [oY.gridMode]: !m,
              [oY.favorite]: o
            }),
            onClick: p,
            src: o ? "Media/Glyphs/StarFilled.svg" : "Media/Glyphs/StarOutline.svg"
          })]
        })
      });
    };
    X.add("game-ui/editor/widgets/item-picker/item-picker.tsx", {
      get BoundItemPicker() {
        return uY;
      },
      set BoundItemPicker(e) {
        uY = e;
      },
      get ItemPicker() {
        return dY;
      },
      set ItemPicker(e) {
        dY = e;
      }
    });
    let hY = {
      "item-picker-footer": "item-picker-footer_Hi4 editor-widget_QQl",
      itemPickerFooter: "item-picker-footer_Hi4 editor-widget_QQl",
      summary: "summary_gnF",
      slider: "slider_iLE"
    };
    X.add("game-ui/editor/widgets/item-picker-footer/item-picker-footer.module.scss", {
      get classes() {
        return hY;
      },
      set classes(e) {
        Object.assign(hY, e);
      }
    });
    var pY = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(BA, sM(e, t));
      0;
      return z.jsx(fY, {
        length: n.length,
        columnCount: n.columnCount,
        onColumnCountChange: s
      });
    };
    var fY = ({
      length: e,
      columnCount: t,
      onColumnCountChange: n
    }) => {
      0;
      const s = Y.useCallback(e => n(e <= 10 ? e : 1), [n]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        children: z.jsxs("div", {
          className: hY.itemPickerFooter,
          children: [z.jsx("div", {
            className: hY.summary,
            children: z.jsx(Pc.Editor.ELEMENT_COUNT, {
              COUNT: e.toString()
            })
          }), z.jsx(Np, {
            children: z.jsx(GM, {
              value: 1 === t ? 11 : t,
              start: 11,
              end: 4,
              theme: PV,
              className: Qu()(PV.compact, hY.slider),
              valueTransformer: HM,
              onChange: s,
              gamepadStep: 1
            })
          })]
        })
      });
    };
    X.add("game-ui/editor/widgets/item-picker-footer/item-picker-footer.tsx", {
      get BoundItemPickerFooter() {
        return pY;
      },
      set BoundItemPickerFooter(e) {
        pY = e;
      },
      get ItemPickerFooter() {
        return fY;
      },
      set ItemPickerFooter(e) {
        fY = e;
      }
    });
    let xY = {
      summary: "summary_sOH",
      section: "section_KBF",
      controls: "controls_kKZ",
      control: "control_p7u",
      children: "children_oyd section_KBF",
      "list-item": "list-item_zT4",
      listItem: "list-item_zT4",
      header: "header_jkI",
      label: "label_Mi4",
      toggle: "toggle_IOi",
      action: "action_AoQ",
      "toggle-label": "toggle-label_UK9",
      toggleLabel: "toggle-label_UK9"
    };
    X.add("game-ui/editor/widgets/list/list.module.scss", {
      get classes() {
        return xY;
      },
      set classes(e) {
        Object.assign(xY, e);
      }
    });
    var _Y = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      const a = PA(HA, i);
      const o = PA(YA, i);
      const r = PA(GA, i);
      const l = PA($A, i);
      0;
      0;
      return z.jsx(yY, {
        expanded: n.expanded,
        tooltip: n.tooltip,
        label: z.jsx(hu, {
          value: n.displayName
        }),
        length: n.length,
        currentPageIndex: n.currentPageIndex,
        pageCount: n.pageCount,
        onAddItem: n.resizable ? a : undefined,
        onClear: n.resizable ? o : undefined,
        onExpandedChange: r,
        onCurrentPageChange: l,
        disabled: n.disabled,
        children: s.map((e, t) => e.props.__Type === AA.ExpandableGroup ? (0, z.jsx)(TY, {
          parent: i,
          index: n.childStartIndex + t,
          length: n.length,
          resizable: n.resizable,
          sortable: n.sortable,
          data: e,
          disabled: n.disabled
        }, n.childStartIndex + t) : (0, z.jsx)(bY, {
          parent: i,
          index: n.childStartIndex + t,
          length: n.length,
          resizable: n.resizable,
          sortable: n.sortable,
          data: e,
          disabled: n.disabled
        }, n.childStartIndex + t))
      });
    };
    const bY = ({
      parent: e,
      index: t,
      length: n,
      resizable: s,
      sortable: i,
      data: a,
      disabled: o
    }) => {
      0;
      const r = Y.useContext(hM);
      const l = EY(e, t, i, s);
      0;
      0;
      return z.jsx(SY, {
        focusKey: t,
        first: 0 === t,
        last: t === n - 1,
        ...l,
        onExpandedChange: undefined,
        disabled: o,
        children: z.jsx(dM, {
          parent: e,
          components: r,
          data: a
        })
      });
    };
    const TY = ({
      parent: e,
      index: t,
      length: n,
      resizable: s,
      sortable: i,
      data: a,
      disabled: o
    }) => {
      const r = EY(e, t, i, s);
      const l = sM(e, a.path);
      0;
      const c = Y.useContext(hM);
      const u = PA(GA, l);
      0;
      0;
      0;
      return z.jsx(SY, {
        focusKey: t,
        label: z.jsx(hu, {
          value: a.props.displayName
        }),
        first: 0 === t,
        last: t === n - 1,
        expanded: a.props.expanded,
        ...r,
        onExpandedChange: u,
        disabled: o,
        children: z.jsx(mM, {
          parent: l,
          components: c,
          data: a.children
        })
      });
    };
    function EY(e, t, n, s) {
      0;
      return Y.useMemo(() => ({
        onMoveUp: n ? () => WA(e, t, t - 1) : undefined,
        onMoveDown: n ? () => WA(e, t, t + 1) : undefined,
        onDuplicate: s ? () => KA(e, t) : undefined,
        onDelete: s ? () => zA(e, t) : undefined
      }), [e, t, n, s]);
    }
    var IY = ({
      label: e,
      disabled: t,
      children: n,
      onAddItem: s,
      onClear: i
    }) => {
      const a = Y.Children.count(n);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(JD, {
        disabled: t,
        children: [z.jsxs("div", {
          className: QD.row,
          children: [z.jsx("div", {
            className: QD.label,
            children: e
          }), z.jsx("div", {
            className: xY.summary,
            children: z.jsx(Pc.Editor.LIST_COUNT, {
              COUNT: z.jsx(Gc, {
                value: a,
                unit: Oc.Integer
              })
            })
          })]
        }), a > 0 && (0, z.jsx)("div", {
          className: xY.children,
          children: n
        }), (null != s || null != i) && (0, z.jsxs)("div", {
          className: xY.controls,
          children: [null != s && (0, z.jsx)(L_, {
            disabled: t,
            theme: VD,
            onSelect: s,
            children: (0, z.jsx)(Pc.Editor.LIST_ADD_ITEM, {})
          }), null != i && (0, z.jsx)(L_, {
            disabled: t || 0 === a,
            theme: VD,
            onSelect: i,
            children: (0, z.jsx)(Pc.Editor.CLEAR, {})
          })]
        })]
      });
    };
    var yY = ({
      label: e,
      expanded: t,
      tooltip: n,
      length: s,
      currentPageIndex: i,
      pageCount: a,
      disabled: o,
      children: r,
      onAddItem: l,
      onClear: c,
      onExpandedChange: u,
      onCurrentPageChange: d
    }) => {
      0;
      const m = Y.useCallback(() => d(i - 1), [i, d]);
      0;
      const h = Y.useCallback(() => d(i + 1), [i, d]);
      const g = t && a > 1 ? (0, z.jsx)(Pc.Editor.LIST_PAGE_COUNT, {
        PAGE: _u(i + 1),
        PAGE_COUNT: _u(a),
        COUNT: _u(s)
      }) : (0, z.jsx)(Pc.Editor.LIST_COUNT, {
        COUNT: _u(s)
      });
      0;
      return z.jsxs(tF, {
        label: e,
        tooltip: n,
        summary: g,
        expanded: t,
        disabled: o,
        onExpandedChange: u,
        children: [a > 1 && (0, z.jsxs)("div", {
          className: xY.controls,
          children: [(0, z.jsx)(L_, {
            disabled: 0 === i,
            theme: VD,
            className: xY.control,
            onSelect: m,
            children: (0, z.jsx)(Pc.Editor.PREVIOUS_PAGE, {})
          }), (0, z.jsx)(L_, {
            disabled: i >= a - 1,
            theme: VD,
            className: xY.control,
            onSelect: h,
            children: (0, z.jsx)(Pc.Editor.NEXT_PAGE, {})
          })]
        }), s > 0 && (0, z.jsx)("div", {
          className: xY.children,
          children: r
        }), (null != l || null != c) && (0, z.jsxs)("div", {
          className: xY.controls,
          children: [null != l && (0, z.jsx)(L_, {
            disabled: o,
            theme: VD,
            className: xY.control,
            onSelect: l,
            children: (0, z.jsx)(Pc.Editor.LIST_ADD_ITEM, {})
          }), null != c && (0, z.jsx)(L_, {
            disabled: o || 0 === s,
            theme: VD,
            className: xY.control,
            onSelect: c,
            children: (0, z.jsx)(Pc.Editor.CLEAR, {})
          })]
        })]
      });
    };
    var SY = ({
      focusKey: e,
      label: t,
      disabled: n,
      first: s,
      last: i,
      expanded: a = true,
      children: o,
      onMoveUp: r,
      onMoveDown: l,
      onDuplicate: c,
      onDelete: u,
      onExpandedChange: d
    }) => {
      const m = null != d;
      0;
      const h = Y.useCallback(() => {
        if (null != d) {
          d(!a);
        }
      }, [a, d]);
      0;
      0;
      0;
      return z.jsxs("div", {
        className: xY.listItem,
        children: [z.jsx("div", {
          className: xY.header,
          children: z.jsxs(ep, {
            focusKey: e,
            direction: Mg.Horizontal,
            children: [m ? (0, z.jsx)($_, {
              tinted: true,
              src: a ? "Media/Glyphs/ThickStrokeArrowDown.svg" : "Media/Glyphs/ThickStrokeArrowRight.svg",
              className: Qu()(xY.toggle, a && xY.expanded),
              onSelect: h,
              children: (0, z.jsx)("div", {
                className: xY.toggleLabel,
                children: t
              })
            }) : (0, z.jsx)("div", {
              className: xY.label,
              children: t
            }), r && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Editor.LIST_ITEM_MOVE_UP, {}),
              children: (0, z.jsx)($_, {
                tinted: true,
                src: "Media/Glyphs/StrokeArrowUp.svg",
                disabled: s || n,
                className: xY.action,
                onSelect: r
              })
            }), l && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Editor.LIST_ITEM_MOVE_DOWN, {}),
              children: (0, z.jsx)($_, {
                tinted: true,
                src: "Media/Glyphs/StrokeArrowDown.svg",
                disabled: i || n,
                className: xY.action,
                onSelect: l
              })
            }), c && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Editor.LIST_ITEM_DUPLICATE, {}),
              children: (0, z.jsx)($_, {
                tinted: true,
                src: "Media/Glyphs/Copy.svg",
                disabled: n,
                className: xY.action,
                onSelect: c
              })
            }), u && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Editor.LIST_ITEM_DELETE, {}),
              children: (0, z.jsx)($_, {
                tinted: true,
                src: "Media/Glyphs/Trash.svg",
                disabled: n,
                className: xY.action,
                onSelect: u
              })
            })]
          })
        }), o]
      });
    };
    X.add("game-ui/editor/widgets/list/list.tsx", {
      get BoundPagedList() {
        return _Y;
      },
      set BoundPagedList(e) {
        _Y = e;
      },
      get EditorList() {
        return IY;
      },
      set EditorList(e) {
        IY = e;
      },
      get EditorPagedList() {
        return yY;
      },
      set EditorPagedList(e) {
        yY = e;
      },
      get EditorListItem() {
        return SY;
      },
      set EditorListItem(e) {
        SY = e;
      }
    });
    let jY = {
      "dropdown-toggle": "dropdown-toggle_ODx dropdown-toggle_prl",
      dropdownToggle: "dropdown-toggle_ODx dropdown-toggle_prl",
      indicator: "indicator_JII",
      "dropdown-menu": "dropdown-menu_xq2 dropdown-menu_Swd",
      dropdownMenu: "dropdown-menu_xq2 dropdown-menu_Swd",
      "dropdown-item": "dropdown-item_R_l undefined",
      dropdownItem: "dropdown-item_R_l undefined"
    };
    X.add("game-ui/game/themes/game-dropdown.module.scss", {
      get classes() {
        return jY;
      },
      set classes(e) {
        Object.assign(jY, e);
      }
    });
    let NY = {
      dropdown: "dropdown_zWC",
      item: "item_Bmu",
      thumb: "thumb_eC2",
      label: "label_jXx",
      hint: "hint_hNH",
      "pad-left": "pad-left_jYb",
      padLeft: "pad-left_jYb",
      "dropdown-gamepad": "dropdown-gamepad_HFi",
      dropdownGamepad: "dropdown-gamepad_HFi",
      "pad-right": "pad-right_o6g",
      padRight: "pad-right_o6g",
      "pad-thumbnail": "pad-thumbnail_pWJ",
      padThumbnail: "pad-thumbnail_pWJ"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/select-vehicles-section.module.scss", {
      get classes() {
        return NY;
      },
      set classes(e) {
        Object.assign(NY, e);
      }
    });
    var OY = {
      ...P_,
      hover: null,
      focus: null
    };
    function PY(e, t) {
      tl("SelectVehiclesSection", "selectVehicles", e, t);
    }
    var LY = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      primaryVehicle: s,
      secondaryVehicle: i,
      primaryVehicles: a,
      secondaryVehicles: o
    }) => {
      0;
      const r = Y.useCallback(e => {
        PY(e, i?.entity ?? Xp);
      }, [i?.entity]);
      0;
      const l = Y.useCallback(e => {
        PY(s?.entity ?? Xp, e);
      }, [s?.entity]);
      const c = Uw(e, t, n, true);
      const u = s ?? a[0];
      0;
      const d = Y.useMemo(() => null != i ? i : null != o && o.length > 0 ? o[0] : null, [i, o]);
      0;
      const [m, h] = Y.useState(false);
      0;
      const [g, p] = Y.useState(false);
      const f = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: true,
        className: NY.selectVehiclesSection,
        tooltip: c && (0, z.jsx)(bb, {
          text: c
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.SELECT_VEHICLE, {})
        }), z.jsx(Ny, {
          disableFocus: true,
          className: Qu()(NY.dropdownGamepad, f && NY.padRight, f && !m && NY.padLeft),
          left: z.jsxs(z.Fragment, {
            children: [z.jsx(LT, {
              action: g ? "Back" : "Select",
              active: m,
              className: NY.hint
            }), z.jsx(Lh, {
              onFocusChange: h,
              children: z.jsx(ny, {
                focusKey: Ig,
                theme: jY,
                initialFocused: Dr(u.entity),
                onToggle: p,
                content: a?.map(e => (0, z.jsx)(AY, {
                  vehicle: e,
                  onSelect: r
                }, Dr(e.entity))),
                children: z.jsx(sy, {
                  sounds: OY,
                  className: NY.dropdown,
                  children: z.jsxs("div", {
                    className: NY.item,
                    children: [z.jsx("img", {
                      src: u.thumbnail,
                      className: NY.thumb
                    }), z.jsxs("div", {
                      className: NY.label,
                      children: [z.jsx(Pc.Assets.NAME, {
                        hash: u.id
                      }), " "]
                    })]
                  })
                })
              })
            })]
          })
        }), d && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.SELECT_VEHICLE_SECONDARY, {
              hash: "Train"
            })
          }), (0, z.jsx)(ny, {
            theme: jY,
            initialFocused: Dr(d.entity),
            content: o?.map(e => (0, z.jsx)(AY, {
              vehicle: e,
              onSelect: l
            }, Dr(e.entity))),
            children: (0, z.jsx)(sy, {
              sounds: OY,
              className: NY.dropdown,
              children: (0, z.jsxs)("div", {
                className: NY.item,
                children: [(0, z.jsx)("img", {
                  src: d.thumbnail,
                  className: NY.thumb
                }), (0, z.jsxs)("div", {
                  className: NY.label,
                  children: [(0, z.jsx)(Pc.Assets.NAME, {
                    hash: d.id
                  }), " "]
                })]
              })
            })
          })]
        })]
      });
    };
    const AY = ({
      vehicle: e,
      onSelect: t
    }) => {
      0;
      const [n, s] = Y.useState(false);
      const i = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: s,
        children: z.jsx(oy, {
          value: e.entity,
          focusKey: e.id,
          onChange: t,
          className: Qu()(i && NY.padRight, i && !n && NY.padLeft),
          children: z.jsxs("div", {
            className: NY.item,
            children: [z.jsx(LT, {
              action: "Select",
              active: n,
              className: NY.hint
            }), z.jsx("img", {
              src: e.thumbnail,
              className: Qu()(NY.thumb, i && NY.padThumbnail)
            }), z.jsxs("div", {
              className: NY.label,
              children: [z.jsx(Pc.Assets.NAME, {
                hash: e.id
              }), " "]
            })]
          })
        }, Dr(e.entity))
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/select-vehicles-section.tsx", {
      get dropdownSounds() {
        return OY;
      },
      set dropdownSounds(e) {
        OY = e;
      },
      get SelectVehiclesSection() {
        return LY;
      },
      set SelectVehiclesSection(e) {
        LY = e;
      }
    });
    let MY = {
      left: "left_vb1",
      right: "right_wuq",
      "delete-button": "delete-button_iT6",
      deleteButton: "delete-button_iT6",
      input: "input_xcv"
    };
    X.add("game-ui/editor/widgets/localization-field/localization-field.module.scss", {
      get classes() {
        return MY;
      },
      set classes(e) {
        Object.assign(MY, e);
      }
    });
    var kY = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      0;
      const i = Y.useCallback((e, t, n) => {
        OD(s, e, t, n);
      }, [s]);
      const a = sl(gc);
      0;
      const o = Y.useCallback(e => {
        LD(s, e);
      }, [s]);
      0;
      const r = Y.useCallback(() => {
        PD(s);
      }, [s]);
      0;
      return z.jsx(DY, {
        localization: n.localization,
        supportedLocales: a,
        onChange: i,
        onAdd: r,
        onRemove: o,
        placeholder: n.placeholder,
        mandatoryId: n.mandatoryId
      });
    };
    var DY = ({
      localization: e,
      supportedLocales: t,
      onChange: n,
      onAdd: s,
      onRemove: i,
      placeholder: a,
      mandatoryId: o
    }) => {
      0;
      const r = Y.useMemo(() => t.filter(t => e.findIndex(e => e.localeId === t) < 0), [e, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(JD, {
        children: [e.map((e, t) => (0, z.jsx)(FY, {
          index: t,
          localeId: e.localeId,
          text: e.text,
          unusedLocales: r,
          onChange: n,
          onRemove: i,
          placeholder: a,
          mandatory: e.localeId === o
        }, t)), z.jsx("div", {
          children: z.jsx(gF, {
            children: z.jsx(pF, {
              disabled: 0 === r.length,
              onSelect: s,
              children: z.jsx(Pc.Editor.ADD_TRANSLATION, {})
            })
          })
        })]
      });
    };
    const FY = ({
      index: e,
      localeId: t,
      text: n,
      unusedLocales: s,
      onChange: i,
      onRemove: a,
      placeholder: o,
      mandatory: r
    }) => {
      0;
      const l = Y.useMemo(() => [t, ...s], [t, s]);
      0;
      const c = Y.useCallback(t => i(e, l[t], n), [e, l, i, n]);
      0;
      const u = Y.useCallback(n => i(e, t, n.target.value || ""), [e, t, i]);
      0;
      const d = Y.useCallback(() => a(e), [e, a]);
      0;
      const m = Y.useMemo(() => l.findIndex(e => e === t), [t, l]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(eF, {
        className: QD.row,
        children: z.jsxs(ep, {
          direction: Mg.Horizontal,
          children: [z.jsx("div", {
            className: MY.left,
            children: z.jsx(ny, {
              theme: fF,
              initialFocused: e,
              content: l.map((e, t) => (0, z.jsx)(oy, {
                focusKey: t,
                value: t,
                selected: m === t,
                onChange: c,
                children: (0, z.jsx)(hu, {
                  value: bc(e)
                })
              }, t)),
              children: z.jsx(sy, {
                sounds: OY,
                className: QD.dropdownToggle,
                disabled: r || l.length <= 1,
                children: t
              })
            })
          }), z.jsxs("div", {
            className: MY.right,
            children: [z.jsx(zE, {
              showHint: true,
              value: n,
              className: Qu()(QD.input, MY.input),
              onChange: u,
              placeholder: z.jsx(hu, {
                value: o
              })
            }), z.jsx(XD, {
              className: MY.deleteButton,
              src: "media/glyphs/trash.svg",
              selected: false,
              disabled: false,
              onSelect: d,
              tinted: true
            })]
          })]
        })
      });
    };
    X.add("game-ui/editor/widgets/localization-field/localization-field.tsx", {
      get BoundLocalizationField() {
        return kY;
      },
      set BoundLocalizationField(e) {
        kY = e;
      },
      get LocalizationField() {
        return DY;
      },
      set LocalizationField(e) {
        DY = e;
      }
    });
    let UY = {
      backSrc: "Media/Glyphs/ThickStrokeArrowLeft.svg",
      "page-layout": "page-layout_JSP editor-widget_QQl",
      pageLayout: "page-layout_JSP editor-widget_QQl",
      header: "header_u77",
      "back-button": "back-button_rnO",
      backButton: "back-button_rnO",
      title: "title_zOE"
    };
    X.add("game-ui/editor/widgets/page-layout/page-layout.module.scss", {
      get classes() {
        return UY;
      },
      set classes(e) {
        Object.assign(UY, e);
      }
    });
    var GY = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      const a = zF(n.flex);
      0;
      const o = Y.useContext(hM);
      const r = PA(UA, i);
      0;
      0;
      0;
      return z.jsx(VY, {
        title: z.jsx(hu, {
          value: n.title
        }),
        style: a,
        onBack: n.hasBackAction ? r : undefined,
        children: z.jsx(mM, {
          parent: i,
          components: o,
          data: s
        })
      });
    };
    var VY = ({
      title: e,
      className: t,
      style: n,
      children: s,
      onBack: i
    }) => {
      const a = km();
      0;
      0;
      0;
      0;
      return z.jsx(kg, {
        onAction: i,
        children: z.jsxs("div", {
          className: Qu()(UY.pageLayout, t),
          style: n,
          children: [z.jsxs("div", {
            className: UY.header,
            children: [!a && null != i && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Common.GO_BACK_TOOLTIP, {}),
              children: (0, z.jsx)($_, {
                tinted: true,
                focusKey: Eg,
                src: UY.backSrc,
                className: UY.backButton,
                onSelect: i
              })
            }), z.jsx("div", {
              className: UY.title,
              children: e
            })]
          }), s]
        })
      });
    };
    X.add("game-ui/editor/widgets/page-layout/page-layout.tsx", {
      get BoundPageLayout() {
        return GY;
      },
      set BoundPageLayout(e) {
        GY = e;
      },
      get PageLayout() {
        return VY;
      },
      set PageLayout(e) {
        VY = e;
      }
    });
    var HY = n(928);
    var KY = n.n(HY);
    function WY(e, t, n, s) {
      const i = zY(e, n ?? t, s);
      0;
      Y.useEffect(() => {
        i.setEndValue(t);
      }, [i, t]);
      return YY(i);
    }
    function zY(e, t = 0, n = false) {
      0;
      const s = Y.useRef(t);
      0;
      const i = Y.useMemo(() => new (KY().SpringSystem)().createSpring().setCurrentValue(s.current).setAtRest(), []);
      const a = wp(e);
      0;
      Y.useEffect(() => {
        i.setSpringConfig(a);
      }, [i, a]);
      0;
      Y.useEffect(() => {
        i.setOvershootClampingEnabled(n);
      }, [i, n]);
      return i;
    }
    function YY(e) {
      0;
      const [t, n] = Y.useState(e.getCurrentValue());
      0;
      Y.useEffect(() => {
        const t = {
          onSpringUpdate(e) {
            n(e.getCurrentValue());
          }
        };
        e.addListener(t);
        return () => {
          e.removeListener(t);
        };
      }, [e]);
      return t;
    }
    X.add("game-ui/common/animations/spring-hooks.tsx", {
      get useSpringAnimation() {
        return WY;
      },
      set useSpringAnimation(e) {
        WY = e;
      },
      get useSpring() {
        return zY;
      },
      set useSpring(e) {
        zY = e;
      },
      get useSpringValue() {
        return YY;
      },
      set useSpringValue(e) {
        YY = e;
      }
    });
    let $Y = {
      "page-view": "page-view_PUO editor-widget_QQl",
      pageView: "page-view_PUO editor-widget_QQl",
      page: "page_hHC",
      active: "active_xN8"
    };
    X.add("game-ui/editor/widgets/page-view/page-view.module.scss", {
      get classes() {
        return $Y;
      },
      set classes(e) {
        Object.assign($Y, e);
      }
    });
    var XY = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      const a = zF(n.flex);
      0;
      const o = Y.useContext(hM);
      0;
      const r = Y.useMemo(() => s.map(e => (0, z.jsx)(dM, {
        parent: i,
        components: o,
        data: e
      }, e.path)), [s, i, o]);
      0;
      return z.jsx(ZY, {
        currentPage: n.currentPage,
        pages: r,
        style: a
      });
    };
    const QY = {
      tension: 150,
      friction: 15
    };
    var ZY = ({
      currentPage: e,
      pages: t,
      className: n,
      style: s
    }) => {
      const i = WY(QY, e, undefined, true);
      0;
      0;
      return z.jsx("div", {
        className: Qu()($Y.pageView, n),
        style: s,
        children: z.jsx(ip, {
          focused: e,
          children: t.map((t, n) => (0, z.jsx)("div", {
            className: Qu()($Y.page, n === e && $Y.active),
            style: {
              "--offset": n - i
            },
            children: (0, z.jsx)(ep, {
              focusKey: n,
              children: t
            })
          }, n))
        })
      });
    };
    X.add("game-ui/editor/widgets/page-view/page-view.tsx", {
      get BoundPageView() {
        return XY;
      },
      set BoundPageView(e) {
        XY = e;
      },
      get PageView() {
        return ZY;
      },
      set PageView(e) {
        ZY = e;
      }
    });
    let JY = {
      row: "row_uw4 editor-widget_QQl"
    };
    X.add("game-ui/editor/widgets/Row/row.module.scss", {
      get classes() {
        return JY;
      },
      set classes(e) {
        Object.assign(JY, e);
      }
    });
    var t$ = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      const a = zF(n.flex);
      0;
      const o = Y.useContext(hM);
      0;
      0;
      return z.jsx(n$, {
        style: a,
        children: z.jsx(mM, {
          parent: i,
          components: o,
          data: s
        })
      });
    };
    var n$ = ({
      className: e,
      style: t,
      children: n
    }) => (0, z.jsx)("div", {
      className: Qu()(JY.row, e),
      style: t,
      children: (0, z.jsx)(ep, {
        children: n
      })
    });
    X.add("game-ui/editor/widgets/Row/row.tsx", {
      get BoundRow() {
        return t$;
      },
      set BoundRow(e) {
        t$ = e;
      },
      get Row() {
        return n$;
      },
      set Row(e) {
        n$ = e;
      }
    });
    let s$ = {
      scrollable: "scrollable_VJQ editor-widget_QQl"
    };
    X.add("game-ui/editor/widgets/scrollable/scrollable.module.scss", {
      get classes() {
        return s$;
      },
      set classes(e) {
        Object.assign(s$, e);
      }
    });
    var a$ = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      const a = zF(n.flex);
      0;
      const o = Y.useContext(hM);
      0;
      0;
      return z.jsx(o$, {
        style: a,
        children: z.jsx(mM, {
          parent: i,
          components: o,
          data: s
        })
      });
    };
    var o$ = ({
      className: e,
      style: t,
      children: n,
      vertical: s = true,
      horizontal: i = false
    }) => (0, z.jsx)(ab, {
      trackVisibility: "scrollable",
      className: Qu()(s$.scrollable, e),
      style: t,
      vertical: s,
      horizontal: i,
      children: (0, z.jsx)(ep, {
        children: n
      })
    });
    X.add("game-ui/editor/widgets/scrollable/scrollable.tsx", {
      get BoundScrollable() {
        return a$;
      },
      set BoundScrollable(e) {
        a$ = e;
      },
      get EditorScrollable() {
        return o$;
      },
      set EditorScrollable(e) {
        o$ = e;
      }
    });
    let r$ = {
      popupMinHeight: "300rem",
      "search-field": "search-field_jRt editor-widget_QQl",
      searchField: "search-field_jRt editor-widget_QQl",
      input: "input_UVn",
      actions: "actions_qt8",
      action: "action_Qra",
      popup: "popup_OTO",
      item: "item_NeK",
      value: "value_Mug",
      "favorite-action": "favorite-action_s2e",
      favoriteAction: "favorite-action_s2e",
      "favorite-icon": "favorite-icon_JvS",
      favoriteIcon: "favorite-icon_JvS"
    };
    X.add("game-ui/editor/widgets/search-field/search-field.module.scss", {
      get classes() {
        return r$;
      },
      set classes(e) {
        Object.assign(r$, e);
      }
    });
    var c$ = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = sM(e, t);
      const i = PA(BA, s);
      const a = PA(wD, s);
      0;
      return z.jsx(u$, {
        value: n.value,
        valueIsFavorite: n.valueIsFavorite,
        suggestions: n.suggestions,
        onChange: i,
        onChangeFavorite: n.hasFavorites ? a : undefined
      });
    };
    var u$ = ({
      value: e,
      valueIsFavorite: t,
      suggestions: n,
      onChange: s,
      onChangeFavorite: i
    }) => {
      const a = km();
      0;
      const o = Y.useRef(null);
      0;
      const [r, l] = Y.useState(false);
      0;
      const c = Y.useCallback(e => s(e.target.value || ""), [s]);
      0;
      const u = Y.useCallback(() => l(true), []);
      0;
      const d = Y.useCallback(() => l(false), []);
      0;
      const m = Y.useMemo(() => null != i ? () => i(e, !t) : null, [t, e, i]);
      0;
      const h = Y.useCallback(() => s(""), [s]);
      0;
      const g = Y.useCallback(e => {
        s(e);
        o.current?.blur();
      }, [s]);
      const p = Gm(r$.popupMinHeight);
      0;
      const f = z.jsx(ab, {
        className: r$.scrollable,
        children: n.map((e, t) => (0, z.jsx)(d$, {
          value: e.value,
          favorite: e.favorite,
          onSelect: g,
          onChangeFavorite: i
        }, t))
      });
      0;
      0;
      0;
      0;
      0;
      return z.jsx(YI, {
        visible: !a && r && n.length > 0,
        direction: "down",
        minHeight: p,
        className: r$.popup,
        content: f,
        minWidth: true,
        children: z.jsx(fd, {
          children: z.jsxs("div", {
            className: r$.searchField,
            children: [z.jsx(zE, {
              ref: o,
              value: e,
              placeholder: z.jsx(Pc.Editor.SEARCH_PLACEHOLDER, {}),
              className: r$.input,
              onChange: c,
              onFocus: u,
              onBlur: d
            }), !a && e && (0, z.jsxs)("div", {
              className: r$.actions,
              children: [(0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Common.CLEAR_SEARCH_TOOLTIP, {}),
                children: (0, z.jsx)($_, {
                  tinted: true,
                  focusKey: Eg,
                  src: "Media/Glyphs/Clear.svg",
                  className: r$.action,
                  onSelect: h,
                  onMouseDown: r ? m$ : undefined
                })
              }), null != m && (0, z.jsx)(bg, {
                tooltip: t ? (0, z.jsx)(Pc.Editor.REMOVE_FAVORITE, {}) : (0, z.jsx)(Pc.Editor.ADD_FAVORITE, {}),
                children: (0, z.jsx)($_, {
                  tinted: true,
                  focusKey: Eg,
                  src: t ? "Media/Glyphs/StarFilled.svg" : "Media/Glyphs/StarOutline.svg",
                  className: r$.action,
                  onSelect: m,
                  onMouseDown: r ? m$ : undefined
                })
              })]
            })]
          })
        })
      });
    };
    const d$ = ({
      value: e,
      favorite: t,
      onSelect: n,
      onChangeFavorite: s
    }) => {
      const i = PA(n, e);
      0;
      const a = Y.useMemo(() => null != s ? () => s(e, !t) : null, [t, e, s]);
      0;
      0;
      return z.jsxs("div", {
        className: r$.item,
        children: [z.jsx("div", {
          className: r$.value,
          onMouseDown: m$,
          onClick: i,
          children: e
        }), null != a && (0, z.jsx)("div", {
          className: r$.favoriteAction,
          onMouseDown: m$,
          onClick: a,
          children: (0, z.jsx)(W_, {
            src: t ? "Media/Glyphs/StarFilled.svg" : "Media/Glyphs/StarOutline.svg",
            className: r$.favoriteIcon
          })
        })]
      });
    };
    function m$(e) {
      e.preventDefault();
    }
    X.add("game-ui/editor/widgets/search-field/popup-search-field.tsx", {
      get BoundPopupSearchField() {
        return c$;
      },
      set BoundPopupSearchField(e) {
        c$ = e;
      },
      get PopupSearchField() {
        return u$;
      },
      set PopupSearchField(e) {
        u$ = e;
      }
    });
    var h$ = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(BA, sM(e, t));
      0;
      return z.jsx(g$, {
        value: n.value,
        onChange: s
      });
    };
    var g$ = ({
      value: e,
      onChange: t
    }) => {
      const n = km();
      0;
      const s = Y.useCallback(e => t(e.target.value || ""), [t]);
      0;
      const i = Y.useCallback(() => t(""), [t]);
      0;
      0;
      0;
      return z.jsxs("div", {
        className: r$.searchField,
        children: [z.jsx(zE, {
          value: e,
          placeholder: z.jsx(Pc.Editor.SEARCH_PLACEHOLDER, {}),
          className: r$.input,
          onChange: s
        }), !n && e && (0, z.jsx)("div", {
          className: r$.actions,
          children: (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.Common.CLEAR_SEARCH_TOOLTIP, {}),
            children: (0, z.jsx)($_, {
              tinted: true,
              focusKey: Eg,
              src: "Media/Glyphs/Clear.svg",
              className: r$.action,
              onSelect: i,
              onMouseDown: p$
            })
          })
        })]
      });
    };
    function p$(e) {
      e.preventDefault();
    }
    X.add("game-ui/editor/widgets/search-field/search-field.tsx", {
      get BoundSearchField() {
        return h$;
      },
      set BoundSearchField(e) {
        h$ = e;
      },
      get SearchField() {
        return g$;
      },
      set SearchField(e) {
        g$ = e;
      }
    });
    let f$ = {
      toggle: "toggle_GUy",
      checkmark: "checkmark_Bc3"
    };
    X.add("game-ui/editor/themes/editor-small-checkbox.module.scss", {
      get classes() {
        return f$;
      },
      set classes(e) {
        Object.assign(f$, e);
      }
    });
    let v$ = {
      "editor-section": "editor-section_zoX",
      editorSection: "editor-section_zoX",
      header: "header_MLk",
      primary: "primary_j00",
      toggle: "toggle_XlP",
      action: "action_T_m",
      icon: "icon_v5n",
      label: "label_OqN",
      "action-checkbox": "action-checkbox_Z8G",
      actionCheckbox: "action-checkbox_Z8G",
      content: "content_yUv"
    };
    X.add("game-ui/editor/widgets/section/editor-section.module.scss", {
      get classes() {
        return v$;
      },
      set classes(e) {
        Object.assign(v$, e);
      }
    });
    var b$ = ({
      parent: e,
      path: t,
      props: n,
      children: s
    }) => {
      const i = sM(e, t);
      0;
      const a = Y.useContext(hM);
      const o = PA(ED, i);
      const r = PA(GA, i);
      const l = PA(ID, i);
      0;
      0;
      0;
      return z.jsx(E$, {
        title: z.jsx(hu, {
          value: n.displayName
        }),
        tooltip: n.tooltip,
        active: n.active,
        primary: n.primary,
        headerColor: null != n.color ? tN(n.color) : undefined,
        expanded: n.expanded,
        onDelete: n.deletable ? o : undefined,
        onActiveChange: n.activatable ? l : undefined,
        onExpandedChange: n.expandable ? r : undefined,
        disabled: n.disabled,
        children: z.jsx(mM, {
          parent: i,
          components: a,
          data: s
        })
      });
    };
    var T$ = e => {
      0;
      const [t, n] = Y.useState(true);
      0;
      return z.jsx(E$, {
        ...e,
        expanded: t,
        onExpandedChange: n
      });
    };
    var E$ = ({
      title: e,
      active: t = true,
      primary: n,
      headerColor: s,
      expanded: i,
      className: a,
      tooltip: o,
      children: r,
      onDelete: l,
      onActiveChange: c,
      onExpandedChange: u,
      disabled: d
    }) => {
      0;
      const m = Y.useCallback(() => {
        if (null != u) {
          u(!i);
        }
      }, [i, u]);
      0;
      const h = Y.useCallback(() => {
        if (null != c) {
          c(!t);
        }
      }, [t, c]);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(v$.editorSection, n && v$.primary, a),
        children: [z.jsx("div", {
          className: v$.header,
          style: {
            backgroundColor: s
          },
          children: z.jsx(bg, {
            tooltip: o && (0, z.jsx)(hu, {
              value: o
            }),
            children: z.jsxs(ep, {
              direction: Mg.Horizontal,
              children: [null != u ? (0, z.jsx)(RI, {
                src: i ? "Media/Glyphs/ThickStrokeArrowDown.svg" : "Media/Glyphs/ThickStrokeArrowRight.svg",
                theme: v$,
                className: v$.toggle,
                onSelect: m,
                children: e
              }) : (0, z.jsx)(RI, {
                src: "Media/Glyphs/Circle.svg",
                theme: v$,
                className: v$.toggle,
                disabled: true,
                children: e
              }), l && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Common.DELETE_TOOLTIP, {}),
                children: (0, z.jsx)($_, {
                  tinted: true,
                  src: "Media/Glyphs/Trash.svg",
                  className: v$.action,
                  onSelect: l,
                  disabled: d
                })
              }), c && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Editor.ACTIVE_TOOLTIP, {}),
                children: (0, z.jsx)(L_, {
                  className: v$.action,
                  onSelect: h,
                  disabled: d,
                  children: (0, z.jsx)(kb, {
                    focusKey: Eg,
                    checked: t,
                    theme: f$,
                    className: v$.actionCheckbox,
                    onChange: c,
                    disabled: d
                  })
                })
              })]
            })
          })
        }), null != u && i && (0, z.jsx)("div", {
          className: v$.content,
          children: r
        })]
      });
    };
    X.add("game-ui/editor/widgets/section/editor-section.tsx", {
      get BoundEditorSection() {
        return b$;
      },
      set BoundEditorSection(e) {
        b$ = e;
      },
      get EditorSection() {
        return T$;
      },
      set EditorSection(e) {
        T$ = e;
      },
      get EditorSectionBase() {
        return E$;
      },
      set EditorSectionBase(e) {
        E$ = e;
      }
    });
    let I$ = {
      chart: "chart_SQk"
    };
    X.add("game-ui/editor/widgets/time-of-day-weights-chart/time-of-day-weights-chart.module.scss", {
      get classes() {
        return I$;
      },
      set classes(e) {
        Object.assign(I$, e);
      }
    });
    var S$ = ({
      props: e
    }) => {
      0;
      const t = Y.useMemo(() => ({
        datasets: [{
          data: [e.value.x, e.value.y, e.value.z, e.value.w, e.value.x]
        }]
      }), [e.value.x, e.value.y, e.value.z, e.value.w]);
      const n = function () {
        const e = sl(Ml);
        0;
        return Y.useMemo(() => ({
          layout: {
            padding: {
              top: 8,
              right: 8,
              bottom: 0,
              left: 8
            }
          },
          elements: {
            line: {
              fill: true,
              tension: 0,
              borderWidth: 2,
              borderColor: "#ffb543",
              backgroundColor: "rgba(255, 181, 67, 0.3)"
            },
            point: {
              radius: 4,
              backgroundColor: "#ffb543"
            }
          },
          scales: {
            y: {
              display: false,
              min: 0,
              suggestedMax: 1,
              labels: [],
              grid: {
                color: "rgba(255, 255, 255, 0.5)",
                lineWidth: e => 0 === e.tick.value ? 2 : 1
              }
            },
            x: {
              labels: ["00", "06", "12", "18", "00"],
              grid: {
                color: "rgba(255, 255, 255, 0.4)",
                borderColor: "rgba(255, 255, 255, 0.4)",
                lineWidth: 1,
                borderWidth: 1
              },
              ticks: {
                font: {
                  size: 14 * e,
                  weight: "bold"
                },
                color: "rgba(255, 255, 255, 0.6)",
                padding: 0,
                autoSkip: false
              },
              beginAtZero: true
            }
          }
        }), [e]);
      }();
      0;
      0;
      return z.jsx(JD, {
        children: z.jsx(BR, {
          type: "line",
          data: t,
          options: n,
          className: I$.chart
        })
      });
    };
    X.add("game-ui/editor/widgets/time-of-day-weights-chart/time-of-day-weights-chart.tsx", {
      get TimeOfDayWeightsChart() {
        return S$;
      },
      set TimeOfDayWeightsChart(e) {
        S$ = e;
      }
    });
    var j$ = ({
      parent: e,
      data: t
    }) => (0, z.jsx)(mM, {
      parent: e,
      components: C$,
      data: t
    });
    var C$ = {
      [AA.Column]: XF,
      [AA.Row]: t$,
      [AA.Scrollable]: a$,
      [AA.PageView]: XY,
      [AA.PageLayout]: GY,
      [uD.ItemPicker]: uY,
      [uD.ItemPickerFooter]: pY,
      [uD.SearchField]: h$,
      [uD.PopupSearchField]: c$,
      [AA.Divider]: iU,
      [AA.Button]: dF,
      [AA.ButtonRow]: mF,
      [AA.IconButton]: zD,
      [AA.IconButtonGroup]: YD,
      [AA.Group]: tV,
      [AA.ExpandableGroup]: nV,
      [AA.PagedList]: _Y,
      [AA.ValueField]: ({
        props: e
      }) => (0, z.jsx)(eF, {
        children: (0, z.jsxs)("div", {
          style: {
            color: "red",
            whiteSpace: "pre",
            fontSize: "12px"
          },
          children: [(0, z.jsx)(hu, {
            value: e.displayName
          }), e.value]
        })
      }),
      [AA.ToggleField]: N$(CK),
      [AA.IntInputField]: N$(JH),
      [AA.IntSliderField]: N$(AV),
      [AA.UIntInputField]: N$(tK),
      [AA.UIntSliderField]: N$(MV),
      [AA.TimeBoundsSliderField]: N$(zV),
      [AA.Int2InputField]: N$(nK),
      [AA.Int3InputField]: N$(sK),
      [AA.Int4InputField]: N$(iK),
      [AA.FloatInputField]: N$(gV),
      [AA.FloatSliderField]: N$(RV),
      [AA.RangedSliderField]: N$(dK),
      [AA.GradientSliderField]: N$(ZH),
      [AA.TimeSliderField]: N$(BV),
      [AA.Float2InputField]: N$(fV),
      [AA.Float3InputField]: N$(xV),
      [AA.EulerAnglesField]: N$(xV),
      [AA.Float4InputField]: N$(vV),
      [AA.StringInputField]: yF,
      [AA.Bounds1SliderField]: N$(WV),
      [AA.Bounds1InputField]: N$(VV),
      [AA.Bounds2InputField]: N$(HV),
      [AA.Bounds3InputField]: N$(KV),
      [AA.ColorField]: N$(RH),
      [AA.Bezier4x3Field]: N$(jV),
      [AA.EnumField]: WH,
      [AA.FlagsField]: zH,
      [AA.DropdownField]: bF,
      [AA.AnimationCurveField]: SV,
      [AA.PopupValueField]: cK,
      [AA.DirectoryPickerButton]: BH,
      [AA.ImageField]: JK,
      [AA.LocalizedValueField]: NK,
      [AA.Label]: DF,
      [uD.EditorSection]: b$,
      [uD.Compass]: eU,
      [uD.TimeOfDayWeightsChart]: S$,
      [uD.LocalizationField]: kY,
      [uD.FilterMenu]: LK,
      [uD.HierarchyMenu]: YK,
      [uD.SeasonsField]: jK,
      [uD.ModdingBetaBanner]: lD,
      [uD.ErrorLabel]: AF,
      [uD.StringInputFieldWithError]: RF,
      [uD.ExternalLinkField]: OF,
      [uD.ProgressIndicator]: KF,
      [uD.LargeIconButton]: kF,
      [uD.ListField]: oF
    };
    function N$(e) {
      const t = ({
        parent: t,
        path: n,
        props: s
      }) => {
        const i = PA(BA, sM(t, n));
        0;
        0;
        return z.jsx(e, {
          ...s,
          label: z.jsx(hu, {
            value: s.displayName
          }),
          onChange: i
        });
      };
      t.displayName = e.displayName ?? e.name;
      return t;
    }
    X.add("game-ui/editor/widgets/editor-widget-renderer.tsx", {
      get EditorWidgetListRenderer() {
        return j$;
      },
      set EditorWidgetListRenderer(e) {
        j$ = e;
      },
      get editorWidgetComponents() {
        return C$;
      },
      set editorWidgetComponents(e) {
        C$ = e;
      }
    });
    var w$ = ({
      titleId: e,
      messageId: t,
      options: n
    }) => {
      const s = ac();
      const i = FH(s.translate(t, t) || "");
      0;
      0;
      0;
      return z.jsx(SI, {
        onClose: undefined,
        children: z.jsxs(ep, {
          children: [e && (0, z.jsx)("div", {
            className: II.title,
            children: (0, z.jsx)(Tc, {
              id: e,
              fallback: e
            })
          }), t && (0, z.jsx)(bb, {
            children: i
          }), z.jsx("div", {
            className: II.buttonColumn,
            children: n.map((e, t) => (0, z.jsx)(O$, {
              id: e.id,
              index: t
            }, t))
          })]
        })
      });
    };
    const O$ = ({
      id: e,
      index: t
    }) => {
      0;
      const n = Y.useCallback(() => cI(t), [t]);
      0;
      0;
      return z.jsx(L_, {
        theme: UE,
        onSelect: n,
        children: z.jsx(Tc, {
          id: e,
          fallback: e
        })
      }, e);
    };
    X.add("game-ui/menu/components/paradox/dialogs/multi-option-dialog.tsx", {
      get MultiOptionDialog() {
        return w$;
      },
      set MultiOptionDialog(e) {
        w$ = e;
      }
    });
    var P$ = e => (0, z.jsxs)(jI, {
      ...e,
      children: [(0, z.jsxs)("div", {
        className: II.buttonRow,
        children: [(0, z.jsx)(L_, {
          theme: GE,
          onSelect: TI,
          children: (0, z.jsx)(Pc.Paradox.TERMS_OF_USE, {})
        }), (0, z.jsx)(L_, {
          theme: GE,
          onSelect: EI,
          children: (0, z.jsx)(Pc.Paradox.PRIVACY_POLICY, {})
        })]
      }), (0, z.jsxs)("div", {
        className: II.buttonRow,
        children: [(0, z.jsx)(L_, {
          theme: UE,
          onSelect: vI,
          children: (0, z.jsx)(Pc.Paradox.LINK_ACCOUNT_BUTTON, {})
        }), (0, z.jsx)(L_, {
          theme: GE,
          onSelect: lI,
          children: (0, z.jsx)(Pc.Paradox.SKIP_BUTTON, {})
        })]
      })]
    });
    X.add("game-ui/menu/components/paradox/dialogs/account-link-dialog.tsx", {
      get AccountLinkDialog() {
        return P$;
      },
      set AccountLinkDialog(e) {
        P$ = e;
      }
    });
    var L$ = e => (0, z.jsx)(jI, {
      ...e,
      children: (0, z.jsxs)("div", {
        className: II.buttonRow,
        children: [(0, z.jsx)(L_, {
          theme: UE,
          onSelect: _I,
          children: (0, z.jsx)(Pc.Common.YES, {})
        }), (0, z.jsx)(L_, {
          theme: GE,
          onSelect: lI,
          children: (0, z.jsx)(Pc.Common.NO, {})
        })]
      })
    });
    X.add("game-ui/menu/components/paradox/dialogs/account-link-overwrite-dialog.tsx", {
      get AccountLinkOverwriteDialog() {
        return L$;
      },
      set AccountLinkOverwriteDialog(e) {
        L$ = e;
      }
    });
    var A$ = e => (0, z.jsx)(jI, {
      ...e,
      children: (0, z.jsx)("div", {
        className: II.buttonRow,
        children: (0, z.jsx)(L_, {
          theme: UE,
          onSelect: lI,
          children: (0, z.jsx)(Pc.Common.OK, {})
        })
      })
    });
    X.add("game-ui/menu/components/paradox/dialogs/confirmation-dialog.tsx", {
      get ConfirmationDialog() {
        return A$;
      },
      set ConfirmationDialog(e) {
        A$ = e;
      }
    });
    var M$ = ({
      messageId: e,
      message: t
    }) => {
      0;
      const n = oc(z.jsx(Pc.Paradox.UNKNOWN_ERROR, {}));
      0;
      0;
      0;
      0;
      return z.jsxs(SI, {
        onClose: lI,
        children: [null != e && (0, z.jsx)("p", {
          children: (0, z.jsx)(Tc, {
            id: e,
            fallback: n
          })
        }), null != t && (0, z.jsx)("p", {
          children: t
        }), null == e && null == t && (0, z.jsx)("p", {
          children: n
        }), z.jsx("div", {
          className: II.buttonRow,
          children: z.jsx(L_, {
            theme: UE,
            onSelect: lI,
            children: z.jsx(Pc.Common.CLOSE, {})
          })
        })]
      });
    };
    X.add("game-ui/menu/components/paradox/dialogs/error-dialog.tsx", {
      get ErrorDialog() {
        return M$;
      },
      set ErrorDialog(e) {
        M$ = e;
      }
    });
    var R$;
    var k$ = ({
      text: e,
      agreementRequired: t,
      confirmLabel: n
    }) => {
      const s = kE();
      const i = By();
      0;
      Y.useEffect(() => s.scrollTo(0, 0), [s, e]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(SI, {
        wide: true,
        onClose: t ? undefined : lI,
        children: z.jsx(HE, {
          controller: s,
          children: z.jsxs(ep, {
            initialFocused: "ok",
            children: [z.jsx(ob, {
              controller: s,
              className: II.documentScrollable,
              trackVisibility: "always",
              hintClassName: II.scrollHint,
              labelClassName: II.scrollHintLabel,
              focusableItems: true,
              children: z.jsx("div", {
                className: II.documentText,
                children: z.jsx(bb, {
                  renderer: i,
                  onLinkSelect: fI,
                  children: e
                })
              })
            }), z.jsx("div", {
              className: II.buttonRow,
              children: z.jsx(L_, {
                focusKey: "ok",
                theme: UE,
                onSelect: t ? bI : lI,
                children: null != n ? (0, z.jsx)(Tc, {
                  id: n
                }) : (0, z.jsx)(Pc.Common.OK, {})
              })
            })]
          })
        })
      });
    };
    function D$(e) {
      return /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(e);
    }
    function F$(e) {
      return e.replace(/[<>:;,?"*|/\\]/g, "");
    }
    function U$(e) {
      return !Vr(e) && /^[^<>:;,?"*|/\\]+$/g.test(e);
    }
    X.add("game-ui/menu/components/paradox/dialogs/legal-document-dialog.tsx", {
      get LegalDocumentDialog() {
        return k$;
      },
      set LegalDocumentDialog(e) {
        k$ = e;
      }
    });
    X.add("game-ui/common/utils/validation.ts", {
      get validateEmailAddress() {
        return D$;
      },
      set validateEmailAddress(e) {
        D$ = e;
      },
      get sanitizeFileName() {
        return F$;
      },
      set sanitizeFileName(e) {
        F$ = e;
      },
      get validateFileName() {
        return U$;
      },
      set validateFileName(e) {
        U$ = e;
      }
    });
    (function (e) {
      e[e.None = 0] = "None";
      e[e.ForgotPassword = 1] = "ForgotPassword";
      e[e.Login = 2] = "Login";
    })(R$ || (R$ = {}));
    var B$ = () => {
      0;
      const [e, t] = Y.useState("");
      const n = !D$(e);
      0;
      const [s, i] = Y.useState("");
      const a = 0 === s.length;
      0;
      const [o, r] = Y.useState(R$.None);
      0;
      const l = Y.useCallback(() => {
        if (n || a) {
          r(R$.Login);
        } else {
          r(R$.None);
          mI({
            email: e,
            password: s
          });
        }
      }, [e, n, s, a]);
      0;
      const c = Y.useCallback(() => {
        if (n) {
          r(R$.ForgotPassword);
        } else {
          r(R$.None);
          dI(e);
        }
      }, [e, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(SI, {
        onClose: lI,
        children: z.jsx("div", {
          className: II.formContainer,
          children: z.jsxs(ep, {
            children: [z.jsx("div", {
              className: II.iconRow,
              children: z.jsx("img", {
                src: "Media/Menu/Paradox/ParadoxLogoNoText.svg",
                className: II.icon
              })
            }), z.jsx("div", {
              className: II.title,
              children: z.jsx(Pc.Paradox.LOGIN_FORM_TITLE, {})
            }), z.jsx(CI, {
              type: "email",
              value: e,
              placeholder: z.jsx(Pc.Paradox.EMAIL_FIELD_LABEL, {}),
              vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                hash: "ParadoxAccountEmail"
              }),
              invalid: o !== R$.None && n,
              onChange: t,
              className: Qu()(II.formRow, II.flexRow, II.lightField)
            }), z.jsx(CI, {
              type: "password",
              placeholder: z.jsx(Pc.Paradox.PASSWORD_FIELD_LABEL, {}),
              vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                hash: "ParadoxAccountPassword"
              }),
              value: s,
              invalid: o === R$.Login && a,
              onChange: i,
              className: Qu()(II.formRow, II.flexRow, II.lightField),
              children: z.jsx(L_, {
                onSelect: c,
                className: II.forgotPasswordLink,
                children: z.jsx(Pc.Paradox.FORGOT_PASSWORD_LINK, {})
              })
            }), z.jsx(Ep, {
              className: II.buttonRow,
              style: {
                justifyContent: "flex-end"
              },
              children: z.jsx(L_, {
                theme: UE,
                onSelect: l,
                children: z.jsx(Pc.Paradox.LOGIN_BUTTON, {})
              })
            }), z.jsx("div", {
              className: II.divider
            }), z.jsxs("div", {
              className: II.buttonRow,
              children: [z.jsx("div", {
                className: II.registrationHint,
                children: z.jsx(Pc.Paradox.REGISTRATION_HINT, {})
              }), z.jsx(L_, {
                theme: GE,
                onSelect: pI,
                children: z.jsx(Pc.Paradox.REGISTRATION_FROM_LOGIN_LINK, {})
              })]
            })]
          })
        })
      });
    };
    function G$(e, t) {
      return new Date(t, e, 0).getDate();
    }
    function V$(e, t, n) {
      return `${bu(e, 4)}-${bu(t, 2)}-${bu(n, 2)}`;
    }
    X.add("game-ui/menu/components/paradox/dialogs/login-dialog.tsx", {
      get LoginDialog() {
        return B$;
      },
      set LoginDialog(e) {
        B$ = e;
      }
    });
    X.add("game-ui/common/utils/date.ts", {
      get getDaysInMonth() {
        return G$;
      },
      set getDaysInMonth(e) {
        G$ = e;
      },
      get formatIso8601Date() {
        return V$;
      },
      set formatIso8601Date(e) {
        V$ = e;
      }
    });
    let H$ = {
      "dropdown-toggle": "dropdown-toggle_th2 dropdown-toggle_prl",
      dropdownToggle: "dropdown-toggle_th2 dropdown-toggle_prl",
      invalid: "invalid_rQd",
      label: "label_Mje label_l_4",
      indicator: "indicator_Iwz",
      "dropdown-menu": "dropdown-menu_uEW dropdown-menu_Swd",
      dropdownMenu: "dropdown-menu_uEW dropdown-menu_Swd",
      scrollable: "scrollable_NAI undefined",
      "dropdown-item": "dropdown-item_IIB undefined",
      dropdownItem: "dropdown-item_IIB undefined"
    };
    X.add("game-ui/menu/components/paradox/dialogs/paradox-dropdown.module.scss", {
      get classes() {
        return H$;
      },
      set classes(e) {
        Object.assign(H$, e);
      }
    });
    const W$ = new Tg("COUNTRY_KEY");
    const z$ = new Tg("DAY_KEY");
    const Y$ = new Tg("MONTH_KEY");
    const $$ = new Tg("YEAR_KEY");
    var q$ = () => {
      0;
      const [e, t] = Y.useState("");
      const n = !D$(e);
      0;
      const [s, i] = Y.useState("");
      const a = 0 === s.length;
      const o = sl(gI);
      0;
      const [r, l] = Y.useState(null);
      0;
      const [c, u] = Y.useState(null);
      0;
      const [d, m] = Y.useState(null);
      0;
      const [h, g] = Y.useState(null);
      const p = null != d && null != c ? G$(d, c) : 31;
      const f = Math.min(new Date().getFullYear(), 2020);
      0;
      Y.useEffect(() => {
        if (null != h && h > p) {
          g(null);
        }
      }, [h, p]);
      0;
      const [x, v] = Y.useState(false);
      0;
      const [_, b] = Y.useState(false);
      0;
      const T = Y.useCallback(() => {
        if (n || a || null == r || null == c || null == d || null == h) {
          return void b(true);
        }
        b(false);
        const t = V$(c ?? 0, d, h);
        xI({
          email: e,
          password: s,
          country: r,
          dateOfBirth: t,
          marketingPermission: x
        });
      }, [n, a, c, d, h, e, s, r, x]);
      0;
      const [E, I] = Y.useState(null);
      0;
      const [y, S] = Y.useState(r);
      0;
      const [j, C] = Y.useState(null);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(SI, {
        onClose: lI,
        children: z.jsx("div", {
          className: II.formContainer,
          children: z.jsxs(ep, {
            onChange: I,
            children: [z.jsx("div", {
              className: II.iconRow,
              children: z.jsx("img", {
                src: "Media/Menu/Paradox/ParadoxLogoNoText.svg",
                className: II.icon
              })
            }), z.jsx("div", {
              className: II.title,
              children: z.jsx(Pc.Paradox.REGISTRATION_FORM_TITLE, {})
            }), z.jsx(CI, {
              value: e,
              placeholder: z.jsx(Pc.Paradox.EMAIL_FIELD_LABEL, {}),
              onChange: t,
              vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                hash: "ParadoxAccountEmail"
              }),
              invalid: _ && n,
              className: Qu()(II.formRow, II.flexRow, II.darkField)
            }), z.jsx(CI, {
              type: "password",
              value: s,
              placeholder: z.jsx(Pc.Paradox.PASSWORD_FIELD_LABEL, {}),
              onChange: i,
              vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                hash: "ParadoxAccountPassword"
              }),
              invalid: _ && a,
              className: Qu()(II.formRow, II.flexRow, II.darkField)
            }), z.jsx(Ep, {
              focusKey: W$,
              className: Qu()(II.formRow, II.darkField),
              children: z.jsx(ny, {
                theme: H$,
                initialFocused: r,
                content: z.jsx(ep, {
                  initialFocused: r,
                  onChange: S,
                  allowLooping: true,
                  children: o.map((e, t) => (0, z.jsxs)(oy, {
                    focusKey: e,
                    value: e,
                    onChange: l,
                    children: [(0, z.jsx)(LT, {
                      action: "Select",
                      active: E === W$ && y === e,
                      className: II.hint
                    }), (0, z.jsx)(Pc.ISO.COUNTRY, {
                      hash: e
                    })]
                  }, t))
                }),
                onToggle: () => C(W$),
                children: z.jsx(sy, {
                  openIconComponent: z.jsx(LT, {
                    action: "Select",
                    active: E === W$ && j !== W$,
                    className: II.hint
                  }),
                  closeIconComponent: z.jsx(LT, {
                    action: "Back",
                    active: E === W$ && j === W$,
                    className: II.hint
                  }),
                  className: Qu()(_ && null == r && H$.invalid),
                  children: null == r ? (0, z.jsx)(Pc.Paradox.COUNTRY_FIELD_LABEL, {}) : (0, z.jsx)(Pc.ISO.COUNTRY, {
                    hash: r
                  })
                })
              })
            }), z.jsxs("div", {
              className: II.formRow,
              children: [z.jsx("div", {
                className: II.formRowLabel,
                children: z.jsx(Pc.Paradox.BIRTH_DATE_FIELD_LABEL, {})
              }), z.jsx(Ep, {
                className: II.flexRow,
                children: z.jsxs(ep, {
                  onChange: I,
                  direction: Mg.Horizontal,
                  children: [z.jsx("div", {
                    className: Qu()(II.yearField, II.darkField),
                    children: z.jsx(ny, {
                      focusKey: $$,
                      initialFocused: c,
                      theme: H$,
                      content: z.jsx(ep, {
                        onChange: S,
                        allowLooping: true,
                        children: [...Array(f - 1901).keys()].map((e, t) => (0, z.jsxs)(oy, {
                          focusKey: f - e,
                          value: f - e,
                          onChange: u,
                          children: [(0, z.jsx)(LT, {
                            action: "Select",
                            active: E === $$ && y === f - e,
                            className: II.hint
                          }), _u(f - e)]
                        }, t))
                      }),
                      onToggle: () => C($$),
                      children: z.jsx(sy, {
                        openIconComponent: z.jsx(LT, {
                          action: "Select",
                          active: E === $$ && j !== $$,
                          className: II.hint
                        }),
                        closeIconComponent: z.jsx(LT, {
                          action: "Back",
                          active: E === $$ && j === $$,
                          className: II.hint
                        }),
                        className: Qu()(_ && null == c && H$.invalid),
                        children: null == c ? (0, z.jsx)(Pc.Paradox.BIRTH_DATE_YEAR_FIELD_LABEL, {}) : _u(c)
                      })
                    })
                  }), z.jsx("div", {
                    className: Qu()(II.monthField, II.darkField),
                    children: z.jsx(ny, {
                      focusKey: Y$,
                      initialFocused: d,
                      theme: H$,
                      content: z.jsx(ep, {
                        onChange: S,
                        allowLooping: true,
                        children: [...Array(12).keys()].map((e, t) => (0, z.jsxs)(oy, {
                          focusKey: e + 1,
                          value: e + 1,
                          onChange: m,
                          children: [(0, z.jsx)(LT, {
                            action: "Select",
                            active: E === Y$ && y === e + 1,
                            className: II.hint
                          }), (0, z.jsx)(Pc.Common.MONTH, {
                            index: e
                          })]
                        }, t))
                      }),
                      onToggle: () => C(Y$),
                      children: z.jsx(sy, {
                        openIconComponent: z.jsx(LT, {
                          action: "Select",
                          active: E === Y$ && j !== Y$,
                          className: II.hint
                        }),
                        closeIconComponent: z.jsx(LT, {
                          action: "Back",
                          active: E === Y$ && j === Y$,
                          className: II.hint
                        }),
                        className: Qu()(_ && null == d && H$.invalid),
                        children: null == d ? (0, z.jsx)(Pc.Paradox.BIRTH_DATE_MONTH_FIELD_LABEL, {}) : (0, z.jsx)(Pc.Common.MONTH, {
                          index: d - 1
                        })
                      })
                    })
                  }), z.jsx("div", {
                    className: Qu()(II.dayField, II.darkField),
                    children: z.jsx(ny, {
                      focusKey: z$,
                      initialFocused: h,
                      theme: H$,
                      content: z.jsx(ep, {
                        onChange: S,
                        allowLooping: true,
                        children: [...Array(p).keys()].map((e, t) => (0, z.jsxs)(oy, {
                          focusKey: e + 1,
                          value: e + 1,
                          onChange: g,
                          children: [(0, z.jsx)(LT, {
                            action: "Select",
                            active: E === z$ && y === e + 1,
                            className: II.hint
                          }), _u(e + 1)]
                        }, t))
                      }),
                      onToggle: () => C(z$),
                      children: z.jsx(sy, {
                        openIconComponent: z.jsx(LT, {
                          action: "Select",
                          active: E === z$ && j !== z$,
                          className: II.hint
                        }),
                        closeIconComponent: z.jsx(LT, {
                          action: "Back",
                          active: E === z$ && j === z$,
                          className: II.hint
                        }),
                        className: Qu()(_ && null == h && H$.invalid),
                        children: null == h ? (0, z.jsx)(Pc.Paradox.BIRTH_DATE_DAY_FIELD_LABEL, {}) : _u(h)
                      })
                    })
                  })]
                })
              })]
            }), z.jsx("div", {
              children: z.jsx(NI, {
                value: x,
                label: z.jsx(Pc.Paradox.MARKETING_PERMISSION_TOGGLE_LABEL, {}),
                onChange: v
              })
            }), z.jsxs(Ep, {
              activation: $u.AnyChildren,
              children: [z.jsx(bb, {}), z.jsx(pb, {
                text: z.jsx(Pc.Paradox.TERMS_PRIVACY_NOTICE, {}),
                className: II.terms,
                onLinkSelect: fI
              })]
            }), z.jsx("div", {
              className: II.buttonRow,
              children: z.jsx(L_, {
                theme: UE,
                onSelect: T,
                children: z.jsx(Pc.Paradox.SUBMIT_REGISTRATION_BUTTON, {})
              })
            }), z.jsx("div", {
              className: II.divider
            }), z.jsx("div", {
              className: II.buttonRow,
              children: z.jsx(L_, {
                theme: GE,
                onSelect: uI,
                children: z.jsx(Pc.Paradox.LOGIN_FROM_REGISTRATION_LINK, {})
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/menu/components/paradox/dialogs/registration-dialog.tsx", {
      get RegistrationDialog() {
        return q$;
      },
      set RegistrationDialog(e) {
        q$ = e;
      }
    });
    let X$ = {
      "loading-overlay": "loading-overlay_ica",
      loadingOverlay: "loading-overlay_ica",
      disabled: "disabled_AdS"
    };
    X.add("game-ui/menu/components/paradox/paradox-dialog-renderer.module.scss", {
      get classes() {
        return X$;
      },
      set classes(e) {
        Object.assign(X$, e);
      }
    });
    const Z$ = new Tg("CHILDREN");
    const J$ = {
      [oI.Login]: B$,
      [oI.Registration]: q$,
      [oI.AccountLink]: P$,
      [oI.AccountLinkOverwrite]: L$,
      [oI.LegalDocument]: k$,
      [oI.Confirmation]: A$,
      [oI.Error]: M$,
      [oI.MultiOption]: w$
    };
    var eq = ({
      children: e
    }) => {
      const t = sl($E);
      const n = tq();
      let s;
      s = t ? null : n.length > 0 ? n.length - 1 : Z$;
      0;
      0;
      return z.jsxs(ip, {
        focused: s,
        children: [z.jsx(sp, {
          focusKey: Z$,
          children: e
        }), n.map((e, t) => (0, z.jsx)(sp, {
          focusKey: t,
          children: (0, z.jsx)(t_, {
            children: e
          })
        }, t)), t && (0, z.jsx)(nq, {})]
      });
    };
    var tq = () => {
      const e = sl(rI);
      0;
      return Y.useMemo(() => e.map(e => cM(J$, e, undefined)).filter(e => null != e), [e]);
    };
    const nq = () => (0, z.jsx)("div", {
      className: X$.loadingOverlay,
      children: (0, z.jsx)(Pc.Paradox.LOADING, {})
    });
    X.add("game-ui/menu/components/paradox/paradox-dialog-renderer.tsx", {
      get ParadoxDialogRenderer() {
        return eq;
      },
      set ParadoxDialogRenderer(e) {
        eq = e;
      },
      get useParadoxDialogs() {
        return tq;
      },
      set useParadoxDialogs(e) {
        tq = e;
      }
    });
    var iq = $r("assetUploadPanel", "children");
    var aq = $r("assetUploadPanel", "visible");
    var oq = Jr("assetUploadPanel", "close");
    X.add("game-ui/menu/data-binding/asset-upload-bindings.ts", {
      get assetUploadWidgets() {
        return assetUploadWidgets;
      },
      set assetUploadWidgets(e) {
        assetUploadWidgets = e;
      },
      get assetUploadPanelVisible() {
        return assetUploadPanelVisible;
      },
      set assetUploadPanelVisible(e) {
        assetUploadPanelVisible = e;
      },
      get closeAssetUploadPanel() {
        return closeAssetUploadPanel;
      },
      set closeAssetUploadPanel(e) {
        closeAssetUploadPanel = e;
      }
    });
    let rq = {
      panel: "panel_ezY"
    };
    X.add("game-ui/menu/components/asset-upload-panel/asset-upload-panel-renderer.module.scss", {
      get classes() {
        return rq;
      },
      set classes(e) {
        Object.assign(rq, e);
      }
    });
    const cq = new Tg("DIALOG");
    const uq = new Tg("CHILDREN");
    var dq = ({
      children: e
    }) => {
      const t = sl(aq);
      0;
      0;
      return z.jsxs(ip, {
        focused: t ? cq : uq,
        children: [z.jsx(sp, {
          focusKey: uq,
          children: e
        }), t && (0, z.jsx)(sp, {
          focusKey: cq,
          children: (0, z.jsx)(mq, {})
        })]
      });
    };
    const mq = () => (0, z.jsx)(Wm, {
      children: (0, z.jsx)(t_, {
        children: (0, z.jsx)(eq, {
          children: (0, z.jsx)(ZT, {
            theme: eE,
            className: rq.panel,
            onClose: oq,
            header: (0, z.jsx)(nE, {
              children: (0, z.jsx)(Pc.Menu.ASSET_UPLOAD, {})
            }),
            children: (0, z.jsx)(hq, {})
          })
        })
      })
    }, "AssetUploadPanel");
    const hq = () => {
      const e = nM("assetUploadPanel");
      const t = sl(iq);
      0;
      return z.jsx(j$, {
        parent: e,
        data: t
      });
    };
    X.add("game-ui/menu/components/asset-upload-panel/asset-upload-panel-renderer.tsx", {
      get AssetUploadPanelRenderer() {
        return dq;
      },
      set AssetUploadPanelRenderer(e) {
        dq = e;
      }
    });
    const gq = new Tg("DIALOG");
    const pq = new Tg("CHILDREN");
    const fq = new Tg("NO_KEY");
    var xq = ({
      children: e
    }) => {
      const t = sl(wl);
      const n = sl(Ol);
      0;
      0;
      return z.jsxs(ip, {
        focused: t ? gq : pq,
        children: [t && (0, z.jsx)(Wm, {
          children: (0, z.jsx)(t_, {
            children: (0, z.jsxs)(ZT, {
              focusKey: gq,
              theme: eE,
              className: sE.dialog,
              children: [(0, z.jsx)("div", {
                className: sE.message,
                children: (0, z.jsx)(Pc.Options.DISPLAY_SETTINGS_PROMPT, {})
              }), (0, z.jsx)("div", {
                className: sE.buttons,
                children: (0, z.jsxs)(ep, {
                  initialFocused: fq,
                  children: [(0, z.jsx)(L_, {
                    theme: DE,
                    className: sE.button,
                    onSelect: Ql,
                    children: (0, z.jsx)(Pc.Options.DISPLAY_SETTINGS_CONFIRM, {})
                  }), (0, z.jsx)(L_, {
                    focusKey: fq,
                    theme: DE,
                    className: Qu()(sE.button, DE.negative),
                    onSelect: Zl,
                    children: (0, z.jsx)(Pc.Options.DISPLAY_SETTINGS_REVERT, {
                      TIME: (0, z.jsx)(Gc, {
                        value: n,
                        unit: Oc.Integer
                      })
                    })
                  })]
                })
              })]
            })
          })
        }, "displayConfirmationDialog"), z.jsx(sp, {
          focusKey: pq,
          children: e
        })]
      });
    };
    X.add("game-ui/menu/components/options-screen/display-confirmation-dialog/display-confirmation-dialog.tsx", {
      get DisplayConfirmationDialogRenderer() {
        return xq;
      },
      set DisplayConfirmationDialogRenderer(e) {
        xq = e;
      }
    });
    var _q = $r("inputRebinding", "activeRebinding");
    var bq = $r("inputRebinding", "activeConflict");
    var Tq = Jr("inputRebinding", "cancelRebinding");
    var Eq = Jr("inputRebinding", "completeAndSwapConflicts");
    var Iq = Jr("inputRebinding", "completeAndUnsetConflicts");
    X.add("game-ui/menu/data-binding/input-rebinding-bindings.ts", {
      get activeRebinding() {
        return activeRebinding;
      },
      set activeRebinding(e) {
        activeRebinding = e;
      },
      get activeConflict() {
        return activeConflict;
      },
      set activeConflict(e) {
        activeConflict = e;
      },
      get cancelRebinding() {
        return Tq;
      },
      set cancelRebinding(e) {
        Tq = e;
      },
      get completeRebindAndSwapConflicts() {
        return Eq;
      },
      set completeRebindAndSwapConflicts(e) {
        Eq = e;
      },
      get completeRebindAndUnsetConflicts() {
        return Iq;
      },
      set completeRebindAndUnsetConflicts(e) {
        Iq = e;
      }
    });
    let yq = {
      divider: "divider_KxA",
      "conflict-group": "conflict-group_bSf",
      conflictGroup: "conflict-group_bSf",
      "conflict-title": "conflict-title_uNI",
      conflictTitle: "conflict-title_uNI",
      "conflict-item": "conflict-item_Nnu",
      conflictItem: "conflict-item_Nnu",
      "title-control-text": "title-control-text_tgr button_ehL",
      titleControlText: "title-control-text_tgr button_ehL",
      "message-keyboard": "message-keyboard_Ows",
      messageKeyboard: "message-keyboard_Ows",
      "first-p": "first-p_O8f",
      firstP: "first-p_O8f",
      "second-p": "second-p_RhP",
      secondP: "second-p_RhP",
      "message-gamepad": "message-gamepad_ZoB",
      messageGamepad: "message-gamepad_ZoB"
    };
    X.add("game-ui/menu/components/options-screen/input-rebinding-dialog/input-rebinding-dialog.module.scss", {
      get classes() {
        return yq;
      },
      set classes(e) {
        Object.assign(yq, e);
      }
    });
    const jq = {
      button: yq.titleControlText
    };
    const Cq = new Tg("CHILDREN_KEY");
    const Nq = new Tg("DIALOG_KEY");
    var wq = ({
      children: e
    }) => {
      const t = sl(_q);
      const n = sl(bq);
      const s = null != t && null == n;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(jp, {
          excludes: [],
          disabled: !s,
          children: z.jsxs(ip, {
            focused: null != t ? Nq : Cq,
            children: [z.jsx(sp, {
              focusKey: Cq,
              children: e
            }), null != t && (0, z.jsx)(Wm, {
              children: (0, z.jsx)(sp, {
                focusKey: Nq,
                children: null == n ? (0, z.jsx)(Oq, {
                  binding: t,
                  onClose: Tq
                }) : (0, z.jsx)(Aq, {
                  binding: n.binding,
                  conflicts: n.conflicts,
                  unsolved: n.unsolved,
                  onConfirmSwap: n.swap ? Eq : undefined,
                  onConfirmBatchSwap: n.batchSwap ? Eq : undefined,
                  onConfirmUnset: n.unset ? Iq : undefined,
                  onClose: Tq
                })
              })
            }, "inputRebindingDialog")]
          })
        })
      });
    };
    const Oq = ({
      binding: e,
      onClose: t
    }) => {
      const n = km();
      const s = _T();
      const i = Lq(n, s, e);
      const a = new lb((t, n, s) => {
        const i = {
          name: t,
          device: e.device
        };
        0;
        return z.jsx(ST, {
          bindings: [i],
          modifiers: [],
          theme: jq
        });
      });
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(t_, {
        children: z.jsx(kg, {
          disabled: n && "Gamepad" === e.device,
          onAction: t,
          children: z.jsx(ZT, {
            theme: eE,
            className: sE.dialog,
            header: z.jsx(nE, {
              onCloseOverride: "Mouse" !== e.device ? t : undefined,
              children: z.jsx(Pc.Options.INPUT_REBIND_TITLE, {
                BINDING: z.jsx(Tc, {
                  id: `Options.OPTION[${e.title}]`,
                  fallback: `Options.OPTION[${e.title}]`
                })
              })
            }),
            children: z.jsx(bb, {
              theme: sE,
              renderer: a,
              className: Qu()(sE.message, yq.secondP, "Gamepad" === e.device ? yq.messageGamepad : yq.messageKeyboard),
              children: i
            })
          })
        })
      });
    };
    const Pq = {
      LSP: "<leftStickPress>",
      RSP: "<rightStickPress>",
      SHIFT: "<shift>",
      ALT: "<alt>",
      CTRL: "<ctrl>"
    };
    const Lq = (e, t, n) => "Gamepad" !== n.device ? n.allowModifiers ? (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NEW, {
      hash: n.device,
      ...Pq
    }) : (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NO_MODIFIERS, {
      hash: n.device
    }) : e ? t === vm.PS ? n.allowModifiers ? (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NEW_PS, {
      hash: n.device,
      ...Pq
    }) : (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NO_MODIFIERS_PS, {
      hash: n.device
    }) : t === vm.Xbox ? n.allowModifiers ? (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NEW_XBOX, {
      hash: n.device,
      ...Pq
    }) : (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NO_MODIFIERS_XBOX, {
      hash: n.device
    }) : undefined : n.allowModifiers ? (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NEW, {
      hash: n.device,
      ...Pq
    }) : (0, z.jsx)(Pc.Options.INPUT_REBIND_PROMPT_NO_MODIFIERS, {
      hash: n.device
    });
    const Aq = ({
      binding: e,
      conflicts: t,
      unsolved: n,
      onConfirmSwap: s,
      onConfirmBatchSwap: i,
      onConfirmUnset: a,
      onClose: o
    }) => {
      0;
      const r = {
        BINDING: z.jsx(Pc.Options.OPTION, {
          hash: e.title,
          showIdOnFail: true
        }),
        CONTROL: "<CONTROL>"
      };
      const l = new lb((t, n, s) => (0, z.jsx)(ST, {
        bindings: [e.binding],
        modifiers: e.modifiers,
        shortName: Cp.FallbackToLong,
        theme: jq
      }));
      const c = t.reduce((e, t) => {
        const n = t.resolution.binding.name + t.resolution.modifiers.map(e => e.name).join() + t.binding.isRebindable;
        if (!e[n]) {
          e[n] = {
            canBeRebound: t.binding.isRebindable,
            binding: t.resolution.binding,
            modifiers: t.resolution.modifiers,
            group: t.resolution.device,
            conflicts: []
          };
        }
        e[n].conflicts.push(t.resolution);
        return e;
      }, {});
      const u = Object.values(c);
      const d = kE();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(t_, {
        children: z.jsx(kg, {
          onAction: o,
          children: z.jsx(HE, {
            controller: d,
            children: z.jsxs(ZT, {
              theme: eE,
              className: sE.dialog,
              header: z.jsx(nE, {
                children: z.jsx(Pc.Options.INPUT_CONFLICT_TITLE, {})
              }),
              onClose: Tq,
              children: [z.jsx(bb, {
                theme: sE,
                renderer: l,
                className: Qu()(sE.message, yq.firstP, "Gamepad" === e.device ? yq.messageGamepad : yq.messageKeyboard),
                children: n ? i ? (0, z.jsx)(Pc.Options.INPUT_CONFLICT_BATCH_NO_RESOLUTION, {
                  ...r
                }) : (0, z.jsx)(Pc.Options.INPUT_CONFLICT_NO_RESOLUTION, {
                  ...r
                }) : i ? (0, z.jsx)(Pc.Options.INPUT_CONFLICT_BATCH_RESOLUTION, {
                  ...r
                }) : (0, z.jsx)(Pc.Options.INPUT_CONFLICT_PROMPT, {
                  ...r
                })
              }), z.jsxs(ep, {
                initialFocused: "cancel",
                children: [z.jsx("div", {
                  className: sE.errorDetails,
                  style: {
                    flexDirection: "column"
                  },
                  children: z.jsx(ob, {
                    controller: d,
                    className: sE.content,
                    hintClassName: sE.scrollHint,
                    labelClassName: sE.scrollHintLabel,
                    children: u.map((e, t) => (0, z.jsxs)(Y.Fragment, {
                      children: [(0, z.jsxs)(Ep, {
                        className: yq.conflictGroup,
                        children: [i && (0, z.jsx)(bb, {
                          theme: sE,
                          renderer: new lb((t, n, s) => (0, z.jsx)(ST, {
                            bindings: [e.binding],
                            modifiers: e.modifiers,
                            shortName: Cp.FallbackToLong,
                            theme: jq
                          })),
                          className: Qu()(yq.conflictTitle, yq.firstP, "Gamepad" === e.binding.device ? yq.messageGamepad : yq.messageKeyboard),
                          children: e.binding.name ? e.canBeRebound ? n ? (0, z.jsx)(Pc.Options.BATCH_SWAP_GROUP_BLOCK_RESOLUTION, {
                            ...r
                          }) : (0, z.jsx)(Pc.Options.BATCH_SWAP_GROUP_RESOLUTION, {
                            ...r
                          }) : (0, z.jsx)(Pc.Options.BATCH_SWAP_GROUP_NO_RESOLUTION, {
                            ...r
                          }) : (0, z.jsx)(Pc.Options.BATCH_SWAP_GROUP_RESET_PROMT, {})
                        }), e.conflicts.map((e, n) => (0, z.jsxs)("div", {
                          className: yq.conflictItem,
                          children: [(0, z.jsx)("p", {
                            children: (0, z.jsx)(Pc.Options.INPUT_MAP, {
                              hash: e.optionGroup,
                              showIdOnFail: true
                            })
                          }), (0, z.jsx)("p", {
                            children: (0, z.jsx)(Pc.Options.OPTION, {
                              hash: e.title,
                              showIdOnFail: true
                            })
                          })]
                        }, `${t} ${n}`))]
                      }), t < u.length - 1 && (0, z.jsx)("div", {
                        className: yq.divider
                      })]
                    }, t))
                  })
                }), z.jsxs("div", {
                  className: sE.buttonsVertical,
                  children: [!n && s && (0, z.jsx)(L_, {
                    theme: DE,
                    className: sE.button,
                    onSelect: s,
                    children: (0, z.jsx)(Pc.Options.SWAP_BINDINGS, {})
                  }), !n && i && (0, z.jsx)(L_, {
                    theme: DE,
                    className: sE.button,
                    onSelect: i,
                    children: (0, z.jsx)(Pc.Options.BATCH_SWAP_BINDINGS, {})
                  }), !n && a && (0, z.jsx)(L_, {
                    theme: DE,
                    className: sE.button,
                    onSelect: a,
                    children: (0, z.jsx)(Pc.Options.UNSET_BINDINGS, {})
                  }), z.jsx(L_, {
                    focusKey: "cancel",
                    theme: DE,
                    className: Qu()(sE.button, DE.negative),
                    onSelect: o,
                    children: z.jsx(Pc.Common.CANCEL, {})
                  })]
                })]
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/menu/components/options-screen/input-rebinding-dialog/input-rebinding-dialog.tsx", {
      get InputRebindingDialogRenderer() {
        return wq;
      },
      set InputRebindingDialogRenderer(e) {
        wq = e;
      }
    });
    const Mq = ({
      children: e,
      activeUiClassName: t
    }) => {
      const n = sl(Pl);
      0;
      Y.useEffect(() => nk(n), [n]);
      const s = sl(Ll);
      0;
      Y.useEffect(() => sk(s), [s]);
      const i = sl(Ml);
      0;
      Y.useEffect(() => ak(i), [i]);
      const a = sl(Al);
      0;
      Y.useEffect(() => ok(a), [a]);
      Rq(t);
      lk(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(__, {
        children: [z.jsx(T_, {}), z.jsx(JR, {
          children: z.jsx(cA, {
            children: z.jsx(uE, {
              children: z.jsx(xq, {
                children: z.jsx(dq, {
                  children: z.jsxs(wq, {
                    children: [e, false]
                  })
                })
              })
            })
          })
        })]
      });
    };
    function Rq(e) {
      const t = sl(vE);
      const n = km();
      Yp(Qu()(t, e, n ? "gamepad" : "keyboard"));
    }
    const kq = {
      default: "Overpass",
      "ru-RU": "Noto Sans",
      "ko-KR": "Noto Sans KR",
      "ja-JP": "Noto Sans JP",
      "zh-HANS": "Noto Sans SC",
      "zh-HANT": "Noto Sans TC"
    };
    var Dq;
    var Fq = ({
      children: e
    }) => {
      const t = sl(pc);
      const n = sl(Gl);
      const s = sl(TE);
      0;
      const i = Y.useMemo(() => function (e) {
        switch (e) {
          case mc.Id:
            return Bq;
          case mc.Fallback:
            return Gq;
          default:
            return Uq;
        }
      }(t), [t]);
      0;
      const [a, o] = Y.useState({
        translate: i,
        unitSettings: n
      });
      0;
      Y.useEffect(() => o({
        translate: i,
        unitSettings: n
      }), [n, i]);
      0;
      Y.useEffect(() => {
        const e = fc.subscribe(() => o(e => ({
          ...e
        })));
        return () => e.dispose();
      }, []);
      wa.defaults.font.family = kq[s] || kq.default;
      (function (e) {
        Yp(`locale-${e}`);
      })(s);
      0;
      return z.jsx(ic.Provider, {
        value: a,
        children: e
      });
    };
    function Uq(e, t) {
      const n = Rr().translate(e);
      return n === e ? t ?? null : n;
    }
    function Bq(e, t) {
      return e;
    }
    function Gq(e, t) {
      return t ?? null;
    }
    X.add("game-ui/common/localization/localization-provider.tsx", {
      get LocalizationProvider() {
        return Fq;
      },
      set LocalizationProvider(e) {
        Fq = e;
      }
    });
    (function (e) {
      e[e.main = 0] = "main";
      e[e.pauseMenu = 1] = "pauseMenu";
      e[e.options = 2] = "options";
      e[e.freeCamera = 3] = "freeCamera";
    })(Dq || (Dq = {}));
    var Vq = qr(0);
    var Hq = e => {
      Vq.update(e);
    };
    X.add("game-ui/editor/data-binding/editor-bindings.ts", {
      get EditorScreen() {
        return Dq;
      },
      set EditorScreen(e) {
        Dq = e;
      },
      get activeEditorScreen() {
        return activeEditorScreen;
      },
      set activeEditorScreen(e) {
        activeEditorScreen = e;
      },
      get setActiveEditorScreen() {
        return Hq;
      },
      set setActiveEditorScreen(e) {
        Hq = e;
      }
    });
    let Kq = {
      header: "header_HpJ",
      title: "title_lCJ",
      shortcut: "shortcut_Sez",
      description: "description_dNa",
      content: "content_OhK"
    };
    X.add("game-ui/common/tooltip/description-tooltip/description-tooltip.module.scss", {
      get classes() {
        return Kq;
      },
      set classes(e) {
        Object.assign(Kq, e);
      }
    });
    var zq = ({
      title: e,
      description: t,
      content: n,
      shortcut: s,
      children: i,
      ...a
    }) => {
      0;
      const o = z.jsx(Yq, {
        title: e,
        description: t,
        content: n,
        shortcut: s
      });
      0;
      return z.jsx(bg, {
        ...a,
        tooltip: o,
        children: i
      });
    };
    var Yq = ({
      title: e,
      description: t,
      content: n,
      shortcut: s,
      className: i
    }) => {
      const a = Y.Children.count(e) > 0;
      const o = Y.Children.count(t) > 0;
      const r = Y.Children.count(n) > 0;
      const l = Y.Children.count(s) > 0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Kq.layout, i),
        children: [z.jsxs("div", {
          className: Kq.header,
          children: [a && (0, z.jsx)("div", {
            className: Kq.title,
            children: e
          }), l && (0, z.jsx)("div", {
            className: Kq.shortcut,
            children: s
          })]
        }), o && (0, z.jsx)(bb, {
          className: Kq.description,
          children: t
        }), r && (0, z.jsx)("div", {
          className: Kq.content,
          children: n
        })]
      });
    };
    X.add("game-ui/common/tooltip/description-tooltip/description-tooltip.tsx", {
      get DescriptionTooltip() {
        return zq;
      },
      set DescriptionTooltip(e) {
        zq = e;
      },
      get TooltipLayout() {
        return Yq;
      },
      set TooltipLayout(e) {
        Yq = e;
      }
    });
    let $q = {
      field: "field_eKJ",
      blinkOnSelect: "blinkOnSelect_Lbx",
      content: "content_syM",
      selectable: "selectable_otQ",
      divider: "divider_GbU"
    };
    X.add("game-ui/game/components/toolbar/components/field/field.module.scss", {
      get classes() {
        return $q;
      },
      set classes(e) {
        Object.assign($q, e);
      }
    });
    var Xq = ({
      contentClassName: e,
      className: t,
      children: n,
      onSelect: s
    }) => {
      const i = Qu()($q.field, null != s && $q.selectable, t);
      0;
      const a = z.jsx("div", {
        className: Qu()($q.content, e),
        children: n
      });
      return null != s ? (0, z.jsx)(L_, {
        disableHint: true,
        className: i,
        onSelect: s,
        children: a
      }) : (0, z.jsx)(Ep, {
        className: i,
        children: a
      });
    };
    var Qq = () => (0, z.jsx)("div", {
      className: $q.divider
    });
    X.add("game-ui/game/components/toolbar/components/field/field.tsx", {
      get Field() {
        return Xq;
      },
      set Field(e) {
        Xq = e;
      },
      get Divider() {
        return Qq;
      },
      set Divider(e) {
        Qq = e;
      }
    });
    let Zq = {
      hint: "hint_gUV",
      "hint-right": "hint-right_jg4",
      hintRight: "hint-right_jg4"
    };
    X.add("game-ui/game/components/toolbar/bottom/hint-theme.module.scss", {
      get classes() {
        return Zq;
      },
      set classes(e) {
        Object.assign(Zq, e);
      }
    });
    let eX = {
      "time-controls": "time-controls_TVa field_eKJ",
      timeControls: "time-controls_TVa field_eKJ",
      period: "period_iJ_",
      button: "button_w1a",
      paused: "paused_DLu",
      "secondary-active": "secondary-active_X5T",
      secondaryActive: "secondary-active_X5T",
      "play-pause": "play-pause_Z_u",
      playPause: "play-pause_Z_u",
      speed: "speed_O0e",
      "date-time-container": "date-time-container_UTv",
      dateTimeContainer: "date-time-container_UTv",
      "date-time": "date-time_mlZ",
      dateTime: "date-time_mlZ",
      alternate2: "alternate2_ZMf",
      "disable-pause-animation": "disable-pause-animation_GSc",
      disablePauseAnimation: "disable-pause-animation_GSc",
      "paused-label": "paused-label_YTz",
      pausedLabel: "paused-label_YTz",
      none: "none_rxc",
      "time-hours": "time-hours_w20",
      timeHours: "time-hours_w20",
      "time-colon": "time-colon_t_C",
      timeColon: "time-colon_t_C",
      "time-minutes": "time-minutes_QOr",
      timeMinutes: "time-minutes_QOr",
      "time-period": "time-period_Qyj",
      timePeriod: "time-period_Qyj",
      "date-container": "date-container_Avy",
      dateContainer: "date-container_Avy",
      date: "date_fBv",
      alternate1: "alternate1_Am9"
    };
    X.add("game-ui/game/components/toolbar/bottom/time-controls/time-controls.module.scss", {
      get classes() {
        return eX;
      },
      set classes(e) {
        Object.assign(eX, e);
      }
    });
    var nX = FT({
      pause: "Media/Glyphs/SimulationPause.svg",
      play: "Media/Glyphs/SimulationPlay.svg",
      speed1: "Media/Glyphs/SimulationSpeed1.svg",
      speed2: "Media/Glyphs/SimulationSpeed2.svg",
      speed3: "Media/Glyphs/SimulationSpeed3.svg"
    });
    var sX = ({
      disablePauseAnimation: e,
      editor: t = false
    }) => {
      0;
      const [n, s] = Y.useState(false);
      0;
      const [i, a] = Y.useState(false);
      const o = sl(NO);
      const r = sl(wO);
      const l = sl(Gl).timeFormat === Yl.TwentyFourHours;
      const c = tW(2, rX);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(eX.timeControls, {
          [eX.period]: !l,
          [eX.disablePauseAnimation]: e
        }),
        children: [z.jsx(LT, {
          action: "Select",
          active: i,
          className: Zq.hint
        }), z.jsx(aT, {
          uiTag: dT.value?.toolbarSimulationToggle,
          editor: t,
          children: z.jsx(zq, {
            title: o ? (0, z.jsx)(Pc.Main.TOOLTIP_TITLE_PLAY, {}) : (0, z.jsx)(Pc.Main.TOOLTIP_TITLE_PAUSE, {}),
            description: o ? (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_PLAY, {}) : (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_PAUSE, {}),
            shortcut: z.jsx(AT, {
              action: "Pause Simulation",
              shortName: Cp.FallbackToControl
            }),
            children: z.jsx(Lh, {
              onFocusChange: a,
              children: z.jsx($_, {
                disableHint: true,
                tinted: true,
                src: o ? nX.pause : nX.play,
                selectSound: null,
                className: Qu()(eX.button, eX.playPause, o && eX.paused),
                onSelect: aX
              })
            })
          })
        }), z.jsx(Qq, {}), z.jsx(aT, {
          uiTag: dT.value?.toolbarSimulationDateTime,
          children: z.jsx(zq, {
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_DATE, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_DATE, {}),
            children: z.jsx(iX, {
              tf: l,
              paused: o
            })
          })
        }), z.jsx(Qq, {}), z.jsx(aT, {
          uiTag: dT.value?.toolbarSimulationSpeed,
          children: z.jsx(zq, {
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_GAME_SPEED, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_GAME_SPEED, {}),
            shortcut: z.jsx(AT, {
              action: "Switch Speed",
              shortName: Cp.FallbackToControl
            }),
            children: z.jsx(Lh, {
              onFocusChange: s,
              children: z.jsx($_, {
                disableHint: true,
                tinted: true,
                src: r < .5 ? nX.speed1 : r < 1.5 ? nX.speed2 : nX.speed3,
                selectSound: null,
                className: Qu()(eX.button, eX.speed, o && eX.paused, c.mouseDown && eX.secondaryActive),
                onSelect: oX,
                onMouseDown: c.onMouseDown,
                onMouseUp: c.onMouseUp
              })
            })
          })
        }), z.jsx(LT, {
          action: "Select",
          active: n,
          className: Zq.hintRight
        })]
      });
    };
    const iX = ({
      tf: e,
      paused: t
    }) => {
      const n = sl(yO);
      const s = ac();
      0;
      const i = Y.useRef(null);
      0;
      const a = Y.useRef(null);
      0;
      const o = Y.useRef(null);
      0;
      const r = Y.useRef(null);
      0;
      const l = Y.useCallback(t => {
        const l = DO(n, t);
        const c = bu(e ? l.hour : l.hour % 12 || 12, 2);
        const u = bu(l.minute, 2);
        if (i.current && a.current && r.current) {
          i.current.innerHTML = c;
          a.current.innerHTML = u;
          r.current.innerHTML = Cu(s, l);
        }
        if (o.current) {
          o.current.innerHTML = (l.hour < 12 ? s.translate("Common.TIME_PERIOD_AM") : s.translate("Common.TIME_PERIOD_PM")) || "";
        }
      }, [s, e, n]);
      const c = ol(SO, l);
      0;
      const [u] = Y.useState(() => DO(n, c));
      0;
      const d = Y.useMemo(() => bu(e ? u.hour : u.hour % 12 || 12, 2), [u.hour, e]);
      0;
      const m = Y.useMemo(() => bu(u.minute, 2), [u.minute]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(fd, {
        children: z.jsxs("div", {
          className: eX.dateTimeContainer,
          children: [z.jsxs("div", {
            className: Qu()(eX.dateTime, t && eX.paused),
            children: [z.jsx("div", {
              className: eX.timeHours,
              ref: i,
              children: d
            }), z.jsx("div", {
              className: eX.timeColon,
              children: ":"
            }), z.jsx("div", {
              className: eX.timeMinutes,
              ref: a,
              children: m
            }), !e && (0, z.jsx)("div", {
              className: eX.timePeriod,
              ref: o,
              children: u.hour < 12 ? (0, z.jsx)(Pc.Common.TIME_PERIOD_AM, {}) : (0, z.jsx)(Pc.Common.TIME_PERIOD_PM, {})
            }), z.jsx("div", {
              className: eX.date,
              ref: r,
              children: z.jsx(Su, {
                value: u
              })
            })]
          }), t && (0, z.jsx)("div", {
            className: eX.pausedLabel,
            children: (0, z.jsx)(Pc.Toolbar.SIMULATION_PAUSED, {})
          })]
        })
      });
    };
    function aX() {
      const e = !NO.value;
      rp(e ? op.pauseSimulation : op.resumeSimulation);
      PO(e);
    }
    function oX() {
      mX(wO.value + 1);
    }
    function rX() {
      mX(wO.value + 3 - 1);
    }
    function lX() {
      mX(0);
    }
    function cX() {
      mX(1);
    }
    function uX() {
      mX(2);
    }
    function dX() {
      if (NO.value) {
        rp(op.resumeSimulation);
        LO(0);
      } else {
        const e = wO.value;
        if (e < 2) {
          mX(e + 1);
        } else {
          rp(op.pauseSimulation);
          PO(true);
        }
      }
    }
    function mX(e) {
      const t = e % 3;
      rp(function (e) {
        return e < .5 ? op.simulationSpeed1 : e < 1.5 ? op.simulationSpeed2 : op.simulationSpeed3;
      }(t));
      LO(t);
    }
    function hX(e) {
      return e < .5 ? nX.speed1 : e < 1.5 ? nX.speed2 : nX.speed3;
    }
    function gX() {
      const e = sl(Sv);
      const t = sl(GO);
      const n = sl(eP);
      const s = sl(Zp);
      const i = pX();
      0;
      const a = Y.useCallback(() => dP(function (e) {
        const t = e.modes.reduce((t, n) => n.index > e.modeIndex && (undefined === t || n.index < t) ? n.index : t, undefined);
        if (undefined !== t) {
          return t;
        }
        const n = e.modes.reduce((e, t) => undefined === e || t.index < e ? t.index : e, undefined);
        return undefined !== n ? n : e.modeIndex;
      }(t)), [t]);
      const o = sl(Gj);
      const r = sl(WO);
      const l = sl(KO);
      0;
      const c = Y.useCallback(() => {
        vP((l & r) === r ? l & ~r : l | r);
      }, [r, l]);
      0;
      return Y.useMemo(() => ({
        ...i,
        Back: t.id !== yP || o ? () => {
          if (t.id === IP) {
            rp(op.bulldozeEnd);
          }
          if (o) {
            Xj(false);
          }
          uP(yP);
        } : null,
        "Leave Underground Mode": n ? () => {
          rp(op.increaseElevation);
          TP(false);
        } : null,
        "Leave Info View": null != s ? tf : null,
        "Pause Menu": e !== Iv.pauseMenu ? wv : null,
        "Switch Toolmode": a,
        "Toggle Snapping": c,
        "Hide UI": () => jv(Sv.value !== Iv.freeCamera ? Iv.freeCamera : Iv.main)
      }), [i, t.id, n, s, e, a, c, o]);
    }
    function pX() {
      const e = sl(NO);
      0;
      return Y.useMemo(() => ({
        "Switch Speed": dX,
        "Speed 1": lX,
        "Speed 2": cX,
        "Speed 3": uX,
        "Pause Simulation": e ? null : () => {
          rp(op.pauseSimulation);
          PO(true);
        },
        "Resume Simulation": e ? () => {
          rp(op.resumeSimulation);
          PO(false);
        } : null
      }), [e]);
    }
    X.add("game-ui/game/components/toolbar/bottom/time-controls/time-controls.tsx", {
      get images() {
        return nX;
      },
      set images(e) {
        nX = e;
      },
      get TimeControls() {
        return sX;
      },
      set TimeControls(e) {
        sX = e;
      },
      get togglePause() {
        return aX;
      },
      set togglePause(e) {
        aX = e;
      },
      get switchSpeed() {
        return oX;
      },
      set switchSpeed(e) {
        oX = e;
      },
      get switchSpeedReverse() {
        return rX;
      },
      set switchSpeedReverse(e) {
        rX = e;
      },
      get speed1() {
        return lX;
      },
      set speed1(e) {
        lX = e;
      },
      get speed2() {
        return cX;
      },
      set speed2(e) {
        cX = e;
      },
      get speed3() {
        return uX;
      },
      set speed3(e) {
        uX = e;
      },
      get switchSpeedOrPause() {
        return dX;
      },
      set switchSpeedOrPause(e) {
        dX = e;
      }
    });
    X.add("game-ui/game/components/game-input-actions.tsx", {
      get useGameInputActions() {
        return gX;
      },
      set useGameInputActions(e) {
        gX = e;
      },
      get useSimSpeedInputActions() {
        return pX;
      },
      set useSimSpeedInputActions(e) {
        pX = e;
      }
    });
    var fX = ({
      onClose: e,
      focusKey: t
    }) => {
      const n = sl(tC);
      0;
      const [s] = Y.useState(n);
      xX();
      0;
      Y.useEffect(() => {
        nC(true);
        if (!s) {
          return () => nC(false);
        }
      }, [s]);
      const i = pX();
      0;
      const a = Y.useMemo(() => ({
        Back: e,
        "Take Photo": () => {
          rp(op.takePhoto);
          aC();
        },
        "Hide UI": e,
        ...i
      }), [e, i]);
      0;
      0;
      0;
      return z.jsx(jp, {
        children: z.jsx(Lg, {
          actions: a,
          children: z.jsx(ip, {
            focusKey: t,
            focused: null,
            activation: $u.Always
          })
        })
      });
    };
    function xX(e = true) {
      $p(e ? "hide-ui" : undefined);
    }
    X.add("game-ui/game/components/free-camera-screen/free-camera-screen.tsx", {
      get FreeCameraScreen() {
        return fX;
      },
      set FreeCameraScreen(e) {
        fX = e;
      },
      get useUIHidden() {
        return xX;
      },
      set useUIHidden(e) {
        xX = e;
      }
    });
    const vX = new Tg("NO_KEY");
    function _X() {
      0;
      const e = Y.useContext(lE);
      0;
      return Y.useCallback(() => e.showDialog((0, z.jsx)(bX, {})), [e]);
    }
    var bX = () => {
      0;
      const e = Y.useContext(cE);
      0;
      const t = Y.useCallback(() => {
        e.onClose();
        zk();
      }, [e]);
      0;
      const n = Y.useCallback(() => {
        e.onClose();
        wE();
      }, [e]);
      const s = sl(Ck);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aE, {
        wide: true,
        title: z.jsx(Pc.Common.EXIT_DIALOG_TITLE, {}),
        buttons: z.jsx(z.Fragment, {
          children: z.jsxs("div", {
            className: sE.buttons,
            children: [z.jsx(L_, {
              theme: DE,
              className: sE.button,
              onSelect: t,
              children: z.jsx(Pc.Common.EXIT_TO_MENU, {})
            }), s && (0, z.jsx)(L_, {
              theme: DE,
              className: sE.button,
              onSelect: n,
              children: (0, z.jsx)(Pc.Common.EXIT_TO_DESKTOP, {})
            }), z.jsx(L_, {
              focusKey: vX,
              theme: DE,
              className: Qu()(sE.button, DE.negative),
              onSelect: e.onClose,
              children: z.jsx(Pc.Common.CANCEL, {})
            })]
          })
        }),
        onClose: e.onClose,
        initialFocus: vX,
        children: z.jsx(bb, {
          theme: sE,
          children: z.jsx(Pc.Common.EXIT_DIALOG_TEXT, {})
        })
      });
    };
    X.add("game-ui/menu/components/pause-menu/exit-dialog/exit-dialog.tsx", {
      get useExitDialogCallback() {
        return _X;
      },
      set useExitDialogCallback(e) {
        _X = e;
      },
      get ExitDialog() {
        return bX;
      },
      set ExitDialog(e) {
        bX = e;
      }
    });
    let TX = {
      enter: "enter_eIx enter_kO6",
      "enter-active": "enter-active_Y4y enter-active_lrI",
      enterActive: "enter-active_Y4y enter-active_lrI",
      exit: "exit_PzK exit_Von",
      "exit-active": "exit-active_jCs exit-active_jtN",
      exitActive: "exit-active_jCs exit-active_jtN",
      base: "base_D7z"
    };
    X.add("game-ui/menu/transitions/expand-fade-children.module.scss", {
      get classes() {
        return TX;
      },
      set classes(e) {
        Object.assign(TX, e);
      }
    });
    let IX = {
      "master-screen": "master-screen_B69",
      masterScreen: "master-screen_B69"
    };
    X.add("game-ui/menu/components/shared/master-screen/master-screen.module.scss", {
      get classes() {
        return IX;
      },
      set classes(e) {
        Object.assign(IX, e);
      }
    });
    var SX = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      children: n
    }, s) {
      0;
      0;
      0;
      0;
      return z.jsx(sp, {
        focusKey: e,
        children: z.jsx(Ip, {
          children: z.jsx(dh, {
            styles: TX,
            children: z.jsx("div", {
              ref: s,
              className: Qu()(IX.masterScreen, t),
              children: n
            })
          })
        })
      });
    });
    X.add("game-ui/menu/components/shared/master-screen/master-screen.tsx", {
      get MasterScreen() {
        return SX;
      },
      set MasterScreen(e) {
        SX = e;
      }
    });
    let jX = {
      content: "content_Y6b",
      menu: "menu_ZQW",
      item: "item_Psh"
    };
    X.add("game-ui/menu/components/editor-pause-screen/editor-pause-screen.module.scss", {
      get classes() {
        return jX;
      },
      set classes(e) {
        Object.assign(jX, e);
      }
    });
    var NX = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onSelectScreen: n,
      onClose: s,
      onNewMap: i
    }, a) {
      0;
      const o = Y.useMemo(() => ({
        "Pause Menu": s,
        Back: s
      }), [s]);
      const r = _X();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(SX, {
        ref: a,
        focusKey: e,
        className: t,
        children: z.jsx(jp, {
          children: z.jsx(Lg, {
            actions: o,
            children: z.jsx("div", {
              className: jX.content,
              children: z.jsx("div", {
                className: jX.menu,
                children: z.jsxs(ep, {
                  direction: Mg.Vertical,
                  children: [z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/ArrowRight.svg",
                    theme: BI,
                    onSelect: s,
                    children: z.jsx(Pc.Editor.BACK_TO_EDITOR, {})
                  }), z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Pen.svg",
                    theme: BI,
                    onSelect: i,
                    children: z.jsx(Pc.Editor.NEW_MAP, {})
                  }), z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Gear.svg",
                    theme: BI,
                    onSelect: () => n(Dq.options),
                    children: z.jsx(Pc.Menu.OPTIONS, {})
                  }), z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Close.svg",
                    theme: BI,
                    onSelect: r,
                    children: z.jsx(Pc.Menu.EXIT_GAME, {})
                  })]
                })
              })
            })
          })
        })
      });
    });
    X.add("game-ui/menu/components/editor-pause-screen/editor-pause-screen.tsx", {
      get EditorPauseScreen() {
        return NX;
      },
      set EditorPauseScreen(e) {
        NX = e;
      }
    });
    let wX = {
      "beta-pill": "beta-pill_OSA",
      betaPill: "beta-pill_OSA"
    };
    X.add("game-ui/common/beta-element/beta-pill/beta-pill.module.scss", {
      get classes() {
        return wX;
      },
      set classes(e) {
        Object.assign(wX, e);
      }
    });
    var PX = e => (0, z.jsx)(iD, {
      children: (0, z.jsx)(LX, {
        ...e,
        children: (0, z.jsx)(Pc.Menu.BETA_LABEL, {})
      })
    });
    var LX = ({
      children: e,
      className: t
    }) => (0, z.jsx)("div", {
      className: Qu()(wX.betaPill, t),
      children: e
    });
    X.add("game-ui/common/beta-element/beta-pill/beta-pill.tsx", {
      get ModdingBetaPill() {
        return PX;
      },
      set ModdingBetaPill(e) {
        PX = e;
      },
      get BetaPill() {
        return LX;
      },
      set BetaPill(e) {
        LX = e;
      }
    });
    let AX = {
      "locked-badge": "locked-badge_hmR",
      lockedBadge: "locked-badge_hmR"
    };
    X.add("game-ui/game/components/asset-menu/badges/locked-badge.module.scss", {
      get classes() {
        return AX;
      },
      set classes(e) {
        Object.assign(AX, e);
      }
    });
    const RX = FT({
      Lock: "Media/Glyphs/Lock.svg"
    });
    var kX = ({
      style: e,
      className: t
    }) => (0, z.jsx)(W_, {
      src: RX.Lock,
      className: Qu()(AX.lockedBadge, t),
      style: e
    });
    X.add("game-ui/game/components/asset-menu/badges/locked-badge.tsx", {
      get LockedBadge() {
        return kX;
      },
      set LockedBadge(e) {
        kX = e;
      }
    });
    let DX = {
      "tab-bar": "tab-bar_oPw",
      tabBar: "tab-bar_oPw",
      tab: "tab_Hrb",
      lock: "lock_F5I"
    };
    X.add("game-ui/common/tabs/tabs.module.scss", {
      get classes() {
        return DX;
      },
      set classes(e) {
        Object.assign(DX, e);
      }
    });
    function UX({
      tabs: e,
      selectedTab: t,
      selectPreviousSound: n = op.selectPreviousItem,
      selectNextSound: s = op.selectNextItem,
      children: i,
      onSelect: a
    }) {
      const o = 0 === e.length || 1 === e.length && e[0] === t;
      0;
      const r = Y.useMemo(() => ({
        "Switch Tab": i => {
          if (0 !== i) {
            const o = null != t ? e.indexOf(t) : -1;
            const r = i < 0 ? ow(e, o, true) : iw(e, o, true);
            if (null != r && r !== t) {
              a(r);
              rp(i < 0 ? n : s);
            }
          }
        }
      }), [a, s, n, t, e]);
      0;
      return z.jsx(Lg, {
        actions: r,
        disabled: o,
        children: i
      });
    }
    var BX = ({
      className: e,
      children: t
    }) => (0, z.jsx)("div", {
      className: Qu()(DX.tabBar, e),
      children: (0, z.jsx)(xW, {
        children: t
      })
    });
    function GX({
      id: e,
      selectedId: t,
      uiTag: n,
      disabled: s,
      locked: i,
      selectSound: a,
      className: o,
      children: r,
      onSelect: l
    }) {
      const c = e === t;
      0;
      const u = Y.useCallback(() => {
        l(e);
        if (n) {
          ig(n);
        }
      }, [e, l, n]);
      0;
      0;
      return z.jsx(aT, {
        uiTag: n,
        active: !s,
        children: z.jsxs(L_, {
          disableHint: true,
          focusKey: Eg,
          disabled: s,
          selectSound: a,
          className: Qu()(DX.tab, c && "selected", o),
          onSelect: u,
          children: [r, i && (0, z.jsx)(kX, {
            className: DX.lock
          })]
        })
      });
    }
    X.add("game-ui/common/tabs/tabs.tsx", {
      get TabNav() {
        return UX;
      },
      set TabNav(e) {
        UX = e;
      },
      get TabBar() {
        return BX;
      },
      set TabBar(e) {
        BX = e;
      },
      get Tab() {
        return GX;
      },
      set Tab(e) {
        GX = e;
      }
    });
    let VX = {
      divider: "divider_wuh"
    };
    X.add("game-ui/menu/widgets/divider/divider.module.scss", {
      get classes() {
        return VX;
      },
      set classes(e) {
        Object.assign(VX, e);
      }
    });
    var KX = () => (0, z.jsx)("div", {
      className: VX.divider
    });
    X.add("game-ui/menu/widgets/divider/divider.tsx", {
      get Divider() {
        return KX;
      },
      set Divider(e) {
        KX = e;
      }
    });
    let WX = {
      "empty-state": "empty-state_GEy",
      emptyState: "empty-state_GEy"
    };
    X.add("game-ui/common/empty-state/empty-state.module.scss", {
      get classes() {
        return WX;
      },
      set classes(e) {
        Object.assign(WX, e);
      }
    });
    var YX = ({
      children: e,
      className: t
    }) => (0, z.jsx)("div", {
      className: Qu()(WX.emptyState, t),
      children: e
    });
    X.add("game-ui/common/empty-state/empty-state.tsx", {
      get EmptyState() {
        return YX;
      },
      set EmptyState(e) {
        YX = e;
      }
    });
    let $X = {
      label: "label_sAz",
      container: "container_R_O",
      "beta-pill": "beta-pill_E9M",
      betaPill: "beta-pill_E9M"
    };
    X.add("game-ui/menu/widgets/label/label.module.scss", {
      get classes() {
        return $X;
      },
      set classes(e) {
        Object.assign($X, e);
      }
    });
    var XX = ({
      props: e
    }) => {
      0;
      0;
      0;
      const t = z.jsxs("div", {
        className: $X.container,
        children: [z.jsx("div", {
          className: Qu()($X.label, "label-level-" + e.level),
          children: z.jsx(hu, {
            value: e.displayName
          })
        }), e.beta && (0, z.jsx)(PX, {
          className: $X.betaPill
        })]
      });
      return e.tooltip ? (0, z.jsx)(bg, {
        tooltip: (0, z.jsx)(hu, {
          value: e.tooltip
        }),
        children: t
      }) : t;
    };
    X.add("game-ui/menu/widgets/label/Label.tsx", {
      get Label() {
        return XX;
      },
      set Label(e) {
        XX = e;
      }
    });
    let QX = {
      breadcrumbs: "breadcrumbs_xcd"
    };
    X.add("game-ui/menu/widgets/breadcrumbs/breadcrumbs.module.scss", {
      get classes() {
        return QX;
      },
      set classes(e) {
        Object.assign(QX, e);
      }
    });
    const JX = {
      [AA.Label]: XX
    };
    var eQ = ({
      children: e,
      parent: t
    }) => (0, z.jsx)("div", {
      className: QX.breadcrumbs,
      children: (0, z.jsx)(mM, {
        parent: t,
        data: e,
        components: JX
      })
    });
    X.add("game-ui/menu/widgets/breadcrumbs/breadcrumbs.tsx", {
      get Breadcrumbs() {
        return eQ;
      },
      set Breadcrumbs(e) {
        eQ = e;
      }
    });
    var tQ = Y.createContext({
      onOptionMouseEnter: () => {},
      onOptionMouseLeave: () => {},
      onFocusSet: () => {},
      onFocusReset: () => {}
    });
    X.add("game-ui/menu/components/options-screen/option-page/option-page-context.ts", {
      get OptionSectionContext() {
        return tQ;
      },
      set OptionSectionContext(e) {
        tQ = e;
      }
    });
    let nQ = {
      button: "button_WWa",
      icon: "icon_OPJ",
      label: "label_vrX"
    };
    X.add("game-ui/menu/themes/secondary-button.module.scss", {
      get classes() {
        return nQ;
      },
      set classes(e) {
        Object.assign(nQ, e);
      }
    });
    let iQ = {
      buttons: "buttons_hd7",
      button: "button_SH8"
    };
    X.add("game-ui/menu/widgets/button/button.module.scss", {
      get classes() {
        return iQ;
      },
      set classes(e) {
        Object.assign(iQ, e);
      }
    });
    var oQ = e => (0, z.jsx)(z.Fragment, {
      children: !e.props.hidden && (0, z.jsx)(cQ, {
        children: (0, z.jsx)(uQ, {
          ...e
        })
      })
    });
    var rQ = e => (0, z.jsx)(z.Fragment, {
      children: !e.props.hidden && (0, z.jsx)(cQ, {
        children: (0, z.jsx)(uQ, {
          ...e
        })
      })
    });
    var lQ = e => {
      const t = sM(e.parent, e.path);
      0;
      return z.jsx(z.Fragment, {
        children: e.children.some(e => !e.props.hidden) && (0, z.jsx)(SZ, {
          debugName: "BUTTONROW_" + e.path,
          direction: Mg.Horizontal,
          children: (0, z.jsx)(cQ, {
            children: e.children.map(e => (0, Y.createElement)(uQ, {
              ...e,
              key: e.path,
              parent: t,
              path: e.path
            }))
          })
        })
      });
    };
    const cQ = ({
      children: e
    }) => (0, z.jsx)(Ep, {
      className: iQ.buttons,
      activation: $u.Always,
      children: (0, z.jsx)(ep, {
        children: e
      })
    });
    const uQ = e => {
      const t = PA(UA, sM(e.parent, e.path));
      0;
      0;
      return z.jsx(dQ, {
        id: e.path,
        disabled: e.props.disabled,
        hidden: e.props.hidden,
        onSelect: t,
        confirmationMessage: null != e.props.confirmationMessage ? (0, z.jsx)(hu, {
          value: e.props.confirmationMessage
        }) : null,
        children: z.jsx(hu, {
          value: e.props.displayName
        })
      });
    };
    const dQ = ({
      id: e,
      disabled: t,
      hidden: n,
      confirmationMessage: s,
      children: i,
      onSelect: a
    }) => {
      0;
      const o = Y.useContext(lE);
      0;
      const r = Y.useContext(tQ);
      0;
      const l = Y.useCallback(() => {
        if ("string" == typeof e) {
          r.onOptionMouseEnter(e);
        }
      }, [e, r]);
      0;
      const c = Y.useCallback(() => {
        if ("string" == typeof e) {
          r.onOptionMouseLeave(e);
        }
      }, [e, r]);
      0;
      const u = Y.useCallback(() => {
        if (null != s) {
          0;
          0;
          o.showDialog(z.jsx(LI, {
            title: z.jsx(Pc.Common.WARNING, {}),
            message: s,
            onConfirm: a
          }));
        } else {
          a();
        }
      }, [o, s, a]);
      0;
      return z.jsx(z.Fragment, {
        children: !n && (0, z.jsx)(L_, {
          focusKey: e,
          disabled: t,
          theme: nQ,
          className: iQ.button,
          onSelect: u,
          onMouseEnter: l,
          onMouseLeave: c,
          children: i
        })
      });
    };
    X.add("game-ui/menu/widgets/button/button.tsx", {
      get BoundButton() {
        return oQ;
      },
      set BoundButton(e) {
        oQ = e;
      },
      get BoundButtonWithConfirmation() {
        return rQ;
      },
      set BoundButtonWithConfirmation(e) {
        rQ = e;
      },
      get BoundButtonRow() {
        return lQ;
      },
      set BoundButtonRow(e) {
        lQ = e;
      }
    });
    let mQ = {
      field: "field_MBO field_UuC",
      label: "label_DGc label_ZLb"
    };
    X.add("game-ui/menu/widgets/field/row-field.module.scss", {
      get classes() {
        return mQ;
      },
      set classes(e) {
        Object.assign(mQ, e);
      }
    });
    var gQ = {
      ...P_,
      hover: null,
      focus: null
    };
    function pQ(e) {
      0;
      0;
      return z.jsx(xQ, {
        ...e.props,
        id: e.path,
        label: z.jsx(hu, {
          value: e.props.displayName
        }),
        children: e.props.value
      });
    }
    function fQ(e) {
      0;
      0;
      0;
      return z.jsx(xQ, {
        ...e.props,
        id: e.path,
        label: z.jsx(hu, {
          value: e.props.displayName
        }),
        children: z.jsx(hu, {
          value: e.props.value
        })
      });
    }
    var xQ = ({
      id: e,
      label: t,
      theme: n = mQ,
      disabled: s,
      className: i,
      children: a,
      onClick: o
    }) => {
      0;
      const r = Y.useContext(tQ);
      0;
      const l = Y.useCallback(() => {
        if ("string" == typeof e) {
          r.onOptionMouseEnter(e);
        }
        rp(op.hoverItem);
      }, [e, r]);
      0;
      const c = Y.useCallback(() => {
        if ("string" == typeof e) {
          r.onOptionMouseLeave(e);
        }
      }, [e, r]);
      0;
      const u = Y.useCallback(e => {
        if (!s && o) {
          o(e);
        }
      }, [s, o]);
      0;
      return z.jsxs(Ep, {
        className: Qu()(n.field, s && "disabled", i),
        focusKey: e,
        focusSound: op.hoverItem,
        onMouseEnter: l,
        onMouseLeave: c,
        onClick: u,
        children: [t && (0, z.jsx)("div", {
          className: n.label,
          children: t
        }), a]
      });
    };
    X.add("game-ui/menu/widgets/field/field.tsx", {
      get optionButtonSounds() {
        return gQ;
      },
      set optionButtonSounds(e) {
        gQ = e;
      },
      get ValueField() {
        return pQ;
      },
      set ValueField(e) {
        pQ = e;
      },
      get LocalizedValueField() {
        return fQ;
      },
      set LocalizedValueField(e) {
        fQ = e;
      },
      get OptionField() {
        return xQ;
      },
      set OptionField(e) {
        xQ = e;
      }
    });
    let vQ = {
      panel: "panel_sI8",
      backdrop: "backdrop_EtG",
      header: "header_dGi",
      "picker-field": "picker-field_Sfm",
      pickerField: "picker-field_Sfm",
      label: "label_eqn",
      button: "button_SSl",
      control: "control_kH8",
      field: "field_auj value-field_yJi",
      value: "value_T9z value_PW_",
      "directory-button": "directory-button_FNN secondary-button_Kvj",
      directoryButton: "directory-button_FNN secondary-button_Kvj",
      "string-field": "string-field_clR",
      stringField: "string-field_clR",
      hint: "hint_Mwa"
    };
    X.add("game-ui/menu/widgets/directory-picker/bound-directory-picker.module.scss", {
      get classes() {
        return vQ;
      },
      set classes(e) {
        Object.assign(vQ, e);
      }
    });
    function bQ({
      parent: e,
      path: t,
      props: n
    }) {
      const s = sM(e, t);
      const i = PA(VA, s);
      const a = km();
      const o = PA(BA, s);
      0;
      const r = Y.useCallback(e => {
        o(e.target.value);
      }, [o]);
      0;
      const l = Y.useMemo(() => ({
        "Select Directory": i
      }), [i]);
      0;
      const {
        setHeader: c
      } = Y.useContext(yQ);
      0;
      Y.useEffect(() => {
        c(n.displayName);
      }, [n.displayName, c]);
      0;
      const [u, d] = Y.useState(false);
      0;
      const [m, h] = Y.useState(false);
      0;
      const g = Y.useCallback(() => {
        h(false);
      }, []);
      0;
      const p = Y.useCallback(() => {
        h(true);
      }, []);
      const f = !n.disabled && u;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: l,
        disabled: n.disabled,
        children: z.jsx(Lh, {
          onFocusChange: d,
          children: z.jsxs(xQ, {
            ...n,
            id: t,
            label: z.jsx(hu, {
              value: n.displayName
            }),
            children: [z.jsx(LT, {
              action: m ? "Back" : "Select",
              active: f,
              className: vQ.hint
            }), z.jsxs("div", {
              className: Qu()(vQ.field, n.disabled && "disabled"),
              children: [z.jsx(bg, {
                tooltip: z.jsx(Tc, {
                  id: null,
                  fallback: n.value
                }),
                children: z.jsx(zE, {
                  ...n,
                  onChange: r,
                  className: Qu()(vQ.stringField, n.disabled && "disabled"),
                  value: n.value,
                  multiline: undefined,
                  maxLength: undefined,
                  onBlur: g,
                  onFocus: p
                })
              }), !a && !n.disabled && (0, z.jsx)($_, {
                tinted: true,
                onSelect: i,
                focusKey: Eg,
                src: "Media/Editor/Folder.svg",
                className: vQ.directoryButton,
                onClick: Ob
              })]
            })]
          })
        })
      });
    }
    const TQ = new Tg("DIRECTORY_PICKER");
    const EQ = new Tg("CHILDREN");
    const IQ = {
      setHeader: () => {}
    };
    var yQ = Y.createContext(IQ);
    function SQ({
      children: e
    }) {
      const t = sl(ec);
      const n = sl(Jl);
      0;
      const s = Y.useMemo(() => ({
        group: "options",
        path: []
      }), []);
      0;
      const [i, a] = Y.useState();
      0;
      const o = Y.useMemo(() => ({
        setHeader: a
      }), []);
      0;
      0;
      0;
      return z.jsx(ip, {
        focused: t ? TQ : EQ,
        children: z.jsxs(yQ.Provider, {
          value: o,
          children: [z.jsx(sp, {
            focusKey: EQ,
            children: e
          }), t && n && (0, z.jsx)(sp, {
            focusKey: TQ,
            children: (0, z.jsx)(t_, {
              onMouseDown: tc,
              className: vQ.backdrop,
              children: (0, z.jsx)("div", {
                className: vQ.panel,
                children: (0, z.jsx)(kg, {
                  onAction: tc,
                  children: (0, z.jsx)(Ip, {
                    children: (0, z.jsxs)(ep, {
                      children: [i && (0, z.jsx)("div", {
                        className: vQ.header,
                        children: (0, z.jsx)(hu, {
                          value: i
                        })
                      }), (0, z.jsx)(j$, {
                        parent: s,
                        data: n
                      })]
                    })
                  })
                })
              })
            })
          })]
        })
      });
    }
    X.add("game-ui/menu/widgets/directory-picker/bound-directory-picker.tsx", {
      get BoundDirectoryPickerField() {
        return bQ;
      },
      set BoundDirectoryPickerField(e) {
        bQ = e;
      },
      get DirectoryPickerDialogContext() {
        return yQ;
      },
      set DirectoryPickerDialogContext(e) {
        yQ = e;
      },
      get DirectoryPickerDialog() {
        return SQ;
      },
      set DirectoryPickerDialog(e) {
        SQ = e;
      }
    });
    let jQ = {
      "dropdown-toggle": "dropdown-toggle_V9z dropdown-toggle_prl value-field_yJi value_PW_",
      dropdownToggle: "dropdown-toggle_V9z dropdown-toggle_prl value-field_yJi value_PW_",
      indicator: "indicator_Xmj",
      "dropdown-menu": "dropdown-menu_jf2 dropdown-menu_Swd",
      dropdownMenu: "dropdown-menu_jf2 dropdown-menu_Swd",
      "dropdown-item": "dropdown-item_sZT undefined",
      dropdownItem: "dropdown-item_sZT undefined"
    };
    X.add("game-ui/menu/themes/dropdown.module.scss", {
      get classes() {
        return jQ;
      },
      set classes(e) {
        Object.assign(jQ, e);
      }
    });
    let NQ = {
      dropdown: "dropdown_iVn",
      hint: "hint_fnk"
    };
    X.add("game-ui/menu/widgets/dropdown-field/dropdown-field.module.scss", {
      get classes() {
        return NQ;
      },
      set classes(e) {
        Object.assign(NQ, e);
      }
    });
    function OQ(e) {
      0;
      return z.jsx(LQ, {
        items: e.props.enumMembers,
        value: e.props.value,
        ...e
      });
    }
    function PQ(e) {
      0;
      return z.jsx(LQ, {
        items: e.props.items,
        value: e.props.value,
        ...e
      });
    }
    function LQ(e) {
      const t = e.items.findIndex(t => Kr(t.value, e.value));
      const n = -1 !== t ? e.items[t] : null;
      const s = PA(BA, sM(e.parent, e.path));
      const i = e.items.filter(e => !e.disabled);
      const a = AQ(n);
      0;
      const [o, r] = Y.useState(false);
      0;
      const [l, c] = Y.useState(false);
      0;
      const [u, d] = Y.useState(t);
      const m = !e.props.disabled && o;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: r,
        children: z.jsxs(xQ, {
          ...e.props,
          id: e.path,
          label: z.jsx(hu, {
            value: e.props.displayName
          }),
          disabled: e.props.disabled || !i.length,
          children: [z.jsx(LT, {
            action: l ? "Back" : "Select",
            active: m,
            className: NQ.hint
          }), z.jsx(ny, {
            focusKey: e.props.disabled ? Eg : Ig,
            initialFocused: t,
            theme: jQ,
            content: z.jsx(ep, {
              initialFocused: t,
              onChange: d,
              allowLooping: true,
              children: i.map((e, t) => (0, z.jsxs)(oy, {
                focusKey: t,
                value: e.value,
                selected: !!n && Kr(n.value, e.value),
                onChange: s,
                children: [(0, z.jsx)(LT, {
                  action: "Select",
                  active: u === t && m,
                  className: NQ.hint
                }), AQ(e)]
              }, t))
            }),
            onToggle: c,
            children: z.jsx(sy, {
              disabled: e.props.disabled || !i.length,
              sounds: gQ,
              className: NQ.dropdown,
              tooltipLabel: a,
              children: a
            })
          })]
        })
      });
    }
    function AQ(e) {
      return e ? (0, z.jsx)(hu, {
        value: e.displayName
      }) : null;
    }
    X.add("game-ui/menu/widgets/dropdown-field/dropdown-field.tsx", {
      get BoundEnumField() {
        return OQ;
      },
      set BoundEnumField(e) {
        OQ = e;
      },
      get BoundDropdownField() {
        return PQ;
      },
      set BoundDropdownField(e) {
        PQ = e;
      }
    });
    let MQ = {
      field: "field_G2v value-field_yJi",
      value: "value_kpD value_PW_",
      unset: "unset_Ksk",
      "clear-button": "clear-button_wAo secondary-button_Kvj",
      clearButton: "clear-button_wAo secondary-button_Kvj",
      icon: "icon_Y14",
      conflict: "conflict_Wvp",
      "conflict-group": "conflict-group_JaQ",
      conflictGroup: "conflict-group_JaQ",
      "conflict-group-title": "conflict-group-title_UYU",
      conflictGroupTitle: "conflict-group-title_UYU",
      "conflict-item": "conflict-item_r5c",
      conflictItem: "conflict-item_r5c",
      tooltip: "tooltip_ILS",
      "binding-hint": "binding-hint_LTZ",
      bindingHint: "binding-hint_LTZ"
    };
    X.add("game-ui/menu/widgets/input-binding-field/input-binding-field.module.scss", {
      get classes() {
        return MQ;
      },
      set classes(e) {
        Object.assign(MQ, e);
      }
    });
    let kQ = {
      hint: "hint_CzH",
      button: "button_yXv button_ehL"
    };
    X.add("game-ui/menu/widgets/input-binding-field/input-binding-hint-theme.module.scss", {
      get classes() {
        return kQ;
      },
      set classes(e) {
        Object.assign(kQ, e);
      }
    });
    function FQ(e) {
      const t = sM(e.parent, e.path);
      const n = PA(Vl, t);
      const s = PA(Hl, t);
      const i = PA(Kl, t);
      0;
      0;
      return z.jsx(UQ, {
        ...e.props,
        id: e.path,
        label: z.jsx(hu, {
          value: e.props.displayName
        }),
        onSelect: n,
        onUnset: e.props.value.canBeEmpty && e.props.value.binding.name ? s : undefined,
        onReset: e.props.value.isOriginal ? undefined : i
      });
    }
    const UQ = ({
      value: e,
      conflicts: t,
      disabled: n,
      onSelect: s,
      onUnset: i,
      onReset: a,
      ...o
    }) => {
      0;
      const [r, l] = Y.useState(false);
      0;
      const c = Y.useMemo(() => ({
        "Unset Binding": i,
        "Reset Binding": a
      }), [i, a]);
      const u = km();
      const d = _T();
      const m = bT();
      const h = TT();
      const g = sl(Ml);
      0;
      const p = Y.useMemo(() => t.filter(e => e.isBuiltIn), [t]);
      0;
      const f = Y.useMemo(() => t.filter(e => !e.isBuiltIn), [t]);
      const x = g > 1;
      const v = (i || a) && !u;
      const _ = x && v ? 0 : x || v ? 1 : 2;
      const b = n || !e.isRebindable;
      0;
      const T = Y.useMemo(() => (0, z.jsxs)(z.Fragment, {
        children: [!!p.length && (0, z.jsxs)("div", {
          className: MQ.conflictGroup,
          children: [(0, z.jsx)("div", {
            className: MQ.conflictGroupTitle,
            children: e.isBuiltIn ? (0, z.jsx)(Pc.Options.BINDING_CONFLICT_BUILTIN_WITH_BUILTIN_TOOLTIP, {}) : (0, z.jsx)(Pc.Options.BINDING_CONFLICT_MOD_WITH_BUILTIN_TOOLTIP, {})
          }), p.map((e, t) => (0, z.jsxs)("div", {
            className: Qu()(MQ.conflictItem, MQ.tooltip),
            children: [(0, z.jsx)("p", {
              children: (0, z.jsx)(Pc.Options.INPUT_MAP, {
                hash: e.optionGroup,
                showIdOnFail: true
              })
            }), (0, z.jsx)("p", {
              children: (0, z.jsx)(Pc.Options.OPTION, {
                hash: e.title,
                showIdOnFail: true
              })
            })]
          }, t))]
        }), !e.isBuiltIn && !!f.length && (0, z.jsxs)("div", {
          className: MQ.conflictGroup,
          children: [(0, z.jsx)("div", {
            className: MQ.conflictGroupTitle,
            children: (0, z.jsx)(Pc.Options.BINDING_CONFLICT_MOD_WITH_MOD_TOOLTIP, {})
          }), f.map((e, t) => (0, z.jsxs)("div", {
            className: Qu()(MQ.conflictItem, MQ.tooltip),
            children: [(0, z.jsx)("p", {
              children: (0, z.jsx)(Pc.Options.INPUT_MAP, {
                hash: e.optionGroup,
                showIdOnFail: true
              })
            }), (0, z.jsx)("p", {
              children: (0, z.jsx)(Pc.Options.OPTION, {
                hash: e.title,
                showIdOnFail: true
              })
            })]
          }, t))]
        })]
      }), [p, f, e.isBuiltIn]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: c,
        disabled: b,
        children: z.jsx(Lh, {
          onFocusChange: l,
          children: z.jsxs(xQ, {
            ...o,
            disabled: n,
            onClick: b ? undefined : s,
            children: [z.jsx(LT, {
              action: "Select",
              active: !b && r,
              theme: kQ
            }), (e.isBuiltIn && !!(e.hasConflicts & Xl.WithBuiltIn) || !e.isBuiltIn && !!e.hasConflicts) && (0, z.jsx)(bg, {
              tooltip: T,
              children: e.hasConflicts & Xl.WithBuiltIn ? (0, z.jsx)("img", {
                className: MQ.icon,
                src: "Media/Misc/Error.svg"
              }) : (0, z.jsx)("img", {
                className: MQ.icon,
                src: "Media/Misc/Warning.svg"
              })
            }), z.jsxs("div", {
              className: Qu()(MQ.field, !e.binding.name && MQ.unset, b && "disabled"),
              children: [z.jsx(bg, {
                disabled: n,
                tooltip: "" !== e.binding.name && (0, z.jsxs)(z.Fragment, {
                  children: [(0, z.jsx)("div", {
                    style: {
                      textAlign: "center"
                    },
                    children: (0, z.jsx)(Pp, {
                      binding: e.binding,
                      modifiers: e.modifiers,
                      gamepadType: d,
                      keyboardLayout: m,
                      layoutMap: h
                    })
                  }), !e.isRebindable && (0, z.jsx)(Pc.Options.CANNOT_BE_REBOUND, {}), !!e.hasConflicts && u && T]
                }),
                children: z.jsxs(L_, {
                  disableHint: true,
                  className: MQ.value,
                  onSelect: s,
                  onClick: Ob,
                  disabled: b,
                  children: ["" !== e.binding.name && (0, z.jsx)(yT, {
                    modifiers: e.modifiers,
                    bindings: [e.binding],
                    showName: ("Gamepad" === e.device || "Mouse" === e.device) && e.modifiers.length <= _,
                    shortName: Cp.FallbackToControl,
                    theme: kQ,
                    className: MQ.bindingHint
                  }), "" === e.binding.name && (0, z.jsx)(Pc.Options.INPUT_CONTROL_UNSET, {})]
                })
              }), !b && !u && null != i && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Options.UNSET_BINDING_TOOLTIP, {}),
                children: (0, z.jsx)($_, {
                  disableHint: true,
                  tinted: true,
                  focusKey: Eg,
                  src: "Media/Glyphs/Close.svg",
                  className: MQ.clearButton,
                  onSelect: i,
                  onClick: Ob
                })
              }), !b && !u && null != a && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Options.RESET_BINDING_TOOLTIP, {}),
                children: (0, z.jsx)($_, {
                  disableHint: true,
                  tinted: true,
                  focusKey: Eg,
                  src: "Media/Glyphs/ArrowCircular.svg",
                  className: MQ.clearButton,
                  onSelect: a,
                  onClick: Ob
                })
              })]
            })]
          })
        })
      });
    };
    X.add("game-ui/menu/widgets/input-binding-field/input-binding-field.tsx", {
      get BoundInputBindingField() {
        return FQ;
      },
      set BoundInputBindingField(e) {
        FQ = e;
      }
    });
    let BQ = {
      expandIcon: '"Media/Glyphs/ThickStrokeArrowDown.svg"',
      collapseIcon: '"Media/Glyphs/ThickStrokeArrowUp.svg"',
      section: "section_gUk",
      content: "content_owQ",
      expandable: "expandable_gK1",
      "title-bar": "title-bar_wU9",
      titleBar: "title-bar_wU9",
      title: "title_bwV",
      "toggle-button": "toggle-button_sQk",
      toggleButton: "toggle-button_sQk",
      "button-space": "button-space_Iht",
      buttonSpace: "button-space_Iht"
    };
    X.add("game-ui/common/section/section.module.scss", {
      get classes() {
        return BQ;
      },
      set classes(e) {
        Object.assign(BQ, e);
      }
    });
    function VQ(e) {
      0;
      return Y.useMemo(() => ({
        ...BQ,
        ...e
      }), [e]);
    }
    X.add("game-ui/common/section/section-theme.tsx", {
      get useSectionTheme() {
        return VQ;
      },
      set useSectionTheme(e) {
        VQ = e;
      }
    });
    let HQ = {
      base: "base_BM7",
      enter: "enter_lhm",
      "exit-active": "exit-active_gO8",
      exitActive: "exit-active_gO8",
      "enter-active": "enter-active_kU5",
      enterActive: "enter-active_kU5",
      exit: "exit_MDH"
    };
    X.add("game-ui/common/section/themes/transition.module.scss", {
      get classes() {
        return HQ;
      },
      set classes(e) {
        Object.assign(HQ, e);
      }
    });
    let WQ = {
      "progress-container": "progress-container_aIu",
      progressContainer: "progress-container_aIu",
      "progress-label": "progress-label_dOe",
      progressLabel: "progress-label_dOe",
      "progress-circle": "progress-circle_kUT progress-circle_OLN",
      progressCircle: "progress-circle_kUT progress-circle_OLN",
      progress: "progress_Xe2 progress_mlv",
      complete: "complete_pGO",
      failure: "failure_D8R",
      waiting: "waiting_d9O"
    };
    X.add("game-ui/menu/widgets/progress.module.scss", {
      get classes() {
        return WQ;
      },
      set classes(e) {
        Object.assign(WQ, e);
      }
    });
    let YQ = {
      checkmark: "checkmark_avN",
      icon: "icon_uou",
      dependency: "dependency_kvS",
      "dependency-label": "dependency-label_H4z",
      dependencyLabel: "dependency-label_H4z",
      "dependency-children": "dependency-children_rpG",
      dependencyChildren: "dependency-children_rpG",
      "dependency-field": "dependency-field_HfG",
      dependencyField: "dependency-field_HfG",
      details: "details_G6M",
      row: "row_kQ3",
      "title-bar": "title-bar_CZv",
      titleBar: "title-bar_CZv",
      "button-space": "button-space_vdm",
      buttonSpace: "button-space_vdm",
      "has-children": "has-children_xUg",
      hasChildren: "has-children_xUg",
      "dependency-status": "dependency-status_V5W",
      dependencyStatus: "dependency-status_V5W",
      header: "header_C6q",
      hint: "hint_KKd"
    };
    X.add("game-ui/menu/widgets/modding/modding-toolchain-dependency.module.scss", {
      get classes() {
        return YQ;
      },
      set classes(e) {
        Object.assign(YQ, e);
      }
    });
    const qQ = e => {
      const {
        state: t,
        progress: n
      } = e;
      switch (t) {
        case yl.Installing:
        case yl.Downloading:
        case yl.Removing:
        case yl.Queued:
          0;
          0;
          return z.jsxs("div", {
            className: Qu()(WQ.progressContainer, {
              [WQ.waiting]: t === yl.Queued
            }),
            children: [z.jsx(BF, {
              progress: t !== yl.Queued ? n : 100,
              max: 100,
              theme: WQ,
              indeterminate: -1 === n && t !== yl.Queued
            }), -1 !== n && (0, z.jsx)("div", {
              className: WQ.progressLabel,
              children: (0, z.jsx)(Gc, {
                value: n,
                unit: Oc.Percentage
              })
            })]
          });
        case yl.Installed:
          0;
          0;
          return z.jsx("div", {
            className: YQ.icon,
            children: z.jsx(W_, {
              className: YQ.checkmark,
              src: "Media/Glyphs/Checkmark.svg"
            })
          });
        case yl.NotInstalled:
          0;
          return z.jsx("img", {
            className: YQ.icon,
            src: "Media/Misc/Error.svg"
          });
        case yl.Outdated:
        case yl.Unknown:
          0;
          return z.jsx("img", {
            className: YQ.icon,
            src: "Media/Misc/Warning.svg"
          });
      }
      return null;
    };
    var XQ = e => {
      const {
        children: t
      } = e;
      const n = VQ(YQ);
      const s = !!t;
      0;
      const [i, a] = Y.useState(false);
      0;
      const [o, r] = Y.useState(false);
      0;
      const l = Y.useCallback(() => {
        r(e => !e);
        rp(op.expandPanel);
      }, []);
      return s ? (0, z.jsx)(Tp, {
        className: Qu()(n.section, n.expandable, n.expanded, YQ.dependencyField, {
          [YQ.hasChildren]: s
        }),
        onFocusChange: a,
        children: (0, z.jsx)(Fg, {
          expanded: o,
          expandable: true,
          onAction: l,
          children: (0, z.jsxs)(ep, {
            debugName: "MAIN_" + e.id,
            limits: qu.Bounds,
            children: [(0, z.jsx)(QQ, {
              ...e,
              expanded: o,
              focused: i,
              toggleExpanded: l
            }), (0, z.jsx)(py, {
              in: o,
              children: (0, z.jsx)(gy, {
                styles: HQ,
                children: (0, z.jsx)("div", {
                  children: (0, z.jsx)("div", {
                    className: Qu()(YQ.dependencyChildren, n.content, n.last, n.expandable),
                    children: (0, z.jsx)(SZ, {
                      debugName: "CHILDREN_" + e.id,
                      children: t
                    })
                  })
                })
              })
            })]
          })
        })
      }) : (0, z.jsx)(QQ, {
        focused: i,
        ...e
      });
    };
    const QQ = e => {
      const {
        id: t,
        toggleExpanded: n,
        expanded: s,
        combined: i,
        displayName: a,
        value: o
      } = e;
      const r = !!n;
      const l = VQ(YQ);
      0;
      const c = Y.useContext(tQ);
      0;
      const u = Y.useCallback(() => {
        if ("string" == typeof t) {
          c.onOptionMouseEnter(t);
        }
        rp(op.hoverItem);
      }, [t, c]);
      0;
      const d = Y.useCallback(() => {
        if ("string" == typeof t) {
          c.onOptionMouseLeave(t);
        }
      }, [t, c]);
      km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(SZ, {
        debugName: "HEADER_" + t,
        children: z.jsx(Ep, {
          focusKey: i ? undefined : t,
          className: Qu()(l.header, r && l.expandable, l.first, (!r || !s) && l.last),
          children: z.jsxs("div", {
            className: Qu()(l.titleBar, r && l.expandable),
            onClick: r ? n : undefined,
            onMouseEnter: u,
            onMouseLeave: d,
            children: [r && (0, z.jsx)("div", {
              className: l.buttonSpace
            }), z.jsx("div", {
              className: l.title,
              children: z.jsxs("div", {
                className: YQ.dependency,
                children: [o.icon && (0, z.jsx)("img", {
                  src: o.icon
                }), z.jsxs("div", {
                  className: YQ.dependencyLabel,
                  children: [z.jsx("div", {
                    children: z.jsx(hu, {
                      value: a
                    })
                  }), z.jsx("small", {
                    children: z.jsx(hu, {
                      value: o.version
                    })
                  })]
                }), z.jsxs("div", {
                  className: YQ.dependencyStatus,
                  children: [z.jsx("small", {
                    children: z.jsx(hu, {
                      value: o.details
                    })
                  }), z.jsx(qQ, {
                    ...o
                  })]
                })]
              })
            }), z.jsx(LT, {
              action: s ? "Collapse Group" : "Expand Group",
              active: !e.disabled && e.focused,
              className: YQ.hint
            }), r && (0, z.jsx)(W_, {
              src: s ? l.collapseIcon : l.expandIcon,
              className: l.toggleButton
            })]
          })
        })
      });
    };
    var ZQ = e => {
      const t = sM(e.parent, e.path);
      0;
      return z.jsx(XQ, {
        ...e.props,
        id: e.path,
        combined: e.children.some(e => e.props.__Type === _l.ModdingToolchainDependency),
        children: e.children.some(e => !e.props.hidden) && (0, z.jsx)(pZ, {
          parent: t,
          data: e.children
        })
      });
    };
    X.add("game-ui/menu/widgets/modding/modding-toolchain-dependency.tsx", {
      get ModdingToolchainDependency() {
        return XQ;
      },
      set ModdingToolchainDependency(e) {
        XQ = e;
      },
      get BoundModdingToolchainDependency() {
        return ZQ;
      },
      set BoundModdingToolchainDependency(e) {
        ZQ = e;
      }
    });
    let JQ = {
      "multiline-text": "multiline-text_INX",
      multilineText: "multiline-text_INX"
    };
    X.add("game-ui/menu/widgets/multiline-text/multiline-text.module.scss", {
      get classes() {
        return JQ;
      },
      set classes(e) {
        Object.assign(JQ, e);
      }
    });
    var tZ = e => (0, z.jsxs)(Ep, {
      className: JQ.multilineText,
      children: [e.props.icon && (0, z.jsx)("img", {
        src: e.props.icon
      }), (0, z.jsx)(bb, {
        children: (0, z.jsx)(hu, {
          value: e.props.displayName
        })
      })]
    });
    X.add("game-ui/menu/widgets/multiline-text/multiline-text.tsx", {
      get BoundMultilineText() {
        return tZ;
      },
      set BoundMultilineText(e) {
        tZ = e;
      }
    });
    let nZ = {
      slider: "slider_fKm slider_pUS",
      range: "range_KXa range_iUN"
    };
    X.add("game-ui/menu/themes/slider.module.scss", {
      get classes() {
        return nZ;
      },
      set classes(e) {
        Object.assign(nZ, e);
      }
    });
    let iZ = {
      value: "value_hdd",
      slider: "slider_KjX",
      hint: "hint_HoI"
    };
    X.add("game-ui/menu/widgets/slider-field/slider-field.module.scss", {
      get classes() {
        return iZ;
      },
      set classes(e) {
        Object.assign(iZ, e);
      }
    });
    function oZ(e) {
      0;
      return z.jsx(lZ, {
        ...e
      });
    }
    function rZ(e) {
      0;
      return z.jsx(lZ, {
        ...e
      });
    }
    const lZ = e => {
      0;
      const t = Y.useMemo(() => Object.values(Oc).find(t => t === e.props.unit), [e.props.unit]);
      const n = KM(e.props.step ?? 1);
      const s = e.props.scaleDragVolume ? BM : UM;
      0;
      const [i, a] = Y.useState(e.props.value);
      const o = PA(BA, sM(e.parent, e.path));
      0;
      const r = Y.useCallback(t => {
        a(t);
        if (!e.props.updateOnDragEnd) {
          o(t);
        }
      }, [o, e.props.updateOnDragEnd]);
      0;
      const l = Y.useCallback(() => {
        if (e.props.updateOnDragEnd) {
          o(i);
        }
      }, [i, o, e.props.updateOnDragEnd]);
      0;
      Y.useEffect(() => {
        a(e.props.value);
      }, [e.props.value]);
      0;
      const [c, u] = Y.useState(false);
      0;
      const [d, m] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: u,
        children: z.jsxs(xQ, {
          ...e.props,
          id: e.path,
          label: z.jsx(hu, {
            value: e.props.displayName
          }),
          children: [z.jsx(LT, {
            action: "Select",
            active: !e.props.disabled && !d && c,
            className: iZ.hint
          }), z.jsx(LT, {
            action: "Back",
            active: !e.props.disabled && d && c,
            className: iZ.hint
          }), z.jsx("div", {
            className: iZ.value,
            children: t !== Oc.Custom ? (0, z.jsx)(Gc, {
              value: e.props.value,
              unit: t
            }) : (0, z.jsx)(Vc, {
              value: e.props.value,
              unit: t,
              signed: e.props.signed,
              fractionDigits: e.props.fractionDigits,
              separateThousands: e.props.separateThousands,
              maxValueWithFraction: e.props.maxValueWithFraction,
              unitFormat: uc("CustomFormat", (t, n) => Ec(t, `Options.FORMAT[${e.path}]`, "{SIGN}{VALUE}", {
                VALUE: n.VALUE,
                SIGN: n.SIGN
              }, true), () => true)
            })
          }), z.jsx(Np, {
            onSelectedStateChanged: m,
            children: z.jsx(GM, {
              value: i,
              start: e.props.min,
              end: e.props.max,
              gamepadStep: e.props.step,
              disabled: e.props.disabled,
              valueTransformer: n,
              sounds: s,
              theme: nZ,
              className: iZ.slider,
              onChange: r,
              onDragEnd: l
            })
          })]
        })
      });
    };
    X.add("game-ui/menu/widgets/slider-field/slider-field.tsx", {
      get BoundIntSliderField() {
        return oZ;
      },
      set BoundIntSliderField(e) {
        oZ = e;
      },
      get BoundFloatSliderField() {
        return rZ;
      },
      set BoundFloatSliderField(e) {
        rZ = e;
      }
    });
    let cZ = {
      "string-field": "string-field_qxi",
      stringField: "string-field_qxi",
      hint: "hint_nEs"
    };
    X.add("game-ui/menu/widgets/string-input-field/string-input-field.module.scss", {
      get classes() {
        return cZ;
      },
      set classes(e) {
        Object.assign(cZ, e);
      }
    });
    var dZ = e => {
      const t = PA(BA, sM(e.parent, e.path));
      0;
      const n = Y.useCallback(e => {
        t(e.target.value);
      }, [t]);
      0;
      const [s, i] = Y.useState(false);
      0;
      const [a, o] = Y.useState(false);
      0;
      const r = Y.useCallback(() => {
        o(false);
      }, []);
      0;
      const l = Y.useCallback(() => {
        o(true);
      }, []);
      const c = !e.props.disabled && s;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: i,
        children: z.jsxs(xQ, {
          ...e.props,
          id: e.path,
          label: z.jsx(hu, {
            value: e.props.displayName
          }),
          children: [z.jsx(LT, {
            action: a ? "Back" : "Select",
            active: c,
            className: cZ.hint
          }), z.jsx(zE, {
            ...e.props,
            onChange: n,
            className: Qu()(cZ.stringField, e.props.disabled && "disabled"),
            value: e.props.value,
            multiline: e.props.multiline || undefined,
            maxLength: e.props.maxLength || undefined,
            onBlur: r,
            onFocus: l
          })]
        })
      });
    };
    X.add("game-ui/menu/widgets/string-input-field/string-input-field.tsx", {
      get BoundStringInputField() {
        return dZ;
      },
      set BoundStringInputField(e) {
        dZ = e;
      }
    });
    let mZ = {
      toggle: "toggle_th_",
      "radio-toggle": "radio-toggle_M9z toggle_H7r item-mouse-states_Fmi",
      radioToggle: "radio-toggle_M9z toggle_H7r item-mouse-states_Fmi",
      bullet: "bullet_TAG bullet_rDK",
      hint: "hint_hz7"
    };
    X.add("game-ui/menu/widgets/toggle-field/toggle-field.module.scss", {
      get classes() {
        return mZ;
      },
      set classes(e) {
        Object.assign(mZ, e);
      }
    });
    function gZ(e) {
      const t = PA(BA, sM(e.parent, e.path));
      0;
      const n = Y.useCallback(() => {
        rp(op.selectToggle);
        t(!e.props.value);
      }, [t, e.props.value]);
      const s = km();
      0;
      const [i, a] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: a,
        children: z.jsxs(xQ, {
          ...e.props,
          id: e.path,
          label: z.jsx(hu, {
            value: e.props.displayName
          }),
          onClick: n,
          children: [z.jsx(LT, {
            action: "Select",
            active: !e.props.disabled && s && i,
            className: mZ.hint
          }), z.jsx(kb, {
            checked: e.props.value,
            className: mZ.toggle,
            onChange: t,
            disabled: e.props.disabled
          })]
        })
      });
    }
    X.add("game-ui/menu/widgets/toggle-field/toggle-field.tsx", {
      get BoundToggleField() {
        return gZ;
      },
      set BoundToggleField(e) {
        gZ = e;
      }
    });
    var pZ = ({
      parent: e,
      data: t
    }) => {
      0;
      const n = Y.useMemo(() => {
        let n;
        let s = -1;
        return t.reduce((t, i, a) => {
          if (i.props.__Type === AA.Label) {
            const o = i.props.level;
            const r = e + ".breadcrumbs." + a;
            if (0 === o) {
              n = {
                ...i,
                path: r,
                props: {
                  __Type: AA.Breadcrumbs
                },
                children: [{
                  ...i,
                  path: r + "." + a
                }]
              };
              t.push(n);
            } else if (n && o === s) {
              n = {
                ...n,
                path: r,
                children: n.children.filter(e => e.props.level !== o).concat(i)
              };
              t.push(n);
            } else {
              n?.children.push({
                ...i,
                path: r + "." + a
              });
            }
            s = o;
          } else {
            t.push(i);
          }
          return t;
        }, []);
      }, [t, e]);
      0;
      return z.jsx(mM, {
        parent: e,
        components: fZ,
        data: n
      });
    };
    var fZ = {
      [AA.Button]: oQ,
      [AA.ButtonRow]: lQ,
      [AA.StringInputField]: dZ,
      [AA.MultilineText]: tZ,
      [_l.ButtonWithConfirmation]: rQ,
      [AA.FloatSliderField]: rZ,
      [AA.IntSliderField]: oZ,
      [AA.Divider]: KX,
      [AA.Label]: XX,
      [AA.Breadcrumbs]: eQ,
      [AA.ToggleField]: gZ,
      [AA.EnumField]: OQ,
      [_l.InputBindingField]: FQ,
      [_l.DropdownField]: PQ,
      [AA.ValueField]: pQ,
      [AA.LocalizedValueField]: fQ,
      [_l.ScreenResolutionDropdownField]: PQ,
      [_l.ModdingToolchainDependency]: ZQ,
      [_l.DirectoryPickerField]: bQ
    };
    X.add("game-ui/menu/widgets/option-widget-renderer.tsx", {
      get OptionWidgetListRenderer() {
        return pZ;
      },
      set OptionWidgetListRenderer(e) {
        pZ = e;
      },
      get optionsWidgetComponents() {
        return fZ;
      },
      set optionsWidgetComponents(e) {
        fZ = e;
      }
    });
    let xZ = {
      "option-page-header": "option-page-header_fSe",
      optionPageHeader: "option-page-header_fSe",
      "option-page-sub-header": "option-page-sub-header_FIo",
      optionPageSubHeader: "option-page-sub-header_FIo",
      "sections-tabs": "sections-tabs_EK2",
      sectionsTabs: "sections-tabs_EK2",
      shrink: "shrink_GWC",
      tab: "tab_P7S",
      first: "first_vLK",
      last: "last_BSJ"
    };
    X.add("game-ui/menu/components/options-screen/option-page/option-page-header.module.scss", {
      get classes() {
        return xZ;
      },
      set classes(e) {
        Object.assign(xZ, e);
      }
    });
    var _Z = ({
      sections: e,
      subHeader: t,
      selectedId: n,
      className: s,
      onSelect: i
    }) => (0, z.jsxs)("div", {
      className: Qu()(xZ.optionPageHeader, s),
      children: [e.length >= 2 ? (0, z.jsx)("div", {
        className: Qu()(xZ.sectionsTabs, xZ.shrink),
        children: (0, z.jsx)(xW, {
          action: "Switch Tab",
          children: e.map((t, s) => (0, z.jsx)(bZ, {
            section: t,
            selected: n === t.id,
            first: 0 === s,
            last: s === e.length - 1,
            onSelect: i
          }, s))
        })
      }) : (0, z.jsx)("div", {}), !!t && (0, z.jsx)("div", {
        className: xZ.optionPageSubHeader,
        children: t
      })]
    });
    const bZ = ({
      section: e,
      selected: t,
      first: n,
      last: s,
      onSelect: i
    }) => {
      0;
      0;
      const a = jE(pE.PS, z.jsx(Pc.Options.TAB_PS, {
        hash: e.id
      }), z.jsx(Pc.Options.TAB, {
        hash: e.id
      }));
      0;
      const o = Y.useCallback(() => i(e.id), [i, e.id]);
      0;
      0;
      return z.jsx(bg, {
        tooltip: a,
        children: z.jsx(L_, {
          focusKey: Eg,
          selected: t,
          className: Qu()(xZ.tab, xZ.shrink, n && xZ.first, s && xZ.last),
          onSelect: o,
          children: a
        })
      });
    };
    X.add("game-ui/menu/components/options-screen/option-page/option-page-header.tsx", {
      get OptionPageHeader() {
        return _Z;
      },
      set OptionPageHeader(e) {
        _Z = e;
      }
    });
    let TZ = {
      "option-page": "option-page_CW8",
      optionPage: "option-page_CW8",
      "main-column": "main-column_D0A",
      mainColumn: "main-column_D0A",
      scrollable: "scrollable_Ptf",
      "info-column": "info-column_uQ0",
      infoColumn: "info-column_uQ0",
      "info-title": "info-title_a3p",
      infoTitle: "info-title_a3p",
      "info-description": "info-description_wwd",
      infoDescription: "info-description_wwd"
    };
    X.add("game-ui/menu/components/options-screen/option-page/option-page.module.scss", {
      get classes() {
        return TZ;
      },
      set classes(e) {
        Object.assign(TZ, e);
      }
    });
    const IZ = (e, t) => {
      if (e) {
        for (let n = 0; n < t.length; n++) {
          if (t[n].path === e) {
            return t[n];
          }
        }
        for (let n = 0; n < t.length; n++) {
          if (t[n].children.length) {
            const s = IZ(e, t[n].children);
            if (s) {
              return s;
            }
          }
        }
      }
    };
    var yZ = ({
      page: e,
      selectedSectionId: t,
      className: n,
      isSearch: s,
      subHeader: i,
      onSelectSection: a
    }) => {
      const o = e.sections.find(e => e.id === t);
      0;
      const [r, l] = Y.useState(false);
      0;
      const [c, u] = Y.useState(null);
      0;
      const [d, m] = Y.useState(null);
      0;
      const h = Y.useCallback(e => {
        if (e) {
          u(e);
        }
      }, []);
      const g = km();
      0;
      const [p, f] = Y.useState(null);
      const x = g && r ? d ?? c : p;
      0;
      const v = Y.useMemo(() => ({
        onOptionMouseEnter: f,
        onOptionMouseLeave: e => f(t => t === e ? null : t),
        onFocusSet: m,
        onFocusReset: e => m(t => t === e ? null : t)
      }), []);
      const _ = nM("options");
      const b = sl(jl);
      const T = IZ(x, b);
      const E = e.sections.filter(e => e.isVisible);
      0;
      Y.useEffect(() => () => {
        nc(e.id);
      }, [e.id]);
      const I = "string" == typeof x ? x : null;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: l,
        children: z.jsx("div", {
          className: Qu()(TZ.optionPage, n),
          children: z.jsxs(ep, {
            children: [z.jsx("div", {
              className: TZ.mainColumn,
              children: z.jsxs(Xg, {
                activation: $u.Always,
                limits: qu.Bounds,
                focused: c,
                direction: Mg.Vertical,
                onChange: h,
                onRefocus: Qg,
                children: [!s && (i || E.length > 1) && (0, z.jsx)(Lh, {
                  children: (0, z.jsx)(_Z, {
                    sections: E,
                    selectedId: t,
                    className: TZ.header,
                    onSelect: a,
                    subHeader: i
                  })
                }), s && !b.length ? (0, z.jsx)(YX, {
                  children: (0, z.jsx)("div", {
                    children: (0, z.jsx)(Pc.Options.SEARCH, {
                      hash: "nothing found"
                    })
                  })
                }) : (0, z.jsx)(ab, {
                  className: TZ.scrollable,
                  children: null != o && (0, z.jsx)(tQ.Provider, {
                    value: v,
                    children: (0, z.jsx)(pZ, {
                      parent: _,
                      data: b
                    })
                  })
                }, t)]
              })
            }), z.jsx("div", {
              className: TZ.infoColumn,
              children: I && (0, z.jsxs)(z.Fragment, {
                children: [(0, z.jsx)("div", {
                  className: TZ.infoTitle,
                  children: T && "displayName" in T.props && T.props.displayName ? (0, z.jsx)(hu, {
                    value: T.props.displayName
                  }) : (0, z.jsx)(Pc.Options.OPTION, {
                    hash: I
                  })
                }), (0, z.jsx)("div", {
                  className: TZ.infoDescription,
                  children: (0, z.jsx)(bb, {
                    focusKey: Eg,
                    children: T && "description" in T.props && T.props.description ? (0, z.jsx)(hu, {
                      value: T.props.description
                    }) : (0, z.jsx)(Pc.Options.OPTION_DESCRIPTION, {
                      hash: I
                    })
                  })
                })]
              })
            })]
          })
        })
      });
    };
    var SZ = ({
      focusKey: e,
      direction: t,
      children: n,
      debugName: s = "OptionPageFocusedKeyOverride"
    }) => {
      0;
      const i = Y.useContext(tQ);
      0;
      const [a, o] = Y.useState(null);
      0;
      const r = Y.useCallback(e => {
        if ("string" == typeof e) {
          o(e);
          i.onFocusSet(e);
        }
      }, [i]);
      0;
      const l = Y.useCallback(e => {
        if (!(e || "string" != typeof a)) {
          i.onFocusReset(a);
          o(null);
        }
      }, [a, i]);
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: l,
        children: z.jsx(ep, {
          debugName: s,
          focusKey: e,
          onChange: r,
          direction: t,
          limits: qu.Bounds,
          children: n
        })
      });
    };
    X.add("game-ui/menu/components/options-screen/option-page/option-page.tsx", {
      get OptionPage() {
        return yZ;
      },
      set OptionPage(e) {
        yZ = e;
      },
      get OptionPageFocusedKeyOverride() {
        return SZ;
      },
      set OptionPageFocusedKeyOverride(e) {
        SZ = e;
      }
    });
    let jZ = {
      "search-input": "search-input_Z06",
      searchInput: "search-input_Z06",
      hidden: "hidden_LPB",
      "search-input-clear": "search-input-clear_VxJ",
      searchInputClear: "search-input-clear_VxJ",
      hint: "hint_Oz8",
      "clear-input-hint": "clear-input-hint_m6F",
      clearInputHint: "clear-input-hint_m6F"
    };
    X.add("game-ui/menu/components/options-screen/options-search.module.scss", {
      get classes() {
        return jZ;
      },
      set classes(e) {
        Object.assign(jZ, e);
      }
    });
    var NZ = new Tg("SEARCH_KEY");
    var wZ = FT({
      Clear: "Media/Glyphs/Clear.svg"
    });
    var OZ = "All results";
    var PZ = () => {
      const e = ac();
      const t = sl(Sl);
      0;
      const [n, s] = Y.useState("");
      0;
      const [i, a] = Y.useState();
      0;
      const [o, r] = Y.useState(() => new Set());
      0;
      const l = Y.useCallback(e => {
        if (e.length < 2) {
          a(undefined);
        }
        s(e);
      }, []);
      0;
      Y.useEffect(() => {
        const s = [];
        const a = new Set();
        if (n.length >= 2) {
          const o = n.trim().toLowerCase();
          t.forEach(t => t.sections.forEach(n => {
            n.items.forEach(n => {
              if (!n.searchHidden) {
                const r = gu(e, n.displayName).toLowerCase();
                if (r?.includes(o)) {
                  if (!(i && t.id !== i)) {
                    s.push(n.id);
                  }
                  return void a.add(t.id);
                }
              }
            });
          }));
          zl(s, n);
          r(a);
        } else {
          zl([]);
          r(a);
        }
      }, [t, n, i, e]);
      return {
        setSearchQuery: l,
        searchQuery: n,
        matchingPages: o,
        focusedPage: i,
        setFocusedPage: a,
        isSearching: n.length >= 2
      };
    };
    var LZ = ({
      search: e
    }) => {
      const {
        isSearching: t,
        focusedPage: n,
        setFocusedPage: s,
        matchingPages: i
      } = e;
      let a = null;
      if (t && (i.size > 1 || n && !i.has(n) && i.size > 0)) {
        const e = {
          id: OZ,
          sections: []
        };
        0;
        a = z.jsx(GZ, {
          item: e,
          selected: !n,
          beta: e.beta,
          onSelect: () => {
            if (n) {
              s(undefined);
            }
          }
        }, e.id);
      }
      return a;
    };
    var AZ = Y.forwardRef(function ({
      search: e,
      focusKey: t,
      onBack: n = () => {},
      hidden: s
    }, i) {
      const {
        searchQuery: a,
        setSearchQuery: o
      } = e;
      const r = mW();
      0;
      const l = Y.useCallback(e => {
        o(e);
      }, [o]);
      0;
      const [c, u] = Y.useState(false);
      0;
      const [d, m] = Y.useState(false);
      0;
      const h = Y.useCallback(() => {
        m(false);
      }, []);
      0;
      const g = Y.useCallback(() => {
        m(true);
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(Lh, {
          onFocusChange: u,
          children: z.jsx(sp, {
            focusKey: t,
            children: z.jsxs(ep, {
              direction: Mg.Horizontal,
              children: [z.jsx(LT, {
                action: d ? "Close" : "Select",
                active: c,
                showLabel: true,
                className: jZ.hint
              }), z.jsx(zE, {
                value: a,
                onChange: e => o(e.target.value),
                onBack: () => n(),
                vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                  hash: "Search"
                }),
                placeholder: z.jsx(Pc.Options.SEARCH, {
                  hash: "input placeholder"
                }),
                className: Qu()(r.input, jZ.searchInput, s && jZ.hidden),
                ref: i,
                onBlur: h,
                onFocus: g
              }), z.jsx(LT, {
                action: "Clear Search",
                active: c && e.isSearching,
                className: Qu()(jZ.hint, jZ.clearInputHint)
              }), a && (0, z.jsx)($_, {
                tinted: true,
                src: wZ.Clear,
                className: jZ.searchInputClear,
                onSelect: () => l("")
              })]
            })
          })
        })
      });
    });
    X.add("game-ui/menu/components/options-screen/options-search.tsx", {
      get SEARCH_KEY() {
        return NZ;
      },
      set SEARCH_KEY(e) {
        NZ = e;
      },
      get images() {
        return wZ;
      },
      set images(e) {
        wZ = e;
      },
      get allResultsId() {
        return OZ;
      },
      set allResultsId(e) {
        OZ = e;
      },
      get useSearch() {
        return PZ;
      },
      set useSearch(e) {
        PZ = e;
      },
      get AllResultsMenuItem() {
        return LZ;
      },
      set AllResultsMenuItem(e) {
        LZ = e;
      },
      get OptionsSearch() {
        return AZ;
      },
      set OptionsSearch(e) {
        AZ = e;
      }
    });
    let MZ = {
      content: "content_Mtn",
      menu: "menu_hb1 child-opacity-transition_nkS",
      scrollable: "scrollable_Fma",
      item: "item_pq7",
      primary: "primary_Q54",
      detail: "detail_eTp child-opacity-transition_nkS",
      "option-section": "option-section_VzQ",
      optionSection: "option-section_VzQ",
      "advanced-toggle": "advanced-toggle_fyX",
      advancedToggle: "advanced-toggle_fyX",
      "advanced-toggle-checked": "advanced-toggle-checked_FFb",
      advancedToggleChecked: "advanced-toggle-checked_FFb",
      "menu-item-left": "menu-item-left_g1u",
      menuItemLeft: "menu-item-left_g1u",
      "menu-item-right": "menu-item-right_vNX",
      menuItemRight: "menu-item-right_vNX"
    };
    X.add("game-ui/menu/components/options-screen/options-screen.module.scss", {
      get classes() {
        return MZ;
      },
      set classes(e) {
        Object.assign(MZ, e);
      }
    });
    const kZ = new Tg("MENU_KEY");
    const DZ = new Tg("CONTENT_KEY");
    let FZ = false;
    var UZ = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n
    }, s) {
      const i = sl(Sl);
      const a = sl(Cl);
      const o = i.find(e => e.id === a);
      const r = sl(Nl);
      0;
      const [l, c] = Y.useState(FZ);
      const {
        translate: u
      } = ac();
      const d = PZ();
      const {
        isSearching: m,
        setSearchQuery: h,
        focusedPage: g,
        setFocusedPage: p,
        matchingPages: f
      } = d;
      0;
      const [x, v] = Y.useState(kZ);
      0;
      const [_, b] = Y.useState(false);
      0;
      const [T, E] = Y.useState();
      0;
      const I = Y.useMemo(() => ({
        setFocusedKey: () => {}
      }), []);
      0;
      const y = Y.useCallback(() => {
        I.setFocusedKey(gz);
        v(DZ);
      }, [I]);
      0;
      const S = Y.useCallback(() => {
        I.setFocusedKey(gz);
        v(kZ);
      }, [I]);
      0;
      const j = Y.useCallback(() => {
        if (T === kZ) {
          S();
        } else {
          y();
        }
      }, [T, S, y]);
      0;
      const C = Y.useCallback(() => {
        h("");
        n();
      }, [n, h]);
      0;
      const N = Y.useCallback((e, t = "") => {
        if (m && e === OZ) {
          return void p(undefined);
        }
        const n = i.find(t => t.id === e);
        const s = t || null != n && n.sections.length > 0 ? n?.sections[0]?.id : null;
        if (n) {
          if (m) {
            p(n.id);
          } else if (s && g !== n.id) {
            Wl(n.id, s, FZ);
          }
        }
      }, [g, m, i, p]);
      0;
      const w = Y.useCallback(e => {
        if (o) {
          const t = o.sections.find(t => t.id === e);
          if (t) {
            Wl(o.id, t.id, FZ);
            y();
          }
        }
      }, [y, o]);
      const O = vp(N);
      0;
      const P = Y.useCallback(e => {
        if (r) {
          c(e);
          FZ = e;
          w(r);
        }
      }, [w, r]);
      0;
      const L = Y.useMemo(() => null != o ? o.sections.filter(e => e.isVisible).map(e => e.id) : [], [o]);
      0;
      const A = Y.useMemo(() => !!o?.sections.some(e => e.items.some(e => e.isAdvanced && e.isVisible)), [o]);
      const M = i.filter(e => (!m || f.has(e.id) || g === e.id) && e.builtIn);
      const R = i.filter(e => (!m || f.has(e.id) || g === e.id) && !e.builtIn).sort((e, t) => u(`Options.SECTION[${e.id}]`)?.localeCompare(u(`Options.SECTION[${t.id}]`) || "") || 1);
      const k = km();
      0;
      const D = Y.useMemo(() => ({
        [l ? "Hide Advanced" : "Show Advanced"]: () => P(!l)
      }), [P, l]);
      0;
      const F = Y.useRef(null);
      0;
      const U = Y.useMemo(() => ({
        "Search Options": () => {
          if (document.activeElement !== F.current) {
            E(x);
            F.current?.focus();
            b(true);
            I.setFocusedKey(NZ);
          } else {
            F.current?.blur();
            b(false);
            j();
          }
        }
      }), [j, x, I]);
      0;
      const B = Y.useMemo(() => ({
        "Clear Search": () => {
          F.current?.blur();
          b(false);
          h("");
          j();
        }
      }), [j, h]);
      0;
      const G = Y.useCallback(e => {
        b(e === NZ);
      }, []);
      0;
      const V = Y.useCallback(() => {
        b(false);
        j();
      }, [j]);
      0;
      const H = Y.useMemo(() => ({
        "Switch Option Section": e => {
          let t = M.findIndex(e => e.id === a);
          if (-1 === t) {
            t = R.findIndex(e => e.id === a);
            if (-1 === t) {
              return;
            }
            t += M.length;
          }
          const n = M.length + R.length;
          t = (t + n + e) % n;
          if (t < M.length) {
            N(M[t].id);
          } else {
            N(R[t - M.length].id);
          }
          y();
        }
      }), [M, R, N, y, a]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: H,
        disabled: !k || _ || M.length + R.length <= 1,
        children: z.jsx(Lg, {
          actions: U,
          disabled: !k || _,
          children: z.jsx(Lg, {
            actions: B,
            disabled: !k || !m,
            children: z.jsx(fz.Provider, {
              value: I,
              children: z.jsx(xz, {
                ref: s,
                focusKey: e,
                title: z.jsx(Pc.Options.SCREEN_TITLE, {}),
                className: t,
                onClose: C,
                onFocusChanged: G,
                header: z.jsx(AZ, {
                  search: d,
                  focusKey: !k || _ ? NZ : Eg,
                  ref: F,
                  onBack: V,
                  hidden: k && !_ && !m
                }),
                children: z.jsx("div", {
                  className: MZ.content,
                  children: z.jsx(UX, {
                    tabs: m ? [] : L,
                    selectedTab: r,
                    onSelect: w,
                    children: z.jsxs(ep, {
                      forceFocus: x,
                      direction: Mg.Horizontal,
                      onChange: v,
                      onRefocus: () => x,
                      children: [z.jsx(Tp, {
                        className: MZ.menu,
                        children: z.jsx(ab, {
                          className: MZ.scrollable,
                          children: z.jsxs(Xg, {
                            focusKey: kZ,
                            focused: m ? g || OZ : a,
                            allowLooping: true,
                            direction: Mg.Vertical,
                            onChange: O,
                            children: [z.jsx(LZ, {
                              search: d
                            }), M.map(e => (0, z.jsx)(GZ, {
                              item: e,
                              beta: e.beta,
                              selected: g === e.id || !m && a === e.id || M.length + R.length === 1,
                              onSelect: N
                            }, e.id)), !(!M.length || !R.length) && (0, z.jsx)(KX, {}), R.map(e => (0, z.jsx)(GZ, {
                              item: e,
                              beta: e.beta,
                              selected: g === e.id || !m && a === e.id || M.length + R.length === 1,
                              onSelect: N
                            }, e.id + "mod"))]
                          })
                        })
                      }), z.jsx(Tp, {
                        className: MZ.detail,
                        children: z.jsx(sp, {
                          focusKey: DZ,
                          children: null != o && (0, z.jsx)(Lg, {
                            actions: D,
                            disabled: !A || m,
                            children: (0, z.jsx)(yZ, {
                              page: o,
                              selectedSectionId: r,
                              onSelectSection: w,
                              className: MZ.optionSection,
                              isSearch: m,
                              subHeader: !k && A && (0, z.jsx)(BZ, {
                                value: l,
                                onChange: P
                              })
                            }, a)
                          })
                        })
                      })]
                    })
                  })
                })
              })
            })
          })
        })
      });
    });
    const BZ = ({
      value: e,
      onChange: t
    }) => {
      0;
      const n = Y.useCallback(() => t(!e), [t, e]);
      0;
      0;
      return z.jsx(L_, {
        className: Qu()(MZ.advancedToggle, e && MZ.advancedToggleChecked),
        onSelect: n,
        children: z.jsx(Pc.Options.SEARCH, {
          hash: e ? "hide advanced" : "show advanced"
        })
      });
    };
    var GZ = ({
      item: e,
      selected: t,
      suffix: n,
      beta: s,
      onSelect: i
    }) => {
      0;
      const a = Y.useCallback(() => i(e.id), [e.id, i]);
      const o = km();
      0;
      0;
      0;
      0;
      return z.jsxs(L_, {
        disableHint: true,
        focusKey: e.id,
        selected: t,
        className: Qu()(MZ.item, !o && MZ.primary),
        onSelect: a,
        children: [z.jsxs("div", {
          className: MZ.menuItemLeft,
          children: [z.jsx("span", {
            children: z.jsx(Pc.Options.SECTION, {
              hash: e.id,
              showIdOnFail: true
            })
          }), n && (0, z.jsx)("span", {
            children: n
          })]
        }), s && (0, z.jsx)("div", {
          className: MZ.menuItemRight,
          children: (0, z.jsx)(PX, {})
        })]
      });
    };
    X.add("game-ui/menu/components/options-screen/options-screen.tsx", {
      get OptionsScreen() {
        return UZ;
      },
      set OptionsScreen(e) {
        UZ = e;
      },
      get MenuItem() {
        return GZ;
      },
      set MenuItem(e) {
        GZ = e;
      }
    });
    let VZ = {
      base: "base_KL3",
      enter: "enter_VtK",
      "exit-active": "exit-active_ZDb",
      exitActive: "exit-active_ZDb",
      "enter-active": "enter-active_VOn",
      enterActive: "enter-active_VOn",
      exit: "exit_qAg"
    };
    X.add("game-ui/menu/transitions/shrink-fade.module.scss", {
      get classes() {
        return VZ;
      },
      set classes(e) {
        Object.assign(VZ, e);
      }
    });
    let KZ = {
      "pause-menu": "pause-menu_uzz menu-theme_k91",
      pauseMenu: "pause-menu_uzz menu-theme_k91",
      "content-container": "content-container_Ake",
      contentContainer: "content-container_Ake",
      content: "content_X6U",
      "action-hints": "action-hints_o79 child-opacity-transition_nkS",
      actionHints: "action-hints_o79 child-opacity-transition_nkS",
      version: "version_Vtb"
    };
    X.add("game-ui/menu/components/pause-menu/pause-menu.module.scss", {
      get classes() {
        return KZ;
      },
      set classes(e) {
        Object.assign(KZ, e);
      }
    });
    var zZ = ({
      className: e,
      children: t
    }) => {
      up(lz.value !== rz.Loading ? cp : undefined);
      0;
      const [n, s] = Y.useState(false);
      const i = km();
      const a = sl(gk);
      Hp(!n);
      Kp(!n);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: s,
        children: z.jsx(jp, {
          children: z.jsx(dh, {
            styles: VZ,
            children: z.jsxs("div", {
              className: Qu()(KZ.pauseMenu, e),
              children: [z.jsxs("div", {
                className: KZ.contentContainer,
                children: [z.jsx("div", {
                  className: KZ.content,
                  children: t
                }), i && (0, z.jsx)(fT, {
                  className: KZ.actionHints
                })]
              }), z.jsx("div", {
                className: KZ.version,
                children: a
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/menu/components/pause-menu/pause-menu.tsx", {
      get PauseMenu() {
        return zZ;
      },
      set PauseMenu(e) {
        zZ = e;
      }
    });
    var YZ = e => (0, z.jsx)(cd, {
      children: e.children
    });
    X.add("game-ui/modding/modding-hook.tsx", {
      get ModdingHook() {
        return YZ;
      },
      set ModdingHook(e) {
        YZ = e;
      }
    });
    var qZ;
    var XZ;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Map = 1] = "Map";
      e[e.Climate = 2] = "Climate";
      e[e.Water = 3] = "Water";
      e[e.Resources = 4] = "Resources";
      e[e.ObjectContainer = 5] = "ObjectContainer";
      e[e.Object = 6] = "Object";
      e[e.SubMesh = 7] = "SubMesh";
    }(qZ || (qZ = {}));
    (function (e) {
      e[e.Default = 0] = "Default";
      e[e.FirstPerson = 1] = "FirstPerson";
      e[e.Orbit = 2] = "Orbit";
    })(XZ || (XZ = {}));
    var QZ = $r("editorHierarchy", "width");
    var ZZ = $r("editorHierarchy", "totalCount");
    var JZ = $r("editorHierarchy", "selectedId");
    var eJ = $r("editorHierarchy", "viewport");
    var tJ = el("editorHierarchy", "setWidth");
    var nJ = el("editorHierarchy", "setViewportRange");
    var sJ = el("editorHierarchy", "setSelectedId");
    var iJ = el("editorHierarchy", "setExpanded");
    var aJ = el("editorHierarchy", "bulldoze");
    var oJ = el("editorHierarchy", "save");
    var rJ = $r("editorHierarchy", "cameraMode");
    var lJ = el("editorHierarchy", "toggleCameraMode");
    var cJ = $r("editorTutorials", "tutorialsEnabled");
    var uJ = Jr("editorTutorials", "toggleTutorials");
    function dJ(e, t) {
      return e.type === t.type && Ur(e.entity, t.entity) && e.subIndex === t.subIndex;
    }
    X.add("game-ui/editor/data-binding/editor-hierarchy-bindings.ts", {
      get ItemType() {
        return qZ;
      },
      set ItemType(e) {
        qZ = e;
      },
      get EditorCameraMode() {
        return XZ;
      },
      set EditorCameraMode(e) {
        XZ = e;
      },
      get hierarchyWidth() {
        return hierarchyWidth;
      },
      set hierarchyWidth(e) {
        hierarchyWidth = e;
      },
      get totalCount() {
        return totalCount;
      },
      set totalCount(e) {
        totalCount = e;
      },
      get selectedId() {
        return selectedId;
      },
      set selectedId(e) {
        selectedId = e;
      },
      get viewport() {
        return viewport;
      },
      set viewport(e) {
        viewport = e;
      },
      get setWidth() {
        return tJ;
      },
      set setWidth(e) {
        tJ = e;
      },
      get setViewportRange() {
        return nJ;
      },
      set setViewportRange(e) {
        nJ = e;
      },
      get setSelectedId() {
        return sJ;
      },
      set setSelectedId(e) {
        sJ = e;
      },
      get setExpanded() {
        return iJ;
      },
      set setExpanded(e) {
        iJ = e;
      },
      get bulldoze() {
        return aJ;
      },
      set bulldoze(e) {
        aJ = e;
      },
      get save() {
        return oJ;
      },
      set save(e) {
        oJ = e;
      },
      get editorCameraMode() {
        return editorCameraMode;
      },
      set editorCameraMode(e) {
        editorCameraMode = e;
      },
      get toggleEditorCameraMode() {
        return lJ;
      },
      set toggleEditorCameraMode(e) {
        lJ = e;
      },
      get tutorialsEnabled() {
        return tutorialsEnabled;
      },
      set tutorialsEnabled(e) {
        tutorialsEnabled = e;
      },
      get toggleTutorials() {
        return uJ;
      },
      set toggleTutorials(e) {
        uJ = e;
      },
      get itemIdEquals() {
        return dJ;
      },
      set itemIdEquals(e) {
        dJ = e;
      }
    });
    let mJ = {
      "bulldoze-cursor": "bulldoze-cursor_uNU",
      bulldozeCursor: "bulldoze-cursor_uNU",
      "replace-cursor": "replace-cursor_jgP",
      replaceCursor: "replace-cursor_jgP",
      "complex-curve-cursor": "complex-curve-cursor_N47",
      complexCurveCursor: "complex-curve-cursor_N47",
      "continuous-cursor": "continuous-cursor_wVn",
      continuousCursor: "continuous-cursor_wVn",
      "grid-cursor": "grid-cursor_zBe",
      gridCursor: "grid-cursor_zBe",
      "parallel-mode-cursor": "parallel-mode-cursor_kzY",
      parallelModeCursor: "parallel-mode-cursor_kzY",
      "simple-curve-cursor": "simple-curve-cursor_JKS",
      simpleCurveCursor: "simple-curve-cursor_JKS",
      "straight-cursor": "straight-cursor_AcO",
      straightCursor: "straight-cursor_AcO",
      "no-cursor": "no-cursor_qkL",
      noCursor: "no-cursor_qkL",
      crosshair: "crosshair_gJi",
      "crosshair-default": "crosshair-default_S39",
      crosshairDefault: "crosshair-default_S39",
      "bulldoze-crosshair": "bulldoze-crosshair_C1X",
      bulldozeCrosshair: "bulldoze-crosshair_C1X",
      "replace-crosshair": "replace-crosshair_VpJ",
      replaceCrosshair: "replace-crosshair_VpJ",
      "complex-curve-crosshair": "complex-curve-crosshair_Yhl",
      complexCurveCrosshair: "complex-curve-crosshair_Yhl",
      "continuous-crosshair": "continuous-crosshair_DwR",
      continuousCrosshair: "continuous-crosshair_DwR",
      "grid-crosshair": "grid-crosshair_V69",
      gridCrosshair: "grid-crosshair_V69",
      "parallel-mode-crosshair": "parallel-mode-crosshair_lYy",
      parallelModeCrosshair: "parallel-mode-crosshair_lYy",
      "simple-curve-crosshair": "simple-curve-crosshair_BYp",
      simpleCurveCrosshair: "simple-curve-crosshair_BYp",
      "straight-crosshair": "straight-crosshair_IEJ",
      straightCrosshair: "straight-crosshair_IEJ"
    };
    X.add("game-ui/game/components/tool-cursors/tool-cursors.module.scss", {
      get classes() {
        return mJ;
      },
      set classes(e) {
        Object.assign(mJ, e);
      }
    });
    function gJ(e) {
      const t = sl(GO);
      const n = sl(_m);
      const s = sl(QO);
      const i = sl(oP);
      $p(!n && e ? xJ(s, i, t, "Cursor") : undefined);
    }
    function pJ(e) {
      const t = sl(GO);
      const n = xJ(sl(QO), sl(oP), t, "Crosshair");
      $p(e && n ? `${n} ${mJ.crosshair}` : undefined);
    }
    var fJ = ({
      blockingPanelActive: e = false
    }) => {
      const t = km();
      const n = sl(bm);
      gJ(!t && !n);
      pJ(t && !n && !e);
      return null;
    };
    function xJ(e, t, n, s) {
      return n.id === CP && e ? "Cursor" === s ? mJ.parallelModeCursor : mJ.parallelModeCrosshair : n.id === IP ? "Cursor" === s ? mJ.bulldozeCursor : mJ.bulldozeCrosshair : n.id === NP && t || n.id === CP && "Replace" === n.modes.find(e => e.index === n.modeIndex)?.id ? "Cursor" === s ? mJ.replaceCursor : mJ.replaceCrosshair : n.id === CP && "Straight" === n.modes.find(e => e.index === n.modeIndex)?.id ? "Cursor" === s ? mJ.straightCursor : mJ.straightCrosshair : n.id === CP && "SimpleCurve" === n.modes.find(e => e.index === n.modeIndex)?.id ? "Cursor" === s ? mJ.simpleCurveCursor : mJ.simpleCurveCrosshair : n.id === CP && "ComplexCurve" === n.modes.find(e => e.index === n.modeIndex)?.id ? "Cursor" === s ? mJ.complexCurveCursor : mJ.complexCurveCrosshair : n.id === CP && "Continuous" === n.modes.find(e => e.index === n.modeIndex)?.id ? "Cursor" === s ? mJ.continuousCursor : mJ.continuousCrosshair : n.id === CP && "Grid" === n.modes.find(e => e.index === n.modeIndex)?.id ? "Cursor" === s ? mJ.gridCursor : mJ.gridCrosshair : "Cursor" === s ? undefined : mJ.crosshairDefault;
    }
    X.add("game-ui/game/components/tool-cursors/tool-cursors.tsx", {
      get useToolCursor() {
        return gJ;
      },
      set useToolCursor(e) {
        gJ = e;
      },
      get useToolCrosshair() {
        return pJ;
      },
      set useToolCrosshair(e) {
        pJ = e;
      },
      get CursorProvider() {
        return fJ;
      },
      set CursorProvider(e) {
        fJ = e;
      }
    });
    let vJ = {
      "color-field": "color-field_due",
      colorField: "color-field_due",
      alpha: "alpha_R9X",
      disabled: "disabled_QDB",
      wrapper: "wrapper_ZiM",
      "color-picker-container": "color-picker-container_Sj5",
      colorPickerContainer: "color-picker-container_Sj5",
      "bound-color-field": "bound-color-field_RVj",
      boundColorField: "bound-color-field_RVj",
      hint: "hint_v_n"
    };
    X.add("game-ui/common/input/color-picker/color-field/color-field.module.scss", {
      get classes() {
        return vJ;
      },
      set classes(e) {
        Object.assign(vJ, e);
      }
    });
    const bJ = new Tg("BUTTON_KEY");
    const TJ = new Tg("PICKER_KEY");
    function EJ(e) {
      const t = PA(BA, sM(e.parent, e.path));
      0;
      return z.jsx(IJ, {
        value: e.props.value,
        onChange: t,
        disabled: e.props.disabled,
        alpha: e.props.showAlpha,
        popupDirection: "up",
        className: vJ.boundColorField
      });
    }
    var IJ = ({
      focusKey: e,
      disabled: t,
      value: n,
      className: s,
      selectAction: i = "Select",
      alpha: a = false,
      popupDirection: o = "down",
      hideHint: r = false,
      onChange: l,
      onClick: c,
      onMouseEnter: u,
      onMouseLeave: d,
      onClosePicker: m
    }) => {
      0;
      const [h, g] = Y.useState(false);
      0;
      const p = Y.useCallback(() => {
        g(e => !e);
        if (h && m) {
          m();
        }
      }, [m, h]);
      0;
      const f = Y.useCallback(() => {
        g(false);
        if (m) {
          m();
        }
      }, [m]);
      0;
      Y.useEffect(() => {
        if (t && h) {
          g(false);
          if (m) {
            m();
          }
        }
      }, [t, m, h]);
      0;
      const x = Y.useRef(0);
      0;
      const v = Y.useCallback(e => {
        x.current = e.h;
        l(oN(e));
      }, [l]);
      0;
      const _ = Y.useMemo(() => ({
        [i]: () => p(),
        Back: f
      }), [f, p, i]);
      0;
      const b = Y.useRef(null);
      0;
      0;
      0;
      const T = z.jsx(Lg, {
        actions: _,
        children: z.jsx("div", {
          ref: b,
          className: vJ.colorPickerContainer,
          children: z.jsx(OH, {
            focusKey: TJ,
            color: yJ(n, x.current),
            alpha: a,
            onChange: v,
            colorWheel: false,
            sliderTextInput: false,
            mode: wH.Hsv,
            hexInput: false,
            allowFocusExit: false
          })
        })
      });
      0;
      const E = Y.useCallback(() => g(false), []);
      0;
      const [I, y] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(s, vJ.wrapper),
        children: [z.jsx(LT, {
          action: h ? "Back" : "Select",
          active: (I || h) && !r,
          className: vJ.hint
        }), h && (0, z.jsx)(o_, {
          onClick: E
        }), z.jsx(ip, {
          focusKey: e,
          focused: h ? TJ : bJ,
          children: z.jsx(YI, {
            visible: h,
            content: T,
            direction: o,
            children: z.jsx(Lh, {
              onFocusChange: y,
              children: z.jsx(L_, {
                disableHint: true,
                focusKey: bJ,
                selectAction: i,
                onClick: c,
                onMouseEnter: u,
                onMouseLeave: d,
                className: Qu()(vJ.colorField, {
                  [vJ.disabled]: t,
                  [vJ.alpha]: n.a < 1
                }),
                onSelect: t ? undefined : p,
                children: z.jsx("div", {
                  style: {
                    backgroundColor: tN(n)
                  }
                })
              })
            })
          })
        })]
      });
    };
    function yJ(e, t) {
      const n = rN(e, t);
      return 0 === n.h && t > .99 ? {
        ...n,
        h: 1
      } : n;
    }
    X.add("game-ui/common/input/color-picker/color-field/color-field.tsx", {
      get BoundColorField() {
        return EJ;
      },
      set BoundColorField(e) {
        EJ = e;
      },
      get ColorField() {
        return IJ;
      },
      set ColorField(e) {
        IJ = e;
      },
      get rgbaToHsvaWithStrongFallbackHue() {
        return yJ;
      },
      set rgbaToHsvaWithStrongFallbackHue(e) {
        yJ = e;
      }
    });
    var SJ = ({
      min: e = vd,
      max: t = _d,
      unit: n,
      ...s
    }) => {
      0;
      const i = Y.useCallback(n => function (e, t, n) {
        if ("-" === e) {
          return;
        }
        if ("" === e) {
          return t <= 0 && n >= 0 ? 0 : undefined;
        }
        const s = parseInt(e, 10);
        return isNaN(s) ? undefined : wd(s, t, n);
      }(n, e, t), [e, t]);
      const a = Kc(n, false);
      0;
      return z.jsx(cV, {
        ...s,
        valueFormatter: a,
        inputParser: i,
        inputValidator: e < 0 ? jJ : CJ
      });
    };
    function jJ(e) {
      return /^-?[0-9]*$/.test(e);
    }
    function CJ(e) {
      return /^[0-9]*$/.test(e);
    }
    X.add("game-ui/common/input/text/localized-int-input.tsx", {
      get LocalizedIntInput() {
        return SJ;
      },
      set LocalizedIntInput(e) {
        SJ = e;
      }
    });
    let NJ = {
      "unlock-highlight-badge": "unlock-highlight-badge_D9D",
      unlockHighlightBadge: "unlock-highlight-badge_D9D"
    };
    X.add("game-ui/game/components/asset-menu/badges/unlock-highlight-badge.module.scss", {
      get classes() {
        return NJ;
      },
      set classes(e) {
        Object.assign(NJ, e);
      }
    });
    var OJ = ({
      className: e
    }) => sl(Rl) ? (0, z.jsx)("div", {
      className: Qu()(NJ.unlockHighlightBadge, e)
    }) : null;
    X.add("game-ui/game/components/asset-menu/badges/unlock-highlight-badge.tsx", {
      get UnlockHighlightBadge() {
        return OJ;
      },
      set UnlockHighlightBadge(e) {
        OJ = e;
      }
    });
    let PJ = {
      indicatorNormalColor: "#424242",
      indicatorSelectedColor: "#1e83aa",
      button: "button_KVN",
      icon: "icon_Ysc",
      "multi-select": "multi-select_Roq",
      multiSelect: "multi-select_Roq",
      badge: "badge_IEE",
      indicator: "indicator_ySy"
    };
    X.add("game-ui/game/components/tool-options/tool-button/tool-button.module.scss", {
      get classes() {
        return PJ;
      },
      set classes(e) {
        Object.assign(PJ, e);
      }
    });
    var AJ = ({
      focusKey: e,
      src: t,
      selected: n,
      multiSelect: s,
      disabled: i,
      tooltip: a,
      selectSound: o,
      uiTag: r,
      className: l,
      children: c,
      onSelect: u,
      shortcut: d
    }) => {
      0;
      const m = Y.useCallback(() => {
        if (u) {
          u();
        }
        if (r) {
          ig(r);
        }
      }, [u, r]);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: r,
        children: z.jsx(bg, {
          tooltip: a,
          children: z.jsx($_, {
            disableHint: true,
            focusKey: e,
            src: t,
            disabled: i,
            selected: n,
            theme: PJ,
            selectSound: o,
            className: Qu()(s && PJ.multiSelect, l),
            onSelect: m,
            shortcut: d,
            children: c
          })
        })
      });
    };
    function MJ({
      focusKey: e,
      value: t,
      src: n,
      selected: s,
      disabled: i,
      highlight: a,
      multiSelect: o,
      uiTag: r,
      shortcut: l,
      className: c,
      children: u,
      onSelect: d,
      onClick: m
    }) {
      0;
      const h = Y.useCallback(() => {
        if (d) {
          d(t);
        }
        if (r) {
          ig(r);
        }
      }, [d, t, r]);
      0;
      const g = Y.useCallback(e => {
        if (m) {
          e.stopPropagation();
          m(t);
        }
      }, [t, m]);
      0;
      0;
      return z.jsx(aT, {
        uiTag: r,
        children: z.jsxs($_, {
          disableHint: true,
          focusKey: e,
          src: n,
          selected: s,
          theme: PJ,
          disabled: i,
          className: Qu()(o && PJ.multiSelect, c),
          onSelect: h,
          onClick: g,
          shortcut: l,
          children: [u, a && (0, z.jsx)(OJ, {
            className: PJ.badge
          })]
        })
      });
    }
    var RJ = ({
      focusKey: e,
      selectedValue: t,
      values: n,
      tooltip: s,
      uiTag: i,
      onSelect: a
    }) => {
      0;
      const o = Y.useCallback(() => {
        a(function (e, t) {
          if (0 === t.length) {
            return e;
          }
          for (const n of t) if (n < e) {
            return n;
          }
          return t[0];
        }(t, n));
        if (i) {
          ig(i);
        }
      }, [a, t, i, n]);
      const r = n.findIndex(e => e <= t);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: i,
        children: z.jsx(bg, {
          tooltip: s,
          children: z.jsx(L_, {
            focusKey: e,
            theme: PJ,
            onSelect: o,
            children: z.jsxs("svg", {
              viewBox: "0 0 20 16",
              className: PJ.indicator,
              children: [z.jsx("path", {
                d: "M0,12h4v4h-4Z",
                fill: r <= 3 ? PJ.indicatorSelectedColor : PJ.indicatorNormalColor
              }), z.jsx("path", {
                d: "M5,8h4v8h-4Z",
                fill: r <= 2 ? PJ.indicatorSelectedColor : PJ.indicatorNormalColor
              }), z.jsx("path", {
                d: "M10,4h4v12h-4Z",
                fill: r <= 1 ? PJ.indicatorSelectedColor : PJ.indicatorNormalColor
              }), z.jsx("path", {
                d: "M15,0h4v16h-4Z",
                fill: r <= 0 ? PJ.indicatorSelectedColor : PJ.indicatorNormalColor
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/tool-options/tool-button/tool-button.tsx", {
      get ToolButton() {
        return AJ;
      },
      set ToolButton(e) {
        AJ = e;
      },
      get ValueToolButton() {
        return MJ;
      },
      set ValueToolButton(e) {
        MJ = e;
      },
      get StepToolButton() {
        return RJ;
      },
      set StepToolButton(e) {
        RJ = e;
      }
    });
    let kJ = {
      item: "item_bZY",
      label: "label_RZX",
      content: "content_ZIz",
      "number-field": "number-field__Hd",
      numberField: "number-field__Hd",
      "number-input-field": "number-input-field_cnU",
      numberInputField: "number-input-field_cnU",
      "start-button": "start-button_F6t",
      startButton: "start-button_F6t",
      "end-button": "end-button_ztm",
      endButton: "end-button_ztm",
      "dropdown-toggle": "dropdown-toggle_ZAi",
      dropdownToggle: "dropdown-toggle_ZAi",
      slider: "slider_k5B"
    };
    X.add("game-ui/game/components/tool-options/mouse-tool-options/mouse-tool-options.module.scss", {
      get classes() {
        return kJ;
      },
      set classes(e) {
        Object.assign(kJ, e);
      }
    });
    var FJ = () => ((0, Y.useEffect)(() => xL(false), []), (0, z.jsxs)(ep, {
      children: [(0, z.jsx)(BJ, {}), (0, z.jsx)(VJ, {}), (0, z.jsx)(WJ, {}), (0, z.jsx)(KJ, {}), (0, z.jsx)(YJ, {}), (0, z.jsx)(JJ, {}), (0, z.jsx)(ZJ, {}), (0, z.jsx)(n0, {}), (0, z.jsx)(qJ, {}), (0, z.jsx)(s0, {})]
    }));
    var UJ = ({
      title: e,
      uiTag: t,
      children: n
    }) => (0, z.jsxs)(Ep, {
      className: kJ.item,
      children: [(0, z.jsx)("div", {
        className: kJ.label,
        children: e
      }), (0, z.jsx)(aT, {
        uiTag: t,
        children: (0, z.jsx)("div", {
          className: kJ.content,
          children: n
        })
      })]
    });
    const BJ = () => {
      const e = sl(nL);
      const t = sl(tL);
      0;
      const n = Y.useCallback(t => {
        if (e.length > 1 && undefined !== e.find(e => Ur(t, e))) {
          dL(e.filter(e => !Ur(t, e)));
        } else if (undefined === e.find(e => Ur(t, e))) {
          dL([...e, t]);
        }
      }, [e]);
      return t.length ? (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.Toolbar.THEME_PANEL_TITLE, {}),
        uiTag: dT.value?.toolOptionsThemes,
        children: (0, z.jsx)(ep, {
          children: t.map(t => (0, z.jsx)(zq, {
            title: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_TITLE, {
              hash: t.name
            }),
            description: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DESCRIPTION, {
              hash: t.name
            }),
            children: (0, z.jsx)(MJ, {
              multiSelect: true,
              focusKey: Dr(t.entity),
              value: t.entity,
              src: t.icon,
              selected: undefined !== e.find(e => Ur(t.entity, e)),
              highlight: t.highlight,
              disabled: 1 === e.length && undefined !== e.find(e => Ur(t.entity, e)),
              onClick: n
            })
          }, Dr(t.entity)))
        })
      }) : null;
    };
    const GJ = [];
    const VJ = () => {
      const e = sl(aL);
      const t = sl(iL);
      0;
      const n = Y.useCallback(n => {
        if (Ur(n, Xp)) {
          if (e.length > 0) {
            mL(GJ);
          } else {
            mL(t.map(e => e.entity));
          }
        } else if (undefined !== e.find(e => Ur(n, e))) {
          mL(e.filter(e => !Ur(n, e)));
        } else {
          mL([...e, n]);
        }
      }, [e, t]);
      return t.length ? (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.Toolbar.ASSET_PACKS_PANEL_TITLE, {}),
        uiTag: dT.value?.toolOptionsAssetPacks,
        children: (0, z.jsxs)(ep, {
          direction: Mg.Both,
          children: [t.length > 1 && (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_TITLE, {
              hash: "AssetPack.All"
            }),
            children: (0, z.jsx)(MJ, {
              focusKey: Dr(Xp),
              value: Xp,
              src: "Media/Tools/Snap Options/All.svg",
              selected: Gr(t.map(e => e.entity), e),
              onClick: n
            })
          }), t.map((t, s) => (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.Assets.NAME, {
              hash: t.name
            }),
            children: (0, z.jsx)(MJ, {
              focusKey: `${Dr(t.entity)}-${s}`,
              value: t.entity,
              src: t.icon,
              selected: undefined !== e.find(e => Ur(t.entity, e)),
              highlight: t.highlight,
              onClick: n
            })
          }, s))]
        })
      }) : null;
    };
    var HJ = [{
      value: QP.Child,
      src: "Media/Tools/Vegetation Options/TreeChild.svg",
      tooltipHash: "Sapling"
    }, {
      value: QP.Teen,
      src: "Media/Tools/Vegetation Options/TreeTeen.svg",
      tooltipHash: "Young"
    }, {
      value: QP.Adult,
      src: "Media/Tools/Vegetation Options/TreeAdult.svg",
      tooltipHash: "Mature"
    }, {
      value: QP.Elderly,
      src: "Media/Tools/Vegetation Options/TreeElderly.svg",
      tooltipHash: "Elderly"
    }];
    const KJ = () => {
      const e = sl(cL);
      0;
      const t = Y.useRef(e);
      t.current = e;
      0;
      const n = Y.useCallback(e => {
        let n = t.current;
        if (n & e) {
          n ^= e;
        } else {
          n |= e;
        }
        uL(n || 1);
      }, []);
      return e === QP.Disabled ? null : (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.Toolbar.VEGETATION_AGE_PANEL_TITLE, {}),
        uiTag: dT.value?.toolOptionsVegatationAge,
        children: (0, z.jsx)(ep, {
          children: HJ.map(t => (0, z.jsx)(zq, {
            title: null,
            description: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DESCRIPTION, {
              hash: t.tooltipHash
            }),
            children: (0, z.jsx)(MJ, {
              focusKey: `vegetation-age:${t.value}`,
              value: t.value,
              src: t.src,
              selected: !!(e & t.value),
              onClick: n
            })
          }, t.tooltipHash))
        })
      });
    };
    const WJ = () => {
      og(dT.value?.toolOptionsModes);
      const e = sl(GO);
      0;
      const t = Y.useCallback(e => dP(e), []);
      0;
      const n = Y.useCallback(e => {
        if ("number" == typeof e) {
          t(e);
        }
      }, [t]);
      const s = "Object Tool" === e.id && ("Line" === e.modes.find(t => t.index === e.modeIndex)?.id || "Curve" === e.modes.find(t => t.index === e.modeIndex)?.id);
      return e.modes.length < 2 ? null : (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.TOOL_MODE_TITLE, {}),
          uiTag: dT.value?.toolOptionsModes,
          children: (0, z.jsx)(Xg, {
            focused: e.modeIndex,
            direction: Mg.Horizontal,
            onChange: n,
            children: e.modes.map(n => (0, z.jsx)(aT, {
              uiTag: dT.value?.toolOptionsModes + n.id,
              children: (0, z.jsx)(zq, {
                title: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_TITLE, {
                  hash: n.id
                }),
                description: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DESCRIPTION, {
                  hash: n.id
                }),
                children: (0, z.jsx)(MJ, {
                  uiTag: dT.value?.toolOptionsModes + n.id,
                  focusKey: n.index,
                  value: n.index,
                  src: n.icon,
                  selected: n.index === e.modeIndex,
                  onSelect: t
                })
              })
            }, n.id))
          })
        }), s && (0, z.jsx)(zJ, {})]
      });
    };
    var zJ = () => {
      const e = sl(lP);
      const t = sl(rP);
      0;
      const [n, s] = Y.useState(t * e);
      const i = Math.max(Math.floor(1.5 * e), 1.5);
      const a = 6 * e;
      const o = Math.max(i / 3, .5);
      const r = KM(o);
      0;
      const l = Y.useCallback(() => {
        EP(n / e);
      }, [e, n]);
      const c = km();
      0;
      const u = Y.useCallback(t => {
        if (c) {
          EP(t / e);
        }
        s(t);
      }, [e, c]);
      0;
      Y.useEffect(() => s(Math.min(Math.max(t * e, i), a)), [t, e, a, i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(UJ, {
        title: z.jsx(Pc.Toolbar.TOOL_MODE_DISTANCE, {}),
        children: [z.jsx(Vc, {
          value: n,
          unit: Oc.Length,
          fractionDigits: 2
        }), z.jsx(zq, {
          title: z.jsx(Pc.ToolOptions.TOOLTIP_TITLE_DISTANCE, {}),
          description: z.jsx(Pc.ToolOptions.TOOLTIP_DESCRIPTION_DISTANCE, {}),
          children: z.jsx(GM, {
            start: i,
            end: a,
            value: n,
            gamepadStep: o,
            valueTransformer: r,
            onChange: u,
            onDragEnd: l,
            className: kJ.slider
          })
        })]
      });
    };
    const YJ = () => {
      const e = sl(aP);
      const t = sl(MP);
      const n = sl(kP);
      const s = sl(DP);
      const i = sl(FP);
      const a = sl(UP);
      const o = sl(BP);
      const r = sl(VP);
      const l = sl(HP);
      const c = i <= a;
      const u = i >= o;
      0;
      const d = Y.useCallback(() => $P(wd(-10 * Math.round(i / -10) + -10, a, o)), [i, o, a]);
      0;
      const m = Y.useCallback(() => $P(wd(10 * Math.round(i / 10) + 10, a, o)), [i, o, a]);
      const h = n <= r;
      const g = n >= l;
      0;
      const p = Y.useCallback(() => {
        let e;
        e = n > 550 ? 100 : n > 125 ? 50 : 10;
        WP(wd(-e * Math.round(n / -e) + -e, r, l));
      }, [n, r, l]);
      0;
      const f = Y.useCallback(() => {
        let e;
        e = n > 475 ? 100 : n > 95 ? 50 : 10;
        WP(wd(e * Math.round(n / e) + e, r, l));
      }, [n, l, r]);
      const x = s <= .01;
      const v = s >= 1;
      0;
      const _ = Y.useCallback(() => {
        zP(wd(-(s > .11 ? .05 : .01) * Math.round(s / -(s > .11 ? .05 : .01)) + -(s > .11 ? .05 : .01), .01, 1));
      }, [s]);
      0;
      const b = Y.useCallback(() => {
        zP(wd(+(s > .095 ? .05 : .01) * Math.round(s / +(s > .095 ? .05 : .01)) + +(s > .095 ? .05 : .01), .01, 1));
      }, [s]);
      0;
      const T = Y.useCallback(e => {
        zP(e / 100);
      }, []);
      const E = sl(RP);
      0;
      const I = Y.useMemo(() => E.find(e => Ur(e.entity, t)), [E, t]);
      const y = sl(GP);
      0;
      const S = Y.useCallback(() => YP((15 * Math.round(y / 15) + 15) % 360), [y]);
      0;
      const j = Y.useCallback(() => YP((-15 * Math.round(y / -15) + -15 + 360) % 360), [y]);
      return Ur(t, Xp) ? null : (0, z.jsxs)(z.Fragment, {
        children: [e && (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH, {}),
          children: (0, z.jsx)(ny, {
            theme: fF,
            content: E.map(e => (0, z.jsx)(oy, {
              focusKey: e.name,
              value: e.entity,
              selected: Ur(e.entity, t),
              onChange: KP,
              children: e.name
            }, e.name)),
            children: (0, z.jsx)(sy, {
              className: Qu()(fF.dropdownToggle, kJ.dropdownToggle),
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_CHANGE_BRUSH, {}),
              children: I?.name
            })
          })
        }), null !== i && (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_HEIGHT, {}),
          uiTag: dT.value?.toolOptionsBrushSize,
          children: (0, z.jsxs)(ep, {
            direction: Mg.Horizontal,
            children: [(0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowDown.svg",
              disabled: c,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DECREASE_BRUSH_HEIGHT, {}),
              selectSound: op.decreaseElevation,
              className: kJ.startButton,
              onSelect: d
            }), (0, z.jsx)("div", {
              className: kJ.numberField,
              children: (0, z.jsx)(SJ, {
                unit: Oc.NetElevation,
                value: i,
                className: kJ.numberInputField,
                onChange: $P,
                min: a,
                max: o
              })
            }), (0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowUp.svg",
              disabled: u,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_INCREASE_BRUSH_HEIGHT, {}),
              selectSound: op.increaseElevation,
              className: kJ.endButton,
              onSelect: m
            })]
          })
        }), (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_SIZE, {}),
          uiTag: dT.value?.toolOptionsBrushSize,
          children: (0, z.jsxs)(ep, {
            direction: Mg.Horizontal,
            children: [(0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowDown.svg",
              disabled: h,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DECREASE_BRUSH_SIZE, {}),
              selectSound: op.decreaseElevation,
              className: kJ.startButton,
              onSelect: p
            }), (0, z.jsx)("div", {
              className: kJ.numberField,
              children: (0, z.jsx)(SJ, {
                unit: Oc.Integer,
                value: n,
                className: kJ.numberInputField,
                onChange: WP,
                min: r,
                max: l
              })
            }), (0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowUp.svg",
              disabled: g,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_INCREASE_BRUSH_SIZE, {}),
              selectSound: op.increaseElevation,
              className: kJ.endButton,
              onSelect: f
            })]
          })
        }), (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_STRENGTH, {}),
          uiTag: dT.value?.toolOptionsBrushStrength,
          children: (0, z.jsxs)(ep, {
            direction: Mg.Horizontal,
            children: [(0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowDown.svg",
              disabled: x,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DECREASE_BRUSH_STRENGTH, {}),
              selectSound: op.decreaseElevation,
              className: kJ.startButton,
              onSelect: _
            }), (0, z.jsx)("div", {
              className: kJ.numberField,
              children: (0, z.jsx)(SJ, {
                unit: Oc.Percentage,
                value: 100 * s,
                className: kJ.numberInputField,
                onChange: T,
                min: 1,
                max: 100
              })
            }), (0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowUp.svg",
              disabled: v,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_INCREASE_BRUSH_STRENGTH, {}),
              selectSound: op.increaseElevation,
              className: kJ.endButton,
              onSelect: b
            })]
          })
        }), e && (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_ANGLE, {}),
          children: (0, z.jsxs)(ep, {
            direction: Mg.Horizontal,
            children: [(0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowDown.svg",
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_ROTATE_BRUSH_COUNTER_CLOCKWISE, {}),
              selectSound: op.decreaseElevation,
              className: kJ.startButton,
              onSelect: j
            }), (0, z.jsx)("div", {
              className: kJ.numberField,
              children: (0, z.jsx)(SJ, {
                unit: Oc.Integer,
                value: y,
                className: kJ.numberInputField,
                onChange: YP,
                min: 0,
                max: 360
              })
            }), (0, z.jsx)(AJ, {
              src: "Media/Glyphs/ThickStrokeArrowUp.svg",
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_ROTATE_BRUSH_CLOCKWISE, {}),
              selectSound: op.increaseElevation,
              className: kJ.endButton,
              onSelect: S
            })]
          })
        })]
      });
    };
    function $J(e, t) {
      return t * Math.round(e / t) + t;
    }
    const qJ = () => {
      const e = sl(HO);
      const t = sl(WO);
      const n = sl(KO);
      const s = sl(zO);
      const i = XJ(e);
      const a = (n & t) === t;
      0;
      const o = Y.useCallback(() => {
        vP(a ? n & ~t : n | t);
      }, [a, t, n]);
      0;
      const r = Y.useCallback(e => {
        const t = 1 << e;
        vP(0 != (n & t) ? n & ~t : n | t);
      }, [n]);
      if (!i.length) {
        return null;
      }
      const l = i.filter(e => "ContourLines" !== s[e]);
      const c = i.filter(e => "ContourLines" === s[e]);
      0;
      return z.jsxs(z.Fragment, {
        children: [!!l.length && (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.SNAPPING_TITLE, {}),
          uiTag: dT.value?.toolOptionsSnapping,
          children: (0, z.jsxs)(ep, {
            direction: Mg.Horizontal,
            children: [l.length > 1 && (0, z.jsx)(AJ, {
              multiSelect: true,
              src: "Media/Tools/Snap Options/All.svg",
              selected: a,
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_SNAP_ALL, {}),
              onSelect: o
            }), l.map(e => (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP, {
                hash: s[e]
              }),
              children: (0, z.jsx)(MJ, {
                focusKey: e,
                value: e,
                src: "Media/Tools/Snap Options/" + s[e] + ".svg",
                selected: 0 != (n & 1 << e),
                multiSelect: true,
                onSelect: r
              }, e)
            }, e))]
          })
        }), !!c.length && (0, z.jsx)(UJ, {
          title: (0, z.jsx)(Pc.Toolbar.CONTOUR_LINES_TITLE, {}),
          children: (0, z.jsx)(ep, {
            direction: Mg.Horizontal,
            children: c.map(e => (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP, {
                hash: s[e]
              }),
              children: (0, z.jsx)(MJ, {
                focusKey: e,
                value: e,
                src: "Media/Tools/Snap Options/" + s[e] + ".svg",
                selected: 0 != (n & 1 << e),
                multiSelect: true,
                shortcut: "Toggle Contour Lines",
                onSelect: r
              }, e)
            }, e))
          })
        })]
      });
    };
    const XJ = e => (0, Y.useMemo)(() => {
      const t = [];
      let n = 0;
      for (; e >> n > 0;) {
        if (0 != (e >> n & 1)) {
          t.push(n);
        }
        n++;
      }
      return t;
    }, [e]);
    const QJ = [10, 5, 2.5, 1.25];
    const ZJ = () => {
      const e = sl(YO);
      const t = sl($O);
      const n = sl(qO);
      const s = t <= e.min;
      const i = t >= e.max;
      0;
      const a = Y.useCallback(e => xP(e), []);
      0;
      const o = Y.useCallback(() => pP(), []);
      0;
      const r = Y.useCallback(() => gP(), []);
      return e.min >= e.max ? null : (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.Toolbar.ELEVATION_TITLE, {}),
        uiTag: dT.value?.toolOptionsElevation,
        children: (0, z.jsxs)(ep, {
          direction: Mg.Horizontal,
          children: [(0, z.jsx)(AJ, {
            src: "Media/Glyphs/ThickStrokeArrowDown.svg",
            disabled: s,
            tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DECREASE_ELEVATION, {}),
            selectSound: op.decreaseElevation,
            uiTag: dT.value?.toolOptionsElevationDecrease,
            className: kJ.startButton,
            onSelect: o,
            shortcut: "Decrease Elevation"
          }), (0, z.jsx)("div", {
            className: kJ.numberField,
            children: (0, z.jsx)(Gc, {
              value: t,
              unit: Oc.NetElevation
            })
          }), (0, z.jsx)(AJ, {
            src: "Media/Glyphs/ThickStrokeArrowUp.svg",
            disabled: i,
            tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_INCREASE_ELEVATION, {}),
            selectSound: op.increaseElevation,
            uiTag: dT.value?.toolOptionsElevationIncrease,
            className: kJ.endButton,
            onSelect: r,
            shortcut: "Increase Elevation"
          }), (0, z.jsx)(RJ, {
            selectedValue: n,
            values: QJ,
            uiTag: dT.value?.toolOptionsElevationStep,
            tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_ELEVATION_STEP, {}),
            onSelect: a
          })]
        })
      });
    };
    const JJ = () => {
      const e = sl(GO);
      const t = sl(JO);
      const n = sl(eP);
      0;
      const s = Y.useCallback(() => TP(!n), [n]);
      return e.id !== yP && t ? (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.Toolbar.UNDERGROUND_MODE_TITLE, {}),
        children: (0, z.jsx)(AJ, {
          src: "Media/Tools/Net Tool/Underground.svg",
          disabled: !t,
          selected: n,
          multiSelect: true,
          uiTag: dT.value?.toolOptionsUnderground,
          tooltip: (0, z.jsx)(Pc.Toolbar.TOGGLE_UNDERGROUND_MODE, {}),
          selectSound: n ? op.increaseElevation : op.decreaseElevation,
          onSelect: s
        })
      }) : null;
    };
    const e0 = new Tg("PARALLEL_MODE_TOGGLE");
    const t0 = [2, 4, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96];
    const n0 = () => {
      const e = sl(XO);
      const t = sl(QO);
      const n = sl(ZO);
      0;
      const s = Y.useMemo(() => t0.sort((e, t) => e - t), []);
      const i = n <= s[0];
      0;
      const a = Y.useCallback(() => {
        for (let e = s.length - 1; e >= 0; e--) {
          if (s[e] < n) {
            bP(s[e]);
            break;
          }
        }
      }, [n, s]);
      const o = n >= s[s.length - 1];
      0;
      const r = Y.useCallback(() => {
        for (let e = 0; e < s.length; e++) {
          if (s[e] > n) {
            bP(s[e]);
            break;
          }
        }
      }, [n, s]);
      return e ? (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.Toolbar.PARALLEL_MODE_TITLE, {}),
        children: (0, z.jsxs)(ep, {
          initialFocused: e0,
          direction: Mg.Horizontal,
          children: [t && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(AJ, {
              src: "Media/Tools/Net Tool/ParallelMinus.svg",
              tooltip: (0, z.jsx)(Pc.Toolbar.DECREASE_PARALLEL_OFFSET, {}),
              className: kJ.startButton,
              disabled: i,
              onSelect: a,
              uiTag: dT.value?.toolOptionsParallelModeOffsetDecrease
            }), (0, z.jsx)(aT, {
              uiTag: dT.value?.toolOptionsParallelModeOffset,
              children: (0, z.jsx)("div", {
                className: kJ.numberField,
                children: (0, z.jsx)(Gc, {
                  value: n / 8,
                  unit: Oc.FloatTwoFractions
                })
              })
            }), (0, z.jsx)(AJ, {
              src: "Media/Tools/Net Tool/ParallelPlus.svg",
              tooltip: (0, z.jsx)(Pc.Toolbar.INCREASE_PARALLEL_OFFSET, {}),
              className: kJ.endButton,
              disabled: o,
              onSelect: r,
              uiTag: dT.value?.toolOptionsParallelModeOffsetIncrease
            })]
          }), (0, z.jsx)(AJ, {
            focusKey: e0,
            src: "Media/Tools/Net Tool/Parallel.svg",
            tooltip: (0, z.jsx)(Pc.Toolbar.TOGGLE_PARALLEL_MODE, {}),
            selected: t,
            multiSelect: true,
            onSelect: _P,
            uiTag: dT.value?.toolOptionsParallelMode
          })]
        })
      }) : null;
    };
    const s0 = () => {
      const e = sl(GO);
      const t = sl(sP);
      const n = sl(iP);
      0;
      const s = Y.useCallback(e => cP(e), []);
      return e.id !== yP && t ? (0, z.jsx)(UJ, {
        title: (0, z.jsx)(Pc.ToolOptions.COLOR_TITLE, {
          hash: e.id
        }),
        children: (0, z.jsx)(bg, {
          tooltip: (0, z.jsx)(Pc.ToolOptions.COLOR_TOOLTIP, {
            hash: e.id
          }),
          children: (0, z.jsx)(IJ, {
            popupDirection: "up",
            value: n,
            onChange: s
          })
        })
      }) : null;
    };
    X.add("game-ui/game/components/tool-options/mouse-tool-options/mouse-tool-options.tsx", {
      get MouseToolOptions() {
        return FJ;
      },
      set MouseToolOptions(e) {
        FJ = e;
      },
      get Section() {
        return UJ;
      },
      set Section(e) {
        UJ = e;
      },
      get vegetationAgeOptions() {
        return HJ;
      },
      set vegetationAgeOptions(e) {
        HJ = e;
      },
      get DistanceSection() {
        return zJ;
      },
      set DistanceSection(e) {
        zJ = e;
      }
    });
    let i0 = {
      group: "group_fXk",
      item: "item_RBL item-focused_FuT",
      "item-content": "item-content__FJ",
      itemContent: "item-content__FJ",
      readonly: "readonly_jlY",
      label: "label_EcW",
      content: "content_I1Y",
      "arrow-button": "arrow-button_V0s",
      arrowButton: "arrow-button_V0s",
      field: "field_hZA",
      "wide-field": "wide-field_jm1 field_hZA",
      wideField: "wide-field_jm1 field_hZA",
      hidden: "hidden_o8e",
      "color-field": "color-field_zGk",
      colorField: "color-field_zGk"
    };
    X.add("game-ui/game/components/tool-options/gamepad-tool-options/gamepad-tool-options.module.scss", {
      get classes() {
        return i0;
      },
      set classes(e) {
        Object.assign(i0, e);
      }
    });
    var o0 = () => {
      const e = km();
      0;
      const [t, n] = Y.useState(false);
      0;
      const s = Y.useRef(null);
      const i = e && !t;
      og(dT.value?.toolOptions, t);
      0;
      const a = Y.useCallback(e => {
        s.current = e;
      }, []);
      0;
      const o = Y.useCallback((e, t) => i || s.current && e.children.get(s.current) ? s.current : e.children.keys().next().value || Zg(e, t), [i]);
      0;
      Y.useEffect(() => {
        if (e) {
          xL(t);
        }
      }, [t, e]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: n,
        children: z.jsxs(ep, {
          onChange: a,
          onRefocus: o,
          children: [z.jsx(l0, {
            readonly: i
          }), z.jsx(c0, {
            readonly: i
          }), z.jsx(d0, {
            readonly: i
          }), z.jsx(g0, {
            readonly: i
          }), z.jsx(m0, {
            readonly: i
          }), z.jsx(T0, {
            readonly: i
          }), z.jsx(b0, {
            readonly: i
          }), z.jsx(I0, {
            readonly: i
          }), z.jsx(x0, {
            readonly: i
          }), z.jsx(y0, {})]
        })
      });
    };
    var r0 = ({
      focusKey: e,
      title: t,
      readonly: n,
      hidden: s,
      leftDisabled: i,
      rightDisabled: a,
      hideArrows: o,
      uiTag: r,
      uiTagLeft: l,
      uiTagRight: c,
      children: u,
      onSelectLeft: d,
      onSelectRight: m
    }) => {
      const h = (i || !d) && (a || !m);
      0;
      const g = Y.useMemo(() => ({
        "Change Tool Option": h ? null : e => {
          rp(op.dragSlider);
          if (e < 0) {
            if (d && !i) {
              d();
              if (l) {
                ig(l);
              }
            }
          } else if (e > 0 && m && !a) {
            m();
            if (c) {
              ig(c);
            }
          }
        }
      }), [h, i, d, m, a, l, c]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: g,
        children: z.jsx(Ep, {
          focusKey: e,
          className: Qu()(i0.item, n && i0.readonly, s && i0.hidden),
          children: z.jsxs("div", {
            className: i0.itemContent,
            children: [null != t && (0, z.jsx)("div", {
              className: i0.label,
              children: t
            }), z.jsx(aT, {
              uiTag: s ? undefined : r,
              disableBlinking: true,
              children: z.jsxs("div", {
                className: i0.content,
                children: [!n && !o && (0, z.jsx)(aT, {
                  uiTag: l,
                  children: (0, z.jsx)($_, {
                    disableHint: true,
                    tinted: true,
                    focusKey: Eg,
                    src: "Media/Glyphs/ThickStrokeArrowLeft.svg",
                    disabled: i,
                    className: i0.arrowButton,
                    onSelect: d
                  })
                }), u, !n && !o && (0, z.jsx)(aT, {
                  uiTag: c,
                  children: (0, z.jsx)($_, {
                    disableHint: true,
                    tinted: true,
                    focusKey: Eg,
                    src: "Media/Glyphs/ThickStrokeArrowRight.svg",
                    disabled: a,
                    className: i0.arrowButton,
                    onSelect: m
                  })
                })]
              })
            })]
          })
        })
      });
    };
    const l0 = ({
      readonly: e
    }) => {
      const t = sl(nL);
      const n = sl(tL);
      0;
      const s = Y.useCallback(e => {
        if (t.length > 1 && undefined !== t.find(t => Ur(e, t))) {
          dL(t.filter(t => !Ur(e, t)));
        } else if (undefined === t.find(t => Ur(e, t))) {
          dL([...t, e]);
        }
      }, [t]);
      return n.length ? (0, z.jsx)(r0, {
        leftDisabled: true,
        rightDisabled: true,
        title: (0, z.jsx)(Pc.Toolbar.THEME_PANEL_TITLE, {}),
        readonly: e,
        uiTag: dT.value?.toolOptionsThemes,
        children: (0, z.jsx)(ep, {
          direction: Mg.Horizontal,
          children: n.map(e => (0, z.jsx)(zq, {
            title: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_TITLE, {
              hash: e.name
            }),
            description: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DESCRIPTION, {
              hash: e.name
            }),
            children: (0, z.jsx)(MJ, {
              multiSelect: true,
              focusKey: Dr(e.entity),
              value: e.entity,
              src: e.icon,
              highlight: e.highlight,
              selected: undefined !== t.find(t => Ur(e.entity, t)),
              disabled: 1 === t.length && undefined !== t.find(t => Ur(e.entity, t)),
              onSelect: s
            })
          }, Dr(e.entity)))
        })
      }) : null;
    };
    const c0 = ({
      readonly: e
    }) => {
      const t = sl(aL);
      const n = sl(iL);
      0;
      const s = Y.useCallback(e => {
        if (Ur(e, Xp)) {
          if (t.length > 0) {
            mL([]);
          } else {
            mL(n.map(e => e.entity));
          }
        } else if (undefined !== t.find(t => Ur(e, t))) {
          mL(t.filter(t => !Ur(e, t)));
        } else {
          mL([...t, e]);
        }
      }, [t, n]);
      return n.length ? (0, z.jsx)(r0, {
        title: (0, z.jsx)(Pc.Toolbar.ASSET_PACKS_PANEL_TITLE, {}),
        readonly: e,
        uiTag: dT.value?.toolOptionsAssetPacks,
        hideArrows: true,
        children: (0, z.jsxs)(ep, {
          direction: Mg.Both,
          children: [n.length > 1 && (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_TITLE, {
              hash: "AssetPack.All"
            }),
            children: (0, z.jsx)(MJ, {
              multiSelect: true,
              focusKey: Dr(Xp),
              value: Xp,
              src: "Media/Tools/Snap Options/All.svg",
              selected: Gr(n.map(e => e.entity), t),
              onSelect: s
            })
          }), n.map((e, n) => (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.Assets.NAME, {
              hash: e.name
            }),
            children: (0, z.jsx)(MJ, {
              multiSelect: true,
              focusKey: `${Dr(e.entity)}-${n}`,
              value: e.entity,
              src: e.icon,
              selected: undefined !== t.find(t => Ur(e.entity, t)),
              highlight: e.highlight,
              onSelect: s
            })
          }, n))]
        })
      }) : null;
    };
    const u0 = () => {};
    const d0 = ({
      readonly: e
    }) => {
      const t = sl(GO);
      og(dT.value?.toolOptionsModes);
      0;
      const n = Y.useCallback(e => dP(e), []);
      0;
      const s = Y.useCallback(() => {
        const e = ow(t.modes, t.modes.findIndex(e => e.index === t.modeIndex), true);
        if (e) {
          n(e.index);
        }
      }, [t.modeIndex, t.modes, n]);
      0;
      const i = Y.useCallback(() => {
        const e = iw(t.modes, t.modes.findIndex(e => e.index === t.modeIndex), true);
        if (e) {
          n(e.index);
        }
      }, [t.modeIndex, t.modes, n]);
      if (t.modes.length < 2) {
        return null;
      }
      const a = t.modes.find(e => e.index === t.modeIndex) || t.modes[0];
      const o = "Object Tool" === t.id && ("Line" === t.modes.find(e => e.index === t.modeIndex)?.id || "Curve" === t.modes.find(e => e.index === t.modeIndex)?.id);
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(r0, {
          title: t.modes.length <= 7 ? (0, z.jsx)(Pc.Toolbar.TOOL_MODE_TITLE, {}) : null,
          readonly: e,
          uiTag: dT.value?.toolOptionsModes,
          onSelectLeft: s,
          onSelectRight: i,
          children: z.jsx(Xg, {
            focused: a.id,
            onChange: u0,
            children: t.modes.map(e => (0, z.jsx)(aT, {
              uiTag: dT.value?.toolOptionsModes + e.id,
              children: (0, z.jsx)(zq, {
                title: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_TITLE, {
                  hash: e.id
                }),
                description: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DESCRIPTION, {
                  hash: e.id
                }),
                children: (0, z.jsx)(MJ, {
                  focusKey: e.id,
                  value: e.index,
                  src: e.icon,
                  selected: e.index === t.modeIndex,
                  onSelect: n,
                  uiTag: dT.value?.toolOptionsModes + e.id
                })
              }, e.id)
            }, e.id))
          })
        }), o && (0, z.jsx)(zJ, {})]
      });
    };
    const m0 = ({
      readonly: e
    }) => {
      const t = sl(MP);
      const n = sl(kP);
      const s = sl(DP);
      const i = sl(FP);
      const a = sl(UP);
      const o = sl(BP);
      const r = sl(VP);
      const l = sl(HP);
      const c = i <= a;
      const u = i >= o;
      0;
      const d = Y.useCallback(() => $P(wd(-10 * Math.round(i / -10) + -10, a, o)), [i, o, a]);
      0;
      const m = Y.useCallback(() => $P(wd(10 * Math.round(i / 10) + 10, a, o)), [i, o, a]);
      const h = n <= r;
      const g = n >= l;
      0;
      const p = Y.useCallback(() => {
        let e;
        e = n > 550 ? 100 : n > 125 ? 50 : 10;
        WP(wd(-e * Math.round(n / -e) + -e, r, l));
      }, [n, r, l]);
      0;
      const f = Y.useCallback(() => {
        let e;
        e = n > 475 ? 100 : n > 95 ? 50 : 10;
        WP(wd(e * Math.round(n / e) + e, r, l));
      }, [n, l, r]);
      const x = s <= .01;
      const v = s >= 1;
      0;
      const _ = Y.useCallback(() => {
        zP(wd(-(s > .11 ? .05 : .01) * Math.round(s / -(s > .11 ? .05 : .01)) + -(s > .11 ? .05 : .01), .01, 1));
      }, [s]);
      0;
      const b = Y.useCallback(() => {
        zP(wd(+(s > .095 ? .05 : .01) * Math.round(s / +(s > .095 ? .05 : .01)) + +(s > .095 ? .05 : .01), .01, 1));
      }, [s]);
      const T = sl(GP);
      0;
      const E = Y.useCallback(() => YP((15 * Math.round(T / 15) + 15) % 360), [T]);
      0;
      const I = Y.useCallback(() => YP((-15 * Math.round(T / -15) + -15 + 360) % 360), [T]);
      const y = sl(aP);
      return Ur(t, Xp) ? null : (0, z.jsxs)(z.Fragment, {
        children: [y && (0, z.jsx)(h0, {
          selectedBrush: t,
          readonly: e
        }), null != i && (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_HEIGHT, {}),
          readonly: e,
          uiTag: dT.value?.toolOptionsBrushSize,
          leftDisabled: c,
          onSelectLeft: d,
          rightDisabled: u,
          onSelectRight: m,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: i,
              unit: Oc.NetElevation
            })
          })
        }), (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_SIZE, {}),
          readonly: e,
          uiTag: dT.value?.toolOptionsBrushSize,
          leftDisabled: h,
          onSelectLeft: p,
          rightDisabled: g,
          onSelectRight: f,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: n,
              unit: Oc.Integer
            })
          })
        }), (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_STRENGTH, {}),
          readonly: e,
          uiTag: dT.value?.toolOptionsBrushStrength,
          leftDisabled: x,
          onSelectLeft: _,
          rightDisabled: v,
          onSelectRight: b,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: 100 * s,
              unit: Oc.Percentage
            })
          })
        }), y && (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.BRUSH_ANGLE, {}),
          readonly: e,
          onSelectLeft: I,
          onSelectRight: E,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: T,
              unit: Oc.Integer
            })
          })
        })]
      });
    };
    const h0 = ({
      selectedBrush: e,
      readonly: t
    }) => {
      const n = sl(RP);
      0;
      const s = Y.useMemo(() => n.find(t => Ur(t.entity, e)), [n, e]);
      0;
      const i = Y.useCallback(() => {
        if (n.length > 1) {
          const t = n.findIndex(t => Ur(t.entity, e));
          const s = Math.max(t + 1, 0) % n.length;
          KP(n[s].entity);
        }
      }, [n, e]);
      0;
      const a = Y.useCallback(() => {
        if (n.length > 1) {
          const t = n.findIndex(t => Ur(t.entity, e));
          const s = Math.max(t + n.length - 1, 0) % n.length;
          KP(n[s].entity);
        }
      }, [n, e]);
      0;
      0;
      0;
      return z.jsx(r0, {
        title: z.jsx(Pc.Toolbar.BRUSH, {}),
        readonly: t,
        leftDisabled: n.length <= 1,
        onSelectLeft: a,
        rightDisabled: n.length <= 1,
        onSelectRight: i,
        children: z.jsx("div", {
          className: i0.wideField,
          children: s?.name
        })
      });
    };
    const g0 = ({
      readonly: e
    }) => {
      const t = sl(cL);
      0;
      const n = Y.useRef(t);
      n.current = t;
      0;
      const s = Y.useCallback(e => {
        let t = n.current;
        if (t & e) {
          t ^= e;
        } else {
          t |= e;
        }
        uL(t || 1);
      }, []);
      return t === QP.Disabled ? null : (0, z.jsx)(r0, {
        leftDisabled: true,
        rightDisabled: true,
        readonly: e,
        title: (0, z.jsx)(Pc.Toolbar.VEGETATION_AGE_PANEL_TITLE, {}),
        uiTag: dT.value?.toolOptionsVegatationAge,
        children: (0, z.jsx)(ep, {
          direction: Mg.Horizontal,
          children: HJ.map(e => (0, z.jsx)(zq, {
            title: null,
            description: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_DESCRIPTION, {
              hash: e.tooltipHash
            }),
            children: (0, z.jsx)(MJ, {
              multiSelect: true,
              focusKey: `vegetation-age:${e.value}`,
              value: e.value,
              src: e.src,
              selected: !!(t & e.value),
              onSelect: s
            })
          }, e.tooltipHash))
        })
      });
    };
    function p0(e, t) {
      return t * Math.round(e / t) + t;
    }
    const x0 = ({
      readonly: e
    }) => {
      const t = sl(HO);
      const n = sl(WO);
      const s = sl(KO);
      const i = sl(zO);
      const a = v0(t);
      const o = (s & n) === n;
      0;
      const r = Y.useCallback(() => {
        vP(o ? s & ~n : s | n);
      }, [o, n, s]);
      0;
      const l = Y.useCallback(e => {
        const t = 1 << e;
        vP(0 != (s & t) ? s & ~t : s | t);
      }, [s]);
      if (!a.length) {
        return null;
      }
      const c = a.filter(e => "ContourLines" !== i[e]);
      const u = a.filter(e => "ContourLines" === i[e]);
      let d;
      d = e ? (0, z.jsxs)(z.Fragment, {
        children: [!!c.length && (0, z.jsxs)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.SNAPPING_TITLE, {}),
          focusKey: "Snap focus key",
          readonly: true,
          children: [c.length > 1 && (0, z.jsx)(AJ, {
            focusKey: Eg,
            src: "Media/Tools/Snap Options/All.svg",
            selected: o
          }), c.map(e => (0, z.jsx)(MJ, {
            focusKey: Eg,
            value: e,
            src: "Media/Tools/Snap Options/" + i[e] + ".svg",
            selected: 0 != (s & 1 << e)
          }, e))]
        }), !!u.length && (0, z.jsx)(r0, {
          focusKey: "Countur focus key",
          title: (0, z.jsx)(Pc.Toolbar.CONTOUR_LINES_TITLE, {}),
          readonly: true,
          children: u.map(e => (0, z.jsx)(MJ, {
            focusKey: Eg,
            value: e,
            shortcut: "Toggle Contour Lines",
            src: "Media/Tools/Snap Options/" + i[e] + ".svg",
            selected: 0 != (s & 1 << e)
          }, e))
        }), (0, z.jsxs)("div", {
          style: {
            position: "absolute",
            pointerEvents: "none",
            opacity: 0
          },
          children: [c.map(e => (0, z.jsx)(Ep, {
            focusKey: `snap-indice-${e}`
          }, e)), u.map(e => (0, z.jsx)(Ep, {
            focusKey: `contour-indice-${e}`
          }, e))]
        })]
      }) : (0, z.jsxs)(z.Fragment, {
        children: [c.length > 1 && (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_SNAP_ALL, {}),
          focusKey: "Snap focus key",
          onSelectLeft: r,
          onSelectRight: r,
          children: (0, z.jsx)(AJ, {
            src: "Media/Tools/Snap Options/All.svg",
            selected: o,
            onSelect: r
          })
        }), c.map(t => {
          const n = () => l(t);
          0;
          0;
          0;
          return z.jsx(r0, {
            focusKey: `snap-indice-${t}`,
            title: z.jsx(Pc.ToolOptions.TOOLTIP, {
              hash: i[t]
            }),
            readonly: e,
            hidden: e,
            onSelectLeft: n,
            onSelectRight: n,
            children: z.jsx(MJ, {
              value: t,
              src: "Media/Tools/Snap Options/" + i[t] + ".svg",
              selected: 0 != (s & 1 << t),
              onSelect: l
            })
          }, t);
        }), u.map(t => {
          const n = () => l(t);
          0;
          0;
          0;
          return z.jsx(r0, {
            focusKey: `contour-indice-${t}`,
            title: z.jsx(Pc.ToolOptions.TOOLTIP, {
              hash: i[t]
            }),
            readonly: e,
            hidden: e,
            onSelectLeft: n,
            onSelectRight: n,
            children: z.jsx(MJ, {
              value: t,
              shortcut: "Toggle Contour Lines",
              src: "Media/Tools/Snap Options/" + i[t] + ".svg",
              selected: 0 != (s & 1 << t),
              onSelect: l
            })
          }, t);
        })]
      });
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.toolOptionsSnapping,
        children: z.jsx("div", {
          children: d
        })
      });
    };
    const v0 = e => (0, Y.useMemo)(() => {
      const t = [];
      let n = 0;
      for (; e >> n > 0;) {
        if (0 != (e >> n & 1)) {
          t.push(n);
        }
        n++;
      }
      return t;
    }, [e]);
    const _0 = [10, 5, 2.5, 1.25];
    const b0 = ({
      readonly: e
    }) => {
      const t = sl(YO);
      const n = sl($O);
      const s = sl(qO);
      const i = n <= t.min;
      const a = n >= t.max;
      const o = s <= _0[_0.length - 1];
      0;
      const r = Y.useCallback(() => {
        for (let e = 0; e < _0.length; e++) {
          if (_0[e] < s) {
            xP(_0[e]);
            rp(op.decreaseElevation);
            if (dT.value?.toolOptionsElevationStep) {
              ig(dT.value?.toolOptionsElevationStep);
            }
            break;
          }
        }
      }, [s]);
      const l = s >= _0[0];
      0;
      const c = Y.useCallback(() => {
        for (let e = _0.length - 1; e >= 0; e--) {
          if (_0[e] > s) {
            xP(_0[e]);
            rp(op.increaseElevation);
            if (dT.value?.toolOptionsElevationStep) {
              ig(dT.value?.toolOptionsElevationStep);
            }
            break;
          }
        }
      }, [s]);
      return t.min >= t.max ? null : (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.ELEVATION_TITLE, {}),
          uiTag: dT.value?.toolOptionsElevation,
          uiTagLeft: dT.value?.toolOptionsElevationDecrease,
          uiTagRight: dT.value?.toolOptionsElevationIncrease,
          readonly: e,
          leftDisabled: i,
          onSelectLeft: pP,
          rightDisabled: a,
          onSelectRight: gP,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: n,
              unit: Oc.NetElevation
            })
          })
        }, "elevation"), (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.ToolOptions.TOOLTIP_ELEVATION_STEP, {}),
          hidden: e,
          uiTag: dT.value?.toolOptionsElevationStep,
          onSelectLeft: o ? undefined : r,
          onSelectRight: l ? undefined : c,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: s,
              unit: Oc.NetElevation
            })
          })
        }, "elevationStep")]
      });
    };
    const T0 = ({
      readonly: e
    }) => {
      const t = sl(GO);
      const n = sl(JO);
      const s = sl(eP);
      0;
      const i = Y.useCallback(() => {
        TP(!s);
        rp(s ? op.increaseElevation : op.decreaseElevation);
      }, [s]);
      return t.id !== yP && n ? (0, z.jsx)(r0, {
        title: (0, z.jsx)(Pc.Toolbar.UNDERGROUND_MODE_TITLE, {}),
        readonly: e,
        uiTag: dT.value?.toolOptionsUnderground,
        onSelectLeft: i,
        onSelectRight: i,
        children: (0, z.jsx)(AJ, {
          src: "Media/Tools/Net Tool/Underground.svg",
          disabled: !n,
          selected: s,
          onSelect: i,
          shortcut: t.id === IP ? s ? "Exit Underground Mode" : "Enter Underground Mode" : undefined
        })
      }) : null;
    };
    const E0 = [2, 4, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96];
    const I0 = ({
      readonly: e
    }) => {
      const t = sl(XO);
      const n = sl(QO);
      const s = sl(ZO);
      const a = s <= E0[0];
      0;
      const o = Y.useCallback(() => {
        for (let e = E0.length - 1; e >= 0; e--) {
          if (E0[e] < s) {
            bP(E0[e]);
            break;
          }
        }
      }, [s, E0]);
      const r = s >= E0[E0.length - 1];
      0;
      const l = Y.useCallback(() => {
        for (let e = 0; e < E0.length; e++) {
          if (E0[e] > s) {
            bP(E0[e]);
            break;
          }
        }
      }, [s, E0]);
      return t ? (0, z.jsxs)("div", {
        className: Qu()(e && !n && i0.hidden),
        children: [(0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.PARALLEL_MODE_TITLE, {}),
          hidden: e,
          onSelectLeft: _P,
          onSelectRight: _P,
          children: (0, z.jsx)(AJ, {
            src: "Media/Tools/Net Tool/Parallel.svg",
            selected: n,
            onSelect: _P,
            uiTag: e ? undefined : dT.value?.toolOptionsParallelMode
          })
        }, "parallelMode"), n && (0, z.jsx)(r0, {
          title: (0, z.jsx)(Pc.Toolbar.PARALLEL_OFFSET_TITLE, {}),
          readonly: e,
          leftDisabled: a,
          onSelectLeft: o,
          rightDisabled: r,
          onSelectRight: l,
          uiTag: dT.value?.toolOptionsParallelModeOffset,
          uiTagLeft: dT.value?.toolOptionsParallelModeOffsetDecrease,
          uiTagRight: dT.value?.toolOptionsParallelModeOffsetIncrease,
          children: (0, z.jsx)("div", {
            className: i0.field,
            children: (0, z.jsx)(Gc, {
              value: s / 8,
              unit: Oc.FloatTwoFractions
            })
          })
        }, "parallelOffset")]
      }) : null;
    };
    const y0 = () => {
      const e = sl(GO);
      const t = sl(sP);
      const n = sl(iP);
      0;
      const s = Y.useCallback(e => cP(e), []);
      return e.id !== yP && t ? (0, z.jsx)(Ep, {
        className: Qu()(i0.item, i0.readonly),
        children: (0, z.jsxs)("div", {
          className: i0.itemContent,
          children: [(0, z.jsx)("div", {
            className: i0.label,
            children: (0, z.jsx)(Pc.ToolOptions.COLOR_TITLE, {
              hash: e.id
            })
          }), (0, z.jsx)("div", {
            className: i0.content,
            children: (0, z.jsx)(IJ, {
              className: i0.colorField,
              selectAction: "Toggle Tool Color Picker",
              popupDirection: "up",
              value: n,
              onChange: s
            })
          })]
        })
      }) : null;
    };
    X.add("game-ui/game/components/tool-options/gamepad-tool-options/gamepad-tool-options.tsx", {
      get GamepadToolOptions() {
        return o0;
      },
      set GamepadToolOptions(e) {
        o0 = e;
      },
      get Section() {
        return r0;
      },
      set Section(e) {
        r0 = e;
      }
    });
    let S0 = {
      "tool-options-panel": "tool-options-panel_Se6",
      toolOptionsPanel: "tool-options-panel_Se6",
      "gamepad-active": "gamepad-active_Qvi",
      gamepadActive: "gamepad-active_Qvi",
      enter: "enter_YDH",
      "exit-active": "exit-active_hKG",
      exitActive: "exit-active_hKG",
      "enter-active": "enter-active_bG3",
      enterActive: "enter-active_bG3",
      exit: "exit_oe7",
      wrapper: "wrapper_eKY",
      hints: "hints_R2B",
      hint: "hint_Bep"
    };
    X.add("game-ui/game/components/tool-options/tool-options-panel.module.scss", {
      get classes() {
        return S0;
      },
      set classes(e) {
        Object.assign(S0, e);
      }
    });
    var C0 = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n,
      showHint: s
    }, i) {
      0;
      const [a, o] = Y.useState(false);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: S0.wrapper,
        children: [s && (0, z.jsx)("div", {
          className: S0.hints,
          children: (0, z.jsx)(LT, {
            action: a ? "Close" : "Tool Options"
          })
        }), z.jsx(aT, {
          uiTag: dT.value?.toolOptions,
          disableBlinking: true,
          children: z.jsx(dh, {
            styles: S0,
            children: z.jsx(N0, {
              focusKey: e,
              className: t,
              onClose: n,
              onFocused: o,
              ref: i
            })
          })
        })]
      });
    });
    var N0 = Y.forwardRef(function ({
      onFocused: e,
      ...t
    }, n) {
      0;
      const [s, i] = Y.useState(false);
      const a = km();
      0;
      const o = Y.useCallback(t => {
        e?.(t);
        i(t);
      }, [e]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(sp, {
        focusKey: t.focusKey,
        children: z.jsx(kg, {
          onAction: t.onClose,
          children: z.jsxs(Tp, {
            ref: n,
            onFocusChange: o,
            className: Qu()(S0.toolOptionsPanel, a && S0.gamepadActive, t.className),
            children: [z.jsx(Ap, {
              children: a ? (0, z.jsx)(o0, {}) : (0, z.jsx)(FJ, {})
            }), z.jsx(LT, {
              action: "Move Horizontal",
              active: s,
              className: S0.hint
            })]
          })
        })
      });
    });
    function w0() {
      const e = sl(tL);
      const t = sl(iL);
      const n = sl(GO);
      const s = sl(MP);
      const i = sl(HO);
      const a = sl(YO);
      const o = sl(XO);
      const r = sl(JO);
      const l = sl(sP);
      return n.id !== PP && (e.length > 0 || t.length > 0 || n.modes.length > 1 || 0 !== i || a.min < a.max || o || l || n.id !== yP && r || !Ur(s, Xp));
    }
    X.add("game-ui/game/components/tool-options/tool-options-panel.tsx", {
      get ToolOptionsPanel() {
        return C0;
      },
      set ToolOptionsPanel(e) {
        C0 = e;
      },
      get ToolOptions() {
        return N0;
      },
      set ToolOptions(e) {
        N0 = e;
      },
      get useToolOptionsVisible() {
        return w0;
      },
      set useToolOptionsVisible(e) {
        w0 = e;
      }
    });
    var P0 = $r("editorTutorials", "tutorialsDisabled");
    var L0 = $r("editorTutorials", "tutorialsEnabled");
    var A0 = $r("editorTutorials", "introActive");
    $r("editorTutorials", "activeList");
    $r("editorTutorials", "next");
    var M0 = $r("editorTutorials", "categories");
    var R0 = $r("editorTutorials", "listIntroActive");
    var k0 = $r("editorTutorials", "listOutroActive");
    var D0 = $r("editorTutorials", "activeTutorial");
    $r("editorTutorials", "activeTutorialPhase");
    $r("editorTutorials", "advisorPanelVisible");
    var F0 = el("editorTutorials", "completeListIntro");
    X.add("game-ui/game/data-binding/editor-tutorial-bindings.ts", {
      get tutorialsDisabled() {
        return tutorialsDisabled;
      },
      set tutorialsDisabled(e) {
        tutorialsDisabled = e;
      },
      get tutorialsEnabled() {
        return tutorialsEnabled;
      },
      set tutorialsEnabled(e) {
        tutorialsEnabled = e;
      },
      get tutorialIntroActive() {
        return tutorialIntroActive;
      },
      set tutorialIntroActive(e) {
        tutorialIntroActive = e;
      },
      get activeTutorialList() {
        return activeTutorialList;
      },
      set activeTutorialList(e) {
        activeTutorialList = e;
      },
      get nextTutorial() {
        return nextTutorial;
      },
      set nextTutorial(e) {
        nextTutorial = e;
      },
      get tutorialCategories() {
        return tutorialCategories;
      },
      set tutorialCategories(e) {
        tutorialCategories = e;
      },
      get listIntroActive() {
        return listIntroActive;
      },
      set listIntroActive(e) {
        listIntroActive = e;
      },
      get listOutroActive() {
        return listOutroActive;
      },
      set listOutroActive(e) {
        listOutroActive = e;
      },
      get activeTutorial() {
        return activeTutorial;
      },
      set activeTutorial(e) {
        activeTutorial = e;
      },
      get activeTutorialPhase() {
        return activeTutorialPhase;
      },
      set activeTutorialPhase(e) {
        activeTutorialPhase = e;
      },
      get advisorPanelVisible() {
        return advisorPanelVisible;
      },
      set advisorPanelVisible(e) {
        advisorPanelVisible = e;
      },
      get completeListIntro() {
        return F0;
      },
      set completeListIntro(e) {
        F0 = e;
      }
    });
    let U0 = {
      "background-process-indicator": "background-process-indicator_NS7",
      backgroundProcessIndicator: "background-process-indicator_NS7",
      spinner: "spinner_TZP",
      rotate: "rotate_dOE",
      message: "message_UX3"
    };
    X.add("game-ui/common/background-process-indicator/background-process-indicator.module.scss", {
      get classes() {
        return U0;
      },
      set classes(e) {
        Object.assign(U0, e);
      }
    });
    0;
    var G0 = Y.memo(function ({
      className: e
    }) {
      const t = sl(IE);
      return t ? (0, z.jsxs)("div", {
        className: Qu()(U0.backgroundProcessIndicator, e),
        children: [(0, z.jsx)("div", {
          className: U0.message,
          children: (0, z.jsx)(Tc, {
            id: t
          })
        }), (0, z.jsx)(W_, {
          src: "Media/Glyphs/ArrowCircular.svg",
          className: U0.spinner
        })]
      }) : null;
    });
    X.add("game-ui/common/background-process-indicator/background-process-indicator.tsx", {
      get BackgroundProcessIndicator() {
        return G0;
      },
      set BackgroundProcessIndicator(e) {
        G0 = e;
      }
    });
    let V0 = {
      "climate-field": "climate-field_dIy field_eKJ",
      climateField: "climate-field_dIy field_eKJ",
      weather: "weather_dXo",
      "weather-container": "weather-container_L1D",
      weatherContainer: "weather-container_L1D",
      "celestial-object": "celestial-object_su7",
      celestialObject: "celestial-object_su7",
      active: "active_k1G",
      obstructed: "obstructed_oBa",
      sun: "sun_XMt celestial-object_su7",
      moon: "moon_TlF celestial-object_su7",
      "weather-icon": "weather-icon_BeV",
      weatherIcon: "weather-icon_BeV",
      temperature: "temperature_CiN",
      season: "season_js3",
      "season-hidden": "season-hidden_Y_1",
      seasonHidden: "season-hidden_Y_1"
    };
    X.add("game-ui/game/components/toolbar/bottom/climate-field/climate-field.module.scss", {
      get classes() {
        return V0;
      },
      set classes(e) {
        Object.assign(V0, e);
      }
    });
    var K0 = ({
      hideSeason: e,
      theme: t
    }) => {
      const n = sl($S);
      const s = sl(qS);
      const i = ol(XS, (e, t) => {
        if (Math.round(e) !== Math.round(t)) {
          o(e);
        }
      });
      0;
      const [a, o] = Y.useState(i);
      const r = function (e) {
        switch (e) {
          case IO.Sunrise:
          case IO.Day:
          case IO.Sunset:
            return false;
          default:
            return true;
        }
      }(sl(CO));
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(zq, {
        title: z.jsx(Pc.Main.TOOLTIP_TITLE_WEATHER, {}),
        description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_WEATHER, {}),
        children: z.jsxs(Ep, {
          className: Qu()(V0.climateField, t?.climateField, {
            [V0.seasonHidden]: e
          }),
          children: [z.jsx("div", {
            className: Qu()(V0.weather, t?.weather),
            children: z.jsxs("div", {
              className: V0.weatherContainer,
              children: [z.jsx("img", {
                src: "Media/Game/Climate/Sun.svg",
                className: Qu()(V0.sun, !r && V0.active, s > YS.Few && V0.obstructed)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Moon.svg",
                className: Qu()(V0.moon, r && V0.active, s > YS.Few && V0.obstructed)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Few.svg",
                className: Qu()(V0.weatherIcon, s === YS.Few && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Scattered.svg",
                className: Qu()(V0.weatherIcon, s === YS.Scattered && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Broken.svg",
                className: Qu()(V0.weatherIcon, s === YS.Broken && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Overcast.svg",
                className: Qu()(V0.weatherIcon, s === YS.Overcast && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Rain.svg",
                className: Qu()(V0.weatherIcon, s === YS.Rain && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Snow.svg",
                className: Qu()(V0.weatherIcon, s === YS.Snow && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Hail.svg",
                className: Qu()(V0.weatherIcon, s === YS.Hail && V0.active)
              }), z.jsx("img", {
                src: "Media/Game/Climate/Storm.svg",
                className: Qu()(V0.weatherIcon, s === YS.Storm && V0.active)
              }), z.jsx("div", {
                className: Qu()(V0.temperature, t?.temperature),
                children: z.jsx(Gc, {
                  value: a,
                  unit: Oc.Temperature
                })
              })]
            })
          }), !e && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(Qq, {}), (0, z.jsx)("div", {
              className: Qu()(V0.season, t?.season),
              children: null != n && (0, z.jsx)(Tc, {
                id: n
              })
            })]
          })]
        })
      });
    };
    X.add("game-ui/game/components/toolbar/bottom/climate-field/climate-field.tsx", {
      get ClimateField() {
        return K0;
      },
      set ClimateField(e) {
        K0 = e;
      }
    });
    var z0 = $r("editorBottomBar", "timeOfDay", 0);
    var Y0 = $r("editorBottomBar", "date", 0);
    var $0 = $r("editorBottomBar", "cloudiness", 0);
    var q0 = e => tl("editorBottomBar", "setTimeOfDay", e);
    var X0 = () => tl("editorBottomBar", "resetTimeOfDay");
    var Q0 = e => tl("editorBottomBar", "setDate", e);
    var Z0 = () => tl("editorBottomBar", "resetDate");
    var J0 = e => tl("editorBottomBar", "setCloudiness", e);
    var e1 = () => tl("editorBottomBar", "resetCloudiness");
    X.add("game-ui/editor/data-binding/editor-bottom-bar-bindings.ts", {
      get timeOfDay() {
        return timeOfDay;
      },
      set timeOfDay(e) {
        timeOfDay = e;
      },
      get date() {
        return date;
      },
      set date(e) {
        date = e;
      },
      get cloudiness() {
        return cloudiness;
      },
      set cloudiness(e) {
        cloudiness = e;
      },
      get setTimeOfDay() {
        return q0;
      },
      set setTimeOfDay(e) {
        q0 = e;
      },
      get resetTimeOfDay() {
        return X0;
      },
      set resetTimeOfDay(e) {
        X0 = e;
      },
      get setDate() {
        return Q0;
      },
      set setDate(e) {
        Q0 = e;
      },
      get resetDate() {
        return Z0;
      },
      set resetDate(e) {
        Z0 = e;
      },
      get setCloudiness() {
        return J0;
      },
      set setCloudiness(e) {
        J0 = e;
      },
      get resetCloudiness() {
        return e1;
      },
      set resetCloudiness(e) {
        e1 = e;
      }
    });
    let t1 = {
      "bottom-bar": "bottom-bar_ODl",
      bottomBar: "bottom-bar_ODl",
      "bp-indicator": "bp-indicator_RBs",
      bpIndicator: "bp-indicator_RBs",
      space: "space_u2B",
      button: "button_wKY",
      "button-highlight": "button-highlight_lZc",
      buttonHighlight: "button-highlight_lZc",
      sliders: "sliders_H5X",
      slider: "slider_aPR",
      "slider-container": "slider-container_Fkn",
      sliderContainer: "slider-container_Fkn",
      aside: "aside_uAL",
      controls: "controls_tq0",
      modes: "modes_Bd5",
      "inspector-modes": "inspector-modes_ur5",
      inspectorModes: "inspector-modes_ur5"
    };
    X.add("game-ui/editor/components/bottom-bar/bottom-bar.module.scss", {
      get classes() {
        return t1;
      },
      set classes(e) {
        Object.assign(t1, e);
      }
    });
    let s1 = {
      button: "button_MPc",
      hint: "hint_l3s"
    };
    X.add("game-ui/editor/components/bottom-bar/bottom-bar-floating-hint-button.module.scss", {
      get classes() {
        return s1;
      },
      set classes(e) {
        Object.assign(s1, e);
      }
    });
    let a1 = {
      button: "button_hIJ item-mouse-states_Fmi item-focused_FuT",
      hint: "hint_LGc"
    };
    X.add("game-ui/editor/components/bottom-bar/bottom-bar-reset-button.module.scss", {
      get classes() {
        return a1;
      },
      set classes(e) {
        Object.assign(a1, e);
      }
    });
    var r1 = ({
      className: e,
      onPauseMenuToggle: t
    }) => {
      const n = sl(Y0);
      const s = sl(z0);
      const i = sl($0);
      const a = sl(P0);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ep, {
        allowLooping: true,
        direction: Mg.Horizontal,
        children: z.jsxs("div", {
          className: Qu()(t1.bottomBar, e),
          children: [z.jsxs("div", {
            className: t1.controls,
            children: [z.jsxs("div", {
              className: t1.aside,
              children: [z.jsx(sX, {
                disablePauseAnimation: true,
                editor: true
              }), z.jsx(bp, {
                children: z.jsx(K0, {
                  hideSeason: true
                })
              })]
            }), z.jsxs("div", {
              className: t1.sliders,
              children: [z.jsx(aT, {
                uiTag: dT.value?.resetTODButton,
                editor: true,
                children: z.jsx(l1, {
                  value: s,
                  onChange: q0,
                  icon: "Media/Editor/Time.svg",
                  onReset: X0,
                  sliderTooltip: z.jsx(Pc.Editor.TIME_OF_DAY, {}),
                  resetTooltip: z.jsx(Pc.Editor.RESET_TIME_OF_DAY, {})
                })
              }), z.jsx(l1, {
                value: n,
                onChange: Q0,
                icon: "Media/Editor/Date.svg",
                onReset: Z0,
                sliderTooltip: z.jsx(Pc.Editor.TIME_OF_YEAR, {}),
                resetTooltip: z.jsx(Pc.Editor.RESET_TIME_OF_YEAR, {})
              }), z.jsx(l1, {
                value: i,
                onChange: J0,
                icon: "Media/Editor/Weather.svg",
                onReset: e1,
                sliderTooltip: z.jsx(Pc.Editor.CLOUDINESS, {}),
                resetTooltip: z.jsx(Pc.Editor.RESET_CLOUDINESS, {})
              })]
            }), z.jsx("div", {
              children: z.jsx(G0, {
                className: t1.bpIndicator
              })
            })]
          }), z.jsxs("div", {
            className: t1.modes,
            children: [z.jsxs("div", {
              className: t1.inspectorModes,
              children: [!a && (0, z.jsx)(aT, {
                uiTag: dT.value?.tutorialsToggle,
                editor: true,
                children: (0, z.jsx)(u1, {})
              }), z.jsx(c1, {
                cameraMode: XZ.FirstPerson,
                icon: "Media/Editor/CinematicCameraOn.svg",
                offIcon: "Media/Editor/CinematicCameraOff.svg",
                tooltip: z.jsx(Pc.PhotoMode.TOGGLE_FIRST_PERSON_MODE, {})
              }), z.jsx(c1, {
                cameraMode: XZ.Orbit,
                icon: "Media/Game/Icons/Orbit.svg",
                tooltip: z.jsx(Pc.PhotoMode.TOGGLE_ORBIT_MODE, {})
              })]
            }), z.jsx(bg, {
              tooltip: z.jsx(Pc.Common.PAUSE_MENU_TOGGLE_TOOLTIP, {}),
              children: z.jsx($_, {
                tinted: true,
                src: "Media/Glyphs/Gear.svg",
                className: t1.button,
                onSelect: t,
                theme: s1
              })
            })]
          })]
        })
      });
    };
    const l1 = ({
      value: e,
      onChange: t,
      icon: n,
      onReset: s,
      sliderTooltip: i,
      resetTooltip: a
    }) => (0, z.jsxs)("div", {
      className: t1.slider,
      children: [(0, z.jsx)(bg, {
        tooltip: a,
        children: (0, z.jsx)($_, {
          src: n,
          onSelect: s,
          theme: a1
        })
      }), (0, z.jsx)(Tp, {
        className: t1.sliderContainer,
        children: (0, z.jsx)(Np, {
          children: (0, z.jsx)(bg, {
            tooltip: i,
            children: (0, z.jsx)(GM, {
              value: e,
              start: 0,
              end: 1,
              noFill: true,
              onChange: t
            })
          })
        })
      })]
    });
    const c1 = ({
      cameraMode: e,
      icon: t,
      offIcon: n,
      tooltip: s
    }) => {
      const i = sl(rJ) === e;
      0;
      const a = Y.useCallback(() => {
        lJ(i ? XZ.Default : e);
      }, [i, e]);
      const o = undefined === n || i ? t : n;
      0;
      0;
      return z.jsx(bg, {
        tooltip: s,
        children: z.jsx($_, {
          src: o,
          className: Qu()(t1.button, i && t1.buttonHighlight),
          onSelect: a,
          theme: s1
        })
      });
    };
    const u1 = () => {
      const e = sl(cJ);
      0;
      const n = Y.useCallback(() => {
        uJ();
      }, []);
      const s = e ? "Media/Glyphs/Close.svg" : "Media/Glyphs/Advisor.svg";
      0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: z.jsx(Pc.Tutorials.ADVISOR_TITLE, {}),
        children: z.jsx($_, {
          tinted: true,
          src: s,
          className: Qu()(t1.button),
          onSelect: n,
          theme: s1
        })
      });
    };
    X.add("game-ui/editor/components/bottom-bar/bottom-bar.tsx", {
      get BottomBar() {
        return r1;
      },
      set BottomBar(e) {
        r1 = e;
      }
    });
    var d1 = Y.forwardRef(function ({
      theme: e = WT,
      onClose: t,
      expanded: n = true,
      headerText: s,
      onToggleExpanded: i,
      className: a,
      children: o,
      isFocusRoot: r,
      headerIcon: l,
      togglable: c = true,
      ...u
    }, d) {
      const m = KT(e);
      0;
      const [h, g] = Y.useState(n);
      0;
      const p = Y.useCallback(() => {
        rp(op.expandPanel);
        g(e => !e);
        if (i) {
          i(!h);
        }
      }, [h, i]);
      0;
      const f = Y.useMemo(() => ({
        theme: m,
        onClose: t,
        expanded: h,
        toggleExpanded: p
      }), [m, t, h, p]);
      0;
      Y.useEffect(() => {
        g(n);
      }, [n]);
      const x = r ? Ip : Lh;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(x, {
        children: z.jsx(Dg, {
          onAction: t,
          children: z.jsx(HT.Provider, {
            value: f,
            children: z.jsx(ZT, {
              theme: m,
              ref: d,
              header: z.jsx(m1, {
                togglable: c,
                icon: l,
                children: s
              }),
              ...u,
              className: Qu()(h ? "expanded" : "collapsed", "collapsible", a),
              children: h ? o : undefined
            })
          })
        })
      });
    });
    const m1 = ({
      icon: e,
      theme: t,
      togglable: n = true,
      className: s,
      children: i
    }) => {
      0;
      const a = Y.useContext(HT);
      const o = !km() && null != a.onClose;
      const r = t ?? a.theme;
      0;
      0;
      0;
      return z.jsxs("div", {
        onClick: a.toggleExpanded,
        className: Qu()(r.titleBar, s),
        children: [null != e ? "string" == typeof e ? (0, z.jsx)("img", {
          src: e,
          className: r.icon
        }) : e : o && (0, z.jsx)("div", {
          className: r.iconSpace
        }), z.jsx("div", {
          className: r.iconSpace
        }), z.jsx("div", {
          className: r.title,
          children: i
        }), n && (0, z.jsx)(W_, {
          className: r.toggle,
          src: a.expanded ? r.toggleIconExpanded : r.toggleIcon
        }), o ? (0, z.jsx)($_, {
          tinted: true,
          focusKey: Eg,
          src: r.closeIcon,
          theme: q_,
          className: r.closeButton,
          onSelect: a.onClose,
          onClick: Ob
        }) : null != e && (0, z.jsx)("div", {
          className: r.iconSpace
        })]
      });
    };
    X.add("game-ui/common/panel/collapsible-panel.tsx", {
      get CollapsiblePanel() {
        return d1;
      },
      set CollapsiblePanel(e) {
        d1 = e;
      }
    });
    let h1 = {
      panel: "panel_WVw panel_YqS",
      header: "header_IuN header_Bpo child-opacity-transition_nkS",
      content: "content_yeu content_AD7 child-opacity-transition_nkS",
      footer: "footer_j9m footer_pD5 child-opacity-transition_nkS",
      title: "title_q1x title_zQN"
    };
    X.add("game-ui/editor/themes/editor-panel.module.scss", {
      get classes() {
        return h1;
      },
      set classes(e) {
        Object.assign(h1, e);
      }
    });
    let p1 = {
      "foldout-item": "foldout-item_EBr foldout-item_wOF",
      foldoutItem: "foldout-item_EBr foldout-item_wOF",
      category: "category_Zf1",
      header: "header_h0B header_8H_ item-mouse-states_Fmi item-focused_FuT",
      "header-content": "header-content_owU header-content_wUX",
      headerContent: "header-content_owU header-content_wUX",
      icon: "icon_pQQ undefined",
      toggle: "toggle_NYV toggle_yQv"
    };
    X.add("game-ui/common/foldout/themes/advisor-item.module.scss", {
      get classes() {
        return p1;
      },
      set classes(e) {
        Object.assign(p1, e);
      }
    });
    let x1 = {
      "advisor-panel": "advisor-panel_dXi",
      advisorPanel: "advisor-panel_dXi",
      scrollable: "scrollable_jAA",
      content: "content_Q2v",
      icon: "icon_l_s",
      hint: "hint_o1P",
      label: "label_D2b"
    };
    X.add("game-ui/game/components/advisor-panel/advisor-panel.module.scss", {
      get classes() {
        return x1;
      },
      set classes(e) {
        Object.assign(x1, e);
      }
    });
    var _1 = ({
      expanded: e,
      className: t,
      focusKey: n,
      localization: s,
      theme: i,
      onClose: a,
      onToggle: o
    }) => {
      const r = sl(s === Pc.Tutorials ? Uh : M0);
      const l = sl(s === Pc.Tutorials ? Mh : L0);
      const c = km();
      0;
      0;
      0;
      0;
      0;
      return z.jsx(d1, {
        isFocusRoot: true,
        onClose: s === Pc.Tutorials ? a : undefined,
        theme: i,
        expanded: e,
        onToggleExpanded: o,
        focusKey: n,
        headerText: z.jsx(Pc.Tutorials.ADVISOR_TITLE, {}),
        transitionSounds: lp,
        className: Qu()(x1.advisorPanel, t),
        showCloseHint: true,
        togglable: !c,
        children: z.jsx(Wp, {
          ifFocused: true,
          ifGamepad: true,
          children: z.jsx(ep, {
            children: z.jsx(ab, {
              className: x1.scrollable,
              children: r.filter(e => !l || e.shown && !e.locked).map((e, t) => (0, z.jsx)(b1, {
                category: e,
                showAll: !l,
                localization: s
              }, t))
            })
          })
        })
      });
    };
    const b1 = ({
      category: e,
      localization: t,
      showAll: n
    }) => (0, z.jsx)(by, {
      initialExpanded: true,
      header: t === Pc.Tutorials && (0, z.jsx)(Ty, {
        children: (0, z.jsx)(t.TITLE, {
          hash: e.name
        })
      }),
      theme: p1,
      type: "Category",
      children: e.children.filter(e => (n || e.shown) && !e.locked).map((e, s) => e.type === lg.Tutorial ? (0, z.jsx)(E1, {
        item: e,
        showAll: n,
        localization: t
      }, s) : (0, z.jsx)(T1, {
        item: e,
        showAll: n,
        localization: t
      }, s))
    });
    const T1 = ({
      item: e,
      type: t = "Group",
      nesting: n = 1,
      showAll: s,
      localization: i
    }) => {
      0;
      const a = Y.useMemo(() => n + 1, [n]);
      0;
      0;
      0;
      0;
      return z.jsx(by, {
        header: z.jsxs(Ty, {
          children: [e.icon && (0, z.jsx)("img", {
            src: e.icon,
            className: x1.icon
          }), z.jsx("div", {
            className: x1.label,
            children: z.jsx(i.TITLE, {
              hash: e.name
            })
          })]
        }),
        theme: p1,
        nesting: n,
        type: t,
        children: e.children.filter(e => (s || e.shown) && !e.locked).map((e, t) => e.type === lg.Tutorial ? (0, z.jsx)(E1, {
          item: e,
          showAll: s,
          nesting: a,
          localization: i
        }, t) : (0, z.jsx)(T1, {
          item: e,
          showAll: s,
          nesting: a,
          localization: i
        }, t))
      });
    };
    const E1 = ({
      item: e,
      type: t = "Item",
      nesting: n = 1,
      showAll: s,
      localization: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      const r = km();
      const l = ll(Hh, e.entity);
      const c = r && 1 === l?.phases.length;
      const u = sl(Tm);
      0;
      const d = Y.useMemo(() => n + 1, [n]);
      0;
      const m = Y.useCallback(() => {
        if (l?.active) {
          $h(Xp);
        } else {
          Xh(e.entity, Xp, true);
        }
      }, [e.entity, l?.active]);
      0;
      return z.jsx(z.Fragment, {
        children: l && y1(l, u) ? (0, z.jsx)(by, {
          header: (0, z.jsxs)(Ty, {
            onFocusChange: o,
            children: [(0, z.jsx)(LT, {
              action: "Select",
              active: a && c,
              className: x1.hint
            }), e.icon && (0, z.jsx)("img", {
              src: e.icon,
              className: x1.icon
            }), (0, z.jsx)("div", {
              className: x1.label,
              children: (0, z.jsx)(i.TITLE, {
                hash: e.name
              })
            })]
          }),
          theme: p1,
          nesting: n,
          type: t,
          onSelect: l.phases.length > 1 ? undefined : m,
          children: l.phases.length > 1 ? l.phases.filter(e => s || e.shown).map((e, t) => (0, z.jsx)(I1, {
            tutorial: l,
            phase: e,
            nesting: d,
            localization: i
          }, t)) : undefined
        }) : undefined
      });
    };
    const I1 = ({
      tutorial: e,
      phase: t,
      nesting: n,
      localization: s
    }) => {
      0;
      const [i, a] = Y.useState(false);
      0;
      const o = Y.useCallback(() => {
        if (t?.active) {
          $h(Xp);
        } else {
          Xh(e.entity, t.entity, true);
        }
      }, [e, t]);
      const r = e.phases.findIndex(e => Ur(e.entity, t.entity));
      const l = e.phases.findIndex(e => e.trigger?.phaseBranching);
      const c = l >= 0 && r > l ? t.isBranch ? n + 1 : n + 2 : n;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(by, {
        header: z.jsxs(Ty, {
          onFocusChange: a,
          children: [z.jsx(LT, {
            action: "Select",
            active: i,
            className: x1.hint
          }), z.jsx("img", {
            src: "Media/Game/Icons/TutorialPhase.svg",
            className: x1.icon
          }), z.jsx("div", {
            className: x1.label,
            children: z.jsx(s.TITLE, {
              hash: t.name
            })
          })]
        }),
        theme: p1,
        nesting: c,
        onSelect: o,
        className: Qu()(t?.active && "selected")
      });
    };
    const y1 = (e, t) => {
      switch (t) {
        case xm.gamepad:
          return !e.filters?.includes("KeyboardAndMouse");
        case xm.keyboardAndMouse:
          return !e.filters?.includes("Gamepad");
        default:
          return false;
      }
    };
    X.add("game-ui/game/components/advisor-panel/advisor-panel.tsx", {
      get AdvisorPanel() {
        return _1;
      },
      set AdvisorPanel(e) {
        _1 = e;
      }
    });
    let S1 = {
      button: "button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      "toggle-states": "toggle-states_DTm",
      toggleStates: "toggle-states_DTm",
      icon: "icon_soN icon_Iwk",
      locked: "locked_H2O locked_dBl"
    };
    X.add("game-ui/game/themes/transparent-button.module.scss", {
      get classes() {
        return S1;
      },
      set classes(e) {
        Object.assign(S1, e);
      }
    });
    const C1 = ["#DF2E3890", "#5D9C5990", "#0081C990"];
    const N1 = ["#DF2E38", "#5D9C59", "#0081C9"];
    var w1 = (e, t = [], n) => {
      const s = t.length > 1 ? e : 1;
      return n ? N1[s % N1.length] : C1[s % C1.length];
    };
    X.add("game-ui/editor/widgets/fields/animation-curve-field/utils/animation-curve-colors.ts", {
      get getCurveColorForIndex() {
        return w1;
      },
      set getCurveColorForIndex(e) {
        w1 = e;
      }
    });
    let O1 = {
      hiddenIcon: '"Media/PhotoMode/Dropdown.svg"',
      visibleIcon: '"Media/PhotoMode/Dropdown.svg"',
      "dropdown-toggle": "dropdown-toggle_oMB dropdown-toggle_prl",
      dropdownToggle: "dropdown-toggle_oMB dropdown-toggle_prl",
      indicator: "indicator_czv",
      "dropdown-menu": "dropdown-menu_m7l dropdown-menu_Swd",
      dropdownMenu: "dropdown-menu_m7l dropdown-menu_Swd",
      "dropdown-item": "dropdown-item_JVW undefined",
      dropdownItem: "dropdown-item_JVW undefined"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-dropdown.theme.module.scss", {
      get classes() {
        return O1;
      },
      set classes(e) {
        Object.assign(O1, e);
      }
    });
    let L1 = {
      "cinematic-camera-main-panel": "cinematic-camera-main-panel_jpU",
      cinematicCameraMainPanel: "cinematic-camera-main-panel_jpU",
      "curve-editor": "curve-editor_Ay4",
      curveEditor: "curve-editor_Ay4",
      "curve-editor-wrapper": "curve-editor-wrapper__lJ item-selected_tAM item-focused_FuT",
      curveEditorWrapper: "curve-editor-wrapper__lJ item-selected_tAM item-focused_FuT",
      timeline: "timeline_Zcy",
      title: "title_MaW",
      "curve-selector": "curve-selector_YdT",
      curveSelector: "curve-selector_YdT",
      "curve-controls": "curve-controls_AqW",
      curveControls: "curve-controls_AqW",
      toggle: "toggle_Mkg",
      "button-panel": "button-panel_UUV",
      buttonPanel: "button-panel_UUV",
      button: "button_R8g",
      "controls-group": "controls-group_nLN",
      controlsGroup: "controls-group_nLN",
      "controls-separator": "controls-separator_eet",
      controlsSeparator: "controls-separator_eet",
      icon: "icon__8f",
      label: "label_Heh",
      spacing: "spacing_l1z",
      bottom: "bottom__Hh",
      left: "left_gIb",
      right: "right_fUY",
      "dropdown-toggle": "dropdown-toggle_Fww item-states_QjV",
      dropdownToggle: "dropdown-toggle_Fww item-states_QjV",
      "property-legend": "property-legend_yOI",
      propertyLegend: "property-legend_yOI",
      "property-component": "property-component_Y36 item-states_QjV",
      propertyComponent: "property-component_Y36 item-states_QjV",
      "property-component-indicator": "property-component-indicator_TYv",
      propertyComponentIndicator: "property-component-indicator_TYv",
      hint: "hint_qPd"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-main-panel.module.scss", {
      get classes() {
        return L1;
      },
      set classes(e) {
        Object.assign(L1, e);
      }
    });
    var M1 = ({
      groupedModifierData: e,
      onSelectProperty: t,
      activePropertyIndex: n
    }) => {
      const {
        selectActiveCurve: s,
        data: i
      } = DG();
      const {
        svg: a
      } = EU();
      0;
      const o = Y.useRef(n);
      0;
      const r = Y.useRef(e.length);
      const l = e[n];
      0;
      Y.useEffect(() => {
        if (n !== o.current) {
          a?.viewport?.resetViewport();
          s(0);
          o.current = n;
        }
      }, [n, s, a]);
      0;
      Y.useEffect(() => {
        if (r.current && r.current !== e.length && e.length > 0) {
          t(e.length - 1);
        }
        r.current = e.length;
      }, [e.length, t]);
      if (!i.curves.length || !l) {
        return null;
      }
      const c = !!l?.children;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: L1.curveSelector,
        children: [z.jsx(ny, {
          theme: O1,
          content: e.map((e, s) => {
            const i = s === n;
            0;
            0;
            return z.jsx(oy, {
              focusKey: s,
              value: s,
              selected: i,
              onChange: () => t(s),
              children: z.jsx(Pc.PhotoMode.PROPERTY_TITLE, {
                hash: e.id
              })
            }, s);
          }),
          children: z.jsx(sy, {
            className: L1.dropdownToggle,
            children: z.jsx(Pc.PhotoMode.PROPERTY_TITLE, {
              hash: l.id
            })
          })
        }), c && (0, z.jsx)("div", {
          className: L1.propertyLegend,
          children: l.children?.map((e, t) => (0, z.jsx)(R1, {
            index: t,
            onSelect: s,
            id: e.id,
            color: w1(t, i.curves, true)
          }, e.id))
        })]
      });
    };
    const R1 = ({
      index: e,
      onSelect: t,
      id: n,
      color: s
    }) => {
      0;
      const i = Y.useCallback(() => t(e), [e, t]);
      0;
      const a = Y.useMemo(() => n.endsWith("/r") ? "Red" : n.endsWith("/g") ? "Green" : n.endsWith("/b") ? "Blue" : n.endsWith("/a") ? "Alpha" : n, [n]);
      0;
      0;
      0;
      return z.jsxs(L_, {
        className: L1.propertyComponent,
        onSelect: i,
        children: [z.jsx("div", {
          className: L1.propertyComponentIndicator,
          style: {
            backgroundColor: s
          }
        }), z.jsx(Pc.PhotoMode.PROPERTY_TITLE, {
          hash: a
        })]
      });
    };
    X.add("game-ui/game/components/cinematic-camera/components/curve-selector.tsx", {
      get CurveSelector() {
        return M1;
      },
      set CurveSelector(e) {
        M1 = e;
      }
    });
    let k1 = {
      button: "button_Ytr item-states_QjV",
      active: "active_Arq",
      inactive: "inactive_Kj2",
      hint: "hint_rNg"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-icon-button-theme.module.scss", {
      get classes() {
        return k1;
      },
      set classes(e) {
        Object.assign(k1, e);
      }
    });
    const F1 = () => "";
    const B1 = {
      top: 50,
      left: 10,
      right: 10,
      bottom: 10
    };
    const G1 = new Tg("CINEMATIC CURVE CONTROLS");
    const V1 = new Tg("CINEMATIC CURVE EDITOR");
    var H1 = ({
      label: e,
      modifierData: t,
      canAddKeyframes: n,
      tutorialTag: s
    }) => {
      const i = sl(Jy);
      0;
      const [a, o] = Y.useState(0);
      0;
      const [r, l] = Y.useState(0);
      0;
      const [c, u] = Y.useState(false);
      const d = sl(Ml);
      const m = t.grouped[r];
      0;
      const h = Y.useMemo(() => m ? m.children ? m.children.map(e => e.curve) : [m.curve] : [], [m]);
      const p = IV(h, {
        minX: 0,
        maxX: i,
        minY: isFinite(m?.min) && m?.min !== m?.max ? m.min : undefined,
        maxY: isFinite(m?.max) && m?.min !== m?.max ? m.max : undefined,
        wrapMode: "clamp",
        hash: `${r}-${a}`
      });
      const f = OS(e, a);
      0;
      const x = Y.useCallback((e, t) => {
        let n = t.time;
        n = Math.max(0, n);
        n = Math.min(i, n);
        return {
          ...t,
          time: n
        };
      }, [i]);
      0;
      const [v, _] = Y.useState(G1);
      0;
      const b = Y.useMemo(() => ({
        "Move Vertical": () => {
          _(e => e === G1 ? V1 : G1);
        }
      }), []);
      0;
      const T = Y.useCallback(async () => {
        const e = await fS();
        return {
          x: e[0] * 100,
          y: e[1] * 100
        };
      }, []);
      0;
      const E = Y.useCallback(async () => {
        const e = await vS();
        return {
          x: e[0] * 100,
          y: e[1] * 100
        };
      }, []);
      0;
      const I = Y.useCallback(async () => {
        const e = await xS();
        return {
          x: e * 100,
          y: e
        };
      }, []);
      const y = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: s,
        children: z.jsxs(Ep, {
          className: L1.curveEditorWrapper,
          children: [z.jsx(MT, {
            action: c ? "Back" : "Select",
            className: L1.hint
          }), z.jsx(Np, {
            onSelectedStateChanged: u,
            children: z.jsx(Lg, {
              actions: b,
              children: z.jsx(ip, {
                focused: v,
                children: z.jsx(TU, {
                  children: z.jsxs(kG, {
                    data: p,
                    parseKeyframe: x,
                    canAddKeyframes: n,
                    onSetActiveCurve: e => {
                      o(m.index + e);
                    },
                    ...f,
                    children: [z.jsxs(ep, {
                      direction: Mg.Horizontal,
                      focusKey: G1,
                      children: [(h.length > 0 || "Position" === e) && (0, z.jsx)(K1, {
                        label: e,
                        property: m ? m.id : ""
                      }), z.jsx(M1, {
                        activePropertyIndex: r,
                        onSelectProperty: e => {
                          o(t.grouped[e].index);
                          l(e);
                        },
                        groupedModifierData: t.grouped
                      })]
                    }), z.jsx(XG, {
                      zoomable: "y",
                      panable: "y",
                      showTooltipOnDrag: true,
                      className: L1.curveEditor,
                      padding: B1,
                      formatLabelX: F1,
                      textScale: d,
                      keyframeMoveCallback: y ? T : undefined,
                      panCallback: y ? E : undefined,
                      zoomCallback: y ? I : undefined,
                      OnFocusChange: _S,
                      focusKey: V1
                    })]
                  })
                })
              })
            })
          })]
        })
      });
    };
    const K1 = ({
      label: e,
      property: t
    }) => {
      const {
        activeKeyframe: n,
        activeCurve: s,
        removeKeyframe: i
      } = DG();
      0;
      const a = Y.useCallback(() => {
        i(n, s);
      }, [i, n, s]);
      0;
      const o = Y.useCallback(() => {
        uS(e, t);
      }, [e, t]);
      0;
      0;
      return z.jsx("div", {
        className: L1.curveControls,
        children: z.jsx(aT, {
          uiTag: dT.value?.cinematicCameraPanelCaptureKey,
          children: n < 0 ? (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.CinematicCamera.CAPTURE, {}),
            children: (0, z.jsx)($_, {
              src: "Media/PhotoMode/AddKeyframe.svg",
              onSelect: o,
              theme: k1
            })
          }) : (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.CinematicCamera.DELETE_KEY, {}),
            children: (0, z.jsx)($_, {
              src: "Media/PhotoMode/DeleteKeyframe.svg",
              onSelect: a,
              theme: k1
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-curve-editor.tsx", {
      get CinematicCameraCurveEditor() {
        return H1;
      },
      set CinematicCameraCurveEditor(e) {
        H1 = e;
      }
    });
    let W1 = {
      "curve-timeline-editor": "curve-timeline-editor_pYg",
      curveTimelineEditor: "curve-timeline-editor_pYg",
      wrapper: "wrapper_aL2 item-selected_tAM item-focused_FuT",
      hint: "hint_liM"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-curve-timeline.module.scss", {
      get classes() {
        return W1;
      },
      set classes(e) {
        Object.assign(W1, e);
      }
    });
    const Y1 = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 15
    };
    const $1 = e => (0, z.jsx)(LG, {
      keyframe: e,
      hide: "value"
    });
    const q1 = ({
      data: e
    }, t, n) => (0, z.jsx)("g", {
      children: (0, z.jsx)(GG, {
        origin: "center",
        x: e.time,
        y: -1.8,
        fill: "#eee",
        width: 10,
        height: 17,
        onSelect: t,
        collisionThreshold: 12,
        children: (0, z.jsx)(GG, {
          x: e.time,
          y: -.525,
          origin: "center",
          fill: "#eee",
          width: 7.8,
          height: 7.8,
          transform: "rotate(45)"
        })
      })
    });
    var X1 = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = sl(eS);
      const s = sl(Jy);
      0;
      const i = Y.useRef(false);
      0;
      const [a, o] = Y.useState();
      const r = sl(Ml);
      0;
      const {
        parseKeyframe: l,
        emptyString: c,
        labelFormatter: u,
        goToPoint: d
      } = Y.useMemo(() => ({
        parseKeyframe: (e, t) => ({
          ...t,
          value: 0,
          time: Math.min(Math.max(t.time, 0), s || 1)
        }),
        emptyString: () => "",
        labelFormatter: e => Math.round(10 * e) / 10 + "s",
        goToPoint: ({
          point: e
        }) => {
          rS(e.x);
        }
      }), [s]);
      0;
      const m = Y.useCallback(() => {
        i.current = true;
        const e = () => {
          i.current = false;
          o(undefined);
          window.removeEventListener("mouseup", e);
        };
        window.addEventListener("mouseup", e);
      }, []);
      0;
      const h = Y.useCallback(({
        point: e
      }) => {
        if (i.current) {
          const t = Math.max(0, Math.min(e.x, s));
          rS(t);
          o({
            time: t
          });
        }
      }, [s]);
      0;
      const g = Y.useMemo(() => ({
        bounds: {
          min: {
            x: 0,
            y: -1
          },
          max: {
            x: s || 1,
            y: 1
          }
        },
        curves: [{
          keys: [{
            time: n,
            value: 0,
            inTangent: Infinity,
            outTangent: Infinity,
            inWeight: .33,
            outWeight: .33,
            weightedMode: OG.Both
          }],
          postWrapMode: PG.Default,
          preWrapMode: PG.Default
        }]
      }), [s, n]);
      0;
      const p = Y.useMemo(() => ({
        "Move Horizontal": e => {
          const t = wd(n + e * (s / 30), 0, s);
          rS(t);
        }
      }), [s, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        className: W1.wrapper,
        children: [z.jsx(MT, {
          action: e ? "Back" : "Select",
          className: W1.hint
        }), z.jsx(Np, {
          onSelectedStateChanged: t,
          children: z.jsx(Lg, {
            actions: p,
            children: z.jsx(kG, {
              data: g,
              parseKeyframe: l,
              keyframeRenderer: q1,
              children: z.jsx(XG, {
                formatLabelX: u,
                formatLabelY: c,
                className: W1.curveTimelineEditor,
                padding: Y1,
                gridLines: false,
                onClick: d,
                showTooltipOnDrag: true,
                tooltipKeyframe: a,
                formatTooltip: $1,
                onMouseDown: m,
                onWindowMouseMove: h,
                textScale: r,
                children: z.jsx(dG, {
                  drawAxes: "x"
                })
              })
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-curve-timeline.tsx", {
      get CinematicCameraCurveTimeline() {
        return X1;
      },
      set CinematicCameraCurveTimeline(e) {
        X1 = e;
      }
    });
    let Q1 = {
      "cinematic-camera-slider": "cinematic-camera-slider_yuq",
      cinematicCameraSlider: "cinematic-camera-slider_yuq",
      "slider-container": "slider-container_GDX",
      sliderContainer: "slider-container_GDX",
      value: "value_uvb"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-slider.module.scss", {
      get classes() {
        return Q1;
      },
      set classes(e) {
        Object.assign(Q1, e);
      }
    });
    var J1 = ({
      focusKey: e,
      value: t,
      start: n,
      end: s,
      className: i,
      onChange: a,
      onDragEnd: o
    }) => (0, z.jsx)(bg, {
      tooltip: (0, z.jsx)(Pc.CinematicCamera.SEGMENT_DURATION, {}),
      children: (0, z.jsxs)(Tp, {
        className: Qu()(Q1.cinematicCameraSlider, i),
        children: [(0, z.jsx)("div", {
          className: Q1.sliderContainer,
          children: (0, z.jsx)(Np, {
            children: (0, z.jsx)(GM, {
              showHint: true,
              focusKey: e,
              value: t,
              start: n,
              end: s,
              onChange: a,
              onDragEnd: o
            })
          })
        }), (0, z.jsxs)("div", {
          className: Q1.value,
          children: [t.toFixed(1), "s"]
        })]
      })
    });
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-slider.tsx", {
      get CinematicCameraSlider() {
        return J1;
      },
      set CinematicCameraSlider(e) {
        J1 = e;
      }
    });
    var e2 = () => {
      const e = sl(iS) ? "Pause" : "Play";
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(aT, {
          uiTag: dT.value?.cinematicCameraPanelPlay,
          children: z.jsx($_, {
            src: `Media/PhotoMode/${e}.svg`,
            theme: k1,
            onSelect: cS
          })
        }), z.jsx(aT, {
          uiTag: dT.value?.cinematicCameraPanelStop,
          children: z.jsx($_, {
            src: "Media/PhotoMode/Stop.svg",
            theme: k1,
            onSelect: lS
          })
        })]
      });
    };
    X.add("game-ui/game/components/cinematic-camera/components/cinematic-camera-playback-controls.tsx", {
      get CinematicCameraPlaybackControls() {
        return e2;
      },
      set CinematicCameraPlaybackControls(e) {
        e2 = e;
      }
    });
    const t2 = /^(Position|Rotation|(\w|\.)+\/)/;
    const n2 = e => {
      const t = sl(e);
      0;
      return Y.useMemo(() => {
        const e = {};
        const n = [];
        const s = Array.isArray(t) ? t.reduce((t, s, i) => {
          const a = s.id ? s.id.match(t2)?.[1] : null;
          let o;
          if (a) {
            let n = e[a];
            if (!e[a]) {
              n = {
                ...s,
                index: i,
                children: [],
                id: a.replace("/", "")
              };
              e[a] = n;
              t.push(e[a]);
            }
            o = {
              ...s,
              index: i,
              groupIndex: t.length - 1,
              curveIndex: n.children.length
            };
            n.children.push(o);
          } else {
            o = {
              ...s,
              index: i,
              curveIndex: 0
            };
            t.push(o);
          }
          n.push(o);
          return t;
        }, []) : [];
        return {
          grouped: s,
          flat: n
        };
      }, [t]);
    };
    var s2 = ({
      toggleSaveLoadPopupVisibility: e
    }) => {
      const t = sl(Jy);
      const n = sl(nS);
      const s = sl(iS);
      0;
      const [i, a] = Y.useState(true);
      const o = n2(NS);
      const r = n2(wS);
      xX(s && i);
      0;
      Y.useEffect(() => () => {
        lS();
        eC();
      }, []);
      0;
      const l = Y.useMemo(() => ({
        Back: s ? () => {
          lS();
        } : null
      }), [s]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: l,
        children: z.jsx(ep, {
          direction: Mg.Vertical,
          children: z.jsxs("div", {
            className: L1.cinematicCameraMainPanel,
            children: [z.jsx(ep, {
              direction: Mg.Horizontal,
              children: z.jsxs("div", {
                className: L1.buttonPanel,
                children: [z.jsxs("div", {
                  className: L1.controlsGroup,
                  children: [z.jsx(e2, {}), z.jsx("div", {
                    className: L1.controlsSeparator
                  }), z.jsx(aT, {
                    uiTag: dT.value?.cinematicCameraPanelSaveLoad,
                    children: z.jsx(bg, {
                      tooltip: z.jsx(Pc.CinematicCamera.SAVE_LOAD_TOOLTIP, {}),
                      children: z.jsx($_, {
                        src: "Media/Glyphs/Save.svg",
                        onSelect: e,
                        theme: k1,
                        tinted: true
                      })
                    })
                  }), z.jsx(aT, {
                    uiTag: dT.value?.cinematicCameraPanelReset,
                    children: z.jsx(bg, {
                      tooltip: z.jsx(Pc.CinematicCamera.RESET_TOOLTIP, {}),
                      children: z.jsx($_, {
                        src: "Media/Glyphs/Trash.svg",
                        onSelect: pS,
                        theme: k1,
                        tinted: true
                      })
                    })
                  })]
                }), z.jsxs("div", {
                  className: L1.controlsGroup,
                  children: [z.jsx(aT, {
                    uiTag: dT.value?.cinematicCameraPanelHideUI,
                    children: z.jsx(bg, {
                      tooltip: z.jsx(Pc.CinematicCamera.HIDE_UI, {}),
                      children: z.jsx($_, {
                        src: i ? "Media/PhotoMode/HideUIOn.svg" : "Media/PhotoMode/HideUIOff.svg",
                        onSelect: () => a(e => !e),
                        theme: k1,
                        className: i ? k1.active : k1.inactive,
                        tinted: true
                      })
                    })
                  }), z.jsx(bg, {
                    tooltip: z.jsx(Pc.CinematicCamera.LOOP, {}),
                    children: z.jsx($_, {
                      src: n ? "Media/PhotoMode/LoopOn.svg" : "Media/PhotoMode/LoopOff.svg",
                      onSelect: () => sS(!n),
                      theme: k1,
                      className: n ? k1.active : k1.inactive,
                      tinted: true
                    })
                  }), z.jsx(aT, {
                    uiTag: dT.value?.cinematicCameraPanelPlaybackDurationSlider,
                    children: z.jsx(J1, {
                      label: z.jsx(Pc.CinematicCamera.PLAYBACK_DURATION, {}),
                      value: t,
                      start: 1,
                      end: 120,
                      onChange: aS,
                      onDragEnd: oS
                    })
                  })]
                })]
              })
            }), z.jsx(H1, {
              label: "Position",
              canAddKeyframes: true,
              modifierData: o,
              tutorialTag: dT.value?.cinematicCameraPanelTransformCurves
            }), z.jsx(H1, {
              label: "Property",
              canAddKeyframes: true,
              modifierData: r,
              tutorialTag: dT.value?.cinematicCameraPanelPropertyCurves
            }), z.jsx(aT, {
              uiTag: dT.value?.cinematicCameraPanelTimelineSlider,
              children: z.jsx(X1, {})
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-main-panel.tsx", {
      get CinematicCameraMainPanel() {
        return s2;
      },
      set CinematicCameraMainPanel(e) {
        s2 = e;
      }
    });
    let i2 = {
      row: "row_ZqL",
      col: "col_zHI"
    };
    X.add("game-ui/ui/layout.module.scss", {
      get classes() {
        return i2;
      },
      set classes(e) {
        Object.assign(i2, e);
      }
    });
    var o2 = e => (0, z.jsx)("div", {
      style: e.style,
      className: Qu()(i2.row, e.className),
      children: e.children
    });
    var r2 = e => (0, z.jsx)("div", {
      style: e.style,
      className: Qu()(i2.col, e.className),
      children: e.children
    });
    X.add("game-ui/ui/layout.tsx", {
      get Row() {
        return o2;
      },
      set Row(e) {
        o2 = e;
      },
      get Col() {
        return r2;
      },
      set Col(e) {
        r2 = e;
      }
    });
    var l2 = {
      theme: BQ,
      expanded: false
    };
    var c2 = Y.createContext(l2);
    X.add("game-ui/common/section/section-context.ts", {
      get defaultSectionContext() {
        return l2;
      },
      set defaultSectionContext(e) {
        l2 = e;
      },
      get SectionContext() {
        return c2;
      },
      set SectionContext(e) {
        c2 = e;
      }
    });
    let u2 = {
      section: "section_sop section_gUk",
      header: "header_l0j undefined",
      content: "content_flM content_owQ",
      locked: "locked_UXm",
      first: "first_l25",
      last: "last_ZNw",
      "title-bar": "title-bar_J7X title-bar_wU9",
      titleBar: "title-bar_J7X title-bar_wU9",
      title: "title_PYv title_bwV",
      "toggle-button": "toggle-button_UA2 toggle-button_sQk",
      toggleButton: "toggle-button_UA2 toggle-button_sQk"
    };
    X.add("game-ui/common/section/themes/panel-section.module.scss", {
      get classes() {
        return u2;
      },
      set classes(e) {
        Object.assign(u2, e);
      }
    });
    var m2 = Y.forwardRef(function ({
      focusKey: e,
      header: t,
      tooltip: n,
      theme: s = u2,
      initialFocused: i,
      direction: a = Mg.Vertical,
      className: o,
      children: r,
      onFocusChange: l,
      onRefocus: c,
      ...u
    }, d) {
      const m = VQ(s);
      const h = Y.Children.count(t) > 0;
      const g = Y.Children.count(r) > 0;
      0;
      const p = Y.useMemo(() => ({
        theme: m,
        expanded: g
      }), [g, m]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: n,
        children: z.jsx(Ep, {
          ref: d,
          focusKey: e,
          className: Qu()(m.section, o),
          onFocusChange: l,
          ...u,
          children: z.jsx(c2.Provider, {
            value: p,
            children: z.jsxs(ep, {
              direction: a,
              initialFocused: i,
              onRefocus: c,
              children: [h && (0, z.jsx)("div", {
                className: Qu()(m.header, m.first),
                children: t
              }), z.jsx("div", {
                className: Qu()(m.content, !h && m.first, m.last),
                children: r
              })]
            })
          })
        })
      });
    });
    X.add("game-ui/common/section/section.tsx", {
      get Section() {
        return m2;
      },
      set Section(e) {
        m2 = e;
      }
    });
    let h2 = {
      "item-picker-section": "item-picker-section_y66",
      itemPickerSection: "item-picker-section_y66",
      "panel-content": "panel-content_vkN",
      panelContent: "panel-content_vkN",
      "button-row": "button-row_odR",
      buttonRow: "button-row_odR",
      input: "input_xwy item-states_QjV",
      "cloud-picker": "cloud-picker_mqV item-states_QjV",
      cloudPicker: "cloud-picker_mqV item-states_QjV",
      "cloud-picker-dropdown": "cloud-picker-dropdown_ibN",
      cloudPickerDropdown: "cloud-picker-dropdown_ibN",
      "list-hint": "list-hint_bZz",
      listHint: "list-hint_bZz",
      "input-row": "input-row_BgG",
      inputRow: "input-row_BgG"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-save-load-panel.module.scss", {
      get classes() {
        return h2;
      },
      set classes(e) {
        Object.assign(h2, e);
      }
    });
    function p2({
      onClose: e
    }) {
      const t = sl(yS);
      const n = sl(IS);
      0;
      const [s, i] = Y.useState(false);
      0;
      const [a, o] = Y.useState(function (e, t) {
        if (!Vr(e)) {
          const n = t.findIndex(t => t.guid === e);
          return n >= 0 ? n : 0;
        }
        return 0;
      }(null !== n ? n.guid : null, t));
      const r = function (e) {
        0;
        const t = Y.useCallback(t => {
          const n = e[t];
          const s = nY(n.cloudTarget, n.isReadOnly) ?? "";
          const i = tY(n.cloudTarget);
          return {
            displayName: bc(n.name),
            image: s ?? "",
            tinted: i,
            directory: false,
            favorite: false,
            badge: null
          };
        }, [e]);
        return {
          length: e.length,
          get: t
        };
      }(t);
      0;
      const l = oc(z.jsx(Pc.CinematicCamera.NEW_SEQUENCE_PLACEHOLDER, {}));
      0;
      const [c, u] = Y.useState(t.length > a ? t[a].name : l);
      0;
      const d = Y.useContext(lE);
      const m = sl(SS);
      const h = sl(jS);
      0;
      const g = Y.useCallback(e => u(e.target.value), []);
      0;
      const p = Y.useCallback(() => {
        if (a >= 0 && a < t.length) {
          0;
          0;
          0;
          d.showDialog(z.jsx(LI, {
            title: z.jsx(Pc.Common.WARNING, {}),
            message: z.jsx(Pc.CinematicCamera.UNSAVED_DISCLAIMER, {}),
            onConfirm: () => TS(t[a].guid, t[a].cloudTarget)
          }));
        }
      }, [a, t, d]);
      0;
      const f = Y.useCallback(() => {
        if (a >= 0 && a < t.length) {
          0;
          0;
          0;
          d.showDialog(z.jsx(LI, {
            title: z.jsx(Pc.Common.WARNING, {}),
            message: z.jsx(Pc.CinematicCamera.DELETE_DISCLAIMER, {
              NAME: t[a].name
            }),
            onConfirm: () => ES(t[a].guid, t[a].cloudTarget)
          }));
        }
      }, [a, t, d]);
      0;
      const x = Y.useCallback(() => {
        if (!Vr(c)) {
          const e = t.find(e => !e.isReadOnly && e.cloudTarget === h && e.name === c);
          if (e) {
            0;
            0;
            0;
            d.showDialog(z.jsx(LI, {
              title: z.jsx(Pc.Common.WARNING, {}),
              message: z.jsx(Pc.CinematicCamera.OVERRIDE_DISCLAIMER, {
                NAME: c
              }),
              onConfirm: () => bS(c, e.guid)
            }));
          } else {
            bS(c, null);
          }
        }
      }, [c, t, d, h]);
      0;
      const v = Y.useCallback(e => {
        o(e);
        u(t[e].name);
      }, [t]);
      const _ = mW();
      const b = sl(kk);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        onClose: e,
        header: z.jsx(nE, {
          children: z.jsx(Pc.CinematicCamera.SAVE_LOAD_TOOLTIP, {})
        }),
        contentClassName: h2.panelContent,
        allowFocusExit: true,
        children: z.jsxs(ep, {
          children: [z.jsx(f2, {
            targets: m,
            selectedTarget: h,
            onSelectTarget: CS
          }), z.jsx(m2, {
            className: h2.itemPickerSection,
            children: z.jsxs(Np, {
              onSelectedStateChanged: i,
              children: [z.jsx(MT, {
                action: s ? "Back" : "Select",
                className: h2.listHint
              }), z.jsx(dY, {
                selectedIndex: a,
                columnCount: 1,
                data: r,
                onSelect: v,
                hasImages: true
              })]
            })
          }), z.jsx(o2, {
            className: h2.inputRow,
            children: z.jsx(zE, {
              showHint: true,
              value: c,
              onChange: g,
              className: Qu()(_.input, h2.input)
            })
          }), z.jsxs("div", {
            className: h2.buttonRow,
            children: [z.jsx(bg, {
              tooltip: b.reasonHash ? (0, z.jsx)(Pc.Common.SAVEABILITY_REASON, {
                hash: b.reasonHash
              }) : (0, z.jsx)(Pc.CinematicCamera.SAVE_TOOLTIP, {}),
              children: z.jsx($_, {
                src: "Media/Glyphs/Save.svg",
                onSelect: x,
                disabled: !b.canSave || Vr(c),
                tinted: true,
                theme: k1
              })
            }), z.jsx(bg, {
              tooltip: z.jsx(Pc.CinematicCamera.LOAD_TOOLTIP, {}),
              children: z.jsx($_, {
                src: "Media/Glyphs/School.svg",
                disabled: a < 0 || a >= t.length,
                onSelect: p,
                tinted: true,
                theme: k1
              })
            }), z.jsx(bg, {
              tooltip: z.jsx(Pc.CinematicCamera.DELETE_TOOLTIP, {}),
              children: z.jsx($_, {
                src: "Media/Glyphs/Trash.svg",
                disabled: a < 0 || a >= t.length || t[a].isReadOnly,
                onSelect: f,
                tinted: true,
                theme: k1
              })
            })]
          })]
        })
      });
    }
    function f2({
      targets: e,
      selectedTarget: t,
      onSelectTarget: n
    }) {
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: h2.cloudPicker,
        children: [z.jsx("div", {
          children: z.jsx(Pc.Menu.CLOUD_TARGET_LABEL, {})
        }), z.jsx("div", {
          className: h2.cloudPickerDropdown,
          children: z.jsx(ny, {
            content: e.map((e, t) => (0, z.jsx)(oy, {
              value: e,
              onChange: n,
              children: (0, z.jsx)(Pc.Menu.CLOUD_TARGET, {
                hash: e
              })
            }, t)),
            theme: jY,
            children: z.jsx(sy, {
              value: t,
              showHint: true,
              children: z.jsx(Pc.Menu.CLOUD_TARGET, {
                hash: t
              })
            })
          })
        })]
      });
    }
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-save-load-panel.tsx", {
      get CinematicCameraSaveLoadPanel() {
        return p2;
      },
      set CinematicCameraSaveLoadPanel(e) {
        p2 = e;
      }
    });
    let x2 = {
      "cinematic-panel-layout": "cinematic-panel-layout_e2g",
      cinematicPanelLayout: "cinematic-panel-layout_e2g",
      "floating-hint": "floating-hint_yzc",
      floatingHint: "floating-hint_yzc"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-panel.module.scss", {
      get classes() {
        return x2;
      },
      set classes(e) {
        Object.assign(x2, e);
      }
    });
    let _2 = {
      base: "base_iGt",
      enter: "enter_F0S",
      "exit-active": "exit-active__9F",
      exitActive: "exit-active__9F",
      "enter-active": "enter-active_Dkv",
      enterActive: "enter-active_Dkv",
      exit: "exit_tDP",
      wrapper: "wrapper_bAS"
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-panel-transitions.module.scss", {
      get classes() {
        return _2;
      },
      set classes(e) {
        Object.assign(_2, e);
      }
    });
    var T2 = ({
      isVisible: e,
      onClose: t
    }) => {
      ag(dT.value?.cinematicCameraPanel);
      0;
      const [n, s] = Y.useState(false);
      0;
      Y.useEffect(() => {
        if (!e) {
          s(false);
        }
      }, [e]);
      0;
      const i = Y.useCallback(() => s(e => !e), []);
      0;
      0;
      0;
      return z.jsxs("div", {
        className: x2.cinematicPanelLayout,
        children: [z.jsx(cd, {
          children: n && (0, z.jsx)(p2, {
            onClose: i
          }, "CinematicCameraSaveLoad")
        }), z.jsx(cd, {
          children: e && (0, z.jsx)(aT, {
            uiTag: dT.value?.cinematicCameraPanel,
            children: (0, z.jsx)(ZT, {
              transitionSounds: lp,
              onClose: t,
              transition: _2,
              allowFocusExit: true,
              showCloseHint: true,
              unfocusedHintAction: "Close",
              hintClassName: x2.floatingHint,
              children: (0, z.jsx)(s2, {
                toggleSaveLoadPopupVisibility: i
              })
            }, "CinematicCameraPanel")
          })
        })]
      }, "CinematicCameraLayout");
    };
    X.add("game-ui/game/components/cinematic-camera/cinematic-camera-panel.tsx", {
      get CinematicCameraPanel() {
        return T2;
      },
      set CinematicCameraPanel(e) {
        T2 = e;
      }
    });
    let E2 = {
      field: "field_Y9F undefined",
      label: "label_6SZ label_eX_"
    };
    X.add("game-ui/game/widgets/field/row-field.module.scss", {
      get classes() {
        return E2;
      },
      set classes(e) {
        Object.assign(E2, e);
      }
    });
    var y2 = {
      ...P_,
      hover: null,
      focus: null
    };
    function S2(e) {
      0;
      return z.jsx(j2, {
        ...e.props,
        children: e.props.value
      });
    }
    var j2 = ({
      theme: e = E2,
      disabled: t,
      className: n,
      children: s,
      onClick: i,
      onFocusChange: a
    }) => {
      0;
      const o = Y.useCallback(e => {
        if (!t && i) {
          i(e);
        }
      }, [t, i]);
      0;
      0;
      return z.jsx(Ep, {
        focusKey: t ? Eg : undefined,
        focusSound: op.hoverItem,
        className: Qu()(e.field, t && "disabled", n),
        onClick: o,
        onFocusChange: a,
        children: z.jsx("div", {
          children: s
        })
      });
    };
    X.add("game-ui/game/widgets/field/field.tsx", {
      get optionButtonSounds() {
        return y2;
      },
      set optionButtonSounds(e) {
        y2 = e;
      },
      get ValueField() {
        return S2;
      },
      set ValueField(e) {
        S2 = e;
      },
      get Field() {
        return j2;
      },
      set Field(e) {
        j2 = e;
      }
    });
    let C2 = {
      container: "container_eL2",
      dropdown: "dropdown_pJu item-states_QjV",
      hint: "hint_t2G"
    };
    X.add("game-ui/game/widgets/dropdown-field/dropdown-field.module.scss", {
      get classes() {
        return C2;
      },
      set classes(e) {
        Object.assign(C2, e);
      }
    });
    function w2(e) {
      0;
      return z.jsx(P2, {
        items: e.props.enumMembers,
        value: e.props.value,
        ...e
      });
    }
    function O2(e) {
      0;
      return z.jsx(P2, {
        items: e.props.items,
        value: e.props.value,
        ...e
      });
    }
    function P2(e) {
      const t = e.items.findIndex(t => Kr(t.value, e.value));
      const n = -1 !== t ? e.items[t] : null;
      const s = PA(BA, sM(e.parent, e.path));
      0;
      const [i, a] = Y.useState(false);
      0;
      const [o, r] = Y.useState(false);
      0;
      const [l, c] = Y.useState(t);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(j2, {
        ...e.props,
        onFocusChange: a,
        className: C2.container,
        children: [z.jsx(LT, {
          action: o ? "Back" : "Select",
          active: !e.props.disabled && i,
          className: C2.hint
        }), z.jsx(ny, {
          focusKey: e.props.disabled ? Eg : Ig,
          initialFocused: t,
          theme: jQ,
          content: z.jsx(ep, {
            onChange: c,
            allowLooping: true,
            children: e.items.filter((e, n) => !e.disabled && (0 !== n || 0 === t)).map((t, a) => (0, z.jsxs)(oy, {
              focusKey: a,
              value: t.value,
              selected: !!n && Kr(n.value, t.value),
              onChange: s,
              children: [(0, z.jsx)(LT, {
                action: "Select",
                active: !e.props.disabled && l === a && i,
                className: C2.hint
              }), L2(t)]
            }, a))
          }),
          onToggle: r,
          children: z.jsx(sy, {
            disabled: e.props.disabled,
            sounds: y2,
            className: C2.dropdown,
            children: L2(n)
          })
        })]
      });
    }
    function L2(e) {
      return e ? (0, z.jsx)(hu, {
        value: e.displayName
      }) : null;
    }
    X.add("game-ui/game/widgets/dropdown-field/dropdown-field.tsx", {
      get BoundEnumField() {
        return w2;
      },
      set BoundEnumField(e) {
        w2 = e;
      },
      get BoundDropdownField() {
        return O2;
      },
      set BoundDropdownField(e) {
        O2 = e;
      }
    });
    let A2 = {
      row: "row_l3P",
      input: "input_JvC",
      label: "label_eX_",
      checkbox: "checkbox_mm1",
      container: "container_ex5",
      hint: "hint_zmA"
    };
    X.add("game-ui/game/widgets/field/field.module.scss", {
      get classes() {
        return A2;
      },
      set classes(e) {
        Object.assign(A2, e);
      }
    });
    var R2 = e => {
      0;
      const [t, n] = Y.useState(false);
      const s = PA(BA, sM(e.parent, e.path));
      0;
      const i = Y.useCallback(() => {
        n(true);
      }, []);
      0;
      const a = Y.useCallback(() => {
        n(false);
      }, []);
      0;
      const o = Y.useMemo(() => ({
        "Change Value": t ? t => {
          if (t > 0) {
            const t = e.props.max ? Math.min(e.props.value + e.props.step, e.props.max) : e.props.value + e.props.step;
            s(t);
          }
          if (t < 0) {
            const t = e.props.min ? Math.max(e.props.value - e.props.step, e.props.min) : e.props.value - e.props.step;
            s(t);
          }
        } : null
      }), [t, s, e.props.max, e.props.min, e.props.step, e.props.value]);
      0;
      const [r, l] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(jp, {
        disabled: !t,
        children: z.jsx(Lg, {
          actions: o,
          children: z.jsxs("div", {
            className: A2.container,
            children: [z.jsx(LT, {
              action: t ? "Back" : "Select",
              active: r,
              className: A2.hint
            }), z.jsx(Tp, {
              className: `${A2.row} row-number-input`,
              onFocusChange: l,
              children: z.jsx(dV, {
                focusKey: e.props.disabled ? Eg : Ig,
                value: e.props.value,
                min: e.props.min,
                max: e.props.max,
                fractionDigits: e.props.fractionDigits,
                disabled: e.props.disabled,
                className: A2.input,
                onFocus: i,
                onBlur: a,
                onChange: s
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/game/widgets/field/float-input-field.tsx", {
      get BoundFloatInputField() {
        return R2;
      },
      set BoundFloatInputField(e) {
        R2 = e;
      }
    });
    var k2 = e => {
      0;
      const [t, n] = Y.useState(false);
      const s = PA(BA, sM(e.parent, e.path));
      0;
      const i = Y.useCallback(() => {
        n(true);
      }, []);
      0;
      const a = Y.useCallback(() => {
        n(false);
      }, []);
      0;
      const o = Y.useMemo(() => ({
        "Change Value": t ? t => {
          if (t > 0) {
            const t = e.props.max ? Math.min(e.props.value + e.props.step, e.props.max) : e.props.value + e.props.step;
            s(t);
          }
          if (t < 0) {
            const t = e.props.min ? Math.max(e.props.value - e.props.step, e.props.min) : e.props.value - e.props.step;
            s(t);
          }
        } : null
      }), [t, s, e.props.max, e.props.min, e.props.step, e.props.value]);
      0;
      const [r, l] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(jp, {
        disabled: !t,
        children: z.jsx(Lg, {
          actions: o,
          children: z.jsxs("div", {
            className: A2.container,
            children: [z.jsx(LT, {
              action: t ? "Back" : "Select",
              active: r,
              className: A2.hint
            }), z.jsx(Tp, {
              className: `${A2.row} row-number-input`,
              onFocusChange: l,
              children: z.jsx(CV, {
                focusKey: e.props.disabled ? Eg : Ig,
                value: e.props.value,
                min: e.props.min,
                max: e.props.max,
                disabled: e.props.disabled,
                className: A2.input,
                onFocus: i,
                onBlur: a,
                onChange: s
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/game/widgets/field/int-input-field.tsx", {
      get BoundIntInputField() {
        return k2;
      },
      set BoundIntInputField(e) {
        k2 = e;
      }
    });
    var D2 = Y.createContext({
      addAction: () => ({})
    });
    X.add("game-ui/game/widgets/widget-actions-context.tsx", {
      get WidgetActionsContext() {
        return D2;
      },
      set WidgetActionsContext(e) {
        D2 = e;
      }
    });
    let F2 = {
      "game-icon-button-group": "game-icon-button-group_RE4",
      gameIconButtonGroup: "game-icon-button-group_RE4",
      button: "button_C2v",
      hidden: "hidden_D1T"
    };
    X.add("game-ui/game/widgets/icon-button/icon-button.module.scss", {
      get classes() {
        return F2;
      },
      set classes(e) {
        Object.assign(F2, e);
      }
    });
    var B2 = e => (0, z.jsx)(H2, {
      children: (0, z.jsx)(V2, {
        ...e
      })
    });
    var G2 = ({
      parent: e,
      path: t,
      children: n
    }) => {
      const s = sM(e, t);
      0;
      return z.jsx(H2, {
        children: n.map(({
          path: e,
          ...t
        }) => (0, z.jsx)(V2, {
          parent: s,
          path: e,
          ...t
        }, e))
      });
    };
    const V2 = ({
      parent: e,
      path: t,
      props: n
    }) => {
      const s = PA(UA, sM(e, t));
      0;
      const {
        addAction: i
      } = Y.useContext(D2);
      const a = sl(cC);
      const o = km();
      const r = n.tooltip?.__Type === hc.String && "PhotoMode.CAPTURE_PROPERTY_TOOLTIP" === n.tooltip.id;
      const l = n.tooltip?.__Type === hc.String && "PhotoMode.RESET_PROPERTY_TOOLTIP" === n.tooltip.id;
      const c = o && (l || r);
      0;
      Y.useEffect(() => {
        if (r || l) {
          i({
            [r ? "Capture Keyframe" : "Reset Property"]: !r || a ? s : null
          });
        }
      }, [i, r, a, s, l]);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: n.tutorialTag || undefined,
        children: z.jsx(bg, {
          tooltip: null != n.tooltip ? (0, z.jsx)(hu, {
            value: n.tooltip
          }) : null,
          children: z.jsx(K2, {
            src: n.icon,
            selected: n.selected,
            disabled: n.disabled,
            focusKey: r || l ? Eg : undefined,
            onSelect: s,
            className: Qu()(c && F2.hidden)
          })
        })
      });
    };
    var H2 = ({
      children: e
    }) => (0, z.jsx)("div", {
      className: F2.gameIconButtonGroup,
      children: e
    });
    var K2 = ({
      src: e,
      selected: t,
      disabled: n,
      focusKey: s = Ig,
      className: i,
      onSelect: a
    }) => (0, z.jsx)($_, {
      focusKey: s,
      tinted: true,
      src: e,
      selected: t,
      disabled: n,
      theme: S1,
      className: Qu()(F2.button, i),
      onSelect: a
    });
    X.add("game-ui/game/widgets/icon-button/icon-button.tsx", {
      get BoundIconButton() {
        return B2;
      },
      set BoundIconButton(e) {
        B2 = e;
      },
      get BoundIconButtonGroup() {
        return G2;
      },
      set BoundIconButtonGroup(e) {
        G2 = e;
      },
      get GameIconButtonGroup() {
        return H2;
      },
      set GameIconButtonGroup(e) {
        H2 = e;
      },
      get GameIconButton() {
        return K2;
      },
      set GameIconButton(e) {
        K2 = e;
      }
    });
    let W2 = {
      "toggle-field": "toggle-field_D6P",
      toggleField: "toggle-field_D6P",
      toggle: "toggle_CGE toggle_cca item-mouse-states_Fmi",
      hint: "hint_ef0",
      checkmark: "checkmark_y64 checkmark_NXV"
    };
    X.add("game-ui/game/widgets/toggle-field/toggle-field.module.scss", {
      get classes() {
        return W2;
      },
      set classes(e) {
        Object.assign(W2, e);
      }
    });
    function Y2(e) {
      const t = PA(BA, sM(e.parent, e.path));
      0;
      const n = Y.useCallback(() => {
        t(!e.props.value);
      }, [t, e.props.value]);
      0;
      const [s, i] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(j2, {
        onFocusChange: i,
        ...e.props,
        onClick: n,
        children: z.jsx(aT, {
          uiTag: e.props.tutorialTag || undefined,
          active: !e.props.disabled,
          children: z.jsxs("div", {
            className: W2.toggleField,
            children: [z.jsx(LT, {
              action: "Select",
              active: s,
              className: W2.hint
            }), z.jsx(bg, {
              tooltip: e.props.tooltip && (0, z.jsx)(hu, {
                value: e.props.tooltip
              }),
              children: z.jsx(kb, {
                checked: e.props.value,
                theme: W2,
                onChange: t,
                disabled: e.props.disabled
              })
            })]
          })
        })
      });
    }
    X.add("game-ui/game/widgets/toggle-field/toggle-field.tsx", {
      get BoundToggleField() {
        return Y2;
      },
      set BoundToggleField(e) {
        Y2 = e;
      }
    });
    let $2 = {
      container: "container_X0Y item-focused_FuT",
      group: "group_exT",
      title: "title_Ymv",
      "group-title": "group-title_kBL",
      groupTitle: "group-title_kBL",
      children: "children_OGU",
      draggable: "draggable_ujB",
      "before-title-group": "before-title-group_QfP",
      beforeTitleGroup: "before-title-group_QfP",
      active: "active_J2S",
      tooltip: "tooltip_Cyv",
      "tooltip-content": "tooltip-content_DIt",
      tooltipContent: "tooltip-content_DIt",
      "tooltip-content-row": "tooltip-content-row_giV",
      tooltipContentRow: "tooltip-content-row_giV",
      "dummy-toggle": "dummy-toggle_QBX",
      dummyToggle: "dummy-toggle_QBX"
    };
    X.add("game-ui/game/components/photo-mode/widgets/photo-mode-container.module.scss", {
      get classes() {
        return $2;
      },
      set classes(e) {
        Object.assign($2, e);
      }
    });
    0;
    var X2 = Y.memo(function ({
      parent: e,
      path: t,
      children: n,
      props: s
    }) {
      0;
      const [i, a] = Y.useState(false);
      0;
      const [o, r] = Y.useState({});
      const l = sM(e, t);
      let c = false;
      let u = false;
      const d = -1 !== n.findIndex(e => "PhotoMode.ENABLE_PROPERTY_TOOLTIP" === e.props?.tooltip?.id && "Game.UI.Widgets.ToggleField" === e.props.__Type && Number(e.path) < 2);
      const [m, h] = n.reduce((e, t) => {
        const n = "Game.UI.Widgets.IconButton" === t.props.__Type && "PhotoMode.CAPTURE_PROPERTY_TOOLTIP" === t.props?.tooltip?.id;
        const s = "Game.UI.Widgets.ToggleField" === t.props.__Type && Number(t.path) < 2;
        if (n || s) {
          if ("PhotoMode.ENABLE_PROPERTY_TOOLTIP" === t.props?.tooltip?.id) {
            c = !!t.props.value;
            u = t.props.disabled;
          }
          if (e[0].find(e => "PhotoMode.CAPTURE_PROPERTY_TOOLTIP" === e.props?.tooltip?.id)) {
            e[1].push(t);
          } else {
            e[0].push(t);
          }
        } else {
          e[1].push(t);
        }
        return e;
      }, [[], []]);
      0;
      const g = Y.useCallback(e => {
        r(t => ({
          ...t,
          ...e
        }));
      }, []);
      0;
      const p = z.jsx(hu, {
        value: s.displayName
      });
      const f = s.tooltip && (0, z.jsx)(hu, {
        value: s.tooltip
      });
      0;
      const x = Y.useMemo(() => ({
        addAction: g
      }), [g]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: c ? o : null,
        children: z.jsx(Ep, {
          onFocusChange: a,
          focusKey: 0 === n.length || u ? Eg : undefined,
          className: Qu()($2.container, {
            [$2.active]: c || !d,
            [$2.group]: !h.length
          }),
          children: z.jsx("div", {
            className: $2.children,
            children: z.jsx(bp, {
              disabled: !i,
              children: z.jsx(D2.Provider, {
                value: x,
                children: z.jsxs(ep, {
                  direction: Mg.Both,
                  children: [!!m.length && (0, z.jsxs)("div", {
                    className: $2.beforeTitleGroup,
                    children: [1 === m.length && "Game.UI.Widgets.IconButton" === m[0].props.__Type && (0, z.jsx)("div", {
                      className: $2.dummyToggle
                    }), (0, z.jsx)(mM, {
                      parent: l,
                      components: o5,
                      data: m
                    })]
                  }), z.jsx(zq, {
                    alignment: "start",
                    direction: "left",
                    title: p,
                    description: f,
                    className: $2.tooltip,
                    children: z.jsx("div", {
                      className: Qu()($2.title, {
                        [$2.groupTitle]: !h.length
                      }, u && "disabled"),
                      children: p
                    })
                  }), z.jsx(bp, {
                    disabled: d && !c,
                    children: z.jsx(mM, {
                      parent: l,
                      components: o5,
                      data: h
                    })
                  })]
                })
              })
            })
          })
        })
      });
    }, (e, t) => Kr(e, t, 20));
    var Q2 = ({
      title: e,
      tooltip: t,
      tooltipPos: n = RA.Container,
      children: s
    }) => {
      let i = null;
      if (e) {
        i = n === RA.Title && t ? (0, z.jsx)(bg, {
          tooltip: t,
          children: (0, z.jsx)("div", {
            className: $2.title,
            children: e
          })
        }) : (0, z.jsx)("div", {
          className: $2.title,
          children: e
        });
      }
      0;
      0;
      0;
      const a = z.jsx(Ep, {
        className: $2.container,
        children: z.jsx(ep, {
          children: z.jsxs("div", {
            className: $2.children,
            children: [i, s]
          })
        })
      });
      return t && n !== RA.Title ? (0, z.jsx)(bg, {
        tooltip: t,
        children: a
      }) : a;
    };
    X.add("game-ui/game/components/photo-mode/widgets/photo-mode-container.tsx", {
      get BoundPhotoModeContainer() {
        return X2;
      },
      set BoundPhotoModeContainer(e) {
        X2 = e;
      },
      get PhotoModeContainer() {
        return Q2;
      },
      set PhotoModeContainer(e) {
        Q2 = e;
      }
    });
    const J2 = (e, t) => [isFinite(e) ? e : Math.sign(e) * 1e4, isFinite(t) ? t > e ? t : 1e4 : Math.sign(t) * 1e4];
    const e5 = (e, t) => Math.pow(Math.abs(e) / t, 3);
    function t5(e) {
      0;
      const [t, n] = Y.useMemo(() => [isFinite(e.props.min) ? e.props.min : Math.sign(e.props.min) * 1e4, isFinite(e.props.max) ? e.props.max > e.props.min ? e.props.max : 1e4 : Math.sign(e.props.max) * 1e4], [e.props.min, e.props.max]);
      0;
      const s = Y.useCallback((e, s) => wd(e + (s < 0 ? t - e : n - e) * Math.pow(Math.abs(s) / .1, 3), t, n), [t, n]);
      0;
      return z.jsx(s5, {
        ...e,
        dragTransformation: s
      });
    }
    function n5(e) {
      0;
      const [t, n] = Y.useMemo(() => [isFinite(e.props.min) ? e.props.min : Math.sign(e.props.min) * 1e4, isFinite(e.props.max) ? e.props.max > e.props.min ? e.props.max : 1e4 : Math.sign(e.props.max) * 1e4], [e.props.min, e.props.max]);
      0;
      const s = Y.useCallback((e, s) => wd(e + (s < 0 ? t - e : n - e) * Math.pow(Math.abs(s) / .1, 3), t, n), [t, n]);
      0;
      return z.jsx(s5, {
        ...e,
        dragTransformation: s
      });
    }
    const s5 = ({
      parent: e,
      path: t,
      props: n,
      dragTransformation: s
    }) => {
      const i = PA(BA, sM(e, t));
      0;
      const a = z.jsx(lV, {
        className: $2.draggable,
        value: n.value,
        disabled: n.disabled,
        dragTransformation: s,
        onChange: i
      });
      0;
      const o = z.jsx(hu, {
        value: n.displayName
      });
      const r = n.tooltip && (0, z.jsx)(hu, {
        value: n.tooltip
      });
      0;
      const l = z.jsx(i5, {
        min: n.min,
        max: n.max,
        fractionDigits: 0
      });
      return o || r || l ? (0, z.jsx)(zq, {
        alignment: "start",
        direction: "left",
        title: o,
        description: r,
        content: l,
        className: $2.tooltip,
        children: a
      }) : a;
    };
    function i5({
      min: e,
      max: t,
      fractionDigits: n
    }) {
      const s = isFinite(e);
      const i = isFinite(t) && (t > e || !s);
      return s || i ? (0, z.jsxs)("div", {
        className: $2.tooltipContent,
        children: [s && (0, z.jsxs)("div", {
          className: $2.tooltipContentRow,
          children: [(0, z.jsx)("div", {
            children: (0, z.jsx)(Pc.PhotoMode.PROPERTY_LIMIT_MIN, {})
          }), (0, z.jsx)("div", {
            children: e.toFixed(n)
          })]
        }), i && (0, z.jsxs)("div", {
          className: $2.tooltipContentRow,
          children: [(0, z.jsx)("div", {
            children: (0, z.jsx)(Pc.PhotoMode.PROPERTY_LIMIT_MAX, {})
          }), (0, z.jsx)("div", {
            children: t.toFixed(n)
          })]
        })]
      }) : null;
    }
    X.add("game-ui/game/components/photo-mode/widgets/photo-mode-draggable-slider.tsx", {
      get BoundIntDraggableSliderField() {
        return t5;
      },
      set BoundIntDraggableSliderField(e) {
        t5 = e;
      },
      get BoundFloatDraggableSliderField() {
        return n5;
      },
      set BoundFloatDraggableSliderField(e) {
        n5 = e;
      }
    });
    var a5 = ({
      displayName: e,
      parent: t,
      data: n
    }) => {
      0;
      const {
        scrollTo: s
      } = Y.useContext(dp);
      0;
      Y.useEffect(() => {
        s(0, 0);
      }, [e, s]);
      0;
      return z.jsx(mM, {
        parent: t,
        components: o5,
        data: n
      }, e);
    };
    var o5 = {
      [AA.Group]: X2,
      [AA.FloatSliderField]: n5,
      [AA.IntSliderField]: t5,
      [AA.ToggleField]: Y2,
      [AA.IconButton]: B2,
      [lC.DropdownField]: O2,
      [AA.FloatInputField]: R2,
      [AA.IntInputField]: k2,
      [AA.EnumField]: w2,
      [AA.ColorField]: EJ
    };
    X.add("game-ui/game/components/photo-mode/photo-widget-renderer.tsx", {
      get PhotoWidgetListRenderer() {
        return a5;
      },
      set PhotoWidgetListRenderer(e) {
        a5 = e;
      },
      get photoModeWidgetComponents() {
        return o5;
      },
      set photoModeWidgetComponents(e) {
        o5 = e;
      }
    });
    let r5 = {
      label: "label_fnL",
      "photo-mode-panel": "photo-mode-panel_oo_",
      photoModePanel: "photo-mode-panel_oo_",
      "photo-mode-content": "photo-mode-content_LMM",
      photoModeContent: "photo-mode-content_LMM",
      "simulation-warning": "simulation-warning_t8O",
      simulationWarning: "simulation-warning_t8O",
      scrollable: "scrollable_eMn",
      "button-panel": "button-panel_dnD",
      buttonPanel: "button-panel_dnD",
      header: "header_TTs",
      "cinematic-camera-button": "cinematic-camera-button_ctq item-states_QjV",
      cinematicCameraButton: "cinematic-camera-button_ctq item-states_QjV",
      "expand-icon": "expand-icon_y2O",
      expandIcon: "expand-icon_y2O",
      "cinematic-camera-icon": "cinematic-camera-icon_thU",
      cinematicCameraIcon: "cinematic-camera-icon_thU",
      "tab-bar": "tab-bar_wDc",
      tabBar: "tab-bar_wDc",
      tabs: "tabs_asW",
      "tab-button": "tab-button_D0T",
      tabButton: "tab-button_D0T",
      icon: "icon_KWo",
      locked: "locked_y0b",
      "footer-button": "footer-button_TNQ",
      footerButton: "footer-button_TNQ",
      "footer-button-hint": "footer-button-hint_poK",
      footerButtonHint: "footer-button-hint_poK",
      hint: "hint_XyY",
      "floating-hint": "floating-hint_k6r",
      floatingHint: "floating-hint_k6r"
    };
    X.add("game-ui/game/components/photo-mode/photo-mode-panel.module.scss", {
      get classes() {
        return r5;
      },
      set classes(e) {
        Object.assign(r5, e);
      }
    });
    var c5 = ({
      onClose: e
    }) => {
      const t = sl(cC);
      const n = sl(iS);
      rg(dT.value?.photoModePanel);
      0;
      const s = Y.useCallback(() => {
        rC(!t);
      }, [t]);
      0;
      const i = Y.useCallback(() => {
        rC(false);
      }, []);
      0;
      const a = Y.useCallback(() => {
        if (n) {
          lS();
        } else if (t) {
          i();
        } else {
          e();
        }
      }, [t, i, e, n]);
      0;
      const o = Y.useMemo(() => ({
        [t ? "Photo Mode" : "Cinematic Mode"]: s
      }), [t, s]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(kg, {
        onAction: a,
        children: z.jsx(Lg, {
          actions: o,
          children: z.jsxs(ep, {
            children: [z.jsx(T2, {
              isVisible: t,
              onClose: i
            }), z.jsx(aT, {
              uiTag: dT.value?.photoModePanel,
              children: z.jsx(ZT, {
                className: r5.photoModePanel,
                transitionSounds: lp,
                onClose: a,
                allowFocusExit: true,
                header: z.jsx(d5, {
                  toggleCinematicCameraPanel: s
                }),
                showCloseHint: !t,
                hintClassName: r5.floatingHint,
                children: z.jsx(u5, {})
              })
            })]
          })
        })
      });
    };
    var u5 = ({
      simulationWarning: e = true
    }) => {
      const t = sl(hC);
      const n = nM(Jj);
      const s = sl(uC);
      const i = sl(dC);
      0;
      const a = Y.useCallback(e => {
        const t = s.findIndex(e => e.id === i);
        if (t >= 0) {
          const n = (t + e) % s.length;
          oC(s[n < 0 ? n + s.length : n].id);
        } else {
          oC(s[s.length - 1].id);
        }
      }, [i, s]);
      0;
      const o = Y.useMemo(() => ({
        "Switch Tab": a
      }), [a]);
      0;
      Y.useEffect(() => (nC(true), () => {
        eC();
        nC(false);
      }), []);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: o,
        children: z.jsxs(ep, {
          children: [z.jsx(m5, {}), z.jsxs("div", {
            className: r5.photoModeContent,
            children: ["Environment" === i && e && (0, z.jsx)("div", {
              className: r5.simulationWarning,
              children: (0, z.jsx)(Pc.PhotoMode.ENVIRONMENT_DISCLAIMER, {})
            }), z.jsx(ab, {
              className: r5.scrollable,
              children: null != t && (0, z.jsx)(a5, {
                displayName: i,
                parent: n,
                data: t
              })
            }), z.jsx(h5, {})]
          })]
        })
      });
    };
    const d5 = ({
      toggleCinematicCameraPanel: e
    }) => {
      const t = sl(cC);
      const n = t ? "ExpandRight" : "ExpandLeft";
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: r5.header,
        children: [z.jsx(aT, {
          uiTag: dT.value?.photoModeCinematicCameraToggle,
          children: z.jsx(bg, {
            tooltip: z.jsx(Pc.CinematicCamera.TITLE, {}),
            children: z.jsxs(HI, {
              focusKey: Eg,
              theme: S1,
              onSelect: e,
              className: r5.cinematicCameraButton,
              children: [z.jsx(LT, {
                action: t ? "Photo Mode" : "Cinematic Mode",
                className: r5.hint
              }), z.jsx(W_, {
                src: `Media/PhotoMode/${n}.svg`,
                className: r5.expandIcon
              }), z.jsx(W_, {
                src: "Media/Game/Icons/CinematicCamera.svg",
                className: r5.cinematicCameraIcon
              })]
            })
          })
        }), z.jsx(aT, {
          uiTag: dT.value?.photoModePanelTitle,
          children: z.jsx(nE, {
            children: t ? (0, z.jsx)(Pc.CinematicCamera.TITLE, {}) : (0, z.jsx)(Pc.PhotoMode.TITLE, {})
          })
        })]
      });
    };
    const m5 = () => {
      const e = sl(dC);
      const t = sl(uC);
      0;
      const n = Y.useCallback(e => oC(e), []);
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: r5.header,
        children: z.jsx(bp, {
          children: z.jsx("div", {
            className: r5.tabBar,
            children: z.jsx("div", {
              className: r5.tabs,
              children: z.jsx(xW, {
                children: t.map((t, s) => (0, z.jsx)(g5, {
                  id: t.id,
                  icon: t.icon,
                  tooltip: (0, z.jsx)(Pc.PhotoMode.TAB, {
                    hash: t.id
                  }),
                  selected: t.id === e,
                  onSelect: n,
                  tutorialTag: 0 === s ? dT.value?.photoModeTab : undefined
                }, s))
              })
            })
          })
        })
      });
    };
    const h5 = () => {
      const e = sl(sC);
      const t = sl(aP);
      0;
      const n = Y.useCallback(() => {
        if (t) {
          Hq(Dq.freeCamera);
        } else {
          jv(Iv.freeCamera);
        }
      }, [t]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: r5.buttonPanel,
        children: z.jsxs(ep, {
          direction: Mg.Horizontal,
          children: [z.jsx(p5, {
            tutorialTag: dT.value?.photoModePanelTakePicture,
            tooltip: z.jsx(Pc.PhotoMode.TAKE_PHOTO, {}),
            icon: "Media/PhotoMode/TakePicture.svg",
            onSelect: aC,
            selectSound: op.takePhoto
          }), z.jsx(p5, {
            tutorialTag: dT.value?.photoModePanelHideUI,
            tooltip: z.jsx(Pc.PhotoMode.HIDE_UI, {}),
            icon: "Media/PhotoMode/HideUIOn.svg",
            onSelect: n
          }), z.jsx(p5, {
            tooltip: z.jsx(Pc.PhotoMode.TOGGLE_ORBIT_MODE, {}),
            icon: "Media/Game/Icons/Orbit.svg",
            selected: e,
            onSelect: iC
          })]
        })
      });
    };
    const g5 = ({
      id: e,
      icon: t,
      tooltip: n,
      selected: s,
      disabled: i,
      className: a,
      onSelect: o,
      tutorialTag: r
    }) => {
      0;
      const l = Y.useCallback(() => o(e), [e, o]);
      0;
      const c = Y.useMemo(() => "PhotoModeTab+" + e, [e]);
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: r,
        children: z.jsx(aT, {
          uiTag: c,
          children: z.jsx(bg, {
            tooltip: n,
            children: z.jsx($_, {
              src: t,
              disabled: i,
              selected: s,
              className: Qu()(a, r5.tabButton),
              onSelect: l
            })
          })
        })
      });
    };
    const p5 = ({
      icon: e,
      tooltip: t,
      selected: n,
      tutorialTag: s,
      selectSound: i,
      hint: a = "Select",
      onSelect: o
    }) => {
      0;
      const [r, l] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: s,
        children: z.jsx(bg, {
          tooltip: t,
          children: z.jsx(Lh, {
            onFocusChange: l,
            children: z.jsx($_, {
              disableHint: true,
              tinted: true,
              theme: S1,
              src: e,
              selected: n,
              onSelect: o,
              selectSound: i,
              className: r5.footerButton,
              children: z.jsx(LT, {
                action: a,
                active: r,
                className: r5.footerButtonHint
              })
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/photo-mode/photo-mode-panel.tsx", {
      get PhotoModePanel() {
        return c5;
      },
      set PhotoModePanel(e) {
        c5 = e;
      },
      get PhotoModePanelContent() {
        return u5;
      },
      set PhotoModePanelContent(e) {
        u5 = e;
      }
    });
    let f5 = {
      "resize-container": "resize-container_AAw",
      resizeContainer: "resize-container_AAw",
      "drag-handle": "drag-handle_enz",
      dragHandle: "drag-handle_enz",
      left: "left_jHP",
      right: "right_fxN",
      "resize-cursor": "resize-cursor_YOy",
      resizeCursor: "resize-cursor_YOy"
    };
    X.add("game-ui/editor/components/resize-container/resize-container.module.scss", {
      get classes() {
        return f5;
      },
      set classes(e) {
        Object.assign(f5, e);
      }
    });
    var v5 = ({
      width: e,
      minWidth: t,
      maxWidth: n,
      direction: s,
      className: i,
      children: a,
      onResize: o
    }) => {
      const r = "left" === s ? -1 : 1;
      0;
      const [l, c] = Y.useState(0);
      0;
      const u = Y.useCallback(e => c(e), []);
      0;
      const d = Y.useCallback(() => c(0), []);
      0;
      const m = Y.useCallback(s => {
        o(wd(e + r * s, t, n));
        c(0);
      }, [o, e, r, t, n]);
      0;
      return z.jsxs("div", {
        className: Qu()(f5.resizeContainer, i),
        style: {
          width: wd(e + r * l, t, n)
        },
        children: [a, "none" !== s && (0, z.jsx)(_5, {
          className: f5[s],
          onChange: u,
          onDragStart: d,
          onDragEnd: m
        })]
      });
    };
    const _5 = ({
      className: e,
      onChange: t,
      onDragStart: n,
      onDragEnd: s
    }) => {
      0;
      const i = Y.useRef(null);
      0;
      const a = Y.useCallback(({
        clientX: e
      }) => (document.activeElement instanceof HTMLElement && document.activeElement.blur(), i.current = e, n(), true), [n]);
      0;
      const o = Y.useCallback(({
        clientX: e
      }) => {
        if (null != i.current) {
          s(e - i.current);
          i.current = null;
        }
      }, [s]);
      0;
      const r = Y.useCallback(({
        clientX: e
      }) => {
        if (null != i.current) {
          t(e - i.current);
        }
      }, [t]);
      const [l, c] = eb(a, r, o);
      Yp(l ? f5.resizeCursor : undefined);
      0;
      return z.jsx("div", {
        className: Qu()(f5.dragHandle, l && "dragging", e),
        onMouseDown: c
      });
    };
    X.add("game-ui/editor/components/resize-container/resize-container.tsx", {
      get ResizeContainer() {
        return v5;
      },
      set ResizeContainer(e) {
        v5 = e;
      }
    });
    let b5 = {
      minWidth: "250rem",
      maxWidth: "800rem",
      container: "container_bUn",
      panel: "panel_R8J",
      content: "content_Mxn"
    };
    X.add("game-ui/editor/components/editor-panel/editor-panel.module.scss", {
      get classes() {
        return b5;
      },
      set classes(e) {
        Object.assign(b5, e);
      }
    });
    var E5 = Y.forwardRef(function ({
      active: e,
      resizeDirection: t,
      className: n,
      displayFooter: s,
      focusKey: i
    }, a) {
      0;
      const [o, r] = Y.useState(true);
      const l = Gm(b5.minWidth);
      const c = Gm(b5.maxWidth);
      const u = sl(fD);
      const d = Vm();
      0;
      const m = Y.useCallback(e => {
        _D(Math.round(e / d));
      }, [d]);
      const h = sl(pD);
      const g = sl(vD);
      const p = sl(P0);
      0;
      const f = Y.useCallback(e => {}, []);
      const x = s ? (0, z.jsx)("div", {
        ref: a
      }) : undefined;
      0;
      0;
      return z.jsx(v5, {
        width: u * d,
        minWidth: l,
        maxWidth: c,
        direction: o ? t : "none",
        className: n,
        onResize: m,
        children: z.jsxs("div", {
          className: b5.container,
          children: [!p && (0, z.jsx)(_1, {
            focusKey: Eg,
            expanded: true,
            onToggle: f,
            onClose: mg,
            theme: h1,
            localization: Pc.EditorTutorials
          }), e && (0, z.jsx)(d1, {
            expanded: o,
            headerText: null != h && (0, z.jsx)(hu, {
              value: h
            }),
            footer: x,
            theme: h1,
            className: b5.panel,
            contentClassName: b5.content,
            onToggleExpanded: r,
            onClose: TD,
            focusKey: i,
            children: (0, z.jsx)(kg, {
              onAction: bD,
              children: (0, z.jsx)(ep, {
                children: g === mD.Editor ? (0, z.jsx)(I5, {}) : (0, z.jsx)(y5, {})
              })
            })
          })]
        })
      });
    });
    const I5 = () => {
      const e = sl(xD);
      const t = nM(hD);
      0;
      return z.jsx(j$, {
        parent: t,
        data: e
      });
    };
    const y5 = () => (0, z.jsx)(u5, {
      simulationWarning: false
    });
    function S5(e) {
      0;
      const [t, n] = Y.useState(Av.value?.__Type === e);
      0;
      Y.useEffect(() => {
        const t = Av.subscribe(t => {
          n(Bu(t, e));
        });
        return () => {
          t.dispose();
        };
      }, [e]);
      0;
      const s = Y.useCallback(() => kv(e), [e]);
      0;
      return Y.useMemo(() => ({
        visible: t,
        toggle: s
      }), [t, s]);
    }
    function j5(e, t) {
      const n = Bu(t, e);
      0;
      const s = Y.useCallback(() => kv(e), [e]);
      0;
      return Y.useMemo(() => ({
        visible: n,
        toggle: s
      }), [n, s]);
    }
    X.add("game-ui/editor/components/editor-panel/editor-panel.tsx", {
      get EditorPanel() {
        return E5;
      },
      set EditorPanel(e) {
        E5 = e;
      }
    });
    X.add("game-ui/common/hooks/use-game-panel-state.tsx", {
      get useGamePanelState() {
        return S5;
      },
      set useGamePanelState(e) {
        S5 = e;
      },
      get useGamePanelStateControlled() {
        return j5;
      },
      set useGamePanelStateControlled(e) {
        j5 = e;
      }
    });
    let C5 = {
      "infomode-item": "infomode-item_K8b item-focused_FuT item-mouse-states_Fmi",
      infomodeItem: "infomode-item_K8b item-focused_FuT item-mouse-states_Fmi",
      checkbox: "checkbox_JWP",
      header: "header_dAd",
      title: "title_tX0",
      "title-text": "title-text_uCA",
      titleText: "title-text_uCA",
      color: "color_Q5Z",
      legend: "legend_K3N",
      "color-legend": "color-legend_PQU legend_K3N",
      colorLegend: "color-legend_PQU legend_K3N",
      "color-legend-item": "color-legend-item__ty",
      colorLegendItem: "color-legend-item__ty",
      label: "label_oSR",
      gradient: "gradient_HaQ",
      type: "type_puL",
      "active-opacity": "active-opacity_cfv",
      activeOpacity: "active-opacity_cfv",
      active: "active_m64",
      hint: "hint_R8p",
      "hint-icon": "hint-icon_Smd",
      hintIcon: "hint-icon_Smd"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/infomode-item/infomode-item.module.scss", {
      get classes() {
        return C5;
      },
      set classes(e) {
        Object.assign(C5, e);
      }
    });
    const w5 = {
      icon: C5.hintIcon,
      hint: C5.hint
    };
    var O5 = ({
      focusKey: e,
      infomode: t
    }) => {
      0;
      const [n, s] = Y.useState(false);
      const {
        id: i,
        active: a
      } = t;
      0;
      const o = Y.useCallback(() => {
        nf(t.entity, !t.active, t.priority);
      }, [t.entity, t.active, t.priority]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        direction: "right",
        tooltip: z.jsx(bb, {
          children: z.jsx(Pc.Infoviews.INFOMODE_TOOLTIP, {
            hash: i
          })
        }),
        children: z.jsx(Lh, {
          onFocusChange: s,
          children: z.jsxs(L_, {
            disableHint: true,
            focusKey: e,
            onSelect: o,
            theme: S1,
            selectSound: op.toggleInfoMode,
            selectAction: a ? "Disable Info Mode" : "Enable Info Mode",
            className: Qu()(C5.infomodeItem, a && C5.active),
            children: [z.jsxs("div", {
              className: C5.header,
              children: [z.jsxs("div", {
                className: Qu()(C5.title, C5.activeOpacity),
                children: [t.color && (0, z.jsx)(UR, {
                  color: tN(t.color),
                  className: C5.color
                }), z.jsx("div", {
                  className: C5.titleText,
                  children: z.jsx(Pc.Infoviews.INFOMODE, {
                    hash: i
                  })
                })]
              }), z.jsxs("div", {
                className: C5.type,
                children: [z.jsx("div", {
                  className: Qu()(C5.activeOpacity),
                  children: z.jsx(Pc.Infoviews.INFOMODE_TYPE, {
                    hash: t.type
                  })
                }), z.jsx(LT, {
                  action: a ? "Disable Info Mode" : "Enable Info Mode",
                  active: n,
                  theme: w5
                }), z.jsx(kb, {
                  checked: a,
                  focusKey: Eg,
                  className: Qu()(C5.checkbox, C5.activeOpacity)
                })]
              })]
            }), t.gradientLegend && (0, z.jsx)(P5, {
              ...t.gradientLegend
            }), t.colorLegends.length > 0 && (0, z.jsx)("div", {
              className: C5.colorLegend,
              children: t.colorLegends.map((e, t) => (0, z.jsx)(FR, {
                color: tN(e.color),
                label: (0, z.jsx)(hu, {
                  value: e.label
                }),
                className: C5.colorLegendItem
              }, t))
            })]
          })
        })
      });
    };
    const P5 = ({
      lowLabel: e,
      highLabel: t,
      gradient: n
    }) => (0, z.jsxs)("div", {
      className: Qu()(C5.legend, C5.activeOpacity),
      children: [e && (0, z.jsx)("div", {
        className: C5.label,
        children: (0, z.jsx)(hu, {
          value: e
        })
      }), (0, z.jsx)("div", {
        className: C5.gradient,
        style: {
          backgroundImage: uN(n)
        }
      }), t && (0, z.jsx)("div", {
        className: C5.label,
        children: (0, z.jsx)(hu, {
          value: t
        })
      })]
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/infomode-item/infomode-item.tsx", {
      get InfomodeItem() {
        return O5;
      },
      set InfomodeItem(e) {
        O5 = e;
      }
    });
    let L5 = {
      "small-space": "small-space_DCq",
      smallSpace: "small-space_DCq",
      space: "space_uKL"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/infoview-panel-space.module.scss", {
      get classes() {
        return L5;
      },
      set classes(e) {
        Object.assign(L5, e);
      }
    });
    var M5 = ({
      small: e = false
    }) => (0, z.jsx)("div", {
      className: e ? L5.smallSpace : L5.space
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/infoview-panel-space.tsx", {
      get InfoviewPanelSpace() {
        return M5;
      },
      set InfoviewPanelSpace(e) {
        M5 = e;
      }
    });
    let R5 = {
      labels: "labels_L7Q",
      row: "row_S2v",
      "left-icon": "left-icon_fKY",
      leftIcon: "left-icon_fKY",
      left: "left_Lgw",
      uppercase: "uppercase_RJI",
      right: "right_k3O",
      centered: "centered_j4I",
      small: "small_ExK",
      label: "label_NuH",
      tiny: "tiny_m9B",
      "icon-label": "icon-label_J_h",
      iconLabel: "icon-label_J_h",
      icon: "icon_W7O"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/labels/labels.module.scss", {
      get classes() {
        return R5;
      },
      set classes(e) {
        Object.assign(R5, e);
      }
    });
    var D5 = ({
      icon: e,
      text: t,
      rightText: n,
      uppercase: s = false,
      centered: i = false,
      small: a = false,
      tiny: o = false
    }) => (0, z.jsxs)("div", {
      className: Qu()(R5.labels, R5.row, s && R5.uppercase, i && R5.centered, a && R5.small, o && R5.tiny),
      children: [e && (0, z.jsx)("img", {
        src: e,
        className: R5.leftIcon
      }), t && (0, z.jsx)("div", {
        className: Qu()(R5.left, R5.row),
        children: t
      }), n && (0, z.jsx)("div", {
        className: Qu()(R5.right, R5.row),
        children: n
      })]
    });
    var F5 = ({
      icon: e,
      label: t
    }) => (0, z.jsxs)("div", {
      className: R5.iconLabel,
      children: [(0, z.jsx)(W_, {
        src: e,
        className: R5.icon
      }), (0, z.jsx)("div", {
        className: R5.label,
        children: t
      })]
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/labels/labels.tsx", {
      get InfoviewPanelLabel() {
        return D5;
      },
      set InfoviewPanelLabel(e) {
        D5 = e;
      },
      get InfoviewPanelIconLabel() {
        return F5;
      },
      set InfoviewPanelIconLabel(e) {
        F5 = e;
      }
    });
    var U5 = {
      stops: [{
        color: "#0331fc",
        offset: 0
      }, {
        color: "#0331fc",
        offset: .333
      }, {
        color: "#fcba03",
        offset: .333
      }, {
        color: "#fcba03",
        offset: .666
      }, {
        color: "#a15800",
        offset: .666
      }, {
        color: "#a15800",
        offset: 1
      }]
    };
    var B5 = {
      stops: [{
        color: "#479436",
        offset: 0
      }, {
        color: "#63B506",
        offset: .66
      }, {
        color: "#FF831B",
        offset: .33
      }, {
        color: "#FF4E18",
        offset: 1
      }]
    };
    var G5 = {
      stops: [{
        color: "#FF4E18",
        offset: 0
      }, {
        color: "#FF831B",
        offset: .33
      }, {
        color: "#63B506",
        offset: .66
      }, {
        color: "#479436",
        offset: 1
      }]
    };
    var V5 = {
      stops: [{
        color: "#FF4E18",
        offset: 0
      }, {
        color: "#FF4E18",
        offset: .9
      }, {
        color: "#479436",
        offset: 1
      }]
    };
    var H5 = {
      stops: [{
        color: "#e8f6e5",
        offset: 0
      }, {
        color: "#479436",
        offset: 1
      }]
    };
    var K5 = {
      stops: [{
        color: "#FF4E18",
        offset: 0
      }, {
        color: "#FF4E18",
        offset: .4
      }, {
        color: "#FF831B",
        offset: .4
      }, {
        color: "#FF831B",
        offset: .5
      }, {
        color: "#63B506",
        offset: .5
      }, {
        color: "#63B506",
        offset: .6
      }, {
        color: "#479436",
        offset: .6
      }, {
        color: "#479436",
        offset: 1
      }]
    };
    var W5 = {
      stops: [{
        color: "#FF4E18",
        offset: 0
      }, {
        color: "#FF4E18",
        offset: .8
      }, {
        color: "#FF831B",
        offset: .8
      }, {
        color: "#FF831B",
        offset: .9
      }, {
        color: "#63B506",
        offset: .9
      }, {
        color: "#63B506",
        offset: 1
      }]
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/infoview-panels-util.tsx", {
      get pollutionGradient() {
        return U5;
      },
      set pollutionGradient(e) {
        U5 = e;
      },
      get malusGradient() {
        return B5;
      },
      set malusGradient(e) {
        B5 = e;
      },
      get bonusGradient() {
        return G5;
      },
      set bonusGradient(e) {
        G5 = e;
      },
      get transmissionGradient() {
        return V5;
      },
      set transmissionGradient(e) {
        V5 = e;
      },
      get greenGradient() {
        return H5;
      },
      set greenGradient(e) {
        H5 = e;
      },
      get availabilityGradient() {
        return K5;
      },
      set availabilityGradient(e) {
        K5 = e;
      },
      get exportGradient() {
        return W5;
      },
      set exportGradient(e) {
        W5 = e;
      }
    });
    let z5 = {
      bar: "bar_nW3",
      gradient: "gradient_P8C",
      overlay: "overlay_UV7",
      diagonalMask: "diagonalMask_osp",
      pointer: "pointer_SV2",
      pointerIcon: "pointerIcon_i8i"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/bars/bars.module.scss", {
      get classes() {
        return z5;
      },
      set classes(e) {
        Object.assign(z5, e);
      }
    });
    var $5 = ({
      value: e,
      gradient: t = K5
    }) => (0, z.jsxs)("div", {
      className: z5.bar,
      children: [(0, z.jsx)("div", {
        className: Qu()(z5.gradient),
        style: {
          backgroundImage: uN(t)
        }
      }), (0, z.jsx)("div", {
        className: z5.pointer,
        style: X5(e),
        children: (0, z.jsx)("img", {
          src: "Media/Misc/IndicatorBarPointer.svg",
          className: z5.pointerIcon
        })
      })]
    });
    var q5 = ({
      gradient: e,
      value: t
    }) => {
      0;
      const n = Y.useMemo(() => {
        const e = t.max - t.min;
        return {
          left: `${(t.current - t.min) / e * 100 || 0}%`
        };
      }, [t]);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: z5.bar,
        children: [z.jsx("div", {
          className: z5.gradient,
          style: {
            backgroundImage: uN(e)
          }
        }), z.jsx("div", {
          className: z5.pointer,
          style: n,
          children: z.jsx("img", {
            src: "Media/Misc/IndicatorBarPointer.svg",
            className: z5.pointerIcon
          })
        })]
      });
    };
    function X5(e) {
      0;
      return Y.useMemo(() => {
        const t = e.max - e.min;
        return {
          left: `${(e.current - e.min) / t * 100 || 0}%`
        };
      }, [e]);
    }
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/bars/bars.tsx", {
      get AvailabilityBar() {
        return $5;
      },
      set AvailabilityBar(e) {
        $5 = e;
      },
      get ValueBar() {
        return q5;
      },
      set ValueBar(e) {
        q5 = e;
      }
    });
    let Q5 = {
      "infoview-panel-section": "infoview-panel-section_RXJ",
      infoviewPanelSection: "infoview-panel-section_RXJ",
      content: "content_1xS",
      "focusable-border": "focusable-border_rVm",
      focusableBorder: "focusable-border_rVm",
      focusable: "focusable_GEc item-focused_FuT"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/sections/infoview-panel-section.module.scss", {
      get classes() {
        return Q5;
      },
      set classes(e) {
        Object.assign(Q5, e);
      }
    });
    var J5 = ({
      disableFocus: e = false,
      tooltip: t,
      focusableBorder: n,
      children: s
    }) => {
      const i = Y.Children.count(t) > 0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: i ? (0, z.jsx)(bb, {
          children: t
        }) : undefined,
        direction: "right",
        children: z.jsx("div", {
          className: Q5.infoviewPanelSection,
          children: e ? (0, z.jsx)("div", {
            className: Q5.content,
            children: s
          }) : (0, z.jsx)(Ep, {
            className: Qu()(Q5.content, n ? Q5.focusableBorder : Q5.focusable),
            children: s
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/sections/infoview-panel-section.tsx", {
      get InfoviewPanelSection() {
        return J5;
      },
      set InfoviewPanelSection(e) {
        J5 = e;
      }
    });
    var e3 = ({
      title: e,
      value: t,
      gradient: n,
      tooltip: s,
      children: i
    }) => (0, z.jsxs)(J5, {
      tooltip: s,
      children: [e, (0, z.jsx)(q5, {
        gradient: n,
        value: t
      }), i]
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/sections/value-bar-section.tsx", {
      get ValueBarSection() {
        return e3;
      },
      set ValueBarSection(e) {
        e3 = e;
      }
    });
    var t3 = () => {
      const e = sl(ux);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.AirPollutionInfoPanel.AVERAGE_AIR_POLLUTION, {}),
          rightText: z.jsx(Yu, {
            value: e.current,
            max: e.max
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.AVERAGE_AIR_POLLUTION_TOOLTIP, {}),
        value: e,
        gradient: U5
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/air-pollution-infoview-panel.tsx", {
      get AirPollutionInfoviewPanel() {
        return t3;
      },
      set AirPollutionInfoviewPanel(e) {
        t3 = e;
      }
    });
    var n3 = () => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsx)(s3, {}), (0, z.jsx)(i3, {}), (0, z.jsx)(a3, {})]
    });
    const s3 = () => {
      const e = sl(Zx);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.CompanyInfoPanel.COMMERCIAL_PROFITABILITY, {}),
          rightText: z.jsx(Yu, {
            value: e.current,
            max: e.max
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.AVERAGE_COMMERCIAL_PROFIT_TOOLTIP, {}),
        value: e,
        gradient: G5
      });
    };
    const i3 = () => {
      const e = sl(Jx);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.CompanyInfoPanel.INDUSTRIAL_PROFITABILITY, {}),
          rightText: z.jsx(Yu, {
            value: e.current,
            max: e.max
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.AVERAGE_INDUSTRIAL_PROFIT_TOOLTIP, {}),
        value: e,
        gradient: G5
      });
    };
    const a3 = () => {
      const e = sl(ev);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.CompanyInfoPanel.OFFICE_PROFITABILITY, {}),
          rightText: z.jsx(Yu, {
            value: e.current,
            max: e.max
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.AVERAGE_OFFICE_PROFIT_TOOLTIP, {}),
        value: e,
        gradient: G5
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/company-infoview-panel.tsx", {
      get CompanyInfoviewPanel() {
        return n3;
      },
      set CompanyInfoviewPanel(e) {
        n3 = e;
      }
    });
    var o3 = () => {
      const e = sl(Rx);
      const t = sl(Ax);
      const n = sl(Mx);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.DisasterInfoPanel.SHELTER_AVAILABILITY, {}),
          rightText: z.jsx(Yu, {
            value: e.current,
            max: e.max
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.SHELTER_AVAILABILITY_TOOLTIP, {}),
        value: e,
        gradient: G5,
        children: [z.jsx(M5, {
          small: true
        }), z.jsx(D5, {
          small: true,
          text: z.jsx(Pc.DisasterInfoPanel.EVACUATED, {}),
          rightText: t
        }), z.jsx(D5, {
          small: true,
          text: z.jsx(Pc.DisasterInfoPanel.CAPACITY, {}),
          rightText: n
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/disaster-infoview-panel.tsx", {
      get DisasterInfoviewPanel() {
        return o3;
      },
      set DisasterInfoviewPanel(e) {
        o3 = e;
      }
    });
    let r3 = {
      "bar-chart": "bar-chart_tZ6",
      barChart: "bar-chart_tZ6",
      bar: "bar_z48",
      fill: "fill_sr0",
      empty: "empty_HP3"
    };
    X.add("game-ui/common/charts/bar-chart/bar-chart.module.scss", {
      get classes() {
        return r3;
      },
      set classes(e) {
        Object.assign(r3, e);
      }
    });
    var c3 = ({
      colors: e,
      data: t,
      className: n
    }) => (0, z.jsx)("div", {
      className: Qu()(r3.barChart, n),
      children: (0, z.jsxs)("div", {
        className: r3.bar,
        children: [0 === t.values.filter(e => e > 0).length && (0, z.jsx)("div", {
          className: r3.empty
        }), t.values.map((n, s) => (0, z.jsx)("div", {
          style: {
            backgroundColor: e[s],
            width: (t.total > 0 ? 100 * wd(n / t.total, 0, 1) : 0) + "%"
          },
          className: r3.fill
        }, s))]
      })
    });
    function u3(e, t) {
      return t > 0 ? 100 * wd(e / t, 0, 1) : 0;
    }
    X.add("game-ui/common/charts/bar-chart/bar-chart.tsx", {
      get BarChart() {
        return c3;
      },
      set BarChart(e) {
        c3 = e;
      }
    });
    let d3 = {
      "info-bar-chart": "info-bar-chart_fj2",
      infoBarChart: "info-bar-chart_fj2",
      content: "content_I1q",
      bar: "bar_yR2",
      legends: "legends_jy_",
      legend: "legend_efO",
      empty: "empty_LPh"
    };
    X.add("game-ui/common/charts/bar-chart/info-bar-chart.module.scss", {
      get classes() {
        return d3;
      },
      set classes(e) {
        Object.assign(d3, e);
      }
    });
    var h3 = ({
      title: e,
      colors: t,
      labels: n,
      data: s,
      ignoreZero: i = false,
      usePercentageValue: a = false,
      customLegend: o,
      className: r
    }) => {
      const l = a && s.total > 0 ? 100 / s.total : 1;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(d3.infoBarChart, r),
        children: [e && (0, z.jsx)(wy, {
          uppercase: true,
          left: e
        }), z.jsxs("div", {
          className: d3.content,
          children: [z.jsx("div", {
            className: d3.bar,
            children: z.jsx(c3, {
              data: s,
              colors: t
            })
          }), z.jsx("div", {
            className: d3.legends,
            children: o || s.values.filter(e => !i || e > 0).map((e, s) => (0, z.jsxs)("div", {
              className: d3.legend,
              children: [(0, z.jsx)(FR, {
                color: t[s],
                label: n[s]
              }), (0, z.jsx)(Gc, {
                value: e * l,
                unit: a ? Oc.PercentageSingleFraction : Oc.Integer
              })]
            }, s))
          })]
        })]
      });
    };
    X.add("game-ui/common/charts/bar-chart/info-bar-chart.tsx", {
      get InfoBarChart() {
        return h3;
      },
      set InfoBarChart(e) {
        h3 = e;
      }
    });
    var g3 = ["#808080", "#b09868", "#368a2e", "#b981c0", "#5796d1"];
    0;
    0;
    0;
    0;
    0;
    var p3 = [z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Uneducated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Poorly Educated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Educated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Well Educated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Highly Educated"
    })];
    X.add("game-ui/common/charts/pie-chart/education-pie-chart.tsx", {
      get educationPieChartColors() {
        return g3;
      },
      set educationPieChartColors(e) {
        g3 = e;
      },
      get educationPieChartLabels() {
        return p3;
      },
      set educationPieChartLabels(e) {
        p3 = e;
      }
    });
    var f3 = ({
      title: e,
      supplyLabel: t,
      demandLabel: n,
      supplyValue: s,
      demandValue: i,
      availability: a,
      gradient: o,
      tooltip: r,
      children: l
    }) => (0, z.jsxs)(J5, {
      tooltip: r,
      children: [e, (0, z.jsx)($5, {
        value: a,
        gradient: o
      }), (0, z.jsx)(D5, {
        tiny: true,
        text: (0, z.jsx)(Pc.Infoviews.LABEL_VALUE_FORMAT, {
          LABEL: n,
          VALUE: i
        }),
        rightText: (0, z.jsx)(Pc.Infoviews.LABEL_VALUE_FORMAT, {
          LABEL: t,
          VALUE: s
        })
      }), (0, z.jsx)(M5, {
        small: true
      }), l]
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/components/sections/availability-bar-section.tsx", {
      get AvailabilityBarSection() {
        return f3;
      },
      set AvailabilityBarSection(e) {
        f3 = e;
      }
    });
    var x3 = () => {
      const e = sl(Lf);
      const t = sl(Af);
      const n = sl(Mf);
      const s = sl(Rf);
      const i = sl(If);
      const a = sl(yf);
      const o = sl(Sf);
      const r = sl(jf);
      const l = sl(Cf);
      const c = sl(Nf);
      const u = sl(wf);
      const d = sl(Of);
      const m = sl(kf);
      const h = sl(Df);
      const g = sl(Ff);
      const p = sl(Uf);
      const f = sl(Pf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(v3, {
          localeKey: "Elementary",
          availability: m,
          eligible: i,
          capacity: l,
          students: e,
          tooltip: z.jsx(Pc.Infoviews.ELEMENTARY_SCHOOL_AVAILABILITY_TOOLTIP, {})
        }), z.jsx(v3, {
          localeKey: "High School",
          availability: h,
          eligible: a,
          capacity: c,
          students: t,
          tooltip: z.jsx(Pc.Infoviews.HIGH_SCHOOL_AVAILABILITY_TOOLTIP, {})
        }), z.jsx(v3, {
          localeKey: "College",
          availability: g,
          eligible: o,
          capacity: u,
          students: n,
          tooltip: z.jsx(Pc.Infoviews.COLLEGE_AVAILABILITY_TOOLTIP, {})
        }), z.jsx(v3, {
          localeKey: "University",
          availability: p,
          eligible: r,
          capacity: d,
          students: s,
          tooltip: z.jsx(Pc.Infoviews.UNIVERSITY_AVAILABILITY_TOOLTIP, {})
        }), z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.EDUCATION_DISTRIBUTION_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.EducationInfoPanel.EDUCATION_DISTRIBUTION, {})
          }), z.jsx(h3, {
            usePercentageValue: true,
            colors: g3,
            labels: p3,
            data: f
          })]
        })]
      });
    };
    const v3 = ({
      localeKey: e,
      availability: t,
      eligible: n,
      capacity: s,
      students: i,
      tooltip: a
    }) => (0, z.jsx)(z.Fragment, {
      children: (0, z.jsx)(f3, {
        title: (0, z.jsx)(D5, {
          uppercase: true,
          text: (0, z.jsx)(Pc.EducationInfoPanel.EDUCATION_LEVEL, {
            hash: e
          }),
          rightText: (0, z.jsx)(F5, {
            icon: "Media/Game/Icons/Citizen.svg",
            label: (0, z.jsx)(Gc, {
              value: i,
              unit: Oc.Integer
            })
          })
        }),
        demandLabel: (0, z.jsx)(Pc.EducationInfoPanel.ELIGIBLE, {}),
        demandValue: (0, z.jsx)(Gc, {
          value: n,
          unit: Oc.Integer
        }),
        supplyLabel: (0, z.jsx)(Pc.InfoPanels.CAPACITY, {}),
        supplyValue: (0, z.jsx)(Gc, {
          value: s,
          unit: Oc.Integer
        }),
        availability: t,
        tooltip: a
      })
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/education-infoview-panel.tsx", {
      get EducationInfoviewPanel() {
        return x3;
      },
      set EducationInfoviewPanel(e) {
        x3 = e;
      }
    });
    var _3 = () => {
      const e = sl(sf);
      const t = sl(af);
      const n = sl(rf);
      const s = sl(lf);
      const i = sl(cf);
      const a = sl(df);
      const o = sl(mf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(f3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.ElectricityInfoPanel.ELECTRICITY_AVAILABILITY, {})
          }),
          tooltip: z.jsx(Pc.Infoviews.ELECTRICITY_AVAILABILITY_TOOLTIP, {}),
          availability: i,
          supplyLabel: z.jsx(Pc.InfoPanels.PRODUCTION, {}),
          supplyValue: z.jsx(Gc, {
            value: t,
            unit: Oc.Power
          }),
          demandLabel: z.jsx(Pc.InfoPanels.CONSUMPTION, {}),
          demandValue: z.jsx(Gc, {
            value: e,
            unit: Oc.Power
          })
        }), z.jsx(f3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.ElectricityInfoPanel.ELECTRICITY_TRADE, {})
          }),
          tooltip: z.jsx(Pc.Infoviews.ELECTRICITY_TRADE_TOOLTIP, {}),
          availability: a,
          supplyLabel: z.jsx(Pc.ElectricityInfoPanel.ELECTRICITY_EXPORT, {}),
          supplyValue: z.jsx(Gc, {
            value: n,
            unit: Oc.Power
          }),
          demandLabel: z.jsx(Pc.ElectricityInfoPanel.ELECTRICITY_IMPORT, {}),
          demandValue: z.jsx(Gc, {
            value: s,
            unit: Oc.Power
          })
        }), z.jsx(e3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.ElectricityInfoPanel.BATTERY_CHARGE, {}),
            rightText: z.jsx(cu, {
              value: o.current,
              total: o.max,
              unit: Oc.Energy
            })
          }),
          tooltip: z.jsx(Pc.Infoviews.BATTERY_CHARGE_TOOLTIP, {}),
          value: o,
          gradient: H5
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/electricity-infoview-panel.tsx", {
      get ElectricityInfoviewPanel() {
        return _3;
      },
      set ElectricityInfoviewPanel(e) {
        _3 = e;
      }
    });
    var b3 = () => {
      const e = sl(hx);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.infoviewsFireHazard,
        children: z.jsx(e3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.FireAndRescueInfoPanel.AVERAGE_FIRE_HAZARD, {}),
            rightText: z.jsx(Yu, {
              value: e.current,
              max: e.max
            })
          }),
          value: e,
          gradient: B5,
          tooltip: z.jsx(Pc.Infoviews.AVERAGE_FIRE_HAZARD_TOOLTIP, {})
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/fire-and-rescue-infoview-panel.tsx", {
      get FireAndRescueInfoPanel() {
        return b3;
      },
      set FireAndRescueInfoPanel(e) {
        b3 = e;
      }
    });
    var T3 = () => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsx)(E3, {}), (0, z.jsx)(I3, {})]
    });
    const E3 = () => {
      const e = sl(nx);
      const t = sl(Zf);
      const n = sl(ex);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(f3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.GarbageInfoPanel.PROCESSING_STATUS, {})
        }),
        demandLabel: z.jsx(Pc.GarbageInfoPanel.GARBAGE_RATE, {}),
        demandValue: z.jsx(Gc, {
          value: e,
          unit: Oc.WeightPerMonth
        }),
        supplyLabel: z.jsx(Pc.InfoPanels.PROCESSING, {}),
        supplyValue: z.jsx(Gc, {
          value: t,
          unit: Oc.WeightPerMonth
        }),
        availability: n,
        tooltip: z.jsx(Pc.Infoviews.GARBAGE_PROCESSING_STATUS_TOOLTIP, {})
      });
    };
    const I3 = () => {
      const e = sl(Jf);
      const t = sl(sx);
      const n = sl(tx);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.GarbageInfoPanel.LANDFILL_AVAILABILITY, {}),
          rightText: z.jsx(Gc, {
            value: 100 * n.current,
            unit: Oc.Percentage
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.LANDFILL_AVAILABILITY_TOOLTIP, {}),
        value: n,
        gradient: G5,
        children: z.jsx(D5, {
          tiny: true,
          text: z.jsx(Pc.Infoviews.LABEL_VALUE_FORMAT, {
            LABEL: z.jsx(Pc.GarbageInfoPanel.STORED_GARBAGE, {}),
            VALUE: z.jsx(Gc, {
              value: t,
              unit: Oc.Weight
            })
          }),
          rightText: z.jsx(Pc.Infoviews.LABEL_VALUE_FORMAT, {
            LABEL: z.jsx(Pc.InfoPanels.CAPACITY, {}),
            VALUE: z.jsx(Gc, {
              value: e,
              unit: Oc.Weight
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/garbage-infoview-panel.tsx", {
      get GarbageInfoviewPanel() {
        return T3;
      },
      set GarbageInfoviewPanel(e) {
        T3 = e;
      }
    });
    var y3 = () => {
      const e = sl(cx);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(e3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.GroundPollutionInfoPanel.AVERAGE_GROUND_POLLUTION, {}),
            rightText: z.jsx(Yu, {
              value: e.current,
              max: e.max
            })
          }),
          tooltip: z.jsx(Pc.Infoviews.AVERAGE_GROUND_POLLUTION_TOOLTIP, {}),
          value: e,
          gradient: U5
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/ground-pollution-infoview-panel.tsx", {
      get GroundPollutionInfoviewPanel() {
        return y3;
      },
      set GroundPollutionInfoviewPanel(e) {
        y3 = e;
      }
    });
    let S3 = {
      positive: "positive_zrK",
      negative: "negative_YWY"
    };
    X.add("game-ui/game/themes/sign-style-theme.module.scss", {
      get classes() {
        return S3;
      },
      set classes(e) {
        Object.assign(S3, e);
      }
    });
    var C3 = () => {
      const e = sl(WS);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(J5, {
        tooltip: z.jsx(Pc.Infoviews.HAPPINESS_FACTORS_TOOLTIP, {}),
        children: [z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.Common.HAPPINESS_FACTORS, {})
        }), z.jsx(M5, {}), e.map((e, t) => (0, z.jsx)(D5, {
          small: true,
          text: e.weight > 0 ? (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_POSITIVE, {
            hash: e.factor
          }) : (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_NEGATIVE, {
            hash: e.factor
          }),
          rightText: (0, z.jsx)("div", {
            className: zp(S3, e.weight),
            children: (0, z.jsx)(Gc, {
              value: e.weight,
              signed: true
            })
          })
        }, t))]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/happiness-infoview-panel.tsx", {
      get HappinessInfoviewPanel() {
        return C3;
      },
      set HappinessInfoviewPanel(e) {
        C3 = e;
      }
    });
    var N3 = () => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsx)(w3, {}), (0, z.jsx)(O3, {}), (0, z.jsx)(P3, {})]
    });
    const w3 = () => {
      const e = sl(Yf);
      const t = sl($f);
      const n = sl(qf);
      const s = sl(Gf);
      const i = sl(zf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(f3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.HealthcareInfoPanel.HEALTHCARE_AVAILABILITY, {})
        }),
        tooltip: z.jsx(Pc.Infoviews.HEALTHCARE_AVAILABILITY_TOOLTIP, {}),
        demandLabel: z.jsx(Pc.HealthcareInfoPanel.SICK_OR_INJURED, {}),
        demandValue: z.jsx(Gc, {
          value: i,
          unit: Oc.Integer
        }),
        supplyLabel: z.jsx(Pc.InfoPanels.CAPACITY, {}),
        supplyValue: z.jsx(Gc, {
          value: t,
          unit: Oc.Integer
        }),
        availability: n,
        children: [z.jsx(D5, {
          small: true,
          text: z.jsx(Pc.HealthcareInfoPanel.AVERAGE_HEALTH, {}),
          rightText: z.jsx(Gc, {
            value: s,
            unit: Oc.Percentage
          })
        }), z.jsx(D5, {
          small: true,
          text: z.jsx(Pc.HealthcareInfoPanel.PATIENTS, {}),
          rightText: z.jsx(Gc, {
            value: e,
            unit: Oc.Integer
          })
        })]
      });
    };
    const O3 = () => {
      const e = sl(Kf);
      const t = sl(Wf);
      const n = sl(Xf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(f3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.HealthcareInfoPanel.CREMATORIUM_AVAILABILITY, {})
        }),
        tooltip: z.jsx(Pc.Infoviews.CREMATORIUM_AVAILABILITY_TOOLTIP, {}),
        demandLabel: z.jsx(Pc.HealthcareInfoPanel.DEATH_RATE, {}),
        demandValue: z.jsx(Gc, {
          value: e,
          unit: Oc.IntegerPerMonth
        }),
        supplyLabel: z.jsx(Pc.HealthcareInfoPanel.PROCESSING_RATE, {}),
        supplyValue: z.jsx(Gc, {
          value: t,
          unit: Oc.IntegerPerMonth
        }),
        availability: n
      });
    };
    const P3 = () => {
      const e = sl(Vf);
      const t = sl(Hf);
      const n = sl(Qf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.HealthcareInfoPanel.CEMETERY_AVAILABILITY, {}),
          rightText: z.jsx(Yu, {
            value: t - e,
            max: t
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.CEMETERY_AVAILABILITY_TOOLTIP, {}),
        value: n,
        gradient: G5,
        children: z.jsx(D5, {
          tiny: true,
          text: z.jsx(Pc.Infoviews.LABEL_VALUE_FORMAT, {
            LABEL: z.jsx(Pc.HealthcareInfoPanel.OCCUPIED, {}),
            VALUE: z.jsx(Gc, {
              value: e,
              unit: Oc.Integer
            })
          }),
          rightText: z.jsx(Pc.Infoviews.LABEL_VALUE_FORMAT, {
            LABEL: z.jsx(Pc.InfoPanels.CAPACITY, {}),
            VALUE: z.jsx(Gc, {
              value: t,
              unit: Oc.Integer
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/healthcare-infoview-panel.tsx", {
      get HealthcareInfoviewPanel() {
        return N3;
      },
      set HealthcareInfoviewPanel(e) {
        N3 = e;
      }
    });
    var L3 = () => {
      const e = sl(Nx);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(J5, {
        tooltip: z.jsx(Pc.Infoviews.AVERAGE_LAND_VALUE_TOOLTIP, {}),
        children: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.LandValueInfoPanel.AVERAGE_LAND_VALUE, {}),
          rightText: z.jsx(Gc, {
            value: 240 * e,
            unit: Oc.MoneyPerCell
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/landvalue-infoview-panel.tsx", {
      get LandValueInfoviewPanel() {
        return L3;
      },
      set LandValueInfoviewPanel(e) {
        L3 = e;
      }
    });
    let A3 = {
      "requirement-field": "requirement-field_e7h",
      requirementField: "requirement-field_e7h",
      "progress-bounds": "progress-bounds_MkW",
      progressBounds: "progress-bounds_MkW",
      progress: "progress_jYy",
      content: "content_OHh",
      icon: "icon_IKb",
      label: "label_DwS",
      checkmark: "checkmark_Nhp"
    };
    X.add("game-ui/game/components/progression/requirement-field/requirement-field.module.scss", {
      get classes() {
        return A3;
      },
      set classes(e) {
        Object.assign(A3, e);
      }
    });
    var R3 = e => {
      const t = sl(gN);
      0;
      0;
      0;
      0;
      return z.jsx(V3, {
        icon: "Media/Game/Icons/Trophy.svg",
        progress: e.locked ? t : e.index,
        max: e.index,
        locked: e.locked,
        children: z.jsx(Pc.Progression.MILESTONE_UNLOCK_REQUIREMENT, {
          INDEX: z.jsx(Gc, {
            value: e.index,
            unit: Oc.Integer
          }),
          NAME: z.jsx(Pc.Progression.MILESTONE_NAME, {
            index: e.index
          })
        })
      });
    };
    var k3 = e => (0, z.jsx)(V3, {
      icon: "Media/Game/Icons/DevPoint.svg",
      progress: e.locked ? 0 : 1,
      max: 1,
      locked: e.locked,
      children: (0, z.jsx)(Pc.Progression.NODE_UNLOCK_REQUIREMENT, {
        NAME: (0, z.jsx)(Pc.Progression.NODE_NAME, {
          hash: e.name
        })
      })
    });
    var D3 = e => {
      0;
      const t = Y.useMemo(() => {
        0;
        0;
        0;
        const t = {
          NAME: z.jsx(Pc.Assets.NAME, {
            hash: e.requirement
          }),
          CURRENT: z.jsx(Gc, {
            value: e.progress,
            unit: Oc.Integer
          }),
          TARGET: z.jsx(Gc, {
            value: e.minimumCount,
            unit: Oc.Integer
          })
        };
        return null != e.labelId ? (0, z.jsx)(Tc, {
          id: e.labelId,
          args: t
        }) : (0, z.jsx)(Pc.Progression.STRICT_OBJECT_BUILT_REQUIREMENT, {
          ...t
        });
      }, [e.labelId, e.requirement, e.progress, e.minimumCount]);
      0;
      return z.jsx(V3, {
        icon: e.icon,
        progress: e.progress,
        max: e.minimumCount,
        locked: e.locked,
        children: t
      });
    };
    var F3 = e => {
      0;
      const t = Y.useMemo(() => {
        0;
        0;
        0;
        const t = {
          ZONE: null != e.requiredZone ? (0, z.jsx)(Pc.Assets.NAME, {
            hash: e.requiredZone
          }) : "",
          CURRENT: z.jsx(Gc, {
            value: e.progress,
            unit: Oc.Integer
          }),
          TARGET: z.jsx(Gc, {
            value: e.minimumSquares > 0 ? e.minimumSquares : e.minimumCount,
            unit: Oc.Integer
          }),
          LEVEL: z.jsx(Gc, {
            value: e.minimumLevel,
            unit: Oc.Integer
          })
        };
        return null != e.labelId ? (0, z.jsx)(Tc, {
          id: e.labelId,
          args: t
        }) : e.minimumSquares > 0 || 0 === e.minimumCount ? e.minimumLevel > 1 ? (0, z.jsx)(Pc.Progression.ZONE_BUILT_REQUIREMENT_CELLS_LEVEL, {
          ...t
        }) : (0, z.jsx)(Pc.Progression.ZONE_BUILT_REQUIREMENT_CELLS, {
          ...t
        }) : e.minimumLevel > 1 ? (0, z.jsx)(Pc.Progression.ZONE_BUILT_REQUIREMENT_COUNT_LEVEL, {
          ...t
        }) : (0, z.jsx)(Pc.Progression.ZONE_BUILT_REQUIREMENT_COUNT, {
          ...t
        });
      }, [e.labelId, e.minimumCount, e.minimumLevel, e.minimumSquares, e.progress, e.requiredZone]);
      0;
      return z.jsx(V3, {
        icon: e.icon,
        progress: e.progress,
        max: e.minimumSquares > 0 ? e.minimumSquares : e.minimumCount,
        locked: e.locked,
        children: t
      });
    };
    var U3 = e => {
      0;
      const t = Y.useMemo(() => {
        if (e.minimumPopulation > 0 || 0 === e.minimumHappiness) {
          0;
          const t = {
            VALUE: z.jsx(Gc, {
              value: e.minimumPopulation,
              unit: Oc.Integer
            })
          };
          return null != e.labelId ? (0, z.jsx)(Tc, {
            id: e.labelId,
            args: t
          }) : (0, z.jsx)(Pc.Progression.POPULATION_REQUIREMENT, {
            ...t
          });
        }
        {
          0;
          const t = {
            VALUE: z.jsx(Gc, {
              value: e.minimumHappiness,
              unit: Oc.PercentageSingleFraction
            })
          };
          return null != e.labelId ? (0, z.jsx)(Tc, {
            id: e.labelId,
            args: t
          }) : (0, z.jsx)(Pc.Progression.HAPPINESS_REQUIREMENT, {
            ...t
          });
        }
      }, [e.minimumPopulation, e.minimumHappiness, e.labelId]);
      0;
      return z.jsx(V3, {
        icon: e.minimumPopulation > 0 || 0 === e.minimumHappiness ? "Media/Game/Icons/Citizen.svg" : "Media/Game/Icons/Happy.svg",
        progress: e.progress,
        max: e.minimumPopulation > 0 ? e.minimumPopulation : e.minimumHappiness,
        locked: e.locked,
        children: t
      });
    };
    var B3 = e => {
      0;
      const t = Y.useMemo(() => {
        0;
        0;
        0;
        const t = {
          RESOURCE: z.jsx(Pc.Resources.TITLE, {
            hash: e.resourceType
          }),
          CURRENT: z.jsx(Gc, {
            value: e.progress,
            unit: Oc.Integer
          }),
          TARGET: z.jsx(Gc, {
            value: e.minimumProducedAmount,
            unit: Oc.Integer
          })
        };
        return null != e.labelId ? (0, z.jsx)(Tc, {
          id: e.labelId,
          args: t
        }) : (0, z.jsx)(Pc.Progression.PROCESSING_REQUIREMENT, {
          ...t
        });
      }, [e.labelId, e.resourceType, e.progress, e.minimumProducedAmount]);
      0;
      return z.jsx(V3, {
        icon: "Media/Game/Icons/Company.svg",
        progress: e.progress,
        max: e.minimumProducedAmount,
        locked: e.locked,
        children: t
      });
    };
    var G3 = e => {
      0;
      const t = Y.useMemo(() => {
        0;
        0;
        const t = {
          CURRENT: z.jsx(Gc, {
            value: e.progress,
            unit: Oc.Integer
          }),
          TARGET: z.jsx(Gc, {
            value: e.minimumCount,
            unit: Oc.Integer
          })
        };
        return null != e.labelId ? (0, z.jsx)(Tc, {
          id: e.labelId,
          args: t
        }) : (0, z.jsx)(Pc.Progression.OBJECT_BUILT_REQUIREMENT, {
          hash: e.name,
          ...t
        });
      }, [e.labelId, e.name, e.progress, e.minimumCount]);
      0;
      return z.jsx(V3, {
        icon: "Media/Game/Icons/Build.svg",
        progress: e.progress,
        max: e.minimumCount,
        locked: e.locked,
        children: t
      });
    };
    var V3 = ({
      icon: e,
      progress: t,
      max: n,
      locked: s,
      children: i
    }) => {
      const a = s ? wd(t / n, 0, 1) : n;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: A3.requirementField,
        children: [z.jsx("div", {
          className: A3.progressBounds,
          style: {
            width: 100 * a + "%"
          },
          children: z.jsx("div", {
            className: A3.progress,
            style: {
              width: (a > 0 ? 100 / a : 0) + "%"
            }
          })
        }), z.jsxs("div", {
          className: A3.content,
          children: [e && (0, z.jsx)("img", {
            src: e,
            className: A3.icon
          }), z.jsx("div", {
            className: A3.label,
            children: i
          }), !s && (0, z.jsx)(W_, {
            src: "Media/Glyphs/Checkmark.svg",
            className: A3.checkmark
          })]
        })]
      });
    };
    var H3 = ({
      locked: e
    }) => (0, z.jsx)(V3, {
      icon: "Media/Game/Icons/Build.svg",
      progress: 0,
      max: 1,
      locked: e,
      children: (0, z.jsx)(Pc.Progression.TUTORIAL_REQUIREMENT, {})
    });
    var K3 = {
      [OC.Milestone]: R3,
      [OC.DevTreeNode]: k3,
      [OC.StrictObjectBuilt]: D3,
      [OC.ZoneBuilt]: F3,
      [OC.Citizen]: U3,
      [OC.Processing]: B3,
      [OC.ObjectBuilt]: G3,
      [OC.Unlock]: () => null,
      [OC.Tutorial]: H3
    };
    X.add("game-ui/game/components/progression/requirement-field/requirement-field.tsx", {
      get MilestoneRequirementField() {
        return R3;
      },
      set MilestoneRequirementField(e) {
        R3 = e;
      },
      get DevTreeNodeRequirementField() {
        return k3;
      },
      set DevTreeNodeRequirementField(e) {
        k3 = e;
      },
      get StrictObjectBuiltRequirementField() {
        return D3;
      },
      set StrictObjectBuiltRequirementField(e) {
        D3 = e;
      },
      get ZoneBuiltRequirementField() {
        return F3;
      },
      set ZoneBuiltRequirementField(e) {
        F3 = e;
      },
      get CitizenRequirementField() {
        return U3;
      },
      set CitizenRequirementField(e) {
        U3 = e;
      },
      get ProcessingRequirementField() {
        return B3;
      },
      set ProcessingRequirementField(e) {
        B3 = e;
      },
      get ObjectBuiltRequirementField() {
        return G3;
      },
      set ObjectBuiltRequirementField(e) {
        G3 = e;
      },
      get RequirementField() {
        return V3;
      },
      set RequirementField(e) {
        V3 = e;
      },
      get TutorialRequirementField() {
        return H3;
      },
      set TutorialRequirementField(e) {
        H3 = e;
      },
      get prefabRequirementComponents() {
        return K3;
      },
      set prefabRequirementComponents(e) {
        K3 = e;
      }
    });
    let W3 = {
      "unlocking-requirements": "unlocking-requirements_xaC",
      unlockingRequirements: "unlocking-requirements_xaC",
      row: "row_fam",
      title: "title_grF",
      divider: "divider_Cqj"
    };
    X.add("game-ui/game/components/progression/unlocking-requirements/unlocking-requirements.module.scss", {
      get classes() {
        return W3;
      },
      set classes(e) {
        Object.assign(W3, e);
      }
    });
    var Y3 = ({
      requirements: e,
      theme: t,
      className: n
    }) => {
      0;
      const s = Y.useMemo(() => ({
        ...W3,
        ...t
      }), [t]);
      const i = e.requireAny.length > 0;
      const a = e.requireAll.length > 0;
      0;
      return z.jsxs("div", {
        className: Qu()(s.unlockingRequirements, n),
        children: [i && (0, z.jsxs)("div", {
          className: s.row,
          children: [(0, z.jsx)("div", {
            className: s.title,
            children: (0, z.jsx)(Pc.Progression.REQUIRES_ANY, {})
          }), (0, z.jsx)(lM, {
            components: K3,
            data: e.requireAny
          })]
        }), i && a && (0, z.jsx)("div", {
          className: W3.divider
        }), a && (0, z.jsxs)("div", {
          className: s.row,
          children: [(0, z.jsx)("div", {
            className: s.title,
            children: i ? (0, z.jsx)(Pc.Progression.REQUIRES_ALL, {}) : e.requireAll.length > 1 ? (0, z.jsx)(Pc.Progression.REQUIREMENTS, {}) : (0, z.jsx)(Pc.Progression.REQUIREMENT, {})
          }), (0, z.jsx)(lM, {
            components: K3,
            data: e.requireAll
          })]
        })]
      });
    };
    function $3(e) {
      return e.requireAll.length > 0 || e.requireAny.length > 0;
    }
    X.add("game-ui/game/components/progression/unlocking-requirements/unlocking-requirements.tsx", {
      get Requirements() {
        return Y3;
      },
      set Requirements(e) {
        Y3 = e;
      },
      get hasRequirements() {
        return $3;
      },
      set hasRequirements(e) {
        $3 = e;
      }
    });
    let q3 = {
      balloon: "balloon_ltu balloon_qJY balloon_H23",
      enter: "enter_tT_ enter_ZTk",
      "enter-active": "enter-active_r4U enter-active_AJs",
      enterActive: "enter-active_r4U enter-active_AJs",
      exit: "exit_OtI undefined",
      "exit-active": "exit-active_Dqt exit-active_RfZ",
      exitActive: "exit-active_Dqt exit-active_RfZ",
      container: "container_eNL container_zgM container_jfe",
      locked: "locked_UbY",
      arrow: "arrow_R9U arrow_SVb arrow_Xfn",
      content: "content_wfU content_A82 content_JQV",
      main: "main_F2U",
      lock: "lock_Gqk",
      requirements: "requirements_dsk"
    };
    X.add("game-ui/game/components/progression/unlocking-tooltip/unlocking-tooltip.module.scss", {
      get classes() {
        return q3;
      },
      set classes(e) {
        Object.assign(q3, e);
      }
    });
    var Q3 = ({
      title: e,
      description: t,
      content: n,
      shortcut: s,
      locked: i = false,
      requirements: a,
      className: o,
      children: r,
      forceVisible: l,
      ...c
    }) => {
      const u = Y.Children.count(e) > 0 || Y.Children.count(t) > 0 || Y.Children.count(n) > 0;
      0;
      const d = Y.useMemo(() => i && a && a.requireAll.length + a.requireAny.length > 0, [i, a]);
      0;
      return z.jsx(bg, {
        ...c,
        forceVisible: l,
        theme: q3,
        className: Qu()(d && q3.locked, o),
        tooltip: (u || d) && (0, z.jsxs)(z.Fragment, {
          children: [u && (0, z.jsx)(Yq, {
            title: e,
            description: t,
            content: n,
            shortcut: s,
            className: q3.main
          }), u && d && (0, z.jsx)(kX, {
            className: q3.lock
          }), d && a && (0, z.jsx)(Y3, {
            requirements: a,
            className: q3.requirements
          })]
        }),
        children: r
      });
    };
    X.add("game-ui/game/components/progression/unlocking-tooltip/unlocking-tooltip.tsx", {
      get UnlockingTooltip() {
        return Q3;
      },
      set UnlockingTooltip(e) {
        Q3 = e;
      }
    });
    var Z3 = () => {
      const e = sl(wx);
      const t = sl(Ox);
      const n = sl(Px);
      const s = sl(Lx);
      const i = KC("ZonesOffice");
      0;
      0;
      0;
      0;
      0;
      const a = [z.jsx(Pc.LevelInfoPanel.LEVEL1, {}), z.jsx(Pc.LevelInfoPanel.LEVEL2, {}), z.jsx(Pc.LevelInfoPanel.LEVEL3, {}), z.jsx(Pc.LevelInfoPanel.LEVEL4, {}), z.jsx(Pc.LevelInfoPanel.LEVEL5, {})];
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.RESIDENTIAL_LEVEL_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            centered: true,
            text: z.jsx(Pc.LevelInfoPanel.RESIDENTIAL, {})
          }), z.jsx(h3, {
            colors: ["#86FB14", "#64B805", "#3C8F1A", "#2F7512", "#20550C"],
            labels: a,
            data: e,
            usePercentageValue: true
          })]
        }), z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.COMMERCIAL_LEVEL_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            centered: true,
            text: z.jsx(Pc.LevelInfoPanel.COMMERCIAL, {})
          }), z.jsx(h3, {
            colors: ["#43D4FF", "#2393B8", "#1B748E", "#116075", "#0A4254"],
            labels: a,
            data: t,
            usePercentageValue: true
          })]
        }), z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.INDUSTRIAL_LEVEL_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            centered: true,
            text: z.jsx(Pc.LevelInfoPanel.INDUSTRIAL, {})
          }), z.jsx(h3, {
            colors: ["#FCCE1A", "#B59923", "#90781C", "#766315", "#55450D"],
            labels: a,
            data: n,
            usePercentageValue: true
          })]
        }), z.jsx(Q3, {
          locked: i.locked,
          requirements: i.requirements,
          children: z.jsxs(J5, {
            tooltip: z.jsx(Pc.Infoviews.OFFICE_LEVEL_TOOLTIP, {}),
            children: [z.jsx(D5, {
              uppercase: true,
              centered: true,
              text: z.jsx(Pc.LevelInfoPanel.OFFICE, {})
            }), z.jsx(h3, {
              colors: ["#7941FF", "#4E22B3", "#3D1C92", "#311376", "#200B54"],
              labels: a,
              data: s,
              usePercentageValue: true
            })]
          })
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/level-infoview-panel.tsx", {
      get LevelInfoviewPanel() {
        return Z3;
      },
      set LevelInfoviewPanel(e) {
        Z3 = e;
      }
    });
    var J3 = () => {
      const e = sl(rv);
      const t = sl(lv);
      const n = sl(cv);
      const s = sl(uv);
      const i = sl(dv);
      const a = sl(mv);
      const o = sl(hv);
      const r = sl(gv);
      const l = sl(pv);
      const c = sl(fv);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(e4, {
          text: z.jsx(D5, {
            icon: "Media/Game/Icons/Fertility.svg",
            text: z.jsx(Pc.NaturalResourcesInfoPanel.FERTILITY, {}),
            uppercase: true
          }),
          tooltip: z.jsx(Pc.Infoviews.FERTILE_LAND_RESOURCE_TOOLTIP, {}),
          available: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.AVAILABLE, {}),
            rightText: s > 0 ? (0, z.jsx)(Gc, {
              value: s,
              unit: Oc.Area
            }) : 0
          }),
          extractionRate: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.RATE, {}),
            rightText: r > 0 ? (0, z.jsx)(Gc, {
              value: r,
              unit: Oc.WeightPerMonth
            }) : 0
          }),
          renewalRate: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.RENEWAL_RATE, {}),
            rightText: c > 0 ? (0, z.jsx)(Gc, {
              value: c,
              unit: Oc.WeightPerMonth
            }) : 0
          })
        }), z.jsx(e4, {
          text: z.jsx(D5, {
            icon: "Media/Game/Icons/Forest.svg",
            text: z.jsx(Pc.NaturalResourcesInfoPanel.FOREST, {}),
            uppercase: true
          }),
          tooltip: z.jsx(Pc.Infoviews.WOOD_RESOURCE_TOOLTIP, {}),
          available: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.AVAILABLE, {}),
            rightText: n > 0 ? (0, z.jsx)(Gc, {
              value: n,
              unit: Oc.Weight
            }) : 0
          }),
          extractionRate: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.RATE, {}),
            rightText: o > 0 ? (0, z.jsx)(Gc, {
              value: o,
              unit: Oc.WeightPerMonth
            }) : 0
          }),
          renewalRate: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.RENEWAL_RATE, {}),
            rightText: l > 0 ? (0, z.jsx)(Gc, {
              value: l,
              unit: Oc.WeightPerMonth
            }) : 0
          })
        }), z.jsx(e4, {
          text: z.jsx(D5, {
            icon: "Media/Game/Icons/Ore.svg",
            text: z.jsx(Pc.NaturalResourcesInfoPanel.ORE, {}),
            uppercase: true
          }),
          tooltip: z.jsx(Pc.Infoviews.ORE_RESOURCE_TOOLTIP, {}),
          available: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.AVAILABLE, {}),
            rightText: t > 0 ? (0, z.jsx)(Gc, {
              value: t,
              unit: Oc.Weight
            }) : 0
          }),
          extractionRate: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.RATE, {}),
            rightText: a > 0 ? (0, z.jsx)(Gc, {
              value: a,
              unit: Oc.WeightPerMonth
            }) : 0
          })
        }), z.jsx(e4, {
          text: z.jsx(D5, {
            icon: "Media/Game/Icons/Oil.svg",
            text: z.jsx(Pc.NaturalResourcesInfoPanel.OIL, {}),
            uppercase: true
          }),
          tooltip: z.jsx(Pc.Infoviews.OIL_RESOURCE_TOOLTIP, {}),
          available: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.AVAILABLE, {}),
            rightText: e > 0 ? (0, z.jsx)(Gc, {
              value: e,
              unit: Oc.Weight
            }) : 0
          }),
          extractionRate: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.NaturalResourcesInfoPanel.RATE, {}),
            rightText: i > 0 ? (0, z.jsx)(Gc, {
              value: i,
              unit: Oc.WeightPerMonth
            }) : 0
          })
        })]
      });
    };
    const e4 = ({
      text: e,
      available: t,
      extractionRate: n,
      renewalRate: s,
      tooltip: i
    }) => (0, z.jsxs)(J5, {
      tooltip: i,
      children: [e, t, n, s]
    });
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/natural-resources-infoview-panel.tsx", {
      get NaturalResourcesInfoviewPanel() {
        return J3;
      },
      set NaturalResourcesInfoviewPanel(e) {
        J3 = e;
      }
    });
    var t4 = () => {
      const e = sl(mx);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(e3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.NoisePollutionInfoPanel.AVERAGE_NOISE_POLLUTION, {}),
            rightText: z.jsx(Yu, {
              value: e.current,
              max: e.max
            })
          }),
          tooltip: z.jsx(Pc.Infoviews.AVERAGE_NOISE_POLLUTION_TOOLTIP, {}),
          value: e,
          gradient: n4
        })
      });
    };
    const n4 = {
      stops: [{
        color: "#FFF",
        offset: 0
      }, {
        color: "#F00",
        offset: 1
      }]
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/noise-infoview-panel.tsx", {
      get NoiseInfoviewPanel() {
        return t4;
      },
      set NoiseInfoviewPanel(e) {
        t4 = e;
      }
    });
    var s4 = () => {
      const e = sl(tv);
      const t = sl(nv);
      const n = sl(sv);
      const s = sl(iv);
      const i = sl(av);
      const a = sl(ov);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.IMPORT_DISTRIBUTION_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.OutsideConnectionsInfoPanel.TOP_IMPORTS, {})
          }), z.jsx(h3, {
            colors: t,
            data: n,
            labels: e.map(e => (0, z.jsx)(Pc.Resources.TITLE, {
              hash: e.replace("Resource", "")
            }, e)),
            ignoreZero: true,
            usePercentageValue: true
          })]
        }), z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.EXPORT_DISTRIBUTION_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.OutsideConnectionsInfoPanel.TOP_EXPORTS, {})
          }), z.jsx(h3, {
            colors: i,
            data: a,
            labels: s.map(e => (0, z.jsx)(Pc.Resources.TITLE, {
              hash: e.replace("Resource", "")
            }, e)),
            ignoreZero: true,
            usePercentageValue: true
          })]
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/outside-connections-infoview-panel.tsx", {
      get OutsideConnectionsInfoviewPanel() {
        return s4;
      },
      set OutsideConnectionsInfoviewPanel(e) {
        s4 = e;
      }
    });
    var i4 = () => {
      const e = sl(gx);
      const t = sl(px);
      const n = sl(fx);
      const s = sl(_x);
      const i = sl(bx);
      const a = sl(Tx);
      const o = sl(yx);
      const r = sl(Sx);
      const l = sl(jx);
      const c = sl(Cx);
      const u = sl(Ex);
      const d = sl(Ix);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(f3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.PoliceInfoPanel.JAIL_AVAILABILITY, {})
          }),
          tooltip: z.jsx(Pc.Infoviews.JAIL_AVAILABILITY_TOOLTIP, {}),
          demandLabel: z.jsx(Pc.PoliceInfoPanel.ARRESTED_CRIMINALS, {}),
          demandValue: z.jsx(Gc, {
            value: i,
            unit: Oc.Integer
          }),
          supplyLabel: z.jsx(Pc.InfoPanels.CAPACITY, {}),
          supplyValue: z.jsx(Gc, {
            value: s,
            unit: Oc.Integer
          }),
          availability: t,
          children: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PoliceInfoPanel.IN_JAIL, {}),
            rightText: z.jsx(Gc, {
              value: a,
              unit: Oc.Integer
            })
          })
        }), z.jsx(f3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.PoliceInfoPanel.PRISON_AVAILABILITY, {})
          }),
          tooltip: z.jsx(Pc.Infoviews.PRISON_AVAILABILITY_TOOLTIP, {}),
          demandLabel: z.jsx(Pc.PoliceInfoPanel.PRISONERS, {}),
          demandValue: z.jsx(Gc, {
            value: d,
            unit: Oc.Integer
          }),
          supplyLabel: z.jsx(Pc.InfoPanels.CAPACITY, {}),
          supplyValue: z.jsx(Gc, {
            value: u,
            unit: Oc.Integer
          }),
          availability: n,
          children: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PoliceInfoPanel.IN_PRISON, {}),
            rightText: z.jsx(Gc, {
              value: o,
              unit: Oc.Integer
            })
          })
        }), z.jsxs(e3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.PoliceInfoPanel.AVERAGE_CRIME_PROBABILITY, {}),
            rightText: z.jsx(Yu, {
              value: e.current,
              max: e.max
            })
          }),
          tooltip: z.jsx(Pc.Infoviews.CRIME_PROBABILITY_TOOLTIP, {}),
          value: e,
          gradient: B5,
          children: [z.jsx(M5, {
            small: true
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PoliceInfoPanel.CURRENT_NUMBER_OF_CRIMINALS, {}),
            rightText: z.jsx(Gc, {
              value: r,
              unit: Oc.Integer
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PoliceInfoPanel.NUMBER_OF_CRIMES_PER_MONTH, {}),
            rightText: z.jsx(Gc, {
              value: l,
              unit: Oc.IntegerPerMonth
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PoliceInfoPanel.CRIME_SUCCESS_RATE, {}),
            rightText: z.jsx(Gc, {
              value: c,
              unit: Oc.PercentageSingleFraction
            })
          })]
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/police-infoview-panel.tsx", {
      get PoliceInfoviewPanel() {
        return i4;
      },
      set PoliceInfoviewPanel(e) {
        i4 = e;
      }
    });
    var a4 = ["#3a91c7", "#8bb9d6", "#5fb844", "#a3b844"];
    0;
    0;
    0;
    0;
    var o4 = [z.jsx(Pc.PopulationInfoPanel.CHILDREN, {}), z.jsx(Pc.PopulationInfoPanel.TEENS, {}), z.jsx(Pc.PopulationInfoPanel.ADULTS, {}), z.jsx(Pc.PopulationInfoPanel.SENIORS, {})];
    X.add("game-ui/common/charts/pie-chart/age-pie-chart.tsx", {
      get agePieChartColors() {
        return a4;
      },
      set agePieChartColors(e) {
        a4 = e;
      },
      get agePieChartLabels() {
        return o4;
      },
      set agePieChartLabels(e) {
        o4 = e;
      }
    });
    var r4 = () => {
      const e = sl(Kx);
      const t = sl(Wx);
      const n = sl(zx);
      const s = sl(Yx);
      const i = sl($x);
      const a = sl(Kf);
      const o = sl(qx);
      const r = sl(Xx);
      const l = sl(Qx);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.POPULATION_STATISTICS_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.PopulationInfoPanel.POPULATION, {}),
            rightText: z.jsx(Gc, {
              value: e,
              unit: Oc.Integer
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.BIRTH_RATE, {}),
            rightText: z.jsx(Gc, {
              value: i,
              unit: Oc.IntegerPerMonth
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.DEATH_RATE, {}),
            rightText: z.jsx(Gc, {
              value: a,
              unit: Oc.IntegerPerMonth
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.MOVED_IN, {}),
            rightText: z.jsx(Gc, {
              value: o,
              unit: Oc.IntegerPerMonth
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.MOVED_AWAY, {}),
            rightText: z.jsx(Gc, {
              value: r,
              unit: Oc.IntegerPerMonth
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.JOBS, {}),
            rightText: z.jsx(Gc, {
              value: n,
              unit: Oc.Integer
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.EMPLOYED, {}),
            rightText: z.jsx(Gc, {
              value: t,
              unit: Oc.Integer
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.PopulationInfoPanel.UNEMPLOYMENT, {}),
            rightText: z.jsx(Gc, {
              value: s,
              unit: Oc.PercentageSingleFraction
            })
          })]
        }), z.jsxs(J5, {
          tooltip: z.jsx(Pc.Infoviews.POPULATION_DISTRIBUTION_TOOLTIP, {}),
          children: [z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.PopulationInfoPanel.AGE_DISTRIBUTION, {})
          }), z.jsx(M5, {
            small: true
          }), z.jsx(h3, {
            usePercentageValue: true,
            colors: a4,
            labels: o4,
            data: l
          })]
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/population-infoview-panel.tsx", {
      get PopulationInfoviewPanel() {
        return r4;
      },
      set PopulationInfoviewPanel(e) {
        r4 = e;
      }
    });
    var l4 = () => {
      const e = sl(Bx);
      const t = sl(Gx);
      const n = sl(Vx);
      const s = sl(Hx);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(f3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.PostInfoPanel.MAIL_SERVICE_AVAILABILITY, {})
          }),
          tooltip: z.jsx(Pc.Infoviews.MAIL_SERVICE_AVAILABILITY_TOOLTIP, {}),
          demandLabel: z.jsx(Pc.PostInfoPanel.MAIL_RATE, {}),
          demandValue: z.jsx(Gc, {
            value: e,
            unit: Oc.IntegerPerMonth
          }),
          supplyLabel: z.jsx(Pc.InfoPanels.PROCESSING, {}),
          supplyValue: z.jsx(Gc, {
            value: t + n,
            unit: Oc.IntegerPerMonth
          }),
          availability: s
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/post-infoview-panel.tsx", {
      get PostInfoviewPanel() {
        return l4;
      },
      set PostInfoviewPanel(e) {
        l4 = e;
      }
    });
    var c4 = () => {
      const e = sl(ix);
      const t = sl(ox);
      const n = sl(rx);
      const s = sl(ax);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(f3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.RoadsInfoPanel.PARKING_AVAILABILITY, {})
          }),
          tooltip: z.jsx(Pc.Infoviews.PARKING_AVAILABILITY_TOOLTIP, {}),
          demandLabel: z.jsx(Pc.RoadsInfoPanel.PARKED_CARS, {}),
          demandValue: z.jsx(Gc, {
            value: t,
            unit: Oc.Integer
          }),
          supplyLabel: z.jsx(Pc.InfoPanels.CAPACITY, {}),
          supplyValue: z.jsx(Gc, {
            value: e,
            unit: Oc.Integer
          }),
          availability: n,
          children: z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.RoadsInfoPanel.PARKING_INCOME, {}),
            rightText: z.jsx(Gc, {
              value: s,
              unit: Oc.MoneyPerMonth
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/roads-infoview-panel.tsx", {
      get RoadsInfoviewPanel() {
        return c4;
      },
      set RoadsInfoviewPanel(e) {
        c4 = e;
      }
    });
    var u4 = () => {
      const e = sl(Fx);
      const t = sl(Dx);
      const n = sl(kx);
      const s = sl(Ux);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsxs(e3, {
          title: z.jsx(D5, {
            uppercase: true,
            text: z.jsx(Pc.TourismInfoPanel.ATTRACTIVENESS, {}),
            rightText: z.jsx(Gc, {
              value: n.current
            })
          }),
          tooltip: z.jsx(Pc.Infoviews.CITY_ATTRACTIVENESS_TOOLTIP, {}),
          value: n,
          gradient: H5,
          children: [z.jsx(M5, {
            small: true
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.TourismInfoPanel.TOURISM_RATE, {}),
            rightText: z.jsx(Gc, {
              value: e,
              unit: Oc.IntegerPerMonth
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.TourismInfoPanel.WEATHER_EFFECT, {}),
            rightText: z.jsx(Gc, {
              value: s,
              unit: Oc.Percentage,
              signed: true
            })
          }), z.jsx(D5, {
            small: true,
            text: z.jsx(Pc.TourismInfoPanel.AVERAGE_HOTEL_PRICE, {}),
            rightText: z.jsx(Gc, {
              value: t,
              unit: Oc.Money
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/tourism-infoview-panel.tsx", {
      get TourismInfoviewPanel() {
        return u4;
      },
      set TourismInfoviewPanel(e) {
        u4 = e;
      }
    });
    let d4 = {
      chartFontColor: "rgba(255, 255, 255, 0.6)",
      chartLineColor: "rgba(255, 255, 255, 0.1)",
      trafficVolumeBorderColor: "rgba(29, 130, 184, 1)",
      trafficVolumeBackgroundColor: "rgba(29, 130, 184, 0.5)",
      trafficFlowBorderColor: "rgba(30, 179, 184, 1)",
      trafficFlowBackgroundColor: "rgba(30, 179, 184, 0.5)",
      "traffic-chart": "traffic-chart_r8c",
      trafficChart: "traffic-chart_r8c"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/traffic-charts/traffic-chart.module.scss", {
      get classes() {
        return d4;
      },
      set classes(e) {
        Object.assign(d4, e);
      }
    });
    var h4 = ({
      data: e,
      className: t
    }) => {
      const n = v4(e);
      const s = x4(Oc.IntegerPerHour, 5, d4.trafficVolumeBorderColor, d4.trafficVolumeBackgroundColor);
      0;
      return z.jsx(BR, {
        type: "line",
        data: n,
        options: s,
        className: Qu()(d4.trafficChart, t)
      });
    };
    var g4 = ({
      data: e,
      className: t
    }) => {
      const n = v4(e);
      const s = x4(Oc.Percentage, 100, d4.trafficFlowBorderColor, d4.trafficFlowBackgroundColor);
      0;
      return z.jsx(BR, {
        type: "line",
        data: n,
        options: s,
        className: Qu()(d4.trafficChart, t)
      });
    };
    function x4(e, t, n, s) {
      const i = Kc(e);
      const a = sl(Ml);
      0;
      return Y.useMemo(() => {
        const e = {
          elements: {
            line: {
              borderColor: n,
              backgroundColor: s,
              borderWidth: 2,
              fill: true
            },
            point: {
              borderColor: n,
              backgroundColor: n,
              radius: 2,
              hoverRadius: 2,
              borderWidth: 2,
              hoverBorderWidth: 2
            }
          },
          scales: {
            x: {
              beginAtZero: true,
              grid: {
                lineWidth: 2,
                color: d4.chartLineColor
              },
              ticks: {
                font: {
                  size: 10 * a,
                  weight: "bold"
                },
                color: d4.chartFontColor,
                padding: 10,
                autoSkip: false
              }
            },
            y: {
              min: 0,
              suggestedMax: t,
              grid: {
                lineWidth: 2,
                color: d4.chartLineColor
              },
              ticks: {
                font: {
                  size: 10 * a,
                  weight: "bold"
                },
                color: d4.chartFontColor,
                padding: 10,
                autoSkip: false,
                callback: function (e) {
                  return i(e);
                },
                maxTicksLimit: 6
              }
            }
          }
        };
        return e;
      }, [s, n, i, t, a]);
    }
    function v4(e) {
      const t = wu();
      0;
      return Y.useMemo(() => ({
        labels: [t({
          hour: 0,
          minute: 0
        }), t({
          hour: 6,
          minute: 0
        }), t({
          hour: 12,
          minute: 0
        }), t({
          hour: 18,
          minute: 0
        }), t({
          hour: 0,
          minute: 0
        })],
        datasets: [{
          label: "data",
          data: e
        }]
      }), [e, t]);
    }
    X.add("game-ui/game/components/selected-info-panel/shared-components/traffic-charts/traffic-chart.tsx", {
      get TrafficVolumeChart() {
        return h4;
      },
      set TrafficVolumeChart(e) {
        h4 = e;
      },
      get TrafficFlowChart() {
        return g4;
      },
      set TrafficFlowChart(e) {
        g4 = e;
      }
    });
    var _4 = () => {
      const e = sl(lx);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(J5, {
        focusableBorder: true,
        tooltip: z.jsx(Pc.Infoviews.TRAFFIC_FLOW, {}),
        children: [z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.SelectedInfoPanel.ROAD_TRAFFIC_FLOW, {})
        }), z.jsx(g4, {
          data: e
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/traffic-infoview-panel.tsx", {
      get TrafficInfoviewPanel() {
        return _4;
      },
      set TrafficInfoviewPanel(e) {
        _4 = e;
      }
    });
    let b4 = {
      "line-summary": "line-summary_tW5",
      lineSummary: "line-summary_tW5",
      row: "row_Pqo",
      "disable-states": "disable-states_FlS",
      disableStates: "disable-states_FlS",
      locked: "locked_dOC",
      header: "header_Sxm",
      "secondary-row": "secondary-row_bfC",
      secondaryRow: "secondary-row_bfC",
      value: "value_p4t",
      "fifty-percent": "fifty-percent_dQ2",
      fiftyPercent: "fifty-percent_dQ2",
      "thirty-percent": "thirty-percent_pPg",
      thirtyPercent: "thirty-percent_pPg",
      "total-label": "total-label_QwL",
      totalLabel: "total-label_QwL",
      icon: "icon_Rph icon_Iwk",
      lock: "lock_eZg"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/transport-infoview-panel/transport-infoview-panel.module.scss", {
      get classes() {
        return b4;
      },
      set classes(e) {
        Object.assign(b4, e);
      }
    });
    var E4 = ({
      summaries: e
    }) => (0, z.jsxs)(J5, {
      disableFocus: true,
      children: [(0, z.jsx)(D5, {
        uppercase: true,
        text: (0, z.jsx)(Pc.TransportInfoPanel.CARGO_TRANSPORT_TITLE, {})
      }), (0, z.jsx)(I4, {}), (0, z.jsxs)(ep, {
        children: [e.map(e => (0, z.jsx)(y4, {
          summary: e
        }, e.id)), (0, z.jsx)(y4, {
          lastRow: true,
          summary: e.reduce((e, t) => ({
            id: "Total",
            icon: "",
            locked: false,
            cargoCount: e.cargoCount + t.cargoCount,
            lineCount: e.lineCount + t.lineCount,
            requirements: {
              requireAny: [],
              requireAll: []
            }
          }))
        })]
      })]
    });
    const I4 = () => (0, z.jsxs)("div", {
      className: Qu()(b4.row, b4.disableStates, b4.header),
      children: [(0, z.jsx)("div", {
        className: b4.icon
      }), (0, z.jsxs)("div", {
        className: b4.secondaryRow,
        children: [(0, z.jsx)("div", {
          className: Qu()(b4.value, b4.fiftyPercent),
          children: (0, z.jsx)(Pc.TransportInfoPanel.ROUTES_LABEL, {})
        }), (0, z.jsx)("div", {
          className: Qu()(b4.value, b4.fiftyPercent),
          children: (0, z.jsx)(Pc.TransportInfoPanel.CARGO_LABEL, {})
        })]
      })]
    });
    const y4 = ({
      summary: e,
      lastRow: t = false
    }) => {
      const n = !t && "Bus" !== e.id;
      0;
      const s = Y.useCallback(() => {
        KL(e.id);
        Yv(Wv.Cargo);
      }, [e.id]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Q3, {
        description: z.jsx(Pc.TransportInfoPanel.SUMMARY_TOOLTIP_CARGO, {
          hash: e.id
        }),
        locked: e.locked,
        requirements: e.requirements,
        direction: "right",
        children: z.jsx(L_, {
          focusKey: e.locked || !n ? Eg : Ig,
          theme: S1,
          onSelect: n ? s : undefined,
          disabled: e.locked,
          className: Qu()(b4.row, e.locked && S1.locked, e.locked && b4.locked, !n && b4.disableStates),
          children: z.jsxs(Wp, {
            ifFocused: true,
            ifGamepad: true,
            children: [t ? (0, z.jsx)("div", {
              className: b4.totalLabel,
              children: (0, z.jsx)(Pc.TransportInfoPanel.TOTAL, {})
            }) : (0, z.jsx)("img", {
              src: e.icon,
              className: Qu()(S1.icon, b4.icon)
            }), e.locked && (0, z.jsx)(kX, {
              className: b4.lock
            }), z.jsxs("div", {
              className: b4.secondaryRow,
              children: [z.jsx("div", {
                className: Qu()(b4.value, b4.fiftyPercent),
                children: "Bus" === e.id || 0 === e.lineCount && !t ? "—" : e.lineCount
              }), z.jsx("div", {
                className: Qu()(b4.value, b4.fiftyPercent),
                children: e.cargoCount > 0 || t ? (0, z.jsx)(Gc, {
                  value: e.cargoCount,
                  unit: Oc.WeightPerMonth
                }) : "—"
              })]
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/transport-infoview-panel/cargo-transport-summary.tsx", {
      get CargoTransportSummary() {
        return E4;
      },
      set CargoTransportSummary(e) {
        E4 = e;
      }
    });
    var S4 = ({
      summaries: e
    }) => (0, z.jsxs)(J5, {
      disableFocus: true,
      children: [(0, z.jsx)(D5, {
        uppercase: true,
        text: (0, z.jsx)(Pc.TransportInfoPanel.PUBLIC_TRANSPORT_TITLE, {})
      }), (0, z.jsx)(j4, {}), (0, z.jsxs)(ep, {
        children: [e.map(e => (0, z.jsx)(C4, {
          summary: e
        }, e.id)), (0, z.jsx)(C4, {
          lastRow: true,
          summary: e.reduce((e, t) => ({
            id: "Total",
            icon: "",
            locked: false,
            touristCount: e.touristCount + t.touristCount,
            citizenCount: e.citizenCount + t.citizenCount,
            lineCount: e.lineCount + t.lineCount,
            requirements: {
              requireAny: [],
              requireAll: []
            }
          }))
        })]
      })]
    });
    const j4 = () => (0, z.jsxs)("div", {
      className: Qu()(b4.row, b4.disableStates, b4.header),
      children: [(0, z.jsx)("div", {
        className: b4.icon
      }), (0, z.jsxs)("div", {
        className: b4.secondaryRow,
        children: [(0, z.jsx)("div", {
          className: Qu()(b4.value, b4.thirtyPercent),
          children: (0, z.jsx)(Pc.TransportInfoPanel.LINES, {})
        }), (0, z.jsx)("div", {
          className: Qu()(b4.value, b4.thirtyPercent),
          children: (0, z.jsx)(Pc.TransportInfoPanel.TOURISTS, {})
        }), (0, z.jsx)("div", {
          className: Qu()(b4.value, b4.thirtyPercent),
          children: (0, z.jsx)(Pc.TransportInfoPanel.CITIZENS, {})
        })]
      })]
    });
    const C4 = ({
      summary: e,
      lastRow: t = false
    }) => {
      const n = !t && "Taxi" !== e.id;
      0;
      const s = Y.useCallback(() => {
        HL(e.id);
        Yv(Wv.PublicTransport);
      }, [e.id]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Q3, {
        description: z.jsx(Pc.TransportInfoPanel.SUMMARY_TOOLTIP_PUBLICTRANSPORT, {
          hash: e.id
        }),
        locked: e.locked,
        requirements: e.requirements,
        direction: "right",
        children: z.jsx(L_, {
          focusKey: e.locked || !n ? Eg : Ig,
          onSelect: n ? s : undefined,
          disabled: e.locked,
          theme: S1,
          className: Qu()(b4.row, e.locked && S1.locked, e.locked && b4.locked, !n && b4.disableStates),
          children: z.jsxs(Wp, {
            ifFocused: true,
            ifGamepad: true,
            children: [t ? (0, z.jsx)("div", {
              className: b4.totalLabel,
              children: (0, z.jsx)(Pc.TransportInfoPanel.TOTAL, {})
            }) : (0, z.jsx)("img", {
              src: e.icon,
              className: Qu()(S1.icon, b4.icon)
            }), e.locked && (0, z.jsx)(kX, {
              className: b4.lock
            }), z.jsxs("div", {
              className: b4.secondaryRow,
              children: [z.jsx("div", {
                className: Qu()(b4.value, b4.thirtyPercent),
                children: "Taxi" === e.id || 0 === e.lineCount && !t ? "—" : e.lineCount
              }), z.jsx("div", {
                className: Qu()(b4.value, b4.thirtyPercent),
                children: e.touristCount > 0 || t ? (0, z.jsx)(Gc, {
                  value: e.touristCount,
                  unit: Oc.IntegerPerMonth
                }) : "—"
              }), z.jsx("div", {
                className: Qu()(b4.value, b4.thirtyPercent),
                children: e.citizenCount > 0 || t ? (0, z.jsx)(Gc, {
                  value: e.citizenCount,
                  unit: Oc.IntegerPerMonth
                }) : "—"
              })]
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/transport-infoview-panel/public-transport-summary.tsx", {
      get PublicTransportSummary() {
        return S4;
      },
      set PublicTransportSummary(e) {
        S4 = e;
      }
    });
    var N4 = () => {
      const e = sl(Bf);
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(S4, {
          summaries: e.passengerSummaries
        }), z.jsx(E4, {
          summaries: e.cargoSummaries
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/transport-infoview-panel/transport-infoview-panel.tsx", {
      get TransportInfoviewPanel() {
        return N4;
      },
      set TransportInfoviewPanel(e) {
        N4 = e;
      }
    });
    var w4 = () => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsx)(O4, {}), (0, z.jsx)(L4, {}), (0, z.jsx)(P4, {}), (0, z.jsx)(A4, {})]
    });
    const O4 = () => {
      const e = sl(hf);
      const t = sl(gf);
      const n = sl(Tf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(f3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.WaterInfoPanel.WATER_AVAILABILITY, {})
        }),
        tooltip: z.jsx(Pc.Infoviews.WATER_AVAILABILITY_TOOLTIP, {}),
        supplyLabel: z.jsx(Pc.InfoPanels.OUTPUT, {}),
        supplyValue: z.jsx(Gc, {
          value: e,
          unit: Oc.VolumePerMonth
        }),
        demandLabel: z.jsx(Pc.InfoPanels.CONSUMPTION, {}),
        demandValue: z.jsx(Gc, {
          value: t,
          unit: Oc.VolumePerMonth
        }),
        availability: n
      });
    };
    const P4 = () => {
      const e = sl(pf);
      const t = sl(ff);
      const n = sl(bf);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(f3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.WaterInfoPanel.SEWAGE_TREATMENT, {})
        }),
        tooltip: z.jsx(Pc.Infoviews.SEWAGE_TREATMENT_TOOLTIP, {}),
        supplyLabel: z.jsx(Pc.InfoPanels.PROCESSING, {}),
        supplyValue: z.jsx(Gc, {
          value: e,
          unit: Oc.VolumePerMonth
        }),
        demandLabel: z.jsx(Pc.InfoPanels.PRODUCTION, {}),
        demandValue: z.jsx(Gc, {
          value: t,
          unit: Oc.VolumePerMonth
        }),
        availability: n
      });
    };
    const L4 = () => {
      const e = sl(xf);
      const t = sl(vf);
      const n = sl(Ef);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(f3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.WaterInfoPanel.WATER_TRADE, {})
        }),
        tooltip: z.jsx(Pc.Infoviews.WATER_TRADE_TOOLTIP, {}),
        supplyLabel: z.jsx(Pc.WaterInfoPanel.WATER_EXPORT, {}),
        supplyValue: z.jsx(Gc, {
          value: e,
          unit: Oc.VolumePerMonth
        }),
        demandLabel: z.jsx(Pc.WaterInfoPanel.WATER_IMPORT, {}),
        demandValue: z.jsx(Gc, {
          value: t,
          unit: Oc.VolumePerMonth
        }),
        availability: n
      });
    };
    const A4 = () => {
      const e = sl(_f);
      const t = {
        min: sl(ff),
        max: 0,
        current: e
      };
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.WaterInfoPanel.SEWAGE_TRADE, {}),
          rightText: z.jsx(Gc, {
            value: e,
            unit: Oc.VolumePerMonth
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.SEWAGE_TRADE_TOOLTIP, {}),
        value: t,
        gradient: W5
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/water-infoview-panel.tsx", {
      get WaterInfoviewPanel() {
        return w4;
      },
      set WaterInfoviewPanel(e) {
        w4 = e;
      }
    });
    var M4 = () => {
      const e = sl(dx);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(e3, {
        title: z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.WaterPollutionInfoPanel.AVERAGE_WATER_POLLUTION, {}),
          rightText: z.jsx(Yu, {
            value: e.current,
            max: e.max
          })
        }),
        tooltip: z.jsx(Pc.Infoviews.AVERAGE_WATER_POLLUTION_TOOLTIP, {}),
        value: e,
        gradient: U5
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/water-pollution-infoview-panel.tsx", {
      get WaterPollutionInfoviewPanel() {
        return M4;
      },
      set WaterPollutionInfoviewPanel(e) {
        M4 = e;
      }
    });
    let R4 = {
      "info-piechart": "info-piechart_wXd",
      infoPiechart: "info-piechart_wXd",
      content: "content__L_",
      pie: "pie_WkN",
      legends: "legends_pVz",
      legend: "legend_fqG"
    };
    X.add("game-ui/common/charts/pie-chart/info-piechart.module.scss", {
      get classes() {
        return R4;
      },
      set classes(e) {
        Object.assign(R4, e);
      }
    });
    var D4 = ["#808080", "#b09868", "#368a2e", "#b981c0", "#5796d1", "#FFFFFF33"];
    0;
    0;
    0;
    0;
    0;
    0;
    var F4 = [z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Uneducated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Poorly Educated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Educated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Well Educated"
    }), z.jsx(Pc.EducationInfoPanel.LEVEL, {
      hash: "Highly Educated"
    }), z.jsx(Pc.SelectedInfoPanel.OPEN_POSITIONS, {})];
    X.add("game-ui/common/charts/pie-chart/workplaces-pie-charts.tsx", {
      get workplacesPieChartColors() {
        return D4;
      },
      set workplacesPieChartColors(e) {
        D4 = e;
      },
      get workplacesPieChartLabels() {
        return F4;
      },
      set workplacesPieChartLabels(e) {
        F4 = e;
      }
    });
    var U4 = () => {
      const e = sl(xv);
      const t = sl(vv);
      const n = sl(_v);
      const s = sl(bv);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(J5, {
        tooltip: z.jsx(Pc.Infoviews.WORKPLACE_DISTRIBUTION_TOOLTIP, {}),
        children: [z.jsx(D5, {
          uppercase: true,
          text: z.jsx(Pc.WorkplacesInfoPanel.WORKPLACE_DISTRIBUTION, {})
        }), z.jsx(h3, {
          colors: D4,
          labels: F4,
          data: t,
          customLegend: t.values.map((n, s) => (e.values[s] > 0 || s === t.values.length - 1) && (0, z.jsxs)("div", {
            className: R4.legend,
            children: [(0, z.jsx)(FR, {
              color: D4[s],
              label: F4[s]
            }), s < t.values.length - 1 ? (0, z.jsx)(cu, {
              value: n,
              total: e.values[s],
              unit: Oc.Integer
            }) : (0, z.jsx)(Gc, {
              value: n,
              unit: Oc.Integer
            })]
          }, s))
        }), z.jsx(M5, {}), z.jsx(D5, {
          small: true,
          text: z.jsx(Pc.WorkplacesInfoPanel.WORKPLACES, {}),
          rightText: z.jsx(Gc, {
            value: n,
            unit: Oc.Integer
          })
        }), z.jsx(D5, {
          small: true,
          text: z.jsx(Pc.WorkplacesInfoPanel.WORKERS, {}),
          rightText: z.jsx(Gc, {
            value: s,
            unit: Oc.Integer
          })
        })]
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/panels/workplaces-infoview-panel.tsx", {
      get WorkplacesInfoviewPanel() {
        return U4;
      },
      set WorkplacesInfoviewPanel(e) {
        U4 = e;
      }
    });
    let B4 = {
      title: "title_HFc",
      "active-infoview-panel": "active-infoview-panel_aTq",
      activeInfoviewPanel: "active-infoview-panel_aTq",
      "infomodes-panel": "infomodes-panel_B0O",
      infomodesPanel: "infomodes-panel_B0O",
      scrollable: "scrollable_wt8"
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/active-infoview-panel.module.scss", {
      get classes() {
        return B4;
      },
      set classes(e) {
        Object.assign(B4, e);
      }
    });
    var V4 = ({
      focusKey: e,
      className: t,
      onClose: n,
      transition: s,
      allowFocusExit: i,
      scrollable: a = true
    }) => {
      const o = S5(Pv.PhotoMode);
      const r = Lp(sl(Zp));
      0;
      const l = Y.useMemo(() => function (e) {
        switch (e?.id) {
          case "Electricity":
            0;
            return z.jsx(_3, {});
          case "WaterPipes":
            0;
            return z.jsx(w4, {});
          case "Transport":
            0;
            return z.jsx(N4, {});
          case "Education":
            0;
            return z.jsx(x3, {});
          case "Healthcare":
            0;
            return z.jsx(N3, {});
          case "Garbage":
            0;
            return z.jsx(T3, {});
          case "Roads":
            0;
            return z.jsx(c4, {});
          case "Traffic":
            0;
            return z.jsx(_4, {});
          case "AirPollution":
            0;
            return z.jsx(t3, {});
          case "GroundPollution":
            0;
            return z.jsx(y3, {});
          case "WaterPollution":
            0;
            return z.jsx(M4, {});
          case "NoisePollution":
            0;
            return z.jsx(t4, {});
          case "FireRescue":
            0;
            return z.jsx(b3, {});
          case "Police":
            0;
            return z.jsx(i4, {});
          case "LandValue":
            0;
            return z.jsx(L3, {});
          case "Level":
            0;
            return z.jsx(Z3, {});
          case "DisasterControl":
            0;
            return z.jsx(o3, {});
          case "Tourism":
            0;
            return z.jsx(u4, {});
          case "PostService":
            0;
            return z.jsx(l4, {});
          case "Population":
            0;
            return z.jsx(r4, {});
          case "Extractors":
            0;
            return z.jsx(J3, {});
          case "OutsideConnections":
            0;
            return z.jsx(s4, {});
          case "Profitability":
            0;
            return z.jsx(n3, {});
          case "Workplaces":
            0;
            return z.jsx(U4, {});
          case "Happiness":
            0;
            return z.jsx(C3, {});
          default:
            return null;
        }
      }(r), [r]);
      0;
      const c = Y.useCallback(() => n(), [n]);
      0;
      const u = Y.useMemo(() => r ? `${dT.value?.infoviewsPanel}+${r.uiTag}` : undefined, [r]);
      og(u, null != r);
      const d = r && !o.visible;
      const m = d && (0, z.jsx)(kg, {
        onAction: c,
        children: (0, z.jsxs)(ep, {
          allowLooping: true,
          children: [l, r.infomodes.length > 0 && (0, z.jsxs)("div", {
            className: B4.infomodesPanel,
            children: [(0, z.jsx)(D5, {
              text: (0, z.jsx)(Pc.Infoviews.MAP_LEGEND, {}),
              uppercase: true
            }), (0, z.jsx)(M5, {}), r?.infomodes.map(e => (0, z.jsx)(O5, {
              focusKey: e.id,
              infomode: e
            }, e.id))]
          })]
        })
      });
      0;
      return z.jsx(z.Fragment, {
        children: d && (0, z.jsx)(aT, {
          uiTag: u,
          children: (0, z.jsx)(ZT, {
            focusKey: e,
            className: Qu()(B4.activeInfoviewPanel, t),
            onClose: c,
            header: (0, z.jsx)(nE, {
              icon: r?.icon,
              className: B4.title,
              children: (0, z.jsx)(Pc.Infoviews.INFOVIEW, {
                hash: r?.id || ""
              })
            }),
            transition: s,
            allowFocusExit: i,
            showCloseHint: true,
            children: a ? (0, z.jsx)(ab, {
              className: B4.scrollable,
              children: m
            }) : m
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/active-infoview-panel/active-infoview-panel.tsx", {
      get ActiveInfoviewPanel() {
        return V4;
      },
      set ActiveInfoviewPanel(e) {
        V4 = e;
      }
    });
    let H4 = {
      button: "button_FBo button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT toggle-states_DTm",
      icon: "icon_ZjN icon_soN icon_Iwk",
      locked: "locked_Tjl locked_H2O locked_dBl",
      item: "item_IYJ",
      lock: "lock_OBe",
      container: "container_Mil",
      hint: "hint_XjU",
      "hint-icon": "hint-icon_t5h",
      hintIcon: "hint-icon_t5h"
    };
    X.add("game-ui/game/components/infoviews/infoviews-button/infoview-button.module.scss", {
      get classes() {
        return H4;
      },
      set classes(e) {
        Object.assign(H4, e);
      }
    });
    const W4 = {
      hint: H4.hint,
      icon: H4.hintIcon
    };
    var z4 = ({
      infoview: e,
      selected: t,
      onSelect: n,
      bypassLocking: s
    }) => {
      0;
      const [i, a] = Y.useState(false);
      0;
      const o = Y.useCallback(() => {
        n(t ? Xp : e.entity);
        ig(e.uiTag);
      }, [n, t, e.entity, e.uiTag]);
      const r = !s && e.locked;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: e.uiTag,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Infoviews.INFOVIEW, {
            hash: e.id
          }),
          locked: r,
          requirements: e.requirements,
          direction: "up",
          alignment: "end",
          children: z.jsx(Lh, {
            onFocusChange: a,
            children: z.jsxs("div", {
              className: H4.container,
              children: [z.jsx(LT, {
                action: "Select",
                active: i && !e.locked,
                theme: W4
              }), z.jsx($_, {
                disableHint: true,
                focusKey: e.id,
                src: e.icon ?? "Media/Placeholder.svg",
                disabled: r,
                selected: t,
                theme: H4,
                onSelect: o,
                className: Qu()(H4.item, r && H4.locked),
                children: r && (0, z.jsx)(kX, {
                  className: H4.lock
                })
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/infoviews-button/infoview-button.tsx", {
      get InfoviewButton() {
        return z4;
      },
      set InfoviewButton(e) {
        z4 = e;
      }
    });
    let Y4 = {
      "infoview-menu": "infoview-menu_LhU",
      infoviewMenu: "infoview-menu_LhU",
      "menu-column": "menu-column_VJk",
      menuColumn: "menu-column_VJk",
      menu: "menu_O_M",
      content: "content_Hzl",
      row: "row_B8G",
      "close-hint": "close-hint_K02",
      closeHint: "close-hint_K02"
    };
    X.add("game-ui/game/components/infoviews/infoview-menu.module.scss", {
      get classes() {
        return Y4;
      },
      set classes(e) {
        Object.assign(Y4, e);
      }
    });
    const q4 = new Tg("INFOVIEWS");
    const X4 = new Tg("ACTIVE_INFOVIEW");
    var Q4 = ({
      className: e,
      onClose: t
    }) => {
      const n = sl(Zp);
      0;
      const s = Y.useCallback(() => {
        if (null != n) {
          ef(Xp);
        } else {
          t();
        }
      }, [n, t]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(kg, {
        onAction: s,
        children: z.jsx(ip, {
          focused: null != n ? X4 : q4,
          children: z.jsxs("div", {
            className: Qu()(Y4.infoviewMenu, e),
            children: [z.jsx(Z4, {
              focusKey: q4
            }), z.jsx(py, {
              in: null != n,
              children: z.jsx(V4, {
                focusKey: X4,
                onClose: tf
              })
            })]
          })
        })
      });
    };
    const Z4 = ({
      focusKey: e,
      className: t
    }) => {
      const n = km();
      0;
      const [s, i] = Y.useState(false);
      Kp(!s || !n);
      ag(dT.value?.infoviewsMenu);
      og(dT.value?.infoviewsMenu);
      const a = sl(Qp);
      const o = sl(Zp);
      const r = o?.id ?? null;
      0;
      const [l, c] = Y.useState(r);
      0;
      Y.useEffect(() => {
        if (null != r) {
          c(r);
        }
      }, [r]);
      const u = a.reduce((e, t) => (e[t.group] || (e[t.group] = []), e[t.group].push(t), e), []);
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.infoviewsMenu,
        children: z.jsx(ZT, {
          focusKey: e,
          transitionSounds: lp,
          className: Qu()(Y4.menu, t),
          contentClassName: Y4.content,
          showCloseHint: true,
          hintClassName: Y4.closeHint,
          children: z.jsx(Lh, {
            onFocusChange: i,
            children: z.jsx(Xg, {
              allowLooping: true,
              focused: l,
              onChange: c,
              onRefocus: Qg,
              direction: Mg.Vertical,
              children: u.map((e, t) => (0, z.jsx)(J4, {
                infoviews: e,
                activeId: r
              }, t))
            })
          })
        })
      });
    };
    const J4 = ({
      infoviews: e,
      activeId: t
    }) => (0, z.jsx)(ep, {
      allowLooping: true,
      direction: Mg.Horizontal,
      children: (0, z.jsx)("div", {
        className: Y4.row,
        children: e.map(e => (0, z.jsx)(z4, {
          infoview: e,
          selected: e.id === t,
          onSelect: ef
        }, e.id))
      })
    });
    var e6 = ({
      className: e,
      onSelect: t
    }) => {
      const n = sl(Qp);
      const s = sl(Zp);
      const i = s?.id ?? null;
      0;
      const [a, o] = Y.useState(i);
      const r = n.filter(e => e.editor).map(e => (0, z.jsx)(z4, {
        infoview: e,
        selected: e.id === i,
        onSelect: t,
        bypassLocking: true
      }, e.id));
      return 0 === r.length ? null : (0, z.jsx)(ZT, {
        transitionSounds: lp,
        className: e,
        contentClassName: Y4.content,
        allowFocusExit: true,
        showCloseHint: true,
        children: (0, z.jsx)(Xg, {
          focused: a,
          onChange: o,
          direction: Mg.Horizontal,
          children: (0, z.jsx)(ab, {
            horizontal: true,
            vertical: false,
            children: (0, z.jsx)("div", {
              className: Y4.row,
              children: r
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/infoviews/infoview-menu.tsx", {
      get InfoviewMenu() {
        return Q4;
      },
      set InfoviewMenu(e) {
        Q4 = e;
      },
      get EditorInfoviewMenu() {
        return e6;
      },
      set EditorInfoviewMenu(e) {
        e6 = e;
      }
    });
    let t6 = {
      itemHeight: "30rem",
      hierarchy: "hierarchy_vuK",
      item: "item_Ksl",
      "item-label": "item-label_GTI",
      itemLabel: "item-label_GTI",
      "arrow-container": "arrow-container_Mio",
      arrowContainer: "arrow-container_Mio",
      arrow: "arrow_wix",
      expanded: "expanded_YQt",
      bullet: "bullet_B3F",
      title: "title_THo",
      placeholder: "placeholder_bdR",
      actions: "actions_Qtv",
      "action-button": "action-button_irO item-states_QjV",
      actionButton: "action-button_irO item-states_QjV"
    };
    X.add("game-ui/editor/components/hierarchy/hierarchy.module.scss", {
      get classes() {
        return t6;
      },
      set classes(e) {
        Object.assign(t6, e);
      }
    });
    var s6 = ({
      className: e
    }) => {
      const t = sl(ZZ);
      const n = GK(Gm(t6.itemHeight), t, 10);
      const s = sl(eJ);
      const i = sl(JZ);
      const a = function (e, t) {
        const n = e.items.findIndex(e => dJ(e.id, t));
        return -1 !== n ? e.startIndex + n : null;
      }(s, i);
      0;
      const o = Y.useCallback(e => {
        const t = e - s.startIndex;
        if (t >= 0 && t < s.items.length) {
          const n = s.items[t];
          0;
          return z.jsx(i6, {
            index: e,
            data: n,
            selected: dJ(n.id, i),
            onSelect: sJ,
            onToggleExpanded: iJ
          }, e);
        }
        0;
        return z.jsx(a6, {}, e);
      }, [i, s.items, s.startIndex]);
      0;
      const r = Y.useCallback((e, t) => {
        nJ(e, t);
      }, []);
      0;
      0;
      return z.jsx(ep, {
        direction: Mg.Vertical,
        initialFocused: a,
        children: z.jsx(FK, {
          className: Qu()(t6.hierarchy, e),
          sizeProvider: n,
          renderItem: o,
          onRenderedRangeChange: r
        })
      });
    };
    const i6 = ({
      index: e,
      data: t,
      selected: n,
      onSelect: s,
      onToggleExpanded: i
    }) => {
      const a = km();
      0;
      const o = Y.useCallback(() => {
        if (t.selectable || a) {
          s(t.id);
        } else if (t.expandable) {
          i(t.id, !t.expanded);
        }
      }, [t.expandable, t.expanded, t.id, t.selectable, a, s, i]);
      0;
      const r = Y.useCallback(() => {
        i(t.id, !t.expanded);
        rp(op.expandPanel);
      }, [t.expanded, t.id, i]);
      0;
      const l = Y.useMemo(() => ({
        [t.expanded ? "Collapse Group" : "Expand Group"]: t.expandable ? r : null
      }), [t.expanded, t.expandable, r]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: Qu()(t6.item, {
          [t6.expanded]: t.expanded,
          selected: n
        }),
        style: {
          "--level": t.level
        },
        onClick: o,
        children: z.jsx(ep, {
          direction: Mg.Horizontal,
          focusKey: e,
          children: z.jsx(Lg, {
            actions: l,
            children: z.jsx(bg, {
              tooltip: z.jsx(hu, {
                value: t.tooltip
              }),
              children: z.jsxs(L_, {
                className: t6.itemLabel,
                selected: n,
                onSelect: o,
                children: [t.expandable ? (0, z.jsx)("div", {
                  className: t6.arrowContainer,
                  children: (0, z.jsx)("img", {
                    src: "Media/Editor/HierarchyExpand.svg",
                    className: t6.arrow,
                    onClick: r
                  })
                }) : (0, z.jsx)("img", {
                  src: "Media/Editor/HierarchyNode.svg",
                  className: t6.bullet
                }), z.jsx("div", {
                  className: t6.title,
                  children: z.jsx(hu, {
                    value: t.name
                  })
                })]
              })
            })
          })
        })
      });
    };
    const a6 = () => (0, z.jsx)("div", {
      className: t6.placeholder
    });
    X.add("game-ui/editor/components/hierarchy/hierarchy.tsx", {
      get Hierarchy() {
        return s6;
      },
      set Hierarchy(e) {
        s6 = e;
      }
    });
    let o6 = {
      panel: "panel_Qoc",
      content: "content_taQ",
      hierarchy: "hierarchy_QwS"
    };
    X.add("game-ui/editor/components/hierarchy/hierarchy-panel.module.scss", {
      get classes() {
        return o6;
      },
      set classes(e) {
        Object.assign(o6, e);
      }
    });
    var l6 = ({
      onClose: e,
      forceExpanded: t
    }) => (0, z.jsx)(bp, {
      disabled: false === t,
      children: (0, z.jsx)(kg, {
        onAction: e,
        children: (0, z.jsx)(aT, {
          uiTag: dT.value?.workspaceTitleBar,
          editor: true,
          children: (0, z.jsx)(d1, {
            theme: h1,
            headerText: (0, z.jsx)(Pc.Editor.WORKSPACE, {}),
            className: o6.panel,
            contentClassName: o6.content,
            onClose: e,
            allowFocusExit: true,
            expanded: t,
            children: (0, z.jsx)(s6, {
              className: o6.hierarchy
            })
          })
        })
      })
    });
    X.add("game-ui/editor/components/hierarchy/hierarchy-panel.tsx", {
      get HierarchyPanel() {
        return l6;
      },
      set HierarchyPanel(e) {
        l6 = e;
      }
    });
    let c6 = {
      minWidth: "200rem",
      maxWidth: "500rem",
      "top-panel-row": "top-panel-row_NFs",
      topPanelRow: "top-panel-row_NFs",
      "top-panel-column": "top-panel-column_zGK",
      topPanelColumn: "top-panel-column_zGK",
      "infoview-menu": "infoview-menu_CKL",
      infoviewMenu: "infoview-menu_CKL",
      "infoview-panel-transition-wrapper": "infoview-panel-transition-wrapper_mRB",
      infoviewPanelTransitionWrapper: "infoview-panel-transition-wrapper_mRB",
      enter: "enter_y8_",
      "exit-active": "exit-active_vMy",
      exitActive: "exit-active_vMy",
      "enter-active": "enter-active_wJ0",
      enterActive: "enter-active_wJ0",
      exit: "exit_AML",
      "active-infoview-menu": "active-infoview-menu_ds8",
      activeInfoviewMenu: "active-infoview-menu_ds8",
      "action-hints": "action-hints_Ttj",
      actionHints: "action-hints_Ttj"
    };
    X.add("game-ui/editor/components/editor-top-panels.module.scss", {
      get classes() {
        return c6;
      },
      set classes(e) {
        Object.assign(c6, e);
      }
    });
    var d6 = ({
      onExitInfoviewFocus: e
    }) => {
      const t = sl(Zp);
      0;
      const n = Y.useCallback(() => {
        ef(Xp);
      }, []);
      0;
      const s = Y.useCallback(e => {
        ef(e);
      }, []);
      const i = Gm(c6.minWidth);
      const a = Gm(c6.maxWidth);
      const o = sl(QZ);
      const r = Vm();
      0;
      const l = Y.useCallback(e => tJ(Math.round(e / r)), [r]);
      const c = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: c6.topPanelRow,
        children: [z.jsxs(v5, {
          width: o * r,
          minWidth: i,
          maxWidth: a,
          direction: "right",
          onResize: l,
          className: c6.topPanelColumn,
          children: [z.jsx(kg, {
            onAction: e,
            children: z.jsxs(ep, {
              focusKey: Hpe,
              children: [z.jsx(aT, {
                uiTag: dT.value?.editorInfoViewsPanel,
                editor: true,
                children: z.jsx(e6, {
                  className: c6.infoviewMenu,
                  onSelect: s
                })
              }), z.jsx(py, {
                in: null !== t,
                children: z.jsx(gy, {
                  styles: c6,
                  children: z.jsx("div", {
                    className: c6.infoviewPanelTransitionWrapper,
                    children: z.jsx(V4, {
                      className: c6.activeInfoviewMenu,
                      onClose: n,
                      transition: null,
                      scrollable: true,
                      allowFocusExit: true
                    })
                  })
                })
              })]
            })
          }), z.jsx(l6, {
            forceExpanded: null === t && undefined
          })]
        }), z.jsx(fT, {
          disabled: !c,
          className: c6.actionHints,
          excludedActions: pT
        })]
      });
    };
    function m6(e = false) {
      0;
      Y.useEffect(() => {
        if (!e) {
          const e = () => {};
          const t = OO.subscribe(e);
          return () => {
            t?.dispose();
          };
        }
      }, [e]);
    }
    X.add("game-ui/editor/components/editor-top-panels.tsx", {
      get EditorTopPanels() {
        return d6;
      },
      set EditorTopPanels(e) {
        d6 = e;
      }
    });
    X.add("game-ui/common/hooks/use-simulation-paused-barrier.tsx", {
      get useSimulationPausedBarrier() {
        return m6;
      },
      set useSimulationPausedBarrier(e) {
        m6 = e;
      }
    });
    var h6 = ({
      ...e
    }) => (0, z.jsx)($_, {
      ...e,
      tinted: true,
      theme: AI
    });
    X.add("game-ui/common/input/button/floating-icon-button.tsx", {
      get FloatingIconButton() {
        return h6;
      },
      set FloatingIconButton(e) {
        h6 = e;
      }
    });
    var g6;
    var p6;
    var f6;
    var x6 = "tooltip";
    var v6 = $r(x6, "groups", []);
    !function (e) {
      e[e.Start = 0] = "Start";
      e[e.Center = 1] = "Center";
      e[e.End = 2] = "End";
    }(g6 || (g6 = {}));
    (function (e) {
      e[e.Info = 0] = "Info";
      e[e.Success = 1] = "Success";
      e[e.Warning = 2] = "Warning";
      e[e.Error = 3] = "Error";
    })(p6 || (p6 = {}));
    (function (e) {
      e.Number = "Game.UI.Tooltip.NumberTooltip";
      e.Progress = "Game.UI.Tooltip.ProgressTooltip";
      e.String = "Game.UI.Tooltip.StringTooltip";
      e.Name = "Game.UI.Tooltip.NameTooltip";
      e.Notification = "Game.UI.Tooltip.NotificationTooltip";
      e.ZoningEvaluation = "Game.UI.Tooltip.ZoningEvaluationTooltip";
      e.InputHint = "Game.UI.Tooltip.InputHintTooltip";
    })(f6 || (f6 = {}));
    X.add("game-ui/common/data-binding/tooltip-bindings.ts", {
      get tooltipGroup() {
        return x6;
      },
      set tooltipGroup(e) {
        x6 = e;
      },
      get tooltipGroups() {
        return tooltipGroups;
      },
      set tooltipGroups(e) {
        tooltipGroups = e;
      },
      get TooltipGroupAlignment() {
        return g6;
      },
      set TooltipGroupAlignment(e) {
        g6 = e;
      },
      get TooltipColor() {
        return p6;
      },
      set TooltipColor(e) {
        p6 = e;
      },
      get TooltipType() {
        return f6;
      },
      set TooltipType(e) {
        f6 = e;
      }
    });
    let _6 = {
      showDelay: "100ms",
      "group-container": "group-container_Fl2 tooltip-fade-in_S9n",
      groupContainer: "group-container_Fl2 tooltip-fade-in_S9n",
      group: "group_zcS",
      gamepad: "gamepad_kHF",
      item: "item_k3Z tooltip-base_zwi",
      "row-item": "row-item_oHU item_k3Z tooltip-base_zwi",
      rowItem: "row-item_oHU item_k3Z tooltip-base_zwi",
      icon: "icon_Blg",
      "score-indicator": "score-indicator_i6X",
      scoreIndicator: "score-indicator_i6X",
      positive: "positive_Uf2",
      negative: "negative_pRC",
      label: "label_zet",
      value: "value_uLz",
      success: "success_bHA",
      warning: "warning_e1p",
      error: "error_NkQ",
      paragraphs: "paragraphs_LK4",
      hint: "hint_l_F",
      "hint-label": "hint-label_c1x",
      hintLabel: "hint-label_c1x"
    };
    X.add("game-ui/common/tooltip/tooltip-renderer/tooltip-renderer.module.scss", {
      get classes() {
        return _6;
      },
      set classes(e) {
        Object.assign(_6, e);
      }
    });
    const T6 = parseInt(_6.showDelay);
    const E6 = [false, null];
    var I6 = ({
      disabled: e
    }) => {
      0;
      const [t, n] = Y.useState(v6.value);
      const s = Fm();
      const i = nM(x6);
      0;
      const a = Y.useCallback(e => {
        n(t => {
          const [n, s] = function (e, t) {
            if (e.length !== t.length) {
              return E6;
            }
            const n = [];
            for (let s = 0; s < e.length; s++) {
              const i = e[s];
              const a = t[s];
              if (!Kr(i.props, a.props, 2)) {
                if (i.children.length !== a.children.length) {
                  return E6;
                }
                if (!Kr(i.children, a.children, 4)) {
                  return E6;
                }
                if (!Kr({
                  ...i.props,
                  position: undefined
                }, {
                  ...a.props,
                  position: undefined
                }, 4)) {
                  return E6;
                }
                n.push(t[s]);
              }
            }
            return n.length !== e.length ? E6 : [true, n];
          }(t, e);
          if (n) {
            if (null !== s) {
              for (let e = 0; e < s.length; e++) {
                const n = s[e];
                const i = document.querySelector(`#tooltip-${e}`);
                if (i) {
                  i.style.transform = `translate(${n.props.position.x}px, ${n.props.position.y}px)`;
                } else {
                  const e = t.find(e => e.path === n.path);
                  if (e) {
                    e.props.position = n.props.position;
                  }
                }
              }
            }
            return t;
          }
          return e;
        });
      }, []);
      ol(v6, a);
      0;
      return z.jsx(z.Fragment, {
        children: !e && t.map((e, t) => function (e, t) {
          return e.x > -.1 * t.x && e.x < 1.1 * t.x && e.y > -.1 * t.y && e.y < 1.1 * t.y;
        }(e.props.position, s) ? (0, z.jsx)(y6, {
          parent: i,
          indexId: t,
          ...e
        }, e.path) : undefined)
      });
    };
    var y6 = ({
      parent: e,
      path: t,
      props: n,
      children: s,
      indexId: i
    }) => {
      const a = sM(e, t);
      0;
      const [o, r] = Y.useState(false);
      const l = km();
      0;
      const c = Y.useMemo(() => o ? {
        container: {
          transform: `translate(${n.position.x}px, ${n.position.y}px)`,
          justifyContent: S6(n.verticalAlignment),
          alignItems: S6(n.horizontalAlignment)
        },
        group: {
          alignItems: S6(n.horizontalAlignment)
        }
      } : {}, [n, o]);
      0;
      Y.useEffect(() => fW(() => r(true), T6), []);
      return o ? (0, z.jsx)("div", {
        id: `tooltip-${i}`,
        className: _6.groupContainer,
        style: c.container,
        children: (0, z.jsx)("div", {
          className: Qu()(_6.group, l && _6.gamepad),
          style: c.group,
          children: (0, z.jsx)(mM, {
            parent: a,
            components: O6,
            data: s
          })
        })
      }) : null;
    };
    function S6(e) {
      switch (e) {
        case g6.Start:
          return "flex-start";
        case g6.Center:
          return "center";
        case g6.End:
          return "flex-end";
        default:
          return "center";
      }
    }
    const j6 = {
      hint: _6.hint,
      label: _6.hintLabel
    };
    function C6(e) {
      return e > 0 ? "+" : e < 0 ? "−" : "±";
    }
    const N6 = ({
      icon: e,
      label: t,
      color: n = p6.Info,
      className: s,
      children: i
    }) => (0, z.jsxs)("div", {
      className: Qu()(_6.rowItem, s),
      children: [e && (0, z.jsx)("img", {
        src: e,
        className: _6.icon
      }), t && (0, z.jsx)("div", {
        className: _6.label,
        children: (0, z.jsx)(hu, {
          value: t
        })
      }), (0, z.jsx)("div", {
        className: Qu()(_6.value, w6[n]),
        children: i
      })]
    });
    const w6 = [undefined, _6.success, _6.warning, _6.error];
    var O6 = {
      [f6.Number]: P6(({
        value: e,
        unit: t,
        signed: n,
        ...s
      }) => (0, z.jsx)(N6, {
        ...s,
        children: (0, z.jsx)(Gc, {
          value: e,
          unit: t,
          signed: n
        })
      })),
      [f6.Progress]: P6(({
        value: e,
        max: t,
        unit: n,
        omitMax: s,
        ...i
      }) => {
        const a = !s || e !== t;
        0;
        return z.jsx(N6, {
          ...i,
          children: a ? (0, z.jsx)(cu, {
            value: e,
            total: t,
            unit: n
          }) : (0, z.jsx)(Gc, {
            value: e,
            unit: n
          })
        });
      }),
      [f6.String]: P6(({
        value: e,
        ...t
      }) => (0, z.jsx)(N6, {
        ...t,
        children: (0, z.jsx)(bb, {
          className: _6.paragraphs,
          children: (0, z.jsx)(hu, {
            value: e
          })
        })
      })),
      [f6.Name]: P6(({
        icon: e,
        name: t
      }) => (0, z.jsx)(N6, {
        icon: e,
        children: (0, z.jsx)(Hu, {
          value: t
        })
      })),
      [f6.Notification]: P6(({
        name: e,
        color: t,
        verbose: n
      }) => n ? (0, z.jsx)("div", {
        className: _6.item,
        children: (0, z.jsx)(Yq, {
          title: (0, z.jsx)(Pc.Notifications.TITLE, {
            hash: e
          }),
          description: (0, z.jsx)(Pc.Notifications.DESCRIPTION, {
            hash: e
          })
        })
      }) : (0, z.jsx)(N6, {
        color: t,
        children: (0, z.jsx)(Pc.Notifications.TITLE, {
          hash: e
        })
      })),
      [f6.ZoningEvaluation]: P6(({
        factor: e,
        score: t
      }) => (0, z.jsxs)("div", {
        className: _6.rowItem,
        children: [(0, z.jsx)("div", {
          className: Qu()(_6.scoreIndicator, t >= 0 ? _6.positive : _6.negative),
          children: t > 0 ? "+" : t < 0 ? "−" : "±"
        }), (0, z.jsx)("div", {
          className: _6.value,
          children: t >= 0 ? (0, z.jsx)(Pc.ZoningFactors.POSITIVE, {
            hash: e
          }) : (0, z.jsx)(Pc.ZoningFactors.NEGATIVE, {
            hash: e
          })
        })]
      })),
      [f6.InputHint]: P6(({
        hint: e
      }) => e ? (0, z.jsx)("div", {
        className: _6.rowItem,
        children: (0, z.jsx)(yT, {
          bindings: e.items[0].bindings,
          modifiers: e.items[0].modifiers,
          theme: j6,
          children: (0, z.jsx)("span", {
            className: j6.label,
            children: (0, z.jsx)(Pc.Common.ACTION, {
              hash: e.name,
              showIdOnFail: true
            })
          })
        })
      }, e.name) : null)
    };
    function P6(e) {
      const n = ({
        props: e
      }) => (0, z.jsx)(e, {
        ...e
      });
      n.displayName = e.displayName ?? e.name;
      return n;
    }
    X.add("game-ui/common/tooltip/tooltip-renderer/tooltip-renderer.tsx", {
      get TooltipRenderer() {
        return I6;
      },
      set TooltipRenderer(e) {
        I6 = e;
      },
      get BoundTooltipGroup() {
        return y6;
      },
      set BoundTooltipGroup(e) {
        y6 = e;
      },
      get tooltipComponents() {
        return O6;
      },
      set tooltipComponents(e) {
        O6 = e;
      }
    });
    let L6 = {
      base: "base_USz",
      enter: "enter_HYB",
      "exit-active": "exit-active_hp7",
      exitActive: "exit-active_hp7",
      "enter-active": "enter-active_fw8",
      enterActive: "enter-active_fw8",
      exit: "exit_N8B"
    };
    X.add("game-ui/menu/transitions/expand-fade.module.scss", {
      get classes() {
        return L6;
      },
      set classes(e) {
        Object.assign(L6, e);
      }
    });
    let M6 = {
      base: "base_mxi",
      enter: "enter_H6J",
      "exit-active": "exit-active_jeC",
      exitActive: "exit-active_jeC",
      "enter-active": "enter-active_YSl",
      enterActive: "enter-active_YSl",
      exit: "exit_OM8",
      "achievements-warning-row": "achievements-warning-row_p2C",
      achievementsWarningRow: "achievements-warning-row_p2C",
      "achievements-warning": "achievements-warning_Gp9",
      achievementsWarning: "achievements-warning_Gp9",
      space: "space_qhY"
    };
    X.add("game-ui/menu/components/shared/game-options/achievements-warning.module.scss", {
      get classes() {
        return M6;
      },
      set classes(e) {
        Object.assign(M6, e);
      }
    });
    var k6 = ({
      modsEnabled: e = false,
      pastModsEnabled: t = false,
      unlockAll: n = false,
      unlimitedMoney: s = false,
      unlockMapTiles: i = false
    }) => (0, z.jsx)(py, {
      in: e || t || n || s || i,
      children: (0, z.jsx)(gy, {
        styles: M6,
        children: (0, z.jsxs)("div", {
          className: M6.achievementsWarningRow,
          children: [(0, z.jsx)(D6, {
            modsEnabled: e,
            pastModsEnabled: t,
            unlimitedMoney: s,
            unlockAll: n,
            unlockMapTiles: i,
            autoHide: false
          }), (0, z.jsx)("div", {
            className: M6.space
          })]
        })
      })
    });
    var D6 = ({
      modsEnabled: e,
      pastModsEnabled: t,
      unlockAll: n,
      unlimitedMoney: s,
      unlockMapTiles: i,
      className: a,
      autoHide: o = true,
      loadGame: r = false
    }) => {
      const l = sl(SE);
      const c = !!(n || s || i);
      if (o && !e && !t && !c) {
        return null;
      }
      const u = F6(e, !!t, c, r, l);
      0;
      return z.jsx("div", {
        className: Qu()(M6.achievementsWarning, a),
        children: u
      });
    };
    const F6 = (e, t, n, s, i) => e ? 0 != (i & pE.PS) ? (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_MODS_PS, {}) : (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_MODS, {}) : t ? 0 != (i & pE.PS) ? (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_PAST_MODS_PS, {}) : (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_PAST_MODS, {}) : s ? 0 != (i & pE.PS) ? (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_PAST_OPTIONS_PS, {}) : (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_PAST_OPTIONS, {}) : 0 != (i & pE.PS) ? (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_GAME_OPTIONS_PS, {}) : (0, z.jsx)(Pc.Menu.ACHIEVEMENTS_WARNING_GAME_OPTIONS, {});
    X.add("game-ui/menu/components/shared/game-options/achievements-warning.tsx", {
      get AchievementsWarning() {
        return k6;
      },
      set AchievementsWarning(e) {
        k6 = e;
      },
      get AchievementsWarningBanner() {
        return D6;
      },
      set AchievementsWarningBanner(e) {
        D6 = e;
      }
    });
    let U6 = {
      buttons: "buttons_vR9",
      button: "button_GlF"
    };
    X.add("game-ui/menu/components/shared/game-options/button/buttons-row.module.scss", {
      get classes() {
        return U6;
      },
      set classes(e) {
        Object.assign(U6, e);
      }
    });
    var G6 = ({
      buttons: e,
      onSelect: t
    }) => (0, z.jsx)("div", {
      className: U6.buttons,
      children: e.map(e => (0, z.jsx)(V6, {
        item: e,
        onSelect: t
      }, e.id))
    });
    const V6 = ({
      item: e,
      onSelect: t
    }) => {
      0;
      const n = Y.useContext(lE);
      0;
      const s = Y.useContext(tQ);
      0;
      const i = Y.useCallback(() => s.onOptionMouseEnter(e.id), [e.id, s]);
      0;
      const a = Y.useCallback(() => s.onOptionMouseLeave(e.id), [e.id, s]);
      0;
      const o = Y.useCallback(() => t(e.id), [e.id, t]);
      0;
      const r = Y.useCallback(() => {
        if (e.confirm) {
          0;
          0;
          0;
          n.showDialog(z.jsx(LI, {
            title: z.jsx(Pc.Common.WARNING, {}),
            message: z.jsx(Pc.Options.WARNING, {
              hash: e.id
            }),
            onConfirm: o
          }));
        } else {
          t(e.id);
        }
      }, [n, o, e.confirm, e.id, t]);
      0;
      0;
      return z.jsx(L_, {
        focusKey: e.id,
        disabled: e.disabled,
        theme: nQ,
        className: U6.button,
        onSelect: r,
        onMouseEnter: i,
        onMouseLeave: a,
        children: z.jsx(Pc.Options.OPTION, {
          hash: e.id
        })
      });
    };
    X.add("game-ui/menu/components/shared/game-options/button/buttons-row.tsx", {
      get ButtonRow() {
        return G6;
      },
      set ButtonRow(e) {
        G6 = e;
      }
    });
    let H6 = {
      field: "field_zMw",
      header: "header__eC",
      icon: "icon_Aag",
      label: "label_aUL",
      content: "content_KQe",
      "value-icon": "value-icon_BcL",
      valueIcon: "value-icon_BcL"
    };
    X.add("game-ui/common/property-field/themes/resource-field.module.scss", {
      get classes() {
        return H6;
      },
      set classes(e) {
        Object.assign(H6, e);
      }
    });
    var W6 = Y.createContext(H6);
    var z6 = ({
      valueIcon: e,
      icon: t,
      tinted: n,
      label: s,
      theme: i,
      focusable: a = false,
      className: o,
      children: r
    }) => {
      0;
      const l = Y.useContext(W6);
      const c = i ?? l;
      0;
      0;
      0;
      return z.jsx(fd, {
        children: z.jsxs(Ep, {
          focusKey: a ? Ig : Eg,
          className: Qu()(c.field, o),
          children: [(t || s) && (0, z.jsxs)("div", {
            className: c.header,
            children: [t && (n ? (0, z.jsx)(W_, {
              src: t,
              className: c.icon
            }) : (0, z.jsx)("img", {
              src: t,
              className: c.icon
            })), s && (0, z.jsx)("div", {
              className: c.label,
              children: s
            })]
          }), z.jsxs("div", {
            className: c.content,
            children: [e && (0, z.jsx)("img", {
              src: e,
              className: c.valueIcon
            }), r]
          })]
        })
      });
    };
    X.add("game-ui/common/property-field/property-field.tsx", {
      get PropertyFieldThemeContext() {
        return W6;
      },
      set PropertyFieldThemeContext(e) {
        W6 = e;
      },
      get PropertyField() {
        return z6;
      },
      set PropertyField(e) {
        z6 = e;
      }
    });
    let Y6 = {
      field: "field_xlu",
      header: "header_iiq",
      icon: "icon_lom",
      label: "label_BcU",
      content: "content_q4e"
    };
    X.add("game-ui/menu/components/new-game-screen/map-detail/resource-list-item.module.scss", {
      get classes() {
        return Y6;
      },
      set classes(e) {
        Object.assign(Y6, e);
      }
    });
    var q6 = ({
      selectedMap: e,
      selectedTheme: t,
      activeStep: n,
      className: s,
      onContinue: i,
      onStartGameSelect: a
    }) => {
      const o = km();
      const r = sl(Cv);
      0;
      return z.jsx(bz, {
        className: s,
        title: null != e ? (0, z.jsx)(Pc.Maps.MAP_TITLE, {
          hash: e.displayName,
          fallback: e.displayName
        }) : undefined,
        preview: e?.preview,
        content: null != e ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)("div", {
            className: vz.description,
            children: (0, z.jsx)(Pc.Maps.MAP_DESCRIPTION, {
              hash: e.displayName,
              fallback: ""
            })
          }), null != t && (0, z.jsxs)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.THEME_LABEL, {}),
            children: [(0, z.jsx)(iW, {
              src: t.icon,
              className: vz.themeIcon
            }), (0, z.jsx)(Pc.Assets.THEME, {
              hash: t.id
            })]
          }), (0, z.jsxs)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.CLIMATE_LABEL, {}),
            children: [(0, z.jsx)("img", {
              src: X6(e.cloudiness, e.precipitation),
              className: vz.humidityIcon
            }), (0, z.jsx)(au, {
              ...e.temperatureRange,
              unit: Oc.Temperature
            })]
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.LATITUDE_LABEL, {}),
            children: Q6(e.latitude)
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.BUILDABLE_AREA_LABEL, {}),
            children: (0, z.jsx)(Gc, {
              value: Math.round(e.area > 0 ? e.buildableLand / e.area * 100 : 0),
              unit: Oc.Percentage
            })
          }), (0, z.jsxs)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.CONNECTIONS_LABEL, {}),
            children: [e.connections.road && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.OUTSIDE_CONNECTIONS, {
                hash: "Road"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Roads.svg",
                theme: Y6
              })
            }), e.connections.train && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.OUTSIDE_CONNECTIONS, {
                hash: "Train"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Train.svg",
                theme: Y6
              })
            }), e.connections.ship && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.OUTSIDE_CONNECTIONS, {
                hash: "Ship"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Ship.svg",
                theme: Y6
              })
            }), e.connections.air && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.OUTSIDE_CONNECTIONS, {
                hash: "Air"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Airplane.svg",
                theme: Y6
              })
            }), e.connections.electricity && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.OUTSIDE_CONNECTIONS, {
                hash: "Electricity"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Electricity.svg",
                theme: Y6
              })
            }), e.connections.water && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.OUTSIDE_CONNECTIONS, {
                hash: "Water"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Water.svg",
                theme: Y6
              })
            })]
          }), (0, z.jsxs)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.RESOURCES_LABEL, {}),
            children: [e.resources.fertile >= .1 && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.RESOURCE, {
                hash: "Fertility"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Fertility.svg",
                theme: Y6,
                children: (0, z.jsx)(Gc, {
                  value: e.resources.fertile,
                  unit: Oc.Area
                })
              })
            }), e.resources.forest >= .1 && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.RESOURCE, {
                hash: "Forest"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Forest.svg",
                theme: Y6,
                children: (0, z.jsx)(Gc, {
                  value: e.resources.forest,
                  unit: Oc.Weight
                })
              })
            }), e.resources.ore >= .1 && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.RESOURCE, {
                hash: "Ore"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Ore.svg",
                theme: Y6,
                children: (0, z.jsx)(Gc, {
                  value: e.resources.ore,
                  unit: Oc.Weight
                })
              })
            }), e.resources.oil >= .1 && (0, z.jsx)(bg, {
              tooltip: (0, z.jsx)(Pc.Maps.RESOURCE, {
                hash: "Oil"
              }),
              children: (0, z.jsx)(z6, {
                icon: "Media/Game/Icons/Oil.svg",
                theme: Y6,
                children: (0, z.jsx)(Gc, {
                  value: e.resources.oil,
                  unit: Oc.Weight
                })
              })
            })]
          })]
        }) : undefined,
        footer: null == e || o ? undefined : n === o8.mapSelection ? (0, z.jsx)(Ez, {
          onSelect: i,
          children: (0, z.jsx)(Pc.Menu.SELECT_MAP_BUTTON, {})
        }) : (0, z.jsx)(Ez, {
          onSelect: a,
          disabled: !r,
          children: (0, z.jsx)(Pc.Menu.START_GAME_BUTTON, {})
        })
      }, e?.id);
    };
    function X6(e, t) {
      const n = .25 * e + .75 * t;
      return n < .1 ? "Media/Game/Icons/Arid.svg" : n < .15 ? "Media/Game/Icons/SemiArid.svg" : n < .2 ? "Media/Game/Icons/SemiHumid.svg" : "Media/Game/Icons/Humid.svg";
    }
    function Q6(e) {
      return e > 15 ? (0, z.jsx)(Pc.GameListScreen.HEMISPHERE_N, {}) : e < -15 ? (0, z.jsx)(Pc.GameListScreen.HEMISPHERE_S, {}) : (0, z.jsx)(Pc.GameListScreen.EQUATOR, {});
    }
    X.add("game-ui/menu/components/new-game-screen/map-detail/map-detail.tsx", {
      get MapDetail() {
        return q6;
      },
      set MapDetail(e) {
        q6 = e;
      }
    });
    let Z6 = {
      item: "item_6bQ",
      locked: "locked_llh",
      thumbnail: "thumbnail_jir",
      "theme-icon": "theme-icon__ST",
      themeIcon: "theme-icon__ST",
      "thumbnail-container": "thumbnail-container_JcP",
      thumbnailContainer: "thumbnail-container_JcP",
      vignette: "vignette_Gss",
      title: "title_DFa",
      "state-icon": "state-icon_Owl",
      stateIcon: "state-icon_Owl",
      prerequisites: "prerequisites_zXb",
      prerequisite: "prerequisite_sTj",
      hint: "hint_TVt"
    };
    X.add("game-ui/menu/components/new-game-screen/map-grid/map-item.module.scss", {
      get classes() {
        return Z6;
      },
      set classes(e) {
        Object.assign(Z6, e);
      }
    });
    var e8 = ({
      map: e,
      locked: t,
      selected: n,
      onClick: s
    }) => {
      0;
      const i = Y.useCallback(() => s(e.id), [e.id, s]);
      const a = nY(e.cloudTarget, false) ?? "";
      const o = tY(e.cloudTarget);
      0;
      const [r, l] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: l,
        children: z.jsxs(L_, {
          disableHint: true,
          focusKey: e.id,
          selected: n,
          className: Qu()(Z6.item, t && Z6.locked),
          onClick: i,
          children: [z.jsxs("div", {
            className: Z6.thumbnailContainer,
            children: [z.jsx(B_, {
              src: e.thumbnail,
              className: Z6.thumbnail
            }), z.jsx("div", {
              className: Z6.vignette
            }), z.jsx(LT, {
              action: "Select",
              active: r,
              className: Z6.hint
            })]
          }), z.jsx("div", {
            className: Z6.title,
            children: z.jsx(Pc.Maps.MAP_TITLE, {
              hash: e.displayName,
              fallback: e.displayName
            })
          }), z.jsx(ky, {
            src: a,
            className: Z6.stateIcon,
            tinted: o
          }), e.contentPrerequisite?.length > 0 && (0, z.jsx)("div", {
            className: Z6.prerequisites,
            children: e.contentPrerequisite.map((e, t) => (0, z.jsx)("img", {
              src: `Media/DLC/${e}.svg`,
              className: Z6.prerequisite
            }, t))
          })]
        })
      });
    };
    X.add("game-ui/menu/components/new-game-screen/map-grid/map-item.tsx", {
      get MapItem() {
        return e8;
      },
      set MapItem(e) {
        e8 = e;
      }
    });
    let t8 = {
      "map-grid": "map-grid_EhO child-opacity-transition_nkS",
      mapGrid: "map-grid_EhO child-opacity-transition_nkS",
      scrollable: "scrollable_Wdh",
      content: "content_V7r",
      header: "header_pAC"
    };
    X.add("game-ui/menu/components/new-game-screen/map-grid/map-grid.module.scss", {
      get classes() {
        return t8;
      },
      set classes(e) {
        Object.assign(t8, e);
      }
    });
    var s8 = Y.forwardRef(function ({
      focusKey: e,
      maps: t,
      filters: n,
      selectedMap: s,
      selectedFilter: i,
      className: a,
      onSelectMap: o,
      onSelectFilter: r
    }, l) {
      0;
      const c = Y.useCallback(e => {
        if ("string" == typeof e) {
          o(e);
        }
      }, [o]);
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        ref: l,
        className: Qu()(t8.mapGrid, a),
        children: z.jsxs(ab, {
          className: t8.scrollable,
          children: [n.length >= 2 && (0, z.jsx)(JW, {
            categories: n,
            selectedCategory: i,
            onSelectCategory: r,
            className: t8.header
          }), z.jsx("div", {
            className: t8.content,
            children: z.jsx(Xg, {
              focusKey: e,
              focused: s,
              onChange: c,
              children: t.map(e => (0, z.jsx)(e8, {
                map: e,
                locked: e.locked,
                selected: e.id === s,
                onClick: o
              }, e.id))
            })
          })]
        })
      });
    });
    X.add("game-ui/menu/components/new-game-screen/map-grid/map-grid.tsx", {
      get MapGrid() {
        return s8;
      },
      set MapGrid(e) {
        s8 = e;
      }
    });
    let i8 = {
      content: "content_bgM",
      "step-container": "step-container_NnT",
      stepContainer: "step-container_NnT",
      step: "step_QIP",
      detail: "detail_OCx",
      header: "header_mQE",
      "no-gamepad": "no-gamepad_nYD",
      noGamepad: "no-gamepad_nYD",
      title: "title_KQ_",
      tabs: "tabs_BJl",
      tab: "tab_COL",
      selected: "selected_s7w"
    };
    X.add("game-ui/menu/components/new-game-screen/new-game-screen.module.scss", {
      get classes() {
        return i8;
      },
      set classes(e) {
        Object.assign(i8, e);
      }
    });
    var o8;
    var r8 = "Assets.CITY_NAME";
    !function (e) {
      e[e.mapSelection = 0] = "mapSelection";
      e[e.mapOptions = 1] = "mapOptions";
    }(o8 || (o8 = {}));
    var l8 = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n
    }, s) {
      0;
      const [i, a] = Y.useState(o8.mapSelection);
      const o = u8();
      0;
      const [r, l] = Y.useState(sw(o, "id"));
      0;
      Y.useEffect(() => {
        if (null !== r && o.findIndex(e => e.id === r) < 0) {
          l(sw(o, "id"));
        }
      }, [o, r]);
      const c = o.find(e => e.id === r) ?? null;
      const u = sl(Ok);
      const d = sl(jk);
      const m = ac();
      const h = d8();
      0;
      const [g, p] = Y.useState("");
      0;
      const [f, x] = Y.useState("");
      0;
      const [v, _] = Y.useState({
        ...d
      });
      const b = u.find(e => e.id === f) ?? null;
      const T = sl(Tk);
      const E = sl(qE);
      const I = sl(Lk);
      const y = sl(Ak);
      0;
      Y.useEffect(() => {
        if (null != c?.theme) {
          x(c?.theme);
        }
      }, [c?.theme]);
      0;
      Y.useEffect(() => {
        if (null != c?.displayName) {
          if (c.nameAsCityName) {
            p(Pc.Maps.MAP_TITLE.renderString(m, {
              hash: c.displayName
            }) ?? h());
          } else {
            p(h());
          }
        }
      }, [h, m, c?.displayName, c?.nameAsCityName]);
      0;
      const S = Y.useCallback(() => {
        if (i === o8.mapOptions) {
          a(o8.mapSelection);
          rp(op.closeMenu);
        } else {
          n();
        }
      }, [i, n]);
      0;
      const j = Y.useCallback(() => {
        a(o8.mapOptions);
        rp(op.openMenu);
      }, []);
      0;
      const C = Y.useCallback(() => {
        Kk(c.id);
      }, [c]);
      const [N, w] = Xk();
      0;
      const O = Y.useCallback(() => {
        if (null != r) {
          qk(N);
          Uk({
            mapId: r,
            cityName: g,
            theme: f,
            options: v
          });
        }
      }, [r, N, g, f, v]);
      0;
      const P = Y.useMemo(() => ({
        Select: i === o8.mapSelection ? () => {
          rp(op.selectItem);
          j();
        } : null,
        "Start Game": i === o8.mapOptions ? () => {
          rp(op.selectItem);
          O();
        } : null,
        "Switch Tab": i === o8.mapSelection && I.length >= 2 ? e => {
          const t = I.indexOf(y);
          sD(t >= 0 ? I[(t + e + I.length) % I.length] : I[0]);
        } : null
      }), [i, I, j, O, y]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(xz, {
        ref: s,
        focusKey: e,
        title: c8(i),
        className: t,
        onClose: S,
        children: z.jsx(Lg, {
          actions: P,
          children: z.jsx(ip, {
            focused: i,
            activation: $u.Always,
            children: z.jsxs("div", {
              className: i8.content,
              children: [z.jsx("div", {
                className: i8.stepContainer,
                children: z.jsxs(cd, {
                  children: [i === o8.mapSelection && (0, z.jsx)(dh, {
                    styles: L6,
                    children: (0, z.jsx)(s8, {
                      focusKey: o8.mapSelection,
                      maps: o,
                      filters: I,
                      selectedMap: r,
                      selectedFilter: y,
                      className: i8.step,
                      onSelectMap: l,
                      onSelectFilter: sD
                    })
                  }, o8.mapSelection), i === o8.mapOptions && (0, z.jsx)(dh, {
                    styles: VZ,
                    children: (0, z.jsx)(B8, {
                      focusKey: o8.mapOptions,
                      cityName: g,
                      theme: f,
                      options: v,
                      className: i8.step,
                      onCityNameChange: p,
                      onThemeChange: x,
                      onOptionsChange: _,
                      tutorialState: N,
                      setTutorialState: w,
                      onShareGame: T || c?.isReadonly || !E ? undefined : C,
                      shareGameLocaleKey: "shareMap"
                    })
                  }, o8.mapOptions)]
                })
              }), z.jsx(q6, {
                selectedMap: c,
                selectedTheme: b,
                activeStep: i,
                className: i8.detail,
                onContinue: j,
                onStartGameSelect: O
              })]
            })
          })
        })
      });
    });
    function c8(e) {
      return e === o8.mapSelection ? (0, z.jsx)(Pc.Menu.NEW_GAME, {}) : e === o8.mapOptions ? (0, z.jsx)(Pc.Menu.MAP_OPTIONS, {}) : null;
    }
    function u8() {
      const e = ac();
      const t = sl(Pk);
      const n = WW();
      0;
      return Y.useMemo(() => t.map(t => ({
        value: t,
        name: Pc.Maps.MAP_TITLE.renderString(e, {
          hash: t.displayName
        })
      })).sort((e, t) => n(e.name, t.name)).map(e => e.value), [e, t, n]);
    }
    function d8() {
      const e = ac();
      const t = ll(xc, r8);
      0;
      return Y.useCallback(n => {
        if (0 === t) {
          return "";
        }
        let s = Math.floor(Math.random() * t);
        let i = Pc.Assets.CITY_NAME.renderString(e, {
          index: s
        });
        if (i === n) {
          s = (s + 1) % t;
          i = Pc.Assets.CITY_NAME.renderString(e, {
            index: s
          });
        }
        return i;
      }, [t, e]);
    }
    X.add("game-ui/menu/components/new-game-screen/new-game-screen.tsx", {
      get cityNameLocId() {
        return r8;
      },
      set cityNameLocId(e) {
        r8 = e;
      },
      get NewGameStep() {
        return o8;
      },
      set NewGameStep(e) {
        o8 = e;
      },
      get NewGameScreen() {
        return l8;
      },
      set NewGameScreen(e) {
        l8 = e;
      },
      get useSortedMaps() {
        return u8;
      },
      set useSortedMaps(e) {
        u8 = e;
      },
      get useCityNameGenerator() {
        return d8;
      },
      set useCityNameGenerator(e) {
        d8 = e;
      }
    });
    let m8 = {
      wrapper: "wrapper_ER5",
      container: "container_AwD",
      input: "input_Hft",
      label: "label_lus"
    };
    X.add("game-ui/menu/themes/menu-input-field.module.scss", {
      get classes() {
        return m8;
      },
      set classes(e) {
        Object.assign(m8, e);
      }
    });
    let g8 = {
      field: "field_amr field_cjf",
      label: "label_VSW label_T__"
    };
    X.add("game-ui/menu/components/shared/game-options/field/row-field.module.scss", {
      get classes() {
        return g8;
      },
      set classes(e) {
        Object.assign(g8, e);
      }
    });
    var f8 = {
      ...P_,
      hover: null,
      focus: null
    };
    var x8 = ({
      id: e,
      label: t,
      theme: n = g8,
      disabled: s,
      className: i,
      children: a,
      onClick: o,
      sound: r = op.selectToggle
    }) => {
      0;
      const l = Y.useContext(tQ);
      0;
      const c = Y.useCallback(() => {
        if (e) {
          l.onOptionMouseEnter(e);
        }
        rp(op.hoverItem);
      }, [e, l]);
      0;
      const u = Y.useCallback(() => e && l.onOptionMouseLeave(e), [e, l]);
      0;
      const d = Y.useCallback(e => {
        if (!s && o) {
          o(e);
        }
        rp(r);
      }, [s, o, r]);
      0;
      0;
      return z.jsxs(Ep, {
        focusKey: s ? Eg : e,
        focusSound: op.hoverItem,
        className: Qu()(n.field, s && "disabled", i),
        onMouseEnter: c,
        onMouseLeave: u,
        onClick: d,
        children: [z.jsx("div", {
          className: n.label,
          children: t ?? (null != e && (0, z.jsx)(Pc.Options.OPTION, {
            hash: e
          }))
        }), a]
      });
    };
    X.add("game-ui/menu/components/shared/game-options/field/field.tsx", {
      get optionButtonSounds() {
        return f8;
      },
      set optionButtonSounds(e) {
        f8 = e;
      },
      get OptionField() {
        return x8;
      },
      set OptionField(e) {
        x8 = e;
      }
    });
    let v8 = {
      field: "field_iTK field_cjf",
      label: "label_TLv label_T__"
    };
    X.add("game-ui/menu/components/shared/game-options/field/column-field.module.scss", {
      get classes() {
        return v8;
      },
      set classes(e) {
        Object.assign(v8, e);
      }
    });
    let b8 = {
      "city-name-field": "city-name-field_H7e value-field_yJi",
      cityNameField: "city-name-field_H7e value-field_yJi",
      "dice-button": "dice-button_U3N secondary-button_Kvj",
      diceButton: "dice-button_U3N secondary-button_Kvj",
      "hint-right": "hint-right_k5k",
      hintRight: "hint-right_k5k",
      "hint-left": "hint-left_Bnq",
      hintLeft: "hint-left_Bnq",
      container: "container_cNd"
    };
    X.add("game-ui/menu/components/shared/game-options/city-name-field/city-name-field.module.scss", {
      get classes() {
        return b8;
      },
      set classes(e) {
        Object.assign(b8, e);
      }
    });
    const E8 = new Tg("INPUT_KEY");
    const I8 = new Tg("BUTTON_KEY");
    var y8 = ({
      id: e,
      label: t,
      value: n,
      disabled: s,
      onChange: i
    }) => {
      0;
      const [a, o] = Y.useState(n);
      0;
      Y.useEffect(() => o(n), [n]);
      0;
      const r = Y.useCallback(e => {
        o(e.target.value);
        i(e.target.value);
      }, [i]);
      const l = d8();
      0;
      const c = Y.useCallback(() => i(l(n)), [l, i, n]);
      0;
      const [u, d] = Y.useState(false);
      0;
      const [m, h] = Y.useState(false);
      0;
      const [g, p] = Y.useState(null);
      const f = g === E8;
      const x = g === I8;
      0;
      const v = Y.useCallback(() => {
        d(true);
      }, []);
      0;
      const _ = Y.useCallback(() => {
        d(false);
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: h,
        children: z.jsx(x8, {
          id: e,
          label: t,
          theme: v8,
          disabled: s,
          children: z.jsxs("div", {
            className: b8.container,
            children: [z.jsx(LT, {
              action: u ? "Back" : "Select",
              active: f && m,
              className: b8.hintLeft
            }), z.jsx("div", {
              className: b8.cityNameField,
              children: z.jsxs(ep, {
                direction: Mg.Horizontal,
                onChange: p,
                initialFocused: E8,
                children: [z.jsx(pW, {
                  focusKey: E8,
                  disableHint: true,
                  value: a,
                  vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                    hash: "CityName"
                  }),
                  theme: m8,
                  onChange: r,
                  onFocus: v,
                  onBlur: _,
                  maxLength: 85
                }), z.jsx(bg, {
                  tooltip: z.jsx(Pc.Menu.RANDOM_CITY_NAME_BUTTON_TOOLTIP, {}),
                  children: z.jsx($_, {
                    disableHint: true,
                    focusKey: I8,
                    tinted: true,
                    src: "Media/Glyphs/Dice.svg",
                    sounds: f8,
                    selectSound: op.generateRandomName,
                    className: b8.diceButton,
                    onSelect: c
                  })
                })]
              })
            }), z.jsx(LT, {
              action: "Select",
              active: !u && x && m,
              className: b8.hintLeft
            })]
          })
        })
      });
    };
    X.add("game-ui/menu/components/shared/game-options/city-name-field/city-name-field.tsx", {
      get CityNameField() {
        return y8;
      },
      set CityNameField(e) {
        y8 = e;
      }
    });
    let S8 = {
      "theme-item": "theme-item_qct",
      themeItem: "theme-item_qct",
      "theme-icon": "theme-icon_jJ9",
      themeIcon: "theme-icon_jJ9",
      "theme-name": "theme-name_hYf",
      themeName: "theme-name_hYf",
      hint: "hint_Gtz",
      "dropdown-item-hint": "dropdown-item-hint_ia7",
      dropdownItemHint: "dropdown-item-hint_ia7"
    };
    X.add("game-ui/menu/components/shared/game-options/theme-field/theme-field.module.scss", {
      get classes() {
        return S8;
      },
      set classes(e) {
        Object.assign(S8, e);
      }
    });
    var C8 = ({
      id: e,
      label: t,
      value: n,
      disabled: s,
      onChange: i
    }) => {
      const a = sl(Ok);
      const o = a.find(e => e.id === n);
      0;
      const [r, l] = Y.useState(false);
      0;
      const [c, u] = Y.useState(o?.id ?? null);
      0;
      const [d, m] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: l,
        children: z.jsx(x8, {
          id: e,
          label: t,
          theme: v8,
          disabled: s,
          className: S8.themeField,
          children: z.jsx(ny, {
            focusKey: s ? Eg : Ig,
            initialFocused: n,
            theme: jQ,
            content: z.jsx(ep, {
              initialFocused: o?.id || null,
              onChange: u,
              allowLooping: true,
              children: a.map(e => (0, z.jsxs)(oy, {
                focusKey: e.id,
                value: e.id,
                className: S8.themeItem,
                onChange: i,
                children: [(0, z.jsx)(LT, {
                  action: "Select",
                  active: r && c === e.id,
                  className: Qu()(S8.hint, S8.dropdownItemHint)
                }), (0, z.jsx)(iW, {
                  src: e.icon,
                  className: S8.themeIcon
                }), (0, z.jsx)("div", {
                  className: S8.themeName,
                  children: (0, z.jsx)(Pc.Assets.THEME, {
                    hash: e.id
                  })
                })]
              }, e.id))
            }),
            onToggle: m,
            children: z.jsx(sy, {
              disabled: s,
              sounds: f8,
              openIconComponent: z.jsx(LT, {
                action: "Select",
                active: !d && r,
                className: S8.hint
              }),
              closeIconComponent: z.jsx(LT, {
                action: "Back",
                active: d && r,
                className: S8.hint
              }),
              children: z.jsxs("div", {
                className: S8.themeItem,
                children: [z.jsx(iW, {
                  src: o?.icon ?? "Media/Placeholder.svg",
                  className: S8.themeIcon
                }), z.jsx("div", {
                  className: S8.themeName,
                  children: z.jsx(Pc.Assets.THEME, {
                    hash: n
                  })
                })]
              })
            })
          })
        })
      });
    };
    function N8({
      component: e,
      value: t,
      groupValue: n,
      onChange: s,
      onToggleSelected: i,
      ...a
    }) {
      0;
      const o = Y.useCallback(e => {
        if (e) {
          if (s) {
            s(t);
          }
        } else if (i) {
          i(t);
        }
      }, [t, s, i]);
      return Y.createElement(e, {
        ...a,
        checked: t === n,
        onChange: o
      });
    }
    X.add("game-ui/menu/components/shared/game-options/theme-field/theme-field.tsx", {
      get ThemeField() {
        return C8;
      },
      set ThemeField(e) {
        C8 = e;
      }
    });
    X.add("game-ui/common/input/toggle/group-toggle.tsx", {
      get GroupToggle() {
        return N8;
      },
      set GroupToggle(e) {
        N8 = e;
      }
    });
    let w8 = {
      toggle: "toggle_H7r item-mouse-states_Fmi",
      bullet: "bullet_rDK"
    };
    X.add("game-ui/common/input/toggle/radio-toggle/radio-toggle.module.scss", {
      get classes() {
        return w8;
      },
      set classes(e) {
        Object.assign(w8, e);
      }
    });
    var P8 = ({
      checked: e,
      disabled: t,
      theme: n,
      style: s,
      className: i,
      ...a
    }) => {
      0;
      const o = Y.useMemo(() => ({
        ...w8,
        ...n
      }), [n]);
      0;
      0;
      return z.jsx(Ab, {
        ...a,
        checked: e,
        disabled: t,
        style: s,
        className: Qu()(o.toggle, i),
        children: z.jsx("div", {
          className: Qu()(o.bullet, e && "checked", t && "disabled")
        })
      });
    };
    X.add("game-ui/common/input/toggle/radio-toggle/radio-toggle.tsx", {
      get RadioToggle() {
        return P8;
      },
      set RadioToggle(e) {
        P8 = e;
      }
    });
    let L8 = {
      toggle: "toggle_ATa",
      "radio-toggle": "radio-toggle_TY5 toggle_H7r item-mouse-states_Fmi",
      radioToggle: "radio-toggle_TY5 toggle_H7r item-mouse-states_Fmi",
      bullet: "bullet_DoE bullet_rDK"
    };
    X.add("game-ui/menu/components/shared/game-options/toggle-field/toggle-field.module.scss", {
      get classes() {
        return L8;
      },
      set classes(e) {
        Object.assign(L8, e);
      }
    });
    var M8 = ({
      value: e,
      disabled: t,
      onChange: n,
      ...s
    }) => {
      0;
      const [i, a] = Y.useState(false);
      0;
      const o = Y.useCallback(() => {
        n(!e);
      }, [n, e]);
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: a,
        children: z.jsxs(x8, {
          ...s,
          onClick: o,
          disabled: t,
          children: [z.jsx(LT, {
            action: "Select",
            active: i
          }), z.jsx(kb, {
            checked: e,
            className: L8.toggle,
            onChange: n,
            disabled: t
          })]
        })
      });
    };
    function R8({
      value: e,
      groupValue: t,
      disabled: n,
      onChange: s,
      onToggleSelected: i,
      ...a
    }) {
      0;
      const [o, r] = Y.useState(false);
      0;
      const l = Y.useCallback(() => {
        s(e);
      }, [s, e]);
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: r,
        children: z.jsxs(x8, {
          ...a,
          onClick: l,
          disabled: n,
          children: [z.jsx(LT, {
            action: "Select",
            active: o && e !== t
          }), z.jsx(N8, {
            theme: {
              toggle: L8.radioToggle,
              bullet: L8.bullet
            },
            component: P8,
            onChange: s,
            onToggleSelected: i,
            value: e,
            groupValue: t,
            disabled: n,
            className: L8.radioToggle
          })]
        })
      });
    }
    X.add("game-ui/menu/components/shared/game-options/toggle-field/toggle-field.tsx", {
      get ToggleField() {
        return M8;
      },
      set ToggleField(e) {
        M8 = e;
      },
      get RadioGroupToggleField() {
        return R8;
      },
      set RadioGroupToggleField(e) {
        R8 = e;
      }
    });
    let k8 = {
      "game-options": "game-options_iDr child-opacity-transition_nkS",
      gameOptions: "game-options_iDr child-opacity-transition_nkS",
      "main-row": "main-row_a1n",
      mainRow: "main-row_a1n",
      "options-column": "options-column_l0j",
      optionsColumn: "options-column_l0j",
      "city-name-field": "city-name-field_L2K",
      cityNameField: "city-name-field_L2K",
      "city-name-input": "city-name-input_aS0",
      cityNameInput: "city-name-input_aS0",
      "dice-button": "dice-button_W27 item-mouse-states_Fmi",
      diceButton: "dice-button_W27 item-mouse-states_Fmi",
      "theme-item": "theme-item_W3X",
      themeItem: "theme-item_W3X",
      "theme-icon": "theme-icon_h7K",
      themeIcon: "theme-icon_h7K",
      "theme-name": "theme-name_gDK",
      themeName: "theme-name_gDK",
      "toggle-item": "toggle-item_uwk",
      toggleItem: "toggle-item_uwk",
      "info-column": "info-column_IaC",
      infoColumn: "info-column_IaC",
      "info-title": "info-title_oAQ",
      infoTitle: "info-title_oAQ",
      "tutorial-options-title": "tutorial-options-title_qO8 info-title_oAQ",
      tutorialOptionsTitle: "tutorial-options-title_qO8 info-title_oAQ",
      "info-description": "info-description_NL4",
      infoDescription: "info-description_NL4"
    };
    X.add("game-ui/menu/components/shared/game-options/game-options.module.scss", {
      get classes() {
        return k8;
      },
      set classes(e) {
        Object.assign(k8, e);
      }
    });
    var B8 = Y.forwardRef(function ({
      focusKey: e,
      cityName: t,
      theme: n,
      options: s,
      tutorialState: i,
      disabledOptions: a = [],
      className: o,
      onCityNameChange: r,
      onThemeChange: l,
      onOptionsChange: c,
      onDeleteGame: u,
      onShareGame: d,
      setTutorialState: m,
      shareGameLocaleKey: h,
      pastModsEnabled: g
    }, p) {
      0;
      const [f, x] = Y.useState(false);
      const v = km();
      const _ = sl(vk);
      const b = sl(_k);
      0;
      const T = Y.useCallback((e, t) => {
        if (c) {
          c({
            ...s,
            [e]: t
          });
        }
      }, [s, c]);
      0;
      const [E, I] = Y.useState("cityName");
      0;
      const y = Y.useCallback(e => {
        if ("string" == typeof e) {
          I(e);
        }
      }, []);
      0;
      const [S, j] = Y.useState(null);
      0;
      const C = Y.useMemo(() => ({
        onOptionMouseEnter: e => j(e),
        onOptionMouseLeave: e => j(t => t === e ? null : t),
        onFocusSet: () => {},
        onFocusReset: () => {}
      }), []);
      const N = f && v ? E : S;
      const w = sl(fk);
      const O = h ?? "shareSave";
      0;
      const P = Y.useCallback(e => {
        if ("deleteSave" === e) {
          u();
        }
        if (e === O) {
          d();
        }
      }, [u, d, O]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: x,
        children: z.jsxs("div", {
          ref: p,
          className: Qu()(k8.gameOptions, o),
          children: [z.jsxs("div", {
            className: k8.mainRow,
            children: [z.jsx("div", {
              className: k8.optionsColumn,
              children: z.jsx(tQ.Provider, {
                value: C,
                children: z.jsx(ab, {
                  children: z.jsxs(Xg, {
                    focusKey: e,
                    focused: E,
                    onChange: y,
                    direction: Mg.Both,
                    allowLooping: true,
                    children: [z.jsx(y8, {
                      id: "cityName",
                      label: z.jsx(Pc.GameListScreen.GAME_OPTION, {
                        hash: "cityName"
                      }),
                      value: t,
                      disabled: a.includes("cityName"),
                      onChange: r
                    }), z.jsx(C8, {
                      id: "theme",
                      label: z.jsx(Pc.GameListScreen.GAME_OPTION, {
                        hash: "theme"
                      }),
                      value: n,
                      disabled: a.includes("theme"),
                      onChange: l
                    }), z.jsx(KX, {}), Object.entries(s).filter(([e, t]) => "__Type" !== e).map(([e, t]) => (0, z.jsx)(G8, {
                      id: e,
                      value: t,
                      disabled: a.includes(e),
                      onChange: T
                    }, e)), z.jsx(KX, {}), z.jsx("div", {
                      className: Qu()(k8.infoTitle, k8.tutorialOptionsTitle),
                      children: z.jsx(Pc.GameListScreen.TUTORIAL_OPTIONS, {})
                    }), z.jsx(R8, {
                      id: w ? "continueTutorials" : "beginTutorials",
                      label: z.jsx(Pc.GameListScreen.GAME_OPTION, {
                        hash: w ? "continueTutorials" : "beginTutorials"
                      }),
                      value: mk.Continue,
                      groupValue: i,
                      className: k8.toggleItem,
                      onChange: m
                    }), w && (0, z.jsx)(R8, {
                      id: "restartTutorials",
                      label: (0, z.jsx)(Pc.GameListScreen.GAME_OPTION, {
                        hash: "restartTutorials"
                      }),
                      value: mk.Reset,
                      groupValue: i,
                      className: k8.toggleItem,
                      onChange: m
                    }), z.jsx(R8, {
                      id: "disableTutorials",
                      label: z.jsx(Pc.GameListScreen.GAME_OPTION, {
                        hash: "disableTutorials"
                      }),
                      value: mk.Disable,
                      groupValue: i,
                      className: k8.toggleItem,
                      onChange: m
                    }), (null != u || null != d) && (0, z.jsxs)(z.Fragment, {
                      children: [(0, z.jsx)(KX, {}), (0, z.jsx)(G6, {
                        buttons: [null != u ? {
                          id: "deleteSave",
                          disabled: false,
                          confirm: true
                        } : null, null != d ? {
                          id: O,
                          disabled: !b,
                          confirm: false
                        } : null].filter(uw),
                        onSelect: P
                      })]
                    })]
                  })
                })
              })
            }), z.jsx("div", {
              className: k8.infoColumn,
              children: null != N && (0, z.jsxs)(z.Fragment, {
                children: [(0, z.jsx)("div", {
                  className: k8.infoTitle,
                  children: (0, z.jsx)(Pc.GameListScreen.GAME_OPTION, {
                    hash: N
                  })
                }), (0, z.jsx)("div", {
                  className: k8.infoDescription,
                  children: (0, z.jsx)(Pc.GameListScreen.GAME_OPTION_DESCRIPTION, {
                    hash: N
                  })
                })]
              })
            })]
          }), z.jsx(k6, {
            modsEnabled: _,
            pastModsEnabled: undefined !== g && g.length > 0,
            unlockAll: s.unlockAll,
            unlimitedMoney: s.unlimitedMoney,
            unlockMapTiles: s.unlockMapTiles
          })]
        })
      });
    });
    var G8 = ({
      id: e,
      value: t,
      disabled: n,
      onChange: s
    }) => {
      0;
      const i = Y.useCallback(t => s(e, t), [e, s]);
      0;
      0;
      return z.jsx(M8, {
        id: e,
        value: t,
        label: z.jsx(Pc.GameListScreen.GAME_OPTION, {
          hash: e
        }),
        disabled: n,
        className: k8.toggleItem,
        onChange: i
      });
    };
    X.add("game-ui/menu/components/shared/game-options/game-options.tsx", {
      get GameOptions() {
        return B8;
      },
      set GameOptions(e) {
        B8 = e;
      },
      get ToggleItem() {
        return G8;
      },
      set ToggleItem(e) {
        G8 = e;
      }
    });
    var V8 = ({
      save: e,
      activeStep: t,
      className: n,
      onOptionsToggle: s,
      onLoadGameSelect: i
    }) => {
      const a = sl(Cv);
      const o = km();
      const r = null != e && e.locked;
      const l = sl(Ok).find(t => t.id === e?.theme) ?? null;
      const c = sl(vk);
      0;
      return z.jsx(bz, {
        className: n,
        title: null != e ? DH(e.displayName, 28) : undefined,
        preview: e?.preview,
        content: null != e ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)("div", {
            className: vz.achievementWarningBannerContainer,
            children: (0, z.jsx)(D6, {
              modsEnabled: c,
              pastModsEnabled: e.modsEnabled.length > 0,
              unlockAll: e.options?.unlockAll,
              unlimitedMoney: e.options?.unlimitedMoney,
              loadGame: true,
              className: vz.achievementWarningBanner
            })
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.Menu.CITY_NAME_LABEL, {}),
            ellipsis: true,
            children: e.cityName
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.POPULATION_LABEL, {}),
            children: (0, z.jsx)(Gc, {
              value: e.population,
              unit: Oc.Integer
            })
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.Menu.SIMULATION_DATE_LABEL, {}),
            children: (0, z.jsx)(Pu, {
              value: e.simulationDate
            })
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.MONEY_LABEL, {}),
            children: e.options?.unlimitedMoney ? (0, z.jsx)(Pc.Menu.UNLIMITED_MONEY_LABEL, {}) : (0, z.jsx)(Gc, {
              value: e.money,
              unit: Oc.Money
            })
          }), (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.XP_LABEL, {}),
            children: (0, z.jsx)(Gc, {
              value: e.xp,
              unit: Oc.Integer
            })
          }), null != e.mapName && (0, z.jsx)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.MAP_LABEL, {}),
            children: (0, z.jsx)(Pc.Maps.MAP_TITLE, {
              hash: e.mapName,
              fallback: e.mapName
            })
          }), null != l && (0, z.jsxs)(Tz, {
            label: (0, z.jsx)(Pc.GameListScreen.THEME_LABEL, {}),
            children: [(0, z.jsx)(iW, {
              src: l.icon,
              className: vz.themeIcon
            }), (0, z.jsx)(Pc.Assets.THEME, {
              hash: l.id
            })]
          })]
        }) : undefined,
        footer: null == e || o ? undefined : (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ez, {
            disabled: r || !a,
            onSelect: i,
            children: (0, z.jsx)(Pc.Menu.LOAD_GAME_BUTTON, {})
          }), (0, z.jsx)(Ez, {
            disabled: r,
            onSelect: s,
            children: t === i9.options ? (0, z.jsx)(Pc.Menu.SAVE_LIST, {}) : (0, z.jsx)(Pc.Menu.SAVE_OPTIONS, {})
          })]
        })
      });
    };
    X.add("game-ui/menu/components/load-game-screen/save-detail/save-detail.tsx", {
      get SaveDetail() {
        return V8;
      },
      set SaveDetail(e) {
        V8 = e;
      }
    });
    let H8 = {
      itemHeight: "50rem",
      "save-list": "save-list_gdH child-opacity-transition_nkS",
      saveList: "save-list_gdH child-opacity-transition_nkS",
      scrollable: "scrollable_C4r"
    };
    X.add("game-ui/menu/components/load-game-screen/save-list/save-list.module.scss", {
      get classes() {
        return H8;
      },
      set classes(e) {
        Object.assign(H8, e);
      }
    });
    0;
    var W8 = Y.forwardRef(function ({
      selectedSave: e,
      ordering: t,
      className: n,
      onSelectSave: s,
      onSelectOrdering: i,
      onDoubleClick: a
    }, o) {
      const r = sl(Mk);
      0;
      const l = Y.useMemo(() => YW(r, t), [t, r]);
      0;
      const c = Y.useMemo(() => r.find(e => "ParadoxMods" === e.cloudTarget) ? XW : XW.filter(e => e !== zW.Downloaded), [r]);
      const u = GK(Gm(H8.itemHeight), l.length, 3);
      0;
      const d = Y.useMemo(() => ({
        "Switch Ordering": e => {
          rp(op.dragSlider);
          if (e < 0) {
            rp(op.selectPreviousItem);
            i(ow(c, c.indexOf(t), true) ?? c[c.length - 1]);
          } else if (e > 0) {
            rp(op.selectNextItem);
            i(iw(c, c.indexOf(t), true) ?? c[0]);
          }
        }
      }), [i, t, c]);
      0;
      const m = Y.useCallback(e => {
        if ("string" == typeof e) {
          s(e);
        }
      }, [s]);
      0;
      const h = Y.useCallback(e => s(e.id), [s]);
      0;
      const g = Y.useCallback(t => {
        const n = l[t];
        0;
        return z.jsx(eY, {
          save: n,
          selected: e === n.displayName || e === n.id,
          locked: false,
          tooltipsInactive: true,
          inputAction: "Load Game",
          onClick: h,
          onDoubleClick: a
        }, n.id);
      }, [h, e, l, t]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: d,
        children: z.jsxs("div", {
          ref: o,
          className: Qu()(H8.saveList, n),
          children: [z.jsx(QW, {
            options: c,
            selectedOrdering: t,
            onSelectOrdering: i
          }), z.jsx(Xg, {
            focused: e,
            onChange: m,
            activation: $u.Always,
            children: z.jsx(FK, {
              className: Qu()(H8.scrollable),
              sizeProvider: u,
              renderItem: g
            })
          })]
        })
      });
    });
    X.add("game-ui/menu/components/load-game-screen/save-list/save-list.tsx", {
      get SaveList() {
        return W8;
      },
      set SaveList(e) {
        W8 = e;
      }
    });
    let z8 = {
      "save-slot-list": "save-slot-list_QCI child-opacity-transition_nkS",
      saveSlotList: "save-slot-list_QCI child-opacity-transition_nkS",
      scrollable: "scrollable_yF6",
      "name-field": "name-field_c6v",
      nameField: "name-field_c6v",
      "name-input": "name-input_NmH",
      nameInput: "name-input_NmH"
    };
    X.add("game-ui/menu/components/load-game-screen/save-slot-list/save-slot-list.module.scss", {
      get classes() {
        return z8;
      },
      set classes(e) {
        Object.assign(z8, e);
      }
    });
    0;
    var $8 = Y.forwardRef(function ({
      selectedSlot: e,
      sortedSaves: t,
      ordering: n,
      className: s,
      onSelectSave: i,
      onSelectOrdering: a,
      onSelectSlot: o
    }, r) {
      0;
      const l = Y.useMemo(() => t.find(e => "ParadoxMods" === e.cloudTarget) ? XW : XW.filter(e => e !== zW.Downloaded), [t]);
      0;
      const c = Y.useMemo(() => ({
        "Switch Ordering": e => {
          rp(op.dragSlider);
          if (e < 0) {
            rp(op.selectPreviousItem);
            a(ow(l, l.indexOf(n), true) ?? l[l.length - 1]);
          } else if (e > 0) {
            rp(op.selectNextItem);
            a(iw(l, l.indexOf(n), true) ?? l[0]);
          }
        }
      }), [l, a, n]);
      0;
      const u = Y.useCallback(e => i(e.id), [i]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: c,
        children: z.jsxs("div", {
          ref: r,
          className: Qu()(z8.saveSlotList, s),
          children: [z.jsx(QW, {
            options: l,
            selectedOrdering: n,
            onSelectOrdering: a
          }), z.jsx(ep, {
            initialFocused: e < t.length ? `Save->${t[e].id}` : undefined,
            children: z.jsx(ab, {
              className: z8.scrollable,
              children: t.map((t, n) => (0, z.jsx)(Nz, {
                slotId: n,
                focusKey: `Save->${t.id}`,
                locked: t.locked,
                selected: e === n,
                saveGame: t,
                inputAction: "Load Game",
                onSelectSave: u,
                onSelect: o
              }, n))
            })
          })]
        })
      });
    });
    X.add("game-ui/menu/components/load-game-screen/save-slot-list/save-slot-list.tsx", {
      get SaveSlotList() {
        return $8;
      },
      set SaveSlotList(e) {
        $8 = e;
      }
    });
    let q8 = {
      "save-slot": "save-slot_w9I child-opacity-transition_nkS",
      saveSlot: "save-slot_w9I child-opacity-transition_nkS",
      locked: "locked_ZDr",
      "theme-icon": "theme-icon_I6O",
      themeIcon: "theme-icon_I6O",
      "humidity-icon": "humidity-icon_cuF",
      humidityIcon: "humidity-icon_cuF",
      title: "title_BPq",
      field: "field_tWJ",
      "population-icon": "population-icon_TMS",
      populationIcon: "population-icon_TMS",
      date: "date_vy3",
      "empty-label": "empty-label_w3f",
      emptyLabel: "empty-label_w3f",
      input: "input_XA8",
      "title-content": "title-content_PH_",
      titleContent: "title-content_PH_",
      image: "image_H0A",
      scrollable: "scrollable_wz4",
      "scrollable-content": "scrollable-content_VzH",
      scrollableContent: "scrollable-content_VzH",
      description: "description_EAs",
      label: "label_W0E",
      value: "value_Azu",
      "scrollable-footer": "scrollable-footer_TG4",
      scrollableFooter: "scrollable-footer_TG4"
    };
    X.add("game-ui/menu/components/load-game-screen/save-slots/save-slot/save-slot.module.scss", {
      get classes() {
        return q8;
      },
      set classes(e) {
        Object.assign(q8, e);
      }
    });
    var Q8 = ({
      focusKey: e,
      locked: t = false,
      saveGame: n,
      selected: s = false,
      slotId: i,
      className: a,
      onSelectSave: o,
      onSelect: r
    }) => {
      0;
      const l = Y.useCallback(e => {
        if (e) {
          if (r) {
            r(i);
          }
          if (n && o) {
            o(n);
          }
        }
      }, [r, o, n, i]);
      0;
      const c = Y.useCallback(() => {
        if (!t) {
          if (n && o) {
            o(n);
          }
          if (r) {
            r(i);
          }
        }
      }, [t, r, o, n, i]);
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        focusKey: t ? Eg : e || Eg,
        onClick: c,
        onFocusChange: l,
        className: Qu()(q8.saveSlot, t && q8.locked, s && "selected", a),
        children: [n && (0, z.jsx)("div", {
          className: q8.title,
          children: (0, z.jsx)("div", {
            className: q8.titleContent,
            children: n?.displayName
          })
        }), null != n && (0, z.jsx)(B_, {
          src: n?.preview,
          className: q8.image
        }), z.jsx(ab, {
          autoScroll: true,
          className: q8.scrollable,
          children: z.jsxs("div", {
            className: q8.scrollableContent,
            children: [n ? (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(Z8, {
                label: (0, z.jsx)(Pc.Menu.CITY_NAME_LABEL, {}),
                children: n?.cityName
              }), (0, z.jsx)(Z8, {
                label: (0, z.jsx)(Pc.GameListScreen.POPULATION_LABEL, {}),
                children: (0, z.jsx)(Gc, {
                  value: n?.population,
                  unit: Oc.Integer
                })
              }), (0, z.jsx)(Z8, {
                label: (0, z.jsx)(Pc.Menu.SIMULATION_DATE_LABEL, {}),
                children: (0, z.jsx)(Pu, {
                  value: n?.simulationDate
                })
              }), (0, z.jsx)(Z8, {
                label: (0, z.jsx)(Pc.GameListScreen.MONEY_LABEL, {}),
                children: (0, z.jsx)(Gc, {
                  value: n?.money,
                  unit: Oc.Money
                })
              }), (0, z.jsx)(Z8, {
                label: (0, z.jsx)(Pc.GameListScreen.XP_LABEL, {}),
                children: (0, z.jsx)(Gc, {
                  value: n?.xp,
                  unit: Oc.Integer
                })
              }), null != n?.mapName && (0, z.jsx)(Z8, {
                label: (0, z.jsx)(Pc.GameListScreen.MAP_LABEL, {}),
                children: (0, z.jsx)(Pc.Maps.MAP_TITLE, {
                  hash: n.mapName,
                  fallback: n.mapName
                })
              })]
            }) : (0, z.jsx)("div", {
              className: Qu()(q8.emptyLabel, q8.locked),
              children: (0, z.jsx)(Pc.Menu.EMPTY_SLOT, {})
            }), z.jsx("div", {
              className: q8.scrollableFooter
            })]
          })
        })]
      });
    };
    const Z8 = ({
      label: e,
      children: t
    }) => (0, z.jsxs)("div", {
      className: q8.field,
      children: [(0, z.jsx)("div", {
        className: q8.label,
        children: e
      }), (0, z.jsx)("div", {
        className: q8.value,
        children: t
      })]
    });
    X.add("game-ui/menu/components/load-game-screen/save-slots/save-slot/save-slot.tsx", {
      get SaveSlot() {
        return Q8;
      },
      set SaveSlot(e) {
        Q8 = e;
      }
    });
    let J8 = {
      "save-game-slots": "save-game-slots_bkN",
      saveGameSlots: "save-game-slots_bkN",
      header: "header_bYW child-opacity-transition_nkS",
      slots: "slots_qGG",
      slot: "slot_yiX",
      "name-field": "name-field_Tyf child-opacity-transition_nkS",
      nameField: "name-field_Tyf child-opacity-transition_nkS",
      footer: "footer_x7R child-opacity-transition_nkS",
      "footer-button": "footer-button_OFi",
      footerButton: "footer-button_OFi"
    };
    X.add("game-ui/menu/components/load-game-screen/save-slots/save-slots.module.scss", {
      get classes() {
        return J8;
      },
      set classes(e) {
        Object.assign(J8, e);
      }
    });
    0;
    var t9 = Y.forwardRef(function ({
      slots: e,
      selectedSlot: t,
      sortedSaves: n,
      selectedSave: s,
      ordering: i,
      className: a,
      onSelectOrdering: o,
      onSelectSave: r,
      onLoadGameSelect: l,
      onOptionsToggle: c,
      onSelectSlot: u
    }, d) {
      const m = km();
      const h = null != s && s.locked;
      0;
      const g = Y.useMemo(() => n.find(e => "ParadoxMods" === e.cloudTarget) ? XW : XW.filter(e => e !== zW.Downloaded), [n]);
      0;
      const p = Y.useMemo(() => ({
        "Switch Ordering": e => {
          rp(op.dragSlider);
          if (e < 0) {
            rp(op.selectPreviousItem);
            o(ow(g, g.indexOf(i), true) ?? g[g.length - 1]);
          } else if (e > 0) {
            rp(op.selectNextItem);
            o(iw(g, g.indexOf(i), true) ?? g[0]);
          }
        }
      }), [o, i, g]);
      0;
      const f = Y.useCallback(e => r(e.id), [r]);
      0;
      const x = Y.useMemo(() => !n || 0 === n.length || t > n.length - 1 ? `Save->Empty:${t}` : `Save->${n[t]?.id}`, [t, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: p,
        children: z.jsxs("div", {
          ref: d,
          className: Qu()(J8.saveGameSlots, a),
          children: [z.jsx(QW, {
            options: g,
            selectedOrdering: i,
            onSelectOrdering: o,
            className: J8.header
          }), z.jsx("div", {
            className: J8.slots,
            children: z.jsx(ep, {
              initialFocused: x,
              children: Array.from({
                length: e
              }, (e, s) => !n || 0 === n.length || s > n.length - 1 ? (0, z.jsx)(Q8, {
                slotId: s,
                locked: true,
                className: J8.slot
              }, s) : (0, z.jsx)(Q8, {
                slotId: s,
                selected: t === s,
                focusKey: `Save->${n[s].id}`,
                locked: n[s].locked,
                saveGame: n[s],
                className: J8.slot,
                onSelectSave: f,
                onSelect: u
              }, s))
            })
          }), z.jsx("div", {
            className: J8.footer,
            children: null == s || m ? undefined : (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(Ez, {
                className: J8.footerButton,
                disabled: h,
                onSelect: l,
                children: (0, z.jsx)(Pc.Menu.LOAD_GAME_BUTTON, {})
              }), (0, z.jsx)(Ez, {
                className: J8.footerButton,
                disabled: h,
                onSelect: c,
                children: (0, z.jsx)(Pc.Menu.SAVE_OPTIONS, {})
              })]
            })
          })]
        })
      });
    });
    X.add("game-ui/menu/components/load-game-screen/save-slots/save-slots.tsx", {
      get SaveSlots() {
        return t9;
      },
      set SaveSlots(e) {
        t9 = e;
      }
    });
    let n9 = {
      content: "content_xXo",
      "step-container": "step-container_Cmk",
      stepContainer: "step-container_Cmk",
      step: "step_buR",
      detail: "detail_T2m"
    };
    X.add("game-ui/menu/components/load-game-screen/load-game-screen.module.scss", {
      get classes() {
        return n9;
      },
      set classes(e) {
        Object.assign(n9, e);
      }
    });
    var i9;
    !function (e) {
      e[e.selection = 0] = "selection";
      e[e.options = 1] = "options";
    }(i9 || (i9 = {}));
    var a9 = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n,
      requireConfirmation: s = false
    }, i) {
      0;
      const [a, o] = Y.useState(i9.selection);
      0;
      const [r, l] = Y.useState(zW.LastModified);
      const c = sl(Mk);
      0;
      const u = Y.useMemo(() => YW(c, r), [r, c]);
      0;
      const [d, m] = Y.useState(() => function (e) {
        const t = YW(Mk.value, e);
        return sw(t, "id");
      }(r));
      0;
      const [h, g] = Y.useState(u.findIndex(e => e.id === d));
      const p = c.reduce((e, t) => "ParadoxMods" === t.cloudTarget ? e + 1 : e, 0);
      const f = sl(Nk) + p;
      const x = f + p;
      0;
      const v = Y.useMemo(() => c.find(e => e.id === d) ?? null, [c, d]);
      0;
      const [_, b] = Y.useState(v?.cityName ?? "");
      0;
      const [T, E] = Y.useState(v?.theme ?? "");
      const I = sl(jk);
      0;
      const [y, S] = Y.useState(v?.options ? {
        ...I,
        ...v?.options
      } : {
        ...I
      });
      const j = function (e) {
        const t = ["theme", "leftHandTraffic"];
        if (null != e?.options) {
          if (e.options.unlockAll) {
            t.push("unlockAll");
          }
          if (e.options.unlimitedMoney) {
            t.push("unlimitedMoney");
          }
          if (e.options.unlockMapTiles) {
            t.push("unlockMapTiles");
          }
        }
        return t;
      }(v);
      const [C, N] = Xk();
      0;
      const w = Y.useContext(lE);
      const O = sl(Tk);
      const P = sl(qE);
      0;
      const L = Y.useCallback(e => {
        const t = c.find(t => t.id === e);
        if (null != t) {
          b(t.cityName);
          E(t.theme);
          S(t?.options ? {
            ...I,
            ...t?.options
          } : {
            ...I
          });
          m(e);
        }
      }, [I, c]);
      0;
      const A = Y.useCallback(() => {
        if (a === i9.options) {
          o(i9.selection);
          rp(op.closeMenu);
        } else {
          n();
        }
      }, [a, n]);
      0;
      const M = Y.useCallback(() => {
        if (a === i9.selection) {
          o(i9.options);
          rp(op.openMenu);
        } else {
          o(i9.selection);
          rp(op.closeMenu);
        }
      }, [a]);
      const R = sl(tD);
      0;
      const k = Y.useCallback(e => {
        const t = e?.id || d;
        if (t) {
          const e = e => {
            qk(C);
            Bk({
              saveId: t,
              cityName: _,
              options: y
            }, e);
          };
          if (s && !R) {
            0;
            0;
            0;
            return void w.showDialog(z.jsx(LI, {
              zIndex: 100,
              title: z.jsx(Pc.Common.WARNING, {}),
              message: z.jsx(Pc.GameListScreen.CONFIRM_UNSAVED_MESSAGE, {}),
              onConfirm: e,
              dismissible: true
            }));
          }
          e(false);
        }
      }, [d, s, R, C, _, y, w]);
      0;
      const D = Y.useCallback(() => {
        const e = u.findIndex(e => e.id === v.id);
        const t = u[e + 1] || u[e - 1] || undefined;
        Vk(v.id);
        m(t?.id);
        o(i9.selection);
      }, [v, u]);
      0;
      const F = Y.useCallback(() => {
        Hk(v.id);
      }, [v]);
      0;
      const U = Y.useMemo(() => ({
        "Save Options": () => {
          rp(op.selectItem);
          M();
        },
        "Load Game": () => {
          rp(op.selectItem);
          k();
        }
      }), [k, M]);
      0;
      0;
      return z.jsx(xz, {
        ref: i,
        focusKey: e,
        title: o9(a),
        className: t,
        onClose: A,
        children: z.jsx(Lg, {
          actions: U,
          children: 3 !== f || x > 3 ? (0, z.jsx)("div", {
            className: n9.content,
            children: (0, z.jsxs)(ep, {
              children: [(0, z.jsx)("div", {
                className: n9.stepContainer,
                children: (0, z.jsxs)(cd, {
                  children: [a === i9.selection && (0, z.jsx)(dh, {
                    styles: L6,
                    children: -1 === f ? (0, z.jsx)(W8, {
                      selectedSave: d,
                      ordering: r,
                      className: n9.step,
                      onSelectSave: L,
                      onSelectOrdering: l,
                      onDoubleClick: k
                    }) : (0, z.jsx)($8, {
                      selectedSlot: h,
                      ordering: r,
                      sortedSaves: u,
                      className: n9.step,
                      onSelectSave: L,
                      onSelectOrdering: l,
                      onSelectSlot: g
                    })
                  }, i9.selection), a === i9.options && (0, z.jsx)(dh, {
                    styles: VZ,
                    children: (0, z.jsx)(B8, {
                      cityName: _,
                      theme: T,
                      options: y,
                      disabledOptions: j,
                      className: n9.step,
                      onCityNameChange: b,
                      onThemeChange: E,
                      onOptionsChange: S,
                      tutorialState: C,
                      setTutorialState: N,
                      onDeleteGame: v?.isReadonly ? undefined : D,
                      onShareGame: O || v?.isReadonly || !P ? undefined : F,
                      pastModsEnabled: v?.modsEnabled
                    })
                  }, i9.options)]
                })
              }), (0, z.jsx)(V8, {
                save: v,
                activeStep: a,
                className: n9.detail,
                onOptionsToggle: M,
                onLoadGameSelect: k
              })]
            })
          }) : (0, z.jsx)(ep, {
            children: (0, z.jsxs)(cd, {
              children: [a === i9.selection && (0, z.jsx)(dh, {
                styles: L6,
                children: (0, z.jsx)("div", {
                  className: n9.content,
                  children: (0, z.jsx)(t9, {
                    slots: x,
                    selectedSlot: h,
                    sortedSaves: u,
                    ordering: r,
                    selectedSave: v,
                    onSelectSave: L,
                    onLoadGameSelect: k,
                    onOptionsToggle: M,
                    onSelectOrdering: l,
                    onSelectSlot: g
                  })
                })
              }), a === i9.options && (0, z.jsx)(dh, {
                styles: VZ,
                children: (0, z.jsxs)("div", {
                  className: n9.content,
                  children: [(0, z.jsx)("div", {
                    className: n9.stepContainer,
                    children: (0, z.jsx)(B8, {
                      cityName: _,
                      theme: T,
                      options: y,
                      disabledOptions: j,
                      className: n9.step,
                      onCityNameChange: b,
                      onThemeChange: E,
                      onOptionsChange: S,
                      tutorialState: C,
                      setTutorialState: N,
                      onDeleteGame: v?.isReadonly ? undefined : D,
                      onShareGame: O || v?.isReadonly || !P ? undefined : F,
                      pastModsEnabled: v?.modsEnabled
                    })
                  }), (0, z.jsx)(V8, {
                    save: v,
                    className: n9.detail,
                    onOptionsToggle: M,
                    onLoadGameSelect: k
                  })]
                })
              })]
            })
          })
        })
      });
    });
    function o9(e) {
      return e === i9.selection ? (0, z.jsx)(Pc.Menu.LOAD_GAME, {}) : e === i9.options ? (0, z.jsx)(Pc.Menu.SAVE_OPTIONS, {}) : null;
    }
    function r9() {
      0;
      const e = Y.useContext(lE);
      const t = sl(tD);
      const n = sl(pk);
      0;
      return Y.useCallback(() => {
        if (n) {
          if (t) {
            Zk(false);
          } else {
            0;
            0;
            0;
            e.showDialog(z.jsx(LI, {
              title: z.jsx(Pc.Common.WARNING, {}),
              message: z.jsx(Pc.GameListScreen.CONFIRM_UNSAVED_MESSAGE, {}),
              onConfirm: Zk,
              dismissible: true
            }));
          }
        }
      }, [e, t, n]);
    }
    X.add("game-ui/menu/components/load-game-screen/load-game-screen.tsx", {
      get LoadGameStep() {
        return i9;
      },
      set LoadGameStep(e) {
        i9 = e;
      },
      get LoadGameScreen() {
        return a9;
      },
      set LoadGameScreen(e) {
        a9 = e;
      },
      get useQuickLoad() {
        return r9;
      },
      set useQuickLoad(e) {
        r9 = e;
      }
    });
    let l9 = {
      enter: "enter_C0S enter_kO6",
      "enter-active": "enter-active_ule enter-active_lrI",
      enterActive: "enter-active_ule enter-active_lrI",
      exit: "exit_TO8 exit_Von",
      "exit-active": "exit-active_KS9 exit-active_jtN",
      exitActive: "exit-active_KS9 exit-active_jtN"
    };
    X.add("game-ui/game/transitions/toolbar-panel-children.module.scss", {
      get classes() {
        return l9;
      },
      set classes(e) {
        Object.assign(l9, e);
      }
    });
    var u9 = Y.createContext(null);
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/asset-detail-panel-context.ts", {
      get AssetDetailPanelContext() {
        return u9;
      },
      set AssetDetailPanelContext(e) {
        u9 = e;
      }
    });
    let d9 = {
      "asset-category-tab-bar": "asset-category-tab-bar_IGA",
      assetCategoryTabBar: "asset-category-tab-bar_IGA",
      "tab-icon": "tab-icon_YCN",
      tabIcon: "tab-icon_YCN",
      locked: "locked_u4O",
      lock: "lock_4IG",
      items: "items_gPf",
      "close-button": "close-button_kMj",
      closeButton: "close-button_kMj"
    };
    X.add("game-ui/game/components/asset-menu/asset-category-tab-bar/asset-category-tab-bar.module.scss", {
      get classes() {
        return d9;
      },
      set classes(e) {
        Object.assign(d9, e);
      }
    });
    let h9 = {
      button: "button_Yym",
      icon: "icon_LAz",
      locked: "locked_jsF",
      "item-inner": "item-inner_NKx",
      itemInner: "item-inner_NKx",
      highlight: "highlight_Y8Z",
      lock: "lock_HjE",
      "single-tab": "single-tab_l6M",
      singleTab: "single-tab_l6M"
    };
    X.add("game-ui/game/components/asset-menu/asset-category-tab-bar/category-item.module.scss", {
      get classes() {
        return h9;
      },
      set classes(e) {
        Object.assign(h9, e);
      }
    });
    0;
    var p9 = Y.memo(function ({
      categories: e,
      selectedCategory: t,
      onChange: n,
      onClose: s
    }) {
      const i = km();
      0;
      0;
      0;
      return z.jsxs("div", {
        className: d9.assetCategoryTabBar,
        children: [z.jsx("div", {
          className: d9.items,
          children: z.jsx(xW, {
            hidden: e.length < 2,
            children: e.map(s => (0, z.jsx)(f9, {
              singleTab: 1 === e.length,
              subCategory: s,
              selected: Ur(t, s.entity),
              onSelect: n
            }, Dr(s.entity)))
          })
        }), !i && (0, z.jsx)($_, {
          tinted: true,
          focusKey: Eg,
          src: BT.closeIcon,
          theme: q_,
          className: Qu()(BT.closeButton, d9.closeButton),
          onSelect: s
        })]
      });
    });
    const f9 = ({
      subCategory: e,
      selected: t,
      singleTab: n = false,
      onSelect: s
    }) => {
      ag(e.uiTag, t && !e.locked);
      og(e.uiTag, t && !e.locked);
      0;
      const i = Y.useCallback(() => s(e.entity), [s, e.entity]);
      0;
      const a = Y.useContext(u9);
      0;
      const o = Y.useCallback(() => a && a.showDetails(e.entity), [e.entity, a]);
      0;
      const r = Y.useCallback(() => a && a.hideDetails(e.entity), [e.entity, a]);
      0;
      return z.jsx(bg, {
        tooltip: !a && (0, z.jsx)(Pc.SubServices.NAME, {
          hash: e.name
        }),
        children: n ? (0, z.jsxs)("div", {
          className: h9.singleTab,
          onMouseOver: o,
          onMouseLeave: r,
          children: [(0, z.jsx)(aT, {
            uiTag: e.uiTag,
            active: !e.locked,
            disableBlinking: n,
            children: (0, z.jsx)("div", {
              className: h9.itemInner
            })
          }), (0, z.jsx)("img", {
            src: e.icon,
            className: Qu()(d9.tabIcon, e.locked && d9.locked)
          }), e.locked && (0, z.jsx)(kX, {
            className: d9.lock
          })]
        }) : (0, z.jsxs)($_, {
          disableHint: true,
          focusKey: Eg,
          src: e.icon,
          selected: t,
          theme: h9,
          className: Qu()(e.locked && h9.locked),
          onSelect: i,
          onMouseOver: o,
          onMouseLeave: r,
          children: [(0, z.jsx)(aT, {
            uiTag: e.uiTag,
            active: !e.locked,
            disableBlinking: n,
            children: (0, z.jsx)("div", {
              className: h9.itemInner
            })
          }), e.highlight && (0, z.jsx)(OJ, {
            className: h9.highlight
          }), e.locked && (0, z.jsx)(kX, {
            className: h9.lock
          })]
        })
      });
    };
    X.add("game-ui/game/components/asset-menu/asset-category-tab-bar/asset-category-tab-bar.tsx", {
      get AssetCategoryTabBar() {
        return p9;
      },
      set AssetCategoryTabBar(e) {
        p9 = e;
      }
    });
    var x9 = "Game.UI.Common.NumberProperty";
    var v9 = "Game.UI.Common.Number2Property";
    var _9 = "Game.UI.Common.Number2Property";
    var b9 = "Game.UI.Common.StringProperty";
    function T9(e) {
      return "minValue" in e && "maxValue" in e;
    }
    function E9(e) {
      return "value" in e && "number" == typeof e.value;
    }
    X.add("game-ui/common/property-field/typed-property.ts", {
      get NUMBER_PROPERTY() {
        return x9;
      },
      set NUMBER_PROPERTY(e) {
        x9 = e;
      },
      get NUMBER2_PROPERTY() {
        return v9;
      },
      set NUMBER2_PROPERTY(e) {
        v9 = e;
      },
      get NUMBER_RANGE_PROPERTY() {
        return _9;
      },
      set NUMBER_RANGE_PROPERTY(e) {
        _9 = e;
      },
      get STRING_PROPERTY() {
        return b9;
      },
      set STRING_PROPERTY(e) {
        b9 = e;
      },
      get isNumberRange() {
        return T9;
      },
      set isNumberRange(e) {
        T9 = e;
      },
      get isNumber() {
        return E9;
      },
      set isNumber(e) {
        E9 = e;
      }
    });
    let I9 = {
      field: "field_AjF",
      icon: "icon_WOc",
      content: "content_dov"
    };
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/effect-field.module.scss", {
      get classes() {
        return I9;
      },
      set classes(e) {
        Object.assign(I9, e);
      }
    });
    const S9 = ({
      type: e,
      delta: t,
      unit: n
    }) => {
      0;
      const s = Y.useMemo(() => function (e) {
        switch (e) {
          case _C.Attractiveness:
            return "Media/Game/Icons/Tourism.svg";
          case _C.CrimeAccumulation:
          case _C.PoliceStationUpkeep:
            return "Media/Game/Icons/Police.svg";
          case _C.DisasterWarningTime:
          case _C.DisasterDamageRate:
            return "Media/Game/Icons/Disaster.svg";
          case _C.DiseaseProbability:
            return "Media/Game/Icons/Healthcare.svg";
          case _C.ParkEntertainment:
            return "Media/Game/Icons/ParksAndRecreation.svg";
          case _C.CriminalMonitorProbability:
            return "Media/Game/Icons/Police.svg";
          case _C.IndustrialAirPollution:
            return "Media/Game/Icons/AirPollution.svg";
          case _C.IndustrialGroundPollution:
            return "Media/Game/Icons/GroundPollution.svg";
          case _C.IndustrialGarbage:
            return "Media/Game/Icons/Garbage.svg";
          case _C.RecoveryFailChange:
            return "Media/Game/Icons/Healthcare.svg";
          case _C.OreResourceAmount:
            return "Media/Game/Icons/Coal.svg";
          case _C.OilResourceAmount:
            return "Media/Game/Icons/Oil.svg";
          case _C.UniversityInterest:
            return "Media/Game/Icons/Education.svg";
          case _C.OfficeSoftwareDemand:
            return "Media/Game/Icons/ZoneOfficeHigh.svg";
          case _C.IndustrialElectronicsDemand:
            return "Media/Game/Icons/ZoneIndustrialManufacturing.svg";
          case _C.OfficeSoftwareEfficiency:
            return "Media/Game/Icons/ZoneOfficeHigh.svg";
          case _C.IndustrialElectronicsEfficiency:
            return "Media/Game/Icons/ZoneIndustrialManufacturing.svg";
          case _C.TelecomCapacity:
            return "Media/Game/Icons/Telecom.svg";
          case _C.Entertainment:
            return "Media/Game/Icons/Entertainment.svg";
          case _C.HighwayTrafficSafety:
            return "Media/Game/Icons/Roads.svg";
          case _C.PrisonTime:
          case _C.CrimeProbability:
            return "Media/Game/Icons/Police.svg";
          case _C.CollegeGraduation:
          case _C.UniversityGraduation:
            return "Media/Game/Icons/Graduation.svg";
          case _C.ImportCost:
            return "Media/Game/Icons/OutsideConnections.svg";
          case _C.LoanInterest:
            return "Media/Game/Icons/Money.svg";
          case _C.BuildingLevelingCost:
            return "Media/Game/Icons/BuildingLevel.svg";
          case _C.ExportCost:
            return "Media/Game/Icons/OutsideConnections.svg";
          case _C.TaxiStartingFee:
            return "Media/Game/Icons/Taxi.svg";
          case _C.IndustrialEfficiency:
            return "Media/Game/Icons/ZoneIndustrial.svg";
          case _C.OfficeEfficiency:
            return "Media/Game/Icons/ZoneOffice.svg";
          case _C.PollutionHealthAffect:
            return "Media/Game/Icons/AirPollution.svg";
          case _C.HospitalEfficiency:
            return "Media/Game/Icons/Healthcare.svg";
          default:
            console.warn(`Missing icon for CityModifierType.${e}!`);
            return "Media/Placeholder.svg";
        }
      }(e), [e]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: I9.field,
        children: [z.jsx("img", {
          src: s,
          className: I9.icon
        }), z.jsx("div", {
          className: I9.content,
          children: z.jsx(Pc.Properties.CITY_MODIFIER_EFFECT, {
            TYPE: z.jsx(Pc.Properties.CITY_MODIFIER, {
              hash: e
            }),
            DELTA: z.jsx(Gc, {
              value: t,
              unit: n,
              signed: true
            })
          })
        })]
      });
    };
    const j9 = ({
      type: e,
      delta: t,
      unit: n,
      radius: s
    }) => {
      0;
      const i = Y.useMemo(() => function (e) {
        switch (e) {
          case bC.CrimeAccumulation:
            return "Media/Game/Icons/Police.svg";
          case bC.ForestFireResponseTime:
          case bC.ForestFireHazard:
            return "Media/Game/Icons/FireSafety.svg";
          case bC.Wellbeing:
            return "Media/Game/Icons/WellBeing.svg";
          case bC.Health:
            return "Media/Game/Icons/Healthcare.svg";
          default:
            console.warn(`Missing icon for LocalModifierType.${e}!`);
            return "Media/Placeholder.svg";
        }
      }(e), [e]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: I9.field,
        children: [z.jsx("img", {
          src: i,
          className: I9.icon
        }), z.jsx("div", {
          className: I9.content,
          children: z.jsx(Pc.Properties.LOCAL_MODIFIER_EFFECT, {
            TYPE: z.jsx(Pc.Properties.LOCAL_MODIFIER, {
              hash: e
            }),
            DELTA: z.jsx(Gc, {
              value: t,
              unit: n,
              signed: true
            }),
            RADIUS: z.jsx(Gc, {
              value: s,
              unit: Oc.Length
            })
          })
        })]
      });
    };
    const C9 = ({
      type: e,
      efficiency: t
    }) => {
      0;
      const n = Y.useMemo(() => function (e) {
        switch (e) {
          case TC.Meals:
            return "Media/Game/Icons/Meals.svg";
          case TC.Entertainment:
            return "Media/Game/Icons/Entertainment.svg";
          case TC.Commercial:
            return "Media/Game/Icons/Commercial.svg";
          case TC.CityIndoors:
            return "Media/Game/Icons/CityIndoors.svg";
          case TC.Travel:
            return "Media/Game/Icons/Travel.svg";
          case TC.CityPark:
            return "Media/Game/Icons/CityPark.svg";
          case TC.CityBeach:
            return "Media/Game/Icons/CityBeach.svg";
          case TC.Attractions:
            return "Media/Game/Icons/Attractions.svg";
          case TC.Relaxation:
            return "Media/Game/Icons/Relaxation.svg";
          case TC.Sightseeing:
            return "Media/Game/Icons/Sightseeing.svg";
          default:
            console.warn(`Missing icon for LeisureType.${e}!`);
            return "Media/Placeholder.svg";
        }
      }(e), [e]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: I9.field,
        children: [z.jsx("img", {
          src: n,
          className: I9.icon
        }), z.jsx("div", {
          className: I9.content,
          children: z.jsx(Pc.Properties.LEISURE_PROVIDER_EFFECT, {
            TYPE: z.jsx(Pc.Properties.LEISURE_TYPE, {
              hash: e
            }),
            EFFICIENCY: z.jsx(Gc, {
              value: t,
              unit: Oc.Integer,
              signed: true
            })
          })
        })]
      });
    };
    const N9 = ({
      effect: e,
      targetKey: t,
      icon: n,
      typeKey: s
    }) => (0, z.jsxs)("div", {
      className: I9.field,
      children: [(0, z.jsx)("img", {
        src: n,
        className: I9.icon
      }), (0, z.jsx)("div", {
        className: I9.content,
        children: (0, z.jsx)(Pc.Properties.ADJUST_HAPPINESS_MODIFIER_EFFECT, {
          TYPE: (0, z.jsx)(Pc.Properties.ADJUST_HAPPINESS_MODIFIER_TYPE, {
            hash: s
          }),
          DELTA: (0, z.jsx)(Gc, {
            value: e,
            unit: Oc.Percentage,
            signed: true
          }),
          TARGET: (0, z.jsx)(Pc.Properties.ADJUST_HAPPINESS_MODIFIER_TARGET, {
            hash: t
          })
        })
      })]
    });
    var w9 = {
      [vC.CityModifier]: ({
        modifiers: e
      }) => (0, z.jsx)(z.Fragment, {
        children: e.map((e, t) => (0, z.jsx)(S9, {
          ...e
        }, t))
      }),
      [vC.LocalModifier]: ({
        modifiers: e
      }) => (0, z.jsx)(z.Fragment, {
        children: e.map((e, t) => (0, z.jsx)(j9, {
          ...e
        }, t))
      }),
      [vC.LeisureProvider]: ({
        providers: e
      }) => (0, z.jsx)(z.Fragment, {
        children: e.map((e, t) => (0, z.jsx)(C9, {
          ...e
        }, t))
      }),
      [vC.AdjustHappinessEffect]: ({
        wellbeingEffect: e,
        healthEffect: t,
        targets: n
      }) => (0, z.jsxs)(z.Fragment, {
        children: [e > 0 && n.map(t => (0, z.jsx)(N9, {
          effect: e,
          targetKey: t,
          icon: "Media/Game/Icons/WellBeing.svg",
          typeKey: "Wellbeing"
        }, t)), t > 0 && n.map(e => (0, z.jsx)(N9, {
          effect: t,
          targetKey: e,
          icon: "Media/Game/Icons/Healthcare.svg",
          typeKey: "Health"
        }, e))]
      })
    };
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/effect-field.tsx", {
      get prefabEffectComponents() {
        return w9;
      },
      set prefabEffectComponents(e) {
        w9 = e;
      }
    });
    var O9 = ({
      labelId: e,
      unit: t,
      value: n,
      signed: s,
      icon: i,
      valueIcon: a
    }) => (0, z.jsx)(z6, {
      label: (0, z.jsx)(Tc, {
        id: e
      }),
      icon: i,
      valueIcon: a,
      children: (0, z.jsx)(Gc, {
        value: n,
        unit: t,
        signed: s
      })
    });
    var P9 = ({
      labelId: e,
      unit: t,
      value: n,
      signed: s,
      icon: i,
      valueIcon: a
    }) => {
      const o = t.includes("money");
      0;
      0;
      0;
      0;
      return z.jsxs(z6, {
        label: z.jsx(Tc, {
          id: e
        }),
        icon: i,
        valueIcon: a,
        children: [z.jsx(Gc, {
          value: n.x,
          unit: o ? Oc.Money : undefined
        }), "–", z.jsx(Gc, {
          value: n.y,
          unit: t,
          signed: s
        })]
      });
    };
    var L9 = ({
      labelId: e,
      valueId: t,
      icon: n,
      valueIcon: s
    }) => (0, z.jsx)(z6, {
      label: (0, z.jsx)(Tc, {
        id: e
      }),
      icon: n,
      valueIcon: s,
      children: (0, z.jsx)(Tc, {
        id: t
      })
    });
    var A9 = {
      [x9]: O9,
      [v9]: P9,
      [b9]: L9
    };
    X.add("game-ui/common/property-field/typed-property-field.tsx", {
      get NumberPropertyField() {
        return O9;
      },
      set NumberPropertyField(e) {
        O9 = e;
      },
      get Number2PropertyField() {
        return P9;
      },
      set Number2PropertyField(e) {
        P9 = e;
      },
      get StringPropertyField() {
        return L9;
      },
      set StringPropertyField(e) {
        L9 = e;
      },
      get propertyFieldComponents() {
        return A9;
      },
      set propertyFieldComponents(e) {
        A9 = e;
      }
    });
    let M9 = {
      field: "field_rIn",
      header: "header_lrj",
      content: "content_RIT",
      icon: "icon_tiy",
      "value-icon": "value-icon_Yob",
      valueIcon: "value-icon_Yob",
      value: "value_Yc3"
    };
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/property-field.module.scss", {
      get classes() {
        return M9;
      },
      set classes(e) {
        Object.assign(M9, e);
      }
    });
    const k9 = {
      ...A9,
      [LC]: O9,
      [AC]: P9,
      [SC]: ({
        electricityConsumption: e,
        waterConsumption: t,
        garbageAccumulation: n
      }) => (0, z.jsxs)(z.Fragment, {
        children: [e > 0 && (0, z.jsx)(z6, {
          label: (0, z.jsx)(Pc.Properties.ELECTRICITY_CONSUMPTION, {}),
          children: (0, z.jsx)(Gc, {
            value: e,
            unit: Oc.Power
          })
        }), t > 0 && (0, z.jsx)(z6, {
          label: (0, z.jsx)(Pc.Properties.WATER_CONSUMPTION, {}),
          children: (0, z.jsx)(Gc, {
            value: t,
            unit: Oc.VolumePerMonth
          })
        }), n > 0 && (0, z.jsx)(z6, {
          label: (0, z.jsx)(Pc.Properties.GARBAGE_ACCUMULATION, {}),
          children: (0, z.jsx)(Gc, {
            value: n,
            unit: Oc.WeightPerMonth
          })
        })]
      }),
      [jC]: ({
        groundPollution: e,
        airPollution: t,
        noisePollution: n
      }) => (0, z.jsxs)(z.Fragment, {
        children: [e > yC.none && (0, z.jsxs)(z6, {
          label: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_GROUND, {}),
          children: [(0, z.jsx)("img", {
            src: "Media/Game/Icons/GroundPollution.svg",
            className: M9.icon
          }), (0, z.jsx)("div", {
            className: M9.value,
            children: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
              index: e
            })
          })]
        }), t > yC.none && (0, z.jsxs)(z6, {
          label: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_AIR, {}),
          children: [(0, z.jsx)("img", {
            src: "Media/Game/Icons/AirPollution.svg",
            className: M9.icon
          }), (0, z.jsx)("div", {
            className: M9.value,
            children: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
              index: t
            })
          })]
        }), n > yC.none && (0, z.jsxs)(z6, {
          label: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_NOISE, {}),
          children: [(0, z.jsx)("img", {
            src: "Media/Game/Icons/NoisePollution.svg",
            className: M9.icon
          }), (0, z.jsx)("div", {
            className: M9.value,
            children: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
              index: n
            })
          })]
        })]
      }),
      [NC]: ({
        labelId: e,
        minCapacity: t,
        maxCapacity: n,
        voltage: s
      }) => (0, z.jsx)(z6, {
        label: (0, z.jsx)(Tc, {
          id: e
        }),
        children: (0, z.jsx)(Pc.Properties.POWER_VOLTAGE_FORMAT, {
          VALUE: (0, z.jsx)(au, {
            min: t,
            max: n,
            unit: Oc.Power
          }),
          VOLTAGE: (0, z.jsx)(Pc.Properties.VOLTAGE, {
            index: s
          })
        })
      }),
      [PC]: ({
        stops: e
      }) => (0, z.jsx)(z.Fragment, {
        children: Object.entries(e).map(([e, t], n) => t > 0 && (0, z.jsx)(z6, {
          label: (0, z.jsx)(Pc.Properties.TRANSPORT_STOP_COUNT, {
            hash: e
          }),
          children: (0, z.jsx)(Gc, {
            value: t,
            unit: Oc.Integer
          })
        }, n))
      })
    };
    var D9 = ({
      data: e
    }) => (0, z.jsx)(W6.Provider, {
      value: M9,
      children: (0, z.jsx)(lM, {
        components: k9,
        data: e
      })
    });
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/property-field.tsx", {
      get PrefabPropertyFields() {
        return D9;
      },
      set PrefabPropertyFields(e) {
        D9 = e;
      }
    });
    let F9 = {
      "asset-detail-panel": "asset-detail-panel_hf8",
      assetDetailPanel: "asset-detail-panel_hf8",
      "title-bar": "title-bar_I7O child-opacity-transition_nkS",
      titleBar: "title-bar_I7O child-opacity-transition_nkS",
      title: "title_qub",
      "construction-cost-field": "construction-cost-field_I8G",
      constructionCostField: "construction-cost-field_I8G",
      "not-enough-money": "not-enough-money_vtd",
      notEnoughMoney: "not-enough-money_vtd",
      "construction-cost-value": "construction-cost-value_u95",
      constructionCostValue: "construction-cost-value_u95",
      "construction-cost-icon": "construction-cost-icon_hgB",
      constructionCostIcon: "construction-cost-icon_hgB",
      row: "row_H0d child-opacity-transition_nkS",
      content: "content_rep row_H0d child-opacity-transition_nkS",
      "preview-container": "preview-container_sPA",
      previewContainer: "preview-container_sPA",
      preview: "preview_MDY",
      column: "column_dTT",
      description: "description_ZQn",
      effects: "effects_y8n",
      "stats-row": "stats-row_Q3F row_H0d child-opacity-transition_nkS",
      statsRow: "stats-row_Q3F row_H0d child-opacity-transition_nkS",
      "requirements-row": "requirements-row_yaX row_H0d child-opacity-transition_nkS",
      requirementsRow: "requirements-row_yaX row_H0d child-opacity-transition_nkS",
      "already-built-row": "already-built-row_NJp row_H0d child-opacity-transition_nkS",
      alreadyBuiltRow: "already-built-row_NJp row_H0d child-opacity-transition_nkS"
    };
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/asset-detail-panel.module.scss", {
      get classes() {
        return F9;
      },
      set classes(e) {
        Object.assign(F9, e);
      }
    });
    var B9 = Y.forwardRef(function ({
      entity: e,
      selectedCategory: t,
      className: n,
      upgrade: s = false
    }, i) {
      const a = km();
      const o = ll(uT, e) ?? mT;
      const r = ll(YL, e) ?? mT;
      const l = ll(uT, t) ?? undefined;
      const c = s ? r : o;
      const u = c.properties.length > 0;
      const d = c.locked && c.requirements.requireAll.length + c.requirements.requireAny.length > 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(F9.assetDetailPanel, n),
        ref: i,
        children: [a && l && (0, z.jsxs)("div", {
          children: [(0, z.jsx)("div", {
            className: F9.titleBar,
            children: (0, z.jsx)("div", {
              className: F9.title,
              children: (0, z.jsx)(Tc, {
                id: l.titleId
              })
            })
          }), (0, z.jsx)("div", {
            className: F9.content,
            children: (0, z.jsx)("div", {
              className: F9.column,
              children: null != l.descriptionId && (0, z.jsx)(bb, {
                className: F9.description,
                children: (0, z.jsx)(Tc, {
                  id: l.descriptionId
                })
              })
            })
          })]
        }), z.jsxs("div", {
          children: [z.jsxs("div", {
            className: F9.titleBar,
            children: [z.jsx("div", {
              className: F9.title,
              children: z.jsx(Tc, {
                id: c.titleId
              })
            }), null != c.constructionCost && (T9(c.constructionCost) ? (0, z.jsx)(V9, {
              minValue: c.constructionCost.minValue,
              maxValue: c.constructionCost.maxValue,
              unit: c.constructionCost.unit
            }) : E9(c.constructionCost) ? (0, z.jsx)(G9, {
              value: c.constructionCost.value,
              unit: c.constructionCost.unit
            }) : (0, z.jsx)(H9, {
              value: c.constructionCost.value,
              unit: c.constructionCost.unit
            }))]
          }), z.jsxs("div", {
            className: F9.content,
            children: [z.jsx("div", {
              className: F9.previewContainer,
              children: z.jsx("img", {
                src: c.icon,
                className: F9.preview
              })
            }), z.jsxs("div", {
              className: F9.column,
              children: [null != c.descriptionId && (0, z.jsx)(bb, {
                className: F9.description,
                children: (0, z.jsx)(Tc, {
                  id: c.descriptionId
                })
              }), c.effects.length > 0 && (0, z.jsx)("div", {
                className: F9.effects,
                children: (0, z.jsx)(lM, {
                  components: w9,
                  data: c.effects
                })
              })]
            })]
          }), u && (0, z.jsx)("div", {
            className: F9.statsRow,
            children: (0, z.jsx)(D9, {
              data: c.properties
            })
          }), d && (0, z.jsx)(Y3, {
            requirements: c.requirements,
            className: F9.requirementsRow
          }), c.uniquePlaced && (0, z.jsx)("div", {
            className: F9.alreadyBuiltRow,
            children: (0, z.jsx)(Pc.Toolbar.ASSET_ALREADY_BUILT, {})
          })]
        })]
      });
    });
    var G9 = ({
      value: e,
      unit: t
    }) => {
      const n = sl(bL);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(F9.constructionCostField, e > 0 && n < e && F9.notEnoughMoney),
        children: [z.jsx("div", {
          children: z.jsx(Gc, {
            value: e,
            unit: t
          })
        }), z.jsx(W_, {
          src: "Media/Glyphs/Money.svg",
          className: F9.constructionCostIcon
        })]
      });
    };
    var V9 = ({
      minValue: e,
      maxValue: t,
      unit: n
    }) => {
      const s = sl(bL);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(F9.constructionCostField, t > 0 && s < t && F9.notEnoughMoney),
        children: [z.jsxs("div", {
          className: F9.constructionCostValue,
          children: [z.jsx(Gc, {
            value: e,
            unit: n
          }), t !== e && (0, z.jsxs)(z.Fragment, {
            children: ["-", (0, z.jsx)(Gc, {
              value: t,
              unit: n
            })]
          })]
        }), z.jsx(W_, {
          src: "Media/Glyphs/Money.svg",
          className: F9.constructionCostIcon
        })]
      });
    };
    var H9 = ({
      value: e,
      unit: t
    }) => {
      const n = sl(bL);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(F9.constructionCostField, e.x > 0 && n < e.x && F9.notEnoughMoney),
        children: [z.jsx("div", {
          children: z.jsx(Gc, {
            value: e.y,
            unit: t
          })
        }), z.jsx(W_, {
          src: "Media/Glyphs/Money.svg",
          className: F9.constructionCostIcon
        })]
      });
    };
    function K9(e, t, n) {
      0;
      return Y.useMemo(() => {
        if (null == n) {
          return [];
        }
        const s = n * t;
        if (s >= e.length) {
          return [];
        }
        const i = Math.min(s + t, e.length);
        return e.slice(s, i);
      }, [n, t, e]);
    }
    X.add("game-ui/game/components/asset-menu/asset-detail-panel/asset-detail-panel.tsx", {
      get AssetDetailPanel() {
        return B9;
      },
      set AssetDetailPanel(e) {
        B9 = e;
      },
      get ConstructionCost() {
        return G9;
      },
      set ConstructionCost(e) {
        G9 = e;
      },
      get ConstructionRangeCost() {
        return V9;
      },
      set ConstructionRangeCost(e) {
        V9 = e;
      },
      get NetConstructionCost() {
        return H9;
      },
      set NetConstructionCost(e) {
        H9 = e;
      }
    });
    X.add("game-ui/common/hooks/use-page-items.ts", {
      get usePageItems() {
        return K9;
      },
      set usePageItems(e) {
        K9 = e;
      }
    });
    var W9 = (e, t = "min") => e && e.constructionCost ? T9(e.constructionCost) ? e.constructionCost.maxValue : E9(e.constructionCost) ? e.constructionCost.value : e.constructionCost.value["min" === t ? "x" : "y"] : 0;
    X.add("game-ui/common/utils/getters.ts", {
      get getConstructionCost() {
        return W9;
      },
      set getConstructionCost(e) {
        W9 = e;
      }
    });
    let z9 = {
      "dlc-badge": "dlc-badge_bHS",
      dlcBadge: "dlc-badge_bHS"
    };
    X.add("game-ui/game/components/asset-menu/badges/dlc-badge.module.scss", {
      get classes() {
        return z9;
      },
      set classes(e) {
        Object.assign(z9, e);
      }
    });
    var $9 = ({
      icon: e,
      style: t,
      className: n
    }) => (0, z.jsx)("img", {
      src: e,
      className: Qu()(z9.dlcBadge, n),
      style: t
    });
    X.add("game-ui/game/components/asset-menu/badges/dlc-badge.tsx", {
      get DlcBadge() {
        return $9;
      },
      set DlcBadge(e) {
        $9 = e;
      }
    });
    let q9 = {
      "asset-grid": "asset-grid_H7_",
      assetGrid: "asset-grid_H7_",
      content: "content_O28",
      row: "row_nrc",
      item: "item_KJ3 item-hover_WK8 item-active_Spn",
      thumbnail: "thumbnail_kkU",
      "not-enough-money": "not-enough-money__6E",
      notEnoughMoney: "not-enough-money__6E",
      "item-inner": "item-inner_hCN",
      itemInner: "item-inner_hCN",
      highlight: "highlight_VDQ",
      lock: "lock_w5T",
      dlc: "dlc_iKq",
      theme: "theme_lZg",
      "already-built": "already-built_NqB",
      alreadyBuilt: "already-built_NqB",
      "not-enough-money-badge": "not-enough-money-badge_S3U",
      notEnoughMoneyBadge: "not-enough-money-badge_S3U",
      "page-indicators": "page-indicators_Z3v",
      pageIndicators: "page-indicators_Z3v",
      "page-indicator": "page-indicator_zOa",
      pageIndicator: "page-indicator_zOa"
    };
    X.add("game-ui/game/components/asset-menu/asset-grid/asset-grid.module.scss", {
      get classes() {
        return q9;
      },
      set classes(e) {
        Object.assign(q9, e);
      }
    });
    var Z9 = ({
      className: e
    }) => {
      0;
      const t = Y.useRef(null);
      0;
      const [n, s] = Y.useState(false);
      og(dT.value?.assetGrid, n);
      const i = sl(rL);
      const a = sl(lL);
      const o = ll(eL, i);
      const r = xp(pL);
      const l = Math.ceil(o.length / 18);
      const c = e7(o, 18, a);
      const u = K9(o, 18, c);
      0;
      const d = Y.useCallback(e => {
        const t = o.findIndex(e => Ur(e.entity, a)) % 2;
        if (e < 0) {
          if (c < l - 1) {
            const e = Math.min((c + 1) * 18 + t, o.length - 1);
            pL(o[e].entity);
            return true;
          }
        } else if (e > 0 && c > 0) {
          pL(o[(c - 1) * 18 + 9 + t].entity);
          return true;
        }
        return false;
      }, [o, l, a, c]);
      0;
      const m = Y.useMemo(() => ({
        "Move Vertical": d
      }), [d]);
      0;
      Y.useEffect(() => {
        const e = t.current;
        if (null === e) {
          return;
        }
        const n = e => {
          e.preventDefault();
          const t = e.deltaY > 0 ? -1 : e.deltaY < 0 ? 1 : 0;
          d(t);
        };
        e.addEventListener("wheel", n);
        return () => e.removeEventListener("wheel", n);
      }, [d]);
      0;
      const h = Y.useMemo(() => (0, z.jsxs)(Lh, {
        onFocusChange: s,
        children: [(0, z.jsx)("div", {
          ref: t,
          className: q9.content,
          children: (0, z.jsx)(Xg, {
            focused: Dr(a),
            onChange: r,
            children: [...Array(2)].map((e, t) => (0, z.jsx)("div", {
              className: q9.row,
              children: u.slice(9 * t, 9 * (t + 1)).map(e => (0, z.jsx)(J9, {
                asset: e,
                selected: Ur(e.entity, a),
                onSelect: pL
              }, Dr(e.entity)))
            }, t))
          })
        }), (0, z.jsx)("div", {
          className: q9.pageIndicators,
          children: l > 1 && [...Array(l).keys()].map(e => (0, z.jsx)("div", {
            onClick: () => pL(o[e * 18].entity),
            className: Qu()(q9.pageIndicator, e === c && "selected")
          }, e))
        })]
      }), [o, r, l, u, a, c]);
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(Lg, {
          actions: m,
          disabled: l < 2,
          children: z.jsx("div", {
            className: Qu()(q9.assetGrid, e),
            children: Lp(h)
          })
        })
      });
    };
    const J9 = ({
      asset: e,
      selected: t,
      onSelect: n
    }) => {
      ag(e.uiTag, t && !e.locked);
      og(e.uiTag, t && !e.locked);
      0;
      const [s, i] = Y.useState(false);
      0;
      const a = Y.useContext(u9);
      const o = sl(bL);
      0;
      const r = Y.useCallback(() => n(e.entity), [e.entity, n]);
      0;
      const l = Y.useCallback(() => a && a.showDetails(e.entity), [e.entity, a]);
      0;
      const c = Y.useCallback(() => a && a.hideDetails(e.entity), [e.entity, a]);
      const u = W9(e);
      const d = !e.locked && u > 0 && o < u;
      const m = km() && s;
      0;
      Y.useEffect(() => {
        if (null != a) {
          if (m) {
            a.showDetails(e.entity);
          } else {
            a.hideDetails(e.entity);
          }
        }
      }, [e.entity, a, m]);
      const h = e.locked || e.uniquePlaced;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: e.uiTag,
        disableBlinking: t,
        active: !e.locked,
        children: z.jsx(Lh, {
          onFocusChange: i,
          children: z.jsx(bg, {
            tooltip: !a && (0, z.jsx)(Pc.Assets.NAME, {
              hash: e.name
            }),
            children: z.jsxs(L_, {
              disableHint: true,
              focusKey: Dr(e.entity),
              selected: t,
              className: Qu()(q9.item, d && q9.notEnoughMoney),
              onClick: r,
              disabled: h,
              onMouseOver: l,
              onMouseLeave: c,
              children: [z.jsx("div", {
                className: q9.itemInner
              }), z.jsx("img", {
                src: e.icon,
                onError: V_,
                className: q9.thumbnail
              }), e.uniquePlaced && (0, z.jsx)("img", {
                src: "Media/Game/Icons/AlreadyBuilt.svg",
                className: q9.alreadyBuilt
              }), d && !h && (0, z.jsx)("img", {
                src: "Media/Game/Icons/NoMoney.svg",
                className: q9.notEnoughMoneyBadge
              }), e.highlight && (0, z.jsx)(OJ, {
                className: q9.highlight
              }), e.locked && (0, z.jsx)(kX, {
                className: q9.lock
              }), e.dlc && (0, z.jsx)($9, {
                icon: e.dlc,
                className: q9.dlc
              }), e.theme && (0, z.jsx)($9, {
                icon: e.theme,
                className: q9.theme
              })]
            })
          })
        })
      });
    };
    function e7(e, t, n) {
      if (0 === t) {
        return 0;
      }
      const s = e.findIndex(e => Ur(e.entity, n));
      return -1 === s ? 0 : Math.trunc(s / t);
    }
    X.add("game-ui/game/components/asset-menu/asset-grid/asset-grid.tsx", {
      get AssetGrid() {
        return Z9;
      },
      set AssetGrid(e) {
        Z9 = e;
      },
      get getSelectedPage() {
        return e7;
      },
      set getSelectedPage(e) {
        e7 = e;
      }
    });
    let t7 = {
      "asset-panel": "asset-panel_VFR",
      assetPanel: "asset-panel_VFR",
      "gamepad-active": "gamepad-active_KKW",
      gamepadActive: "gamepad-active_KKW",
      "detail-container": "detail-container_E9q",
      detailContainer: "detail-container_E9q",
      "detail-panel": "detail-panel_izf",
      detailPanel: "detail-panel_izf",
      hints: "hints_v_M",
      back: "back_VjD",
      hint: "hint_ByX"
    };
    X.add("game-ui/game/components/asset-menu/asset-menu.module.scss", {
      get classes() {
        return t7;
      },
      set classes(e) {
        Object.assign(t7, e);
      }
    });
    var s7 = ({
      focusKey: e,
      className: t,
      onClose: n
    }) => {
      up(lp);
      const s = Lp(sl(oL));
      const i = Lp(sl(rL));
      const a = ll(JP, s);
      const o = km();
      0;
      const [r, l] = Y.useState(Xp);
      0;
      const c = Y.useRef(null);
      const u = !Ur(r, Xp);
      0;
      const d = Y.useMemo(() => ({
        showDetails: e => {
          if (c.current !== e) {
            l(e);
            c.current = null;
          }
        },
        hideDetails: e => l(t => Ur(t, e) ? Xp : t)
      }), []);
      0;
      Y.useEffect(() => {
        if (o && u) {
          const e = ym.subscribe(e => {
            if (e) {
              l(Xp);
              c.current = r;
            }
          });
          const t = Sm.subscribe(e => {
            if (e) {
              l(Xp);
              c.current = r;
            }
          });
          return () => {
            e.dispose();
            t.dispose();
          };
        }
      }, [o, r, u]);
      const m = ll(uT, s);
      ag(m?.uiTag, !m?.locked);
      og(m?.uiTag);
      0;
      const h = Y.useMemo(() => ({
        Close: n,
        "Switch Tab": a.length >= 2 ? e => {
          const t = a.findIndex(e => Ur(e.entity, i));
          if (e < 0) {
            const e = rw(t, a.length, true);
            if (null != e) {
              gL(a[e].entity);
              rp(op.selectPreviousItem);
            }
          } else if (e > 0) {
            const e = aw(t, a.length, true);
            if (null != e) {
              gL(a[e].entity);
              rp(op.selectNextItem);
            }
          }
        } : null
      }), [a, n, i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: h,
        children: z.jsx(dh, {
          styles: l9,
          children: z.jsxs(Ep, {
            focusKey: e,
            className: t,
            children: [z.jsx("div", {
              className: t7.detailContainer,
              children: u && (0, z.jsx)(B9, {
                entity: r,
                selectedCategory: i,
                className: t7.detailPanel
              }, "details")
            }), z.jsx(u9.Provider, {
              value: d,
              children: z.jsx(ZT, {
                className: Qu()(t7.assetPanel, o && t7.gamepadActive),
                header: a.length > 0 ? (0, z.jsx)(p9, {
                  categories: a,
                  selectedCategory: i,
                  onChange: gL,
                  onClose: n
                }) : undefined,
                children: z.jsx(Z9, {})
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/asset-menu/asset-menu.tsx", {
      get AssetMenu() {
        return s7;
      },
      set AssetMenu(e) {
        s7 = e;
      }
    });
    let i7 = {
      header: "header_emp header_Bpo child-opacity-transition_nkS",
      content: "content__Ej content_AD7 child-opacity-transition_nkS",
      footer: "footer_kk9 footer_pD5 child-opacity-transition_nkS",
      title: "title_h2h title_zQN"
    };
    X.add("game-ui/common/panel/themes/light-opaque.module.scss", {
      get classes() {
        return i7;
      },
      set classes(e) {
        Object.assign(i7, e);
      }
    });
    var o7 = Xr("avatars", "avatarsMap");
    X.add("game-ui/game/data-binding/avatars.ts", {
      get avatars() {
        return avatars;
      },
      set avatars(e) {
        avatars = e;
      }
    });
    let r7 = {
      avatar: "avatar_zAS",
      initial: "initial_SNA"
    };
    X.add("game-ui/game/components/avatars/avatars.module.scss", {
      get classes() {
        return r7;
      },
      set classes(e) {
        Object.assign(r7, e);
      }
    });
    var c7 = ({
      entity: e,
      className: t
    }) => {
      const n = ll(o7, e);
      0;
      0;
      return z.jsx("div", {
        className: Qu()(r7.avatar, t),
        style: {
          backgroundColor: tN(n.color)
        },
        children: z.jsx("img", {
          src: n.picture ?? "Media/Game/Misc/ChirperBlankAvatar.svg"
        })
      });
    };
    var u7 = ({
      entity: e,
      className: t
    }) => {
      const n = ll(o7, e);
      const s = Ku(n.name).split(" ");
      0;
      return z.jsx("div", {
        className: Qu()(r7.avatar, t),
        style: {
          backgroundColor: tN(n.color)
        },
        children: s.map((e, t) => (0, z.jsx)("div", {
          className: r7.initial,
          children: e.substring(0, 1)
        }, t))
      });
    };
    var d7 = ({
      entity: e,
      focusKey: t,
      showHint: n = false,
      disabled: s,
      className: i,
      onSelect: a
    }) => {
      const o = ll(o7, e);
      0;
      return z.jsx($_, {
        disableHint: !n,
        focusKey: t,
        src: o.picture ?? "Media/Game/Misc/ChirperBlankAvatar.svg",
        disabled: s,
        className: Qu()(r7.avatar, o.picture?.endsWith(".svg") && r7.padded, i),
        style: {
          backgroundColor: tN(o.color)
        },
        onSelect: a
      });
    };
    X.add("game-ui/game/components/avatars/avatars.tsx", {
      get Avatar() {
        return c7;
      },
      set Avatar(e) {
        c7 = e;
      },
      get AvatarInitials() {
        return u7;
      },
      set AvatarInitials(e) {
        u7 = e;
      },
      get AvatarButton() {
        return d7;
      },
      set AvatarButton(e) {
        d7 = e;
      }
    });
    let m7 = {
      "chirp-layout": "chirp-layout_IRk",
      chirpLayout: "chirp-layout_IRk",
      content: "content_ysS",
      header: "header_eEy",
      sender: "sender_lDZ",
      date: "date_GKh",
      message: "message_Y0C",
      footer: "footer_3qO",
      "like-button": "like-button_LNZ",
      likeButton: "like-button_LNZ",
      liked: "liked_F9N",
      "select-hint": "select-hint_Y13",
      selectHint: "select-hint_Y13",
      "likes-hint": "likes-hint_Pko",
      likesHint: "likes-hint_Pko",
      "hint-icon": "hint-icon_wIk",
      hintIcon: "hint-icon_wIk"
    };
    X.add("game-ui/game/components/chirper/items/chirp-layout.module.scss", {
      get classes() {
        return m7;
      },
      set classes(e) {
        Object.assign(m7, e);
      }
    });
    const g7 = {
      tension: 30,
      friction: 10
    };
    const p7 = {
      icon: m7.hintIcon
    };
    0;
    var f7 = Y.memo(function ({
      focusKey: e,
      chirp: t,
      className: n
    }) {
      0;
      const [s, i] = Y.useState(false);
      0;
      const a = Y.useCallback(() => {
        if (t.liked) {
          Xy(t.entity);
        } else {
          qy(t.entity);
        }
      }, [t.entity, t.liked]);
      0;
      const o = Y.useCallback(() => {
        Qy(t.sender.link.target);
      }, [t]);
      0;
      const r = Y.useMemo(() => ({
        "Select Chirp Sender": () => {
          rp(op.selectItem);
          o();
        },
        "Like Chirp": t.liked ? null : () => {
          rp(op.likeChirp);
          qy(t.entity);
        },
        "Unlike Chirp": t.liked ? () => {
          rp(op.likeChirp);
          Xy(t.entity);
        } : null
      }), [t.entity, t.liked, o]);
      const l = sl(yO);
      const c = RO(l, sl(jO));
      0;
      const u = Y.useMemo(() => DO(l, t.date), [t.date, l]);
      const d = Wu();
      0;
      const m = Y.useMemo(() => d(t.sender.link.name), [t.sender.link.name, d]);
      const h = function (e, t) {
        0;
        const n = Y.useMemo(() => e.links.reduce((e, n, s) => {
          const i = t(n.name);
          e[`LINK_${s}`] = `<${n.target}|${i}>`;
          e[`LINK_NAME_${s}`] = i;
          e[`LINK_TARGET_${s}`] = n.target;
          return e;
        }, {}), [e.links, t]);
        0;
        0;
        return z.jsx(bb, {
          onLinkSelect: Qy,
          renderer: x7,
          children: z.jsx(Tc, {
            id: e.messageId,
            args: n
          })
        });
      }(t, d);
      const g = Math.round(WY(g7, t.likes, undefined, true));
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: r,
        children: z.jsxs(Ep, {
          focusKey: e,
          className: Qu()(m7.chirpLayout, n),
          onFocusChange: i,
          children: [z.jsx(LT, {
            action: "Select Chirp Sender",
            active: s,
            className: m7.selectHint,
            theme: p7
          }), z.jsx(d7, {
            focusKey: Eg,
            entity: t.sender.entity,
            disabled: "" === t.sender.link.target,
            onSelect: o
          }), z.jsxs("div", {
            className: m7.content,
            children: [z.jsxs("div", {
              className: m7.header,
              children: [z.jsx(L_, {
                disableHint: true,
                focusKey: Eg,
                className: m7.sender,
                onSelect: o,
                disabled: "" === t.sender.link.target,
                children: m
              }), z.jsx("div", {
                className: m7.date,
                children: AO(c, u) ? (0, z.jsx)(Nu, {
                  value: u
                }) : (0, z.jsx)(Su, {
                  value: u
                })
              })]
            }), z.jsx("div", {
              className: m7.message,
              children: h
            }), z.jsxs("div", {
              className: m7.footer,
              children: [z.jsx(Gc, {
                value: t.liked ? g + 1 : g,
                unit: Oc.IntegerRounded
              }), z.jsx($_, {
                disableHint: true,
                tinted: true,
                focusKey: Eg,
                src: t.liked ? "Media/Glyphs/HeartFilled.svg" : "Media/Glyphs/HeartOutline.svg",
                className: Qu()(m7.likeButton, t.liked && m7.liked),
                selectSound: op.likeChirp,
                onSelect: a
              }), z.jsx(LT, {
                action: "Like Chirp",
                active: s,
                className: m7.likesHint,
                theme: p7
              })]
            })]
          })]
        })
      });
    }, (e, t) => e.chirp.liked === t.chirp.liked && e.chirp.likes === t.chirp.likes);
    const x7 = new lb((e, t, n) => (0, z.jsx)(xb, {
      disableHint: true,
      linkData: e,
      children: t
    }, n));
    X.add("game-ui/game/components/chirper/items/chirp-layout.tsx", {
      get ChirpLayout() {
        return f7;
      },
      set ChirpLayout(e) {
        f7 = e;
      }
    });
    let v7 = {
      "item-transition": "item-transition_UXZ",
      itemTransition: "item-transition_UXZ",
      enter: "enter_eca",
      "enter-active": "enter-active_bH4",
      enterActive: "enter-active_bH4",
      exit: "exit_Jp9",
      "exit-active": "exit-active_rih",
      exitActive: "exit-active_rih",
      container: "container_Z2a",
      space: "space_emJ",
      "event-item": "event-item_q35",
      eventItem: "event-item_q35",
      "event-date": "event-date_xTF",
      eventDate: "event-date_xTF",
      "event-label": "event-label_BDa container_Z2a",
      eventLabel: "event-label_BDa container_Z2a"
    };
    X.add("game-ui/game/components/chirper/items/chirper-items.module.scss", {
      get classes() {
        return v7;
      },
      set classes(e) {
        Object.assign(v7, e);
      }
    });
    var b7 = ({
      focusKey: e,
      style: t,
      children: n
    }) => (0, z.jsx)(gy, {
      styles: v7,
      children: (0, z.jsxs)("div", {
        className: v7.itemTransition,
        style: t,
        children: [(0, z.jsx)(Ep, {
          focusKey: e,
          focusSound: op.hoverItem,
          className: v7.container,
          children: n
        }), (0, z.jsx)("div", {
          className: v7.space
        })]
      })
    });
    var T7 = ({
      focusKey: e,
      date: t,
      children: n
    }) => (0, z.jsx)(gy, {
      styles: v7,
      children: (0, z.jsxs)("div", {
        className: v7.itemTransition,
        children: [(0, z.jsxs)("div", {
          className: v7.eventItem,
          children: [(0, z.jsx)("div", {
            className: v7.eventDate,
            children: (0, z.jsx)(Su, {
              value: t
            })
          }), (0, z.jsx)(Ep, {
            focusKey: e,
            focusSound: op.hoverItem,
            className: v7.eventLabel,
            children: n
          })]
        }), (0, z.jsx)("div", {
          className: v7.space
        })]
      })
    });
    X.add("game-ui/game/components/chirper/items/chirper-items.tsx", {
      get ContainerItem() {
        return b7;
      },
      set ContainerItem(e) {
        b7 = e;
      },
      get EventItem() {
        return T7;
      },
      set EventItem(e) {
        T7 = e;
      }
    });
    let E7 = {
      "chirper-panel": "chirper-panel_kDN",
      chirperPanel: "chirper-panel_kDN",
      scrollable: "scrollable_SAp"
    };
    X.add("game-ui/game/components/chirper/chirper-panel.module.scss", {
      get classes() {
        return E7;
      },
      set classes(e) {
        Object.assign(E7, e);
      }
    });
    var y7 = ({
      className: e,
      onClose: t
    }) => {
      const n = Vm();
      const s = sl(Yy);
      0;
      const i = Y.useRef(s[0]?.date);
      if (!i.current && s.length) {
        i.current = s[0].date;
      }
      const a = kE();
      0;
      const o = Y.useContext(ld);
      const r = GK(130 * n, s.length, 2);
      ag(dT.value?.chirperPanel, s.length > 0);
      0;
      const l = Y.useCallback(e => {
        const t = s[e];
        return e >= 0 && t ? (0, z.jsx)(S7, {
          chirp: t,
          isFirst: 0 === e && t.date > i.current
        }, e) : null;
      }, [s]);
      0;
      Y.useEffect(() => {
        if (!o) {
          const e = $y.subscribe(() => {
            a.smoothScrollTo(0, 0);
            rp(op.chirpEvent);
          });
          return () => e.dispose();
        }
      }, [o, a]);
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.chirperPanel,
        disableBlinking: true,
        children: z.jsx(ZT, {
          theme: i7,
          header: z.jsx(nE, {
            children: z.jsx(Pc.Chirper.PANEL_TITLE, {})
          }),
          transitionSounds: lp,
          className: Qu()(E7.chirperPanel, e),
          onClose: t,
          children: s.length > 0 ? (0, z.jsx)(aT, {
            uiTag: dT.value?.chirperPanelChirps,
            children: (0, z.jsx)(ep, {
              direction: Mg.Vertical,
              children: (0, z.jsx)(FK, {
                renderItem: l,
                sizeProvider: r,
                className: E7.scrollable
              })
            })
          }) : (0, z.jsx)(YX, {
            children: (0, z.jsx)(bb, {
              children: (0, z.jsx)(Pc.Chirper.OPENING_MESSAGE, {})
            })
          })
        })
      });
    };
    const S7 = ({
      chirp: e,
      isFirst: t
    }) => t ? (0, z.jsx)(cd, {
      children: (0, z.jsx)(b7, {
        children: (0, z.jsx)(f7, {
          chirp: e
        })
      }, Dr(e.entity))
    }) : (0, z.jsx)(b7, {
      children: (0, z.jsx)(f7, {
        chirp: e
      })
    }, Dr(e.entity));
    X.add("game-ui/game/components/chirper/chirper-panel.tsx", {
      get ChirperPanel() {
        return y7;
      },
      set ChirperPanel(e) {
        y7 = e;
      }
    });
    let j7 = {
      "detail-layout": "detail-layout_vME",
      detailLayout: "detail-layout_vME",
      scrollable: "scrollable_sRo",
      header: "header_Vle",
      "icon-container": "icon-container_FJv",
      iconContainer: "icon-container_FJv",
      icon: "icon_IKT",
      title: "title_UOl",
      description: "description_VWf",
      content: "content_AGf",
      bottom: "bottom_fjL"
    };
    X.add("game-ui/common/section/detail-layout/detail-layout.module.scss", {
      get classes() {
        return j7;
      },
      set classes(e) {
        Object.assign(j7, e);
      }
    });
    var N7 = ({
      icon: e,
      title: t,
      description: n,
      bottom: s,
      className: i,
      children: a
    }) => {
      const o = Y.Children.count(a) > 0;
      const r = Y.Children.count(s) > 0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(j7.detailLayout, i),
        children: [z.jsxs(ab, {
          autoScroll: true,
          className: j7.scrollable,
          children: [z.jsxs("div", {
            className: j7.header,
            children: [e && (0, z.jsx)("div", {
              className: j7.iconContainer,
              children: (0, z.jsx)("img", {
                src: e,
                className: j7.icon
              })
            }), z.jsx("div", {
              className: j7.title,
              children: t
            })]
          }), z.jsx("div", {
            className: j7.description,
            children: z.jsx(bb, {
              children: n
            })
          }), o && (0, z.jsx)("div", {
            className: j7.content,
            children: a
          })]
        }), r && (0, z.jsx)("div", {
          className: j7.bottom,
          children: s
        })]
      });
    };
    X.add("game-ui/common/section/detail-layout/detail-layout.tsx", {
      get DetailLayout() {
        return N7;
      },
      set DetailLayout(e) {
        N7 = e;
      }
    });
    let w7 = {
      "unlocking-label": "unlocking-label_ctB",
      unlockingLabel: "unlocking-label_ctB",
      locked: "locked_rgX",
      unlocked: "unlocked_rws"
    };
    X.add("game-ui/game/components/progression/unlocking-label/unlocking-label.module.scss", {
      get classes() {
        return w7;
      },
      set classes(e) {
        Object.assign(w7, e);
      }
    });
    var P7 = ({
      state: e
    }) => (0, z.jsx)("div", {
      className: Qu()("Locked" === e ? w7.locked : w7.unlocked, w7.unlockingLabel),
      children: "Locked" === e ? (0, z.jsx)(Pc.Common.LOCKED, {}) : (0, z.jsx)(Pc.Common.UNLOCKED, {})
    });
    X.add("game-ui/game/components/progression/unlocking-label/unlocking-label.tsx", {
      get UnlockingLabel() {
        return P7;
      },
      set UnlockingLabel(e) {
        P7 = e;
      }
    });
    let L7 = {
      "unlocking-requirements": "unlocking-requirements_Usp",
      unlockingRequirements: "unlocking-requirements_Usp"
    };
    X.add("game-ui/game/components/progression/unlocking-requirements/themes/detail-layout-unlocking-requirements.module.scss", {
      get classes() {
        return L7;
      },
      set classes(e) {
        Object.assign(L7, e);
      }
    });
    let M7 = {
      "demand-bar": "demand-bar_WmU",
      demandBar: "demand-bar_WmU",
      icon: "icon_b9Y",
      locked: "locked_Lrk",
      lock: "lock_ezp"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-bar.module.scss", {
      get classes() {
        return M7;
      },
      set classes(e) {
        Object.assign(M7, e);
      }
    });
    var k7 = ({
      icon: e,
      color: t,
      demand: n,
      locked: s = false
    }) => {
      const i = Vm();
      const a = 99 * i;
      const o = 444 * i;
      const r = a / 2;
      const l = o - r;
      const c = n * o;
      const u = c < a ? c - r * (c / a) : c - r;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: M7.demandBar,
        children: [z.jsx("img", {
          src: e,
          onError: V_,
          className: Qu()(M7.icon, s && M7.locked)
        }), z.jsxs("svg", {
          viewBox: `0 0 ${o} ${a}`,
          className: M7.svg,
          height: `${a}`,
          width: `${o}`,
          children: [z.jsxs("linearGradient", {
            id: "monochrome",
            gradientUnits: "userSpaceOnUse",
            x1: 0,
            x2: o,
            y1: 0,
            y2: 0,
            children: [z.jsx("stop", {
              offset: "0%",
              stopColor: "rgba(0, 0, 0, 0.2)"
            }), z.jsx("stop", {
              offset: "100%",
              stopColor: "rgba(0, 0, 0, 0)"
            })]
          }), z.jsx("polygon", {
            points: `0,0 0,${a} ${l},${a} ${o},${r} ${l},0 0,0`,
            fill: s ? "rgb(45, 46, 54)" : "rgba(0, 0, 0, 0.45)"
          }), !s && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("polygon", {
              points: `0,0 0,${a} ${[u]},${a} ${[c]},${r} ${[u]},0 0,0`,
              fill: t
            }), (0, z.jsx)("polygon", {
              points: `0,0 0,${a} ${[u]},${a} ${[c]},${r} ${[u]},0 0,0`,
              fill: "url(#monochrome)"
            })]
          })]
        }), s && (0, z.jsx)(kX, {
          className: M7.lock
        })]
      });
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-bar.tsx", {
      get DemandBar() {
        return k7;
      },
      set DemandBar(e) {
        k7 = e;
      }
    });
    let D7 = {
      "demand-factors": "demand-factors_RlK",
      demandFactors: "demand-factors_RlK",
      factor: "factor_iZk",
      label: "label_qWr",
      icon: "icon_d3_"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-factors.module.scss", {
      get classes() {
        return D7;
      },
      set classes(e) {
        Object.assign(D7, e);
      }
    });
    var U7 = ({
      factors: e,
      locked: t = false
    }) => (0, z.jsx)("div", {
      className: D7.demandFactors,
      children: !t && e.filter(e => null != e.factor).map((e, t) => (0, z.jsx)(B7, {
        factor: e
      }, t))
    });
    var B7 = ({
      factor: e
    }) => (0, z.jsxs)("div", {
      className: D7.factor,
      children: [(0, z.jsx)("img", {
        className: D7.icon,
        src: e.weight < 0 ? "Media/Game/Misc/DemandFactorNegative.svg" : "Media/Game/Misc/DemandFactorPositive.svg",
        onError: V_
      }), (0, z.jsx)("div", {
        className: D7.label,
        children: e.weight < 0 ? (0, z.jsx)(Pc.CityInfoPanel.DEMAND_FACTOR_NEGATIVE, {
          hash: e.factor
        }) : (0, z.jsx)(Pc.CityInfoPanel.DEMAND_FACTOR_POSITIVE, {
          hash: e.factor
        })
      })]
    });
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-factors.tsx", {
      get DemandFactors() {
        return U7;
      },
      set DemandFactors(e) {
        U7 = e;
      },
      get DemandFactorDetail() {
        return B7;
      },
      set DemandFactorDetail(e) {
        B7 = e;
      }
    });
    let G7 = {
      "demand-section": "demand-section_xG1",
      demandSection: "demand-section_xG1",
      title: "title_TAF title_PYv title_bwV",
      content: "content_Bmx"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-section.module.scss", {
      get classes() {
        return G7;
      },
      set classes(e) {
        Object.assign(G7, e);
      }
    });
    let H7 = {
      section: "section_egX section_sop section_gUk",
      header: "header_LLa header_l0j undefined",
      content: "content_lbR content_flM content_owQ",
      locked: "locked_dpm"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-section-theme.module.scss", {
      get classes() {
        return H7;
      },
      set classes(e) {
        Object.assign(H7, e);
      }
    });
    var W7 = ({
      type: e,
      demand: t,
      unlocking: n,
      factors: s,
      className: i,
      onSelect: a,
      onHover: o
    }) => {
      0;
      const r = Y.useCallback(() => o(e), [o, e]);
      0;
      const l = Y.useCallback(() => rp(op.hoverItem), []);
      0;
      const c = Y.useCallback(() => o($7.None), [o]);
      0;
      const u = Y.useCallback(t => {
        if (t) {
          a(e);
          rp(op.hoverItem);
        }
      }, [a, e]);
      0;
      const d = Y.useCallback(() => {
        a(e);
        rp(op.selectItem);
      }, [a, e]);
      const m = {
        ...u2,
        ...H7
      };
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(m2, {
        theme: m,
        header: z.jsx("div", {
          className: G7.title,
          children: z.jsx(Pc.CityInfoPanel.DEMAND_TITLE, {
            hash: $7[e]
          })
        }),
        onClick: d,
        onMouseOver: r,
        onMouseEnter: l,
        onMouseLeave: c,
        onFocusChange: u,
        className: Qu()(G7.demandSection, n?.locked && m.locked, i),
        children: z.jsxs("div", {
          className: G7.content,
          children: [z.jsx(k7, {
            icon: X7[e],
            color: q7[e],
            demand: n?.locked ? 0 : t,
            locked: n?.locked
          }), z.jsx(U7, {
            factors: s,
            locked: n?.locked
          })]
        })
      });
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-section/demand-section.tsx", {
      get DemandSection() {
        return W7;
      },
      set DemandSection(e) {
        W7 = e;
      }
    });
    let z7 = {
      "demand-page": "demand-page_X1J",
      demandPage: "demand-page_X1J",
      "main-column": "main-column_cMY",
      mainColumn: "main-column_cMY",
      scrollable: "scrollable_VIF",
      "info-column": "info-column_dEc",
      infoColumn: "info-column_dEc",
      "demand-row": "demand-row_CQi",
      demandRow: "demand-row_CQi"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-page.module.scss", {
      get classes() {
        return z7;
      },
      set classes(e) {
        Object.assign(z7, e);
      }
    });
    var $7;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.ResidentialLow = 1] = "ResidentialLow";
      e[e.ResidentialMedium = 2] = "ResidentialMedium";
      e[e.ResidentialHigh = 3] = "ResidentialHigh";
      e[e.Commercial = 4] = "Commercial";
      e[e.Industrial = 5] = "Industrial";
      e[e.Office = 6] = "Office";
    }($7 || ($7 = {}));
    var q7 = ["", "#8BDB46", "#00AE1A", "#2B7600", "#46B2DB", "#DBC246", "#8D44AD"];
    var X7 = ["", "Media/Game/Icons/ZoneResidentialLow.svg", "Media/Game/Icons/ZoneResidentialMedium.svg", "Media/Game/Icons/ZoneResidentialHigh.svg", "Media/Game/Icons/ZoneCommercial.svg", "Media/Game/Icons/ZoneIndustrial.svg", "Media/Game/Icons/ZoneOffice.svg"];
    function Q7() {
      const e = km();
      const t = sl(LS);
      const n = sl(AS);
      const s = sl(MS);
      const i = sl(RS);
      const a = sl(kS);
      const o = sl(DS);
      const r = sl(FS);
      const l = sl(US);
      const c = sl(BS);
      const u = sl(GS);
      const d = sl(VS);
      const m = sl(HS);
      const h = KC("ZonesOffice");
      const g = KC("Residential Medium");
      const p = KC("Residential High");
      0;
      const [f, x] = Y.useState($7.ResidentialLow);
      0;
      const [v, _] = Y.useState($7.None);
      0;
      const b = Y.useCallback(t => {
        if (!e) {
          _(t);
        }
      }, [e]);
      0;
      Y.useEffect(() => {
        if (e) {
          _($7.None);
        }
      }, [e]);
      0;
      const T = Y.useMemo(() => v !== $7.None ? v : f, [v, f]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.cityInfoPanelDemandPage,
        children: z.jsx("div", {
          className: z7.demandPage,
          children: z.jsxs(ep, {
            children: [z.jsx("div", {
              className: z7.mainColumn,
              children: z.jsxs(ab, {
                className: z7.scrollable,
                children: [z.jsx(W7, {
                  type: $7.ResidentialLow,
                  demand: t,
                  factors: r,
                  onHover: b,
                  onSelect: x,
                  className: Qu()(f === $7.ResidentialLow && "selected", z7.demandRow)
                }), z.jsx(W7, {
                  type: $7.ResidentialMedium,
                  demand: n,
                  factors: l,
                  unlocking: g,
                  onHover: b,
                  onSelect: x,
                  className: Qu()(f === $7.ResidentialMedium && "selected", z7.demandRow)
                }), z.jsx(W7, {
                  type: $7.ResidentialHigh,
                  demand: s,
                  factors: c,
                  unlocking: p,
                  onHover: b,
                  onSelect: x,
                  className: Qu()(f === $7.ResidentialHigh && "selected", z7.demandRow)
                }), z.jsx(W7, {
                  type: $7.Commercial,
                  demand: i,
                  factors: u,
                  onHover: b,
                  onSelect: x,
                  className: Qu()(f === $7.Commercial && "selected", z7.demandRow)
                }), z.jsx(W7, {
                  type: $7.Industrial,
                  demand: a,
                  factors: d,
                  onHover: b,
                  onSelect: x,
                  className: Qu()(f === $7.Industrial && "selected", z7.demandRow)
                }), z.jsx(W7, {
                  type: $7.Office,
                  demand: o,
                  factors: m,
                  unlocking: h,
                  onHover: b,
                  onSelect: x,
                  className: Qu()(f === $7.Office && "selected", z7.demandRow)
                })]
              })
            }), z.jsx(Z7, {
              id: $7[T],
              icon: X7[T],
              unlocking: T === $7.Office && h || T === $7.ResidentialMedium && g || T === $7.ResidentialHigh && p || undefined
            })]
          })
        })
      });
    }
    const Z7 = ({
      id: e,
      icon: t,
      unlocking: n
    }) => (0, z.jsx)(m2, {
      focusKey: Eg,
      theme: u2,
      className: z7.infoColumn,
      children: (0, z.jsx)(N7, {
        icon: t,
        title: (0, z.jsx)(Pc.CityInfoPanel.DEMAND_TITLE, {
          hash: e
        }),
        description: (0, z.jsx)(Pc.CityInfoPanel.DEMAND_DESCRIPTION, {
          hash: e
        }),
        bottom: null != n && $3(n.requirements) ? (0, z.jsx)(Y3, {
          theme: L7,
          requirements: n.requirements
        }) : undefined,
        children: n?.locked ? (0, z.jsx)(P7, {
          state: "Locked"
        }) : undefined
      }, e)
    });
    X.add("game-ui/game/components/city-info-panel/city-info-demand/demand-page.tsx", {
      get DemandType() {
        return $7;
      },
      set DemandType(e) {
        $7 = e;
      },
      get demandColors() {
        return q7;
      },
      set demandColors(e) {
        q7 = e;
      },
      get demandIcons() {
        return X7;
      },
      set demandIcons(e) {
        X7 = e;
      },
      get CityInfoDemand() {
        return Q7;
      },
      set CityInfoDemand(e) {
        Q7 = e;
      }
    });
    let J7 = {
      "city-policy": "city-policy_QlE item-states_QjV",
      cityPolicy: "city-policy_QlE item-states_QjV",
      "disable-mouse-states": "disable-mouse-states_O0k",
      disableMouseStates: "disable-mouse-states_O0k",
      content: "content_Epe",
      left: "left_MRp",
      right: "right_Xny",
      icon: "icon_pZC",
      disabled: "disabled_mRJ",
      locked: "locked_qsG",
      lock: "lock_q6f",
      checkbox: "checkbox_nNF",
      control: "control_box",
      slider: "slider_RcP",
      gamepad: "gamepad_BRZ",
      label: "label_SXQ",
      hint: "hint_DZH"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-policies/city-policy.module.scss", {
      get classes() {
        return J7;
      },
      set classes(e) {
        Object.assign(J7, e);
      }
    });
    var tee = ({
      policy: e,
      selected: t,
      className: n,
      onSelect: s,
      onHover: i
    }) => {
      0;
      const [a, o] = Y.useState(e.active);
      0;
      const [r, l] = Y.useState(e.data?.value ?? 0);
      0;
      const [c, u] = Y.useState(false);
      0;
      const [d, m] = Y.useState(false);
      0;
      const [h, g] = Y.useState(false);
      const p = km();
      0;
      const f = Y.useCallback(() => {
        xC(e.entity, !a, r);
        o(!a);
      }, [a, e, r]);
      0;
      const x = Y.useCallback(t => {
        l(t);
        if (p) {
          xC(e.entity, a, t);
        }
      }, [a, p, e]);
      0;
      const v = Y.useCallback(() => m(true), []);
      0;
      const _ = Y.useCallback(() => {
        xC(e.entity, a, r);
        m(false);
      }, [a, e, r]);
      0;
      const b = Y.useCallback(() => {
        f();
        rp(op.selectItem);
      }, [f]);
      0;
      const T = Y.useCallback(() => rp(op.hoverItem), []);
      0;
      const E = Y.useCallback(() => i(null), [i]);
      0;
      const I = Y.useCallback(() => i(e), [i, e]);
      0;
      const y = Y.useCallback(t => {
        g(t);
        if (t) {
          s(e);
        }
      }, [s, e]);
      0;
      const S = Y.useCallback(() => {
        s(e);
        rp(op.selectItem);
      }, [s, e]);
      0;
      const j = Y.useCallback(() => u(false), []);
      0;
      const C = Y.useCallback(() => u(true), []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: e.uiTag,
        children: z.jsx(Rg, {
          onAction: b,
          children: z.jsx(Ep, {
            onClick: S,
            onFocusChange: y,
            onMouseOver: I,
            onMouseEnter: T,
            onMouseLeave: E,
            className: Qu()(J7.cityPolicy, t && "selected", e.locked && J7.locked, !a && J7.disabled, (c || d) && J7.disableMouseStates, n),
            children: z.jsxs("div", {
              className: J7.content,
              children: [z.jsxs("div", {
                className: J7.left,
                children: [z.jsx("img", {
                  src: e.icon,
                  className: J7.icon
                }), z.jsx("div", {
                  className: J7.label,
                  children: z.jsx(Pc.Policy.TITLE, {
                    hash: e.id
                  })
                })]
              }), z.jsxs("div", {
                className: J7.right,
                children: [e.data && r && (0, z.jsxs)("div", {
                  className: J7.control,
                  children: [(0, z.jsx)("div", {
                    className: J7.label,
                    children: (0, z.jsx)(Gc, {
                      value: !e.locked && a ? r : 0,
                      unit: e.data.unit
                    })
                  }), (0, z.jsx)(GM, {
                    value: !e.locked && a ? r : 0,
                    start: !e.locked && a ? e.data.range.min : 0,
                    end: !e.locked && a ? e.data.range.max : 1,
                    gamepadStep: e.data.step,
                    onDragEnd: _,
                    onDragStart: v,
                    onChange: x,
                    onMouseOver: C,
                    onMouseLeave: j,
                    disabled: !a || e.locked,
                    className: Qu()(J7.slider, h && p && J7.gamepad)
                  })]
                }), e.locked && (0, z.jsx)(kX, {
                  className: J7.lock
                }), !e.locked && (0, z.jsxs)(z.Fragment, {
                  children: [(0, z.jsx)(LT, {
                    action: "Select",
                    active: !e.locked && h,
                    className: J7.hint
                  }), (0, z.jsx)(kb, {
                    onMouseOver: C,
                    onMouseLeave: j,
                    checked: a,
                    onChange: f,
                    focusKey: Eg,
                    className: J7.checkbox
                  })]
                })]
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/city-info-panel/city-info-policies/city-policy.tsx", {
      get CityPolicy() {
        return tee;
      },
      set CityPolicy(e) {
        tee = e;
      }
    });
    let nee = {
      "policies-page": "policies-page_YYY",
      policiesPage: "policies-page_YYY",
      "main-column": "main-column_Pve",
      mainColumn: "main-column_Pve",
      "info-column": "info-column_G8F",
      infoColumn: "info-column_G8F",
      scrollable: "scrollable_SFL"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-policies/policies-page.module.scss", {
      get classes() {
        return nee;
      },
      set classes(e) {
        Object.assign(nee, e);
      }
    });
    var iee = () => {
      const e = km();
      const t = sl(pC);
      0;
      const [n, s] = Y.useState(t.length > 0 ? t.find(e => !e.locked) ?? t[0] : null);
      0;
      const [i, a] = Y.useState(null);
      0;
      const o = Y.useCallback(t => {
        if (!e) {
          a(t);
        }
      }, [e]);
      0;
      Y.useEffect(() => {
        if (e) {
          a(null);
        }
      }, [e]);
      0;
      const r = Y.useMemo(() => i ?? n, [i, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.cityInfoPanelPoliciesPage,
        children: z.jsxs("div", {
          className: nee.policiesPage,
          children: [z.jsx(m2, {
            theme: u2,
            className: nee.mainColumn,
            children: z.jsx(ep, {
              children: z.jsx(ab, {
                className: nee.scrollable,
                children: t.map(e => (0, z.jsx)(tee, {
                  policy: e,
                  selected: Ur(e.entity, n?.entity),
                  onSelect: s,
                  onHover: o
                }, e.id))
              })
            })
          }), z.jsx(aee, {
            policy: r
          })]
        })
      });
    };
    const aee = ({
      policy: e
    }) => (0, z.jsx)(m2, {
      focusKey: Eg,
      theme: u2,
      className: nee.infoColumn,
      children: e && (0, z.jsx)(N7, {
        icon: e.icon,
        title: (0, z.jsx)(Pc.Policy.TITLE, {
          hash: e.id
        }),
        description: (0, z.jsx)(Pc.Policy.DESCRIPTION, {
          hash: e.id
        }),
        bottom: e.locked && (0, z.jsx)(Y3, {
          theme: L7,
          requirements: e.requirements
        }),
        children: e.locked && (0, z.jsx)(P7, {
          state: "Locked"
        })
      }, Dr(e.entity))
    });
    X.add("game-ui/game/components/city-info-panel/city-info-policies/policies-page.tsx", {
      get CityInfoPolicies() {
        return iee;
      },
      set CityInfoPolicies(e) {
        iee = e;
      }
    });
    let oee = {
      "city-info-panel": "city-info-panel_Eha",
      cityInfoPanel: "city-info-panel_Eha"
    };
    X.add("game-ui/game/components/city-info-panel/city-info-panel.module.scss", {
      get classes() {
        return oee;
      },
      set classes(e) {
        Object.assign(oee, e);
      }
    });
    var lee = ({
      selectedTab: e,
      onSelectTab: t,
      onClose: n
    }) => {
      rg(dT.value?.cityInfoPanel);
      const s = KC("Policies");
      const i = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        header: z.jsxs(z.Fragment, {
          children: [z.jsx(nE, {
            children: z.jsx(Pc.CityInfoPanel.TITLE, {})
          }), z.jsxs(BX, {
            children: [z.jsx(GX, {
              id: Hv.Demand,
              uiTag: dT.value?.cityInfoPanelDemandTab,
              selectedId: e,
              onSelect: t,
              children: z.jsx(Pc.CityInfoPanel.TAB, {
                hash: Hv[Hv.Demand]
              })
            }), z.jsx(Q3, {
              locked: s.locked,
              requirements: s.requirements,
              forceVisible: i && e === Hv.Policies,
              children: z.jsx(GX, {
                id: Hv.Policies,
                uiTag: dT.value?.cityInfoPanelPoliciesTab,
                selectedId: e,
                disabled: s.locked,
                locked: s.locked,
                onSelect: t,
                children: z.jsx(Pc.CityInfoPanel.TAB, {
                  hash: Hv[Hv.Policies]
                })
              })
            })]
          })]
        }),
        transitionSounds: lp,
        className: oee.cityInfoPanel,
        onClose: n,
        children: z.jsx(UX, {
          tabs: [Hv.Demand, Hv.Policies],
          selectedTab: e,
          onSelect: t,
          children: cee(s.locked ? Hv.Demand : e)
        })
      });
    };
    function cee(e) {
      switch (e) {
        case Hv.Demand:
          0;
          return z.jsx(Q7, {});
        case Hv.Policies:
          0;
          return z.jsx(iee, {});
        default:
          return;
      }
    }
    X.add("game-ui/game/components/city-info-panel/city-info-panel.tsx", {
      get CityInfoPanel() {
        return lee;
      },
      set CityInfoPanel(e) {
        lee = e;
      }
    });
    let uee = {
      "money-field": "money-field_bzk",
      moneyField: "money-field_bzk",
      primary: "primary__xr",
      secondary: "secondary_HCa",
      positive: "positive_HL9",
      negative: "negative_PiU",
      sign: "sign__wn",
      content: "content_pa5"
    };
    X.add("game-ui/game/components/economy-panel/components/money-field/money-field.module.scss", {
      get classes() {
        return uee;
      },
      set classes(e) {
        Object.assign(uee, e);
      }
    });
    var mee = ({
      value: e,
      importance: t,
      className: n
    }) => (0, z.jsxs)("div", {
      className: Qu()(uee.moneyField, t && uee[t], zp(uee, e), n),
      children: [(0, z.jsx)("div", {
        className: uee.sign,
        children: hee(e)
      }), (0, z.jsx)("div", {
        className: uee.content,
        children: (0, z.jsx)(Gc, {
          value: Math.abs(e),
          unit: Oc.Money
        })
      })]
    });
    function hee(e) {
      return e < 0 ? "−" : e > 0 ? "+" : "";
    }
    X.add("game-ui/game/components/economy-panel/components/money-field/money-field.tsx", {
      get NumberField() {
        return mee;
      },
      set NumberField(e) {
        mee = e;
      },
      get sign() {
        return hee;
      },
      set sign(e) {
        hee = e;
      }
    });
    let gee = {
      chartFontColor: "rgba(255, 255, 255, 0.6)",
      chartLineColor: "rgba(255, 255, 255, 0.1)",
      "budget-chart": "budget-chart_CSi",
      budgetChart: "budget-chart_CSi",
      chart: "chart_xgb"
    };
    X.add("game-ui/game/components/economy-panel/budget-page/budget-chart/budget-chart.module.scss", {
      get classes() {
        return gee;
      },
      set classes(e) {
        Object.assign(gee, e);
      }
    });
    var fee = ({
      selectedId: e,
      className: t
    }) => {
      const n = sl(ej);
      const s = sl(tj);
      const i = sl(nj);
      const a = sl(sj);
      0;
      const o = Y.useMemo(() => ({
        labels: ["Budget"],
        datasets: [...xee(n, s, 1, "income", e), ...xee(i, a, -1, "expenses", e)]
      }), [n, s, e, i, a]);
      const r = function () {
        const e = Kc(Oc.Money);
        const t = sl(Ml);
        return {
          layout: {
            padding: {
              top: 12,
              right: 24,
              bottom: 0,
              left: 12
            }
          },
          scales: {
            y: {
              stacked: true,
              suggestedMax: 1e3,
              beginAtZero: true,
              grid: {
                color: gee.chartLineColor,
                lineWidth: 2
              },
              border: {
                color: gee.chartLineColor,
                width: 2
              },
              ticks: {
                maxTicksLimit: 10,
                font: {
                  size: 10 * t
                },
                color: gee.chartFontColor,
                padding: 10,
                autoSkip: false,
                callback: t => e(t)
              }
            },
            x: {
              stacked: true,
              grid: {
                display: false
              },
              ticks: {
                display: false
              }
            }
          }
        };
      }();
      0;
      0;
      return z.jsx(m2, {
        focusKey: Eg,
        theme: u2,
        className: Qu()(gee.budgetChart, t),
        children: z.jsx(BR, {
          type: "bar",
          data: o,
          options: r,
          className: gee.chart
        })
      });
    };
    function xee(e, t, n, s, i) {
      return e.map(e => ({
        label: e.id,
        data: [n * ij(e, t)],
        backgroundColor: tN(e.color),
        barPercentage: e.id === i ? .9 : .5,
        categoryPercentage: .7,
        stack: s
      })).reverse();
    }
    X.add("game-ui/game/components/economy-panel/budget-page/budget-chart/budget-chart.tsx", {
      get BudgetChart() {
        return fee;
      },
      set BudgetChart(e) {
        fee = e;
      }
    });
    let vee = {
      field: "field_ZZV",
      header: "header_FoF",
      icon: "icon_Vso",
      label: "label_XR5",
      content: "content_N5U",
      positive: "positive_Deq",
      negative: "negative_iIx"
    };
    X.add("game-ui/game/components/economy-panel/components/table-row/table-row.module.scss", {
      get classes() {
        return vee;
      },
      set classes(e) {
        Object.assign(vee, e);
      }
    });
    let bee = {
      "detail-layout": "detail-layout_TAz",
      detailLayout: "detail-layout_TAz",
      label: "label_ETw"
    };
    X.add("game-ui/game/components/economy-panel/budget-page/budget-item-detail/budget-item-detail.module.scss", {
      get classes() {
        return bee;
      },
      set classes(e) {
        Object.assign(bee, e);
      }
    });
    const Eee = {
      ...vee,
      label: bee.label
    };
    var Iee = ({
      item: e,
      values: t,
      className: n
    }) => (0, z.jsx)(m2, {
      focusKey: Eg,
      theme: u2,
      className: Qu()(bee.budgetItemDetail, n),
      children: null != e && (0, z.jsx)(N7, {
        icon: e.icon,
        title: (0, z.jsx)(Pc.EconomyPanel.BUDGET_ITEM, {
          hash: e.id
        }),
        description: (0, z.jsx)(Pc.EconomyPanel.BUDGET_ITEM_DESCRIPTION, {
          hash: e.id
        }),
        bottom: e.sources.map((e, n) => (0, z.jsx)(z6, {
          label: (0, z.jsx)(Pc.EconomyPanel.BUDGET_SUB_ITEM, {
            hash: e.id
          }),
          theme: Eee,
          className: zp(vee, t[e.index]),
          children: (0, z.jsx)(Gc, {
            value: t[e.index],
            unit: Oc.Money
          })
        }, n)),
        className: bee.detailLayout
      }, e.id)
    });
    X.add("game-ui/game/components/economy-panel/budget-page/budget-item-detail/budget-item-detail.tsx", {
      get BudgetItemDetail() {
        return Iee;
      },
      set BudgetItemDetail(e) {
        Iee = e;
      }
    });
    let yee = {
      "budget-section": "budget-section_F_L",
      budgetSection: "budget-section_F_L",
      header: "header__ZM",
      item: "item_fWX item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      selected: "selected_yiI",
      "title-column": "title-column_u4_",
      titleColumn: "title-column_u4_",
      title: "title_XJK",
      "legend-color": "legend-color_jK2",
      legendColor: "legend-color_jK2",
      "value-column": "value-column_Tid",
      valueColumn: "value-column_Tid",
      "value-field": "value-field_M8j",
      valueField: "value-field_M8j",
      "value-column-divider": "value-column-divider_afM",
      valueColumnDivider: "value-column-divider_afM"
    };
    X.add("game-ui/game/components/economy-panel/budget-page/budget-section/budget-section.module.scss", {
      get classes() {
        return yee;
      },
      set classes(e) {
        Object.assign(yee, e);
      }
    });
    var jee = Y.memo(function ({
      title: e,
      total: t,
      items: n,
      values: s,
      className: i,
      onMouseEnter: a,
      onMouseLeave: o,
      uiTag: r,
      selectedItem: l,
      onItemSelected: c
    }) {
      0;
      const u = Y.useContext(Zu);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(m2, {
        focusKey: Eg,
        theme: u2,
        className: Qu()(yee.budgetSection, i),
        header: z.jsx(aT, {
          uiTag: r,
          children: z.jsxs("div", {
            className: yee.header,
            children: [z.jsx("div", {
              className: yee.titleColumn,
              children: e
            }), z.jsx("div", {
              className: yee.valueColumn,
              children: z.jsx(mee, {
                value: t,
                importance: "secondary",
                className: yee.valueField
              })
            })]
          })
        }),
        children: z.jsxs(Zu.Provider, {
          value: u,
          children: [n.map(e => (0, z.jsx)(Cee, {
            item: e,
            values: s,
            onMouseEnter: a,
            onMouseLeave: o,
            selected: l === e.id,
            onSelect: c
          }, e.id)), z.jsx("div", {
            className: yee.valueColumnDivider
          })]
        })
      });
    }, (e, t) => Kr(e, t, 5));
    const Cee = ({
      item: e,
      values: t,
      onMouseEnter: n,
      onMouseLeave: s,
      selected: i,
      onSelect: a
    }) => {
      const o = ij(e, t);
      0;
      const r = Y.useCallback(() => n(e.id), [n, e.id]);
      0;
      const l = Y.useCallback(() => s(e.id), [s, e.id]);
      0;
      const c = Y.useCallback(() => a(i ? null : e.id), [e.id, a, i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        focusKey: e.id,
        className: Qu()(yee.item, i && yee.selected),
        onMouseEnter: r,
        onMouseLeave: l,
        onClick: c,
        children: [z.jsxs("div", {
          className: yee.titleColumn,
          children: [z.jsx("div", {
            className: yee.legendColor,
            style: {
              backgroundColor: tN(e.color)
            }
          }), z.jsx("div", {
            className: yee.title,
            children: z.jsx(Pc.EconomyPanel.BUDGET_ITEM, {
              hash: e.id
            })
          })]
        }), z.jsx("div", {
          className: yee.valueColumn,
          children: z.jsx(mee, {
            value: o,
            className: yee.valueField
          })
        })]
      });
    };
    X.add("game-ui/game/components/economy-panel/budget-page/budget-section/budget-section.tsx", {
      get BudgetSection() {
        return jee;
      },
      set BudgetSection(e) {
        jee = e;
      }
    });
    let Nee = {
      "budget-page": "budget-page_SIZ",
      budgetPage: "budget-page_SIZ",
      "chart-column": "chart-column_Y0V",
      chartColumn: "chart-column_Y0V",
      "main-column": "main-column_unC",
      mainColumn: "main-column_unC",
      "info-column": "info-column_K89",
      infoColumn: "info-column_K89",
      "budget-section": "budget-section_zaZ",
      budgetSection: "budget-section_zaZ",
      "total-section": "total-section_TGf",
      totalSection: "total-section_TGf",
      "total-content": "total-content_GKQ",
      totalContent: "total-content_GKQ",
      "total-label": "total-label_Uhe",
      totalLabel: "total-label_Uhe",
      "total-column": "total-column_Ikw",
      totalColumn: "total-column_Ikw",
      "total-field": "total-field_zjM",
      totalField: "total-field_zjM"
    };
    X.add("game-ui/game/components/economy-panel/budget-page/budget-page.module.scss", {
      get classes() {
        return Nee;
      },
      set classes(e) {
        Object.assign(Nee, e);
      }
    });
    var Oee = () => {
      rg(dT.value?.economyPanelBudgetPage);
      const e = sl(ej);
      const t = sl(tj);
      const n = sl(nj);
      const s = sl(sj);
      const i = sl(ZS);
      const a = sl(JS);
      const o = i + a;
      0;
      const [r, l] = Y.useState(null);
      0;
      const [c, u] = Y.useState(sw(e, "id"));
      0;
      const [d, m] = Y.useState(null);
      0;
      const h = Y.useCallback(e => m(e), []);
      0;
      const g = Y.useCallback(e => m(t => t === e ? null : t), []);
      0;
      const p = Y.useCallback(e => "string" == typeof e && u(e), []);
      const f = km();
      const x = f ? c : d || r;
      const v = e.find(e => e.id === x);
      const _ = n.find(e => e.id === x);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Nee.budgetPage,
        children: [z.jsx(fee, {
          selectedId: x,
          className: Nee.chartColumn
        }), z.jsx("div", {
          className: Nee.mainColumn,
          children: z.jsxs(Xg, {
            focused: c,
            direction: Mg.Vertical,
            onChange: p,
            onRefocus: Qg,
            children: [z.jsx(jee, {
              title: z.jsx(Pc.EconomyPanel.INCOME_SECTION_TITLE, {}),
              total: i,
              items: e,
              values: t,
              className: Nee.budgetSection,
              onMouseEnter: h,
              onMouseLeave: g,
              selectedItem: f ? null : r,
              onItemSelected: l,
              uiTag: dT.value?.economyPanelBudgetRevenue
            }), z.jsx(jee, {
              title: z.jsx(Pc.EconomyPanel.EXPENSES_SECTION_TITLE, {}),
              total: a,
              items: n,
              values: s,
              className: Nee.budgetSection,
              onMouseEnter: h,
              onMouseLeave: g,
              selectedItem: f ? null : r,
              onItemSelected: l,
              uiTag: dT.value?.economyPanelBudgetExpenses
            }), z.jsx(aT, {
              uiTag: dT.value?.economyPanelBudgetBalance,
              children: z.jsx(m2, {
                focusKey: Eg,
                theme: u2,
                className: Nee.totalSection,
                children: z.jsxs("div", {
                  className: Nee.totalContent,
                  children: [z.jsx("div", {
                    className: Nee.totalLabel,
                    children: z.jsx(Pc.EconomyPanel.MONTHLY_BALANCE, {})
                  }), z.jsx("div", {
                    className: Nee.totalColumn,
                    children: z.jsx(mee, {
                      value: o,
                      importance: "primary",
                      className: Nee.totalField
                    })
                  })]
                })
              })
            })]
          })
        }), z.jsx(Iee, {
          item: v ?? _ ?? null,
          values: null != v ? t : s,
          className: Nee.infoColumn
        })]
      });
    };
    X.add("game-ui/game/components/economy-panel/budget-page/budget-page.tsx", {
      get BudgetPage() {
        return Oee;
      },
      set BudgetPage(e) {
        Oee = e;
      }
    });
    let Pee = {
      "loan-form": "loan-form_Ohg",
      loanForm: "loan-form_Ohg",
      "slider-column": "slider-column_kts",
      sliderColumn: "slider-column_kts",
      gamepad: "gamepad_Gvj",
      slider: "slider_RYc",
      balloon: "balloon_Jlj",
      positive: "positive_WFM",
      negative: "negative_NTL",
      "balloon-content": "balloon-content_QEH",
      balloonContent: "balloon-content_QEH",
      limit: "limit_ZPi",
      "direction-labels": "direction-labels_KdN",
      directionLabels: "direction-labels_KdN",
      arrow: "arrow_AXM",
      "less-label": "less-label_ZOG",
      lessLabel: "less-label_ZOG",
      "less-arrow": "less-arrow_Oio arrow_AXM",
      lessArrow: "less-arrow_Oio arrow_AXM",
      space: "space_zFI",
      "more-label": "more-label_PtR",
      moreLabel: "more-label_PtR",
      "more-arrow": "more-arrow_odN arrow_AXM",
      moreArrow: "more-arrow_odN arrow_AXM",
      "button-column": "button-column_mFb",
      buttonColumn: "button-column_mFb",
      "button-row": "button-row_a78",
      buttonRow: "button-row_a78",
      button: "button_aQu",
      "accept-button": "accept-button_uUd button_aQu button_SsC item-states_QjV",
      acceptButton: "accept-button_uUd button_aQu button_SsC item-states_QjV",
      "reset-button": "reset-button_I2B button_aQu button_eqb item-states_QjV",
      resetButton: "reset-button_I2B button_aQu button_eqb item-states_QjV",
      "slider-container": "slider-container_f8H",
      sliderContainer: "slider-container_f8H",
      "slider-hint": "slider-hint_NMq",
      sliderHint: "slider-hint_NMq",
      "button-hint": "button-hint_qO6",
      buttonHint: "button-hint_qO6",
      "hint-spaceholder": "hint-spaceholder_iYD",
      hintSpaceholder: "hint-spaceholder_iYD"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-form/loan-form.module.scss", {
      get classes() {
        return Pee;
      },
      set classes(e) {
        Object.assign(Pee, e);
      }
    });
    let Aee = {
      slider: "slider_iN8 slider_pUS",
      edge: "edge_Qvg",
      positive: "positive_kiJ",
      negative: "negative_HpK",
      "left-edge": "left-edge_Rrm edge_Qvg",
      leftEdge: "left-edge_Rrm edge_Qvg",
      "right-edge": "right-edge_ocL edge_Qvg",
      rightEdge: "right-edge_ocL edge_Qvg",
      "track-bounds": "track-bounds_Bp4",
      trackBounds: "track-bounds_Bp4",
      thumb: "thumb_yXN thumb_WZt"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-form/loan-slider.module.scss", {
      get classes() {
        return Aee;
      },
      set classes(e) {
        Object.assign(Aee, e);
      }
    });
    let Ree = {
      balloon: "balloon__3G balloon_H23",
      container: "container_VsE container_jfe",
      arrow: "arrow_cyp arrow_Xfn",
      content: "content_tDr content_JQV"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-form/loan-slider-balloon.module.scss", {
      get classes() {
        return Ree;
      },
      set classes(e) {
        Object.assign(Ree, e);
      }
    });
    var Dee = () => {
      const e = km();
      0;
      const [t, n] = Y.useState(false);
      0;
      const [s, i] = Y.useState(false);
      const a = sl(oj);
      const o = sl(rj);
      const r = sl(lj);
      const l = r.amount - o.amount;
      const c = Math.abs(l) > .5;
      0;
      const u = Y.useRef(r.amount);
      const d = function (e) {
        const t = Math.pow(10, Math.max(Math.max(Math.floor(Math.log10(Math.abs(e))), 0) + 1 - (Math.max(Math.floor(Math.log10(Math.abs(15))), 0) + 1), 0));
        const n = t / 2;
        const i = 5 * t;
        return e / n <= 75 ? Math.max(n, 1) : e / t <= 75 ? Math.max(t, 1) : Math.max(i, 1);
      }(a);
      0;
      const m = Y.useCallback((e, t, n) => {
        const s = e + n * (t - e);
        const i = e + Math.round(n * (t - e) / d) * d;
        return Math.abs(o.amount - s) < Math.abs(i - s) ? o.amount : wd(i, Math.min(e, t), Math.max(e, t));
      }, [o.amount, d]);
      0;
      const h = Y.useMemo(() => ({
        "Change Slider Value": e => {
          let t = r.amount;
          if (e > 0) {
            t = Math.floor((r.amount + d) / d) * d;
          } else if (e < 0) {
            t = Math.ceil((r.amount - d) / d) * d;
          }
          if (o.amount > r.amount && t > o.amount || o.amount < r.amount && t < o.amount) {
            t = o.amount;
          }
          cj(t);
        }
      }), [o.amount, r.amount, d]);
      0;
      Y.useEffect(() => {
        if (e && u.current !== r.amount) {
          rp(UM.drag);
          u.current = r.amount;
        }
      }, [e, r.amount]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: h,
        children: z.jsxs(Ep, {
          className: Pee.loanForm,
          children: [z.jsxs("div", {
            className: Qu()(Pee.sliderColumn, e && Pee.gamepad),
            children: [z.jsx("div", {
              className: Pee.limit,
              children: z.jsx(Pc.EconomyPanel.LOAN_FORM_LIMIT, {
                LOAN_LIMIT: z.jsx(Gc, {
                  value: a,
                  unit: Oc.Money
                })
              })
            }), z.jsxs("div", {
              className: Pee.sliderContainer,
              children: [z.jsx(LT, {
                action: "Change Slider Value",
                className: Pee.sliderHint
              }), z.jsx(aT, {
                uiTag: dT.value?.economyPanelLoansSlider,
                children: z.jsxs(GM, {
                  focusKey: Eg,
                  value: r.amount,
                  start: 0,
                  end: a,
                  valueTransformer: m,
                  thumb: z.jsxs(z.Fragment, {
                    children: [z.jsx("div", {
                      className: Aee.thumb
                    }), c && (0, z.jsx)(fh, {
                      alignment: "center",
                      direction: "down",
                      theme: Ree,
                      className: Pee.balloon,
                      children: (0, z.jsx)("div", {
                        className: Qu()(Pee.balloonContent, zp(Pee, l)),
                        children: (0, z.jsx)(Gc, {
                          value: l,
                          unit: Oc.Money,
                          signed: true
                        })
                      })
                    })]
                  }),
                  theme: Aee,
                  className: Pee.slider,
                  style: {
                    "--stopPos": 100 * wd(o.amount / Math.max(a, 1), 0, 1) + "%"
                  },
                  onChange: cj,
                  children: [z.jsx("div", {
                    className: Qu()(Aee.leftEdge, o.amount > 0 ? Aee.negative : Aee.positive)
                  }), z.jsx("div", {
                    className: Qu()(Aee.rightEdge, o.amount < a ? Aee.positive : Aee.negative)
                  })]
                })
              })]
            }), z.jsxs("div", {
              className: Pee.directionLabels,
              children: [o.amount > 0 && (0, z.jsxs)(z.Fragment, {
                children: [(0, z.jsx)("div", {
                  className: Pee.lessLabel,
                  children: (0, z.jsx)(Pc.EconomyPanel.LOAN_FORM_LESS_LABEL, {})
                }), (0, z.jsx)(W_, {
                  src: "Media/Glyphs/ThickStrokeArrowLeft.svg",
                  className: Pee.lessArrow
                })]
              }), z.jsx("div", {
                className: Pee.space
              }), o.amount < a && (0, z.jsxs)(z.Fragment, {
                children: [(0, z.jsx)(W_, {
                  src: "Media/Glyphs/ThickStrokeArrowRight.svg",
                  className: Pee.moreArrow
                }), (0, z.jsx)("div", {
                  className: Pee.moreLabel,
                  children: (0, z.jsx)(Pc.EconomyPanel.LOAN_FORM_MORE_LABEL, {})
                })]
              })]
            })]
          }), z.jsx("div", {
            className: Pee.buttonColumn,
            children: z.jsxs(ep, {
              direction: Mg.Vertical,
              children: [z.jsxs("div", {
                className: Pee.buttonRow,
                children: [z.jsx(LT, {
                  action: "Select",
                  active: t,
                  className: Pee.buttonHint
                }), e && !t && (0, z.jsx)("div", {
                  className: Qu()(Pee.hintSpaceholder, Pee.buttonHint)
                }), z.jsx(Lh, {
                  onFocusChange: n,
                  children: z.jsx(aT, {
                    uiTag: dT.value?.economyPanelLoansAccept,
                    children: z.jsx(L_, {
                      disableHint: true,
                      selectSound: op.takeLoan,
                      className: Pee.acceptButton,
                      disabled: !c,
                      onSelect: uj,
                      children: z.jsx(Pc.EconomyPanel.LOAN_FORM_ACCEPT, {})
                    })
                  })
                })]
              }), z.jsxs("div", {
                className: Pee.buttonRow,
                children: [z.jsx(LT, {
                  action: "Select",
                  active: s,
                  className: Pee.buttonHint
                }), e && !s && (0, z.jsx)("div", {
                  className: Qu()(Pee.hintSpaceholder, Pee.buttonHint)
                }), z.jsx(Lh, {
                  onFocusChange: i,
                  children: z.jsx(L_, {
                    disableHint: true,
                    className: Pee.resetButton,
                    disabled: !c,
                    onSelect: dj,
                    children: z.jsx(Pc.EconomyPanel.LOAN_FORM_RESET, {})
                  })
                })]
              })]
            })
          })]
        })
      });
    };
    function Uee(e) {
      return Math.max(Math.floor(Math.log10(Math.abs(e))), 0) + 1;
    }
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-form/loan-form.tsx", {
      get LoanForm() {
        return Dee;
      },
      set LoanForm(e) {
        Dee = e;
      }
    });
    let Bee = {
      "table-header": "table-header_wsv",
      tableHeader: "table-header_wsv",
      "header-cell": "header-cell_ymh",
      headerCell: "header-cell_ymh",
      "table-content": "table-content_YfG",
      tableContent: "table-content_YfG",
      "content-cell": "content-cell_MZC",
      contentCell: "content-cell_MZC",
      "amount-column": "amount-column_kN8",
      amountColumn: "amount-column_kN8",
      "interest-rate-column": "interest-rate-column_jcI",
      interestRateColumn: "interest-rate-column_jcI",
      "monthly-cost-column": "monthly-cost-column_BPo",
      monthlyCostColumn: "monthly-cost-column_BPo",
      "monthly-cost-field": "monthly-cost-field_eRh",
      monthlyCostField: "monthly-cost-field_eRh",
      "new-value": "new-value_keh",
      newValue: "new-value_keh",
      negative: "negative_qB0",
      "loan-number": "loan-number_Mcp",
      loanNumber: "loan-number_Mcp",
      "current-value": "current-value_SLp",
      currentValue: "current-value_SLp",
      modified: "modified_rG6",
      "strikethrough-line": "strikethrough-line_Yh8",
      strikethroughLine: "strikethrough-line_Yh8",
      hidden: "hidden_RHn"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-table/loan-table.module.scss", {
      get classes() {
        return Bee;
      },
      set classes(e) {
        Object.assign(Bee, e);
      }
    });
    var Vee = () => (0, z.jsxs)("div", {
      className: Bee.tableHeader,
      children: [(0, z.jsx)("div", {
        className: Qu()(Bee.headerCell, Bee.amountColumn),
        children: (0, z.jsx)(Pc.EconomyPanel.LOAN_TABLE_AMOUNT, {})
      }), (0, z.jsx)("div", {
        className: Qu()(Bee.headerCell, Bee.interestRateColumn),
        children: (0, z.jsx)(Pc.EconomyPanel.LOAN_TABLE_INTEREST_RATE, {})
      }), (0, z.jsx)("div", {
        className: Qu()(Bee.headerCell, Bee.monthlyCostColumn),
        children: (0, z.jsx)(Pc.EconomyPanel.LOAN_TABLE_MONTHLY_COST, {})
      })]
    });
    var Hee = () => {
      const e = sl(rj);
      const t = sl(lj);
      const n = Math.abs(t.amount - e.amount) > .5;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Bee.tableContent,
        children: [z.jsx("div", {
          className: Qu()(Bee.contentCell, Bee.amountColumn),
          children: z.jsx(Kee, {
            currentValue: e.amount,
            newValue: t.amount,
            unit: Oc.Money,
            modified: n
          })
        }), z.jsx("div", {
          className: Qu()(Bee.contentCell, Bee.interestRateColumn),
          children: z.jsx(Kee, {
            currentValue: 100 * e.dailyInterestRate,
            newValue: 100 * t.dailyInterestRate,
            unit: Oc.PercentageSingleFraction,
            modified: n
          })
        }), z.jsxs("div", {
          className: Qu()(Bee.contentCell, Bee.monthlyCostColumn),
          children: [z.jsxs("div", {
            className: Qu()(uee.moneyField, uee.primary, Bee.monthlyCostField),
            children: [z.jsx("div", {
              className: Qu()(uee.sign, zp(Bee, -t.dailyPayment)),
              children: su(-t.dailyPayment, true)
            }), z.jsx("div", {
              className: Qu()(uee.content, zp(Bee, -e.dailyPayment)),
              children: z.jsx(Kee, {
                currentValue: e.dailyPayment,
                newValue: t.dailyPayment,
                unit: Oc.Money,
                modified: n,
                newClassName: zp(Bee, -t.dailyPayment)
              })
            })]
          }), z.jsx("div", {})]
        })]
      });
    };
    const Kee = ({
      currentValue: e,
      newValue: t,
      unit: n,
      modified: s,
      newClassName: i
    }) => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsxs)("div", {
        className: Qu()(Bee.currentValue, s && Bee.modified),
        children: [(0, z.jsx)(Gc, {
          value: e,
          unit: n
        }), s && (0, z.jsx)("div", {
          className: Bee.strikethroughLine
        })]
      }), (0, z.jsx)("div", {
        className: Qu()(Bee.newValue, !s && Bee.hidden, i),
        children: (0, z.jsx)(Gc, {
          value: t,
          unit: n
        })
      })]
    });
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-table/loan-table.tsx", {
      get LoanTableHeader() {
        return Vee;
      },
      set LoanTableHeader(e) {
        Vee = e;
      },
      get LoanTableContent() {
        return Hee;
      },
      set LoanTableContent(e) {
        Hee = e;
      }
    });
    let Wee = {
      "loan-adjustment": "loan-adjustment_mqe",
      loanAdjustment: "loan-adjustment_mqe"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-adjustment.module.scss", {
      get classes() {
        return Wee;
      },
      set classes(e) {
        Object.assign(Wee, e);
      }
    });
    var Yee = ({
      className: e
    }) => (0, z.jsxs)(m2, {
      header: (0, z.jsx)(Vee, {}),
      theme: u2,
      className: Qu()(Wee.loanAdjustment, e),
      children: [(0, z.jsx)(Hee, {}), (0, z.jsx)(Dee, {})]
    });
    X.add("game-ui/game/components/economy-panel/loan-page/loan-adjustment/loan-adjustment.tsx", {
      get LoanAdjustment() {
        return Yee;
      },
      set LoanAdjustment(e) {
        Yee = e;
      }
    });
    let $ee = {
      chartFontColor: "rgba(255, 255, 255, 0.6)",
      chartLineColor: "rgba(255, 255, 255, 0.1)",
      cityIncomeColor: "rgba(139, 219, 70, 0.6)",
      cityExpensesColor: "rgba(233, 95, 74, 0.6)",
      loanInterestColor: "rgba(233, 95, 74, 1)",
      "loan-chart": "loan-chart_IIu",
      loanChart: "loan-chart_IIu",
      content: "content_K6K",
      "chart-column": "chart-column_YvP",
      chartColumn: "chart-column_YvP",
      chart: "chart_nml",
      "summary-column": "summary-column_Wm0",
      summaryColumn: "summary-column_Wm0",
      "summary-item": "summary-item__T7",
      summaryItem: "summary-item__T7",
      warning: "warning_aXt",
      divider: "divider_s9s",
      legend: "legend_ots",
      "legend-item": "legend-item_OSA",
      legendItem: "legend-item_OSA"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-chart/loan-chart.module.scss", {
      get classes() {
        return $ee;
      },
      set classes(e) {
        Object.assign($ee, e);
      }
    });
    var Xee = ({
      className: e
    }) => {
      const t = sl(rj);
      const n = sl(lj);
      const s = sl(ZS);
      const i = s > 0 ? n.dailyPayment / s * 100 : 0;
      const a = Math.abs(sl(JS)) - t.dailyPayment;
      const o = a + n.dailyPayment;
      const r = s - o;
      0;
      const l = Y.useMemo(() => ({
        labels: ["Budget"],
        datasets: [{
          label: "cityIncome",
          data: [s],
          backgroundColor: $ee.cityIncomeColor,
          barPercentage: .8,
          categoryPercentage: .5,
          stack: "income"
        }, {
          label: "cityExpenses",
          data: [a],
          backgroundColor: $ee.cityExpensesColor,
          barPercentage: .8,
          categoryPercentage: .5,
          stack: "expenses"
        }, {
          label: "loanInterest",
          data: [n.dailyPayment],
          backgroundColor: $ee.loanInterestColor,
          barPercentage: .8,
          categoryPercentage: .5,
          stack: "expenses"
        }]
      }), [a, s, n.dailyPayment]);
      const c = function () {
        const e = Kc(Oc.Money);
        const t = sl(Ml);
        return {
          layout: {
            padding: {
              top: 24,
              right: 36,
              bottom: 0,
              left: 12
            }
          },
          scales: {
            y: {
              stacked: true,
              suggestedMax: 1e3,
              beginAtZero: true,
              grid: {
                color: $ee.chartLineColor,
                lineWidth: 2
              },
              border: {
                color: $ee.chartLineColor,
                width: 2
              },
              ticks: {
                maxTicksLimit: 10,
                font: {
                  size: 10 * t
                },
                color: $ee.chartFontColor,
                padding: 10,
                autoSkip: false,
                callback: t => e(t)
              }
            },
            x: {
              display: false,
              stacked: true
            }
          }
        };
      }();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(m2, {
        focusKey: Eg,
        theme: u2,
        className: Qu()($ee.loanChart, e),
        children: z.jsxs("div", {
          className: $ee.content,
          children: [z.jsxs("div", {
            className: $ee.chartColumn,
            children: [z.jsx(BR, {
              type: "bar",
              data: l,
              options: c,
              className: $ee.chart
            }), z.jsxs("div", {
              className: $ee.legend,
              children: [z.jsx(FR, {
                color: $ee.cityIncomeColor,
                label: z.jsx(Pc.EconomyPanel.LOAN_CHART_LEGEND_INCOME, {}),
                className: $ee.legendItem
              }), z.jsx(FR, {
                color: $ee.cityExpensesColor,
                label: z.jsx(Pc.EconomyPanel.LOAN_CHART_LEGEND_EXPENSES, {}),
                className: $ee.legendItem
              }), n.dailyPayment > 0 && (0, z.jsx)(FR, {
                color: $ee.loanInterestColor,
                label: (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_LEGEND_LOAN_INTEREST, {}),
                className: $ee.legendItem
              })]
            })]
          }), z.jsxs("div", {
            className: $ee.summaryColumn,
            children: [0 !== i && (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(Zee, {
                children: (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_RELATIVE_COST, {
                  RELATIVE_LOAN_COST: (0, z.jsx)(Gc, {
                    value: i,
                    unit: Oc.PercentageSingleFraction
                  })
                })
              }), (0, z.jsx)("div", {
                className: $ee.divider
              })]
            }), z.jsx(Zee, {
              warning: r <= 0,
              children: Qee(r, n.amount)
            }), .85 * s < o && (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)("div", {
                className: $ee.divider
              }), (0, z.jsx)(Zee, {
                warning: true,
                children: o > s ? (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_BUDGET_WARNING, {}) : (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_BUDGET_WARNING_MODIFIED, {})
              })]
            })]
          })]
        })
      });
    };
    function Qee(e, t) {
      0;
      const n = z.jsx(Gc, {
        value: e,
        unit: Oc.MoneyPerMonth
      });
      return e >= 0 ? t > 0 ? (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_REMAINING_SURPLUS, {
        TOTAL: n
      }) : (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_SURPLUS, {
        TOTAL: n
      }) : (0, z.jsx)(Pc.EconomyPanel.LOAN_CHART_DEFICIT, {
        TOTAL: n
      });
    }
    const Zee = ({
      warning: e,
      children: t
    }) => (0, z.jsx)(bb, {
      className: Qu()($ee.summaryItem, e && $ee.warning),
      children: t
    });
    X.add("game-ui/game/components/economy-panel/loan-page/loan-chart/loan-chart.tsx", {
      get LoanChart() {
        return Xee;
      },
      set LoanChart(e) {
        Xee = e;
      }
    });
    let Jee = {
      "loan-page": "loan-page_cyR",
      loanPage: "loan-page_cyR",
      "main-column": "main-column_NUx",
      mainColumn: "main-column_NUx",
      "info-column": "info-column_c8_",
      infoColumn: "info-column_c8_",
      chart: "chart_Dc8"
    };
    X.add("game-ui/game/components/economy-panel/loan-page/loan-page.module.scss", {
      get classes() {
        return Jee;
      },
      set classes(e) {
        Object.assign(Jee, e);
      }
    });
    var tte = () => (rg(dT.value?.economyPanelLoansPage), (0, Y.useEffect)(() => (dj(), () => dj()), []), (0, z.jsxs)("div", {
      className: Jee.loanPage,
      children: [(0, z.jsxs)("div", {
        className: Jee.mainColumn,
        children: [(0, z.jsx)(Yee, {
          className: Jee.adjustment
        }), (0, z.jsx)(Xee, {
          className: Jee.chart
        })]
      }), (0, z.jsx)(m2, {
        focusKey: Eg,
        theme: u2,
        className: Jee.infoColumn,
        children: (0, z.jsx)(N7, {
          icon: "Media/Game/Icons/Money.svg",
          title: (0, z.jsx)(Pc.EconomyPanel.LOAN_PAGE_TITLE, {}),
          description: (0, z.jsx)(Pc.EconomyPanel.LOAN_PAGE_DESCRIPTION, {})
        })
      })]
    }));
    X.add("game-ui/game/components/economy-panel/loan-page/loan-page.tsx", {
      get LoanPage() {
        return tte;
      },
      set LoanPage(e) {
        tte = e;
      }
    });
    var nte = Y.createContext({
      onFocusChange: () => {},
      onMouseEnter: () => {},
      onMouseLeave: () => {}
    });
    function ste(e) {
      0;
      const t = Y.useContext(nte);
      0;
      0;
      0;
      return {
        handleFocusChange: Y.useCallback(n => t.onFocusChange(e, n), [e, t]),
        handleMouseEnter: Y.useCallback(() => t.onMouseEnter(e), [e, t]),
        handleMouseLeave: Y.useCallback(() => t.onMouseLeave(e), [e, t])
      };
    }
    X.add("game-ui/game/components/economy-panel/production-page/production-page-context.ts", {
      get ProductionPageContext() {
        return nte;
      },
      set ProductionPageContext(e) {
        nte = e;
      },
      get useItemListeners() {
        return ste;
      },
      set useItemListeners(e) {
        ste = e;
      }
    });
    let ite = {
      detail: "detail_sbO",
      chart: "chart_Eey",
      column: "column_N8A",
      "left-column": "left-column_GbN",
      leftColumn: "left-column_GbN",
      "right-column": "right-column_hq1",
      rightColumn: "right-column_hq1",
      "center-column": "center-column_M5Z",
      centerColumn: "center-column_M5Z",
      row: "row_PNm",
      "double-row": "double-row_kpL",
      doubleRow: "double-row_kpL",
      label: "label_qcd",
      "resource-label": "resource-label_b8b",
      resourceLabel: "resource-label_b8b",
      "left-label": "left-label_aR5",
      leftLabel: "left-label_aR5",
      "right-label": "right-label_q7r",
      rightLabel: "right-label_q7r",
      "label-padding": "label-padding_TU1",
      labelPadding: "label-padding_TU1",
      "label-extra-padding": "label-extra-padding_qhR",
      labelExtraPadding: "label-extra-padding_qhR",
      image: "image_k4T",
      icon: "icon_DSu",
      "resource-icon": "resource-icon_GIT",
      resourceIcon: "resource-icon_GIT",
      "icon-container": "icon-container_iMp",
      iconContainer: "icon-container_iMp",
      "left-icon-container": "left-icon-container_V3g",
      leftIconContainer: "left-icon-container_V3g",
      "icon-container-padding": "icon-container-padding_NGu",
      iconContainerPadding: "icon-container-padding_NGu",
      "icon-container-extra-padding": "icon-container-extra-padding_DY7",
      iconContainerExtraPadding: "icon-container-extra-padding_DY7",
      "right-icon-container": "right-icon-container_zrI",
      rightIconContainer: "right-icon-container_zrI",
      "top-icon-container": "top-icon-container_vrp",
      topIconContainer: "top-icon-container_vrp",
      "bottom-icon-container": "bottom-icon-container_Wzp",
      bottomIconContainer: "bottom-icon-container_Wzp"
    };
    X.add("game-ui/game/components/economy-panel/production-page/resource-detail/resource-detail.module.scss", {
      get classes() {
        return ite;
      },
      set classes(e) {
        Object.assign(ite, e);
      }
    });
    var ote = ({
      entity: e,
      className: t
    }) => (0, z.jsx)(m2, {
      focusKey: Eg,
      theme: u2,
      className: Qu()(ite.resourceDetail, t),
      children: !Ur(e, Xp) && (0, z.jsx)(rte, {
        entity: e
      })
    });
    var rte = ({
      entity: e
    }) => {
      const t = ll(fj, e);
      const n = ll(pj, e);
      const s = function (e, t) {
        const n = t.inputs.flatMap(e => e);
        let s = Math.max(n.length, 1);
        let i = t.outputs.length + t.serviceOutputs.length + e.consumers.length;
        if (e.tradable) {
          s++;
          i++;
        }
        return Math.max(s, i);
      }(t, n);
      const i = (40 * s + 8 * (s - 1)) * Vm();
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: ite.detail,
        children: z.jsxs("div", {
          className: ite.chart,
          style: {
            height: i
          },
          children: [z.jsx(lte, {
            resource: t,
            details: n
          }), z.jsx(dte, {
            resource: t,
            details: n
          }), z.jsx(mte, {
            resource: t,
            details: n
          })]
        })
      });
    };
    var lte = ({
      resource: e,
      details: t
    }) => (0, z.jsxs)("div", {
      className: Qu()(ite.column, ite.leftColumn),
      children: [0 === t?.inputs.length && (0, z.jsx)(xte, {
        icon: e.producer.icon,
        arrow: "ProductionArrow",
        children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_PRODUCTIONLINK, {
          hash: e.producer.name
        })
      }), t?.inputs.map((t, n) => (0, z.jsx)(cte, {
        resource: e,
        entities: t
      }, n)), e.tradable && (0, z.jsx)(ute, {})]
    });
    var cte = ({
      resource: e,
      entities: t
    }) => {
      const n = cl(fj, t);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(ite.row, n.length > 1 && ite.doubleRow),
        style: {
          flex: n.length
        },
        children: [n.map((e, t) => (0, z.jsx)("div", {
          className: ite.row,
          children: (0, z.jsx)("div", {
            className: Qu()(ite.iconContainer, ite.leftIconContainer, n.length > 1 && (0 === t ? ite.topIconContainer : ite.bottomIconContainer)),
            children: (0, z.jsx)("img", {
              src: e.icon,
              className: ite.icon
            })
          })
        }, Dr(e.entity))), z.jsx("div", {
          className: Qu()(ite.label, ite.rightLabel, ite.labelPadding, n.length > 1 && ite.labelExtraPadding),
          children: z.jsx(Pc.EconomyPanel.PRODUCTION_PAGE_PRODUCTIONLINK, {
            hash: e.producer.name
          })
        }), z.jsx("div", {
          className: Qu()(ite.iconContainer, ite.leftIconContainer, ite.iconContainerPadding, n.length > 1 && ite.iconContainerExtraPadding),
          children: z.jsx("img", {
            src: e.producer.icon,
            className: ite.icon
          })
        }), z.jsx("img", {
          src: `Media/Game/Resources/Production/${1 === n.length ? "Input" : "DoubleInput"}Arrow.png`,
          className: ite.image
        })]
      });
    };
    var ute = () => (0, z.jsxs)("div", {
      className: ite.row,
      children: [(0, z.jsx)("img", {
        src: "Media/Game/Resources/Production/ImportArrow.png",
        className: ite.image
      }), (0, z.jsx)("div", {
        className: Qu()(ite.iconContainer, ite.leftIconContainer),
        children: (0, z.jsx)("img", {
          src: "Media/Game/Icons/Import.svg",
          className: ite.icon
        })
      }), (0, z.jsx)("div", {
        className: Qu()(ite.label, ite.leftLabel),
        children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_IMPORT, {})
      })]
    });
    var dte = ({
      resource: e
    }) => (0, z.jsx)("div", {
      className: Qu()(ite.column, ite.centerColumn),
      children: (0, z.jsxs)("div", {
        className: Qu()(ite.label, ite.resourceLabel),
        children: [(0, z.jsx)("img", {
          src: e.icon,
          className: Qu()(ite.icon, ite.resourceIcon)
        }), (0, z.jsx)(Pc.Resources.TITLE, {
          hash: e.name
        })]
      })
    });
    var mte = ({
      resource: e,
      details: t
    }) => (0, z.jsxs)("div", {
      className: Qu()(ite.column, ite.rightColumn),
      children: [t?.serviceOutputs.map(e => (0, z.jsx)(pte, {
        entity: e
      }, Dr(e))), (0, z.jsx)(gte, {
        resource: e,
        details: t
      }), t?.outputs.map((e, t) => (0, z.jsx)(hte, {
        entity: e
      }, t)), e.tradable && (0, z.jsx)(fte, {})]
    });
    var hte = ({
      entity: e
    }) => {
      const t = ll(fj, e);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: ite.row,
        children: [z.jsx("img", {
          src: "Media/Game/Resources/Production/OutputArrow.png",
          className: ite.image
        }), z.jsx("div", {
          className: Qu()(ite.iconContainer, ite.leftIconContainer),
          children: z.jsx("img", {
            src: t.producer.icon,
            className: ite.icon
          })
        }), z.jsx("div", {
          className: Qu()(ite.label, ite.leftLabel),
          children: z.jsx(Pc.EconomyPanel.PRODUCTION_PAGE_PRODUCTIONLINK, {
            hash: t.producer.name
          })
        }), z.jsx("div", {
          className: Qu()(ite.iconContainer, ite.rightIconContainer),
          children: z.jsx("img", {
            src: t.icon,
            className: ite.icon
          })
        })]
      });
    };
    var gte = ({
      resource: e
    }) => (0, z.jsx)(z.Fragment, {
      children: e.consumers.map((e, t) => (0, z.jsx)(xte, {
        icon: e.icon,
        arrow: "ConsumptionArrow",
        children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_PRODUCTIONLINK, {
          hash: e.name
        })
      }, t))
    });
    const pte = ({
      entity: e
    }) => {
      const t = ll(xj, e);
      0;
      0;
      return z.jsx(xte, {
        icon: t.icon,
        arrow: "ConsumptionArrow",
        children: z.jsx(Pc.Services.NAME, {
          hash: t.name
        })
      });
    };
    var fte = () => (0, z.jsxs)("div", {
      className: ite.row,
      children: [(0, z.jsx)("img", {
        src: "Media/Game/Resources/Production/ExportArrow.png",
        className: ite.image
      }), (0, z.jsx)("div", {
        className: Qu()(ite.iconContainer, ite.leftIconContainer),
        children: (0, z.jsx)("img", {
          src: "Media/Game/Icons/Export.svg",
          className: ite.icon
        })
      }), (0, z.jsx)("div", {
        className: Qu()(ite.label, ite.leftLabel),
        children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_EXPORT, {})
      })]
    });
    var xte = ({
      icon: e,
      arrow: t,
      children: n
    }) => (0, z.jsxs)("div", {
      className: ite.row,
      children: [(0, z.jsx)("img", {
        src: `Media/Game/Resources/Production/${t}.png`,
        className: ite.image
      }), (0, z.jsx)("div", {
        className: Qu()(ite.iconContainer, ite.leftIconContainer),
        children: (0, z.jsx)("img", {
          src: e,
          className: ite.icon
        })
      }), (0, z.jsx)("div", {
        className: Qu()(ite.label, ite.rightLabel),
        children: n
      })]
    });
    X.add("game-ui/game/components/economy-panel/production-page/resource-detail/resource-detail.tsx", {
      get ResourceDetail() {
        return ote;
      },
      set ResourceDetail(e) {
        ote = e;
      },
      get Detail() {
        return rte;
      },
      set Detail(e) {
        rte = e;
      },
      get InputsColumn() {
        return lte;
      },
      set InputsColumn(e) {
        lte = e;
      },
      get Input() {
        return cte;
      },
      set Input(e) {
        cte = e;
      },
      get Import() {
        return ute;
      },
      set Import(e) {
        ute = e;
      },
      get ResourceColumn() {
        return dte;
      },
      set ResourceColumn(e) {
        dte = e;
      },
      get OutputsColumn() {
        return mte;
      },
      set OutputsColumn(e) {
        mte = e;
      },
      get Output() {
        return hte;
      },
      set Output(e) {
        hte = e;
      },
      get Consumptions() {
        return gte;
      },
      set Consumptions(e) {
        gte = e;
      },
      get Export() {
        return fte;
      },
      set Export(e) {
        fte = e;
      },
      get ThroughPut() {
        return xte;
      },
      set ThroughPut(e) {
        xte = e;
      }
    });
    let vte = {
      "progress-bar": "progress-bar_xWR",
      progressBar: "progress-bar_xWR",
      "progress-bounds": "progress-bounds_Fjq",
      progressBounds: "progress-bounds_Fjq",
      progress: "progress_JAQ",
      label: "label_nBK"
    };
    X.add("game-ui/common/progress-bar/progress-bar.module.scss", {
      get classes() {
        return vte;
      },
      set classes(e) {
        Object.assign(vte, e);
      }
    });
    let bte = {
      "progress-bar": "progress-bar_d6t progress-bar_xWR",
      progressBar: "progress-bar_d6t progress-bar_xWR",
      progress: "progress_egi progress_JAQ"
    };
    X.add("game-ui/common/progress-bar/themes/default-progress-bar.module.scss", {
      get classes() {
        return bte;
      },
      set classes(e) {
        Object.assign(bte, e);
      }
    });
    var Ete = ({
      progress: e,
      max: t,
      theme: n = bte,
      className: s,
      style: i,
      children: a,
      ...o
    }) => {
      0;
      const r = Y.useMemo(() => ({
        ...vte,
        ...n
      }), [n]);
      const l = t > 0 ? 100 * wd(e / t, 0, 1) : 0;
      0;
      0;
      0;
      return z.jsxs("div", {
        ...o,
        className: Qu()(r.progressBar, s),
        style: i,
        children: [r.progressLabel && null != a && (0, z.jsx)("div", {
          className: r.label,
          children: a
        }), z.jsx("div", {
          className: r.progressBounds,
          style: {
            width: l + "%"
          },
          children: z.jsx("div", {
            className: r.progress,
            style: {
              width: (l > 0 ? 100 / l * 100 : 0) + "%"
            },
            children: r.progressLabel && null != a && (0, z.jsx)("div", {
              className: r.progressLabel,
              children: a
            })
          })
        }), !r.progressLabel && null != a && (0, z.jsx)("div", {
          className: r.label,
          children: a
        })]
      });
    };
    X.add("game-ui/common/progress-bar/progress-bar.tsx", {
      get ProgressBar() {
        return Ete;
      },
      set ProgressBar(e) {
        Ete = e;
      }
    });
    var Ite = ({
      focusKey: e,
      forceFocusable: t,
      initialExpanded: n = false,
      header: s,
      theme: i = u2,
      transition: a = HQ,
      className: o,
      children: r,
      onToggleExpanded: l
    }) => {
      const c = VQ(i);
      const u = Y.Children.toArray(r).filter(Boolean).length > 0;
      0;
      const [d, m] = Y.useState(n);
      0;
      const h = Y.useCallback(() => {
        m(e => !e);
        rp(op.expandPanel);
        if (l) {
          l(!d);
        }
      }, [d, l]);
      0;
      const g = Y.useMemo(() => ({
        theme: c,
        expandable: u,
        expanded: d,
        toggleExpanded: u ? h : undefined
      }), [u, d, c, h]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Tp, {
        className: Qu()(c.section, u && c.expandable, u && c.expanded, o),
        children: z.jsx(c2.Provider, {
          value: g,
          children: z.jsx(Fg, {
            expanded: d,
            expandable: u,
            onAction: h,
            children: z.jsxs(ep, {
              children: [z.jsx(Ep, {
                focusKey: u || t ? e : Eg,
                className: Qu()(c.header, u && c.expandable, c.first, (!u || !d) && c.last),
                children: s
              }), u && (0, z.jsx)(py, {
                in: d,
                children: (0, z.jsx)(gy, {
                  styles: a,
                  children: (0, z.jsx)("div", {
                    children: (0, z.jsx)(Tp, {
                      className: Qu()(c.content, c.last, c.expandable),
                      children: r
                    })
                  })
                })
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/common/section/expandable-section.tsx", {
      get ExpandableSection() {
        return Ite;
      },
      set ExpandableSection(e) {
        Ite = e;
      }
    });
    var yte = ({
      tooltip: e,
      handleMouseEnter: t,
      handleMouseLeave: n,
      className: s,
      children: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      0;
      const {
        expanded: r,
        toggleExpanded: l,
        theme: c
      } = Y.useContext(c2);
      const u = null != l;
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: e,
        children: z.jsxs(Ep, {
          focusKey: u ? Ig : Eg,
          className: Qu()(c.titleBar, u && c.expandable, s),
          onClick: l,
          onMouseEnter: t,
          onMouseLeave: n,
          onFocusChange: o,
          children: [u && (0, z.jsx)("div", {
            className: c.buttonSpace
          }), z.jsx("div", {
            className: c.title,
            children: i
          }), z.jsx(LT, {
            action: "Expand Group",
            active: u && a
          }), u && (0, z.jsx)(W_, {
            src: r ? c.collapseIcon : c.expandIcon,
            className: c.toggleButton
          })]
        })
      });
    };
    X.add("game-ui/common/section/section-header.tsx", {
      get SectionHeader() {
        return yte;
      },
      set SectionHeader(e) {
        yte = e;
      }
    });
    let Ste = {
      "resource-list": "resource-list_Ra6",
      resourceList: "resource-list_Ra6",
      category: "category_nho",
      categoryHeader: "categoryHeader_YGs",
      "table-header": "table-header_Qbg",
      tableHeader: "table-header_Qbg",
      "header-cell": "header-cell_k7Z",
      headerCell: "header-cell_k7Z",
      table: "table_KZC",
      scrollable: "scrollable_Tuh",
      "table-lines": "table-lines_PGv",
      tableLines: "table-lines_PGv",
      name: "name_IJ7",
      production: "production_iuR",
      "surplus-deficit": "surplus-deficit_oEQ",
      surplusDeficit: "surplus-deficit_oEQ",
      "deficit-label": "deficit-label_CkA",
      deficitLabel: "deficit-label_CkA",
      "surplus-label": "surplus-label_U6j",
      surplusLabel: "surplus-label_U6j",
      "resource-item": "resource-item_oLG item-hover_WK8 item-focused_FuT",
      resourceItem: "resource-item_oLG item-hover_WK8 item-focused_FuT",
      "icon-container": "icon-container_Bnw",
      iconContainer: "icon-container_Bnw",
      icon: "icon_J9H icon_Iwk",
      title: "title_l1U",
      "name-column": "name-column_Jt4",
      nameColumn: "name-column_Jt4",
      "data-column": "data-column_k1t",
      dataColumn: "data-column_k1t",
      "production-bar": "production-bar_PrU",
      productionBar: "production-bar_PrU"
    };
    X.add("game-ui/game/components/economy-panel/production-page/resource-list/resource-list.module.scss", {
      get classes() {
        return Ste;
      },
      set classes(e) {
        Object.assign(Ste, e);
      }
    });
    let Cte = {
      "progress-bar": "progress-bar_oCn progress-bar_RG2 progress-bar_xWR",
      progressBar: "progress-bar_oCn progress-bar_RG2 progress-bar_xWR",
      progress: "progress_gQv progress_GLS progress_JAQ"
    };
    X.add("game-ui/game/components/economy-panel/production-page/resource-list/themes/negative-progress-bar.module.scss", {
      get classes() {
        return Cte;
      },
      set classes(e) {
        Object.assign(Cte, e);
      }
    });
    let wte = {
      "progress-bar": "progress-bar_P_j progress-bar_RG2 progress-bar_xWR",
      progressBar: "progress-bar_P_j progress-bar_RG2 progress-bar_xWR",
      progress: "progress_zGB progress_GLS progress_JAQ"
    };
    X.add("game-ui/game/components/economy-panel/production-page/resource-list/themes/positive-progress-bar.module.scss", {
      get classes() {
        return wte;
      },
      set classes(e) {
        Object.assign(wte, e);
      }
    });
    let Pte = {
      "progress-bar": "progress-bar_RG2 progress-bar_xWR",
      progressBar: "progress-bar_RG2 progress-bar_xWR",
      progress: "progress_GLS progress_JAQ"
    };
    X.add("game-ui/game/components/economy-panel/production-page/resource-list/themes/production-progress-bar.module.scss", {
      get classes() {
        return Pte;
      },
      set classes(e) {
        Object.assign(Pte, e);
      }
    });
    var Ate = ({
      className: e
    }) => {
      const t = sl(gj);
      const n = sl(hj);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.economyPanelProductionResources,
        children: z.jsx(ab, {
          className: Qu()(Ste.resourceList, Ste.scrollable, e),
          children: z.jsx(ep, {
            direction: Mg.Vertical,
            children: t.map((e, t) => (0, z.jsx)(Mte, {
              max: n,
              category: e,
              initialExpanded: 0 === t
            }, Dr(e.entity)))
          })
        })
      });
    };
    const Mte = ({
      category: e,
      max: t,
      initialExpanded: n
    }) => (0, z.jsxs)(Ite, {
      focusKey: Dr(e.entity),
      initialExpanded: n,
      header: (0, z.jsx)(yte, {
        className: Ste.categoryHeader,
        children: (0, z.jsx)(Pc.EconomyPanel.RESOURCE_CATEGORY, {
          hash: e.name
        })
      }),
      theme: u2,
      className: Ste.category,
      children: [(0, z.jsxs)("div", {
        className: Ste.tableHeader,
        children: [(0, z.jsx)("div", {
          className: Qu()(Ste.headerCell, Ste.name)
        }), (0, z.jsx)("div", {
          className: Qu()(Ste.headerCell, Ste.production),
          children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_PRODUCTION, {})
        }), (0, z.jsx)("div", {
          className: Qu()(Ste.headerCell, Ste.surplusDeficit),
          children: (0, z.jsx)("span", {
            className: Ste.surplusLabel,
            children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_SURPLUS, {})
          })
        }), (0, z.jsx)("div", {
          className: Qu()(Ste.headerCell, Ste.surplusDeficit),
          children: (0, z.jsx)("span", {
            className: Ste.deficitLabel,
            children: (0, z.jsx)(Pc.EconomyPanel.PRODUCTION_PAGE_DEFICIT, {})
          })
        })]
      }), (0, z.jsx)(ep, {
        direction: Mg.Vertical,
        children: e.resources.map(e => (0, z.jsx)(Rte, {
          resource: e,
          max: t
        }, Dr(e.entity)))
      }), (0, z.jsxs)("div", {
        className: Ste.tableLines,
        children: [(0, z.jsx)("div", {
          className: Ste.name
        }), (0, z.jsx)("div", {
          className: Ste.production
        }), (0, z.jsx)("div", {
          className: Ste.surplusDeficit
        }), (0, z.jsx)("div", {
          className: Ste.surplusDeficit
        })]
      })]
    });
    const Rte = ({
      resource: e,
      max: t
    }) => {
      const {
        handleFocusChange: n,
        handleMouseEnter: s,
        handleMouseLeave: i
      } = ste(e.entity);
      const a = ll(vj, e.entity);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: n,
        children: z.jsxs(Ep, {
          focusKey: Dr(e.entity),
          className: Ste.resourceItem,
          onMouseEnter: s,
          onMouseLeave: i,
          children: [z.jsx("div", {
            className: Qu()(Ste.nameColumn),
            children: z.jsx("div", {
              className: Ste.iconContainer,
              children: z.jsx("img", {
                src: e.icon,
                className: Ste.icon
              })
            })
          }), z.jsx("div", {
            className: Qu()(Ste.dataColumn),
            children: z.jsx(Ete, {
              progress: a.production,
              max: t,
              theme: Pte,
              className: Ste.productionBar,
              children: z.jsx(Gc, {
                value: a.production,
                unit: Oc.WeightPerMonth
              })
            })
          }), z.jsx("div", {
            className: Qu()(Ste.dataColumn),
            children: z.jsx(Ete, {
              progress: a.surplus,
              max: t,
              theme: wte,
              className: Ste.productionBar,
              children: z.jsx(Gc, {
                value: a.surplus,
                unit: Oc.WeightPerMonth
              })
            })
          }), z.jsx("div", {
            className: Qu()(Ste.dataColumn),
            children: z.jsx(Ete, {
              progress: a.deficit,
              max: t,
              theme: Cte,
              className: Ste.productionBar,
              children: z.jsx(Gc, {
                value: a.deficit,
                unit: Oc.WeightPerMonth
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/economy-panel/production-page/resource-list/resource-list.tsx", {
      get ResourceList() {
        return Ate;
      },
      set ResourceList(e) {
        Ate = e;
      }
    });
    let kte = {
      "production-page": "production-page_A9T",
      productionPage: "production-page_A9T",
      "main-column": "main-column_FBD",
      mainColumn: "main-column_FBD",
      "info-column": "info-column_jLZ",
      infoColumn: "info-column_jLZ"
    };
    X.add("game-ui/game/components/economy-panel/production-page/production-page.module.scss", {
      get classes() {
        return kte;
      },
      set classes(e) {
        Object.assign(kte, e);
      }
    });
    var Fte;
    var Ute = () => {
      rg(dT.value?.economyPanelProductionPage);
      0;
      const [e, t] = Y.useState(Xp);
      0;
      const n = Y.useMemo(() => ({
        onFocusChange: (e, n) => n && t(e),
        onMouseEnter: e => t(e),
        onMouseLeave: e => t(t => Ur(t, e) ? Xp : t)
      }), []);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: kte.productionPage,
        children: [z.jsx(nte.Provider, {
          value: n,
          children: z.jsx(Ate, {
            className: kte.mainColumn
          })
        }), z.jsx(ote, {
          entity: e,
          className: kte.infoColumn
        })]
      });
    };
    X.add("game-ui/game/components/economy-panel/production-page/production-page.tsx", {
      get ProductionPage() {
        return Ute;
      },
      set ProductionPage(e) {
        Ute = e;
      }
    });
    (function (e) {
      e[e.Service = 0] = "Service";
      e[e.BudgetSlider = 1] = "BudgetSlider";
      e[e.ServiceFee = 2] = "ServiceFee";
      e[e.FeeRevenue = 3] = "FeeRevenue";
      e[e.ExportRevenue = 4] = "ExportRevenue";
      e[e.ServiceUpkeep = 5] = "ServiceUpkeep";
      e[e.ImportExpense = 6] = "ImportExpense";
    })(Fte || (Fte = {}));
    var Bte = {
      type: Fte.BudgetSlider
    };
    var Gte = {
      type: Fte.FeeRevenue
    };
    var Vte = {
      type: Fte.ExportRevenue
    };
    var Hte = {
      type: Fte.ServiceUpkeep
    };
    var Kte = {
      type: Fte.ImportExpense
    };
    var Wte = Y.createContext({
      onFocusChange: () => {},
      onMouseEnter: () => {},
      onMouseLeave: () => {}
    });
    function zte(e) {
      0;
      const t = Y.useContext(Wte);
      0;
      0;
      0;
      return {
        handleFocusChange: Y.useCallback(n => t.onFocusChange(e, n), [e, t]),
        handleMouseEnter: Y.useCallback(() => t.onMouseEnter(e), [e, t]),
        handleMouseLeave: Y.useCallback(() => t.onMouseLeave(e), [e, t])
      };
    }
    X.add("game-ui/game/components/economy-panel/service-page/service-page-context.ts", {
      get ServicePageItemType() {
        return Fte;
      },
      set ServicePageItemType(e) {
        Fte = e;
      },
      get BUDGET_SLIDER() {
        return Bte;
      },
      set BUDGET_SLIDER(e) {
        Bte = e;
      },
      get FEE_REVENUE_FIELD() {
        return Gte;
      },
      set FEE_REVENUE_FIELD(e) {
        Gte = e;
      },
      get EXPORT_REVENUE_FIELD() {
        return Vte;
      },
      set EXPORT_REVENUE_FIELD(e) {
        Vte = e;
      },
      get SERVICE_UPKEEP_FIELD() {
        return Hte;
      },
      set SERVICE_UPKEEP_FIELD(e) {
        Hte = e;
      },
      get IMPORT_EXPENSE_FIELD() {
        return Kte;
      },
      set IMPORT_EXPENSE_FIELD(e) {
        Kte = e;
      },
      get ServicePageContext() {
        return Wte;
      },
      set ServicePageContext(e) {
        Wte = e;
      },
      get useItemListeners() {
        return zte;
      },
      set useItemListeners(e) {
        zte = e;
      }
    });
    let Yte = {
      "service-item-detail": "service-item-detail_iHg",
      serviceItemDetail: "service-item-detail_iHg",
      "detail-layout": "detail-layout_yS8",
      detailLayout: "detail-layout_yS8"
    };
    X.add("game-ui/game/components/economy-panel/service-page/item-detail/service-item-detail.module.scss", {
      get classes() {
        return Yte;
      },
      set classes(e) {
        Object.assign(Yte, e);
      }
    });
    var qte = ({
      service: e,
      itemId: t,
      className: n
    }) => {
      const s = ll(Tj, e);
      0;
      return z.jsx(m2, {
        focusKey: Eg,
        theme: u2,
        className: Qu()(Yte.serviceItemDetail, n),
        children: Xte(t, s)
      });
    };
    function Xte(e, t) {
      switch (e?.type) {
        case Fte.Service:
          0;
          return z.jsx(Qte, {
            entity: e.entity
          });
        case Fte.BudgetSlider:
          return null != t ? (0, z.jsx)(Zte, {
            serviceDetails: t
          }) : null;
        case Fte.ServiceFee:
          if (null != t) {
            const n = t.fees.find(t => t.name === e.name);
            if (null != n) {
              0;
              return z.jsx(Jte, {
                fee: n,
                serviceDetails: t
              });
            }
          }
          return null;
        case Fte.FeeRevenue:
          0;
          return z.jsx(ene, {});
        case Fte.ExportRevenue:
          0;
          return z.jsx(tne, {});
        case Fte.ServiceUpkeep:
          0;
          return z.jsx(nne, {});
        case Fte.ImportExpense:
          0;
          return z.jsx(sne, {});
        default:
          return null;
      }
    }
    const Qte = ({
      entity: e
    }) => {
      const t = ll(uT, e);
      return t ? (0, z.jsx)(N7, {
        icon: t.icon,
        title: (0, z.jsx)(Tc, {
          id: t.titleId
        }),
        description: t.descriptionId ? (0, z.jsx)(Tc, {
          id: t.descriptionId
        }) : undefined
      }) : null;
    };
    const Zte = ({
      serviceDetails: e
    }) => {
      const t = e.efficiency - 100;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(N7, {
        icon: e.icon,
        title: z.jsx(Pc.EconomyPanel.SERVICE_BUDGET_SLIDER_TITLE, {
          hash: e.name
        }),
        description: z.jsx(Pc.EconomyPanel.SERVICE_BUDGET_SLIDER_DESCRIPTION, {
          hash: e.name
        }),
        className: Yte.detailLayout,
        bottom: z.jsx(z6, {
          label: z.jsx(Pc.EconomyPanel.SERVICE_BUDGET_EFFICIENCY, {}),
          theme: vee,
          className: zp(vee, t),
          children: z.jsx(Gc, {
            signed: true,
            value: t,
            unit: Oc.Percentage
          })
        })
      }, "budget");
    };
    const Jte = ({
      serviceDetails: e,
      fee: t
    }) => {
      const n = 100 * (t.consumptionMultiplier - 1);
      const s = 100 * (t.efficiencyMultiplier - 1);
      return t ? (0, z.jsx)(N7, {
        icon: e.icon,
        title: (0, z.jsx)(Pc.EconomyPanel.SERVICES_RESOURCE_FEE_LABEL, {
          hash: t.name
        }),
        description: (0, z.jsx)(Pc.EconomyPanel.SERVICES_RESOURCE_FEE_DESCRIPTION, {
          hash: t.name
        }),
        bottom: (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(z6, {
            label: (0, z.jsx)(Pc.EconomyPanel.SERVICES_RESOURCE_FEE_CONSUMPTION, {
              hash: t.name
            }),
            theme: vee,
            className: zp(vee, -n),
            children: (0, z.jsx)(Gc, {
              signed: true,
              value: n,
              unit: Oc.Percentage
            })
          }), (0, z.jsx)(z6, {
            label: (0, z.jsx)(Pc.EconomyPanel.SERVICES_RESOURCE_FEE_EFFICIENCY, {}),
            theme: vee,
            className: zp(vee, s),
            children: (0, z.jsx)(Gc, {
              signed: true,
              value: s,
              unit: Oc.Percentage
            })
          }), (0, z.jsx)(z6, {
            label: (0, z.jsx)(Pc.EconomyPanel.SERVICES_RESOURCE_FEE_HAPPINESS, {}),
            theme: vee,
            className: zp(vee, t.happinessEffect),
            children: (0, z.jsx)(Gc, {
              signed: true,
              value: t.happinessEffect,
              unit: Oc.Integer
            })
          })]
        }),
        className: Yte.detailLayout
      }) : null;
    };
    const ene = () => (0, z.jsx)(N7, {
      icon: "Media/Game/Icons/ServiceFees.svg",
      title: (0, z.jsx)(Pc.EconomyPanel.SERVICES_FEES_LABEL_FEES, {}),
      description: (0, z.jsx)(Pc.EconomyPanel.SERVICE_FEES_REVENUE_DESCRIPTION, {}),
      className: Yte.detailLayout
    });
    const tne = () => (0, z.jsx)(N7, {
      icon: "Media/Game/Icons/Export.svg",
      title: (0, z.jsx)(Pc.EconomyPanel.SERVICES_FEES_LABEL_EXPORT, {}),
      description: (0, z.jsx)(Pc.EconomyPanel.SERVICE_EXPORT_REVENUE_DESCRIPTION, {}),
      className: Yte.detailLayout
    });
    const nne = () => (0, z.jsx)(N7, {
      icon: "Media/Game/Icons/ServiceUpkeep.svg",
      title: (0, z.jsx)(Pc.EconomyPanel.SERVICES_TITLE_EXPENSES, {}),
      description: (0, z.jsx)(Pc.EconomyPanel.SERVICE_UPKEEP_EXPENSE_DESCRIPTION, {}),
      className: Yte.detailLayout
    });
    const sne = () => (0, z.jsx)(N7, {
      icon: "Media/Game/Icons/Import.svg",
      title: (0, z.jsx)(Pc.EconomyPanel.SERVICES_FEES_LABEL_IMPORT, {}),
      description: (0, z.jsx)(Pc.EconomyPanel.SERVICE_IMPORT_EXPENSE_DESCRIPTION, {}),
      className: Yte.detailLayout
    });
    X.add("game-ui/game/components/economy-panel/service-page/item-detail/service-item-detail.tsx", {
      get ServiceItemDetail() {
        return qte;
      },
      set ServiceItemDetail(e) {
        qte = e;
      }
    });
    let ine = {
      "budget-item": "budget-item_b_g item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      budgetItem: "budget-item_b_g item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      label: "label_vC7",
      field: "field_s_O"
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/budget-item/budget-item.module.scss", {
      get classes() {
        return ine;
      },
      set classes(e) {
        Object.assign(ine, e);
      }
    });
    var one = ({
      identifier: e,
      label: t,
      value: n
    }) => {
      const {
        handleFocusChange: s,
        handleMouseEnter: i,
        handleMouseLeave: a
      } = zte(e);
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: s,
        children: z.jsxs(Ep, {
          className: ine.budgetItem,
          onMouseEnter: i,
          onMouseLeave: a,
          children: [z.jsx("div", {
            className: ine.label,
            children: t
          }), z.jsx(mee, {
            value: n,
            className: ine.field
          })]
        })
      });
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/budget-item/budget-item.tsx", {
      get BudgetItem() {
        return one;
      },
      set BudgetItem(e) {
        one = e;
      }
    });
    let rne = {
      slider: "slider_Pjj slider_pUS",
      thumb: "thumb_skm"
    };
    X.add("game-ui/game/components/economy-panel/components/gradient-slider/gradient-slider.module.scss", {
      get classes() {
        return rne;
      },
      set classes(e) {
        Object.assign(rne, e);
      }
    });
    let cne = {
      "slider-item": "slider-item_pCt item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      sliderItem: "slider-item_pCt item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      gamepad: "gamepad_oWK",
      label: "label_IRx",
      value: "value_jjh",
      slider: "slider_TyY",
      "select-hint": "select-hint_oco",
      selectHint: "select-hint_oco"
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/slider-item/slider-item.module.scss", {
      get classes() {
        return cne;
      },
      set classes(e) {
        Object.assign(cne, e);
      }
    });
    var dne = ({
      identifier: e,
      label: t,
      value: n,
      min: s,
      max: i,
      gradient: a,
      locked: o,
      onValueChange: r
    }) => {
      0;
      const [l, c] = Y.useState(false);
      0;
      const [u, d] = Y.useState(false);
      const {
        handleFocusChange: m,
        handleMouseEnter: h,
        handleMouseLeave: g
      } = zte(e);
      const p = KM(2);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: m,
        children: z.jsxs(Ep, {
          className: cne.sliderItem,
          onMouseEnter: h,
          onMouseLeave: g,
          onFocusChange: d,
          children: [z.jsx(LT, {
            action: l ? "Back" : "Select",
            active: u,
            className: cne.selectHint
          }), z.jsx("div", {
            className: cne.label,
            children: t
          }), z.jsx("div", {
            className: cne.value,
            children: z.jsx(Gc, {
              value: n,
              unit: Oc.Percentage
            })
          }), z.jsx(Np, {
            onSelectedStateChanged: c,
            children: z.jsx(rH, {
              value: n,
              start: s,
              end: i,
              gamepadStep: 2,
              valueTransformer: p,
              gradient: a,
              theme: rne,
              className: cne.slider,
              disabled: o,
              onChange: r
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/slider-item/slider-item.tsx", {
      get SliderItem() {
        return dne;
      },
      set SliderItem(e) {
        dne = e;
      }
    });
    const mne = {
      stops: [{
        offset: 0,
        color: "var(--negativeColor)"
      }, {
        offset: .5,
        color: "#bfac6f"
      }, {
        offset: 1,
        color: "var(--positiveColor)"
      }]
    };
    var hne = ({
      service: e,
      value: t,
      locked: n
    }) => {
      0;
      const s = Y.useCallback(t => Ej(e, t), [e]);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.economyPanelServicesBudget,
        children: z.jsx(dne, {
          identifier: Bte,
          label: z.jsx(Pc.EconomyPanel.SERVICES_TITLE_BUDGET, {}),
          value: t,
          min: 50,
          max: 150,
          gradient: mne,
          locked: n,
          onValueChange: s
        })
      });
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/slider-item/budget-slider-item.tsx", {
      get BudgetSliderItem() {
        return hne;
      },
      set BudgetSliderItem(e) {
        hne = e;
      }
    });
    const gne = {
      stops: [{
        offset: 0,
        color: "var(--positiveColor)"
      }, {
        offset: .5,
        color: "#bfac6f"
      }, {
        offset: 1,
        color: "var(--negativeColor)"
      }]
    };
    var pne = ({
      item: e,
      locked: t
    }) => {
      0;
      const n = Y.useCallback(t => {
        Ij(e.resource, Od(e.min, e.max, t / 200));
      }, [e.max, e.min, e.resource]);
      0;
      const s = Y.useMemo(() => ({
        type: Fte.ServiceFee,
        name: e.name
      }), [e.name]);
      const i = 200 * (e.fee - e.min) / (e.max - e.min);
      0;
      0;
      return z.jsx(dne, {
        identifier: s,
        label: z.jsx(Pc.EconomyPanel.SERVICES_RESOURCE_FEE_LABEL, {
          hash: e.name
        }),
        value: i,
        min: 0,
        max: 200,
        gradient: gne,
        locked: t,
        onValueChange: n
      });
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/slider-item/service-fee-slider-item.tsx", {
      get ServiceFeeSliderItem() {
        return pne;
      },
      set ServiceFeeSliderItem(e) {
        pne = e;
      }
    });
    let fne = {
      header: "header_hMN",
      title: "title_mu8",
      "reset-button": "reset-button_UEO button_eqb item-states_QjV",
      resetButton: "reset-button_UEO button_eqb item-states_QjV",
      scrollable: "scrollable_S7e",
      content: "content_SjM",
      adjustment: "adjustment_mUK",
      space: "space_nob",
      budget: "budget_EG1",
      "budget-title": "budget-title_Qqo",
      budgetTitle: "budget-title_Qqo",
      hint: "hint_LNW"
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/service-detail.module.scss", {
      get classes() {
        return fne;
      },
      set classes(e) {
        Object.assign(fne, e);
      }
    });
    var vne = ({
      service: e,
      className: t
    }) => {
      0;
      const n = Y.useCallback(() => yj(e), [e]);
      const s = ll(Tj, e);
      const i = null != s && (s.budgetAdjustable || s.fees.some(e => e.adjustable));
      0;
      0;
      0;
      return z.jsx(m2, {
        theme: u2,
        className: Qu()(fne.serviceDetail, s?.locked && u2.locked, t),
        header: s && (0, z.jsxs)("div", {
          className: fne.header,
          children: [(0, z.jsx)("div", {
            className: fne.title,
            children: (0, z.jsx)(Pc.Services.NAME, {
              hash: s.name
            })
          }), i ? (0, z.jsx)(L_, {
            className: fne.resetButton,
            disabled: false,
            onSelect: n,
            children: (0, z.jsx)(Pc.EconomyPanel.LOAN_FORM_RESET, {})
          }) : null]
        }),
        children: z.jsx(ab, {
          className: fne.scrollable,
          children: z.jsx(ep, {
            direction: Mg.Vertical,
            onRefocus: Jg,
            children: s && (0, z.jsxs)("div", {
              className: fne.content,
              children: [i ? (0, z.jsx)(z.Fragment, {
                children: (0, z.jsxs)("div", {
                  className: fne.adjustment,
                  children: [s.budgetAdjustable && (0, z.jsx)(hne, {
                    service: s.entity,
                    value: s.budgetPercentage,
                    locked: s.locked
                  }), s.fees.filter(e => e.adjustable).map(e => (0, z.jsx)(pne, {
                    item: e,
                    locked: s.locked
                  }, e.resource))]
                })
              }) : null, (0, z.jsx)("div", {
                className: fne.space
              }), s.fees.length > 0 && (0, z.jsxs)("div", {
                className: fne.budget,
                children: [(0, z.jsx)("div", {
                  className: fne.budgetTitle,
                  children: (0, z.jsx)(Pc.EconomyPanel.SERVICES_TITLE_INCOME, {})
                }), (0, z.jsx)(_ne, {
                  fees: s.fees
                })]
              }), (0, z.jsxs)("div", {
                className: fne.budget,
                children: [(0, z.jsx)("div", {
                  className: fne.budgetTitle,
                  children: (0, z.jsx)(Pc.EconomyPanel.SERVICES_TITLE_EXPENSES, {})
                }), (0, z.jsx)(one, {
                  identifier: Hte,
                  label: (0, z.jsx)(Pc.EconomyPanel.SERVICES_LABEL_UPKEEP, {}),
                  value: s.upkeep
                }), (0, z.jsx)(bne, {
                  fees: s.fees
                })]
              })]
            })
          })
        })
      });
    };
    var _ne = ({
      fees: e
    }) => {
      if (e.length > 0) {
        const t = e.reduce((e, t) => e + t.incomeInternal, 0);
        const n = e.reduce((e, t) => e + t.incomeExports, 0);
        0;
        0;
        0;
        return z.jsxs(z.Fragment, {
          children: [z.jsx(one, {
            identifier: Gte,
            label: z.jsx(Pc.EconomyPanel.SERVICES_FEES_LABEL_FEES, {}),
            value: t
          }), e.some(e => e.exportable || 0 !== e.incomeExports) && (0, z.jsx)(one, {
            identifier: Vte,
            label: (0, z.jsx)(Pc.EconomyPanel.SERVICES_FEES_LABEL_EXPORT, {}),
            value: n
          })]
        });
      }
      return null;
    };
    var bne = ({
      fees: e
    }) => {
      if (e.some(e => e.importable || 0 !== e.expenseImports)) {
        const t = e.reduce((e, t) => e + t.expenseImports, 0);
        0;
        0;
        0;
        return z.jsx(z.Fragment, {
          children: z.jsx(one, {
            identifier: Kte,
            label: z.jsx(Pc.EconomyPanel.SERVICES_FEES_LABEL_IMPORT, {}),
            value: t
          })
        });
      }
      return null;
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-detail/service-detail.tsx", {
      get ServiceDetail() {
        return vne;
      },
      set ServiceDetail(e) {
        vne = e;
      },
      get FeeRevenues() {
        return _ne;
      },
      set FeeRevenues(e) {
        _ne = e;
      },
      get FeeExpenses() {
        return bne;
      },
      set FeeExpenses(e) {
        bne = e;
      }
    });
    let Tne = {
      "service-list": "service-list_xm3",
      serviceList: "service-list_xm3",
      "list-section": "list-section_BJP",
      listSection: "list-section_BJP",
      scrollable: "scrollable_rmv",
      item: "item_JFN button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      locked: "locked_ZXT locked_H2O locked_dBl",
      icon: "icon_HoD icon_soN icon_Iwk",
      title: "title_sB9",
      field: "field_Edk",
      "value-column-divider": "value-column-divider_PmA",
      valueColumnDivider: "value-column-divider_PmA",
      "total-section": "total-section_VPy",
      totalSection: "total-section_VPy",
      "total-content": "total-content_gSd",
      totalContent: "total-content_gSd",
      "total-label": "total-label_mVx",
      totalLabel: "total-label_mVx",
      "total-column": "total-column_k3X",
      totalColumn: "total-column_k3X",
      "total-field": "total-field_rfq",
      totalField: "total-field_rfq"
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-list/service-list.module.scss", {
      get classes() {
        return Tne;
      },
      set classes(e) {
        Object.assign(Tne, e);
      }
    });
    var Ine = ({
      selectedService: e,
      className: t,
      onSelectService: n
    }) => {
      const s = sl(bj);
      const i = xp(n);
      const a = s.reduce((e, t) => e + t.budget, 0);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Tne.serviceList, t),
        children: [z.jsx(aT, {
          uiTag: dT.value?.economyPanelServicesList,
          children: z.jsx(m2, {
            theme: u2,
            className: Tne.listSection,
            children: z.jsx(ab, {
              className: Tne.scrollable,
              children: z.jsx(Xg, {
                focused: Dr(e),
                direction: Mg.Vertical,
                onChange: i,
                children: s.map(t => (0, z.jsx)(yne, {
                  item: t,
                  selected: Ur(t.entity, e),
                  onSelect: n
                }, Dr(t.entity)))
              })
            })
          })
        }), z.jsx(m2, {
          focusKey: Eg,
          theme: u2,
          className: Tne.totalSection,
          children: z.jsxs("div", {
            className: Tne.totalContent,
            children: [z.jsx("div", {
              className: Tne.totalLabel,
              children: z.jsx(Pc.EconomyPanel.MONTHLY_BALANCE, {})
            }), z.jsx("div", {
              className: Tne.totalColumn,
              children: z.jsx(mee, {
                value: a,
                importance: "primary",
                className: Tne.totalField
              })
            })]
          })
        })]
      });
    };
    const yne = ({
      item: e,
      selected: t,
      onSelect: n
    }) => {
      0;
      const s = Y.useCallback(() => n(e.entity), [e.entity, n]);
      0;
      const i = Y.useMemo(() => ({
        type: Fte.Service,
        entity: e.entity
      }), [e.entity]);
      const {
        handleFocusChange: a,
        handleMouseEnter: o,
        handleMouseLeave: r
      } = zte(i);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: a,
        children: z.jsxs(L_, {
          disableHint: true,
          focusKey: Dr(e.entity),
          selected: t,
          className: Qu()(Tne.item, e.locked && Tne.locked),
          onClick: s,
          onMouseEnter: o,
          onMouseLeave: r,
          children: [z.jsx("img", {
            src: e.icon,
            className: Tne.icon
          }), z.jsx("div", {
            className: Tne.title,
            children: z.jsx(Pc.Services.NAME, {
              hash: e.name
            })
          }), z.jsx(mee, {
            value: e.budget,
            importance: "secondary",
            className: Tne.field
          })]
        })
      });
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-list/service-list.tsx", {
      get ServiceList() {
        return Ine;
      },
      set ServiceList(e) {
        Ine = e;
      }
    });
    let Sne = {
      "service-page": "service-page_a6r",
      servicePage: "service-page_a6r",
      "list-column": "list-column_PCc",
      listColumn: "list-column_PCc",
      "main-column": "main-column_WYi",
      mainColumn: "main-column_WYi",
      "info-column": "info-column_oLC",
      infoColumn: "info-column_oLC"
    };
    X.add("game-ui/game/components/economy-panel/service-page/service-page.module.scss", {
      get classes() {
        return Sne;
      },
      set classes(e) {
        Object.assign(Sne, e);
      }
    });
    var Cne = () => {
      rg(dT.value?.economyPanelServicesPage);
      0;
      const [e, t] = Y.useState(Nne);
      const n = km();
      0;
      const [s, i] = Y.useState(null);
      0;
      const [a, o] = Y.useState(null);
      0;
      const r = Y.useMemo(() => ({
        onFocusChange: (e, t) => {
          i(t ? e : t => Kr(e, t, 2) ? null : t);
        },
        onMouseEnter: e => o(e),
        onMouseLeave: e => o(t => Kr(e, t, 2) ? null : t)
      }), []);
      const l = n ? s : a;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: Sne.servicePage,
        children: z.jsx(Wte.Provider, {
          value: r,
          children: z.jsxs(ep, {
            direction: Mg.Horizontal,
            children: [z.jsx(Ine, {
              selectedService: e,
              className: Sne.listColumn,
              onSelectService: t
            }), z.jsx(vne, {
              service: e,
              className: Sne.mainColumn
            }), z.jsx(qte, {
              service: e,
              itemId: l,
              className: Sne.infoColumn
            })]
          })
        })
      });
    };
    function Nne() {
      return nw(bj.value)?.entity ?? Xp;
    }
    X.add("game-ui/game/components/economy-panel/service-page/service-page.tsx", {
      get ServicePage() {
        return Cne;
      },
      set ServicePage(e) {
        Cne = e;
      }
    });
    let wne = {
      colorMinus10: "#1e83aa",
      colorMinus0: "#4bc3f1",
      colorPlus0: "#8bdb46",
      colorPlus30: "#e95f4a",
      "tax-slider": "tax-slider_HNg",
      taxSlider: "tax-slider_HNg",
      rate: "rate_lAq",
      range: "range_EHE",
      "slider-column": "slider-column_XmW",
      sliderColumn: "slider-column_XmW",
      slider: "slider_lZg",
      "estimate-column": "estimate-column_DQB",
      estimateColumn: "estimate-column_DQB",
      "estimate-value": "estimate-value_grH",
      estimateValue: "estimate-value_grH"
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/tax-slider.module.scss", {
      get classes() {
        return wne;
      },
      set classes(e) {
        Object.assign(wne, e);
      }
    });
    var Pne = ({
      min: e,
      max: t,
      rate: n,
      income: s,
      range: i,
      primary: a,
      className: o,
      disabled: r,
      onValueChanged: l
    }) => {
      0;
      const c = Y.useMemo(() => function (e, t) {
        const n = aN(wne.colorMinus10) ?? YC;
        const s = aN(wne.colorMinus0) ?? YC;
        const i = aN(wne.colorPlus0) ?? YC;
        const a = aN(wne.colorPlus30) ?? YC;
        if (e < 0 && t <= 0) {
          return {
            stops: [{
              offset: 0,
              color: tN(lN(s, n, wd(e / -10, 0, 1)))
            }, {
              offset: 1,
              color: tN(lN(s, n, wd(t / -10, 0, 1)))
            }]
          };
        }
        if (e < 0 && t > 0) {
          const o = e / (e - t);
          return {
            stops: [{
              offset: 0,
              color: tN(lN(s, n, wd(e / -10, 0, 1)))
            }, {
              offset: o,
              color: tN(s)
            }, {
              offset: o,
              color: tN(i)
            }, {
              offset: 1,
              color: tN(lN(i, a, wd(t / 30, 0, 1)))
            }]
          };
        }
        return {
          stops: [{
            offset: 0,
            color: tN(lN(i, a, wd(e / 30, 0, 1)))
          }, {
            offset: 1,
            color: tN(lN(i, a, wd(t / 30, 0, 1)))
          }]
        };
      }(e, t), [e, t]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(wne.taxSlider, a && wne.primary, o),
        children: [z.jsxs("div", {
          className: wne.sliderColumn,
          onClick: Ob,
          children: [z.jsx("div", {
            className: Qu()(wne.rate, null != i && i.max - i.min > .1 && wne.range, r && "disabled"),
            children: Lne(n, i)
          }), z.jsx(rH, {
            value: n,
            start: e,
            end: t,
            gamepadStep: 1,
            valueTransformer: HM,
            theme: rne,
            className: Qu()(wne.slider, r && "disabled"),
            gradient: c,
            onChange: l,
            disabled: r
          })]
        }), z.jsx("div", {
          className: wne.estimateColumn,
          children: z.jsx(mee, {
            value: s,
            importance: a ? "secondary" : undefined,
            className: Qu()(wne.estimateValue, r && "disabled")
          })
        })]
      });
    };
    function Lne(e, t) {
      return null == t ? (0, z.jsx)(Gc, {
        value: e,
        unit: Oc.PercentageSingleFraction
      }) : t.max - t.min > .1 ? (0, z.jsx)(au, {
        min: t.min,
        max: t.max,
        unit: Oc.PercentageSingleFraction
      }) : (0, z.jsx)(Gc, {
        value: t.min,
        unit: Oc.PercentageSingleFraction
      });
    }
    X.add("game-ui/game/components/economy-panel/taxation-page/tax-slider.tsx", {
      get TaxSlider() {
        return Pne;
      },
      set TaxSlider(e) {
        Pne = e;
      }
    });
    let Ane = {
      "taxation-item": "taxation-item_p0I item-hover_WK8 item-focused_FuT",
      taxationItem: "taxation-item_p0I item-hover_WK8 item-focused_FuT",
      icon: "icon_Eeh",
      title: "title_EA9",
      slider: "slider_rbN"
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/taxation-item.module.scss", {
      get classes() {
        return Ane;
      },
      set classes(e) {
        Object.assign(Ane, e);
      }
    });
    var Rne = ({
      areaType: e,
      resource: t
    }) => {
      const n = ll(fO, t);
      const s = ll(xO, t);
      const i = ll(vO, t);
      0;
      const a = Y.useCallback(e => TO(t.resource, t.area, e), [t]);
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        className: Ane.taxationItem,
        children: [z.jsx("img", {
          className: Ane.icon,
          src: i.icon
        }), z.jsx("div", {
          className: Ane.title,
          children: 1 !== e.index ? (0, z.jsx)(Pc.Resources.TITLE, {
            hash: i.id
          }) : (0, z.jsx)(Pc.EconomyPanel.TAXATION_RESIDENTIAL_SLIDER_JOBLEVEL, {
            index: t.resource
          })
        }), z.jsx(Pne, {
          effect: 0,
          rate: n,
          min: e.resourceTaxRateMin,
          max: e.resourceTaxRateMax,
          income: s,
          className: Ane.slider,
          onValueChanged: a
        })]
      });
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/taxation-item.tsx", {
      get TaxationItem() {
        return Rne;
      },
      set TaxationItem(e) {
        Rne = e;
      }
    });
    let kne = {
      "taxation-group": "taxation-group_aQb",
      taxationGroup: "taxation-group_aQb",
      header: "header_cPd item-hover_WK8 item-focused_FuT",
      icon: "icon_vPX",
      "icon-disabled": "icon-disabled_lo2",
      iconDisabled: "icon-disabled_lo2",
      title: "title_WQ0",
      "toggle-button": "toggle-button_hTU",
      toggleButton: "toggle-button_hTU",
      "header-slider": "header-slider_wLI",
      headerSlider: "header-slider_wLI",
      content: "content_NUa",
      enter: "enter_C0R",
      "exit-active": "exit-active_CJ6",
      exitActive: "exit-active_CJ6",
      "enter-active": "enter-active_kty",
      enterActive: "enter-active_kty",
      exit: "exit_xDo",
      item: "item_YKG",
      hint: "hint_yGN",
      locked: "locked_RSM"
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/taxation-group.module.scss", {
      get classes() {
        return kne;
      },
      set classes(e) {
        Object.assign(kne, e);
      }
    });
    var Fne = ({
      areaType: e,
      focused: t,
      setFocusedGroup: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      const a = Y.useCallback(() => {
        i(e => !e);
        rp(op.expandPanel);
      }, []);
      0;
      const o = Y.useCallback(() => n(e.id), [e.id, n]);
      0;
      const r = Y.useCallback(() => n(null), [n]);
      const l = ll(dO, e.index);
      const c = ll(gO, e.index);
      const u = ll(mO, e.index);
      const d = ll(hO, e.index);
      0;
      const m = Y.useCallback(t => bO(e.index, t), [e]);
      const h = ll(pO, e.index);
      const g = h.length > 0 && !e.locked;
      const p = KC("ZonesOffice");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Fg, {
        expanded: s,
        expandable: g,
        onAction: a,
        children: z.jsx("div", {
          className: kne.taxationGroup,
          onMouseEnter: o,
          onMouseLeave: r,
          children: z.jsxs(ep, {
            onChange: o,
            activation: $u.AnyChildren,
            children: [z.jsx(Q3, {
              locked: e.locked,
              requirements: "Office" === e.id ? p.requirements : undefined,
              children: z.jsxs(Ep, {
                className: kne.header,
                children: [z.jsx("img", {
                  className: Qu()(kne.icon, e.locked && kne.iconDisabled),
                  src: e.icon
                }), z.jsx("div", {
                  className: Qu()(kne.title, e.locked && "disabled"),
                  children: z.jsx(Pc.EconomyPanel.TAX_AREA_TITLE, {
                    hash: e.id
                  })
                }), z.jsx(LT, {
                  action: "Expand Group",
                  active: !e.locked && t,
                  className: kne.hint
                }), g && (0, z.jsx)($_, {
                  disableHint: true,
                  tinted: true,
                  focusKey: Eg,
                  src: s ? "Media/Glyphs/ThickStrokeArrowUp.svg" : "Media/Glyphs/ThickStrokeArrowDown.svg",
                  theme: q_,
                  className: kne.toggleButton,
                  onSelect: a
                }), e.locked && (0, z.jsx)(kX, {
                  className: kne.locked
                }), z.jsx(Pne, {
                  primary: true,
                  effect: d,
                  rate: l,
                  min: e.taxRateMin,
                  max: e.taxRateMax,
                  income: u,
                  range: c,
                  className: kne.headerSlider,
                  onValueChanged: m,
                  disabled: e.locked
                })]
              })
            }), g && (0, z.jsx)(py, {
              in: s,
              children: (0, z.jsx)(gy, {
                styles: kne,
                children: (0, z.jsx)("div", {
                  className: kne.content,
                  children: h.map(t => (0, z.jsx)(Rne, {
                    areaType: e,
                    resource: t
                  }, t.resource))
                })
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/taxation-group.tsx", {
      get TaxationGroup() {
        return Fne;
      },
      set TaxationGroup(e) {
        Fne = e;
      }
    });
    let Une = {
      "taxation-page": "taxation-page_hmd",
      taxationPage: "taxation-page_hmd",
      "main-column": "main-column_JuD",
      mainColumn: "main-column_JuD",
      "info-column": "info-column_e7N",
      infoColumn: "info-column_e7N",
      "table-section": "table-section_D_X",
      tableSection: "table-section_D_X",
      "table-header": "table-header_qcq",
      tableHeader: "table-header_qcq",
      "header-cell": "header-cell_ori",
      headerCell: "header-cell_ori",
      table: "table_Gl9",
      scrollable: "scrollable_Xqt",
      "table-lines": "table-lines_Abv",
      tableLines: "table-lines_Abv",
      name: "name_DfR",
      rate: "rate_U86",
      estimate: "estimate_d79",
      "total-section": "total-section_IIZ",
      totalSection: "total-section_IIZ",
      "total-content": "total-content_a5i",
      totalContent: "total-content_a5i",
      "total-label": "total-label_hxK",
      totalLabel: "total-label_hxK",
      "total-column": "total-column_rXB",
      totalColumn: "total-column_rXB",
      "total-value": "total-value_hzh",
      totalValue: "total-value_hzh"
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/taxation-page.module.scss", {
      get classes() {
        return Une;
      },
      set classes(e) {
        Object.assign(Une, e);
      }
    });
    var Gne = () => {
      const e = sl(uO);
      const t = sl(rO);
      0;
      const [n, s] = Y.useState(sw(e, "id"));
      const i = e.find(e => e.id === n);
      ag(dT.value?.economyPanelTaxationPage);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Une.taxationPage,
        children: [z.jsxs("div", {
          className: Une.mainColumn,
          children: [z.jsxs(m2, {
            header: z.jsxs("div", {
              className: Une.tableHeader,
              children: [z.jsx(aT, {
                uiTag: dT.value?.economyPanelTaxationType,
                children: z.jsx("div", {
                  className: Qu()(Une.headerCell, Une.name),
                  children: z.jsx(Pc.EconomyPanel.TAX_AREA_COLUMN_TITLE, {})
                })
              }), z.jsx(aT, {
                uiTag: dT.value?.economyPanelTaxationRate,
                children: z.jsx("div", {
                  className: Qu()(Une.headerCell, Une.rate),
                  children: z.jsx(Pc.EconomyPanel.TAX_RATE_TITLE, {})
                })
              }), z.jsx(aT, {
                uiTag: dT.value?.economyPanelTaxationEstimate,
                children: z.jsx("div", {
                  className: Qu()(Une.headerCell, Une.estimate),
                  children: z.jsx(Pc.EconomyPanel.TAX_INCOME_ESTIMATE_TITLE, {})
                })
              })]
            }),
            theme: u2,
            className: Une.tableSection,
            children: [z.jsx(ab, {
              className: Une.scrollable,
              children: z.jsx(ep, {
                children: e.map(e => (0, z.jsx)(Fne, {
                  focused: n === e.id,
                  areaType: e,
                  setFocusedGroup: s
                }, e.id))
              })
            }), z.jsxs("div", {
              className: Une.tableLines,
              children: [z.jsx("div", {
                className: Une.name
              }), z.jsx("div", {
                className: Une.rate
              }), z.jsx("div", {
                className: Une.estimate
              })]
            })]
          }), z.jsx(m2, {
            focusKey: Eg,
            theme: u2,
            className: Une.totalSection,
            children: z.jsxs("div", {
              className: Une.totalContent,
              children: [z.jsx("div", {
                className: Une.totalLabel,
                children: z.jsx(Pc.EconomyPanel.TAX_INCOME_TOTAL_TITLE, {})
              }), z.jsx("div", {
                className: Une.totalColumn,
                children: z.jsx(mee, {
                  value: t,
                  importance: "primary",
                  className: Une.totalValue
                })
              })]
            })
          })]
        }), z.jsx(m2, {
          focusKey: Eg,
          theme: u2,
          className: Une.infoColumn,
          children: i && (0, z.jsx)(N7, {
            icon: i.icon,
            title: (0, z.jsx)(Pc.EconomyPanel.TAX_AREA_TITLE, {
              hash: i.id
            }),
            description: (0, z.jsx)(Pc.EconomyPanel.TAX_AREA_DESCRIPTION, {
              hash: i.id
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/economy-panel/taxation-page/taxation-page.tsx", {
      get TaxationPage() {
        return Gne;
      },
      set TaxationPage(e) {
        Gne = e;
      }
    });
    let Vne = {
      "economy-panel": "economy-panel_e08",
      economyPanel: "economy-panel_e08"
    };
    X.add("game-ui/game/components/economy-panel/economy-panel.module.scss", {
      get classes() {
        return Vne;
      },
      set classes(e) {
        Object.assign(Vne, e);
      }
    });
    var Kne = ({
      selectedTab: e,
      onSelectTab: t,
      onClose: n
    }) => {
      const s = sl(IL);
      const i = sl(Gj);
      0;
      const a = Y.useMemo(() => [{
        tab: Gv.Budget,
        feature: "City Budget",
        uiTag: dT.value?.economyPanelBudgetTab
      }, {
        tab: Gv.Loan,
        feature: "Loan",
        uiTag: dT.value?.economyPanelLoansTab
      }, {
        tab: Gv.Taxation,
        feature: "Taxation",
        uiTag: dT.value?.economyPanelTaxationTab
      }, {
        tab: Gv.Services,
        feature: "Service Budgets",
        uiTag: dT.value?.economyPanelServicesTab
      }, {
        tab: Gv.Production,
        feature: "Production Panel",
        uiTag: dT.value?.economyPanelProductionTab
      }], []);
      0;
      const o = Y.useMemo(() => a.filter(e => !s || e.tab !== Gv.Loan), [a, s]);
      0;
      const r = Y.useMemo(() => ({
        "Switch Tab": n => {
          if (0 !== n) {
            const s = o.findIndex(t => t.tab === e);
            const i = Yne(n, o, s);
            if (i >= 0 && i < o.length && i !== s) {
              t(o[i].tab);
              rp(n < 0 ? op.selectPreviousItem : op.selectNextItem);
            }
          }
        }
      }), [o, t, e]);
      0;
      const l = Y.useCallback(() => {
        n();
        if (i) {
          Xj(true);
        }
      }, [n, i]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        header: z.jsxs(z.Fragment, {
          children: [z.jsx(nE, {
            children: z.jsx(Pc.EconomyPanel.TITLE, {})
          }), z.jsx(BX, {
            children: o.map(n => (0, z.jsx)(Wne, {
              tab: n.tab,
              onSelect: t,
              selectedTab: e,
              feature: n.feature,
              uiTag: n.uiTag
            }, n.tab))
          })]
        }),
        transitionSounds: lp,
        className: Vne.economyPanel,
        onClose: l,
        children: z.jsx(Lg, {
          actions: r,
          children: zne(e)
        })
      });
    };
    const Wne = ({
      tab: e,
      selectedTab: t,
      feature: n,
      uiTag: s,
      onSelect: i
    }) => {
      const a = KC(n);
      0;
      0;
      0;
      return z.jsx(Q3, {
        locked: a.locked,
        requirements: a.requirements,
        children: z.jsx(GX, {
          id: e,
          uiTag: s,
          selectedId: t,
          selectSound: op.economy,
          disabled: a.locked,
          locked: a.locked,
          onSelect: i,
          children: z.jsx(Pc.EconomyPanel.TAB, {
            hash: Gv[e]
          })
        })
      });
    };
    function zne(e) {
      switch (e) {
        case Gv.Budget:
          0;
          return z.jsx(Oee, {});
        case Gv.Loan:
          0;
          return z.jsx(tte, {});
        case Gv.Taxation:
          0;
          return z.jsx(Gne, {});
        case Gv.Services:
          0;
          return z.jsx(Cne, {});
        case Gv.Production:
          0;
          return z.jsx(Ute, {});
        default:
          return null;
      }
    }
    const Yne = (e, t, n) => {
      const s = n < 0 ? e < 0 ? 0 : -1 : n;
      for (let n = 1; n <= t.length; n += 1) {
        const i = ((e < 0 ? s - n : s + n) + t.length) % t.length;
        if (!zC(t[i].feature)) {
          return i;
        }
      }
      return -1;
    };
    X.add("game-ui/game/components/economy-panel/economy-panel.tsx", {
      get EconomyPanel() {
        return Kne;
      },
      set EconomyPanel(e) {
        Kne = e;
      }
    });
    let $ne = {
      "event-journal-entry": "event-journal-entry_swm",
      eventJournalEntry: "event-journal-entry_swm",
      header: "header_YTt",
      icon: "icon_TDT",
      title: "title_CGf",
      date: "date_euC",
      info: "info_fKt",
      entry: "entry_oxi"
    };
    X.add("game-ui/game/components/event-journal/event-journal-entry.module.scss", {
      get classes() {
        return $ne;
      },
      set classes(e) {
        Object.assign($ne, e);
      }
    });
    var Xne = ({
      event: e
    }) => {
      const t = ll(jj, e);
      const n = sl(yO);
      const s = RO(n, sl(jO));
      0;
      const i = Y.useMemo(() => DO(n, t.date), [t.date, n]);
      let a = 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        className: $ne.eventJournalEntry,
        children: [z.jsxs("div", {
          className: $ne.header,
          children: [z.jsx("img", {
            className: $ne.icon,
            src: "" !== t.icon ? t.icon : "Media/Game/Icons/Calendar.svg"
          }), z.jsx("div", {
            className: $ne.title,
            children: z.jsx(Pc.EventJournal.EVENT_TITLE, {
              hash: t.id
            })
          }), z.jsx("div", {
            className: $ne.date,
            children: AO(s, i) ? (0, z.jsx)(Nu, {
              value: i
            }) : (0, z.jsx)(Su, {
              value: i
            })
          })]
        }), z.jsxs("div", {
          className: $ne.info,
          children: [t.data?.map(e => (0, z.jsxs)("div", {
            className: $ne.entry,
            children: [(0, z.jsx)(Pc.EventJournal.EFFECT, {
              hash: e.type
            }), " : ", e.value]
          }, a++)), t.effects?.map(e => (0, z.jsxs)("div", {
            className: $ne.entry,
            children: [(0, z.jsx)(Pc.EventJournal.EFFECT, {
              hash: e.type
            }), " : ", (0, z.jsx)(Gc, {
              value: e.value,
              unit: Oc.PercentageSingleFraction
            })]
          }, a++))]
        })]
      });
    };
    X.add("game-ui/game/components/event-journal/event-journal-entry.tsx", {
      get EventJournalEntry() {
        return Xne;
      },
      set EventJournalEntry(e) {
        Xne = e;
      }
    });
    let Qne = {
      "event-journal": "event-journal_yee",
      eventJournal: "event-journal_yee",
      scrollable: "scrollable_XJ4"
    };
    X.add("game-ui/game/components/event-journal/event-journal.module.scss", {
      get classes() {
        return Qne;
      },
      set classes(e) {
        Object.assign(Qne, e);
      }
    });
    var Jne = ({
      onClose: e
    }) => {
      ag(dT.value?.eventJournalPanel);
      const t = sl(Cj);
      0;
      const n = Y.useCallback(() => {
        wj();
        e();
      }, [e]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.eventJournalPanel,
        children: z.jsx(ZT, {
          theme: i7,
          transitionSounds: lp,
          className: Qne.eventJournal,
          header: z.jsx(nE, {
            children: z.jsx(Pc.EventJournal.PANEL_TITLE, {})
          }),
          onClose: n,
          children: z.jsx(ep, {
            children: t.length > 0 ? (0, z.jsx)(ab, {
              className: Qne.scrollable,
              children: t.map(e => (0, z.jsx)(Xne, {
                event: e
              }, Dr(e)))
            }) : (0, z.jsx)(YX, {
              children: (0, z.jsx)(bb, {
                children: (0, z.jsx)(Pc.EventJournal.OPENING_MESSAGE, {})
              })
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/event-journal/event-journal.tsx", {
      get EventJournal() {
        return Jne;
      },
      set EventJournal(e) {
        Jne = e;
      }
    });
    let ese = {
      "placeholder-chirp-layout": "placeholder-chirp-layout_BAl",
      placeholderChirpLayout: "placeholder-chirp-layout_BAl",
      avatar: "avatar_Cbz",
      content: "content_fgv",
      header: "header_LnA",
      sender: "sender_mvI",
      date: "date_IvA",
      message: "message_F8E",
      word: "word_ift",
      footer: "footer_jEC",
      likes: "likes_Bzb"
    };
    X.add("game-ui/game/components/chirper/items/placeholder-chirp-layout.module.scss", {
      get classes() {
        return ese;
      },
      set classes(e) {
        Object.assign(ese, e);
      }
    });
    const nse = [1, 4, 2, 7, 3, 3, 5, 4, 2, 3, 4, 2, 8, 5, 6, 3, 1, 2, 3];
    var sse = ({
      length: e,
      className: t
    }) => (0, z.jsxs)("div", {
      className: Qu()(ese.placeholderChirpLayout, t),
      children: [(0, z.jsx)("div", {
        className: ese.avatar
      }), (0, z.jsxs)("div", {
        className: ese.content,
        children: [(0, z.jsxs)("div", {
          className: ese.header,
          children: [(0, z.jsx)("div", {
            className: ese.sender,
            style: {
              width: 25 + e % 4 * 6 + "%"
            }
          }), (0, z.jsx)("div", {
            className: ese.date
          })]
        }), (0, z.jsx)("div", {
          className: ese.message,
          children: Array.from(Array(e).keys()).map((t, n) => (0, z.jsx)("div", {
            className: ese.word,
            style: {
              width: 5 * nse[(t + e) % nse.length] + "%"
            }
          }, n))
        }), (0, z.jsx)("div", {
          className: ese.footer,
          children: (0, z.jsx)("div", {
            className: ese.likes
          })
        })]
      })]
    });
    X.add("game-ui/game/components/chirper/items/placeholder-chirp-layout.tsx", {
      get PlaceholderChirpLayout() {
        return sse;
      },
      set PlaceholderChirpLayout(e) {
        sse = e;
      }
    });
    let ise = {
      "life-path-detail": "life-path-detail_PR3",
      lifePathDetail: "life-path-detail_PR3",
      "info-column": "info-column_pYj",
      infoColumn: "info-column_pYj",
      avatar: "avatar_FMV",
      name: "name_I32",
      age: "age_Wdj",
      description: "description_svN",
      activity: "activity_QvV",
      status: "status_JZS",
      "status-item": "status-item_aJC",
      statusItem: "status-item_aJC",
      "status-icon": "status-icon_ftq",
      statusIcon: "status-icon_ftq",
      "status-label": "status-label_oIB",
      statusLabel: "status-label_oIB",
      "icon-label": "icon-label_HgD",
      iconLabel: "icon-label_HgD",
      link: "link_Zls",
      icon: "icon_b3A",
      label: "label_lMl",
      "feed-column": "feed-column_Idv",
      feedColumn: "feed-column_Idv",
      "back-button": "back-button_HMQ",
      backButton: "back-button_HMQ",
      hint: "hint_AvR",
      "back-hint": "back-hint_WQz",
      backHint: "back-hint_WQz"
    };
    X.add("game-ui/game/components/life-path/life-path-detail/life-path-detail.module.scss", {
      get classes() {
        return ise;
      },
      set classes(e) {
        Object.assign(ise, e);
      }
    });
    const ose = new Tg("FEED_KEY");
    const rse = new Tg("RESIDENCE_KEY");
    const lse = new Tg("WORKPLACE_KEY");
    const cse = {
      [Pj.Chirp]: e => (0, z.jsx)(b7, {
        focusKey: Dr(e.entity),
        children: (0, z.jsx)(f7, {
          chirp: e
        })
      }),
      [Pj.LogEntry]: e => {
        const t = sl(yO);
        0;
        0;
        return z.jsx(T7, {
          focusKey: Dr(e.entity),
          date: kO(t, e.date),
          children: z.jsx(Tc, {
            id: e.messageId
          })
        });
      }
    };
    var use = Y.forwardRef(function ({
      selectedCitizen: e,
      details: t,
      className: n,
      onBack: s
    }, i) {
      rg(dT.value?.lifePathPanelDetail);
      const a = sl(yO);
      const o = Lp(ll(Mj, e));
      const r = Ku(t?.name ?? null);
      const l = Ku(t?.workplaceName ?? null);
      const c = Ku(t?.schoolName ?? null);
      const u = Ku(t?.residenceName ?? null);
      0;
      const d = Y.useCallback(() => t?.entity && Pw(t?.entity), [t]);
      0;
      const m = Y.useCallback(() => t?.residenceEntity && Pw(t?.residenceEntity), [t]);
      0;
      const h = Y.useCallback(() => t?.schoolEntity && Pw(t?.schoolEntity), [t]);
      0;
      const g = Y.useCallback(() => t?.workplaceEntity && Pw(t?.workplaceEntity), [t]);
      const p = kE();
      0;
      const f = Y.useRef(true);
      const x = wp(sw(o, "entity"));
      0;
      Y.useEffect(() => {
        if (f.current) {
          f.current = false;
        } else {
          p.smoothScrollTo(0, 0);
        }
      }, [x, p]);
      0;
      const [v, _] = Y.useState(false);
      0;
      const [b, T] = Y.useState(null);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.lifePathPanelDetail,
        children: z.jsxs("div", {
          ref: i,
          className: Qu()(ise.lifePathDetail, n),
          children: [z.jsxs(ep, {
            direction: Mg.Horizontal,
            initialFocused: ose,
            children: [z.jsx(Tp, {
              onFocusChange: _,
              className: ise.infoColumn,
              children: z.jsxs(ep, {
                direction: Mg.Vertical,
                onChange: T,
                children: [z.jsx(c7, {
                  entity: t.entity,
                  className: ise.avatar
                }), z.jsx(L_, {
                  className: ise.name,
                  onSelect: d,
                  children: r
                }), z.jsx("div", {
                  className: ise.age,
                  children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_AGE, {
                    hash: t.age
                  })
                }), (t.happiness || t.conditions.length > 0) && (0, z.jsxs)("div", {
                  className: ise.status,
                  children: [t.happiness && (0, z.jsx)(dse, {
                    icon: t.happiness.iconPath,
                    label: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_HAPPINESS_TITLE, {
                      hash: t.happiness.key
                    })
                  }), t.conditions.length > 0 ? t.conditions?.map(e => (0, z.jsx)(dse, {
                    icon: e.iconPath,
                    label: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_CONDITION_TITLE, {
                      hash: e.key
                    })
                  }, e.key)) : undefined]
                }), z.jsx("div", {
                  className: ise.activity,
                  children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_STATE, {
                    hash: t.state
                  })
                }), z.jsxs("div", {
                  className: ise.iconLabel,
                  children: [z.jsx(W_, {
                    className: ise.icon,
                    src: "Media/Glyphs/Education.svg"
                  }), z.jsx("div", {
                    className: ise.label,
                    children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_EDUCATION, {
                      hash: t.education
                    })
                  })]
                }), z.jsxs("div", {
                  className: ise.iconLabel,
                  children: [z.jsx(W_, {
                    className: ise.icon,
                    src: "Student" === t?.occupation ? "Media/Glyphs/School.svg" : "Media/Glyphs/Workplace.svg"
                  }), z.jsx("div", {
                    className: ise.label,
                    children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_OCCUPATION, {
                      hash: t.occupation
                    })
                  })]
                }), ("Student" === t?.occupation || "Worker" === t?.occupation) && (0, z.jsxs)("div", {
                  className: ise.iconLabel,
                  children: [(0, z.jsx)(W_, {
                    className: ise.icon,
                    src: "Student" === t?.occupation ? "Media/Glyphs/School.svg" : "Media/Glyphs/Workplace.svg"
                  }), (0, z.jsx)(LT, {
                    action: "Select",
                    active: v && b === lse,
                    className: ise.hint
                  }), (0, z.jsx)("div", {
                    className: ise.label,
                    children: (0, z.jsx)(L_, {
                      focusKey: lse,
                      disableHint: true,
                      className: ise.link,
                      onSelect: "Student" === t?.occupation ? h : g,
                      children: "Student" === t?.occupation ? c : l
                    })
                  })]
                }), null != t.residenceEntity && (0, z.jsxs)("div", {
                  className: ise.iconLabel,
                  children: [(0, z.jsx)(W_, {
                    className: ise.icon,
                    src: "Media/Glyphs/Residence.svg"
                  }), (0, z.jsx)(LT, {
                    action: "Select",
                    active: v && b === rse,
                    className: ise.hint
                  }), (0, z.jsx)("div", {
                    className: ise.label,
                    children: (0, z.jsx)(L_, {
                      focusKey: rse,
                      disableHint: true,
                      className: ise.link,
                      onSelect: m,
                      children: u
                    })
                  })]
                }), z.jsxs("div", {
                  className: ise.iconLabel,
                  children: [z.jsx(W_, {
                    className: ise.icon,
                    src: "Media/Glyphs/Money.svg"
                  }), z.jsx("div", {
                    className: ise.label,
                    children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_WEALTH, {
                      hash: t.wealth
                    })
                  })]
                })]
              })
            }), z.jsx(aT, {
              uiTag: dT.value?.lifePathPanelChirps,
              children: z.jsx(ab, {
                controller: p,
                className: ise.feedColumn,
                children: z.jsxs(ep, {
                  focusKey: ose,
                  direction: Mg.Vertical,
                  children: [z.jsx(lM, {
                    components: cse,
                    data: o,
                    keyProvider: oM
                  }), !o.length && (0, z.jsxs)(z.Fragment, {
                    children: [(0, z.jsx)(b7, {
                      focusKey: Eg,
                      style: {
                        opacity: .75
                      },
                      children: (0, z.jsx)(sse, {
                        length: 7
                      })
                    }, "placeholder1"), (0, z.jsx)(b7, {
                      focusKey: Eg,
                      style: {
                        opacity: .4
                      },
                      children: (0, z.jsx)(sse, {
                        length: 12
                      })
                    }, "placeholder2")]
                  }), z.jsx(T7, {
                    focusKey: Eg,
                    date: RO(a, t.birthDay),
                    children: z.jsx(Pc.LifePath.CITIZEN_BIRTH, {})
                  }, "birth")]
                })
              })
            })]
          }), s && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(LT, {
              action: "Back",
              className: ise.backHint
            }), (0, z.jsx)(aT, {
              uiTag: dT.value?.lifePathPanelBackButton,
              children: (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.LifePath.BACK_BUTTON_TOOLTIP, {}),
                children: (0, z.jsx)($_, {
                  tinted: true,
                  focusKey: Eg,
                  src: "Media/Glyphs/ArrowRight.svg",
                  className: ise.backButton,
                  onSelect: s
                })
              })
            })]
          })]
        })
      });
    });
    const dse = ({
      icon: e,
      label: t
    }) => (0, z.jsxs)("div", {
      className: ise.statusItem,
      children: [(0, z.jsx)("img", {
        className: ise.statusIcon,
        src: e
      }), (0, z.jsx)("div", {
        className: ise.statusLabel,
        children: t
      })]
    });
    X.add("game-ui/game/components/life-path/life-path-detail/life-path-detail.tsx", {
      get LifePathDetail() {
        return use;
      },
      set LifePathDetail(e) {
        use = e;
      }
    });
    let mse = {
      scrollable: "scrollable_ANx",
      item: "item_nV8",
      avatar: "avatar_K_x",
      "main-column": "main-column_Dzj",
      mainColumn: "main-column_Dzj",
      name: "name_ALg",
      description: "description_UGS",
      action: "action_oRB",
      hint: "hint_RGc"
    };
    X.add("game-ui/game/components/life-path/life-path-list/life-path-list.module.scss", {
      get classes() {
        return mse;
      },
      set classes(e) {
        Object.assign(mse, e);
      }
    });
    const gse = {
      ...P_,
      hover: null,
      focus: null
    };
    var pse = Y.forwardRef(function ({
      selectedCitizen: e,
      className: t,
      onSelectCitizen: n
    }, s) {
      const i = sl(Lj);
      const a = sl(Ky);
      0;
      const o = Y.useRef();
      0;
      const r = Y.useCallback(e => {
        n(e);
        o.current = e.index;
      }, [n]);
      0;
      const l = Y.useCallback(e => {
        let t = null;
        if (o.current) {
          for (const n of e.children.keys()) if (n === `lifepath-item:${o.current}`) {
            t = n;
            break;
          }
          o.current = undefined;
        }
        if (!t && e.children.size) {
          t = e.children.keys().next().value || null;
        }
        return t;
      }, []);
      0;
      return z.jsx("div", {
        ref: s,
        className: t,
        children: i.length > 0 ? (0, z.jsx)(ab, {
          className: mse.scrollable,
          children: (0, z.jsx)(ep, {
            onRefocus: l,
            children: i.map(t => (0, z.jsx)(fse, {
              item: t,
              selected: Ur(t.entity, e),
              focused: Ur(t.entity, a),
              onSelect: r
            }, Dr(t.entity)))
          })
        }) : (0, z.jsx)(YX, {
          children: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.LifePath.OPENING_MESSAGE, {})
          })
        })
      });
    });
    const fse = ({
      item: e,
      selected: t,
      focused: n,
      onSelect: s
    }) => {
      const i = Ku(e.name);
      0;
      const a = Y.useCallback(() => {
        rp(op.selectItem);
        s(e.entity);
      }, [e.entity, s]);
      0;
      const o = Y.useCallback(() => {
        Wy(n ? Xp : e.entity);
      }, [n, e.entity]);
      0;
      const r = Y.useCallback(() => Dj(e.entity), [e.entity]);
      0;
      const l = Y.useCallback(() => {
        rp(op.hoverItem);
      }, []);
      0;
      const c = Y.useMemo(() => ({
        Select: a,
        "Focus Citizen": n ? null : () => Wy(e.entity),
        "Unfocus Citizen": n ? () => Wy(Xp) : null,
        "Unfollow Citizen": () => {
          rp(op.removeItem);
          r();
        }
      }), [n, a, r, e.entity]);
      0;
      const [u, d] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: c,
        children: z.jsxs(Ep, {
          focusSound: op.hoverItem,
          focusKey: `lifepath-item:${e.entity.index}`,
          className: Qu()(mse.item, t && "selected"),
          onClick: a,
          onMouseEnter: l,
          onFocusChange: d,
          children: [z.jsx(LT, {
            action: "Select",
            active: u,
            className: mse.hint
          }), z.jsx(c7, {
            entity: e.entity,
            className: mse.avatar
          }), z.jsxs("div", {
            className: mse.mainColumn,
            children: [z.jsx("div", {
              className: mse.name,
              children: i
            }), z.jsx("div", {
              className: mse.description,
              children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_AGE, {
                hash: e.age
              })
            })]
          }), z.jsx(LT, {
            action: "Focus Citizen",
            active: u,
            className: mse.hint
          }), z.jsx(bg, {
            tooltip: n ? (0, z.jsx)(Pc.SelectedInfoPanel.UNFOCUS, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.FOCUS, {}),
            children: z.jsx($_, {
              disableHint: true,
              focusKey: Eg,
              selected: n,
              src: "Media/Game/Icons/MapMarker.svg",
              sounds: gse,
              className: mse.action,
              onSelect: o,
              onClick: Ob
            })
          }), z.jsx(LT, {
            action: "Unfollow Citizen",
            active: u,
            className: mse.hint
          }), z.jsx(bg, {
            tooltip: z.jsx(Pc.LifePath.UNFOLLOW_BUTTON_TOOLTIP, {}),
            children: z.jsx($_, {
              disableHint: true,
              tinted: true,
              focusKey: Eg,
              src: "Media/Game/Icons/Unfollow.svg",
              sounds: gse,
              selectSound: op.removeItem,
              className: mse.action,
              onSelect: r,
              onClick: Ob
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/life-path/life-path-list/life-path-list.tsx", {
      get LifePathList() {
        return pse;
      },
      set LifePathList(e) {
        pse = e;
      }
    });
    let xse = {
      "life-path-panel": "life-path-panel_C3E",
      lifePathPanel: "life-path-panel_C3E",
      content: "content_auJ",
      "detail-visible": "detail-visible_Hku",
      detailVisible: "detail-visible_Hku",
      list: "list_V2f",
      detail: "detail_H5A",
      inactive: "inactive_OSs",
      enter: "enter_w5W",
      "exit-active": "exit-active_c34",
      exitActive: "exit-active_c34",
      "enter-active": "enter-active_Qj1",
      enterActive: "enter-active_Qj1",
      exit: "exit_hrP"
    };
    X.add("game-ui/game/components/life-path/life-path-panel/life-path-panel.module.scss", {
      get classes() {
        return xse;
      },
      set classes(e) {
        Object.assign(xse, e);
      }
    });
    const _se = new Tg("LIST");
    const bse = new Tg("DETAIL");
    var Tse = ({
      selectedCitizen: e,
      onClose: t
    }) => {
      rg(dT.value?.lifePathPanel);
      const n = ll(Aj, e);
      const s = null != n && !Ur(e, Xp);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.lifePathPanel,
        disableBlinking: true,
        children: z.jsx(ZT, {
          theme: i7,
          header: z.jsx(nE, {
            children: z.jsx(Pc.LifePath.LIST_PANEL_TITLE, {})
          }),
          transitionSounds: lp,
          className: xse.lifePathPanel,
          contentClassName: Qu()(xse.content, s && xse.detailVisible),
          onClose: t,
          children: z.jsx(kg, {
            onAction: s ? qv : undefined,
            children: z.jsxs(ip, {
              focused: s ? bse : _se,
              children: [z.jsx(sp, {
                focusKey: bse,
                children: z.jsx(cd, {
                  children: n && (0, z.jsx)(dh, {
                    styles: xse,
                    children: (0, z.jsx)(use, {
                      selectedCitizen: e,
                      details: n,
                      className: xse.detail,
                      onBack: qv
                    })
                  }, "detail")
                })
              }), z.jsx(sp, {
                focusKey: _se,
                children: z.jsx(pse, {
                  selectedCitizen: e,
                  className: Qu()(xse.list, s && xse.inactive),
                  onSelectCitizen: Xv
                })
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/life-path/life-path-panel/life-path-panel.tsx", {
      get LifePathPanel() {
        return Tse;
      },
      set LifePathPanel(e) {
        Tse = e;
      }
    });
    var Ise;
    var yse = $r("notification", "notifications");
    function Sse(e) {
      tl("notification", "selectNotification", e);
    }
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Progressing = 1] = "Progressing";
      e[e.Indeterminate = 2] = "Indeterminate";
      e[e.Complete = 3] = "Complete";
      e[e.Failure = 4] = "Failure";
      e[e.Warning = 5] = "Warning";
    }(Ise || (Ise = {}));
    X.add("game-ui/menu/data-binding/notification-bindings.ts", {
      get notifications() {
        return notifications;
      },
      set notifications(e) {
        notifications = e;
      },
      get selectNotification() {
        return Sse;
      },
      set selectNotification(e) {
        Sse = e;
      },
      get ProgressState() {
        return Ise;
      },
      set ProgressState(e) {
        Ise = e;
      }
    });
    let jse = {
      "progress-circle": "progress-circle_lIZ progress-circle_OLN",
      progressCircle: "progress-circle_lIZ progress-circle_OLN",
      progress: "progress_EdA progress_mlv",
      complete: "complete_yk6",
      failure: "failure_Zlz"
    };
    X.add("game-ui/menu/components/notifications-panel/notification-progress.module.scss", {
      get classes() {
        return jse;
      },
      set classes(e) {
        Object.assign(jse, e);
      }
    });
    let Nse = {
      "notifications-panel": "notifications-panel_AtV",
      notificationsPanel: "notifications-panel_AtV",
      header: "header_JLb",
      wrapper: "wrapper_x8D",
      scrollable: "scrollable_aqz",
      "item-transition": "item-transition_kWi",
      itemTransition: "item-transition_kWi",
      enter: "enter_imo",
      "enter-active": "enter-active_KuO",
      enterActive: "enter-active_KuO",
      exit: "exit_Dv6",
      "exit-active": "exit-active_QeX",
      exitActive: "exit-active_QeX",
      item: "item_tYE",
      thumbnail: "thumbnail_MaF",
      "main-column": "main-column_j77",
      mainColumn: "main-column_j77",
      title: "title_wMV",
      text: "text__0z",
      "progress-container": "progress-container_Trw",
      progressContainer: "progress-container_Trw",
      "progress-circle": "progress-circle_MKN",
      progressCircle: "progress-circle_MKN",
      "progress-label": "progress-label_bgv",
      progressLabel: "progress-label_bgv",
      "progress-icon": "progress-icon_KDy",
      progressIcon: "progress-icon_KDy",
      "complete-icon": "complete-icon_CuU progress-icon_KDy",
      completeIcon: "complete-icon_CuU progress-icon_KDy",
      "failure-icon": "failure-icon_Pny progress-icon_KDy",
      failureIcon: "failure-icon_Pny progress-icon_KDy",
      "warning-icon": "warning-icon_dBU progress-icon_KDy",
      warningIcon: "warning-icon_dBU progress-icon_KDy"
    };
    X.add("game-ui/menu/components/notifications-panel/notifications-panel.module.scss", {
      get classes() {
        return Nse;
      },
      set classes(e) {
        Object.assign(Nse, e);
      }
    });
    var Ose = FT({
      Checkmark: "Media/Glyphs/Checkmark.svg",
      Close: "Media/Glyphs/Close.svg",
      Warning: "Media/Glyphs/Warning.svg"
    });
    var Pse = ({
      className: e
    }) => {
      const t = sl(yse);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Nse.notificationsPanel, e),
        children: [z.jsx("div", {
          className: Nse.header,
          children: z.jsx(Pc.Menu.NOTIFICATIONS_TITLE, {})
        }), z.jsx("div", {
          className: Nse.wrapper,
          children: z.jsx(ab, {
            className: Nse.scrollable,
            children: z.jsx(ep, {
              children: z.jsx(cd, {
                children: t.map(e => (0, z.jsx)(Ase, {
                  item: e
                }, e.id))
              })
            })
          })
        })]
      });
    };
    const Lse = {
      tension: 30,
      friction: 10
    };
    var Ase = ({
      item: e
    }) => {
      const t = WY(Lse, e.progress, e.progress, true);
      0;
      const n = Y.useCallback(() => {
        Sse(e.id);
      }, [e.id]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(gy, {
        styles: Nse,
        children: z.jsx("div", {
          className: Nse.itemTransition,
          children: z.jsxs(L_, {
            onSelect: n,
            className: Nse.item,
            children: [e.thumbnail && (0, z.jsx)("div", {
              className: Nse.thumbnail,
              children: (0, z.jsx)("div", {
                style: {
                  backgroundImage: `url('${e.thumbnail}')`
                }
              })
            }), z.jsxs("div", {
              className: Nse.mainColumn,
              children: [z.jsx("div", {
                className: Nse.title,
                children: Mse(e)
              }), z.jsx("div", {
                className: Nse.text,
                children: Rse(e)
              })]
            }), e.progressState !== Ise.None && (0, z.jsxs)("div", {
              className: Nse.progressContainer,
              children: [(0, z.jsx)(BF, {
                progress: e.progressState !== Ise.Complete ? t : 100,
                max: 100,
                indeterminate: e.progressState === Ise.Indeterminate,
                theme: jse,
                className: Qu()(Nse.progressCircle, kse(e))
              }), Dse(e)]
            })]
          })
        })
      });
    };
    function Mse(e) {
      return null != e.title ? (0, z.jsx)(hu, {
        value: e.title
      }) : undefined;
    }
    function Rse(e) {
      return null != e.text ? (0, z.jsx)(hu, {
        value: e.text
      }) : undefined;
    }
    function kse(e) {
      switch (e.progressState) {
        case Ise.Complete:
          return jse.complete;
        case Ise.Failure:
          return jse.failure;
        default:
          return;
      }
    }
    function Dse(e) {
      switch (e.progressState) {
        case Ise.Complete:
          0;
          return z.jsx(W_, {
            src: Ose.Checkmark,
            className: Nse.completeIcon
          });
        case Ise.Failure:
          0;
          return z.jsx(W_, {
            src: Ose.Close,
            className: Nse.failureIcon
          });
        case Ise.Warning:
          0;
          return z.jsx(W_, {
            src: Ose.Warning,
            className: Nse.warningIcon
          });
        case Ise.Indeterminate:
          return;
        default:
          0;
          0;
          return z.jsx("div", {
            className: Nse.progressLabel,
            children: z.jsx(Gc, {
              value: e.progress,
              unit: Oc.Percentage
            })
          });
      }
    }
    X.add("game-ui/menu/components/notifications-panel/notifications-panel.tsx", {
      get images() {
        return Ose;
      },
      set images(e) {
        Ose = e;
      },
      get NotificationsPanel() {
        return Pse;
      },
      set NotificationsPanel(e) {
        Pse = e;
      },
      get NotificationItem() {
        return Ase;
      },
      set NotificationItem(e) {
        Ase = e;
      }
    });
    let Fse = {
      "notifications-panel": "notifications-panel_LaL",
      notificationsPanel: "notifications-panel_LaL",
      content: "content_QBu",
      empty: "empty_KiN"
    };
    X.add("game-ui/game/components/notifications-panel/notifications-panel.module.scss", {
      get classes() {
        return Fse;
      },
      set classes(e) {
        Object.assign(Fse, e);
      }
    });
    var Bse = ({
      className: e,
      onClose: t
    }) => {
      const n = sl(yse);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(ZT, {
        header: z.jsx(nE, {
          children: z.jsx(Pc.Menu.NOTIFICATIONS_TITLE, {})
        }),
        transitionSounds: lp,
        className: Qu()(Fse.notificationsPanel, e),
        onClose: t,
        children: [z.jsx(ab, {
          className: Fse.content,
          children: z.jsx(ep, {
            children: z.jsx(cd, {
              children: n.map(e => (0, z.jsx)(Ase, {
                item: e
              }, e.id))
            })
          })
        }), z.jsx(py, {
          in: !n.length,
          children: z.jsx(dh, {
            styles: L6,
            children: z.jsx(YX, {
              className: Fse.empty,
              children: z.jsx(bb, {
                children: z.jsx(Pc.Menu.NOTIFICATIONS_OPENING_MESSAGE, {})
              })
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/notifications-panel/notifications-panel.tsx", {
      get NotificationsPanel() {
        return Bse;
      },
      set NotificationsPanel(e) {
        Bse = e;
      }
    });
    var Vse = $r("achievements", "showAchievementsTab");
    var Hse = $r("achievements", "achievements");
    X.add("game-ui/game/data-binding/achievement-bindings.ts", {
      get showAchievementsTab() {
        return showAchievementsTab;
      },
      set showAchievementsTab(e) {
        showAchievementsTab = e;
      },
      get achievements() {
        return achievements;
      },
      set achievements(e) {
        achievements = e;
      }
    });
    let Kse = {
      "progress-bar": "progress-bar_VAk",
      progressBar: "progress-bar_VAk",
      "progress-bounds": "progress-bounds_aKD",
      progressBounds: "progress-bounds_aKD",
      progress: "progress_gG0",
      label: "label_D0Y",
      "progress-label": "progress-label_SHL",
      progressLabel: "progress-label_SHL"
    };
    X.add("game-ui/game/components/progression/progression-panel/shared-components/progress-bar/progress-bar.module.scss", {
      get classes() {
        return Kse;
      },
      set classes(e) {
        Object.assign(Kse, e);
      }
    });
    let zse = {
      achievement: "achievement_BUQ item-states_QjV",
      content: "content_n2n",
      left: "left_tyE",
      right: "right_wLd",
      icon: "icon_fbN",
      disabled: "disabled_Jh2",
      locked: "locked_tfQ",
      label: "label_hdQ",
      "progress-bar": "progress-bar_MqT",
      progressBar: "progress-bar_MqT"
    };
    X.add("game-ui/game/components/progression/progression-panel/achievements-page/achievement.module.scss", {
      get classes() {
        return zse;
      },
      set classes(e) {
        Object.assign(zse, e);
      }
    });
    var $se = ({
      achievement: e,
      selected: t,
      onHover: n,
      onSelect: s
    }) => {
      0;
      const i = Y.useCallback(() => n(e), [n, e]);
      0;
      const a = Y.useCallback(() => rp(op.hoverItem), []);
      0;
      const o = Y.useCallback(() => n(null), [n]);
      0;
      const r = Y.useCallback(t => {
        if (t) {
          s(e);
          rp(op.hoverItem);
        }
      }, [e, s]);
      0;
      const l = Y.useCallback(() => {
        s(e);
        rp(op.selectItem);
      }, [e, s]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ep, {
        onClick: l,
        onMouseOver: i,
        onMouseEnter: a,
        onMouseLeave: o,
        onFocusChange: r,
        className: Qu()(zse.achievement, t && "selected", e.locked && zse.locked),
        children: z.jsxs("div", {
          className: zse.content,
          children: [z.jsxs("div", {
            className: zse.left,
            children: [z.jsx("img", {
              className: zse.icon,
              src: e.imagePath
            }), z.jsx("div", {
              className: zse.label,
              children: z.jsx(Pc.Achievements.TITLE, {
                hash: e.localeKey
              })
            })]
          }), z.jsx("div", {
            className: zse.right,
            children: e.isIncremental && (0, z.jsx)(Ete, {
              theme: Kse,
              className: zse.progressBar,
              progress: e.locked ? e.progress : e.maxProgress,
              max: e.maxProgress,
              children: (0, z.jsx)(cu, {
                value: e.locked ? e.progress : e.maxProgress,
                total: e.maxProgress,
                unit: Oc.Integer
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/achievements-page/achievement.tsx", {
      get Achievement() {
        return $se;
      },
      set Achievement(e) {
        $se = e;
      }
    });
    let qse = {
      "achievements-page": "achievements-page_jWM",
      achievementsPage: "achievements-page_jWM",
      "main-column": "main-column_tzh",
      mainColumn: "main-column_tzh",
      "info-column": "info-column_Ufp",
      infoColumn: "info-column_Ufp",
      scrollable: "scrollable_AyZ"
    };
    X.add("game-ui/game/components/progression/progression-panel/achievements-page/achievements-page.module.scss", {
      get classes() {
        return qse;
      },
      set classes(e) {
        Object.assign(qse, e);
      }
    });
    var Qse = () => {
      const e = km();
      const t = sl(Hse);
      0;
      const [n, s] = Y.useState(t[0]);
      0;
      const [i, a] = Y.useState(null);
      0;
      const o = Y.useCallback(t => {
        if (!e) {
          a(t);
        }
      }, [e]);
      0;
      Y.useEffect(() => {
        if (e) {
          a(null);
        }
      }, [e]);
      0;
      const r = Y.useMemo(() => null != i ? i : n, [i, n]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: qse.achievementsPage,
        children: [z.jsx(m2, {
          theme: u2,
          className: qse.mainColumn,
          children: z.jsx(ab, {
            className: qse.scrollable,
            children: z.jsx(ep, {
              children: t.map(e => (0, z.jsx)($se, {
                selected: n.localeKey === e.localeKey,
                achievement: e,
                onSelect: s,
                onHover: o
              }, e.localeKey))
            })
          })
        }), z.jsx(Zse, {
          achievement: r
        })]
      });
    };
    const Zse = ({
      achievement: e
    }) => (0, z.jsx)(m2, {
      focusKey: Eg,
      theme: u2,
      className: qse.infoColumn,
      children: e && (0, z.jsx)(N7, {
        icon: e.imagePath,
        title: (0, z.jsx)(Pc.Achievements.TITLE, {
          hash: e.localeKey
        }),
        description: (0, z.jsx)(Pc.Achievements.DESCRIPTION, {
          hash: e.localeKey
        })
      })
    });
    function Jse() {
      0;
      return Y.createContext({
        onItemMouseOver: () => {},
        onItemMouseLeave: () => {},
        onItemSelect: () => {},
        clear: () => {}
      });
    }
    function eie(e) {
      0;
      const [t, n] = Y.useState(null);
      0;
      const [s, i] = Y.useState(null);
      const a = km();
      0;
      return [Y.useMemo(() => ({
        onItemMouseOver: e => n(e),
        onItemMouseLeave: t => n(n => null === n || e(t, n) ? null : n),
        onItemSelect: e => i(e),
        clear: () => {
          n(null);
          i(null);
        }
      }), [e]), s, a ? s : t ?? s];
    }
    function tie(e, t) {
      0;
      const n = Y.useContext(e);
      0;
      return Y.useMemo(() => ({
        onMouseOver: () => n.onItemMouseOver(t),
        onMouseLeave: () => n.onItemMouseLeave(t),
        onClick: () => n.onItemSelect(t)
      }), [n, t]);
    }
    X.add("game-ui/game/components/progression/progression-panel/achievements-page/achievements-page.tsx", {
      get AchievementsPage() {
        return Qse;
      },
      set AchievementsPage(e) {
        Qse = e;
      }
    });
    X.add("game-ui/common/section/detail-layout/detail-context.ts", {
      get createDetailContext() {
        return Jse;
      },
      set createDetailContext(e) {
        Jse = e;
      },
      get useDetailContext() {
        return eie;
      },
      set useDetailContext(e) {
        eie = e;
      },
      get useElementCallbacks() {
        return tie;
      },
      set useElementCallbacks(e) {
        tie = e;
      }
    });
    var nie = Jse();
    var sie = 0;
    function iie(e, t) {
      return "number" == typeof e || "number" == typeof t ? e === t : Ur(e, t);
    }
    function aie(e) {
      return "number" == typeof e ? e : Dr(e);
    }
    function oie(e) {
      return e === sie ? sie : Fr(e);
    }
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-page-context.ts", {
      get MilestonePageContext() {
        return nie;
      },
      set MilestonePageContext(e) {
        nie = e;
      },
      get LOAN_LIMIT() {
        return sie;
      },
      set LOAN_LIMIT(e) {
        sie = e;
      },
      get idEquals() {
        return iie;
      },
      set idEquals(e) {
        iie = e;
      },
      get idKey() {
        return aie;
      },
      set idKey(e) {
        aie = e;
      },
      get parseIdKey() {
        return oie;
      },
      set parseIdKey(e) {
        oie = e;
      }
    });
    let rie = {
      "milestone-detail-header": "milestone-detail-header_CQr",
      milestoneDetailHeader: "milestone-detail-header_CQr",
      "progress-bar": "progress-bar_jbW",
      progressBar: "progress-bar_jbW",
      subtitle: "subtitle_qwG",
      title: "title_oo7",
      rewards: "rewards_du7",
      "reward-field": "reward-field_SPU",
      rewardField: "reward-field_SPU"
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-detail/milestone-detail-header/milestone-detail-header.module.scss", {
      get classes() {
        return rie;
      },
      set classes(e) {
        Object.assign(rie, e);
      }
    });
    var cie = ({
      details: e
    }) => (0, z.jsx)(Tp, {
      className: rie.milestoneDetailHeader,
      style: {
        backgroundImage: e.image ? `url(${e.image})` : undefined,
        backgroundColor: tN(e.backgroundColor),
        color: tN(e.textColor)
      },
      children: (0, z.jsxs)(ep, {
        children: [(0, z.jsx)(die, {
          xpRequirement: e.xpRequirement
        }), (0, z.jsx)("div", {
          className: rie.subtitle,
          children: (0, z.jsx)(Pc.Progression.MILESTONE_DETAIL_SUBTITLE, {
            INDEX: (0, z.jsx)(Gc, {
              value: e.index,
              unit: Oc.Integer
            })
          })
        }), (0, z.jsx)("div", {
          className: rie.title,
          children: (0, z.jsx)(Pc.Progression.MILESTONE_NAME, {
            index: e.index
          })
        }), (0, z.jsxs)("div", {
          className: rie.rewards,
          children: [e.reward > 0 && (0, z.jsx)(aT, {
            uiTag: dT.value?.progressionPanelMilestoneRewardsMoney,
            children: (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.Progression.TOOLTIP_TITLE_MONEY, {}),
              description: (0, z.jsx)(Pc.Progression.TOOLTIP_DESCRIPTION_MONEY, {}),
              children: (0, z.jsx)(z6, {
                focusable: true,
                icon: "Media/Game/Icons/Money.svg",
                className: rie.rewardField,
                children: (0, z.jsx)(Gc, {
                  value: e.reward,
                  unit: Oc.Money
                })
              })
            })
          }), e.devTreePoints > 0 && (0, z.jsx)(aT, {
            uiTag: dT.value?.progressionPanelMilestoneRewardsDevPoints,
            children: (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.Progression.TOOLTIP_TITLE_POINTS, {}),
              description: (0, z.jsx)(Pc.Progression.TOOLTIP_DESCRIPTION_POINTS, {}),
              children: (0, z.jsx)(z6, {
                focusable: true,
                icon: "Media/Game/Icons/DevPoint.svg",
                className: rie.rewardField,
                children: (0, z.jsx)(Gc, {
                  value: e.devTreePoints,
                  unit: Oc.Integer,
                  signed: true
                })
              })
            })
          }), e.mapTiles > 0 && (0, z.jsx)(aT, {
            uiTag: dT.value?.progressionPanelMilestoneRewardsMapTiles,
            children: (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.Progression.TOOLTIP_TITLE_EXPANSION_PERMITS, {}),
              description: (0, z.jsx)(Pc.Progression.TOOLTIP_DESCRIPTION_EXPANSION_PERMITS, {}),
              children: (0, z.jsx)(z6, {
                focusable: true,
                icon: "Media/Game/Icons/ExpansionPermit.svg",
                className: rie.rewardField,
                children: (0, z.jsx)(Gc, {
                  value: e.mapTiles,
                  unit: Oc.Integer,
                  signed: true
                })
              })
            })
          })]
        })]
      })
    });
    const uie = {
      tension: 150,
      friction: 20
    };
    const die = ({
      xpRequirement: e
    }) => {
      const t = sl(xN);
      const n = wd(t, 0, e);
      const s = wd(WY(uie, t), 0, e);
      0;
      const [i, a] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.progressionPanelMilestoneXP,
        children: z.jsx(zq, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_XP, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_XP, {}),
          children: z.jsx(Lh, {
            onFocusChange: a,
            children: z.jsx(Ep, {
              children: z.jsx(Ete, {
                progress: s,
                max: e,
                theme: Kse,
                className: Qu()(rie.progressBar, i && "focused"),
                children: z.jsx(cu, {
                  value: n,
                  total: e,
                  unit: Oc.XP
                })
              })
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-detail/milestone-detail-header/milestone-detail-header.tsx", {
      get MilestoneDetailHeader() {
        return cie;
      },
      set MilestoneDetailHeader(e) {
        cie = e;
      }
    });
    let mie = {
      "unlock-item": "unlock-item_cKn item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT item-states_QjV",
      unlockItem: "unlock-item_cKn item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT item-states_QjV",
      icon: "icon_dN7",
      small: "small_cfi",
      title: "title_tnS"
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-detail/unlock-item/unlock-item.module.scss", {
      get classes() {
        return mie;
      },
      set classes(e) {
        Object.assign(mie, e);
      }
    });
    var gie = ({
      id: e,
      selected: t,
      small: n,
      icon: s,
      title: i,
      children: a
    }) => {
      const o = tie(nie, e);
      0;
      0;
      0;
      0;
      return z.jsxs(L_, {
        disableHint: true,
        focusKey: aie(e),
        selected: t,
        className: Qu()(mie.unlockItem, n && mie.small),
        ...o,
        children: [z.jsx("div", {
          className: mie.icon,
          children: z.jsx("img", {
            src: s
          })
        }), z.jsx("div", {
          className: mie.title,
          children: i
        }), a]
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-detail/unlock-item/unlock-item.tsx", {
      get UnlockItem() {
        return gie;
      },
      set UnlockItem(e) {
        gie = e;
      }
    });
    let pie = {
      "milestone-detail": "milestone-detail_kYc",
      milestoneDetail: "milestone-detail_kYc",
      scrollable: "scrollable_uML",
      badge: "badge_Dd7",
      theme: "theme_CAs",
      "theme-icon": "theme-icon_c1W",
      themeIcon: "theme-icon_c1W"
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-detail/milestone-detail.module.scss", {
      get classes() {
        return pie;
      },
      set classes(e) {
        Object.assign(pie, e);
      }
    });
    const xie = new Tg("UnlocksList");
    var vie = ({
      details: e,
      unlocks: t,
      selectedUnlock: n,
      className: s
    }) => {
      0;
      const {
        onItemSelect: i
      } = Y.useContext(nie);
      const a = fp(oie, i);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(m2, {
        theme: u2,
        className: Qu()(pie.milestoneDetail, s),
        children: z.jsxs(ep, {
          initialFocused: xie,
          children: [null != e && (0, z.jsx)(cie, {
            details: e
          }), z.jsx(aT, {
            uiTag: dT.value?.progressionPanelMilestoneRewards,
            children: z.jsx(ab, {
              className: pie.scrollable,
              children: z.jsxs(Xg, {
                focusKey: xie,
                focused: null != n ? aie(n) : null,
                direction: Mg.Vertical,
                onChange: a,
                onRefocus: Qg,
                children: [e && e.loanLimit > 0 && (0, z.jsx)(bie, {
                  loanLimit: e.loanLimit,
                  selected: iie(n, sie)
                }), z.jsx(lM, {
                  components: _ie,
                  data: t,
                  props: {
                    selectedUnlock: n
                  }
                })]
              })
            })
          })]
        })
      });
    };
    const _ie = {
      [mN.Feature]: ({
        selectedUnlock: e,
        ...t
      }) => (0, z.jsx)(Tie, {
        entity: t.entity,
        icon: t.icon,
        title: (0, z.jsx)(Pc.Assets.NAME, {
          hash: t.name
        }),
        devTreeUnlocked: false,
        selected: iie(t.entity, e)
      }),
      [mN.Policy]: ({
        selectedUnlock: e,
        ...t
      }) => (0, z.jsx)(Tie, {
        entity: t.entity,
        icon: t.icon,
        title: (0, z.jsx)(Pc.Policy.TITLE, {
          hash: t.name
        }),
        devTreeUnlocked: false,
        selected: iie(t.entity, e)
      }),
      [mN.Service]: ({
        selectedUnlock: e,
        ...t
      }) => (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)(Tie, {
          entity: t.entity,
          icon: t.icon,
          title: (0, z.jsx)(Pc.Services.NAME, {
            hash: t.name
          }),
          devTreeUnlocked: t.devTreeUnlocked ?? false,
          selected: iie(t.entity, e)
        }), t.assets.map(t => (0, z.jsx)(Eie, {
          item: t,
          selected: iie(t.entity, e)
        }, Dr(t.entity)))]
      }),
      [mN.Zone]: ({
        selectedUnlock: e,
        ...t
      }) => (0, z.jsx)(Eie, {
        zone: true,
        item: t,
        selected: iie(t.entity, e)
      })
    };
    const bie = ({
      loanLimit: e,
      selected: t
    }) => (0, z.jsx)(gie, {
      id: sie,
      icon: "Media/Game/Icons/Money.svg",
      title: (0, z.jsx)(Pc.Progression.LOAN_LIMIT, {}),
      selected: t,
      children: (0, z.jsx)("div", {
        className: pie.badge,
        children: (0, z.jsx)(Gc, {
          value: e,
          unit: Oc.Money,
          signed: true
        })
      })
    });
    const Tie = ({
      entity: e,
      icon: t,
      title: n,
      devTreeUnlocked: s,
      selected: i
    }) => (0, z.jsx)(gie, {
      id: e,
      selected: i,
      icon: t,
      title: n,
      children: s && (0, z.jsx)("div", {
        className: pie.badge,
        children: (0, z.jsx)(Pc.Progression.DEV_TREE_UNLOCK_BADGE, {})
      })
    });
    const Eie = ({
      item: e,
      selected: t,
      zone: n
    }) => {
      const s = sl(cT).filter(t => e.themes.some(e => Ur(e, t.entity)));
      0;
      0;
      return z.jsx(gie, {
        small: !n,
        id: e.entity,
        selected: t,
        icon: e.icon,
        title: z.jsx(Pc.Assets.NAME, {
          hash: e.name
        }),
        children: s.map(e => (0, z.jsx)(bg, {
          tooltip: (0, z.jsx)(Pc.Assets.THEME, {
            hash: e.name
          }),
          children: (0, z.jsx)("div", {
            className: pie.theme,
            children: (0, z.jsx)("img", {
              src: e.icon,
              className: pie.themeIcon
            })
          })
        }, Dr(e.entity)))
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-detail/milestone-detail.tsx", {
      get MilestoneDetail() {
        return vie;
      },
      set MilestoneDetail(e) {
        vie = e;
      }
    });
    let Iie = {
      "milestone-list": "milestone-list_tfM",
      milestoneList: "milestone-list_tfM",
      scrollable: "scrollable_UGT",
      item: "item_LnT item-states_QjV",
      "circle-layout": "circle-layout_Xmw",
      circleLayout: "circle-layout_Xmw",
      line: "line_jbQ",
      unlocked: "unlocked_gJI",
      first: "first_JVl",
      last: "last_gAq",
      circle: "circle_yGr",
      major: "major_RSg",
      title: "title_UOA"
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-list/milestone-list.module.scss", {
      get classes() {
        return Iie;
      },
      set classes(e) {
        Object.assign(Iie, e);
      }
    });
    var Sie = ({
      selectedMilestone: e,
      className: t,
      onSelectMilestone: n
    }) => {
      const s = xp(n);
      const i = sl(bN);
      0;
      const a = Y.useRef(null);
      const o = kE();
      0;
      Y.useEffect(() => {
        window.requestAnimationFrame(() => {
          if (null != a.current) {
            o.scrollIntoView(a.current);
          }
        });
      }, [o]);
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.progressionPanelMilestonesList,
        children: z.jsx(m2, {
          theme: u2,
          className: Qu()(Iie.milestoneList, t),
          children: z.jsx(ab, {
            className: Iie.scrollable,
            controller: o,
            children: z.jsx(Xg, {
              focused: Dr(e),
              direction: Mg.Vertical,
              onChange: s,
              children: i.map((t, s) => (0, z.jsx)(jie, {
                ref: i.length > s + 1 && !i[s + 1].locked ? a : undefined,
                milestone: t,
                nextUnlocked: i.length > s + 1 && !i[s + 1].locked,
                selected: Ur(t.entity, e),
                first: 0 === s,
                last: i.length === s + 1,
                onSelect: n
              }, Dr(t.entity)))
            })
          })
        })
      });
    };
    const jie = Y.forwardRef(function ({
      milestone: e,
      nextUnlocked: t,
      selected: n,
      first: s,
      last: i,
      onSelect: a,
      ...o
    }, r) {
      0;
      const l = Y.useCallback(() => a(e.entity), [e.entity, a]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(L_, {
        disableHint: true,
        ref: r,
        focusKey: Dr(e.entity),
        selected: n,
        className: Qu()(Iie.item, e.major && Iie.major, !e.locked && Iie.unlocked),
        onClick: l,
        ...o,
        children: [z.jsxs("div", {
          className: Iie.circleLayout,
          children: [z.jsx("div", {
            className: Qu()(Iie.line, !e.locked && Iie.unlocked, s && Iie.first)
          }), z.jsx("div", {
            className: Iie.circle
          }), z.jsx("div", {
            className: Qu()(Iie.line, t && Iie.unlocked, i && Iie.last)
          })]
        }), z.jsx("div", {
          className: Iie.title,
          children: z.jsx(Pc.Progression.MILESTONE_NAME, {
            index: e.index
          })
        })]
      });
    });
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-list/milestone-list.tsx", {
      get MilestoneList() {
        return Sie;
      },
      set MilestoneList(e) {
        Sie = e;
      }
    });
    var Cie = ({
      id: e,
      milestoneDetails: t,
      className: n
    }) => (0, z.jsx)(m2, {
      focusKey: Eg,
      theme: u2,
      className: n,
      children: Nie(e, t)
    });
    function Nie(e, t) {
      return e === sie ? (0, z.jsx)(Oie, {
        milestoneDetails: t
      }) : null != e ? (0, z.jsx)(wie, {
        entity: e
      }) : null;
    }
    const wie = ({
      entity: e
    }) => {
      const t = ll(SN, e);
      return null != t ? (0, z.jsx)(N7, {
        icon: t.icon,
        title: (0, z.jsx)(Tc, {
          id: t.titleId
        }),
        description: (0, z.jsx)(Tc, {
          id: t.descriptionId
        }),
        children: (0, z.jsx)(P7, {
          state: t.locked ? "Locked" : "Unlocked"
        })
      }) : null;
    };
    const Oie = ({
      milestoneDetails: e
    }) => (0, z.jsx)(N7, {
      icon: "Media/Game/Icons/Money.svg",
      title: (0, z.jsx)(Pc.Progression.LOAN_LIMIT, {}),
      description: (0, z.jsx)(Pc.EconomyPanel.LOAN_PAGE_DESCRIPTION, {}),
      children: (0, z.jsx)(P7, {
        state: e?.locked ? "Locked" : "Unlocked"
      })
    });
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/unlock-detail/unlock-detail.tsx", {
      get UnlockDetail() {
        return Cie;
      },
      set UnlockDetail(e) {
        Cie = e;
      }
    });
    let Pie = {
      "milestone-page": "milestone-page_dL2",
      milestonePage: "milestone-page_dL2",
      "milestone-list": "milestone-list_C7c",
      milestoneList: "milestone-list_C7c",
      "milestone-detail": "milestone-detail_zdr",
      milestoneDetail: "milestone-detail_zdr",
      "unlock-detail": "unlock-detail_LWQ",
      unlockDetail: "unlock-detail_LWQ"
    };
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-page.module.scss", {
      get classes() {
        return Pie;
      },
      set classes(e) {
        Object.assign(Pie, e);
      }
    });
    var Aie = () => {
      rg(dT.value?.progressionPanelMilestonesPage);
      0;
      const [e, t] = Y.useState(Mie);
      const [n, s, i] = eie(iie);
      const a = ll(IN, e);
      const o = ll(yN, e);
      0;
      const r = Y.useCallback(e => {
        t(e);
        n.clear();
      }, [n]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Pie.milestonePage,
        children: [z.jsxs(ep, {
          direction: Mg.Horizontal,
          children: [z.jsx(Sie, {
            selectedMilestone: e,
            onSelectMilestone: r,
            className: Pie.milestoneList
          }), z.jsx(nie.Provider, {
            value: n,
            children: z.jsx(vie, {
              details: a,
              unlocks: o,
              selectedUnlock: s,
              className: Pie.milestoneDetail
            }, Dr(e))
          })]
        }), z.jsx(Cie, {
          id: i,
          milestoneDetails: a,
          className: Pie.unlockDetail
        })]
      });
    };
    function Mie() {
      const e = bN.value;
      if (0 === e.length) {
        return Xp;
      }
      const t = e.findIndex(e => e.locked);
      return e[t > 1 ? t - 1 : -1 === t ? e.length - 1 : 0].entity;
    }
    X.add("game-ui/game/components/progression/progression-panel/milestone-page/milestone-page.tsx", {
      get MilestonePage() {
        return Aie;
      },
      set MilestonePage(e) {
        Aie = e;
      }
    });
    let Rie = {
      "dev-tree-node-detail": "dev-tree-node-detail_k9G",
      devTreeNodeDetail: "dev-tree-node-detail_k9G",
      content: "content_w8i",
      "detail-layout": "detail-layout_dX7",
      detailLayout: "detail-layout_dX7",
      button: "button_cM0",
      "gamepad-hint": "gamepad-hint_EXG",
      gamepadHint: "gamepad-hint_EXG",
      "button-label": "button-label_mXV",
      buttonLabel: "button-label_mXV",
      cost: "cost_DHr",
      "cost-dp-icon": "cost-dp-icon_C7u",
      costDpIcon: "cost-dp-icon_C7u",
      "unlock-hint": "unlock-hint_PFh",
      unlockHint: "unlock-hint_PFh",
      "points-display": "points-display_S2s",
      pointsDisplay: "points-display_S2s",
      "points-icon": "points-icon_f8_",
      pointsIcon: "points-icon_f8_",
      "points-value": "points-value_cTm",
      pointsValue: "points-value_cTm",
      "hint-icon": "hint-icon_CA0",
      hintIcon: "hint-icon_CA0",
      hint: "hint_ioT"
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/dev-tree-node-detail/dev-tree-node-detail.module.scss", {
      get classes() {
        return Rie;
      },
      set classes(e) {
        Object.assign(Rie, e);
      }
    });
    const Die = {
      hint: Rie.hint,
      icon: Rie.hintIcon
    };
    var Fie = ({
      node: e,
      className: t
    }) => {
      const n = ll(UC, e);
      const s = sl(RC);
      0;
      const i = Y.useCallback(() => {
        VC(e);
        if (dT.value?.progressionPanelDevelopmentUnlockNode) {
          ig(dT.value?.progressionPanelDevelopmentUnlockNode);
        }
      }, [e]);
      const a = function (e, t) {
        if (null === e) {
          return null;
        }
        if (e.unlockable) {
          return t < e.cost ? (0, z.jsx)(Pc.Progression.NODE_DEV_POINTS_REQUIREMENT, {}) : null;
        }
        if (e.requirementCount > 0) {
          0;
          return z.jsx(Pc.Progression.NODE_PARENT_REQUIREMENT, {});
        }
        if (e.milestoneRequirement > 0) {
          0;
          0;
          return z.jsx(Pc.Progression.NODE_MILESTONE_REQUIREMENT, {
            INDEX: z.jsx(Gc, {
              value: e.milestoneRequirement,
              unit: Oc.Integer
            })
          });
        }
      }(n, s);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(m2, {
        focusKey: Eg,
        theme: u2,
        className: Qu()(Rie.devTreeNodeDetail, t),
        children: z.jsxs("div", {
          className: Rie.content,
          children: [null != n && (0, z.jsxs)(N7, {
            icon: n.icon,
            title: (0, z.jsx)(Pc.Progression.NODE_NAME, {
              hash: n.name
            }),
            description: (0, z.jsx)(Pc.Progression.NODE_DESCRIPTION, {
              hash: n.name
            }),
            children: [(0, z.jsx)(P7, {
              state: n.locked ? "Locked" : "Unlocked"
            }), n.locked && (0, z.jsxs)(z.Fragment, {
              children: [n.cost > 0 && (0, z.jsx)(aT, {
                uiTag: dT.value?.progressionPanelDevelopmentUnlockNode,
                children: (0, z.jsxs)(L_, {
                  theme: FI,
                  selectSound: op.purchase,
                  className: Rie.button,
                  disabled: !n.unlockable || n.cost > s,
                  onSelect: i,
                  children: [(0, z.jsx)(LT, {
                    action: "Purchase Dev Tree Node",
                    active: true === n?.unlockable && s >= n?.cost,
                    theme: Die
                  }), (0, z.jsx)("div", {
                    className: Rie.buttonLabel,
                    children: (0, z.jsx)(Pc.Progression.UNLOCK_NODE_BUTTON, {})
                  }), (0, z.jsxs)("div", {
                    className: Rie.cost,
                    children: [(0, z.jsx)(Gc, {
                      value: n.cost,
                      unit: Oc.Integer
                    }), (0, z.jsx)("img", {
                      src: "Media/Game/Icons/DevPoint.svg",
                      className: Rie.costDpIcon
                    })]
                  })]
                })
              }), null != a && (0, z.jsx)("div", {
                className: Rie.unlockHint,
                children: a
              })]
            })]
          }), z.jsxs("div", {
            className: Rie.pointsDisplay,
            children: [z.jsx("img", {
              src: "Media/Game/Icons/DevPoint.svg",
              className: Rie.pointsIcon
            }), z.jsx("div", {
              className: Rie.pointsValue,
              children: z.jsx(Pc.Progression.AVAILABLE_DEV_POINTS, {
                VALUE: z.jsx(Gc, {
                  value: s,
                  unit: Oc.Integer
                })
              })
            })]
          })]
        })
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/dev-tree-node-detail/dev-tree-node-detail.tsx", {
      get DevTreeNodeDetail() {
        return Fie;
      },
      set DevTreeNodeDetail(e) {
        Fie = e;
      }
    });
    let Uie = {
      "service-detail-header": "service-detail-header_uCS",
      serviceDetailHeader: "service-detail-header_uCS",
      title: "title_XWg",
      "progress-bar": "progress-bar_PBl",
      progressBar: "progress-bar_PBl"
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-detail/service-detail-header.module.scss", {
      get classes() {
        return Uie;
      },
      set classes(e) {
        Object.assign(Uie, e);
      }
    });
    var Gie = ({
      details: e
    }) => {
      const t = sl(gN);
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Uie.serviceDetailHeader,
        children: [z.jsx("div", {
          className: Uie.title,
          children: z.jsx(Pc.Services.NAME, {
            hash: e.name
          })
        }), e.milestoneRequirement > t && (0, z.jsx)(Vie, {
          currentMilestone: t,
          targetMilestone: e.milestoneRequirement
        })]
      });
    };
    const Vie = ({
      currentMilestone: e,
      targetMilestone: t
    }) => (0, z.jsx)(Ete, {
      progress: e,
      max: t,
      theme: Kse,
      className: Uie.progressBar,
      children: (0, z.jsx)(Pc.Progression.MILESTONE_UNLOCK_REQUIREMENT, {
        INDEX: (0, z.jsx)(Gc, {
          value: t,
          unit: Oc.Integer
        }),
        NAME: (0, z.jsx)(Pc.Progression.MILESTONE_NAME, {
          index: t
        })
      })
    });
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-detail/service-detail-header.tsx", {
      get ServiceDetailHeader() {
        return Gie;
      },
      set ServiceDetailHeader(e) {
        Gie = e;
      }
    });
    let Hie = {
      "service-dev-tree": "service-dev-tree_Azt",
      serviceDevTree: "service-dev-tree_Azt",
      canvas: "canvas_xTK",
      "node-layer": "node-layer_Qxl",
      nodeLayer: "node-layer_Qxl",
      node: "node_qXI",
      container: "container_Y6w",
      title: "title_iof",
      selected: "selected_tgO",
      "circle-outline": "circle-outline_wOz",
      circleOutline: "circle-outline_wOz",
      circle: "circle_wRS",
      unlockable: "unlockable_RZR",
      locked: "locked_g7f",
      "cost-container": "cost-container_RMQ",
      costContainer: "cost-container_RMQ",
      cost: "cost_x8o",
      "cost-dp-icon": "cost-dp-icon_sWc",
      costDpIcon: "cost-dp-icon_sWc",
      hint: "hint_gGk",
      hintIcon: "hintIcon_otz"
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-detail/service-dev-tree.module.scss", {
      get classes() {
        return Hie;
      },
      set classes(e) {
        Object.assign(Hie, e);
      }
    });
    const Wie = {
      hint: Hie.hint,
      icon: Hie.hintIcon
    };
    var zie = ({
      service: e,
      selectedNode: t,
      locked: n,
      className: s,
      onHoverNode: i,
      onSelectNode: a
    }) => {
      0;
      const o = Y.useRef(null);
      const r = Vd(mm(o) ?? Ld);
      const l = Vm();
      const c = ll(FC, e);
      const u = c.reduce((e, t) => ({
        x: Math.max(e.x, t.position.x + 1),
        y: Math.max(e.y, t.position.y + 1)
      }), {
        x: 5,
        y: 0
      });
      0;
      Y.useEffect(() => {
        if (null == t || !c.some(e => Ur(e.entity, t))) {
          const e = c.reduce((e, t) => null == e || t.position.x < e.position.x || t.position.x === e.position.x && t.position.y < e.position.y ? t : e, null);
          if (null != e) {
            a(e.entity);
          }
        }
      }, [c, a, t]);
      const d = xp(a);
      const m = r.x / u.x;
      const h = 128 * l;
      const g = h * u.y;
      const p = .5 * (r.y - g);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        ref: o,
        className: Qu()(Hie.serviceDevTree, s),
        children: [z.jsx(Yie, {
          canvasWidth: r.x,
          canvasHeight: r.y,
          columnCount: u.x,
          columnWidth: m,
          rowHeight: h,
          verticalOffset: p,
          lineWidth: 4 * l,
          nodeRadius: 31 * l,
          locked: n,
          nodes: c
        }), z.jsx("div", {
          className: Hie.nodeLayer,
          children: z.jsx(Xg, {
            focused: Dr(t),
            onChange: d,
            children: !Dd(r, Ld) && c.map(e => (0, z.jsx)(Qie, {
              node: e,
              selected: Ur(t, e.entity),
              style: {
                top: p + e.position.y * h + "px",
                left: m * e.position.x + "px",
                width: m + "px",
                height: h + "px"
              },
              onHover: i,
              onSelect: a
            }, Dr(e.entity)))
          })
        })]
      });
    };
    const Yie = ({
      canvasWidth: e,
      canvasHeight: t,
      columnWidth: n,
      rowHeight: s,
      verticalOffset: i,
      lineWidth: a,
      nodeRadius: o,
      columnCount: r,
      locked: l,
      nodes: c
    }) => {
      0;
      const [u, d] = Y.useState(null);
      0;
      const m = Y.useCallback(e => d(e?.getContext("2d") ?? null), []);
      0;
      Y.useEffect(() => {
        if (!u) {
          return;
        }
        u.clearRect(0, 0, e, t);
        u.fillStyle = "#ffffff";
        u.globalAlpha = .05;
        for (let e = 1; e < r; e += 2) {
          u.fillRect(e * n, 0, n, t);
        }
        u.globalAlpha = 1;
        u.lineWidth = a;
        const l = c.sort($ie);
        for (const e of l) {
          const t = (e.position.x + .5) * n;
          const a = i + (e.position.y + .5) * s;
          const r = e.requirements;
          if (r.length > 0) {
            const l = r.map(e => c.find(t => Ur(e, t.entity))).filter(e => null != e).sort($ie).reverse();
            for (const r of l) {
              if (Dd(r.position, e.position) || r.position.x > e.position.x) {
                continue;
              }
              u.strokeStyle = e.locked ? (null != r ? !r.locked : e.unlockable) ? "#2378CD" : "#555" : "#8bdb46";
              const l = (r.position.x + .5) * n;
              const c = i + (r.position.y + .5) * s;
              if (e.position.x > r.position.x) {
                const n = l + o;
                const s = t - o;
                const i = e.position.x - r.position.x <= 1 ? .7 : .4;
                const d = n + (s - n) * i;
                const m = n + (s - n) * (1 - i);
                u.beginPath();
                u.moveTo(l + o, c);
                u.bezierCurveTo(d, c, m, a, s, a);
                u.stroke();
              } else {
                const n = Math.sign(e.position.y - r.position.y);
                const s = c + n * o;
                const i = a - n * o;
                u.beginPath();
                u.moveTo(l, s);
                u.lineTo(t, i);
                u.stroke();
              }
            }
          } else if (0 === e.position.x) {
            u.strokeStyle = e.locked ? (false ? !null.locked : e.unlockable) ? "#2378CD" : "#555" : "#8bdb46";
            const s = t - o;
            u.beginPath();
            u.moveTo(0, a);
            u.lineTo(s, a);
            u.stroke();
          }
        }
      }, [u, t, e, c, r, n, i, s, a, o, l]);
      return e > 0 && t > 0 ? (0, z.jsx)("canvas", {
        ref: m,
        width: e,
        height: t,
        className: Hie.canvas
      }) : null;
    };
    function $ie(e, t) {
      return !e.locked && t.locked ? 1 : e.locked && !t.locked ? -1 : e.unlockable && !t.unlockable ? 1 : !e.unlockable && t.unlockable ? -1 : 0;
    }
    function qie(e, t) {
      return t.locked ? (null != e ? !e.locked : t.unlockable) ? "#2378CD" : "#555" : "#8bdb46";
    }
    function Xie(e, t) {
      return t.position.x - e.position.x <= 1 ? .7 : .4;
    }
    const Qie = ({
      node: e,
      selected: t,
      style: n,
      className: s,
      onHover: i,
      onSelect: a
    }) => {
      0;
      const [o, r] = Y.useState(false);
      const l = sl(RC);
      0;
      const c = Y.useCallback(() => {
        rp(op.selectItem);
        a(e.entity);
      }, [e.entity, a]);
      const u = !(!e.locked || !e.unlockable || l < e.cost);
      0;
      const d = Y.useMemo(() => ({
        "Purchase Dev Tree Node": u ? () => {
          rp(op.purchase);
          VC(e.entity);
        } : null
      }), [e.entity, u]);
      0;
      const m = Y.useCallback(() => rp(op.hoverItem), []);
      0;
      const h = Y.useCallback(() => i(e.entity), [e.entity, i]);
      0;
      const g = Y.useCallback(() => i(Xp), [i]);
      0;
      const p = Y.useMemo(() => e.unlockable && e.cost > 0 && l >= e.cost ? dT.value?.progressionPanelDevelopmentUnlockableNode : dT.value?.progressionPanelDevelopmentNode, [l, e.cost, e.unlockable]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: d,
        children: z.jsxs(Ep, {
          focusKey: Dr(e.entity),
          focusSound: op.hoverItem,
          className: Qu()(s, Hie.node, t && Hie.selected, e.locked && (e.unlockable ? Hie.unlockable : Hie.locked)),
          style: n,
          onClick: c,
          onMouseOver: h,
          onMouseEnter: m,
          onMouseLeave: g,
          onFocusChange: r,
          children: [z.jsx(LT, {
            action: "Purchase Dev Tree Node",
            active: o && u,
            theme: Wie
          }), z.jsxs("div", {
            className: Hie.container,
            children: [z.jsx("div", {
              className: Hie.circleOutline,
              children: z.jsx(aT, {
                uiTag: p,
                children: z.jsx("div", {
                  className: Hie.circle,
                  children: z.jsx("img", {
                    src: e.icon
                  })
                })
              })
            }), z.jsx("div", {
              className: Hie.title,
              children: z.jsx(Pc.Progression.NODE_NAME, {
                hash: e.name
              })
            }), z.jsx("div", {
              className: Hie.costContainer,
              children: e.locked && e.cost > 0 && (0, z.jsx)(zq, {
                title: (0, z.jsx)(Pc.Progression.TOOLTIP_TITLE_POINTS_COST, {}),
                description: (0, z.jsx)(Pc.Progression.TOOLTIP_DESCRIPTION_POINTS_COST, {}),
                children: (0, z.jsxs)("div", {
                  className: Hie.cost,
                  children: [(0, z.jsx)(Gc, {
                    value: e.cost,
                    unit: Oc.Integer
                  }), (0, z.jsx)("img", {
                    src: "Media/Game/Icons/DevPoint.svg",
                    className: Hie.costDpIcon
                  })]
                })
              })
            })]
          })]
        })
      });
    };
    const Zie = (e, t) => !(!e.locked || !e.unlockable || t < e.cost);
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-detail/service-dev-tree.tsx", {
      get ServiceDevTree() {
        return zie;
      },
      set ServiceDevTree(e) {
        zie = e;
      }
    });
    let Jie = {
      "service-detail": "service-detail_Cba",
      serviceDetail: "service-detail_Cba",
      "dev-tree": "dev-tree_af6",
      devTree: "dev-tree_af6"
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-detail/service-detail.module.scss", {
      get classes() {
        return Jie;
      },
      set classes(e) {
        Object.assign(Jie, e);
      }
    });
    var tae = ({
      service: e,
      selectedNode: t,
      className: n,
      onHoverNode: s,
      onSelectNode: i
    }) => {
      const a = ll(DC, e);
      const o = a?.locked ?? false;
      0;
      0;
      return z.jsx(m2, {
        theme: u2,
        header: null != a && (0, z.jsx)(Gie, {
          details: a
        }),
        className: Qu()(Jie.serviceDetail, o && u2.locked, n),
        children: z.jsx(zie, {
          service: e,
          selectedNode: t,
          locked: o,
          className: Jie.devTree,
          onHoverNode: s,
          onSelectNode: i
        })
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-detail/service-detail.tsx", {
      get ServiceDetail() {
        return tae;
      },
      set ServiceDetail(e) {
        tae = e;
      }
    });
    let nae = {
      button: "button_Sxm button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      "toggle-states": "toggle-states_q6D",
      toggleStates: "toggle-states_q6D",
      icon: "icon_FKY icon_soN icon_Iwk",
      locked: "locked_K2j locked_H2O locked_dBl"
    };
    X.add("game-ui/game/themes/panel-service-button.module.scss", {
      get classes() {
        return nae;
      },
      set classes(e) {
        Object.assign(nae, e);
      }
    });
    let iae = {
      "service-list": "service-list_RLT",
      serviceList: "service-list_RLT",
      lock: "lock_H9c"
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-list/service-list.module.scss", {
      get classes() {
        return iae;
      },
      set classes(e) {
        Object.assign(iae, e);
      }
    });
    var oae = ({
      selectedService: e,
      className: t,
      onSelectService: n
    }) => {
      const s = xp(n);
      const i = sl(kC);
      0;
      0;
      return z.jsx(m2, {
        theme: u2,
        className: Qu()(iae.serviceList, t),
        children: z.jsx(Xg, {
          focused: Dr(e),
          direction: Mg.Vertical,
          onChange: s,
          onRefocus: Qg,
          children: i.map((t, s) => (0, z.jsx)(rae, {
            index: s,
            service: t,
            selected: Ur(t.entity, e),
            onSelect: n
          }, Dr(t.entity)))
        })
      });
    };
    const rae = ({
      index: e,
      service: t,
      selected: n,
      onSelect: s
    }) => {
      const i = Vm();
      0;
      const a = Y.useCallback(() => s(t.entity), [t.entity, s]);
      0;
      const o = Y.useMemo(() => `${dT.value?.progressionPanelDevelopmentService}+${t.uiTag}`, [t.uiTag]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: o,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Services.NAME, {
            hash: t.name
          }),
          description: z.jsx(Pc.Services.DESCRIPTION, {
            hash: t.name
          }),
          locked: t.locked,
          requirements: t.requirements,
          children: z.jsx($_, {
            disableHint: true,
            focusKey: Dr(t.entity),
            src: t.icon,
            selected: n,
            theme: nae,
            className: Qu()(t.locked && nae.locked),
            onClick: a,
            children: t.locked && (0, z.jsx)(kX, {
              className: iae.lock,
              style: {
                top: (48 * (e + 1) - 12) * i
              }
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-list/service-list.tsx", {
      get ServiceList() {
        return oae;
      },
      set ServiceList(e) {
        oae = e;
      }
    });
    let lae = {
      "service-page": "service-page_Rls",
      servicePage: "service-page_Rls",
      "list-column": "list-column_KaJ",
      listColumn: "list-column_KaJ",
      "main-column": "main-column_vAd",
      mainColumn: "main-column_vAd",
      "info-column": "info-column_Za4",
      infoColumn: "info-column_Za4"
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-page.module.scss", {
      get classes() {
        return lae;
      },
      set classes(e) {
        Object.assign(lae, e);
      }
    });
    var uae = () => {
      rg(dT.value?.progressionPanelDevelopmentPage);
      const e = sl(kC);
      const t = sl(BC);
      const n = Ur(t, Xp) ? e.length > 0 ? e[0].entity : Xp : t;
      const s = sl(GC);
      0;
      const [i, a] = Y.useState(Xp);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ep, {
        children: z.jsxs("div", {
          className: lae.servicePage,
          children: [z.jsx(oae, {
            selectedService: n,
            onSelectService: BC.update,
            className: lae.listColumn
          }), z.jsx(tae, {
            service: n,
            selectedNode: s,
            onHoverNode: a,
            onSelectNode: GC.update,
            className: lae.mainColumn
          }), z.jsx(Fie, {
            node: Ur(i, Xp) ? s : i,
            className: lae.infoColumn
          })]
        })
      });
    };
    X.add("game-ui/game/components/progression/progression-panel/service-page/service-page.tsx", {
      get ServicePage() {
        return uae;
      },
      set ServicePage(e) {
        uae = e;
      }
    });
    let dae = {
      "progression-panel": "progression-panel_vIm",
      progressionPanel: "progression-panel_vIm"
    };
    X.add("game-ui/game/components/progression/progression-panel/progression-panel.module.scss", {
      get classes() {
        return dae;
      },
      set classes(e) {
        Object.assign(dae, e);
      }
    });
    var hae = ({
      selectedTab: e,
      onSelectTab: t,
      onClose: n
    }) => {
      rg(dT.value?.progressionPanel);
      const s = sl(Vse);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        header: z.jsxs(z.Fragment, {
          children: [z.jsx(nE, {
            children: z.jsx(Pc.Progression.PANEL_TITLE, {})
          }), z.jsxs(BX, {
            children: [z.jsx(gae, {
              tab: Lv.Development,
              uiTag: dT.value?.progressionPanelDevelopmentTab,
              selectedTab: e,
              onSelect: t
            }), z.jsx(gae, {
              tab: Lv.Milestones,
              uiTag: dT.value?.progressionPanelMilestonesTab,
              selectedTab: e,
              onSelect: t
            }), s && (0, z.jsx)(gae, {
              tab: Lv.Achievements,
              selectedTab: e,
              onSelect: t
            })]
          })]
        }),
        transitionSounds: lp,
        className: dae.progressionPanel,
        onClose: n,
        children: z.jsx(UX, {
          tabs: [Lv.Development, Lv.Milestones, ...(s ? [Lv.Achievements] : [])],
          selectedTab: e,
          onSelect: t,
          children: pae(e)
        })
      });
    };
    const gae = ({
      tab: e,
      uiTag: t,
      selectedTab: n,
      onSelect: s,
      className: i
    }) => {
      const a = sl(SE);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(zq, {
        title: z.jsx(Pc.Progression.TOOLTIP_TITLE_TAB, {
          hash: Lv[e]
        }),
        description: z.jsx(Pc.Progression.TOOLTIP_DESCRIPTION_TAB, {
          hash: Lv[e]
        }),
        children: z.jsx(GX, {
          id: e,
          uiTag: t,
          selectedId: n,
          onSelect: s,
          className: i,
          children: z.jsx(Pc.Progression.TAB_TITLE, {
            hash: e === Lv.Achievements && 0 != (a & pE.PS) ? "Trophies" : Lv[e]
          })
        })
      });
    };
    function pae(e) {
      switch (e) {
        case Lv.Development:
          0;
          return z.jsx(uae, {});
        case Lv.Milestones:
          0;
          return z.jsx(Aie, {});
        case Lv.Achievements:
          0;
          return z.jsx(Qse, {});
        default:
          return null;
      }
    }
    X.add("game-ui/game/components/progression/progression-panel/progression-panel.tsx", {
      get ProgressionPanel() {
        return hae;
      },
      set ProgressionPanel(e) {
        hae = e;
      }
    });
    const fae = {
      focusController: Ju,
      inputController: jg
    };
    const xae = Y.createContext(fae);
    const vae = Y.createContext({
      attach: () => {},
      detach: () => {}
    });
    var _ae = ({
      children: e
    }) => {
      0;
      const [t, n] = Y.useState(fae);
      0;
      const s = Y.useMemo(() => ({
        attach: e => n(e),
        detach: e => n(t => t === e ? fae : t)
      }), []);
      0;
      0;
      return z.jsx(vae.Provider, {
        value: s,
        children: z.jsx(xae.Provider, {
          value: t,
          children: e
        })
      });
    };
    var bae = ({
      children: e
    }) => {
      0;
      const t = Y.useContext(vae);
      0;
      const n = Y.useContext(Zu);
      0;
      const s = Y.useContext(Cg);
      0;
      Y.useEffect(() => {
        const e = {
          focusController: n,
          inputController: s
        };
        t.attach(e);
        return () => t.detach(e);
      }, [t, s, n]);
      0;
      0;
      return z.jsx(Zu.Provider, {
        value: Ju,
        children: z.jsx(Cg.Provider, {
          value: jg,
          children: e
        })
      });
    };
    var Tae = ({
      enabled: e,
      children: t
    }) => {
      0;
      const n = Y.useContext(xae);
      0;
      const s = Y.useContext(Zu);
      0;
      const i = Y.useContext(Cg);
      0;
      0;
      return z.jsx(Zu.Provider, {
        value: e ? n.focusController : s,
        children: z.jsx(Cg.Provider, {
          value: e ? n.inputController : i,
          children: t
        })
      });
    };
    function Eae() {
      return wp(DO(sl(yO), sl(SO)));
    }
    function Iae() {
      return FO(sl(yO), sl(SO));
    }
    X.add("game-ui/game/components/radio/radio-context-override.tsx", {
      get RadioContextOverrideProvider() {
        return _ae;
      },
      set RadioContextOverrideProvider(e) {
        _ae = e;
      },
      get RadioContextRedirector() {
        return bae;
      },
      set RadioContextRedirector(e) {
        bae = e;
      },
      get RadioContextOverride() {
        return Tae;
      },
      set RadioContextOverride(e) {
        Tae = e;
      }
    });
    X.add("game-ui/common/hooks/use-simulation-date-time.tsx", {
      get useSimulationDateTime() {
        return Eae;
      },
      set useSimulationDateTime(e) {
        Eae = e;
      },
      get useSimulationMinutesSinceMidnight() {
        return Iae;
      },
      set useSimulationMinutesSinceMidnight(e) {
        Iae = e;
      }
    });
    let yae = {
      "progress-bar": "progress-bar_sYi progress-bar_xWR",
      progressBar: "progress-bar_sYi progress-bar_xWR",
      progress: "progress_y5v progress_JAQ"
    };
    X.add("game-ui/common/progress-bar/themes/light-progress-bar.module.scss", {
      get classes() {
        return yae;
      },
      set classes(e) {
        Object.assign(yae, e);
      }
    });
    let jae = {
      "station-detail": "station-detail_zWr",
      stationDetail: "station-detail_zWr",
      header: "header_gDJ",
      "station-name": "station-name_T0f",
      stationName: "station-name_T0f",
      "section-title": "section-title_lV4",
      sectionTitle: "section-title_lV4",
      list: "list_Kl3",
      "program-item": "program-item_KE_",
      programItem: "program-item_KE_",
      time: "time_A1a",
      column: "column_p_F",
      title: "title_nsV",
      description: "description_knq",
      progress: "progress_eLk"
    };
    X.add("game-ui/game/components/radio/radio-panel/station-detail/station-detail.module.scss", {
      get classes() {
        return jae;
      },
      set classes(e) {
        Object.assign(jae, e);
      }
    });
    const Nae = [];
    var wae = ({
      className: e
    }) => {
      const t = sl(UN);
      const n = sl(GN).find(e => e.name === t);
      const s = n?.schedule ?? Nae;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(jae.stationDetail, e),
        children: [z.jsxs("div", {
          className: jae.header,
          children: [z.jsx("div", {
            className: jae.stationName,
            children: n?.nameId ? (0, z.jsx)(Tc, {
              id: n.nameId
            }) : n?.name
          }), z.jsx("div", {
            className: jae.sectionTitle,
            children: z.jsx(Pc.Radio.PROGRAM_TITLE, {})
          })]
        }), z.jsx(ab, {
          className: jae.list,
          children: s.map((e, t) => (0, z.jsx)(Oae, {
            item: e
          }, t))
        })]
      });
    };
    const Oae = ({
      item: e
    }) => {
      const t = sl(VN);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(zq, {
        disabled: null == t,
        title: t?.title,
        description: t?.info,
        children: z.jsxs("div", {
          className: jae.programItem,
          children: [z.jsx("div", {
            className: jae.time,
            children: z.jsx(Nu, {
              value: MO(e.startTime)
            })
          }), z.jsxs("div", {
            className: jae.column,
            children: [z.jsx("div", {
              className: jae.title,
              children: e.name
            }), z.jsx("div", {
              className: jae.description,
              children: e.description
            }), e.active && (0, z.jsx)(Pae, {
              startTime: e.startTime,
              duration: e.duration
            })]
          })]
        })
      });
    };
    const Pae = ({
      startTime: e,
      duration: t
    }) => {
      const n = (Iae() - e + 1440) % 1440;
      0;
      return z.jsx(Ete, {
        progress: n,
        max: t,
        theme: yae,
        className: jae.progress
      });
    };
    X.add("game-ui/game/components/radio/radio-panel/station-detail/station-detail.tsx", {
      get StationDetail() {
        return wae;
      },
      set StationDetail(e) {
        wae = e;
      }
    });
    let Lae = {
      "stations-menu": "stations-menu_kAr",
      stationsMenu: "stations-menu_kAr",
      networks: "networks_SQ5",
      stations: "stations_mU1",
      "network-item": "network-item_tGo",
      networkItem: "network-item_tGo",
      "station-item": "station-item_cOt",
      stationItem: "station-item_cOt",
      icon: "icon_Yr0",
      column: "column_j5W",
      title: "title_Bsq",
      program: "program_xd2",
      progress: "progress_zBM",
      hint: "hint_kqJ",
      "hint-left": "hint-left_PV1",
      hintLeft: "hint-left_PV1",
      "hint-right": "hint-right_KvE",
      hintRight: "hint-right_KvE",
      "stations-hint": "stations-hint_x9S",
      stationsHint: "stations-hint_x9S"
    };
    X.add("game-ui/game/components/radio/radio-panel/stations-menu/stations-menu.module.scss", {
      get classes() {
        return Lae;
      },
      set classes(e) {
        Object.assign(Lae, e);
      }
    });
    var Mae = ({
      className: e
    }) => {
      const t = sl(FN);
      const n = sl(UN);
      const s = sl(BN);
      const i = sl(GN).filter(e => e.network === t);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Lae.stationsMenu, e),
        children: [z.jsx(aT, {
          uiTag: dT.value?.radioPanelNetworks,
          children: z.jsxs("div", {
            className: Lae.networks,
            children: [z.jsx(LT, {
              action: "Switch Radio Network",
              bindingIndex: 0,
              className: Qu()(Lae.hint, Lae.hintLeft)
            }), s.map(e => (0, z.jsx)(Rae, {
              item: e,
              selected: e.name === t,
              onSelect: ew
            }, e.name)), z.jsx(LT, {
              action: "Switch Radio Network",
              bindingIndex: 1,
              className: Qu()(Lae.hint, Lae.hintRight)
            })]
          })
        }), z.jsxs("div", {
          children: [z.jsx(LT, {
            action: "Switch Radio Station",
            className: Lae.stationsHint
          }), z.jsx(aT, {
            uiTag: dT.value?.radioPanelStations,
            children: z.jsx(ab, {
              className: Lae.stations,
              children: i.map(e => (0, z.jsx)(kae, {
                item: e,
                selected: e.name === n,
                onSelect: tw
              }, e.name))
            })
          })]
        })]
      });
    };
    const Rae = ({
      item: e,
      selected: t,
      onSelect: n
    }) => {
      0;
      const s = Y.useCallback(() => n(e.name), [n, e.name]);
      0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: z.jsx(Yq, {
          title: e.nameId ? (0, z.jsx)(Tc, {
            id: e.nameId
          }) : e.name,
          description: e.descriptionId ? (0, z.jsx)(Tc, {
            id: e.descriptionId
          }) : e.description
        }),
        children: z.jsx($_, {
          disableHint: true,
          src: e.icon,
          selected: t,
          selectSound: t ? null : op.selectRadioNetwork,
          className: Lae.networkItem,
          onSelect: t ? undefined : s
        })
      });
    };
    const kae = ({
      item: e,
      selected: t,
      onSelect: n
    }) => {
      0;
      const s = Y.useCallback(() => n(e.name), [n, e.name]);
      const i = Iae();
      const a = (i - (e.currentProgram?.startTime ?? i) + 1440) % 1440;
      const o = e.currentProgram?.duration ?? 0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(L_, {
        disableHint: true,
        selected: t,
        selectSound: op.selectRadioStation,
        className: Lae.stationItem,
        onSelect: t ? undefined : s,
        children: [z.jsx("img", {
          src: e.icon,
          className: Lae.icon
        }), z.jsxs("div", {
          className: Lae.column,
          children: [z.jsx("div", {
            className: Lae.title,
            children: e.nameId ? (0, z.jsx)(Tc, {
              id: e.nameId
            }) : e.name
          }), z.jsx("div", {
            className: Lae.program,
            children: e.currentProgram?.name
          }), z.jsx(Ete, {
            progress: a,
            max: o,
            theme: yae,
            className: Lae.progress
          })]
        })]
      });
    };
    X.add("game-ui/game/components/radio/radio-panel/stations-menu/stations-menu.tsx", {
      get StationsMenu() {
        return Mae;
      },
      set StationsMenu(e) {
        Mae = e;
      }
    });
    let Dae = {
      "radio-panel": "radio-panel_rXp",
      radioPanel: "radio-panel_rXp",
      enter: "enter_TNo",
      "exit-active": "exit-active_hJq",
      exitActive: "exit-active_hJq",
      "enter-active": "enter-active_cuF",
      enterActive: "enter-active_cuF",
      exit: "exit_B88",
      content: "content_r9x",
      "stations-menu": "stations-menu_m2f",
      stationsMenu: "stations-menu_m2f",
      "station-detail": "station-detail_KRp",
      stationDetail: "station-detail_KRp"
    };
    X.add("game-ui/game/components/radio/radio-panel/radio-panel.module.scss", {
      get classes() {
        return Dae;
      },
      set classes(e) {
        Object.assign(Dae, e);
      }
    });
    var Uae;
    var Bae = ({
      className: e,
      onClose: t
    }) => {
      rg(dT.value?.radioPanel);
      const n = sl(BN);
      const s = sl(FN);
      const i = sl(GN);
      0;
      const a = Y.useMemo(() => i.filter(e => e.network === s), [s, i]);
      const o = sl(UN);
      0;
      const r = Y.useMemo(() => ({
        "Switch Radio Network": n.length >= 2 ? e => {
          const t = n.findIndex(e => e.name === s);
          const i = e < 0 ? rw(t, n.length, true) : aw(t, n.length, true);
          if (null != i && i !== t) {
            ew(n[i].name);
            rp(op.selectRadioNetwork);
          }
        } : null,
        "Switch Radio Station": a.length >= 2 ? e => {
          const t = a.findIndex(e => e.name === o);
          const n = e < 0 ? aw(t, a.length, false) : rw(t, a.length, false);
          if (null != n && n !== t) {
            tw(a[n].name);
            rp(op.selectRadioStation);
          }
        } : null
      }), [n, s, o, a]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.radioPanel,
        children: z.jsx(ZT, {
          header: z.jsx(nE, {
            children: z.jsx(Pc.Radio.PANEL_TITLE, {})
          }),
          theme: i7,
          transitionSounds: lp,
          className: Qu()(Dae.radioPanel, e),
          contentClassName: Dae.content,
          onClose: t,
          children: z.jsx(Lg, {
            actions: r,
            children: z.jsxs(bae, {
              children: [z.jsx(Mae, {
                className: Dae.stationsMenu
              }), z.jsx(wae, {
                className: Dae.stationDetail
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/radio/radio-panel/radio-panel.tsx", {
      get RadioPanel() {
        return Bae;
      },
      set RadioPanel(e) {
        Bae = e;
      }
    });
    (function (e) {
      e[e.HourMonth = 0] = "HourMonth";
      e[e.Date = 1] = "Date";
      e[e.Year = 2] = "Year";
    })(Uae || (Uae = {}));
    class Gae extends na {
      static id = "simulationTime";
      static defaults = {
        timeSettings: {
          daysPerYear: 12,
          ticksPerDay: 131072,
          epochTicks: 0,
          epochYear: 0
        },
        ticks: {
          _scriptable: e => "timeFormat" !== e && "dateFormat" !== e,
          timeFormat: e => JSON.stringify(["hhmm", e.hour, e.minute]),
          dateFormat: e => JSON.stringify(["MMyy", e.month, e.year]),
          maxTicksLimit: 11
        }
      };
      constructor(e) {
        super(e);
        this._startValue = 0;
        this._valueRange = 0;
        this._tickFormat = Uae.HourMonth;
        this._majorTickInterval = 1;
        this._firstMajorTickValue = 0;
        this._tickInterval = 1;
        this._firstTickValue = 0;
      }
      determineDataLimits() {
        const {
          min: e,
          max: t
        } = this.getMinMax(true);
        this.min = isFinite(e) ? e : 0;
        this.max = isFinite(t) ? t : 0;
      }
      beforeBuildTicks() {
        super.beforeBuildTicks();
        const e = this.options.ticks.maxTicksLimit;
        const t = this.options.timeSettings;
        let n = 0;
        let s = (this.max - this.min) / t.ticksPerDay * 24;
        this._tickFormat = Uae.HourMonth;
        this._tickInterval = t.ticksPerDay / 24;
        this._majorTickInterval = t.ticksPerDay;
        if (s >= e) {
          s /= 3;
          this._tickInterval = t.ticksPerDay / 8;
        }
        if (s >= e) {
          s /= 2;
          this._tickInterval = t.ticksPerDay / 4;
        }
        if (s >= e) {
          s /= 2;
          this._tickInterval = t.ticksPerDay / 2;
        }
        if (s >= e) {
          s /= 2;
          this._tickFormat = Uae.Date;
          this._tickInterval = t.ticksPerDay;
        }
        if (s >= e) {
          s /= 3;
          this._tickInterval = 3 * t.ticksPerDay;
        }
        if (s >= e) {
          s /= 4;
          this._tickFormat = Uae.Year;
          this._tickInterval = t.daysPerYear * t.ticksPerDay;
        }
        if (s >= e) {
          let i = 1;
          do {
            s /= 5;
            i *= 5;
            this._tickInterval *= 5;
            if (s >= e) {
              s /= 2;
              i *= 2;
              this._tickInterval *= 2;
            }
          } while (s >= e && i < 1e3);
          n = (i - t.epochYear % i) % i * t.ticksPerDay * t.daysPerYear;
        }
        const i = t.epochTicks - n;
        const a = this.min + i;
        this._firstMajorTickValue = Math.ceil(a / this._majorTickInterval) * this._majorTickInterval - i;
        this._firstTickValue = Math.ceil(a / this._tickInterval) * this._tickInterval - i;
      }
      buildTicks() {
        const e = [];
        const t = this._tickInterval;
        for (let n = this._firstTickValue; n <= this.max; n += t) {
          const t = Math.abs((n - this._firstMajorTickValue) % this._majorTickInterval / this._majorTickInterval) < .001;
          e.push({
            value: n,
            major: t
          });
        }
        return e;
      }
      generateTickLabels(e) {
        let t;
        let n;
        let s;
        t = 0;
        for (n = e.length; t < n; t++) {
          s = e[t];
          s.label = this.generateTickLabel(s.value, s.major);
        }
      }
      generateTickLabel(e, t) {
        const n = DO(this.options.timeSettings, Math.ceil(e));
        return this._tickFormat === Uae.HourMonth ? t ? [this.options.ticks.timeFormat(n), this.options.ticks.dateFormat(n)] : this.options.ticks.timeFormat(n) : this._tickFormat === Uae.Date ? this.options.ticks.dateFormat(n) : n.year.toFixed(0);
      }
      configure() {
        super.configure();
        this._startValue = this.min;
        this._valueRange = this.max - this.min;
      }
      getPixelForValue(e) {
        return this.getPixelForDecimal((e - this._startValue) / this._valueRange);
      }
      getValueForPixel(e) {
        return this._startValue + this.getDecimalForPixel(e) * this._valueRange;
      }
    }
    function Vae() {
      wa.register(Gae);
    }
    X.add("game-ui/common/charts/simulation-time-scale.ts", {
      get registerSimulationTimeScale() {
        return Vae;
      },
      set registerSimulationTimeScale(e) {
        Vae = e;
      }
    });
    let Hae = {
      chartFontColor: "rgba(255, 255, 255, 0.6)",
      chartLineColor: "rgba(255, 255, 255, 0.1)",
      content: "content_nkU",
      legend: "legend_nMX",
      "legend-item": "legend-item_all",
      legendItem: "legend-item_all",
      graph: "graph_zE6",
      "time-scale": "time-scale_ShR",
      timeScale: "time-scale_ShR",
      "time-scale-label": "time-scale-label_VSV",
      timeScaleLabel: "time-scale-label_VSV",
      "time-scale-field": "time-scale-field_lEQ",
      timeScaleField: "time-scale-field_lEQ",
      "time-scale-title": "time-scale-title_Ow0",
      timeScaleTitle: "time-scale-title_Ow0",
      "action-icon": "action-icon_T6_",
      actionIcon: "action-icon_T6_",
      slider: "slider_mN3"
    };
    X.add("game-ui/game/components/statistics-panel/graph/statistics-graph.module.scss", {
      get classes() {
        return Hae;
      },
      set classes(e) {
        Object.assign(Hae, e);
      }
    });
    Vae();
    var Wae = ({
      data: e,
      selectedStatistics: t,
      timeScale: n,
      stepCount: s,
      onSetTimeScale: i,
      className: a
    }) => {
      const o = Kc(Oc.Money);
      const r = Kc(Oc.Integer);
      const l = sl(zw);
      const c = function (e, t = true, n) {
        const s = wu();
        const i = ju();
        const a = sl(Vw);
        const o = sl(SO);
        const r = sl(yO);
        const l = sl(Ml);
        const c = sl(Jw);
        const u = o - r.ticksPerDay / c * a;
        const d = o + r.ticksPerDay / 1440 + 1;
        0;
        return Y.useMemo(() => {
          const a = {
            layout: {
              padding: {
                top: 0,
                right: 50,
                bottom: 0,
                left: 25
              }
            },
            elements: {
              line: {
                fill: t,
                borderWidth: 3,
                tension: 0
              },
              point: {
                radius: 0
              }
            },
            scales: {
              x: {
                type: "simulationTime",
                min: u,
                max: d,
                grid: {
                  color: Hae.chartLineColor,
                  lineWidth: 1
                },
                border: {
                  color: Hae.chartLineColor,
                  width: 1
                },
                timeSettings: r,
                ticks: {
                  maxTicksLimit: 11,
                  font: {
                    size: 10 * l
                  },
                  color: Hae.chartFontColor,
                  padding: 10,
                  timeFormat: s,
                  dateFormat: i
                }
              },
              y: {
                beginAtZero: true,
                max: n,
                grid: {
                  color: Hae.chartLineColor,
                  lineWidth: 1
                },
                border: {
                  color: Hae.chartLineColor,
                  width: 1
                },
                ticks: {
                  font: {
                    size: 10 * l
                  },
                  maxTicksLimit: 10,
                  color: Hae.chartFontColor,
                  padding: 10,
                  autoSkip: false,
                  callback: function (t) {
                    return e ? e(t) : t;
                  }
                },
                stacked: t
              }
            }
          };
          return a;
        }, [t, u, d, r, l, s, i, n, e]);
      }(t.length > 0 && 1 === t[0].unitType ? o : r, l, t.length > 0 && 2 === t[0].unitType ? 100 : undefined);
      const u = function () {
        const e = sl(Vw);
        const t = sl(SO);
        const n = sl(Jw);
        const s = sl(yO);
        return {
          x: t - s.ticksPerDay / n * e,
          y: t + s.ticksPerDay / 1440 + 1
        };
      }();
      0;
      const d = Y.useMemo(() => ({
        ...e,
        datasets: e.datasets.map(e => {
          const t = e.data.map((e, t, n) => {
            if (0 === t) {
              const t = n.length > 1 && n[0].x < u.x ? function (e, t, n) {
                const s = e.x;
                const i = e.y;
                const a = t.x;
                const o = t.y;
                const r = i + (n - s) * (o - i) / (a - s);
                return {
                  x: n,
                  y: r
                };
              }(n[0], n[1], u.x) : null;
              return {
                x: t?.x ?? Math.max(e.x, u.x),
                y: t?.y ?? e.y
              };
            }
            return t === n.length - 1 ? {
              x: u.y,
              y: e.y
            } : e;
          });
          return {
            ...e,
            data: t
          };
        })
      }), [e, u.x, u.y]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(m2, {
        focusKey: Eg,
        theme: u2,
        className: Qu()(Hae.statisticsGraph, a),
        children: z.jsxs("div", {
          className: Hae.content,
          children: [z.jsx("div", {
            className: Hae.legend,
            children: t.map((e, t) => (0, z.jsx)(FR, {
              color: tN(e.color),
              label: (0, z.jsx)(Pc.StatisticsPanel.STAT_TITLE, {
                hash: e.key
              }),
              className: Hae.legendItem
            }, t))
          }), z.jsx(BR, {
            type: "line",
            data: d,
            options: c,
            className: Hae.graph
          }), z.jsx(aT, {
            uiTag: dT.value?.statisticsPanelTimeScale,
            children: z.jsxs("div", {
              className: Hae.timeScale,
              children: [z.jsx("div", {
                className: Hae.timeScaleTitle,
                children: z.jsx(Pc.StatisticsPanel.TIME_SCALE_TITLE, {})
              }), z.jsx(xW, {
                action: "Change Time Scale",
                hidden: 0 === s,
                children: z.jsx(GM, {
                  focusKey: Eg,
                  theme: DM,
                  className: Hae.slider,
                  start: 0,
                  end: 0 === s ? 1 : s,
                  value: n,
                  gamepadStep: 1,
                  disabled: 0 === s,
                  onChange: i,
                  valueTransformer: HM
                })
              }), z.jsx("div", {
                className: Hae.timeScaleLabel,
                children: z.jsx("div", {
                  className: Hae.timeScaleField,
                  children: z.jsx(Pc.StatisticsPanel.TIME_SCALE, {
                    index: n
                  })
                })
              })]
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/statistics-panel/graph/statistics-graph.tsx", {
      get StatisticsGraph() {
        return Wae;
      },
      set StatisticsGraph(e) {
        Wae = e;
      }
    });
    let $ae = {
      "foldout-item": "foldout-item_dah foldout-item_wOF",
      foldoutItem: "foldout-item_dah foldout-item_wOF",
      header: "header_MP_ header_8H_ item-mouse-states_Fmi item-focused_FuT",
      "disable-active-state": "disable-active-state_G7o disable-active-state_w8a",
      disableActiveState: "disable-active-state_G7o disable-active-state_w8a",
      "header-content": "header-content_SqG header-content_wUX",
      headerContent: "header-content_SqG header-content_wUX",
      icon: "icon_nAL undefined",
      toggle: "toggle_RV4 toggle_yQv"
    };
    X.add("game-ui/common/foldout/themes/statistics-item.module.scss", {
      get classes() {
        return $ae;
      },
      set classes(e) {
        Object.assign($ae, e);
      }
    });
    let Xae = {
      toggle: "toggle_GGm toggle_cca item-mouse-states_Fmi"
    };
    X.add("game-ui/game/components/statistics-panel/menu/item/statistics-checkbox.module.scss", {
      get classes() {
        return Xae;
      },
      set classes(e) {
        Object.assign(Xae, e);
      }
    });
    let Zae = {
      locked: "locked_XuG",
      label: "label_VRN",
      icon: "icon_xRc",
      hint: "hint_U4i"
    };
    X.add("game-ui/game/components/statistics-panel/menu/item/statistics-item.module.scss", {
      get classes() {
        return Zae;
      },
      set classes(e) {
        Object.assign(Zae, e);
      }
    });
    let eoe = {
      size: "size_DD8",
      toggle: "toggle_mte size_DD8 toggle_H7r item-mouse-states_Fmi"
    };
    X.add("game-ui/game/components/statistics-panel/menu/item/statistics-toggle.module.scss", {
      get classes() {
        return eoe;
      },
      set classes(e) {
        Object.assign(eoe, e);
      }
    });
    var noe = ({
      statItem: e,
      selectedStatistics: t,
      nesting: n = 0
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      const [a, o] = Y.useState(false);
      0;
      const r = Y.useCallback(() => i(true), []);
      0;
      const l = Y.useCallback(() => i(false), []);
      const c = ll(qw, e.entity);
      const u = sl(Kw);
      0;
      const d = Y.useMemo(() => function (e, t, n) {
        return e.isGroup || e.isSubgroup ? n.index === e.entity.index || undefined !== t.find(t => t.entity.index === e.entity.index) : undefined !== t.find(t => t.key === e.key) || undefined !== t.find(t => t.isSubgroup && t.entity.index === e.entity.index);
      }(e, t, u), [u, t, e]);
      0;
      const m = Y.useCallback(() => {
        if (d) {
          tO(e);
        } else {
          eO(e);
        }
      }, [d, e]);
      const h = ll(Zw, e.entity);
      0;
      const g = Y.useMemo(() => n + 1, [n]);
      0;
      const p = Y.useMemo(() => -1 !== t.findIndex(t => Ur(t.entity, e.entity)) || t.some(e => -1 !== c.findIndex(t => Ur(e.entity, t.entity))), [c, t, e.entity]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(by, {
        initialExpanded: p,
        type: (e.isGroup || e.isSubgroup) && c.length > 0 ? "Group" : "Item",
        className: Qu()(Zae.statisticsItem, e.locked && "locked", s && $ae.disableActiveState),
        theme: $ae,
        nesting: n,
        header: z.jsx(Q3, {
          locked: e.locked,
          requirements: h,
          direction: "right",
          children: z.jsxs(Ty, {
            onFocusChange: o,
            children: [z.jsx(LT, {
              action: "Select",
              active: a && !e.locked,
              className: Zae.hint
            }), e.locked ? (0, z.jsx)(kX, {
              className: eoe.size
            }) : e.isGroup ? (0, z.jsx)(P8, {
              theme: eoe,
              disabled: e.locked,
              onChange: m,
              onMouseOver: r,
              onMouseLeave: l,
              checked: d,
              focusKey: e.key,
              style: {
                borderColor: tN(e.color)
              },
              className: Zae.icon
            }) : (0, z.jsx)(kb, {
              theme: Xae,
              disabled: e.locked,
              onChange: m,
              onMouseOver: r,
              onMouseLeave: l,
              checked: d,
              focusKey: e.key,
              style: {
                borderColor: tN(e.color)
              },
              className: Zae.icon
            }), z.jsx("div", {
              className: Qu()(Zae.label, e.locked && Zae.locked),
              children: z.jsx(Pc.StatisticsPanel.STAT_TITLE, {
                hash: e.key
              })
            })]
          })
        }),
        children: (e.isGroup || e.isSubgroup) && c.length > 0 ? c.map(e => (0, z.jsx)(noe, {
          statItem: e,
          nesting: g,
          selectedStatistics: t
        }, e.key)) : undefined
      });
    };
    X.add("game-ui/game/components/statistics-panel/menu/item/statistics-item.tsx", {
      get StatisticsItem() {
        return noe;
      },
      set StatisticsItem(e) {
        noe = e;
      }
    });
    let soe = {
      "statistics-category-item": "statistics-category-item_qVI",
      statisticsCategoryItem: "statistics-category-item_qVI",
      items: "items_AIY",
      header: "header_Ld7"
    };
    X.add("game-ui/game/components/statistics-panel/menu/category/statistics-category-item.module.scss", {
      get classes() {
        return soe;
      },
      set classes(e) {
        Object.assign(soe, e);
      }
    });
    var aoe = ({
      category: e,
      selectedStatistics: t
    }) => {
      const n = ll(qw, e.entity);
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: soe.statisticsCategoryItem,
        children: [z.jsx("div", {
          className: soe.header,
          children: z.jsx(Pc.StatisticsPanel.STAT_TITLE, {
            hash: e.key
          })
        }), z.jsx("div", {
          className: soe.items,
          children: n.map(e => (0, z.jsx)(noe, {
            statItem: e,
            selectedStatistics: t
          }, e.key))
        })]
      });
    };
    X.add("game-ui/game/components/statistics-panel/menu/category/statistics-category-item.tsx", {
      get StatisticsCategory() {
        return aoe;
      },
      set StatisticsCategory(e) {
        aoe = e;
      }
    });
    let ooe = {
      "statistics-menu": "statistics-menu_y86",
      statisticsMenu: "statistics-menu_y86",
      content: "content_Q1O",
      scrollable: "scrollable_By7"
    };
    X.add("game-ui/game/components/statistics-panel/menu/statistics-menu.module.scss", {
      get classes() {
        return ooe;
      },
      set classes(e) {
        Object.assign(ooe, e);
      }
    });
    var loe = ({
      selectedStatistics: e
    }) => {
      const t = sl(Yw);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.statisticsPanelMenu,
        children: z.jsx(m2, {
          theme: u2,
          className: ooe.statisticsMenu,
          children: z.jsx(ab, {
            className: ooe.scrollable,
            children: z.jsx("div", {
              className: ooe.content,
              children: z.jsx(ep, {
                direction: Mg.Vertical,
                children: t.map(t => (0, z.jsx)(aoe, {
                  category: t,
                  selectedStatistics: e
                }, t.key))
              })
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/statistics-panel/menu/statistics-menu.tsx", {
      get StatisticsMenu() {
        return loe;
      },
      set StatisticsMenu(e) {
        loe = e;
      }
    });
    let coe = {
      "city-statistics-panel": "city-statistics-panel_ECW",
      cityStatisticsPanel: "city-statistics-panel_ECW",
      content: "content_BIL",
      graph: "graph_Qba"
    };
    X.add("game-ui/game/components/statistics-panel/statistics-panel.module.scss", {
      get classes() {
        return coe;
      },
      set classes(e) {
        Object.assign(coe, e);
      }
    });
    var doe = ({
      onClose: e
    }) => {
      rg(dT.value?.statisticsPanel);
      const t = sl(Qw);
      const n = sl(Xw);
      0;
      const s = Y.useMemo(() => ({
        datasets: n
      }), [n]);
      const i = sl(Jw);
      const a = sl(Hw);
      const o = sl(Vw);
      0;
      const r = Y.useMemo(() => function (e, t) {
        const n = e / t;
        const s = n / 12;
        return s > 1e3 ? 9 : s > 500 ? 8 : s > 100 ? 7 : s > 50 ? 6 : s > 10 ? 5 : s > 5 ? 4 : n > 12 ? 3 : n > 6 ? 2 : n > 1 ? 1 : 0;
      }(a, i), [a, i]);
      0;
      const l = Y.useMemo(() => function (e, t) {
        switch (e) {
          case t:
            return 0;
          case 6 * t:
            return 1;
          case 12 * t:
            return 2;
          case 60 * t:
            return 3;
          case 120 * t:
            return 4;
          case 600 * t:
            return 5;
          case 1200 * t:
            return 6;
          case 6e3 * t:
            return 7;
          case 12e3 * t:
            return 8;
          default:
            return 9;
        }
      }(o, i), [o, i]);
      0;
      const c = Y.useMemo(() => ({
        "Change Time Scale": r > 0 ? e => {
          rp(op.dragSlider);
          if (e < 0) {
            sO(moe(Math.max(0, l - 1), a, i));
          } else if (e > 0) {
            sO(moe(Math.min(r, l + 1), a, i));
          }
        } : null
      }), [a, r, l, i]);
      0;
      const u = Y.useCallback(e => {
        sO(moe(e, a, i));
      }, [a, i]);
      0;
      const d = Y.useCallback(() => {
        e();
      }, [e]);
      0;
      Y.useEffect(() => {
        if (0 === Qw.value.length) {
          const e = Yw.value;
          if (e.length > 0) {
            const t = qw.getValue(e[0].entity);
            if (t.length > 0) {
              eO(t[0]);
            }
          }
        }
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: c,
        children: z.jsxs(ZT, {
          transitionSounds: lp,
          header: z.jsx(nE, {
            children: z.jsx(Pc.Statistics.PANEL_TITLE, {})
          }),
          className: coe.cityStatisticsPanel,
          contentClassName: coe.content,
          onClose: d,
          children: [z.jsx(loe, {
            selectedStatistics: t
          }), z.jsx(aT, {
            uiTag: dT.value?.statisticsPanel,
            children: z.jsx(Wae, {
              data: s,
              selectedStatistics: t,
              timeScale: l,
              stepCount: r,
              onSetTimeScale: u,
              className: coe.graph
            })
          })]
        })
      });
    };
    function moe(e, t, n) {
      switch (e) {
        case 0:
          return n;
        case 1:
          return 6 * n;
        case 2:
          return 12 * n;
        case 3:
          return 60 * n;
        case 4:
          return 120 * n;
        case 5:
          return 600 * n;
        case 6:
          return 1200 * n;
        case 7:
          return 6e3 * n;
        case 8:
          return 12e3 * n;
        default:
          return t;
      }
    }
    function hoe(e) {
      switch (e) {
        case 0:
          return "Media/Game/Misc/ScheduleDay.svg";
        case 1:
          return "Media/Game/Misc/ScheduleNight.svg";
        default:
          return "Media/Game/Misc/ScheduleDayNight.svg";
      }
    }
    function goe(e) {
      0;
      const [t, n] = Y.useState();
      0;
      const [s, i] = Y.useState();
      const a = Ku(e.name);
      0;
      Y.useEffect(() => {
        if (null != e && t !== a) {
          n(a);
          i(a);
        }
      }, [e, t, a]);
      0;
      const o = Y.useCallback(e => i(e.target.value), []);
      0;
      const r = Y.useCallback(() => {
        if (null != e && s && "" !== s) {
          RL(e.lineData.entity, s);
        } else {
          i(t);
        }
      }, [e, t, s]);
      0;
      const l = Y.useCallback(() => i(t), [t]);
      return [s ?? "", o, r, l];
    }
    X.add("game-ui/game/components/statistics-panel/statistics-panel.tsx", {
      get StatisticsPanel() {
        return doe;
      },
      set StatisticsPanel(e) {
        doe = e;
      }
    });
    X.add("game-ui/game/components/transportation-overview-panel/lines-utils.ts", {
      get getScheduleIcon() {
        return hoe;
      },
      set getScheduleIcon(e) {
        hoe = e;
      },
      get useLineName() {
        return goe;
      },
      set useLineName(e) {
        goe = e;
      }
    });
    let poe = {
      "transportation-overview-page": "transportation-overview-page_NsJ",
      transportationOverviewPage: "transportation-overview-page_NsJ",
      types: "types_Mco",
      lines: "lines_iup",
      scrollable: "scrollable_lwl",
      "no-lines": "no-lines_xtM",
      noLines: "no-lines_xtM",
      header: "header_cSe",
      title: "title_kUy",
      "sort-indicator": "sort-indicator_ToO",
      sortIndicator: "sort-indicator_ToO",
      legends: "legends_mcP",
      button: "button_cuw item-mouse-states_Fmi item-focused_FuT icon-focused_FJS",
      icon: "icon_hDV",
      "button-label": "button-label_QnT",
      buttonLabel: "button-label_QnT",
      cell: "cell_geG",
      "cell-single": "cell-single_qTE cell_geG",
      cellSingle: "cell-single_qTE cell_geG",
      "cell-double": "cell-double_hmA cell_geG",
      cellDouble: "cell-double_hmA cell_geG",
      "cell-wide": "cell-wide_yZB cell_geG",
      cellWide: "cell-wide_yZB cell_geG",
      "align-left": "align-left_npF",
      alignLeft: "align-left_npF",
      "align-right": "align-right_jPL",
      alignRight: "align-right_jPL",
      hint: "hint_vhW"
    };
    X.add("game-ui/game/components/transportation-overview-panel/transportation-overview-page.module.scss", {
      get classes() {
        return poe;
      },
      set classes(e) {
        Object.assign(poe, e);
      }
    });
    let xoe = {
      input: "input_hDw",
      label: "label_NCg",
      container: "container_sRs"
    };
    X.add("game-ui/game/components/transportation-overview-panel/transport-line-item/text-input/text-input.module.scss", {
      get classes() {
        return xoe;
      },
      set classes(e) {
        Object.assign(xoe, e);
      }
    });
    let _oe = {
      "transportation-line-item": "transportation-line-item_ZFw",
      transportationLineItem: "transportation-line-item_ZFw",
      button: "button_PV4 item-mouse-states_Fmi item-focused_FuT",
      container: "container_G2A item-normal_Wb_ item-hover_WK8 item-focused_FuT",
      "color-field": "color-field_jwA",
      colorField: "color-field_jwA",
      eye: "eye_jyX",
      "schedule-button": "schedule-button_nz2",
      scheduleButton: "schedule-button_nz2",
      toggle: "toggle__VM",
      "toggle-off": "toggle-off_MTK",
      toggleOff: "toggle-off_MTK",
      "smaller-icon": "smaller-icon_f0S",
      smallerIcon: "smaller-icon_f0S",
      hint: "hint_AXQ"
    };
    X.add("game-ui/game/components/transportation-overview-panel/transport-line-item/transport-line-item.module.scss", {
      get classes() {
        return _oe;
      },
      set classes(e) {
        Object.assign(_oe, e);
      }
    });
    const Toe = new Tg("VIEW_INFO_KEY");
    const Eoe = new Tg("COLOR_KEY");
    var Ioe = ({
      focusKey: e,
      line: t
    }) => {
      const [n, s, i] = goe(t);
      0;
      const [a, o] = Y.useState(false);
      0;
      const [r, l] = Y.useState(Toe);
      0;
      const c = Y.useContext(lE);
      0;
      const u = Y.useCallback(() => ML(t.lineData.entity), [t]);
      0;
      const d = Y.useCallback(e => kL(t.lineData.entity, e), [t]);
      0;
      const m = Y.useCallback(() => DL(t.lineData.entity, !t.lineData.active), [t]);
      0;
      const h = Y.useCallback(() => {
        0;
        0;
        0;
        c.showDialog(z.jsx(LI, {
          title: z.jsx(Pc.Common.WARNING, {}),
          message: z.jsx(Pc.SelectedInfoPanel.CONFIRM_DELETE_WARNING, {}),
          onConfirm: u
        }));
      }, [c, u]);
      0;
      const g = Y.useCallback(() => {
        if (t.lineData.visible) {
          UL(t.lineData.entity, false);
        } else {
          FL(t.lineData.entity, false);
        }
      }, [t]);
      0;
      const p = Y.useCallback(() => {
        AL(t.lineData.entity);
      }, [t]);
      0;
      const f = Y.useCallback(e => {
        if (e !== a) {
          VL(t.lineData.entity);
        }
        o(e);
      }, [a, t.lineData.entity]);
      0;
      const x = Y.useCallback(() => {
        VL(t.lineData.entity);
      }, [t.lineData.entity]);
      0;
      const v = Y.useCallback(() => {
        l(Eoe);
      }, []);
      0;
      const _ = Y.useCallback(() => r, [r]);
      0;
      const b = Y.useCallback(() => {
        switch (t.lineData.schedule) {
          case 0:
            BL(t.lineData.entity, 1);
            break;
          case 1:
            BL(t.lineData.entity, 2);
            break;
          default:
            BL(t.lineData.entity, 0);
        }
      }, [t]);
      0;
      const T = Y.useMemo(() => t.lineData.isCargo ? "Route" : "Line", [t.lineData.isCargo]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: f,
        children: z.jsx("div", {
          className: _oe.transportationLineItem,
          children: z.jsx(Ep, {
            focusKey: e,
            onMouseEnter: x,
            onMouseLeave: x,
            className: _oe.container,
            children: z.jsxs(ep, {
              direction: Mg.Horizontal,
              initialFocused: r,
              onChange: l,
              onRefocus: _,
              children: [z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.Transport.TOOLTIP_DETAILS, {
                    hash: T
                  }),
                  children: z.jsx(yoe, {
                    tinted: true,
                    focusKey: Toe,
                    src: "Media/Glyphs/ViewInfo.svg",
                    onSelect: p,
                    className: Qu()(_oe.button, _oe.smallerIcon)
                  })
                })
              }), z.jsx("div", {
                className: poe.cellWide,
                children: z.jsx(pW, {
                  value: n,
                  onChange: s,
                  onBlur: i,
                  onClick: Ob,
                  theme: xoe,
                  vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                    hash: "LineName"
                  })
                })
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: z.jsx(Gc, {
                  value: t.lineData.length,
                  unit: Oc.Length
                })
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: t.lineData.stops
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: t.lineData.vehicles
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: t.lineData.isCargo ? (0, z.jsx)(Gc, {
                  value: t.lineData.cargo,
                  unit: Oc.Weight
                }) : t.lineData.cargo
              }), z.jsx("div", {
                className: Qu()(poe.cellDouble, poe.alignRight),
                children: z.jsx(Gc, {
                  value: 100 * t.lineData.usage,
                  unit: Oc.Percentage
                })
              }), z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.Transport.TOOLTIP_COLOR, {
                    hash: T
                  }),
                  children: z.jsx(IJ, {
                    value: t.lineData.color,
                    className: _oe.colorField,
                    onChange: d,
                    onClick: Ob,
                    onClosePicker: v
                  })
                })
              }), z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                    hash: t.lineData.active ? "Deactivate" : "Reactivate"
                  }),
                  children: z.jsx(yoe, {
                    tinted: true,
                    src: "Media/Glyphs/OnOff.svg",
                    className: Qu()(_oe.button, _oe.toggle, !t.lineData.active && _oe.toggleOff),
                    onSelect: m
                  })
                })
              }), z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.Transport.TOOLTIP_SCHEDULE, {
                    hash: T
                  }),
                  children: z.jsx(yoe, {
                    src: hoe(t.lineData.schedule),
                    onSelect: b,
                    className: Qu()(_oe.button, _oe.scheduleButton)
                  })
                })
              }), z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.Transport.TOOLTIP_VISIBLE, {
                    hash: T
                  }),
                  children: z.jsx(yoe, {
                    tinted: true,
                    src: t.lineData.visible ? "Media/Glyphs/EyeOpen.svg" : "Media/Glyphs/EyeClosed.svg",
                    onSelect: g,
                    className: Qu()(_oe.button, _oe.smallerIcon)
                  })
                })
              }), z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.Transport.TOOLTIP_DELETE, {
                    hash: T
                  }),
                  children: z.jsx(yoe, {
                    tinted: true,
                    src: "Media/Glyphs/Trash.svg",
                    onSelect: h,
                    className: _oe.button
                  })
                })
              })]
            })
          })
        })
      });
    };
    const yoe = ({
      focusKey: e,
      tinted: t = false,
      src: n,
      className: s,
      onSelect: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: o,
        children: z.jsx($_, {
          focusKey: e,
          disableHint: true,
          tinted: t,
          src: n,
          onSelect: i,
          className: Qu()(_oe.button, s),
          onClick: Ob,
          children: z.jsx(LT, {
            action: "Select",
            active: a,
            className: _oe.hint
          })
        })
      });
    };
    X.add("game-ui/game/components/transportation-overview-panel/transport-line-item/transport-line-item.tsx", {
      get TransportLineItem() {
        return Ioe;
      },
      set TransportLineItem(e) {
        Ioe = e;
      }
    });
    let Soe = {
      "transport-type-item": "transport-type-item__xs",
      transportTypeItem: "transport-type-item__xs",
      lock: "lock_GRv"
    };
    X.add("game-ui/game/components/transportation-overview-panel/transport-type-item/transport-type-item.module.scss", {
      get classes() {
        return Soe;
      },
      set classes(e) {
        Object.assign(Soe, e);
      }
    });
    var Coe = ({
      type: e,
      cargo: t,
      selected: n,
      focusKey: s,
      onSelect: i
    }) => {
      0;
      const a = Y.useCallback(() => i(e.id), [i, e]);
      0;
      0;
      return z.jsx(Q3, {
        title: t ? (0, z.jsx)(Pc.Transport.ROUTES, {
          hash: e.id
        }) : (0, z.jsx)(Pc.Transport.LINES, {
          hash: e.id
        }),
        locked: e.locked,
        requirements: e.requirements,
        direction: "right",
        children: z.jsx($_, {
          disableHint: true,
          focusKey: s,
          src: e.icon,
          selected: !e.locked && n,
          disabled: e.locked,
          theme: nae,
          className: Qu()(Soe.transportTypeItem, e.locked && nae.locked),
          onSelect: a,
          children: e.locked && (0, z.jsx)(kX, {
            className: Soe.lock
          })
        })
      });
    };
    X.add("game-ui/game/components/transportation-overview-panel/transport-type-item/transport-type-item.tsx", {
      get TransportTypeItem() {
        return Coe;
      },
      set TransportTypeItem(e) {
        Coe = e;
      }
    });
    const Noe = new Tg("HEADER_KEY");
    var woe;
    !function (e) {
      e[e.Name = 0] = "Name";
      e[e.Length = 1] = "Length";
      e[e.Stops = 2] = "Stops";
      e[e.Vehicles = 3] = "Vehicles";
      e[e.Cargo = 4] = "Cargo";
      e[e.Usage = 5] = "Usage";
    }(woe || (woe = {}));
    var Ooe = ({
      cargo: e,
      lines: t,
      types: n,
      selectedType: s,
      setSelectedType: i
    }) => {
      rg(dT.value?.transportationOverviewPanelLines);
      0;
      const [a, o] = Y.useState(woe.Name);
      0;
      const [r, l] = Y.useState(true);
      0;
      const c = Y.useCallback(e => {
        if ("string" == typeof e) {
          i(e);
        }
      }, [i]);
      0;
      const u = Y.useCallback(e => {
        i(e);
      }, [i]);
      0;
      const d = Y.useCallback(e => {
        l(e !== a || !r);
        o(e);
      }, [r, a]);
      const m = Wu();
      0;
      const h = Y.useMemo(() => function (e, t, n, s) {
        const i = WW({
          order: n ? "asc" : "desc"
        });
        switch (t) {
          case woe.Name:
            return e.sort((e, t) => i(s(e.name), s(t.name)));
          case woe.Length:
            return e.sort((e, t) => i(e.lineData.length, t.lineData.length));
          case woe.Stops:
            return e.sort((e, t) => i(e.lineData.stops, t.lineData.stops));
          case woe.Vehicles:
            return e.sort((e, t) => i(e.lineData.vehicles, t.lineData.vehicles));
          case woe.Cargo:
            return e.sort((e, t) => i(e.lineData.cargo, t.lineData.cargo));
          case woe.Usage:
            return e.sort((e, t) => i(e.lineData.usage, t.lineData.usage));
        }
      }(t, a, r, m), [r, t, m, a]);
      0;
      const [g, p] = Y.useState(h.some(e => e.lineData.visible) || 0 === h.length);
      0;
      const f = Y.useCallback(() => {
        for (let e = 0; e < h.length; e++) {
          const t = h[e];
          if (g) {
            UL(t.lineData.entity, false);
          } else {
            FL(t.lineData.entity, false);
          }
        }
        p(!g);
      }, [g, h]);
      0;
      Y.useEffect(() => {
        p(h.some(e => e.lineData.visible) || 0 === h.length);
      }, [h]);
      0;
      const x = Y.useCallback(() => h?.length > 0 ? Dr(h[0].lineData.entity) : null, [h]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ep, {
        direction: Mg.Horizontal,
        children: z.jsxs("div", {
          className: poe.transportationOverviewPage,
          children: [z.jsx(aT, {
            uiTag: dT.value?.transportationOverviewPanelTransportTypes,
            children: z.jsx(m2, {
              theme: u2,
              className: poe.types,
              children: z.jsx(Xg, {
                focused: s,
                onChange: c,
                onRefocus: Qg,
                children: z.jsx(ab, {
                  children: n.map(t => (0, z.jsx)(Coe, {
                    type: t,
                    cargo: e,
                    focusKey: t.id,
                    selected: t.id === s,
                    onSelect: u
                  }, t.id))
                })
              })
            })
          }), z.jsx(aT, {
            uiTag: dT.value?.transportationOverviewPanelLines,
            children: z.jsx(m2, {
              focusKey: h.length > 0 ? Ig : Eg,
              theme: u2,
              className: poe.lines,
              initialFocused: h?.length > 0 ? Dr(h[0].lineData.entity) : Noe,
              onRefocus: x,
              header: z.jsx(Poe, {
                focusKey: h.length > 0 ? Noe : Eg,
                type: s,
                cargo: e,
                sortBy: a,
                ascending: r,
                someVisible: g,
                onSort: d,
                toggleVisibility: f
              }),
              children: z.jsx(ab, {
                className: poe.scrollable,
                children: h.length > 0 ? h.map(e => (0, z.jsx)(Ioe, {
                  focusKey: Dr(e.lineData.entity),
                  line: e
                }, Dr(e.lineData.entity))) : (0, z.jsx)("div", {
                  className: poe.noLines,
                  children: e ? (0, z.jsx)(Pc.Transport.NO_ROUTES, {}) : (0, z.jsx)(Pc.Transport.NO_LINES, {})
                })
              })
            })
          })]
        })
      });
    };
    const Poe = ({
      type: e,
      cargo: t,
      sortBy: n,
      ascending: s,
      someVisible: i,
      focusKey: a,
      onSort: o,
      toggleVisibility: r
    }) => {
      0;
      const l = Y.useCallback(() => {
        o(woe.Name);
      }, [o]);
      0;
      const c = Y.useCallback(() => {
        o(woe.Stops);
      }, [o]);
      0;
      const u = Y.useCallback(() => {
        o(woe.Vehicles);
      }, [o]);
      0;
      const d = Y.useCallback(() => {
        o(woe.Cargo);
      }, [o]);
      0;
      const m = Y.useCallback(() => {
        o(woe.Usage);
      }, [o]);
      0;
      const h = Y.useCallback(() => {
        o(woe.Length);
      }, [o]);
      0;
      const g = z.jsx(W_, {
        className: poe.sortIndicator,
        src: `Media/Glyphs/ThickStrokeArrow${s ? "Down" : "Up"}.svg`
      });
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ep, {
        focusKey: a,
        className: poe.header,
        children: z.jsxs(ep, {
          direction: Mg.Horizontal,
          children: [z.jsx("div", {
            className: poe.title,
            children: t ? (0, z.jsx)(Pc.Transport.ROUTES, {
              hash: e
            }) : (0, z.jsx)(Pc.Transport.LINES, {
              hash: e
            })
          }), z.jsx(aT, {
            uiTag: dT.value?.transportationOverviewPanelLegend,
            children: z.jsxs("div", {
              className: poe.legends,
              children: [z.jsx("div", {
                className: poe.cellSingle
              }), z.jsx("div", {
                className: Qu()(poe.cellWide, poe.alignLeft),
                children: z.jsxs(Loe, {
                  onSelect: l,
                  className: poe.button,
                  children: [z.jsx("div", {
                    className: poe.buttonLabel,
                    children: z.jsx(Pc.Transport.LEGEND_NAME, {})
                  }), n === woe.Name && g]
                })
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: z.jsxs(Loe, {
                  onSelect: h,
                  className: poe.button,
                  children: [z.jsx("div", {
                    className: poe.buttonLabel,
                    children: z.jsx(Pc.Transport.LEGEND_LENGTH, {})
                  }), n === woe.Length && g]
                })
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: z.jsxs(Loe, {
                  onSelect: c,
                  className: poe.button,
                  children: [z.jsx("div", {
                    className: poe.buttonLabel,
                    children: z.jsx(Pc.Transport.LEGEND_STOPS, {
                      hash: e
                    })
                  }), n === woe.Stops && g]
                })
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: z.jsxs(Loe, {
                  onSelect: u,
                  className: poe.button,
                  children: [z.jsx("div", {
                    className: poe.buttonLabel,
                    children: z.jsx(Pc.Transport.LEGEND_VEHICLES, {
                      hash: e
                    })
                  }), n === woe.Vehicles && g]
                })
              }), z.jsx("div", {
                className: poe.cellDouble,
                children: z.jsxs(Loe, {
                  onSelect: d,
                  className: poe.button,
                  children: [z.jsx("div", {
                    className: poe.buttonLabel,
                    children: t ? (0, z.jsx)(Pc.Transport.LEGEND_CARGO, {}) : (0, z.jsx)(Pc.Transport.LEGEND_PASSENGERS, {
                      hash: e
                    })
                  }), n === woe.Cargo && g]
                })
              }), z.jsx("div", {
                className: Qu()(poe.cellDouble, poe.alignRight),
                children: z.jsxs(Loe, {
                  onSelect: m,
                  className: poe.button,
                  children: [z.jsx("div", {
                    className: poe.buttonLabel,
                    children: z.jsx(Pc.Transport.LEGEND_USAGE, {})
                  }), n === woe.Usage && g]
                })
              }), z.jsx("div", {
                className: poe.cellSingle
              }), z.jsx("div", {
                className: poe.cellSingle
              }), z.jsx("div", {
                className: poe.cellSingle
              }), z.jsx("div", {
                className: poe.cellSingle,
                children: z.jsx(bg, {
                  tooltip: z.jsx(Pc.Transport.TOOLTIP_VISIBLE, {
                    hash: t ? "Route" : "Line"
                  }),
                  children: z.jsx(Loe, {
                    onSelect: r,
                    className: poe.button,
                    children: z.jsx(W_, {
                      src: i ? "Media/Glyphs/EyeOpen.svg" : "Media/Glyphs/EyeClosed.svg",
                      className: poe.icon
                    })
                  })
                })
              }), z.jsx("div", {
                className: poe.cellSingle
              })]
            })
          })]
        })
      });
    };
    const Loe = ({
      children: e,
      className: t,
      onSelect: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: i,
        children: z.jsxs(L_, {
          disableHint: true,
          onSelect: n,
          className: Qu()(poe.button, t),
          onClick: Ob,
          children: [z.jsx(LT, {
            action: "Select",
            active: s,
            className: poe.hint
          }), e]
        })
      });
    };
    X.add("game-ui/game/components/transportation-overview-panel/transportation-overview-page.tsx", {
      get TransportationOverviewPage() {
        return Ooe;
      },
      set TransportationOverviewPage(e) {
        Ooe = e;
      }
    });
    let Aoe = {
      "transportation-overview-panel": "transportation-overview-panel_VlO",
      transportationOverviewPanel: "transportation-overview-panel_VlO"
    };
    X.add("game-ui/game/components/transportation-overview-panel/transportation-overview-panel.module.scss", {
      get classes() {
        return Aoe;
      },
      set classes(e) {
        Object.assign(Aoe, e);
      }
    });
    const Roe = [Wv.PublicTransport, Wv.Cargo];
    var koe = ({
      selectedTab: e,
      onSelectTab: t,
      onClose: n
    }) => {
      rg(dT.value?.transportationOverviewPanel);
      const s = sl(NL);
      const i = sl(wL);
      const a = sl(OL);
      const o = sl(PL);
      const r = sl(LL);
      0;
      const l = Y.useMemo(() => e === Wv.Cargo ? i : s, [e, i, s]);
      0;
      const c = Y.useMemo(() => e === Wv.Cargo ? r : o, [r, e, o]);
      0;
      const u = Y.useMemo(() => e === Wv.Cargo ? a.filter(e => e.lineData?.isCargo).filter(e => e.lineData?.type === r) : a.filter(e => !e.lineData?.isCargo).filter(e => e.lineData?.type === o), [r, e, o, a]);
      0;
      const d = Y.useCallback(() => {
        n();
        GL();
      }, [n]);
      const m = KC("Cargo Transport");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.transportationOverviewPanel,
        children: z.jsx(ZT, {
          header: z.jsxs(z.Fragment, {
            children: [z.jsx(nE, {
              children: z.jsx(Pc.Transport.LINES_OVERVIEW_TITLE, {})
            }), z.jsxs(BX, {
              children: [z.jsx(GX, {
                uiTag: dT.value?.transportationOverviewPanelTabPublicTransport,
                id: Wv.PublicTransport,
                selectedId: e,
                onSelect: t,
                children: z.jsx(Pc.Transport.TAB, {
                  hash: Wv[Wv.PublicTransport]
                })
              }), z.jsx(Q3, {
                locked: m.locked,
                requirements: m.requirements,
                children: z.jsx(GX, {
                  uiTag: dT.value?.transportationOverviewPanelTabCargo,
                  disabled: m.locked,
                  locked: m.locked,
                  id: Wv.Cargo,
                  selectedId: e,
                  onSelect: t,
                  children: z.jsx(Pc.Transport.TAB, {
                    hash: Wv[Wv.Cargo]
                  })
                })
              })]
            })]
          }),
          className: Aoe.transportationOverviewPanel,
          transitionSounds: lp,
          onClose: d,
          children: z.jsx(UX, {
            tabs: Roe,
            selectedTab: e,
            onSelect: t,
            children: z.jsx(Ooe, {
              lines: u,
              types: l,
              selectedType: c,
              setSelectedType: e === Wv.Cargo ? KL : HL,
              cargo: e === Wv.Cargo
            }, e)
          })
        })
      });
    };
    X.add("game-ui/game/components/transportation-overview-panel/transportation-overview-panel.tsx", {
      get TransportationOverviewPanel() {
        return koe;
      },
      set TransportationOverviewPanel(e) {
        koe = e;
      }
    });
    let Doe = {
      "game-main-screen": "game-main-screen_TRK child-opacity-transition_nkS",
      gameMainScreen: "game-main-screen_TRK child-opacity-transition_nkS",
      "main-container": "main-container__E2",
      mainContainer: "main-container__E2",
      "main-column": "main-column_g42",
      mainColumn: "main-column_g42",
      "action-hints": "action-hints_sBV",
      actionHints: "action-hints_sBV",
      "center-panel-layout": "center-panel-layout_X2p",
      centerPanelLayout: "center-panel-layout_X2p",
      "info-menu-layout": "info-menu-layout_E8i",
      infoMenuLayout: "info-menu-layout_E8i",
      "top-layout": "top-layout_QtO",
      topLayout: "top-layout_QtO",
      "info-layout": "info-layout_BVk",
      infoLayout: "info-layout_BVk",
      "tool-options-visible": "tool-options-visible_EaE",
      toolOptionsVisible: "tool-options-visible_EaE",
      "infoview-menu": "infoview-menu_VQI",
      infoviewMenu: "infoview-menu_VQI",
      "selected-info-panel": "selected-info-panel_iIe",
      selectedInfoPanel: "selected-info-panel_iIe",
      "tool-layout": "tool-layout_SqM",
      toolLayout: "tool-layout_SqM",
      "tool-side-column": "tool-side-column_l9i",
      toolSideColumn: "tool-side-column_l9i",
      "tool-main-column": "tool-main-column_PaC",
      toolMainColumn: "tool-main-column_PaC",
      "tool-panel": "tool-panel_V_j",
      toolPanel: "tool-panel_V_j",
      "social-panel-layout": "social-panel-layout_JFt",
      socialPanelLayout: "social-panel-layout_JFt",
      "emergency-mode": "emergency-mode_zZ8",
      emergencyMode: "emergency-mode_zZ8",
      "photo-mode-panel-layout": "photo-mode-panel-layout_poh",
      photoModePanelLayout: "photo-mode-panel-layout_poh",
      "radio-panel": "radio-panel_otL",
      radioPanel: "radio-panel_otL",
      "bp-indicator": "bp-indicator_dvA",
      bpIndicator: "bp-indicator_dvA",
      "pause-menu-layout": "pause-menu-layout_eGE",
      pauseMenuLayout: "pause-menu-layout_eGE",
      horizontal: "horizontal_xPW",
      vertical: "vertical_txi",
      "pause-menu-toggle": "pause-menu-toggle_ewR",
      pauseMenuToggle: "pause-menu-toggle_ewR",
      hint: "hint_d21",
      "pause-overlay": "pause-overlay_rOw",
      pauseOverlay: "pause-overlay_rOw",
      paused: "paused_kMX"
    };
    X.add("game-ui/game/components/game-main-screen.module.scss", {
      get classes() {
        return Doe;
      },
      set classes(e) {
        Object.assign(Doe, e);
      }
    });
    var Uoe = {
      [Pv.InfoviewMenu]: ({
        onClose: e
      }) => (0, z.jsx)("div", {
        className: Doe.infoLayout,
        children: (0, z.jsx)(Q4, {
          className: Doe.infoviewMenu,
          onClose: e
        })
      }),
      [Pv.Progression]: ({
        selectedTab: e,
        onClose: t
      }) => (0, z.jsx)("div", {
        className: Doe.centerPanelLayout,
        children: (0, z.jsx)(hae, {
          selectedTab: e,
          onSelectTab: Vv,
          onClose: t
        })
      }),
      [Pv.Economy]: ({
        selectedTab: e,
        onClose: t
      }) => (0, z.jsx)("div", {
        className: Doe.centerPanelLayout,
        children: (0, z.jsx)(Kne, {
          selectedTab: e,
          onSelectTab: Kv,
          onClose: t
        })
      }),
      [Pv.CityInfo]: ({
        selectedTab: e,
        onClose: t
      }) => (0, z.jsx)("div", {
        className: Doe.centerPanelLayout,
        children: (0, z.jsx)(lee, {
          selectedTab: e,
          onSelectTab: zv,
          onClose: t
        })
      }),
      [Pv.Statistics]: ({
        onClose: e
      }) => (0, z.jsx)("div", {
        className: Doe.centerPanelLayout,
        children: (0, z.jsx)(doe, {
          onClose: e
        })
      }),
      [Pv.TransportationOverview]: ({
        selectedTab: e,
        onClose: t
      }) => (0, z.jsx)("div", {
        className: Doe.centerPanelLayout,
        children: (0, z.jsx)(koe, {
          selectedTab: e,
          onSelectTab: Yv,
          onClose: t
        })
      }),
      [Pv.Chirper]: ({
        onClose: e
      }) => (0, z.jsx)(Goe, {
        children: (0, z.jsx)(y7, {
          onClose: e
        })
      }),
      [Pv.LifePath]: ({
        selectedEntity: e,
        onClose: t
      }) => (0, z.jsx)(Goe, {
        children: (0, z.jsx)(Tse, {
          selectedCitizen: e,
          onClose: t
        })
      }),
      [Pv.Journal]: ({
        onClose: e
      }) => (0, z.jsx)(Goe, {
        children: (0, z.jsx)(Jne, {
          onClose: e
        })
      }),
      [Pv.Radio]: ({
        onClose: e
      }) => (0, z.jsx)(Bae, {
        className: Doe.radioPanel,
        onClose: e
      }),
      [Pv.PhotoMode]: ({
        onClose: e
      }) => (0, z.jsx)(Voe, {
        children: (0, z.jsx)(c5, {
          onClose: e
        })
      }),
      [Pv.Notifications]: ({
        onClose: e
      }) => (0, z.jsx)(Goe, {
        children: (0, z.jsx)(Bse, {
          onClose: e
        })
      })
    };
    var Boe = ({
      panel: e
    }) => {
      0;
      const t = Y.useCallback(() => Fv(e.__Type), [e.__Type]);
      0;
      return z.jsx(rM, {
        components: Uoe,
        data: e,
        props: {
          onClose: t
        }
      });
    };
    var Goe = ({
      children: e
    }) => {
      const t = sl(RN);
      0;
      return z.jsx("div", {
        className: Qu()(Doe.socialPanelLayout, t && Doe.emergencyMode),
        children: e
      });
    };
    var Voe = ({
      children: e
    }) => (0, z.jsx)("div", {
      className: Qu()(Doe.photoModePanelLayout),
      children: e
    });
    X.add("game-ui/game/components/game-panel-renderer.tsx", {
      get gamePanelComponents() {
        return Uoe;
      },
      set gamePanelComponents(e) {
        Uoe = e;
      },
      get GamePanelRenderer() {
        return Boe;
      },
      set GamePanelRenderer(e) {
        Boe = e;
      },
      get SocialPanelLayout() {
        return Goe;
      },
      set SocialPanelLayout(e) {
        Goe = e;
      },
      get PhotoModePanelLayout() {
        return Voe;
      },
      set PhotoModePanelLayout(e) {
        Voe = e;
      }
    });
    let Hoe = {
      "infoview-menu-toggle": "infoview-menu-toggle_bYF",
      infoviewMenuToggle: "infoview-menu-toggle_bYF",
      "mini-panel-visible": "mini-panel-visible_mDg",
      miniPanelVisible: "mini-panel-visible_mDg",
      button: "button_H9N",
      "active-infoview": "active-infoview_J2h",
      activeInfoview: "active-infoview_J2h",
      exit: "exit_Oop",
      "enter-active": "enter-active_Wti",
      enterActive: "enter-active_Wti",
      enter: "enter_zBP",
      "exit-active": "exit-active__MZ",
      exitActive: "exit-active__MZ",
      label: "label_UhV",
      "close-button": "close-button_TMO",
      closeButton: "close-button_TMO",
      lock: "lock_Mbc",
      hint: "hint_oTi"
    };
    X.add("game-ui/game/components/infoviews/infoview-menu-toggle/infoview-menu-toggle.module.scss", {
      get classes() {
        return Hoe;
      },
      set classes(e) {
        Object.assign(Hoe, e);
      }
    });
    var Woe = ({
      miniPanelVisible: e,
      className: t
    }) => {
      const n = S5(Pv.InfoviewMenu).visible;
      0;
      return z.jsx(zoe, {
        miniPanelVisible: e,
        className: t,
        visible: n
      });
    };
    0;
    const zoe = Y.memo(function ({
      miniPanelVisible: e,
      className: t,
      visible: n
    }) {
      const s = sl(Zp);
      const i = KC("Infoviews");
      const a = km();
      const o = sl(Ul);
      0;
      const r = Y.useCallback(() => {
        if (!n && dT.value?.infoviewsButton) {
          ig(dT.value.infoviewsButton);
        }
        if (s && !n) {
          tf();
        } else {
          Bv();
        }
      }, [s, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Hoe.infoviewMenuToggle, e && Hoe.miniPanelVisible, t),
        children: [z.jsx(cd, {
          children: null != s && e && (0, z.jsx)(dh, {
            styles: Hoe,
            children: (0, z.jsxs)("div", {
              className: Hoe.activeInfoview,
              children: [(0, z.jsx)("div", {
                className: Hoe.label,
                children: (0, z.jsx)(Pc.Infoviews.INFOVIEW, {
                  hash: s.id
                })
              }), !a && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Infoviews.CLOSE_INFO_VIEW, {}),
                children: (0, z.jsx)($_, {
                  disableHint: true,
                  tinted: true,
                  src: "Media/Glyphs/Close.svg",
                  theme: q_,
                  className: Hoe.closeButton,
                  onSelect: tf
                })
              })]
            })
          })
        }), z.jsx(aT, {
          uiTag: dT.value?.infoviewsButton,
          children: z.jsx(Q3, {
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_INFO_VIEWS, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_INFO_VIEWS, {}),
            shortcut: z.jsx(AT, {
              action: "Info View",
              active: o
            }),
            requirements: i.requirements,
            locked: i.locked,
            children: z.jsx(h6, {
              src: "Media/Glyphs/Info.svg",
              className: Hoe.button,
              selected: n,
              onSelect: r,
              disabled: i.locked,
              children: i.locked && (0, z.jsx)(kX, {
                className: Hoe.lock
              })
            })
          })
        }), z.jsx(LT, {
          action: "Info View",
          className: Hoe.hint
        })]
      });
    });
    X.add("game-ui/game/components/infoviews/infoview-menu-toggle/infoview-menu-toggle.tsx", {
      get InfoviewMenuToggle() {
        return Woe;
      },
      set InfoviewMenuToggle(e) {
        Woe = e;
      }
    });
    let Yoe = {
      field: "field_eZ6",
      header: "header_oa2",
      icon: "icon_t1n",
      label: "label_pzR",
      content: "content_DHv",
      error: "error_XxO"
    };
    X.add("game-ui/game/components/map-tile-purchase-panel/map-tile-purchase-field.module.scss", {
      get classes() {
        return Yoe;
      },
      set classes(e) {
        Object.assign(Yoe, e);
      }
    });
    let qoe = {
      "map-tile-purchase-panel": "map-tile-purchase-panel_RTg",
      mapTilePurchasePanel: "map-tile-purchase-panel_RTg",
      section: "section_JVp",
      resources: "resources_F7B",
      "resource-item": "resource-item_xdp",
      resourceItem: "resource-item_xdp",
      "resource-icon": "resource-icon_sHE",
      resourceIcon: "resource-icon_sHE",
      "resource-title": "resource-title_UvF",
      resourceTitle: "resource-title_UvF",
      purchase: "purchase_qTi",
      "purchase-summary": "purchase-summary_OYA",
      purchaseSummary: "purchase-summary_OYA",
      button: "button_adT",
      problems: "problems_b5X",
      problem: "problem_d8F",
      "cost-icon": "cost-icon_Tn1",
      costIcon: "cost-icon_Tn1",
      "cost-icon-disabled": "cost-icon-disabled_Dzu",
      costIconDisabled: "cost-icon-disabled_Dzu",
      label: "label_ASS",
      field: "field_z8Y",
      "floating-hint": "floating-hint_X9C",
      floatingHint: "floating-hint_X9C"
    };
    X.add("game-ui/game/components/map-tile-purchase-panel/map-tile-purchase-panel.module.scss", {
      get classes() {
        return qoe;
      },
      set classes(e) {
        Object.assign(qoe, e);
      }
    });
    const Qoe = {
      enter: op.mapTilePurchaseMode,
      exit: op.mapTilePurchaseModeEnd
    };
    var Zoe = ({
      focusKey: e,
      className: t,
      onClose: n
    }) => {
      ag(dT.value?.mapTilePanel);
      const s = sl(Vj);
      const i = sl(Hj);
      const a = sl(Kj);
      const o = sl(Yj);
      const r = o === Uj.None;
      const l = 0 == (o & (Uj.NoAvailable | Uj.NoCurrentlyAvailable));
      0;
      const c = Y.useMemo(() => ({
        "Purchase Map Tile": l && r ? () => {
          rp(op.purchase);
          Zj();
          if (dT.value?.mapTilePanelPurchase) {
            ig(dT.value?.mapTilePanelPurchase);
          }
        } : null
      }), [r, l]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: c,
        children: z.jsx(aT, {
          uiTag: dT.value?.mapTilePanel,
          children: z.jsxs(ZT, {
            focusKey: e,
            className: Qu()(qoe.mapTilePurchasePanel, t),
            header: z.jsx(nE, {
              children: z.jsx(Pc.MapTilePurchase.TITLE, {})
            }),
            transitionSounds: Qoe,
            backActionOverride: "Leave Map Tile View",
            onClose: n,
            hintClassName: qoe.floatingHint,
            showCloseHint: "Leave Map Tile View",
            unfocusedHintAction: "Leave Map Tile View",
            children: [l && (0, z.jsx)(aT, {
              uiTag: dT.value?.mapTilePanelResources,
              children: (0, z.jsx)("div", {
                className: Qu()(qoe.section, qoe.resources),
                children: [s, i, ...a].map(e => (0, z.jsx)(Joe, {
                  resource: e
                }, e.id))
              })
            }), z.jsx(ere, {
              purchasePosible: l,
              purchaseEnabled: r
            })]
          })
        })
      });
    };
    const Joe = ({
      resource: e
    }) => (0, z.jsx)(zq, {
      title: (0, z.jsx)(Pc.MapTilePurchase.TOOLTIP_TITLE_RESOURCE, {
        hash: e.id
      }),
      description: (0, z.jsx)(Pc.MapTilePurchase.TOOLTIP_RESOURCE, {
        hash: e.id
      }),
      children: (0, z.jsxs)("div", {
        className: qoe.resourceItem,
        children: [(0, z.jsxs)("div", {
          className: qoe.resourceTitle,
          children: [(0, z.jsx)("img", {
            src: e.icon,
            className: qoe.resourceIcon
          }), (0, z.jsx)(Pc.MapTilePurchase.RESOURCE, {
            hash: e.id
          })]
        }), (0, z.jsx)("div", {
          className: qoe.resourceValue,
          children: (0, z.jsx)(Gc, {
            value: e.value,
            unit: e.unit
          })
        })]
      })
    });
    const ere = ({
      purchasePosible: e,
      purchaseEnabled: t
    }) => {
      0;
      const n = Y.useCallback(() => {
        Zj();
        if (dT.value?.mapTilePanelPurchase) {
          ig(dT.value?.mapTilePanelPurchase);
        }
      }, []);
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(r2, {
          className: Qu()(qoe.section, qoe.purchase),
          children: [z.jsx(r2, {
            className: qoe.purchaseSummary,
            children: z.jsx(tre, {})
          }), e && (0, z.jsx)(o2, {
            children: (0, z.jsx)(aT, {
              uiTag: dT.value?.mapTilePanelPurchase,
              children: (0, z.jsx)(bg, {
                tooltip: sre(Yj.value),
                children: (0, z.jsx)(L_, {
                  focusKey: Eg,
                  theme: FI,
                  selectSound: op.purchase,
                  className: qoe.button,
                  disabled: !t,
                  onSelect: n,
                  hintAction: "Purchase Map Tile",
                  forceHint: t,
                  children: (0, z.jsx)(Pc.MapTilePurchase.PURCHASE_STATUS, {
                    hash: Uj[Uj.None]
                  })
                })
              })
            })
          })]
        }), 0 != (Yj.value & (Uj.InsufficientFunds | Uj.InsufficientPermits)) && (0, z.jsx)("div", {
          className: qoe.problems,
          children: nre(Yj.value)
        })]
      });
    };
    const tre = () => {
      const e = sl($j);
      const t = sl(qj);
      const n = sl(Wj);
      const s = sl(zj);
      return 0 != (Yj.value & Uj.NoSelection) ? nre(Uj.NoSelection) || null : 0 != (Yj.value & Uj.NoAvailable) ? nre(Uj.NoAvailable) || null : 0 != (Yj.value & Uj.NoCurrentlyAvailable) ? nre(Uj.NoCurrentlyAvailable) || null : (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)(z6, {
          theme: Yoe,
          label: (0, z.jsx)(Pc.MapTilePurchase.PERMITS_USED, {}),
          icon: "Media/Game/Icons/ExpansionPermit.svg",
          className: Qu()(qoe.field, 0 != (Yj.value & Uj.InsufficientPermits) && Yoe.error),
          children: (0, z.jsx)(cu, {
            value: t,
            total: e
          })
        }), (0, z.jsx)(z6, {
          theme: Yoe,
          label: (0, z.jsx)(Pc.MapTilePurchase.TILE_UPKEEP, {}),
          icon: "Media/Game/Icons/MapTile.svg",
          className: Qu()(qoe.field, 0 != (Yj.value & Uj.InsufficientFunds) && Yoe.error),
          children: (0, z.jsx)(Gc, {
            value: s,
            unit: Oc.MoneyPerMonth
          })
        }), (0, z.jsx)(z6, {
          theme: Yoe,
          label: (0, z.jsx)(Pc.MapTilePurchase.COST, {}),
          icon: "Media/Game/Icons/Money.svg",
          className: Qu()(qoe.field, 0 != (Yj.value & Uj.InsufficientFunds) && Yoe.error),
          children: (0, z.jsx)(Gc, {
            value: n,
            unit: Oc.Money
          })
        })]
      });
    };
    function nre(e) {
      return e === (Uj.InsufficientPermits | Uj.InsufficientFunds) ? (0, z.jsx)("div", {
        className: qoe.problem,
        children: (0, z.jsx)(Pc.MapTilePurchase.PURCHASE_STATUS, {
          hash: `${Uj[Uj.InsufficientPermits]}${Uj[Uj.InsufficientFunds]}`
        })
      }) : (0, z.jsx)("div", {
        className: qoe.problem,
        children: (0, z.jsx)(Pc.MapTilePurchase.PURCHASE_STATUS, {
          hash: Uj[e]
        })
      });
    }
    function sre(e) {
      switch (e) {
        case Uj.NoSelection:
          0;
          return z.jsx(Pc.MapTilePurchase.PURCHASE_STATUS_TOOLTIP, {
            hash: Uj[Uj.NoSelection]
          });
        case Uj.InsufficientPermits | Uj.InsufficientFunds:
          0;
          return z.jsx(Pc.MapTilePurchase.PURCHASE_STATUS_TOOLTIP, {
            hash: `${Uj[Uj.InsufficientPermits]}${Uj[Uj.InsufficientFunds]}`
          });
        case Uj.InsufficientPermits:
          0;
          return z.jsx(Pc.MapTilePurchase.PURCHASE_STATUS_TOOLTIP, {
            hash: Uj[Uj.InsufficientPermits]
          });
        case Uj.InsufficientFunds:
          0;
          return z.jsx(Pc.MapTilePurchase.PURCHASE_STATUS_TOOLTIP, {
            hash: Uj[Uj.InsufficientFunds]
          });
      }
    }
    X.add("game-ui/game/components/map-tile-purchase-panel/map-tile-purchase-panel.tsx", {
      get MapTilePurchasePanel() {
        return Zoe;
      },
      set MapTilePurchasePanel(e) {
        Zoe = e;
      }
    });
    let ire = {
      "button-row": "button-row_Idj",
      buttonRow: "button-row_Idj"
    };
    X.add("game-ui/common/input/button/button-row.module.scss", {
      get classes() {
        return ire;
      },
      set classes(e) {
        Object.assign(ire, e);
      }
    });
    var ore = ({
      className: e,
      children: t
    }) => (0, z.jsx)("div", {
      className: Qu()(ire.buttonRow, e),
      children: t
    });
    X.add("game-ui/common/input/button/button-row.tsx", {
      get ButtonRow() {
        return ore;
      },
      set ButtonRow(e) {
        ore = e;
      }
    });
    let rre = {
      "milestone-trophy-animation": "milestone-trophy-animation_ZMt",
      milestoneTrophyAnimation: "milestone-trophy-animation_ZMt",
      waterdrop: "waterdrop_Qpf",
      scale: "scale_v4R",
      MILESTONE_WATERDROP_FADE: "MILESTONE_WATERDROP_FADE_WQi",
      milestoneWaterdropFade: "MILESTONE_WATERDROP_FADE_WQi",
      two: "two_RoL",
      three: "three_pjZ",
      trophy: "trophy_RwE"
    };
    X.add("game-ui/game/components/progression/milestone-unlock-event-panel/milestone-trophy-animation.module.scss", {
      get classes() {
        return rre;
      },
      set classes(e) {
        Object.assign(rre, e);
      }
    });
    var cre = ({
      className: e
    }) => (0, z.jsxs)("div", {
      className: Qu()(rre.milestoneTrophyAnimation, e),
      children: [(0, z.jsx)("div", {
        className: rre.waterdrop
      }), (0, z.jsx)("div", {
        className: Qu()(rre.waterdrop, rre.two)
      }), (0, z.jsx)("div", {
        className: Qu()(rre.waterdrop, rre.three)
      }), (0, z.jsx)("img", {
        src: "Media/Game/Icons/Trophy.svg",
        className: rre.trophy
      })]
    });
    X.add("game-ui/game/components/progression/milestone-unlock-event-panel/milestone-trophy-animation.tsx", {
      get MilestoneTrophyAnimation() {
        return cre;
      },
      set MilestoneTrophyAnimation(e) {
        cre = e;
      }
    });
    let ure = {
      "milestone-unlock-event-panel": "milestone-unlock-event-panel_zd2",
      milestoneUnlockEventPanel: "milestone-unlock-event-panel_zd2",
      title: "title_K9M",
      "title-primary": "title-primary_m30",
      titlePrimary: "title-primary_m30",
      "title-secondary": "title-secondary_mRY",
      titleSecondary: "title-secondary_mRY",
      header: "header_Uqs",
      "header-layer": "header-layer_ChU",
      headerLayer: "header-layer_ChU",
      cityscape: "cityscape_b4P",
      trophy: "trophy_Q30",
      "city-title": "city-title_U_b",
      cityTitle: "city-title_U_b",
      description: "description_Iei",
      "rewards-label": "rewards-label_q85",
      rewardsLabel: "rewards-label_q85",
      rewards: "rewards_cr_",
      "reward-field": "reward-field_v6Q",
      rewardField: "reward-field_v6Q",
      actions: "actions_YbO",
      "button-label": "button-label_VUl",
      buttonLabel: "button-label_VUl",
      "button-container": "button-container_uMR",
      buttonContainer: "button-container_uMR"
    };
    X.add("game-ui/game/components/progression/milestone-unlock-event-panel/milestone-unlock-event-panel.module.scss", {
      get classes() {
        return ure;
      },
      set classes(e) {
        Object.assign(ure, e);
      }
    });
    const mre = new Tg("continueButton");
    var hre = ({
      focusKey: e,
      milestone: t,
      onClose: n
    }) => {
      0;
      const s = Y.useCallback(() => {
        n();
        Vv(Lv.Milestones);
      }, [n]);
      const i = ll(IN, t) ?? hN;
      0;
      const [a, o] = Y.useState(false);
      0;
      const [r, l] = Y.useState(false);
      0;
      Y.useEffect(() => {
        rp(op.milestoneEvent);
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: ure.milestoneUnlockEventPanel,
        children: z.jsx(kg, {
          onAction: n,
          children: z.jsxs(ep, {
            focusKey: e,
            initialFocused: mre,
            children: [z.jsxs("div", {
              className: ure.title,
              children: [z.jsx("div", {
                className: ure.titlePrimary,
                children: z.jsx(Pc.Progression.MILESTONE_UNLOCK_PANEL_TITLE_PRIMARY, {
                  INDEX: z.jsx(Gc, {
                    value: i.index,
                    unit: Oc.Integer
                  })
                })
              }), z.jsx("div", {
                className: ure.titleSecondary,
                children: z.jsx(Pc.Progression.MILESTONE_UNLOCK_PANEL_TITLE_SECONDARY, {})
              })]
            }), z.jsxs("div", {
              className: ure.header,
              children: [z.jsx("img", {
                src: i.image,
                className: ure.cityscape
              }), z.jsx(cre, {
                className: ure.trophy
              })]
            }), z.jsx("div", {
              className: ure.cityTitle,
              children: z.jsx(Pc.Progression.MILESTONE_NAME, {
                index: i.index
              })
            }), z.jsx("div", {
              className: ure.description,
              children: z.jsx(bb, {
                children: z.jsx(Pc.Progression.MILESTONE_DESCRIPTION, {
                  index: i.index
                })
              })
            }), z.jsx("div", {
              className: ure.rewardsLabel,
              children: z.jsx(Pc.Progression.MILESTONE_REWARDS_LABEL, {})
            }), z.jsxs("div", {
              className: ure.rewards,
              children: [i.reward > 0 && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Progression.REWARD_FIELD_LABEL, {}),
                children: (0, z.jsx)(z6, {
                  icon: "Media/Game/Icons/Money.svg",
                  className: ure.rewardField,
                  children: (0, z.jsx)(Gc, {
                    value: i.reward,
                    unit: Oc.Money
                  })
                })
              }), i.devTreePoints > 0 && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Progression.DEVELOPMENT_POINTS_FIELD_LABEL, {}),
                children: (0, z.jsx)(z6, {
                  icon: "Media/Game/Icons/DevPoint.svg",
                  className: ure.rewardField,
                  children: (0, z.jsx)(Gc, {
                    value: i.devTreePoints,
                    unit: Oc.Integer,
                    signed: true
                  })
                })
              }), i.mapTiles > 0 && (0, z.jsx)(bg, {
                tooltip: (0, z.jsx)(Pc.Progression.MAP_TILES_FIELD_LABEL, {}),
                children: (0, z.jsx)(z6, {
                  icon: "Media/Game/Icons/ExpansionPermit.svg",
                  className: ure.rewardField,
                  children: (0, z.jsx)(Gc, {
                    value: i.mapTiles,
                    unit: Oc.Integer,
                    signed: true
                  })
                })
              })]
            }), z.jsxs(ore, {
              className: ure.actions,
              children: [z.jsx(Lh, {
                onFocusChange: o,
                children: z.jsx(L_, {
                  disableHint: true,
                  theme: DE,
                  onSelect: s,
                  children: z.jsxs("div", {
                    className: ure.buttonContainer,
                    children: [z.jsx(LT, {
                      action: "Select",
                      active: a
                    }), z.jsx("div", {
                      className: ure.buttonLabel,
                      children: z.jsx(Pc.Progression.PROGRESSION_PANEL_BUTTON, {})
                    })]
                  })
                })
              }), z.jsx(Lh, {
                onFocusChange: l,
                children: z.jsx(L_, {
                  disableHint: true,
                  focusKey: mre,
                  theme: DE,
                  onSelect: n,
                  children: z.jsxs("div", {
                    className: ure.buttonContainer,
                    children: [z.jsx(LT, {
                      action: "Select",
                      active: r
                    }), z.jsx("div", {
                      className: ure.buttonLabel,
                      children: z.jsx(Pc.Common.CLOSE, {})
                    })]
                  })
                })
              })]
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/progression/milestone-unlock-event-panel/milestone-unlock-event-panel.tsx", {
      get MilestoneUnlockEventPanel() {
        return hre;
      },
      set MilestoneUnlockEventPanel(e) {
        hre = e;
      }
    });
    let gre = {
      "signature-unlock-event-panel": "signature-unlock-event-panel_f8P",
      signatureUnlockEventPanel: "signature-unlock-event-panel_f8P",
      image: "image_Pwi",
      content: "content_vd9",
      title: "title_vLU",
      description: "description_cRG",
      stats: "stats_FqV",
      "stat-field": "stat-field_yOa",
      statField: "stat-field_yOa",
      actions: "actions_kVJ",
      "button-label": "button-label_MBu",
      buttonLabel: "button-label_MBu",
      "button-container": "button-container_qHR",
      buttonContainer: "button-container_qHR"
    };
    X.add("game-ui/game/components/progression/signature-unlock-event-panel/signature-unlock-event-panel.module.scss", {
      get classes() {
        return gre;
      },
      set classes(e) {
        Object.assign(gre, e);
      }
    });
    var fre = ({
      focusKey: e,
      entities: t,
      onClose: n
    }) => {
      0;
      const [s, i] = Y.useState(0);
      const a = t.length > s ? t[s] : Xp;
      const o = ll(uT, a) ?? mT;
      0;
      const [r, l] = Y.useState(false);
      0;
      Y.useEffect(() => rp(op.signatureBuildingEvent), []);
      0;
      Y.useEffect(() => {
        if (t.length <= s) {
          if (t.length > 0) {
            i(0);
          } else {
            n();
          }
        }
      }, [s, t.length, n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        focusKey: e,
        theme: eE,
        header: z.jsx(nE, {
          icon: "Media/Game/Icons/ZoneSignature.svg",
          children: z.jsx(Pc.Progression.BUILDING_UNLOCK_EVENT_PANEL_TITLE, {})
        }),
        className: gre.signatureUnlockEventPanel,
        onClose: n,
        children: z.jsxs(ep, {
          children: [z.jsx(B_, {
            src: o?.preview ?? "",
            className: gre.image
          }), z.jsxs("div", {
            className: gre.content,
            children: [z.jsx("div", {
              className: gre.title,
              children: z.jsx(Tc, {
                id: o.titleId
              })
            }), o.descriptionId && (0, z.jsx)("div", {
              className: gre.description,
              children: (0, z.jsx)(Tc, {
                id: o.descriptionId
              })
            }), z.jsx("div", {
              className: gre.stats,
              children: null != o.constructionCost && (0, z.jsx)(z6, {
                label: (0, z.jsx)(Pc.Properties.CONSTRUCTION_COST, {}),
                className: gre.statField,
                children: (0, z.jsx)(Gc, {
                  value: W9(o, "max"),
                  unit: o.constructionCost.unit
                })
              })
            }), z.jsx(ore, {
              className: gre.actions,
              children: z.jsx(Lh, {
                onFocusChange: l,
                children: z.jsx(L_, {
                  disableHint: true,
                  theme: DE,
                  onSelect: n,
                  children: z.jsxs("div", {
                    className: gre.buttonContainer,
                    children: [z.jsx(LT, {
                      action: "Select",
                      active: r
                    }), z.jsx("div", {
                      className: gre.buttonLabel,
                      children: z.jsx(Pc.Common.OK, {})
                    })]
                  })
                })
              })
            })]
          })]
        })
      });
    };
    X.add("game-ui/game/components/progression/signature-unlock-event-panel/signature-unlock-event-panel.tsx", {
      get SignatureUnlockEventPanel() {
        return fre;
      },
      set SignatureUnlockEventPanel(e) {
        fre = e;
      }
    });
    const xre = function (e) {
      0;
      const [t, n] = Y.useState();
      0;
      Y.useEffect(() => {
        let t = 0;
        const s = () => {
          if (e.current) {
            n(e.current.getBoundingClientRect());
          } else {
            n(undefined);
          }
          t = window.requestAnimationFrame(s);
        };
        setTimeout(() => s(), 0);
        return () => window.cancelAnimationFrame(t);
      }, [e]);
      return t;
    };
    X.add("game-ui/common/hooks/use-bounding-client-rect.ts", {});
    let vre = {
      scrollable: "scrollable_A57",
      value: "value_GiO",
      button: "button_kAx"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/developer-section/developer-section.module.scss", {
      get classes() {
        return vre;
      },
      set classes(e) {
        Object.assign(vre, e);
      }
    });
    let bre = {
      section: "section_Czw section_gUk",
      "title-bar": "title-bar_tE1 title-bar_wU9",
      titleBar: "title-bar_tE1 title-bar_wU9",
      expandable: "expandable_HXj",
      title: "title_dyN title_bwV",
      content: "content_YjM content_owQ"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/developer-section/section.module.scss", {
      get classes() {
        return bre;
      },
      set classes(e) {
        Object.assign(bre, e);
      }
    });
    var Ere = ({
      label: e,
      value: t,
      max: n
    }) => (0, z.jsx)(m2, {
      header: (0, z.jsx)(yte, {
        children: e
      }),
      theme: bre,
      className: vre.capacityInfo,
      children: (0, z.jsx)(Ete, {
        progress: t,
        max: n,
        children: `${t}/${n}`
      })
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/developer-section/capacity-info.tsx", {
      get CapacityInfo() {
        return Ere;
      },
      set CapacityInfo(e) {
        Ere = e;
      }
    });
    var Ire = ({
      label: e,
      value: t,
      target: n
    }) => {
      0;
      const s = Y.useCallback(() => {
        if (null != n) {
          Pw(n);
        }
      }, [n]);
      0;
      0;
      0;
      return z.jsx(m2, {
        className: vre.genericInfo,
        theme: bre,
        header: z.jsx(yte, {
          children: e
        }),
        children: z.jsx(L_, {
          className: Qu()(vre.button, null != n && vre.link),
          disabled: null == n || 0 === n?.index,
          onSelect: s,
          children: t
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/developer-section/generic-info.tsx", {
      get GenericInfo() {
        return Ire;
      },
      set GenericInfo(e) {
        Ire = e;
      }
    });
    var yre = ({
      label: e,
      list: t
    }) => (0, z.jsx)(Ite, {
      header: (0, z.jsx)(yte, {
        children: e
      }),
      theme: bre,
      className: vre.infoList,
      transition: null,
      children: (0, z.jsx)(ep, {
        children: t.map((e, t) => (0, z.jsx)(Sre, {
          item: e
        }, t))
      })
    });
    const Sre = ({
      item: e
    }) => {
      0;
      const t = Y.useCallback(() => {
        if (null != e.entity) {
          Pw(e.entity);
        }
      }, [e.entity]);
      0;
      return z.jsx(L_, {
        className: Qu()(vre.button, null != e?.entity && vre.link),
        disabled: null == e?.entity || 0 === e?.entity.index,
        onSelect: t,
        children: e.text
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/developer-section/info-list.tsx", {
      get InfoList() {
        return yre;
      },
      set InfoList(e) {
        yre = e;
      }
    });
    var jre = ({
      focusKey: e,
      subsections: t
    }) => (0, z.jsx)(ab, {
      className: vre.scrollable,
      children: (0, z.jsx)(ep, {
        focusKey: e,
        children: (0, z.jsx)(lM, {
          components: Cre,
          data: t
        })
      })
    });
    var Cre = {
      [pw.GenericInfo]: Ire,
      [pw.CapacityInfo]: Ere,
      [pw.InfoList]: yre
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/developer-section/developer-section.tsx", {
      get DeveloperSection() {
        return jre;
      },
      set DeveloperSection(e) {
        jre = e;
      },
      get developerSubsectionComponents() {
        return Cre;
      },
      set developerSubsectionComponents(e) {
        Cre = e;
      }
    });
    let Nre = {
      "developer-info-panel": "developer-info-panel_GEQ",
      developerInfoPanel: "developer-info-panel_GEQ"
    };
    X.add("game-ui/game/components/selected-info-panel/developer-info-panel.module.scss", {
      get classes() {
        return Nre;
      },
      set classes(e) {
        Object.assign(Nre, e);
      }
    });
    var Ore = ({
      onClose: e,
      developerInfoSection: t
    }) => {
      const n = sl(GO);
      0;
      const s = Y.useRef(null);
      const i = function (e) {
        const t = sl(Tw);
        const n = Fm();
        const s = Vm();
        if (e && t && n) {
          return {
            x: Math.trunc(wd(t.x * n.x + 10 * s, 0, n.x - e.width - 70)),
            y: Math.trunc(wd((1 - t.y) * n.y + 10 * s, 90, n.y - e.height - 120))
          };
        }
        return;
      }(xre(s));
      0;
      const a = Y.useCallback(() => {
        e();
      }, [e]);
      0;
      return z.jsx(z.Fragment, {
        children: "Default Tool" === n.id && (0, z.jsx)(ZT, {
          ref: s,
          className: Nre.developerInfoPanel,
          style: i ? {
            left: i.x + "px",
            top: i.y + "px"
          } : {
            visibility: "hidden"
          },
          onClose: a,
          header: (0, z.jsx)(nE, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.DEVELOPER_INFO_TITLE, {})
          }),
          children: (0, z.jsx)(jre, {
            ...t
          })
        })
      });
    };
    function Lre(e) {
      return e ? {
        left: e.x + "px",
        top: e.y + "px"
      } : {
        visibility: "hidden"
      };
    }
    X.add("game-ui/game/components/selected-info-panel/developer-info-panel.tsx", {
      get DeveloperInfoPanel() {
        return Ore;
      },
      set DeveloperInfoPanel(e) {
        Ore = e;
      }
    });
    let Are = {
      header: "header_SUX header_H_U header_Bpo child-opacity-transition_nkS",
      content: "content_KYp content_XD5 content_AD7 child-opacity-transition_nkS",
      footer: "footer_IlY footer_Pa9 footer_pD5 child-opacity-transition_nkS",
      title: "title_tEn title_SVH title_zQN"
    };
    X.add("game-ui/game/themes/selected-info-panel.module.scss", {
      get classes() {
        return Are;
      },
      set classes(e) {
        Object.assign(Are, e);
      }
    });
    var kre = $r("DistrictsSection", "selecting");
    var Dre = el("DistrictsSection", "removeDistrict");
    var Fre = Jr("DistrictsSection", "toggleSelectionTool");
    var Ure = Jr("DistrictsSection", "toggleDistrictTool");
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/districts-section/districts-section-bindings.ts", {
      get selecting() {
        return selecting;
      },
      set selecting(e) {
        selecting = e;
      },
      get removeDistrict() {
        return Dre;
      },
      set removeDistrict(e) {
        Dre = e;
      },
      get toggleSelectionTool() {
        return Fre;
      },
      set toggleSelectionTool(e) {
        Fre = e;
      },
      get toggleDistrictTool() {
        return Ure;
      },
      set toggleDistrictTool(e) {
        Ure = e;
      }
    });
    function Vre(e, t, n, s, i, a) {
      const o = zre(s, i, n.position);
      const r = 12 * a;
      const l = (tle / 2 + ele) * a;
      const c = o.x + l;
      const u = o.y + l;
      return (e - c) * (e - c) + (t - u) * (t - u) <= r * r;
    }
    function Hre(e, t, n, s, i, a, o, r, l, c) {
      const u = 12 * c;
      const d = 2 * c;
      const m = zre(s, i, t.position);
      const h = l ? 1.25 * u : r ? 1.125 * u : u;
      const g = l ? 1.25 * d : r ? 1.125 * d : d;
      const p = (tle / 2 + ele) * c;
      const f = n > 0 ? Math.min(t.cargo / n, 1) : 0;
      const x = Math.sqrt(f) * (h - g);
      const v = tN(a);
      const _ = tN(o);
      e.beginPath();
      e.arc(m.x + p, m.y + p, h, 2 * Math.PI, 0, false);
      e.closePath();
      e.fillStyle = v;
      e.fill();
      e.beginPath();
      e.arc(m.x + p, m.y + p, x, 2 * Math.PI, 0, false);
      e.closePath();
      e.fillStyle = _;
      e.fill();
    }
    function Kre(e, t, n, s, i, a, o, r) {
      const l = zre(a, o, n.position);
      const c = 18 * r * (s ? 1.25 : i ? 1.125 : 1);
      const u = 18 * r * (s ? 1.25 : i ? 1.125 : 1);
      const d = (tle / 2 + ele) * r;
      return function (e, t, n, s, i, a, o) {
        let r = e - n;
        let l = t - s;
        const c = (a * a + o * o) / 4;
        if (r * r + l * l > c) {
          return false;
        }
        const u = Math.sin(-i);
        const d = Math.cos(-i);
        r = r * d - l * u;
        l = r * u + l * d;
        r += n;
        l += s;
        return r >= n - a / 2 && r <= n + a / 2 && l >= s - o / 2 && l <= s + a / 2;
      }(e, t, l.x + d, l.y + d, l.z, c, u);
    }
    function Wre(e, t, n, s, i, a, o, r, l) {
      const c = 2 * l;
      const u = 3 * l;
      const d = zre(n, s, t.position);
      const m = 18 * l * (r ? 1.25 : o ? 1.125 : 1);
      const h = function (e, t, n) {
        return 26 * e * (t ? 1.25 : n ? 1.125 : 1);
      }(l, r, o);
      const g = (tle / 2 + ele) * l;
      const p = m / 2;
      const f = h / 2;
      const x = t.capacity > 0 ? t.cargo / t.capacity : 0;
      const v = Math.ceil(6 * Math.min(x, 1));
      const _ = r ? 1.25 * c : o ? 1.125 * c : c;
      const b = r ? 1.25 * u : o ? 1.125 * u : u;
      const T = _ / 2 + b;
      const E = _ + 2 * b;
      const I = tN(i);
      const y = tN(a);
      e.save();
      e.translate(d.x + g, d.y + g);
      e.rotate(d.z);
      e.fillStyle = I;
      e.fillRect(-p, -f, m, h);
      if (v > 0) {
        e.beginPath();
        e.moveTo(-T, -E);
        e.arc(-T, -E, b, 0, 2 * Math.PI);
        if (v > 1) {
          e.moveTo(T, -E);
          e.arc(T, -E, b, 0, 2 * Math.PI);
        }
        if (v > 2) {
          e.moveTo(-T, 0);
          e.arc(-T, 0, b, 0, 2 * Math.PI);
        }
        if (v > 3) {
          e.moveTo(T, 0);
          e.arc(T, 0, b, 0, 2 * Math.PI);
        }
        if (v > 4) {
          e.moveTo(-T, E);
          e.arc(-T, E, b, 0, 2 * Math.PI);
        }
        if (v > 5) {
          e.moveTo(T, E);
          e.arc(T, E, b, 0, 2 * Math.PI);
        }
        e.fillStyle = y;
        e.fill();
      }
      e.restore();
    }
    function zre(e, t, n) {
      n = 1 - n;
      const s = e * Math.PI;
      const i = t - 2 * e;
      const a = 2 * s + 2 * i;
      const o = s / a;
      const r = i / a;
      if (n < o / 2) {
        const t = Math.PI * n / o;
        return {
          x: e + e * Math.sin(t),
          y: e - e * Math.cos(t),
          z: t + Math.PI / 2
        };
      }
      if ((n -= o / 2) < r) {
        return {
          x: 2 * e,
          y: e + n / r * i,
          z: Math.PI
        };
      }
      if ((n -= r) < o) {
        const t = Math.PI * (n / o + .5);
        return {
          x: e + e * Math.sin(t),
          y: e - e * Math.cos(t) + i,
          z: t + Math.PI / 2
        };
      }
      if ((n -= o) < r) {
        return {
          x: 0,
          y: e + i - n / r * i,
          z: 0
        };
      }
      n -= r;
      const l = Math.PI * (n / o + 1.5);
      return {
        x: e + e * Math.sin(l),
        y: e - e * Math.cos(l),
        z: l + Math.PI / 2
      };
    }
    function Yre(e, t, n) {
      return 18 * e * (t ? 1.25 : n ? 1.125 : 1);
    }
    function $re(e, t, n, s, i, a) {
      if (a.broken) {
        (function (e, t, n, s, i, a, o, r) {
          const l = s * Math.PI;
          const c = i - 2 * s;
          const u = 2 * l + 2 * c;
          const d = u / Math.max(2 * Math.floor(u / (2 * r)), 2) / u;
          const m = 2 * d;
          for (let r = a - a % m; r < o; r += m) {
            qre(e, t, n, s, i, Math.max(r, a), Math.min(r + d, o));
          }
        })(e, t, n, s, i, a.start, a.end, 10);
      } else {
        qre(e, t, n, s, i, a.start, a.end);
      }
    }
    function qre(e, t, n, s, i, a, o) {
      if (o <= a) {
        return;
      }
      const r = s * Math.PI;
      const l = i - 2 * s;
      const c = 2 * r + 2 * l;
      const u = r / c;
      const d = l / c;
      const m = o - a;
      o = (a = (a + u / 2) % 1) + m;
      let h = true;
      for (; !(!(o > 0) || (a < u && (Xre(e, t, n - l / 2, Math.PI, s, a / u, o / u, h), h = false), a -= u, (o -= u) < 0) || (o > 0 && a < d && (Qre(e, t + s, n, -l, a / d, o / d, h), h = false), a -= d, (o -= d) < 0) || (a < u && (Xre(e, t, n + l / 2, 0, s, a / u, o / u, h), h = false), a -= u, (o -= u) < 0));) {
        if (o > 0 && a < d) {
          Qre(e, t - s, n, l, a / d, o / d, h);
          h = false;
        }
        a -= d;
        o -= d;
      }
    }
    function Xre(e, t, n, s, i, a, o, r) {
      const l = Math.PI * Math.max(a, 0) + s;
      const c = Math.max(Math.PI * Math.min(o, 1), a) + s;
      if (r) {
        e.moveTo(t + i * Math.cos(l), n + i * Math.sin(l));
      }
      e.arc(t, n, i, l, c);
    }
    function Qre(e, t, n, s, i, a, o) {
      if (o) {
        const a = -s * wd(i - .5, -.5, .5);
        e.moveTo(t, n + a);
      }
      const r = -s * wd(a - .5, -.5, .5);
      e.lineTo(t, n + r);
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-visualizer-section/canvas-items.ts", {
      get mouseOverStop() {
        return Vre;
      },
      set mouseOverStop(e) {
        Vre = e;
      },
      get drawStop() {
        return Hre;
      },
      set drawStop(e) {
        Hre = e;
      },
      get mouseOverVehicle() {
        return Kre;
      },
      set mouseOverVehicle(e) {
        Kre = e;
      },
      get drawVehicle() {
        return Wre;
      },
      set drawVehicle(e) {
        Wre = e;
      },
      get calculatePosition() {
        return zre;
      },
      set calculatePosition(e) {
        zre = e;
      }
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-visualizer-section/canvas-segments.ts", {
      get segment() {
        return $re;
      },
      set segment(e) {
        $re = e;
      }
    });
    let Zre = {
      hint: "hint_Vox",
      icon: "icon__qE",
      wrapper: "wrapper_dcw"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-visualizer-section/lv-hint-theme.module.scss", {
      get classes() {
        return Zre;
      },
      set classes(e) {
        Object.assign(Zre, e);
      }
    });
    var ele = 20;
    var tle = 8;
    const nle = QC(255, 255, 255, .75);
    const sle = QC(255, 255, 255, 1);
    var ole = ({
      width: e,
      height: t,
      color: n,
      stops: s,
      vehicles: i,
      segments: a,
      stopCapacity: o,
      focused: r
    }) => {
      const l = km();
      0;
      const [c, u] = Y.useState(null);
      0;
      const [d, m] = Y.useState(null);
      const h = sl(xw);
      const g = sl(Ky);
      0;
      const p = Y.useRef(g);
      0;
      const f = Y.useRef(h);
      0;
      const x = Y.useRef(null);
      const v = Vm();
      const _ = e / 2;
      const b = ele * v;
      const T = tle * v;
      const E = (e - T - 2 * b) / 2;
      const I = t - 2 * b - T;
      const y = c && ("Game.UI.InGame.LineVisualizerSection+LineVehicle" === c?.__Type ? i.find(e => Ur(e.entity, c.entity))?.position || 0 : c.position);
      const S = c ? zre(E, I, y || 0) : {
        x: 0,
        y: 0,
        z: 0
      };
      const j = (tle / 2 + ele) * v;
      0;
      const C = Y.useCallback(e => {
        const t = [...i, ...s];
        t.sort((e, t) => e.position - t.position);
        if (0 === t.length) {
          return;
        }
        const n = t.findIndex(e => Ur(e.entity, c?.entity));
        let a = 0;
        if (-1 === n) {
          a = e > 0 ? 0 : t.length - 1;
        } else {
          a = (n - e) % t.length;
          if (a < 0) {
            a += t.length;
          }
        }
        u(t[a]);
      }, [c, s, i]);
      0;
      const N = Y.useMemo(() => ({
        "Move Horizontal": e => C(e),
        Select: c ? () => {
          if (!Ur(c.entity, h)) {
            Pw(c.entity);
            f.current = c.entity;
            Wy(c.entity);
            p.current = c.entity;
          }
        } : null
      }), [C, c, h]);
      0;
      const w = Y.useCallback(e => {
        if (null == x.current) {
          return;
        }
        const t = x.current.getBoundingClientRect();
        const n = e.clientX - t.left;
        const a = e.clientY - t.top;
        for (let e = 0; e < s.length; e++) {
          const t = s[e];
          if (Vre(n, a, t, E, I, v)) {
            return void (Ur(t.entity, d?.entity) || (Pw(t.entity), f.current = t.entity, Wy(t.entity), p.current = t.entity));
          }
        }
        for (let e = 0; e < i.length; e++) {
          const t = i[e];
          if (Kre(n, a, t, !!d && d.entity === t.entity, !!c && c.entity === t.entity, E, I, v)) {
            return void (Ur(t.entity, d?.entity) || (Pw(t.entity), f.current = t.entity, Wy(t.entity), p.current = t.entity));
          }
        }
      }, [c, I, E, v, d, s, i]);
      0;
      const O = Y.useCallback(e => {
        if (null == x.current) {
          return;
        }
        const t = x.current.getBoundingClientRect();
        const n = e.clientX - t.left;
        const a = e.clientY - t.top;
        for (let e = 0; e < s.length; e++) {
          const t = s[e];
          if (Vre(n, a, t, E, I, v)) {
            return void u(e => (e?.entity.index !== t.entity.index && rp(op.hoverItem), t));
          }
        }
        for (let e = 0; e < i.length; e++) {
          const t = i[e];
          const s = !!d && d.entity === t.entity;
          const o = !!c && c.entity === t.entity;
          if (Kre(n, a, t, s, o, E, I, v)) {
            return void u(e => (e?.entity.index !== t.entity.index && rp(op.hoverItem), t));
          }
        }
        u(null);
      }, [c, I, E, v, d, s, i]);
      0;
      const P = Y.useCallback(() => {
        u(null);
      }, []);
      0;
      Y.useEffect(() => {
        if (r) {
          u(function (e, t) {
            const n = [...t, ...e];
            return n.length > 0 ? n.sort((e, t) => e.position - t.position)[0] : null;
          }(i, s));
        }
      }, [r]);
      0;
      Y.useEffect(() => {
        const e = i.find(e => Ur(e.entity, h)) || s.find(e => Ur(e.entity, h));
        m(undefined !== e ? t => (t?.entity.index !== e.entity.index && rp(op.selectItem), e) : null);
      }, [h, s, i]);
      0;
      Y.useEffect(() => {
        if (!x.current) {
          return;
        }
        const r = x.current.getContext("2d");
        r.clearRect(0, 0, e, t);
        r.save();
        r.beginPath();
        if (a && a.length > 0) {
          for (let n = 0; n < a.length; n++) {
            $re(r, e / 2, t / 2, E, I, a[n]);
          }
        }
        r.lineWidth = T;
        r.strokeStyle = tN(null == d || Ur(null?.entity, d.entity) ? null == c || Ur(null?.entity, c.entity) ? n : lle(-.35, n) : null != c && Ur(null?.entity, c.entity) ? n : lle(-.5, n));
        r.stroke();
        if (s && s.length > 0) {
          for (let e = 0; e < s.length; e++) {
            const t = s[e];
            const i = null == d || Ur(t?.entity, d.entity) ? null == c || Ur(t?.entity, c.entity) ? sle : lle(-.35, sle) : null != c && Ur(t?.entity, c.entity) ? sle : lle(-.5, sle);
            const a = null == d || Ur(t?.entity, d.entity) ? null == c || Ur(t?.entity, c.entity) ? n : lle(-.35, n) : null != c && Ur(t?.entity, c.entity) ? n : lle(-.5, n);
            Hre(r, t, o, E, I, i, a, Ur(c?.entity, t.entity), Ur(h, t.entity), v);
          }
        }
        r.setTransform(1, 0, 0, 1, 0, 0);
        if (i && i.length > 0) {
          for (let e = 0; e < i.length; e++) {
            const t = i[e];
            const s = null == d || Ur(t?.entity, d.entity) ? null == c || Ur(t?.entity, c.entity) ? n : lle(-.35, n) : null != c && Ur(t?.entity, c.entity) ? n : lle(-.5, n);
            const a = null == d || Ur(t?.entity, d.entity) ? null == c || Ur(t?.entity, c.entity) ? nle : lle(-.35, nle) : null != c && Ur(t?.entity, c.entity) ? nle : lle(-.5, nle);
            Wre(r, t, E, I, s, a, Ur(c?.entity, t.entity), Ur(h, t.entity), v);
          }
        }
      }, [n, t, c, I, E, b, _, v, a, o, s, T, i, e, d, h]);
      0;
      Y.useEffect(() => () => {
        if (Ur(p.current, f.current)) {
          Wy(Xp);
        }
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: N,
        children: z.jsxs(Ep, {
          className: Zre.wrapper,
          children: [z.jsx(LT, {
            action: "Move Horizontal",
            active: r,
            theme: Zre
          }), z.jsx(LT, {
            action: "Select",
            active: !!c && !Ur(d?.entity, c.entity) && r,
            theme: {
              icon: Zre.icon
            },
            style: {
              position: "absolute",
              top: S ? S.y + j : undefined,
              left: S ? S.x + j : undefined,
              transform: "translateX(-50%)"
            }
          }), z.jsx(fG, {
            position: l ? {
              x: S.x + 65,
              y: S.y + 140
            } : undefined,
            screenSpacePosition: true,
            forceVisible: !!c,
            disabled: !c,
            tooltip: c && (0, z.jsxs)(z.Fragment, {
              children: [(0, z.jsx)(Hu, {
                value: c.name
              }), (0, z.jsx)(wy, {
                left: c.isCargo ? (0, z.jsx)(Pc.SelectedInfoPanel.CARGO_TOOLTIP, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.PASSENGERS_TOOLTIP, {}),
                right: c.__Type === Rw ? (0, z.jsx)(Gc, {
                  value: c.cargo,
                  unit: c.isCargo ? Oc.Weight : Oc.Integer
                }) : (0, z.jsx)(cu, {
                  value: c.cargo,
                  total: c.capacity,
                  unit: c.isCargo ? Oc.Weight : Oc.Integer
                })
              })]
            })
          }), z.jsx("canvas", {
            ref: x,
            width: e,
            height: t,
            onClick: w,
            onMouseMove: O,
            onMouseLeave: P
          })]
        })
      });
    };
    function rle(e, t, n, s) {
      return null == t || Ur(e?.entity, t.entity) ? null == n || Ur(e?.entity, n.entity) ? s : lle(-.35, s) : null != n && Ur(e?.entity, n.entity) ? s : lle(-.5, s);
    }
    function lle(e, t) {
      const [n, s, i, a] = [t.r, t.g, t.b, t.a];
      const o = e < 0;
      const r = o ? 0 : e;
      const l = o ? 1 + e : 1 - e;
      return {
        r: n * l + r,
        g: s * l + r,
        b: i * l + r,
        a
      };
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-visualizer-section/line-visualizer-canvas.tsx", {
      get LINE_VISUALIZER_PADDING() {
        return ele;
      },
      set LINE_VISUALIZER_PADDING(e) {
        ele = e;
      },
      get LINE_VISUALIZER_TRACKWIDTH() {
        return tle;
      },
      set LINE_VISUALIZER_TRACKWIDTH(e) {
        tle = e;
      },
      get LineVisualizerCanvas() {
        return ole;
      },
      set LineVisualizerCanvas(e) {
        ole = e;
      }
    });
    let cle = {
      "line-visualizer-section": "line-visualizer-section_MKT",
      lineVisualizerSection: "line-visualizer-section_MKT",
      "gamepad-active": "gamepad-active_YL5",
      gamepadActive: "gamepad-active_YL5",
      "track-container": "track-container_c4L",
      trackContainer: "track-container_c4L"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-visualizer-section/line-visualizer-section.module.scss", {
      get classes() {
        return cle;
      },
      set classes(e) {
        Object.assign(cle, e);
      }
    });
    var dle = ({
      focusKey: e,
      stops: t,
      className: n,
      ...s
    }) => {
      const i = km();
      0;
      const a = Y.useRef(null);
      const o = Vd(mm(a) ?? Ld);
      0;
      0;
      0;
      return z.jsx(ZT, {
        focusKey: e,
        header: z.jsx(nE, {
          children: t.find(e => e.isCargo) ? (0, z.jsx)(Pc.SelectedInfoPanel.ROUTE, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.LINE, {})
        }),
        className: Qu()(cle.lineVisualizerSection, i && cle.gamepadActive, n),
        unfocusedHintAction: "Focus Occupants Panel",
        showCloseHint: "Back",
        children: z.jsx("div", {
          ref: a,
          className: cle.trackContainer,
          children: o.x > 0 && o.y > 0 && (0, z.jsx)(ole, {
            width: o.x,
            height: o.y,
            stops: t,
            ...s
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-visualizer-section/line-visualizer-section.tsx", {
      get LineVisualizerSection() {
        return dle;
      },
      set LineVisualizerSection(e) {
        dle = e;
      }
    });
    let mle = {
      "attractiveness-factors": "attractiveness-factors_CDA",
      attractivenessFactors: "attractiveness-factors_CDA",
      positive: "positive_KO_",
      negative: "negative_gWG"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/attractiveness-section/attractiveness-section.module.scss", {
      get classes() {
        return mle;
      },
      set classes(e) {
        Object.assign(mle, e);
      }
    });
    var gle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      attractiveness: s,
      baseAttractiveness: i,
      factors: a
    }) => {
      const o = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: z.jsxs(z.Fragment, {
          children: [o && (0, z.jsx)(bb, {
            text: o
          }), a.length > 0 && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(my, {}), (0, z.jsxs)("div", {
              className: mle.attractivenessFactors,
              children: [(0, z.jsx)(wy, {
                left: (0, z.jsx)(Pc.SelectedInfoPanel.ATTRACTIVENESS_BASE, {}),
                right: (0, z.jsx)(Gc, {
                  value: i,
                  unit: Oc.Integer
                })
              }), a.map((e, t) => (0, z.jsx)(wy, {
                left: (0, z.jsx)(Pc.SelectedInfoPanel.ATTRACTIVENESS_FACTORS, {
                  hash: e.localeKey
                }),
                right: (0, z.jsx)("div", {
                  className: zp(mle, e.delta),
                  children: (0, z.jsx)(Gc, {
                    value: e.delta,
                    unit: Oc.Percentage,
                    signed: true
                  })
                })
              }, t))]
            })]
          })]
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.ATTRACTIVENESS, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.Integer
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/attractiveness-section/attractiveness-section.tsx", {
      get AttractivenessSection() {
        return gle;
      },
      set AttractivenessSection(e) {
        gle = e;
      }
    });
    let ple = {
      "capacity-bar": "capacity-bar_uEN",
      capacityBar: "capacity-bar_uEN",
      "progress-bar": "progress-bar_AtB",
      progressBar: "progress-bar_AtB",
      excellent: "excellent_cFG",
      good: "good_f9U",
      medium: "medium_P2l",
      bad: "bad_BRS",
      critical: "critical_cqP",
      "progress-bounds": "progress-bounds_D6g",
      progressBounds: "progress-bounds_D6g",
      progress: "progress_EvF",
      label: "label_y0j",
      "progress-label": "progress-label_DqS",
      progressLabel: "progress-label_DqS"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/capacity-bar/capacity-bar.module.scss", {
      get classes() {
        return ple;
      },
      set classes(e) {
        Object.assign(ple, e);
      }
    });
    var xle = ({
      progress: e,
      max: t,
      plain: n = false,
      invertColorCodes: s = false,
      children: i,
      className: a
    }) => {
      const o = t > 0 ? 100 * wd(e / t, 0, 1) : 0;
      const r = sl(xw);
      0;
      0;
      return z.jsx("div", {
        className: Qu()(ple.capacityBar, a),
        children: z.jsx(Ete, {
          progress: e,
          max: t,
          theme: ple,
          className: Qu()(!n && (o > 90 ? s ? ple.excellent : ple.critical : o > 80 ? s ? ple.good : ple.bad : o > 50 ? ple.medium : o > 20 ? s ? ple.bad : ple.good : s ? ple.critical : ple.excellent)),
          children: i
        }, Dr(r))
      });
    };
    function vle(e, t) {
      return e > 90 ? t ? ple.excellent : ple.critical : e > 80 ? t ? ple.good : ple.bad : e > 50 ? ple.medium : e > 20 ? t ? ple.bad : ple.good : t ? ple.critical : ple.excellent;
    }
    X.add("game-ui/game/components/selected-info-panel/shared-components/capacity-bar/capacity-bar.tsx", {
      get CapacityBar() {
        return xle;
      },
      set CapacityBar(e) {
        xle = e;
      }
    });
    var _le = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      batteryCharge: s,
      batteryCapacity: i,
      flow: a,
      remainingTime: o
    }) => {
      const r = Uw(e, t, n);
      const l = function (e) {
        return e < 0 ? (0, z.jsx)(Pc.SelectedInfoPanel.BATTERY_STATE_DISCHARGING, {}) : e > 0 ? (0, z.jsx)(Pc.SelectedInfoPanel.BATTERY_STATE_CHARGING, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.BATTERY_STATE_IDLE, {});
      }(a);
      const c = function (e, t) {
        const n = sl(yO);
        return e < 0 ? (0, z.jsx)(Pc.SelectedInfoPanel.EMPTY_IN, {
          DURATION: (0, z.jsx)(Fu, {
            value: t,
            daysPerYear: n.daysPerYear
          })
        }) : e > 0 ? (0, z.jsx)(Pc.SelectedInfoPanel.FULL_IN, {
          DURATION: (0, z.jsx)(Fu, {
            value: t,
            daysPerYear: n.daysPerYear
          })
        }) : "";
      }(a, o);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_BATTERY_STATE, {}),
          right: l
        }), z.jsx(Ny, {
          subRow: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_BATTERY_FLOW, {}),
          right: z.jsx(Gc, {
            signed: true,
            value: a,
            unit: Oc.Power
          })
        }), z.jsx(Ny, {
          subRow: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_BATTERY_CHARGE, {}),
          right: c
        }), z.jsx(xle, {
          progress: s,
          max: i,
          invertColorCodes: true,
          children: z.jsx(cu, {
            value: s,
            total: i,
            unit: Oc.Energy
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/battery-section.tsx", {
      get BatterySection() {
        return _le;
      },
      set BatterySection(e) {
        _le = e;
      }
    });
    var ble = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      comfort: s
    }) => {
      const i = Uw(e, n, t);
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.Properties.COMFORT, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.Integer
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/comfort-section.tsx", {
      get ComfortSection() {
        return ble;
      },
      set ComfortSection(e) {
        ble = e;
      }
    });
    let Tle = {
      icon: "icon_BF2",
      concatenator: "concatenator_bTa"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/company-section/company-section.module.scss", {
      get classes() {
        return Tle;
      },
      set classes(e) {
        Object.assign(Tle, e);
      }
    });
    var Ile = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      companyName: s,
      input1: i,
      input2: a,
      output: o,
      sells: r,
      stores: l,
      customers: c
    }) => {
      const u = Uw(e, t, n);
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: u && (0, z.jsx)(bb, {
          text: u
        }),
        children: [z.jsx(Ny, {
          disableFocus: true,
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.COMPANY, {}),
          right: s ? (0, z.jsx)(Hu, {
            value: s
          }) : (0, z.jsx)(Pc.Common.NONE, {})
        }), null == s && (0, z.jsx)(Ny, {
          disableFocus: true,
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.BUILDING_FOR_RENT, {})
        }), (i || a) && (0, z.jsx)(Ny, {
          disableFocus: true,
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.COMPANY_REQUIRES, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [i && (0, z.jsx)("img", {
              src: `Media/Game/Resources/${i}.svg`,
              className: Tle.icon
            }), i && (0, z.jsx)(Pc.Resources.TITLE, {
              hash: i
            }), a && (0, z.jsx)("div", {
              className: Tle.concatenator,
              children: "+"
            }), a && (0, z.jsx)("img", {
              src: `Media/Game/Resources/${a}.svg`,
              className: Tle.icon
            }), a && (0, z.jsx)(Pc.Resources.TITLE, {
              hash: a
            })]
          })
        }), o && (0, z.jsx)(Ny, {
          disableFocus: true,
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.COMPANY_PRODUCES, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("img", {
              src: `Media/Game/Resources/${o}.svg`,
              className: Tle.icon
            }), (0, z.jsx)(Pc.Resources.TITLE, {
              hash: o
            })]
          })
        }), r && (0, z.jsx)(Ny, {
          disableFocus: true,
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.COMPANY_SELLS, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("img", {
              src: `Media/Game/Resources/${r}.svg`,
              className: Tle.icon
            }), (0, z.jsx)(Pc.Resources.TITLE, {
              hash: r
            })]
          })
        }), l && (0, z.jsx)(Ny, {
          disableFocus: true,
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.COMPANY_STORES, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("img", {
              src: `Media/Game/Resources/${l}.svg`,
              className: Tle.icon
            }), (0, z.jsx)(Pc.Resources.TITLE, {
              hash: l
            })]
          })
        }), c && (0, z.jsx)(Ny, {
          disableFocus: true,
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.COMPANY_ROOMS, {}),
          right: (0, z.jsx)(cu, {
            value: c.x,
            total: c.y
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/company-section/company-section.tsx", {
      get CompanySection() {
        return Ile;
      },
      set CompanySection(e) {
        Ile = e;
      }
    });
    var yle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      bodyCount: s,
      bodyCapacity: i,
      processingSpeed: a,
      processingCapacity: o
    }) => {
      const r = Uw(e, t, n);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: "Cemetery" === e ? (0, z.jsx)(Pc.SelectedInfoPanel.GRAVES_IN_USE, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.DEATHCARE_BODIES, {})
        }), z.jsx(xle, {
          progress: s,
          max: i,
          children: z.jsx(cu, {
            value: s,
            total: i
          })
        }), o > 0 ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(dme, {
            small: true
          }), (0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DEATHCARE_PROCESSING_SPEED, {})
          }), (0, z.jsx)(xle, {
            invertColorCodes: true,
            progress: a,
            max: o,
            children: (0, z.jsx)(cu, {
              value: a,
              total: o,
              unit: Oc.BodiesPerMonth
            })
          })]
        }) : undefined]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/deathcare-section.tsx", {
      get DeathcareSection() {
        return yle;
      },
      set DeathcareSection(e) {
        yle = e;
      }
    });
    let Sle = {
      "description-row": "description-row_Xb1 info-row_QQ9 item-focused_FuT",
      descriptionRow: "description-row_Xb1 info-row_QQ9 item-focused_FuT"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/description-row/description-row.module.scss", {
      get classes() {
        return Sle;
      },
      set classes(e) {
        Object.assign(Sle, e);
      }
    });
    var Cle = ({
      children: e
    }) => (0, z.jsx)("div", {
      className: Sle.descriptionRow,
      children: e
    });
    X.add("game-ui/game/components/selected-info-panel/shared-components/description-row/description-row.tsx", {
      get DescriptionRow() {
        return Cle;
      },
      set DescriptionRow(e) {
        Cle = e;
      }
    });
    let Nle = {
      button: "button_ibf button_YEx item-states_QjV toggle-states_oKG",
      icon: "icon__uJ icon_vbQ",
      label: "label_KgQ"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/primary-button/section-primary-button.module.scss", {
      get classes() {
        return Nle;
      },
      set classes(e) {
        Object.assign(Nle, e);
      }
    });
    let Ole = {
      "info-button": "info-button_n9m",
      infoButton: "info-button_n9m",
      button: "button_hTp",
      label: "label_MAK",
      container: "container_Et5",
      hint: "hint_bps"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-button/info-button.module.scss", {
      get classes() {
        return Ole;
      },
      set classes(e) {
        Object.assign(Ole, e);
      }
    });
    var Lle = ({
      label: e,
      icon: t,
      selected: n,
      onSelect: s
    }) => {
      0;
      const [i, a] = Y.useState(false);
      0;
      0;
      return z.jsx("div", {
        className: Ole.infoButton,
        children: z.jsx(Lh, {
          onFocusChange: a,
          children: t ? (0, z.jsx)(L_, {
            disableHint: true,
            selected: n,
            onSelect: s,
            onClick: Ob,
            className: Ole.button,
            theme: Nle,
            children: (0, z.jsxs)("div", {
              className: Ole.container,
              children: [(0, z.jsx)(LT, {
                action: "Select",
                active: i,
                className: Ole.hint
              }), (0, z.jsxs)("div", {
                className: Ole.label,
                children: [(0, z.jsx)("img", {
                  src: t,
                  className: Nle.icon,
                  onError: V_
                }), e]
              })]
            })
          }) : (0, z.jsx)(L_, {
            disableHint: true,
            selected: n,
            onSelect: s,
            onClick: Ob,
            className: Ole.button,
            theme: Nle,
            children: (0, z.jsxs)("div", {
              className: Ole.container,
              children: [(0, z.jsx)(LT, {
                action: "Select",
                active: i,
                className: Ole.hint
              }), (0, z.jsx)("div", {
                className: Ole.label,
                children: e
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-button/info-button.tsx", {
      get InfoButton() {
        return Lle;
      },
      set InfoButton(e) {
        Lle = e;
      }
    });
    var Ale = $r("DestroyedBuildingSection", "rebuilding");
    function Mle() {
      tl("DestroyedBuildingSection", "toggleRebuild");
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/destroyed-building-section/destroyed-building-section-bindings.ts", {
      get rebuilding() {
        return rebuilding;
      },
      set rebuilding(e) {
        rebuilding = e;
      },
      get toggleRebuild() {
        return Mle;
      },
      set toggleRebuild(e) {
        Mle = e;
      }
    });
    var Rle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      destroyer: s,
      cleared: i,
      progress: a,
      status: o
    }) => {
      const r = Uw(e, t, n);
      const l = sl(Ale);
      0;
      const c = Y.useCallback(() => Mle(), []);
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: i,
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.DESTROYED, {})
        }), null != s && (0, z.jsx)(Cle, {
          children: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.DESTROYED_DESCRIPTION, {
              hash: s
            })
          })
        }), "None" !== o && "Rebuild" !== o && (0, z.jsx)(Ny, {
          left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTROYED_STATUS, {
            hash: o
          })
        }), !i && "Searching" === o && (0, z.jsx)(xle, {
          plain: true,
          progress: a,
          max: 100,
          children: (0, z.jsx)(Gc, {
            value: a,
            unit: Oc.Percentage
          })
        }), i && (0, z.jsx)(Lle, {
          label: (0, z.jsx)(Pc.SelectedInfoPanel.REBUILD, {}),
          selected: l,
          onSelect: c
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/destroyed-building-section/destroyed-building-section.tsx", {
      get DestroyedBuildingSection() {
        return Rle;
      },
      set DestroyedBuildingSection(e) {
        Rle = e;
      }
    });
    let kle = {
      "info-link": "info-link_Mpc item-focused_FuT",
      infoLink: "info-link_Mpc item-focused_FuT",
      row: "row_Q8R",
      ellipsis: "ellipsis_C0N",
      smallText: "smallText_DnB",
      uppercase: "uppercase_qZ8",
      icon: "icon_hE2",
      hint: "hint_IBf"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-link/info-link.module.scss", {
      get classes() {
        return kle;
      },
      set classes(e) {
        Object.assign(kle, e);
      }
    });
    var Fle = ({
      icon: e,
      tooltip: t,
      uppercase: n = false,
      onSelect: s,
      children: i
    }) => {
      0;
      const [a, o] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        tooltip: t,
        children: z.jsx(Lh, {
          onFocusChange: o,
          children: z.jsxs(L_, {
            disableHint: true,
            onSelect: s,
            onClick: Ob,
            className: Qu()(kle.row, kle.infoLink, n && kle.uppercase),
            children: [z.jsx("img", {
              src: "Media/Glyphs/ViewInfo.svg",
              className: kle.icon
            }), e && (0, z.jsx)("img", {
              src: e,
              className: kle.icon
            }), z.jsx("div", {
              className: kle.ellipsis,
              children: i
            }), z.jsx(LT, {
              action: "Select",
              active: a,
              className: kle.hint
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-link/info-link.tsx", {
      get InfoLink() {
        return Fle;
      },
      set InfoLink(e) {
        Fle = e;
      }
    });
    let Ule = {
      "districts-section": "districts-section_UaO",
      districtsSection: "districts-section_UaO",
      details: "details_abN",
      detail: "detail_DhZ",
      "delete-button": "delete-button_UKV",
      deleteButton: "delete-button_UKV"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/districts-section/districts-section.module.scss", {
      get classes() {
        return Ule;
      },
      set classes(e) {
        Object.assign(Ule, e);
      }
    });
    var Gle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      districtMissing: s,
      districts: i
    }) => {
      const a = Uw(e, t, n);
      const o = sl(kre);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: true,
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        className: Ule.districtsSection,
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.OPERATING_DISTRICTS, {})
        }), z.jsx(ep, {
          children: i.length > 0 && (0, z.jsx)("div", {
            className: Ule.details,
            children: i.map((e, t) => (0, z.jsx)(Vle, {
              district: e
            }, t))
          })
        }), s ? (0, z.jsx)(Lle, {
          label: (0, z.jsx)(Pc.SelectedInfoPanel.CREATE_DISTRICT, {}),
          icon: "Media/Game/Icons/Districts.svg",
          selected: o,
          onSelect: Ure
        }) : (0, z.jsx)(Lle, {
          label: (0, z.jsx)(Pc.SelectedInfoPanel.SELECT_OPERATING_DISTRICT, {}),
          icon: "Media/Game/Icons/Districts.svg",
          selected: o,
          onSelect: Fre
        })]
      });
    };
    const Vle = ({
      district: e
    }) => {
      0;
      const t = Y.useCallback(() => Pw(e.entity), [e]);
      0;
      const n = Y.useCallback(() => Dre(e.entity), [e]);
      0;
      const s = Y.useMemo(() => ({
        Select: () => {
          rp(op.selectItem);
          t();
        },
        "Remove Operating District": () => {
          rp(op.removeItem);
          n();
        }
      }), [n, t]);
      const i = km();
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: s,
        children: z.jsx(Ny, {
          subRow: true,
          left: z.jsx(Hu, {
            value: e.name
          }),
          link: z.jsx(Fle, {
            onSelect: t,
            children: z.jsx(Pc.SelectedInfoPanel.DETAILS, {})
          }),
          right: !i && (0, z.jsx)(bg, {
            tooltip: (0, z.jsx)(Pc.SelectedInfoPanel.REMOVE_OPERATING_DISTRICT, {}),
            children: (0, z.jsx)($_, {
              tinted: true,
              focusKey: Eg,
              onClick: Ob,
              onSelect: n,
              src: "Media/Glyphs/Trash.svg",
              className: Ule.deleteButton
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/districts-section/districts-section.tsx", {
      get DistrictsSection() {
        return Gle;
      },
      set DistrictsSection(e) {
        Gle = e;
      }
    });
    var Hle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      studentCount: s,
      studentCapacity: i,
      graduationTime: a,
      failProbability: o
    }) => {
      const r = sl(yO);
      const l = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: l && (0, z.jsx)(bb, {
          text: l
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.EDUCATION_STUDENTS, {})
        }), z.jsx(xle, {
          progress: s,
          max: i,
          children: z.jsx(cu, {
            value: s,
            total: i,
            unit: Oc.Integer
          })
        }), z.jsx(Ny, {
          disableFocus: true,
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.EDUCATION_GRADUATION_TIME, {}),
          right: o < 1 ? (0, z.jsx)(Fu, {
            value: a * r.daysPerYear,
            daysPerYear: r.daysPerYear,
            maxMonths: 3 * r.daysPerYear
          }) : (0, z.jsx)(Pc.SelectedInfoPanel.EDUCATION_NO_GRADUATIONS, {})
        }), z.jsx(Ny, {
          disableFocus: true,
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.EDUCATION_DROPOUT_RATE, {}),
          right: z.jsx(Yu, {
            value: o,
            max: 1
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/education-section.tsx", {
      get EducationSection() {
        return Hle;
      },
      set EducationSection(e) {
        Hle = e;
      }
    });
    let Kle = {
      "efficiency-factors": "efficiency-factors_QAK",
      efficiencyFactors: "efficiency-factors_QAK",
      "factor-item": "factor-item_vlO",
      factorItem: "factor-item_vlO",
      name: "name_enb",
      value: "value_A66",
      result: "result_QHn"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/efficiency-section/efficiency-section.module.scss", {
      get classes() {
        return Kle;
      },
      set classes(e) {
        Object.assign(Kle, e);
      }
    });
    var zle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      efficiency: s,
      factors: i
    }) => {
      const a = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: z.jsxs(z.Fragment, {
          children: [i.length > 0 && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(Yle, {
              factors: i
            }), (0, z.jsx)(my, {})]
          }), a && (0, z.jsx)(bb, {
            text: a
          })]
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.EFFICIENCY, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.PercentageSingleFraction
          })
        })
      });
    };
    const Yle = ({
      factors: e
    }) => (0, z.jsx)("div", {
      className: Kle.efficiencyFactors,
      children: e.map((e, t) => (0, z.jsxs)("div", {
        className: Kle.factorItem,
        children: [(0, z.jsx)("div", {
          className: Kle.name,
          children: (0, z.jsx)(Pc.SelectedInfoPanel.EFFICIENCY_FACTORS, {
            hash: e.factor
          })
        }), (0, z.jsx)("div", {
          className: Qu()(Kle.value, zp(S3, e.value)),
          children: (0, z.jsx)(Gc, {
            value: e.value,
            unit: Oc.Percentage,
            signed: true
          })
        }), (0, z.jsx)("div", {
          className: Kle.result,
          children: (0, z.jsx)(Gc, {
            value: e.result,
            unit: Oc.Percentage
          })
        })]
      }, t))
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/efficiency-section/efficiency-section.tsx", {
      get EfficiencySection() {
        return zle;
      },
      set EfficiencySection(e) {
        zle = e;
      }
    });
    var $le = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      capacity: s,
      production: i
    }) => {
      const a = Uw(e, t, n);
      const o = i > 0 && s > 0 ? wd(100 * i / s, 1, 100) : 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: [z.jsx(Ny, {
          disableFocus: true,
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_POWER_PRODUCTION, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.Power
          })
        }), z.jsx(Ny, {
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_POWER_USAGE, {}),
          right: z.jsx(Gc, {
            value: o,
            unit: Oc.Percentage
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/electricity-section.tsx", {
      get ElectricitySection() {
        return $le;
      },
      set ElectricitySection(e) {
        $le = e;
      }
    });
    var qle = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      employeeCount: s,
      maxEmployees: i,
      educationDataEmployees: a,
      educationDataWorkplaces: o
    }) => {
      const r = Uw(e, n, t);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: z.jsxs(z.Fragment, {
          children: [z.jsx(h3, {
            colors: D4,
            labels: F4,
            data: a,
            customLegend: a.values.map((e, t) => (o.values[t] > 0 || t === a.values.length - 1) && (0, z.jsx)(FR, {
              color: D4[t],
              label: F4[t],
              children: t < a.values.length - 1 ? (0, z.jsx)(cu, {
                value: e,
                total: o.values[t],
                unit: Oc.Integer
              }) : (0, z.jsx)(Gc, {
                value: e,
                unit: Oc.Integer
              })
            }, t))
          }), z.jsx(dme, {}), r && (0, z.jsx)(bb, {
            text: r
          })]
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.EMPLOYEES, {}),
          right: z.jsx(cu, {
            value: s,
            total: i,
            unit: Oc.Integer
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/employees-section.tsx", {
      get EmployeesSection() {
        return qle;
      },
      set EmployeesSection(e) {
        qle = e;
      }
    });
    var Xle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      vehicleEfficiency: s
    }) => {
      const i = Uw(e, t, n);
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.EFFICIENCY, {}),
          right: s
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/fire-section.tsx", {
      get FireSection() {
        return Xle;
      },
      set FireSection(e) {
        Xle = e;
      }
    });
    var Qle = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      garbage: s,
      garbageCapacity: i,
      processingSpeed: a,
      processingCapacity: o,
      loadKey: r
    }) => {
      const l = Uw(e, n, t);
      0;
      return z.jsxs(dy, {
        tooltip: l && (0, z.jsx)(bb, {
          text: l
        }),
        children: [i > 0 ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            disableFocus: true,
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.GARBAGE_MANAGEMENT_STORAGE_LABEL, {
              hash: r
            })
          }), (0, z.jsx)(xle, {
            progress: s,
            max: i,
            children: (0, z.jsx)(cu, {
              value: s,
              total: i,
              unit: Oc.Weight
            })
          })]
        }) : undefined, o > 0 ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(dme, {
            small: true
          }), (0, z.jsx)(Ny, {
            disableFocus: true,
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.GARBAGE_MANAGEMENT_PROCESSING_SPEED, {})
          }), (0, z.jsx)(xle, {
            invertColorCodes: true,
            progress: a,
            max: o,
            children: (0, z.jsx)(cu, {
              value: a,
              total: o,
              unit: Oc.WeightPerMonth
            })
          })]
        }) : undefined]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/garbage-section.tsx", {
      get GarbageSection() {
        return Qle;
      },
      set GarbageSection(e) {
        Qle = e;
      }
    });
    var Zle = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      patientCount: s,
      patientCapacity: i
    }) => {
      const a = Uw(e, t, n);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.HEALTHCARE_PATIENTS, {})
        }), z.jsxs(xle, {
          progress: s,
          max: i,
          children: [s, "/", i]
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/healthcare-section.tsx", {
      get HealthcareSection() {
        return Zle;
      },
      set HealthcareSection(e) {
        Zle = e;
      }
    });
    let Jle = {
      "progress-bar": "progress-bar_H27 progress-bar_xWR",
      progressBar: "progress-bar_H27 progress-bar_xWR",
      progress: "progress_Yn6 progress_JAQ"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/level-section/level-progress-bar.module.scss", {
      get classes() {
        return Jle;
      },
      set classes(e) {
        Object.assign(Jle, e);
      }
    });
    let tce = {
      bar: "bar_PEM",
      "level-segment": "level-segment_Reo",
      levelSegment: "level-segment_Reo",
      "construction-segment": "construction-segment_skQ",
      constructionSegment: "construction-segment_skQ",
      label: "label_qUU"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/level-section/level-section.module.scss", {
      get classes() {
        return tce;
      },
      set classes(e) {
        Object.assign(tce, e);
      }
    });
    var sce = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      ...s
    }) => {
      const i = Uw(e, t, n, s.isUnderConstruction);
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: s.isUnderConstruction ? (0, z.jsx)(Pc.SelectedInfoPanel.UNDER_CONSTRUCTION, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.LEVEL, {}),
          right: z.jsx(ice, {
            group: e,
            tooltipKeys: t,
            tooltipTags: n,
            ...s
          })
        })
      });
    };
    const ice = ({
      level: e,
      maxLevel: t,
      isUnderConstruction: n,
      progress: s
    }) => {
      0;
      const i = Y.useMemo(() => t - e, [e, t]);
      0;
      0;
      return z.jsxs("div", {
        className: tce.bar,
        children: [z.jsx("div", {
          className: tce.label,
          children: n ? (0, z.jsx)(Yu, {
            value: s,
            max: 100
          }) : (0, z.jsx)(cu, {
            value: e,
            total: t,
            unit: Oc.Integer
          })
        }), n ? (0, z.jsx)(ace, {
          progress: s,
          max: 100,
          className: tce.constructionSegment
        }) : (0, z.jsxs)(z.Fragment, {
          children: [[...Array(e).keys()].map(e => (0, z.jsx)(ace, {
            progress: 100,
            className: tce.levelSegment
          }, e)), i > 0 && (0, z.jsx)(ace, {
            progress: s,
            className: tce.levelSegment
          }), i > 1 && [...Array(i - 1).keys()].map(e => (0, z.jsx)(ace, {
            progress: 0,
            className: tce.levelSegment
          }, e))]
        })]
      });
    };
    const ace = ({
      progress: e,
      max: t = 100,
      className: n
    }) => (0, z.jsx)(Ete, {
      progress: e,
      max: t,
      className: n,
      theme: Jle
    });
    function oce({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      sortingRate: s,
      sortingCapacity: i,
      localAmount: a,
      unsortedAmount: o,
      outgoingAmount: r,
      storedAmount: l,
      storageCapacity: c,
      localKey: u,
      unsortedKey: d,
      type: m
    }) {
      const h = Uw(e, n, t);
      const g = km();
      0;
      return z.jsxs(dy, {
        tooltip: h && (0, z.jsx)(bb, {
          text: h
        }),
        disableFocus: !g,
        children: [m === gw.PostFacility && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: g,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.MAIL_STORED_MAIL, {
              hash: u
            }),
            right: a
          }), i > 0 || r > 0 ? (0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: g,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.MAIL_STORED_MAIL, {
              hash: "Outgoing"
            }),
            right: r
          }) : undefined, (0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: g,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.MAIL_STORED_MAIL, {
              hash: d
            }),
            right: o
          }), i > 0 ? (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(Ny, {
              uppercase: true,
              disableFocus: g,
              left: (0, z.jsx)(Pc.SelectedInfoPanel.MAIL_SORTING_SPEED, {})
            }), (0, z.jsx)(xle, {
              progress: s,
              max: i,
              children: (0, z.jsx)(cu, {
                value: s,
                total: i,
                unit: Oc.IntegerPerMonth
              })
            })]
          }) : undefined]
        }), c > 0 ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: g,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.MAIL_STORED_MAIL, {
              hash: "Stored"
            })
          }), (0, z.jsxs)(xle, {
            progress: l,
            max: c,
            children: [l, "/", c]
          })]
        }) : undefined]
      });
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/level-section/level-section.tsx", {
      get LevelSection() {
        return sce;
      },
      set LevelSection(e) {
        sce = e;
      }
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/mail-section.tsx", {
      get MailSection() {
        return oce;
      },
      set MailSection(e) {
        oce = e;
      }
    });
    var rce = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      maintenance: s
    }) => {
      const i = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.PARK_MAINTENANCE, {})
        }), z.jsx(xle, {
          progress: s,
          max: 100,
          invertColorCodes: true,
          children: z.jsx(Gc, {
            value: s,
            unit: Oc.Percentage
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/park-section.tsx", {
      get ParkSection() {
        return rce;
      },
      set ParkSection(e) {
        rce = e;
      }
    });
    var lce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      parkedCars: s,
      parkingCapacity: i
    }) => {
      const a = Uw(e, n, t);
      0;
      return z.jsx(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: i > 0 ? (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.PARKING_PARKED, {})
          }), (0, z.jsx)(xle, {
            progress: s,
            max: i,
            children: (0, z.jsx)(cu, {
              value: s,
              total: i,
              unit: Oc.Integer
            })
          })]
        }) : (0, z.jsx)(Ny, {
          uppercase: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.PARKING_PARKED, {}),
          right: (0, z.jsx)(Gc, {
            value: s,
            unit: Oc.Integer
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/parking-section.tsx", {
      get ParkingSection() {
        return lce;
      },
      set ParkingSection(e) {
        lce = e;
      }
    });
    var cce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      prisonerCount: s,
      prisonerCapacity: i
    }) => {
      const a = Uw(e, n, t);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.POLICE_PRISONERS, {})
        }), z.jsxs(xle, {
          progress: s,
          max: i,
          children: [s, "/", i]
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/police-section.tsx", {
      get PoliceSection() {
        return cce;
      },
      set PoliceSection(e) {
        cce = e;
      }
    });
    let uce = {
      disabled: "disabled__qz",
      icon: "icon_rxa",
      indicator: "indicator_DKN",
      label: "label_Pzb",
      pollution: "pollution_USw"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/pollution-section/pollution-section.module.scss", {
      get classes() {
        return uce;
      },
      set classes(e) {
        Object.assign(uce, e);
      }
    });
    var mce = ({
      groundPollutionKey: e,
      airPollutionKey: t,
      noisePollutionKey: n
    }) => (0, z.jsx)(dy, {
      disableFocus: true,
      children: (0, z.jsxs)(ep, {
        children: [e !== hw.none && (0, z.jsx)(Ny, {
          uppercase: true,
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "PollutionSectionGround"
            })
          }),
          left: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_GROUND, {}),
          right: (0, z.jsx)(hce, {
            pollutionKey: e,
            icon: "Media/Game/Icons/GroundPollution.svg"
          })
        }), t !== hw.none && (0, z.jsx)(Ny, {
          uppercase: true,
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "PollutionSectionAir"
            })
          }),
          left: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_AIR, {}),
          right: (0, z.jsx)(hce, {
            pollutionKey: t,
            icon: "Media/Game/Icons/AirPollution.svg"
          })
        }), n !== hw.none && (0, z.jsx)(Ny, {
          uppercase: true,
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "PollutionSectionNoise"
            })
          }),
          left: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_NOISE, {}),
          right: (0, z.jsx)(hce, {
            pollutionKey: n,
            icon: "Media/Game/Icons/NoisePollution.svg"
          })
        })]
      })
    });
    const hce = ({
      pollutionKey: e,
      icon: t
    }) => (0, z.jsxs)("div", {
      className: uce.indicator,
      children: [(0, z.jsx)("div", {
        className: uce.label,
        children: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
          index: e
        })
      }), (0, z.jsx)("img", {
        src: t,
        className: Qu()(uce.icon, gce(0, e))
      }), (0, z.jsx)("img", {
        src: t,
        className: Qu()(uce.icon, gce(1, e))
      }), (0, z.jsx)("img", {
        src: t,
        className: Qu()(uce.icon, gce(2, e))
      })]
    });
    function gce(e, t) {
      switch (t) {
        case hw.none:
          return uce.disabled;
        case hw.low:
          return e > 0 ? uce.disabled : undefined;
        case hw.medium:
          return e > 1 ? uce.disabled : undefined;
        default:
          return;
      }
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/pollution-section/pollution-section.tsx", {
      get PollutionSection() {
        return mce;
      },
      set PollutionSection(e) {
        mce = e;
      }
    });
    var pce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      prisonerCount: s,
      prisonerCapacity: i
    }) => {
      const a = Uw(e, n, t);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.PRISON_PRISONERS, {})
        }), z.jsxs(xle, {
          progress: s,
          max: i,
          children: [s, "/", i]
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/prison-section.tsx", {
      get PrisonSection() {
        return pce;
      },
      set PrisonSection(e) {
        pce = e;
      }
    });
    var fce = ({
      isHousehold: e,
      householdCount: t,
      maxHouseholds: n,
      residentCount: s,
      petCount: i,
      wealthKey: a,
      residence: o,
      residenceEntity: r,
      residenceKey: l,
      educationData: c,
      ageData: u
    }) => {
      0;
      const d = Y.useCallback(() => r && Pw(r), [r]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [null != o && (0, z.jsx)(dy, {
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "ResidentsSectionResidence"
            })
          }),
          children: (0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_RESIDENCE, {
              hash: l
            }),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: o
              })
            })
          })
        }), n > 1 && (0, z.jsx)(dy, {
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "ResidentsSectionHouseholds"
            })
          }),
          children: (0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.HOUSEHOLDS, {}),
            right: (0, z.jsx)(cu, {
              value: t,
              total: n,
              unit: Oc.Integer
            })
          })
        }), z.jsxs(dy, {
          tooltip: z.jsxs(z.Fragment, {
            children: [z.jsx(bb, {
              children: z.jsx(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: e ? "ResidentsSectionHouseholdMembers" : "ResidentsSectionResidents"
              })
            }), z.jsx(my, {}), z.jsx(h3, {
              colors: a4,
              labels: o4,
              data: u
            }), z.jsx(dme, {}), z.jsx(bb, {
              children: z.jsx(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: "ResidentsSectionAge"
              })
            }), z.jsx(my, {}), z.jsx(h3, {
              colors: g3,
              labels: p3,
              data: c
            }), z.jsx(dme, {}), z.jsx(bb, {
              children: z.jsx(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: "ResidentsSectionEducation"
              })
            })]
          }),
          children: [z.jsx(Ny, {
            disableFocus: true,
            uppercase: true,
            left: e ? (0, z.jsx)(Pc.SelectedInfoPanel.HOUSEHOLD_MEMBERS, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.RESIDENTS, {}),
            right: s
          }), i > 0 && (0, z.jsx)(Ny, {
            disableFocus: true,
            subRow: true,
            icon: "Media/Game/Icons/Pet.svg",
            left: (0, z.jsx)(Gc, {
              value: i
            })
          })]
        }), (e || 1 === n && t > 0 || n > 1 && t > 0) && (0, z.jsx)(dy, {
          tooltip: n > 1 ? (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "ResidentsSectionAverageHouseholdWealth"
            })
          }) : (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "ResidentsSectionHouseholdWealth"
            })
          }),
          children: (0, z.jsx)(Ny, {
            uppercase: true,
            left: n > 1 ? (0, z.jsx)(Pc.SelectedInfoPanel.AVERAGE_HOUSEHOLD_WEALTH, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_WEALTH_TITLE, {}),
            right: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_WEALTH, {
              hash: a
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/residents-section.tsx", {
      get ResidentsSection() {
        return fce;
      },
      set ResidentsSection(e) {
        fce = e;
      }
    });
    var xce = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      capacity: s,
      lastProcessed: i,
      purification: a
    }) => {
      const o = Uw(e, t, n);
      const r = i > 0 && s > 0 ? wd(100 * i / s, 1, 100) : 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: o && (0, z.jsx)(bb, {
          text: o
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.SEWAGE_PROCESSING_CAPACITY, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.VolumePerMonth
          })
        }), z.jsx(Ny, {
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.SEWAGE_OUTLET_USAGE, {}),
          right: z.jsx(Gc, {
            value: r,
            unit: Oc.Percentage
          })
        }), a > 0 && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.SEWAGE_PURIFICATION_RATE, {}),
          right: (0, z.jsx)(Gc, {
            value: 100 * a,
            unit: Oc.Percentage
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/sewage-section.tsx", {
      get SewageSection() {
        return xce;
      },
      set SewageSection(e) {
        xce = e;
      }
    });
    var vce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      sheltered: s,
      shelterCapacity: i
    }) => {
      const a = Uw(e, n, t);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.SHELTER_OCCUPANTS, {})
        }), z.jsxs(xle, {
          progress: s,
          max: i,
          children: [s, "/", i]
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/shelter-section.tsx", {
      get ShelterSection() {
        return vce;
      },
      set ShelterSection(e) {
        vce = e;
      }
    });
    var _ce = ({
      children: e,
      className: t
    }) => (0, z.jsx)("div", {
      className: Qu()(cy.infoWrapBox, t),
      children: e
    });
    X.add("game-ui/game/components/selected-info-panel/shared-components/info-section/info-wrap-box.tsx", {
      get InfoWrapBox() {
        return _ce;
      },
      set InfoWrapBox(e) {
        _ce = e;
      }
    });
    let bce = {
      field: "field_lUX",
      header: "header_WRn",
      icon: "icon__9P",
      label: "label_vVZ",
      content: "content_n5J",
      last: "last_uXj"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/resource-item/resource-item.module.scss", {
      get classes() {
        return bce;
      },
      set classes(e) {
        Object.assign(bce, e);
      }
    });
    var Ece = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      stored: s,
      capacity: i,
      resources: a
    }) => {
      const o = Uw(e, n, t);
      const r = a?.filter(e => "NoResource" !== e.key && e.amount > 0);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: o && (0, z.jsx)(bb, {
          text: o
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.WAREHOUSE_STORAGE, {})
        }), z.jsx(xle, {
          plain: true,
          progress: s,
          max: i,
          children: z.jsx(cu, {
            value: s,
            total: i,
            unit: Oc.Weight
          })
        }), r.length > 0 && (0, z.jsx)(_ce, {
          children: r?.map((e, t) => (0, z.jsx)(z6, {
            theme: bce,
            className: Qu()(r.length > 1 && r.length % 2 == 1 && t === r.length - 1 && bce.last),
            icon: `Media/Game/Resources/${e.key}.svg`,
            label: (0, z.jsx)(Pc.Resources.TITLE, {
              hash: e.key
            }),
            children: (0, z.jsx)(Gc, {
              value: e.amount,
              unit: Oc.Weight
            })
          }, e.key))
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/storage-section.tsx", {
      get StorageSection() {
        return Ece;
      },
      set StorageSection(e) {
        Ece = e;
      }
    });
    var Ice = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      capacity: s,
      flow: i
    }) => {
      const a = Uw(e, t, n);
      const o = Math.abs(i) > 0 && s > 0 ? wd(100 * Math.abs(i) / s, 1, 100) : 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_TRANSFORMER_CAPACITY, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.Power
          })
        }), z.jsx(Ny, {
          left: z.jsx(Pc.SelectedInfoPanel.ELECTRICITY_POWER_USAGE, {}),
          right: z.jsx(Gc, {
            value: o,
            unit: Oc.Percentage
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/transformer-section.tsx", {
      get TransformerSection() {
        return Ice;
      },
      set TransformerSection(e) {
        Ice = e;
      }
    });
    var yce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      mainBuilding: s,
      mainBuildingName: i,
      upgrade: a,
      type: o
    }) => {
      const r = Uw(e, n, t);
      0;
      const l = Y.useCallback(() => Pw(s), [s]);
      const c = ll(YL, a) ?? mT;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: true,
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          disableFocus: true,
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.UPGRADE_TYPE, {
            hash: o
          })
        }), z.jsx(lM, {
          components: Nce,
          data: c.properties
        }), z.jsx(Ny, {
          left: z.jsx(Pc.SelectedInfoPanel.MAIN_BUILDING, {}),
          link: z.jsx(Fle, {
            onSelect: l,
            children: z.jsx(Hu, {
              value: i
            })
          })
        })]
      });
    };
    var Sce = ({
      labelId: e,
      unit: t,
      value: n,
      signed: s
    }) => (0, z.jsx)(Ny, {
      disableFocus: true,
      left: (0, z.jsx)(Tc, {
        id: e
      }),
      right: (0, z.jsx)(Gc, {
        value: n,
        unit: t,
        signed: s
      })
    });
    var jce = ({
      labelId: e,
      unit: t,
      value: n,
      signed: s
    }) => {
      const i = t.includes("money");
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ny, {
        disableFocus: true,
        left: z.jsx(Tc, {
          id: e
        }),
        right: z.jsxs(z.Fragment, {
          children: [z.jsx(Gc, {
            value: n.x,
            unit: i ? Oc.Money : undefined
          }), "–", z.jsx(Gc, {
            value: n.y,
            unit: t,
            signed: s
          })]
        })
      });
    };
    var Cce = ({
      labelId: e,
      valueId: t
    }) => (0, z.jsx)(Ny, {
      disableFocus: true,
      left: (0, z.jsx)(Tc, {
        id: e
      }),
      right: (0, z.jsx)(Tc, {
        id: t
      })
    });
    const Nce = {
      [LC]: () => null,
      [AC]: () => null,
      [x9]: Sce,
      [v9]: jce,
      [b9]: Cce,
      [SC]: ({
        electricityConsumption: e,
        waterConsumption: t,
        garbageAccumulation: n
      }) => (0, z.jsxs)(z.Fragment, {
        children: [e > 0 && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.Properties.ELECTRICITY_CONSUMPTION, {}),
          right: (0, z.jsx)(Gc, {
            value: e,
            unit: Oc.Power
          })
        }), t > 0 && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.Properties.WATER_CONSUMPTION, {}),
          right: (0, z.jsx)(Gc, {
            value: t,
            unit: Oc.VolumePerMonth
          })
        }), n > 0 && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.Properties.GARBAGE_ACCUMULATION, {}),
          right: (0, z.jsx)(Gc, {
            value: n,
            unit: Oc.WeightPerMonth
          })
        })]
      }),
      [jC]: ({
        groundPollution: e,
        airPollution: t,
        noisePollution: n
      }) => (0, z.jsxs)(z.Fragment, {
        children: [e > yC.none && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_GROUND, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("img", {
              src: "Media/Game/Icons/GroundPollution.svg",
              className: jy.icon
            }), (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
              index: e
            })]
          })
        }), t > yC.none && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_AIR, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("img", {
              src: "Media/Game/Icons/AirPollution.svg",
              className: jy.icon
            }), (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
              index: t
            })]
          })
        }), n > yC.none && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS_NOISE, {}),
          right: (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("img", {
              src: "Media/Game/Icons/NoisePollution.svg",
              className: jy.icon
            }), (0, z.jsx)(Pc.SelectedInfoPanel.POLLUTION_LEVELS, {
              index: n
            })]
          })
        })]
      }),
      [NC]: ({
        labelId: e,
        minCapacity: t,
        maxCapacity: n,
        voltage: s
      }) => (0, z.jsx)(Ny, {
        disableFocus: true,
        left: (0, z.jsx)(Tc, {
          id: e
        }),
        right: (0, z.jsx)(Pc.Properties.POWER_VOLTAGE_FORMAT, {
          VALUE: (0, z.jsx)(au, {
            min: t,
            max: n,
            unit: Oc.Power
          }),
          VOLTAGE: (0, z.jsx)(Pc.Properties.VOLTAGE, {
            index: s
          })
        })
      }),
      [PC]: ({
        stops: e
      }) => (0, z.jsx)(z.Fragment, {
        children: Object.entries(e).map(([e, t], n) => t > 0 && (0, z.jsx)(Ny, {
          disableFocus: true,
          left: (0, z.jsx)(Pc.Properties.TRANSPORT_STOP_COUNT, {
            hash: e
          }),
          right: (0, z.jsx)(Gc, {
            value: t,
            unit: Oc.Integer
          })
        }, n))
      })
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/upgrade-properties-section.tsx", {
      get UpgradePropertiesSection() {
        return yce;
      },
      set UpgradePropertiesSection(e) {
        yce = e;
      },
      get NumberPropertyField() {
        return Sce;
      },
      set NumberPropertyField(e) {
        Sce = e;
      },
      get Number2PropertyField() {
        return jce;
      },
      set Number2PropertyField(e) {
        jce = e;
      },
      get StringPropertyField() {
        return Cce;
      },
      set StringPropertyField(e) {
        Cce = e;
      }
    });
    var Oce = el("UpgradesSection", "delete");
    var Pce = el("UpgradesSection", "relocate");
    var Lce = el("UpgradesSection", "focus");
    var Ace = el("UpgradesSection", "toggle");
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/upgrades-section/upgrades-section-bindings.ts", {
      get deleteUpgrade() {
        return Oce;
      },
      set deleteUpgrade(e) {
        Oce = e;
      },
      get relocateUpgrade() {
        return Pce;
      },
      set relocateUpgrade(e) {
        Pce = e;
      },
      get focusUpgrade() {
        return Lce;
      },
      set focusUpgrade(e) {
        Lce = e;
      },
      get toggleUpgrade() {
        return Ace;
      },
      set toggleUpgrade(e) {
        Ace = e;
      }
    });
    let Mce = {
      "upgrades-section": "upgrades-section_Zb5",
      upgradesSection: "upgrades-section_Zb5",
      details: "details_pZM",
      detail: "detail_kBc",
      "delete-button": "delete-button_z_s",
      deleteButton: "delete-button_z_s",
      dropdown: "dropdown_Rc8",
      toolIcon: "toolIcon_nit",
      item: "item_q7g",
      thumb: "thumb_zKj",
      label: "label_TkD",
      hint: "hint_ZRS",
      "dropdown-item-hint": "dropdown-item-hint_iFL",
      dropdownItemHint: "dropdown-item-hint_iFL",
      "dropdown-item": "dropdown-item_NmT",
      dropdownItem: "dropdown-item_NmT",
      "pad-left": "pad-left_Uwn",
      padLeft: "pad-left_Uwn",
      "pad-right": "pad-right_syk",
      padRight: "pad-right_syk"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/upgrades-section/upgrades-section.module.scss", {
      get classes() {
        return Mce;
      },
      set classes(e) {
        Object.assign(Mce, e);
      }
    });
    var kce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      extensions: s,
      subBuildings: i
    }) => {
      const a = Uw(e, n, t);
      const o = km();
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: true,
        tooltip: a && (0, z.jsx)(bb, {
          children: a
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: !o || s.length + i.length > 0,
          left: z.jsx(Pc.SelectedInfoPanel.UPGRADES, {}),
          right: z.jsx(Gc, {
            value: s.length + i.length
          })
        }), s.length > 0 && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            disableFocus: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.EXTENSIONS, {})
          }), (0, z.jsx)(ep, {
            children: s.map((e, t) => (0, z.jsx)(Fce, {
              upgrade: e
            }, t))
          })]
        }), i.length > 0 && (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)(Ny, {
            disableFocus: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.SUB_BUILDINGS, {})
          }), (0, z.jsx)(ep, {
            children: i.map((e, t) => (0, z.jsx)(Dce, {
              upgrade: e
            }, t))
          })]
        })]
      });
    };
    const Dce = ({
      upgrade: e
    }) => {
      0;
      const t = Y.useContext(lE);
      0;
      const n = Y.useCallback(() => {
        Oce(e.entity);
      }, [e.entity]);
      0;
      const s = Y.useCallback(() => {
        0;
        0;
        0;
        t.showDialog(z.jsx(LI, {
          title: z.jsx(Pc.Common.WARNING, {}),
          message: z.jsx(Pc.SelectedInfoPanel.CONFIRM_DELETE_WARNING, {}),
          onConfirm: n
        }));
      }, [t, n]);
      0;
      const i = Y.useCallback(() => Pce(e.entity), [e]);
      0;
      const a = Y.useCallback(() => Lce(e.entity), [e]);
      0;
      const o = Y.useCallback(() => Ace(e.entity), [e]);
      0;
      const r = Y.useCallback(() => Pw(e.entity), [e]);
      0;
      0;
      0;
      return z.jsx(Ny, {
        disableFocus: true,
        subRow: true,
        left: z.jsx(Hu, {
          value: e.name
        }),
        right: z.jsx(Gce, {
          disabled: e.disabled,
          focused: e.focused,
          handleDelete: s,
          handleToggle: o,
          handleRelocate: i,
          handleFocus: a,
          handleSelect: r
        })
      });
    };
    const Fce = ({
      upgrade: e
    }) => {
      0;
      const t = Y.useContext(lE);
      0;
      const n = Y.useCallback(() => {
        Oce(e.entity);
      }, [e.entity]);
      0;
      const s = Y.useCallback(() => {
        0;
        0;
        0;
        t.showDialog(z.jsx(LI, {
          title: z.jsx(Pc.Common.WARNING, {}),
          message: z.jsx(Pc.SelectedInfoPanel.CONFIRM_DELETE_WARNING, {}),
          onConfirm: n
        }));
      }, [t, n]);
      0;
      const i = Y.useCallback(() => Ace(e.entity), [e]);
      0;
      const a = Y.useCallback(() => Pw(e.entity), [e]);
      0;
      0;
      0;
      return z.jsx(Ny, {
        disableFocus: true,
        subRow: true,
        left: z.jsx(Hu, {
          value: e.name
        }),
        right: z.jsx(Gce, {
          disabled: e.disabled,
          focused: e.focused,
          handleSelect: a,
          handleDelete: s,
          handleToggle: i
        })
      });
    };
    const Uce = {
      ...P_,
      hover: null,
      focus: null
    };
    const Bce = new Tg("SELECT_KEY");
    const Gce = ({
      disabled: e,
      focused: t,
      handleSelect: n,
      handleToggle: s,
      handleDelete: i,
      handleRelocate: a,
      handleFocus: o
    }) => {
      0;
      const [r, l] = Y.useState(false);
      0;
      const [c, u] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(LT, {
          action: r ? "Back" : "Select",
          active: c,
          className: Mce.hint
        }), z.jsx(Lh, {
          onFocusChange: u,
          children: z.jsx(ny, {
            theme: jY,
            initialFocused: Bce,
            alignment: "right",
            onToggle: l,
            content: z.jsxs(z.Fragment, {
              children: [z.jsx(Vce, {
                onChange: n,
                focusKey: Bce,
                children: z.jsxs("div", {
                  className: Mce.item,
                  children: [z.jsx(W_, {
                    src: "Media/Glyphs/ViewInfo.svg",
                    className: Mce.thumb
                  }), z.jsx("div", {
                    className: Mce.label,
                    children: z.jsx(Pc.SelectedInfoPanel.SELECT_UPGRADE, {})
                  })]
                })
              }), o && (0, z.jsx)(Vce, {
                onChange: o,
                children: (0, z.jsxs)("div", {
                  className: Mce.item,
                  children: [(0, z.jsx)("img", {
                    src: "Media/Game/Icons/MapMarker.svg",
                    className: Mce.thumb
                  }), (0, z.jsx)("div", {
                    className: Mce.label,
                    children: t ? (0, z.jsx)(Pc.SelectedInfoPanel.UNFOCUS_UPGRADE, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.FOCUS_UPGRADE, {})
                  })]
                })
              }), a && (0, z.jsx)(Vce, {
                onChange: a,
                children: (0, z.jsxs)("div", {
                  className: Mce.item,
                  children: [(0, z.jsx)("img", {
                    src: "Media/Game/Icons/Relocate.svg",
                    className: Mce.thumb
                  }), (0, z.jsx)("div", {
                    className: Mce.label,
                    children: (0, z.jsx)(Pc.SelectedInfoPanel.RELOCATE_UPGRADE, {})
                  })]
                })
              }), z.jsx(Vce, {
                onChange: s,
                children: z.jsxs("div", {
                  className: Mce.item,
                  children: [z.jsx(W_, {
                    src: "Media/Glyphs/OnOff.svg",
                    className: Mce.thumb
                  }), z.jsx("div", {
                    className: Mce.label,
                    children: e ? (0, z.jsx)(Pc.SelectedInfoPanel.REACTIVATE_UPGRADE, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.DEACTIVATE_UPGRADE, {})
                  })]
                })
              }), z.jsx(Vce, {
                onChange: i,
                children: z.jsxs("div", {
                  className: Mce.item,
                  children: [z.jsx(W_, {
                    src: "Media/Glyphs/Trash.svg",
                    className: Mce.thumb
                  }), z.jsx("div", {
                    className: Mce.label,
                    children: z.jsx(Pc.SelectedInfoPanel.REMOVE_UPGRADE, {})
                  })]
                })
              })]
            }),
            children: z.jsx(sy, {
              sounds: Uce,
              className: Mce.dropdown,
              children: z.jsx(W_, {
                src: "Media/Glyphs/Gear.svg",
                className: Mce.toolIcon
              })
            })
          })
        })]
      });
    };
    const Vce = ({
      focusKey: e,
      children: t,
      onChange: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      const a = km();
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: i,
        children: z.jsxs(oy, {
          value: n,
          onChange: n,
          focusKey: e,
          className: Qu()(a && Mce.padRight, a && !s && Mce.padLeft, Mce.dropdownItem),
          children: [z.jsx(LT, {
            action: "Select",
            active: s,
            className: Mce.dropdownItemHint
          }), t]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/upgrades-section/upgrades-section.tsx", {
      get UpgradesSection() {
        return kce;
      },
      set UpgradesSection(e) {
        kce = e;
      }
    });
    var Hce = Y.memo(function ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      upkeeps: s,
      total: i,
      inactive: a
    }) {
      const o = Uw(e, n, t);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: o && (0, z.jsx)(bb, {
          children: o
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.UPKEEP, {})
        }), s.map((e, t) => (0, z.jsx)(Ny, {
          disableFocus: true,
          left: Kce(e, a),
          right: (0, z.jsx)(Gc, {
            value: e.price,
            unit: Oc.MoneyPerMonth
          })
        }, t)), z.jsx(Ny, {
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.UPKEEP_TOTAL, {}),
          right: z.jsx(Gc, {
            value: i,
            unit: Oc.MoneyPerMonth
          })
        })]
      });
    }, (e, t) => Kr(e, t, 10));
    function Kce(e, t) {
      return "Money" === e.localeKey ? 0 === e.titleId.length ? (0, z.jsx)(Pc.SelectedInfoPanel.WAGES, {}) : t ? e.count > 1 ? (0, z.jsx)(Pc.SelectedInfoPanel.UPKEEP_MAINTENANCE_INACTIVE_COMBINED, {
        BUILDING: (0, z.jsx)(Tc, {
          id: e.titleId
        }),
        AMOUNT: (0, z.jsx)(Gc, {
          value: e.count
        })
      }) : (0, z.jsx)(Pc.SelectedInfoPanel.UPKEEP_MAINTENANCE_INACTIVE, {
        BUILDING: (0, z.jsx)(Tc, {
          id: e.titleId
        })
      }) : e.count > 1 ? (0, z.jsx)(Pc.SelectedInfoPanel.UPKEEP_MAINTENANCE_COMBINED, {
        BUILDING: (0, z.jsx)(Tc, {
          id: e.titleId
        }),
        AMOUNT: (0, z.jsx)(Gc, {
          value: e.count
        })
      }) : (0, z.jsx)(Pc.SelectedInfoPanel.UPKEEP_MAINTENANCE, {
        BUILDING: (0, z.jsx)(Tc, {
          id: e.titleId
        })
      }) : (0, z.jsx)(Pc.SelectedInfoPanel.UPKEEPFORMAT, {
        RESOURCE: (0, z.jsx)(Pc.Resources.TITLE, {
          hash: e.localeKey
        }),
        AMOUNT: (0, z.jsx)(Gc, {
          value: e.amount,
          unit: Wce(e.localeKey)
        })
      });
    }
    function Wce(e) {
      switch (e) {
        case "Telecom":
        case "Financial":
        case "Media":
        case "Entertainment":
        case "Recreation":
          return Oc.Integer;
        default:
          return Oc.Weight;
      }
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/upkeep-section.tsx", {
      get UpkeepSection() {
        return Hce;
      },
      set UpkeepSection(e) {
        Hce = e;
      }
    });
    var zce = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      capacity: s,
      lastProduction: i,
      pollution: a
    }) => {
      const o = Uw(e, n, t);
      const r = i > 0 && s > 0 ? wd(100 * i / s, 1, 100) : 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: o && (0, z.jsx)(bb, {
          text: o
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.WATER_OUTPUT, {}),
          right: z.jsx(Gc, {
            value: s,
            unit: Oc.VolumePerMonth
          })
        }), z.jsx(Ny, {
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.WATER_PUMP_USAGE, {}),
          right: z.jsx(Gc, {
            value: r,
            unit: Oc.Percentage
          })
        }), z.jsx(Ny, {
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.WATER_PUMP_POLLUTION, {}),
          right: z.jsx(Yu, {
            value: a,
            max: 1
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/building-sections/water-section.tsx", {
      get WaterSection() {
        return zce;
      },
      set WaterSection(e) {
        zce = e;
      }
    });
    var Yce = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      typeKey: s,
      owner: i,
      ownerEntity: a,
      destination: o,
      destinationEntity: r
    }) => {
      0;
      const l = Y.useCallback(() => a && Pw(a), [a]);
      0;
      const c = Y.useCallback(() => r && Pw(r), [r]);
      const u = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        disableFocus: true,
        tooltip: u && (0, z.jsx)(bb, {
          text: u
        }),
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.ANIMAL_TYPE, {
              hash: s
            })
          }), null != i && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: l,
              children: (0, z.jsx)(Hu, {
                value: i
              })
            })
          }), null != o && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: c,
              children: (0, z.jsx)(Hu, {
                value: o
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/citizen-sections/animal-section.tsx", {
      get AnimalSection() {
        return Yce;
      },
      set AnimalSection(e) {
        Yce = e;
      }
    });
    var $ce = ({
      citizenKey: e,
      stateKey: t,
      household: n,
      householdEntity: s,
      residence: i,
      residenceEntity: a,
      residenceKey: o,
      workplace: r,
      workplaceEntity: l,
      workplaceKey: c,
      schoolLevel: u,
      tooltipTags: d,
      school: m,
      schoolEntity: h,
      destination: g,
      destinationEntity: p,
      educationKey: f,
      ageKey: x,
      wealthKey: v,
      occupationKey: _,
      jobLevelKey: b
    }) => {
      0;
      const T = Y.useCallback(() => s && Pw(s), [s]);
      0;
      const E = Y.useCallback(() => a && Pw(a), [a]);
      0;
      const I = Y.useCallback(() => l && Pw(l), [l]);
      0;
      const y = Y.useCallback(() => h && Pw(h), [h]);
      0;
      const S = Y.useCallback(() => p && Pw(p), [p]);
      const j = Fw(["CitizenSectionOccupation", "Unknown" !== b ? "CitizenSectionJobTitle" : null]);
      const C = d.includes("Male");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(dy, {
          disableFocus: null != m,
          tooltip: z.jsx(bb, {
            children: z.jsx(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "CitizenSection" + e
            })
          }),
          children: [z.jsx(Ny, {
            uppercase: true,
            disableFocus: null == m,
            left: C ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_TYPE_MALE, {
              hash: e
            }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_TYPE_FEMALE, {
              hash: e
            }),
            right: C ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_STATE_MALE, {
              hash: t
            }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_STATE_FEMALE, {
              hash: t
            })
          }), z.jsx(Ny, {
            subRow: true,
            disableFocus: null == m,
            left: z.jsx(Pc.SelectedInfoPanel.CITIZEN_AGE_TITLE, {}),
            right: C ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_AGE_MALE, {
              hash: x
            }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_AGE_FEMALE, {
              hash: x
            })
          }), z.jsx(Ny, {
            subRow: true,
            disableFocus: null == m,
            left: z.jsx(Pc.SelectedInfoPanel.CITIZEN_EDUCATION_TITLE, {}),
            right: C ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_EDUCATION_MALE, {
              hash: f
            }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_EDUCATION_FEMALE, {
              hash: f
            })
          }), null != m && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_SCHOOL_TITLE, {
              index: u
            }),
            link: (0, z.jsx)(Fle, {
              onSelect: y,
              children: (0, z.jsx)(Hu, {
                value: m
              })
            })
          })]
        }), z.jsx(dy, {
          disableFocus: true,
          tooltip: z.jsx(bb, {
            children: z.jsx(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "CitizenSectionHousehold" + e
            })
          }),
          children: z.jsxs(ep, {
            direction: Mg.Vertical,
            children: [null != n && (0, z.jsx)(Ny, {
              uppercase: true,
              left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_HOUSEHOLD, {}),
              link: (0, z.jsx)(Fle, {
                onSelect: T,
                children: (0, z.jsx)(Hu, {
                  value: n
                })
              })
            }), z.jsx(Ny, {
              subRow: true,
              left: z.jsx(Pc.SelectedInfoPanel.CITIZEN_WEALTH_TITLE, {}),
              right: C ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_WEALTH_MALE, {
                hash: v
              }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_WEALTH_FEMALE, {
                hash: v
              })
            }), null != i && (0, z.jsx)(Ny, {
              subRow: true,
              left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_RESIDENCE, {
                hash: o
              }),
              link: (0, z.jsx)(Fle, {
                onSelect: E,
                children: (0, z.jsx)(Hu, {
                  value: i
                })
              })
            })]
          })
        }), "Tourist" !== _ && (0, z.jsxs)(dy, {
          disableFocus: null != r,
          tooltip: null != j && (0, z.jsx)(bb, {
            children: j
          }),
          children: [(0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_OCCUPATION_TITLE, {}),
            right: C ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_OCCUPATION_MALE, {
              hash: _
            }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_OCCUPATION_FEMALE, {
              hash: _
            })
          }), "Unknown" !== b && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_JOB_TITLE, {}),
            right: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_JOB_LEVEL, {
              hash: b
            })
          }), null != r && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_WORKPLACE, {
              hash: c
            }),
            link: (0, z.jsx)(Fle, {
              onSelect: I,
              children: (0, z.jsx)(Hu, {
                value: r
              })
            })
          })]
        }), null != g && (0, z.jsx)(dy, {
          disableFocus: true,
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "CitizenSectionDestination"
            })
          }),
          children: (0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: S,
              children: (0, z.jsx)(Hu, {
                value: g
              })
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/citizen-sections/citizen-section.tsx", {
      get CitizenSection() {
        return $ce;
      },
      set CitizenSection(e) {
        $ce = e;
      }
    });
    var qce = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      origin: s,
      originEntity: i,
      destination: a,
      destinationEntity: o
    }) => {
      0;
      const r = Y.useCallback(() => i && Pw(i), [i]);
      0;
      const l = Y.useCallback(() => o && Pw(o), [o]);
      const c = Uw(e, t, n, true);
      0;
      0;
      return z.jsx(dy, {
        disableFocus: true,
        tooltip: c && (0, z.jsx)(bb, {
          text: c
        }),
        children: z.jsxs(ep, {
          children: [null != s && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: r,
              children: (0, z.jsx)(Hu, {
                value: s
              })
            })
          }), null != a && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: l,
              children: (0, z.jsx)(Hu, {
                value: a
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/citizen-sections/dummy-human-section.tsx", {
      get DummyHumanSection() {
        return qce;
      },
      set DummyHumanSection(e) {
        qce = e;
      }
    });
    let Xce = {
      notification: "notification_CLy item-focused_FuT",
      "full-width": "full-width_Qk1",
      fullWidth: "full-width_Qk1",
      icon: "icon_UMr",
      label: "label_RLF",
      badge: "badge_ooc",
      "badge-icon": "badge-icon_ubF",
      badgeIcon: "badge-icon_ubF"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/notification/notification.module.scss", {
      get classes() {
        return Xce;
      },
      set classes(e) {
        Object.assign(Xce, e);
      }
    });
    var Zce = ({
      notification: e,
      anchorElRef: t
    }) => (0, z.jsx)(bg, {
      direction: "right",
      alignment: "center",
      anchorElRef: t,
      tooltip: (0, z.jsx)(bb, {
        children: (0, z.jsx)(Pc.Notifications.DESCRIPTION, {
          hash: e.key
        })
      }),
      children: (0, z.jsxs)(Ep, {
        className: Qu()(Xce.notification, Xce.fullWidth),
        children: [(0, z.jsx)("img", {
          src: e.iconPath,
          className: Xce.icon
        }), (0, z.jsxs)("div", {
          className: Xce.label,
          children: [(0, z.jsx)(Pc.Notifications.TITLE, {
            hash: e.key
          }), e.count > 1 && (0, z.jsx)(sue, {
            className: Xce.badge,
            children: (0, z.jsx)(Gc, {
              value: e.count
            })
          })]
        })]
      })
    });
    var Jce = ({
      notification: e,
      anchorElRef: t,
      tooltipTags: n
    }) => {
      const s = n?.includes("Male");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(bg, {
          direction: "right",
          alignment: "center",
          anchorElRef: t,
          tooltip: z.jsx(bb, {
            children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_HAPPINESS_DESCRIPTION, {
              hash: e.key
            })
          }),
          children: z.jsxs(Ep, {
            className: Xce.notification,
            children: [z.jsx("img", {
              src: e.iconPath,
              className: Xce.icon
            }), z.jsx("div", {
              className: Xce.label,
              children: s ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_HAPPINESS_TITLE_MALE, {
                hash: e.key
              }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_HAPPINESS_TITLE_FEMALE, {
                hash: e.key
              })
            })]
          })
        })
      });
    };
    var eue = ({
      notification: e
    }) => (0, z.jsxs)(Ep, {
      className: Xce.notification,
      children: [(0, z.jsx)("img", {
        src: e.iconPath,
        className: Xce.icon
      }), (0, z.jsx)("div", {
        className: Xce.label,
        children: (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_HAPPINESS_TITLE, {
          hash: e.key
        })
      })]
    });
    var tue = ({
      notification: e
    }) => (0, z.jsxs)(Ep, {
      className: Xce.notification,
      children: [(0, z.jsx)("img", {
        src: e.iconPath,
        className: Xce.icon
      }), (0, z.jsx)("div", {
        className: Xce.label,
        children: (0, z.jsx)(Pc.SelectedInfoPanel.COMPANY_PROFITABILITY_TITLE, {
          hash: e.key
        })
      })]
    });
    var nue = ({
      notification: e,
      anchorElRef: t,
      tooltipTags: n
    }) => {
      const s = n?.includes("Male");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsx(bg, {
          direction: "right",
          alignment: "center",
          anchorElRef: t,
          tooltip: z.jsx(bb, {
            children: z.jsx(Pc.SelectedInfoPanel.CITIZEN_CONDITION_DESCRIPTION, {
              hash: e.key
            })
          }),
          children: z.jsxs(Ep, {
            className: Xce.notification,
            children: [z.jsx("img", {
              src: e.iconPath,
              className: Xce.icon
            }), z.jsx("div", {
              className: Xce.label,
              children: s ? (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_CONDITION_TITLE_MALE, {
                hash: e.key
              }) : (0, z.jsx)(Pc.SelectedInfoPanel.CITIZEN_CONDITION_TITLE_FEMALE, {
                hash: e.key
              })
            })]
          })
        })
      });
    };
    var sue = ({
      className: e,
      children: t
    }) => (0, z.jsxs)("div", {
      className: Qu()(Xce.badge, e),
      children: [t, (0, z.jsx)(W_, {
        src: "Media/Game/Icons/Citizen.svg",
        className: Xce.badgeIcon
      })]
    });
    X.add("game-ui/game/components/selected-info-panel/shared-components/notification/notification.tsx", {
      get Notification() {
        return Zce;
      },
      set Notification(e) {
        Zce = e;
      },
      get HappinessNotification() {
        return Jce;
      },
      set HappinessNotification(e) {
        Jce = e;
      },
      get AverageHappinessNotification() {
        return eue;
      },
      set AverageHappinessNotification(e) {
        eue = e;
      },
      get ProfitabilityNotification() {
        return tue;
      },
      set ProfitabilityNotification(e) {
        tue = e;
      },
      get ConditionNotification() {
        return nue;
      },
      set ConditionNotification(e) {
        nue = e;
      },
      get NotificationBadge() {
        return sue;
      },
      set NotificationBadge(e) {
        sue = e;
      }
    });
    let iue = {
      "status-section": "status-section_J1G notifications-section_cKq",
      statusSection: "status-section_J1G notifications-section_cKq",
      row: "row_Azp",
      bottom: "bottom_Xm5"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/citizen-sections/status-section.module.scss", {
      get classes() {
        return iue;
      },
      set classes(e) {
        Object.assign(iue, e);
      }
    });
    var oue = ({
      conditions: e,
      notifications: t,
      happiness: n,
      focusKey: s,
      tooltipTags: i
    }) => {
      0;
      const a = Y.useRef(null);
      0;
      0;
      0;
      return z.jsx(Ep, {
        ref: a,
        focusKey: s,
        className: iue.statusSection,
        children: z.jsxs(ep, {
          children: [z.jsxs("div", {
            className: Qu()(iue.row, iue.top),
            children: [n && (0, z.jsx)(Jce, {
              anchorElRef: a,
              notification: n,
              tooltipTags: i
            }), e?.length > 0 && e?.map(e => (0, z.jsx)(nue, {
              anchorElRef: a,
              notification: e,
              tooltipTags: i
            }, e.key))]
          }), t?.length > 0 && t?.map((e, t) => (0, z.jsx)("div", {
            className: Qu()(iue.row, iue.bottom),
            children: (0, z.jsx)(Zce, {
              anchorElRef: a,
              notification: e,
              tooltipTags: i
            })
          }, t))]
        })
      });
    };
    function rue(e) {
      tl("ColorSection", "setColor", Gu(e, "Game.UI.Common.UIColor"));
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/citizen-sections/status-section.tsx", {
      get StatusSection() {
        return oue;
      },
      set StatusSection(e) {
        oue = e;
      }
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/color-section/color-section-bindings.ts", {
      get setColor() {
        return rue;
      },
      set setColor(e) {
        rue = e;
      }
    });
    var lue = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      color: s
    }) => {
      const i = Uw(e, n, t);
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        disableFocus: true,
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.COLOR, {}),
          right: z.jsx(IJ, {
            value: s,
            onChange: rue,
            className: _oe.colorField
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/color-section/color-section.tsx", {
      get ColorSection() {
        return lue;
      },
      set ColorSection(e) {
        lue = e;
      }
    });
    var cue = el("LinesSection", "toggle");
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/lines-section/lines-section-bindings.ts", {
      get toggleRouteActive() {
        return cue;
      },
      set toggleRouteActive(e) {
        cue = e;
      }
    });
    let uue = {
      detail: "detail_dEX item-focused_FuT",
      color: "color_YMp",
      toggle: "toggle_MTW",
      button: "button_UgX item-mouse-states_Fmi item-focused_FuT",
      row: "row_aZw",
      "focusable-toggle": "focusable-toggle_EKK",
      focusableToggle: "focusable-toggle_EKK",
      "space-between": "space-between_r5l",
      spaceBetween: "space-between_r5l",
      icon: "icon_BuO icon_hE2",
      "toggle-icon": "toggle-icon_tCU",
      toggleIcon: "toggle-icon_tCU",
      "toggle-icon-off": "toggle-icon-off_pNM",
      toggleIconOff: "toggle-icon-off_pNM",
      "toggle-button": "toggle-button_lLq",
      toggleButton: "toggle-button_lLq"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/lines-section/lines-section.module.scss", {
      get classes() {
        return uue;
      },
      set classes(e) {
        Object.assign(uue, e);
      }
    });
    var mue = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      hasLines: s,
      lines: i,
      hasPassengers: a,
      passengers: o
    }) => {
      const r = Uw(e, n, t, true);
      const l = km();
      0;
      return z.jsxs(z.Fragment, {
        children: [a && (0, z.jsx)(dy, {
          tooltip: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "LinesSectionWaitingPassengers"
            })
          }),
          children: (0, z.jsx)(Ny, {
            uppercase: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.WAITING_PASSENGERS, {}),
            right: (0, z.jsx)(Gc, {
              value: o,
              unit: Oc.Integer
            })
          })
        }), s && (0, z.jsxs)(dy, {
          disableFocus: true,
          tooltip: r && (0, z.jsx)(bb, {
            text: r
          }),
          children: [(0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: !!i.length,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.LINES, {}),
            right: i.length
          }), (0, z.jsx)(Ep, {
            children: (0, z.jsx)(ep, {
              children: i && i.length > 0 && i.map((e, t) => (0, z.jsx)(hue, {
                line: e
              }, t))
            })
          }), l && (0, z.jsx)(Lle, {
            label: (0, z.jsx)(Pc.Transport.LINES_OVERVIEW_BUTTON, {}),
            onSelect: Zv
          })]
        })]
      });
    };
    var hue = ({
      line: e
    }) => {
      const t = sl(Ow);
      0;
      const n = Y.useMemo(() => Ur(e.entity, t), [e.entity, t]);
      0;
      const s = Y.useCallback(() => Pw(e.entity), [e.entity]);
      0;
      const i = Y.useCallback(() => Lw(e.entity), [e.entity]);
      0;
      const a = Y.useCallback(() => cue(e.entity, !e.active), [e.active, e.entity]);
      0;
      const o = Y.useMemo(() => ({
        Select: s,
        "Select Route": i
      }), [s, i]);
      const r = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Tp, {
        className: Qu()(uue.detail, uue.row, uue.spaceBetween),
        children: z.jsx(Lg, {
          actions: o,
          children: z.jsxs(ep, {
            children: [z.jsxs("div", {
              className: Qu()(uue.focusableToggle, uue.row),
              children: [z.jsx(P8, {
                focusKey: Eg,
                className: uue.toggle,
                onChange: i,
                checked: n,
                style: {
                  borderColor: tN(e.color)
                }
              }), z.jsx(Hu, {
                value: e.name
              })]
            }), !r && (0, z.jsxs)(L_, {
              onSelect: s,
              onClick: Ob,
              className: uue.button,
              children: [(0, z.jsx)("img", {
                src: "Media/Glyphs/ViewInfo.svg",
                className: uue.icon
              }), (0, z.jsx)(Pc.SelectedInfoPanel.DETAILS, {})]
            }), z.jsx(L_, {
              className: Qu()(uue.button, uue.toggleButton),
              onSelect: a,
              onClick: Ob,
              children: z.jsx(W_, {
                src: "Media/Glyphs/OnOff.svg",
                className: Qu()(uue.toggleIcon, !e.active && uue.toggleIconOff)
              })
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/lines-section/lines-section.tsx", {
      get LinesSection() {
        return mue;
      },
      set LinesSection(e) {
        mue = e;
      },
      get LineItem() {
        return hue;
      },
      set LineItem(e) {
        hue = e;
      }
    });
    var gue = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      localServiceBuildings: s
    }) => {
      const i = Uw(e, n, t);
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: s.length > 0,
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.LOCAL_SERVICES_TITLE, {}),
          right: s.length
        }), s.length > 0 ? (0, z.jsx)(ep, {
          children: s.map((e, t) => (0, z.jsx)(pue, {
            building: e
          }, t))
        }) : (0, z.jsx)(Ny, {
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.LOCAL_SERVICES_NONE_ASSIGNED, {})
        })]
      });
    };
    const pue = ({
      building: e
    }) => {
      0;
      const t = Y.useCallback(() => Pw(e.entity), [e]);
      0;
      0;
      0;
      0;
      return z.jsx(Ny, {
        subRow: true,
        icon: e.serviceIcon ?? undefined,
        left: z.jsx(Hu, {
          value: e.name
        }),
        link: z.jsx(Fle, {
          onSelect: t,
          children: z.jsx(Pc.SelectedInfoPanel.DETAILS, {})
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/local-services-section/local-services-section.tsx", {
      get LocalServicesSection() {
        return gue;
      },
      set LocalServicesSection(e) {
        gue = e;
      }
    });
    var fue = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      destroyer: s
    }) => {
      const i = Uw(e, t, n);
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: i && (0, z.jsx)(bb, {
          text: i
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.DESTROYED_TREE, {})
        }), null != s && (0, z.jsx)(Cle, {
          children: (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.DESTROYED_TREE_DESCRIPTION, {
              hash: s
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/object-sections/destroyed-tree-section.tsx", {
      get DestroyedTreeSection() {
        return fue;
      },
      set DestroyedTreeSection(e) {
        fue = e;
      }
    });
    var xue = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      resourceAmount: s,
      resourceKey: i
    }) => {
      const a = Uw(e, t, n);
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: a && (0, z.jsx)(bb, {
          text: a
        }),
        children: z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.RESOURCE, {
            hash: i
          }),
          right: s
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/resource-section.tsx", {
      get ResourceSection() {
        return xue;
      },
      set ResourceSection(e) {
        xue = e;
      }
    });
    let vue = {
      "border-highlight": "border-highlight_ze2",
      borderHighlight: "border-highlight_ze2"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/road-section/road-section.module.scss", {
      get classes() {
        return vue;
      },
      set classes(e) {
        Object.assign(vue, e);
      }
    });
    var bue = ({
      volumeData: e,
      flowData: t,
      length: n,
      bestCondition: s,
      worstCondition: i,
      condition: a,
      upkeep: o
    }) => {
      const r = Dw("RoadSectionLength");
      const l = Dw("RoadSectionCondition");
      const c = Dw("RoadSectionUpkeep");
      const u = Dw("RoadSectionFlow");
      const d = Dw("RoadSectionVolume");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsx(dy, {
          tooltip: c && (0, z.jsx)(bb, {
            text: c
          }),
          children: z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.ROAD_UPKEEP, {}),
            right: z.jsx(Gc, {
              value: o,
              unit: Oc.MoneyPerMonth
            })
          })
        }), z.jsx(dy, {
          tooltip: r && (0, z.jsx)(bb, {
            text: r
          }),
          children: z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.ROAD_LENGTH, {}),
            right: z.jsx(Gc, {
              value: n,
              unit: Oc.Length
            })
          })
        }), z.jsx(dy, {
          tooltip: l && (0, z.jsx)(bb, {
            text: l
          }),
          children: z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.ROAD_CONDITION, {}),
            right: s === a || i === s || a === s ? (0, z.jsx)(Gc, {
              value: s,
              unit: Oc.Percentage
            }) : (0, z.jsx)(Pc.SelectedInfoPanel.ROAD_CONDITION_FORMAT, {
              WORST: (0, z.jsx)(Gc, {
                value: i,
                unit: Oc.Percentage
              }),
              BEST: (0, z.jsx)(Gc, {
                value: s,
                unit: Oc.Percentage
              }),
              AVG: (0, z.jsx)(Gc, {
                value: a,
                unit: Oc.Percentage
              })
            })
          })
        }), z.jsx(dy, {
          disableFocus: true,
          tooltip: u && (0, z.jsx)(bb, {
            text: u
          }),
          children: z.jsxs(Ep, {
            className: vue.borderHighlight,
            children: [z.jsx(Ny, {
              uppercase: true,
              disableFocus: true,
              left: z.jsx(Pc.SelectedInfoPanel.ROAD_TRAFFIC_FLOW, {})
            }), z.jsx(g4, {
              data: t
            })]
          })
        }), z.jsx(dy, {
          disableFocus: true,
          tooltip: d && (0, z.jsx)(bb, {
            text: d
          }),
          children: z.jsxs(Ep, {
            className: vue.borderHighlight,
            children: [z.jsx(Ny, {
              uppercase: true,
              disableFocus: true,
              left: z.jsx(Pc.SelectedInfoPanel.ROAD_TRAFFIC_VOLUME, {})
            }), z.jsx(h4, {
              data: e
            })]
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/road-section/road-section.tsx", {
      get RoadSection() {
        return bue;
      },
      set RoadSection(e) {
        bue = e;
      }
    });
    var Tue = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      stops: s,
      length: i,
      usage: a,
      cargo: o
    }) => {
      const r = km();
      const l = Uw(e, t, n, true);
      const c = sl(ww).includes("CargoRoute");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsxs(dy, {
          disableFocus: true,
          tooltip: l && (0, z.jsx)(bb, {
            text: l
          }),
          children: [z.jsx(Ny, {
            uppercase: true,
            disableFocus: true,
            left: c ? (0, z.jsx)(Pc.SelectedInfoPanel.CARGO_TRANSPORT_ROUTE, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.PUBLIC_TRANSPORT_LINE, {})
          }), z.jsx(Ny, {
            subRow: true,
            disableFocus: true,
            right: z.jsx(Gc, {
              value: i,
              unit: Oc.Length
            }),
            left: z.jsx(Pc.SelectedInfoPanel.LINE_VISUALIZER_LENGTH, {})
          }), z.jsx(Ny, {
            subRow: true,
            disableFocus: true,
            right: z.jsx(Gc, {
              value: s,
              unit: Oc.Integer
            }),
            left: z.jsx(Pc.SelectedInfoPanel.LINE_VISUALIZER_STOPS, {})
          }), z.jsx(Ny, {
            subRow: true,
            disableFocus: true,
            right: z.jsx(Gc, {
              value: o,
              unit: c ? Oc.Weight : Oc.Integer
            }),
            left: c ? (0, z.jsx)(Pc.Transport.LEGEND_CARGO, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.PASSENGERS_TITLE, {})
          }), z.jsx(Ny, {
            subRow: true,
            disableFocus: true,
            right: z.jsx(Gc, {
              value: 100 * a,
              unit: Oc.Percentage
            }),
            left: z.jsx(Pc.SelectedInfoPanel.LINE_USAGE, {})
          }), r && (0, z.jsx)(Lle, {
            label: (0, z.jsx)(Pc.Transport.LINES_OVERVIEW_BUTTON, {}),
            onSelect: Zv
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/line-section.tsx", {
      get LineSection() {
        return Tue;
      },
      set LineSection(e) {
        Tue = e;
      }
    });
    let Eue = {
      button: "button_YEx item-states_QjV",
      "toggle-states": "toggle-states_oKG",
      toggleStates: "toggle-states_oKG",
      icon: "icon_vbQ",
      locked: "locked_Q0p"
    };
    X.add("game-ui/game/themes/primary-button.module.scss", {
      get classes() {
        return Eue;
      },
      set classes(e) {
        Object.assign(Eue, e);
      }
    });
    function yue(e) {
      tl("ScheduleSection", "setSchedule", e);
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/schedule-section/schedule-bindings.ts", {
      get setSchedule() {
        return yue;
      },
      set setSchedule(e) {
        yue = e;
      }
    });
    let Sue = {
      buttons: "buttons_XOL",
      button: "button_kxx",
      left: "left_X6Y",
      right: "right_IAC",
      icon: "icon_Sz0",
      hint: "hint_h1_"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/schedule-section/schedule-section.module.scss", {
      get classes() {
        return Sue;
      },
      set classes(e) {
        Object.assign(Sue, e);
      }
    });
    var Cue = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      schedule: s
    }) => {
      0;
      const i = Y.useCallback(() => yue(0), []);
      0;
      const a = Y.useCallback(() => yue(1), []);
      0;
      const o = Y.useCallback(() => yue(2), []);
      const r = Uw(e, n, t, true);
      const l = sl(ww);
      0;
      const c = Y.useMemo(() => l.includes("CargoRoute") ? "CargoRoute" : "TransportLine", [l]);
      0;
      const [u, d] = Y.useState(false);
      0;
      const m = Y.useMemo(() => ({
        "Change Line Schedule": e => {
          if (0 !== e) {
            const t = s + e > 2 ? 0 : s + e < 0 ? 2 : s + e;
            if (t !== s) {
              yue(t);
              rp(UM.drag);
            }
          }
        }
      }), [s]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: m,
        children: z.jsx(Lh, {
          onFocusChange: d,
          children: z.jsx(dy, {
            tooltip: r && (0, z.jsx)(bb, {
              text: r
            }),
            children: z.jsx(Ny, {
              uppercase: true,
              disableFocus: true,
              left: z.jsx(Pc.SelectedInfoPanel.SCHEDULE, {}),
              right: z.jsxs("div", {
                className: Sue.buttons,
                children: [z.jsx(LT, {
                  action: "Change Line Schedule",
                  active: u,
                  className: Sue.hint
                }), z.jsxs(ep, {
                  children: [z.jsx(bg, {
                    tooltip: z.jsx(Pc.SelectedInfoPanel.SCHEDULE_DAY_TOOLTIP, {
                      hash: c
                    }),
                    children: z.jsx(Nue, {
                      icon: hoe(0),
                      onSelect: i,
                      selected: 0 === s,
                      className: Qu()(Sue.button, Sue.left)
                    })
                  }), z.jsx(bg, {
                    tooltip: z.jsx(Pc.SelectedInfoPanel.SCHEDULE_NIGHT_TOOLTIP, {
                      hash: c
                    }),
                    children: z.jsx(Nue, {
                      icon: hoe(1),
                      onSelect: a,
                      selected: 1 === s,
                      className: Sue.button
                    })
                  }), z.jsx(bg, {
                    tooltip: z.jsx(Pc.SelectedInfoPanel.SCHEDULE_CONTINUOUS_TOOLTIP, {
                      hash: c
                    }),
                    children: z.jsx(Nue, {
                      icon: hoe(2),
                      selected: 2 === s,
                      onSelect: o,
                      className: Qu()(Sue.button, Sue.right)
                    })
                  })]
                })]
              })
            })
          })
        })
      });
    };
    const Nue = ({
      icon: e,
      selected: t,
      className: n,
      onSelect: s
    }) => (0, z.jsx)(L_, {
      focusKey: Eg,
      theme: Eue,
      onSelect: s,
      selected: t,
      className: n,
      children: (0, z.jsx)("img", {
        src: e,
        className: Sue.icon
      })
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/schedule-section/schedule-section.tsx", {
      get ScheduleSection() {
        return Cue;
      },
      set ScheduleSection(e) {
        Cue = e;
      }
    });
    let wue = {
      "route-slider": "route-slider__kp",
      routeSlider: "route-slider__kp"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/route-slider.module.scss", {
      get classes() {
        return wue;
      },
      set classes(e) {
        Object.assign(wue, e);
      }
    });
    function Pue(e) {
      tl("TicketPriceSection", "setTicketPrice", e);
    }
    var Lue = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      sliderData: s
    }) => {
      0;
      const [i, a] = Y.useState(s.value);
      const o = km();
      0;
      const r = Y.useCallback(e => {
        a(e);
        if (o) {
          Pue(e);
        }
      }, [o]);
      0;
      const l = Y.useCallback(() => {
        Pue(i);
      }, [i]);
      const c = KM(s.step);
      const u = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: u && (0, z.jsx)(bb, {
          text: u
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.TICKET_PRICE, {}),
          right: 0 === i ? (0, z.jsx)(Pc.SelectedInfoPanel.TICKET_PRICE_FREE, {}) : (0, z.jsx)(Gc, {
            value: i,
            unit: Oc.Money
          })
        }), z.jsx("div", {
          className: wue.routeSlider,
          children: z.jsx(GM, {
            valueTransformer: c,
            value: i,
            start: 0,
            end: s.range.max,
            gamepadStep: s.step,
            onDragEnd: l,
            onChange: r
          })
        })]
      });
    };
    function Aue(e) {
      tl("VehicleCountSection", "setVehicleCount", e);
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/ticket-price-section.tsx", {
      get TicketPriceSection() {
        return Lue;
      },
      set TicketPriceSection(e) {
        Lue = e;
      }
    });
    var Mue = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      vehicleCount: s,
      activeVehicles: i,
      vehicleCountMin: a,
      vehicleCountMax: o
    }) => {
      const r = Uw(e, t, n, true);
      const l = KM(1);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.VEHICLE_COUNT, {}),
          right: z.jsx(cu, {
            value: s,
            total: o,
            unit: Oc.Integer
          })
        }), z.jsx("div", {
          className: wue.routeSlider,
          children: z.jsx(GM, {
            valueTransformer: l,
            value: s,
            start: a,
            end: o,
            gamepadStep: 1,
            onChange: Aue
          })
        }), z.jsx(Ny, {
          subRow: true,
          disableFocus: true,
          left: z.jsx(Pc.SelectedInfoPanel.ACTIVE_VEHICLES, {}),
          right: z.jsx(Gc, {
            value: i
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/route-sections/vehicle-count-section.tsx", {
      get VehicleCountSection() {
        return Mue;
      },
      set VehicleCountSection(e) {
        Mue = e;
      }
    });
    var kue = $r("ActionsSection", "trafficRoutesVisible");
    var Due = $r("ActionsSection", "trafficRouteColors");
    $r("ActionsSection", "moveableObjectName");
    var Fue = $r("ActionsSection", "moving");
    var Uue = $r("ActionsSection", "editingLot");
    var Bue = Jr("ActionsSection", "focus");
    var Gue = Jr("ActionsSection", "toggleMove");
    var Vue = Jr("ActionsSection", "follow");
    var Hue = Jr("ActionsSection", "delete");
    var Kue = Jr("ActionsSection", "toggle");
    var Wue = Jr("ActionsSection", "toggleEmptying");
    var zue = Jr("ActionsSection", "toggleLotTool");
    var Yue = Jr("ActionsSection", "toggleTrafficRoutes");
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/actions-section/actions-section-bindings.ts", {
      get trafficRoutesVisible() {
        return trafficRoutesVisible;
      },
      set trafficRoutesVisible(e) {
        trafficRoutesVisible = e;
      },
      get trafficRouteColors() {
        return trafficRouteColors;
      },
      set trafficRouteColors(e) {
        trafficRouteColors = e;
      },
      get moveableObjectName() {
        return moveableObjectName;
      },
      set moveableObjectName(e) {
        moveableObjectName = e;
      },
      get moving() {
        return moving;
      },
      set moving(e) {
        moving = e;
      },
      get editingLot() {
        return editingLot;
      },
      set editingLot(e) {
        editingLot = e;
      },
      get focusSelectedEntity() {
        return Bue;
      },
      set focusSelectedEntity(e) {
        Bue = e;
      },
      get toggleMove() {
        return Gue;
      },
      set toggleMove(e) {
        Gue = e;
      },
      get followSelectedEntity() {
        return Vue;
      },
      set followSelectedEntity(e) {
        Vue = e;
      },
      get deleteSelectedEntity() {
        return Hue;
      },
      set deleteSelectedEntity(e) {
        Hue = e;
      },
      get toggleSelectedEntity() {
        return Kue;
      },
      set toggleSelectedEntity(e) {
        Kue = e;
      },
      get toggleEmptying() {
        return Wue;
      },
      set toggleEmptying(e) {
        Wue = e;
      },
      get toggleLotTool() {
        return zue;
      },
      set toggleLotTool(e) {
        zue = e;
      },
      get toggleTrafficRoutes() {
        return Yue;
      },
      set toggleTrafficRoutes(e) {
        Yue = e;
      }
    });
    let $ue = {
      button: "button_Z9O button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      icon: "icon_Tdt icon_soN icon_Iwk"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/actions-section/action-button.module.scss", {
      get classes() {
        return $ue;
      },
      set classes(e) {
        Object.assign($ue, e);
      }
    });
    let Xue = {
      "actions-section": "actions-section_X1x",
      actionsSection: "actions-section_X1x",
      button: "button_xGY",
      toggle: "toggle_LKL",
      off: "off_X4Y",
      "out-of-service": "out-of-service_Kfh",
      outOfService: "out-of-service_Kfh",
      label: "label_y4N",
      hint: "hint_Grf",
      "hint-icon": "hint-icon_pyg",
      hintIcon: "hint-icon_pyg",
      "tooltip-legends": "tooltip-legends_h98",
      tooltipLegends: "tooltip-legends_h98",
      "tooltip-legend": "tooltip-legend_y1I",
      tooltipLegend: "tooltip-legend_y1I"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/actions-section/actions-section.module.scss", {
      get classes() {
        return Xue;
      },
      set classes(e) {
        Object.assign(Xue, e);
      }
    });
    const Zue = new Tg("FOCUS_BUTTON");
    const Jue = new Tg("RELOCATE_BUTTON_KEY");
    const ede = new Tg("FOLLOW_BUTTON_KEY");
    const tde = new Tg("EMPTY_BUTTON_KEY");
    const nde = new Tg("LOT_BUTTON_KEY");
    const sde = new Tg("DELETE_BUTTON_KEY");
    const ide = new Tg("DISABLE_BUTTON_KEY");
    const ade = new Tg("TRAFFIC_ROUTES_KEY");
    var ode = ({
      focusable: e,
      focusing: t,
      following: n,
      followable: s,
      moveable: i,
      deletable: a,
      disabled: o,
      disableable: r,
      emptying: l,
      emptiable: c,
      hasLotTool: u,
      hasTrafficRoutes: d,
      focusKey: m
    }) => {
      0;
      const [h, g] = Y.useState(null);
      const p = sl(Fue);
      const f = sl(Uue);
      0;
      const x = Y.useContext(lE);
      const v = sl(Lj);
      const _ = sl(Rj);
      const b = sl(ww);
      const T = sl(_w);
      0;
      const E = Y.useMemo(() => `${dT.value?.selectedInfoPanelDelete}+${T}`, [T]);
      rg(E, a);
      const I = sl(Ul);
      0;
      const y = Y.useCallback(() => {
        0;
        0;
        0;
        x.showDialog(z.jsx(LI, {
          title: z.jsx(Pc.Common.WARNING, {}),
          message: z.jsx(Pc.SelectedInfoPanel.CONFIRM_DELETE_WARNING, {}),
          onConfirm: Hue
        }));
      }, [x]);
      0;
      const S = Y.useCallback(() => {
        zue();
      }, []);
      0;
      const j = Y.useMemo(() => b.includes("Destroyed"), [b]);
      const C = !n || v.length < _;
      0;
      const N = Y.useCallback(() => Vue(), []);
      0;
      const w = Y.useCallback(e => {
        if (!e) {
          g(null);
        }
      }, []);
      const O = sl(kue);
      const P = sl(Due);
      0;
      0;
      0;
      return z.jsx("div", {
        className: Xue.actionsSection,
        children: z.jsx(Lh, {
          onFocusChange: w,
          children: z.jsxs(ep, {
            focusKey: m,
            initialFocused: Zue,
            onChange: g,
            children: [e && (0, z.jsx)(zq, {
              title: t ? (0, z.jsx)(Pc.SelectedInfoPanel.UNFOCUS, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.FOCUS, {}),
              description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: t ? "ActionsSectionUnfocus" : "ActionsSectionFocus"
              }),
              shortcut: (0, z.jsx)(AT, {
                action: "Focus Selected Object",
                active: I
              }),
              children: (0, z.jsx)($_, {
                disableHint: true,
                focusKey: Zue,
                theme: $ue,
                className: Xue.button,
                selected: t,
                src: "Media/Game/Icons/MapMarker.svg",
                onSelect: Bue,
                onClick: Ob,
                shortcut: "Focus Selected Object",
                children: (0, z.jsx)(LT, {
                  action: "Select",
                  active: h === Zue,
                  className: Xue.hint
                })
              })
            }), i && (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                hash: "ActionsSectionRelocate"
              }),
              description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: "ActionsSectionRelocate"
              }),
              shortcut: (0, z.jsx)(AT, {
                action: "Relocate Selected Object",
                active: I
              }),
              children: (0, z.jsx)($_, {
                disableHint: true,
                focusKey: Jue,
                theme: $ue,
                className: Xue.button,
                selected: p,
                disabled: j,
                src: "Media/Game/Icons/Relocate.svg",
                selectSound: op.relocateBuilding,
                onSelect: Gue,
                onClick: Ob,
                shortcut: "Relocate Selected Object",
                children: (0, z.jsx)(LT, {
                  action: "Select",
                  active: h === Jue,
                  className: Xue.hint
                })
              })
            }), s && (0, z.jsx)(zq, {
              title: n ? (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                hash: "ActionsSectionUnfollowCitizen"
              }) : v.length === _ ? (0, z.jsx)(Pc.SelectedInfoPanel.MAX_FOLLOWED_CITIZENS_REACHED, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                hash: "ActionsSectionFollowCitizen"
              }),
              description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: n ? "ActionsSectionUnfollowCitizen" : "ActionsSectionFollowCitizen"
              }),
              shortcut: (0, z.jsx)(AT, {
                action: "Toggle Follow Selected Citizen",
                active: I
              }),
              children: (0, z.jsx)($_, {
                disableHint: true,
                focusKey: ede,
                disabled: !C,
                theme: $ue,
                selected: n,
                className: Xue.button,
                src: n ? "Media/Game/Icons/Unfollow.svg" : "Media/Game/Icons/Follow.svg",
                onSelect: N,
                onClick: Ob,
                shortcut: "Toggle Follow Selected Citizen",
                children: (0, z.jsx)(LT, {
                  action: "Select",
                  active: h === ede,
                  className: Xue.hint
                })
              })
            }), c && (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                hash: l ? "ActionsSectionStopEmptying" : "ActionsSectionStartEmptying"
              }),
              description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: l ? "ActionsSectionStopEmptying" : "ActionsSectionStartEmptying"
              }),
              shortcut: (0, z.jsx)(AT, {
                action: "Toggle Selected Object Emptying",
                active: I
              }),
              children: (0, z.jsx)($_, {
                disableHint: true,
                focusKey: tde,
                selected: l,
                disabled: j,
                theme: $ue,
                className: Xue.button,
                onSelect: Wue,
                onClick: Ob,
                src: "Media/Game/Icons/Empty.svg",
                shortcut: "Toggle Selected Object Emptying",
                children: (0, z.jsx)(LT, {
                  action: "Select",
                  active: h === tde,
                  className: Xue.hint
                })
              })
            }), u && (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                hash: "ActionsSectionAreaTool"
              }),
              description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: "ActionsSectionAreaTool"
              }),
              shortcut: (0, z.jsx)(AT, {
                action: "Toggle Selected Lot Edit",
                active: I
              }),
              children: (0, z.jsx)($_, {
                disableHint: true,
                focusKey: nde,
                selected: f,
                disabled: j,
                theme: $ue,
                className: Xue.button,
                onSelect: S,
                onClick: Ob,
                src: "Media/Game/Icons/LotTool.svg",
                shortcut: "Toggle Selected Lot Edit",
                children: (0, z.jsx)(LT, {
                  action: "Select",
                  active: h === nde,
                  className: Xue.hint
                })
              })
            }), d && (0, z.jsx)(zq, {
              title: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                hash: "ActionsSectionTrafficRoutes"
              }),
              description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                hash: "ActionsSectionTrafficRoutes"
              }),
              content: (0, z.jsx)("div", {
                className: Xue.tooltipLegends,
                children: P.map((e, t) => (0, z.jsx)(FR, {
                  color: tN(e),
                  label: (0, z.jsx)(Pc.SelectedInfoPanel.TRAFFIC_ROUTES, {
                    index: t
                  }),
                  className: Xue.tooltipLegend
                }, t))
              }),
              shortcut: (0, z.jsx)(AT, {
                action: "Toggle Traffic Routes",
                active: I
              }),
              children: (0, z.jsx)($_, {
                disableHint: true,
                focusKey: ade,
                selected: O,
                theme: $ue,
                className: Xue.button,
                onSelect: Yue,
                onClick: Ob,
                src: "Media/Game/Icons/TrafficRoutes.svg",
                shortcut: "Toggle Traffic Routes",
                children: (0, z.jsx)(LT, {
                  action: "Select",
                  active: h === ade,
                  className: Xue.hint
                })
              })
            }), a && (0, z.jsx)(aT, {
              uiTag: E,
              children: (0, z.jsx)(zq, {
                title: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                  hash: "ActionsSectionDelete"
                }),
                description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                  hash: "ActionsSectionDelete"
                }),
                shortcut: (0, z.jsx)(AT, {
                  action: "Delete Selected Object",
                  active: I
                }),
                children: (0, z.jsx)($_, {
                  disableHint: true,
                  focusKey: sde,
                  tinted: true,
                  theme: $ue,
                  className: Xue.button,
                  src: "Media/Glyphs/Trash.svg",
                  onSelect: y,
                  onClick: Ob,
                  shortcut: "Delete Selected Object",
                  children: (0, z.jsx)(LT, {
                    action: "Select",
                    active: h === sde,
                    className: Xue.hint
                  })
                })
              })
            }), r && (0, z.jsxs)("div", {
              className: Xue.outOfService,
              children: [o && (0, z.jsx)("div", {
                className: Xue.label,
                children: (0, z.jsx)(Pc.SelectedInfoPanel.OUT_OF_SERVICE, {})
              }), (0, z.jsx)(zq, {
                title: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP_TITLE, {
                  hash: o ? "Reactivate" : "Deactivate"
                }),
                description: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
                  hash: b.includes("TransportLine") ? b.includes("CargoRoute") ? o ? "ReactivateCargoRoute" : "DeactivateCargoRoute" : o ? "ReactivatePublicTransportLine" : "DeactivatePublicTransportLine" : o ? "Reactivate" : "Deactivate"
                }),
                shortcut: (0, z.jsx)(AT, {
                  action: "Toggle Selected Object Active",
                  active: I
                }),
                children: (0, z.jsx)($_, {
                  disableHint: true,
                  focusKey: ide,
                  tinted: true,
                  src: "Media/Glyphs/OnOff.svg",
                  theme: $ue,
                  disabled: j,
                  className: Qu()(Xue.button, Xue.toggle, o && Xue.off),
                  selectSound: o ? op.enableBuilding : op.disableBuilding,
                  onSelect: Kue,
                  onClick: Ob,
                  shortcut: "Toggle Selected Object Active",
                  children: (0, z.jsx)(LT, {
                    action: "Select",
                    active: h === ide,
                    className: Xue.hint
                  })
                })
              })]
            })]
          })
        })
      });
    };
    function rde(e, t) {
      return t.includes("TransportLine") ? t.includes("CargoRoute") ? e ? "ReactivateCargoRoute" : "DeactivateCargoRoute" : e ? "ReactivatePublicTransportLine" : "DeactivatePublicTransportLine" : e ? "Reactivate" : "Deactivate";
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/actions-section/actions-section.tsx", {
      get ActionsSection() {
        return ode;
      },
      set ActionsSection(e) {
        ode = e;
      }
    });
    let lde = {
      "description-section": "description-section_wKs",
      descriptionSection: "description-section_wKs",
      description: "description_jgm",
      "effects-row": "effects-row_FPw",
      effectsRow: "effects-row_FPw"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/description-section/description-section.module.scss", {
      get classes() {
        return lde;
      },
      set classes(e) {
        Object.assign(lde, e);
      }
    });
    var ude = ({
      localeId: e,
      effects: t
    }) => {
      const n = km();
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        focusKey: n ? Ig : Eg,
        className: lde.descriptionSection,
        children: [z.jsx("div", {
          className: lde.description,
          children: z.jsx(bb, {
            children: z.jsx(Tc, {
              id: e
            })
          })
        }), t && (0, z.jsx)("div", {
          className: lde.effectsRow,
          children: (0, z.jsx)(lM, {
            components: w9,
            data: t
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/description-section/description-section.tsx", {
      get DescriptionSection() {
        return ude;
      },
      set DescriptionSection(e) {
        ude = e;
      }
    });
    let dde = {
      "notifications-section": "notifications-section_cKq",
      notificationsSection: "notifications-section_cKq",
      factors: "factors_Y7i"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/notification-sections/notifications-section.module.scss", {
      get classes() {
        return dde;
      },
      set classes(e) {
        Object.assign(dde, e);
      }
    });
    var hde = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      averageHappiness: s,
      happinessFactors: i
    }) => {
      const a = Uw(e, n, t, true);
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        direction: "right",
        tooltip: z.jsxs(z.Fragment, {
          children: [i.length > 0 && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)("div", {
              className: dde.factors,
              children: i.map((e, t) => (0, z.jsx)(wy, {
                left: e.weight > 0 ? (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_POSITIVE, {
                  hash: e.factor
                }) : (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_NEGATIVE, {
                  hash: e.factor
                }),
                right: (0, z.jsx)("div", {
                  className: zp(S3, e.weight),
                  children: (0, z.jsx)(Gc, {
                    value: e.weight,
                    signed: true
                  })
                })
              }, t))
            }), (0, z.jsx)(my, {})]
          }), a && (0, z.jsx)(bb, {
            text: a
          })]
        }),
        children: z.jsx(Tp, {
          className: dde.notificationsSection,
          children: z.jsx(eue, {
            notification: s
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/notification-sections/average-happiness-section.tsx", {
      get AverageHappinessSection() {
        return hde;
      },
      set AverageHappinessSection(e) {
        hde = e;
      }
    });
    var gde = ({
      focusKey: e,
      notifications: t
    }) => (0, z.jsx)(Ep, {
      focusKey: e,
      className: dde.notificationsSection,
      children: t.length > 0 && (0, z.jsx)(ep, {
        children: t?.map(e => (0, z.jsx)(Zce, {
          notification: e
        }, e.key))
      })
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/notification-sections/notifications-section.tsx", {
      get NotificationsSection() {
        return gde;
      },
      set NotificationsSection(e) {
        gde = e;
      }
    });
    var pde = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      profitability: s,
      profitabilityFactors: i
    }) => {
      const a = Uw(e, n, t, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(bg, {
        direction: "right",
        tooltip: z.jsxs(z.Fragment, {
          children: [i.length > 0 && (0, z.jsx)(z.Fragment, {
            children: (0, z.jsx)("div", {
              className: dde.factors,
              children: i.map((e, t) => (0, z.jsx)(wy, {
                left: e.weight > 0 ? (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_POSITIVE, {
                  hash: e.factor
                }) : (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_NEGATIVE, {
                  hash: e.factor
                }),
                right: (0, z.jsx)("div", {
                  className: zp(S3, e.weight),
                  children: (0, z.jsx)(Gc, {
                    value: e.weight,
                    signed: true
                  })
                })
              }, t))
            })
          }), z.jsx(my, {}), a && (0, z.jsx)(bb, {
            text: a
          })]
        }),
        children: z.jsx(Tp, {
          className: dde.notificationsSection,
          children: z.jsx(tue, {
            notification: s
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/notification-sections/profitability-section.tsx", {
      get ProfitabilitySection() {
        return pde;
      },
      set ProfitabilitySection(e) {
        pde = e;
      }
    });
    let fde = {
      policy: "policy_oHN item-focused_FuT",
      "pad-first": "pad-first_WSR",
      padFirst: "pad-first_WSR",
      lock: "lock_uXt",
      compact: "compact_QL9",
      top: "top_LI4 item-mouse-states_Fmi",
      expanded: "expanded_g0B",
      "active-disabled": "active-disabled_HoS",
      activeDisabled: "active-disabled_HoS",
      locked: "locked_ihM",
      bottom: "bottom_qDc",
      disabled: "disabled_NSK",
      icon: "icon_BTB",
      label: "label_obe",
      "slider-wrapper": "slider-wrapper_Sx6",
      sliderWrapper: "slider-wrapper_Sx6",
      slider: "slider_jk5",
      value: "value_vMh",
      checkbox: "checkbox_OrD",
      "space-between": "space-between_mx0",
      spaceBetween: "space-between_mx0",
      "checkbox-hint": "checkbox-hint_cQ5",
      checkboxHint: "checkbox-hint_cQ5"
    };
    X.add("game-ui/game/components/policy/policy.module.scss", {
      get classes() {
        return fde;
      },
      set classes(e) {
        Object.assign(fde, e);
      }
    });
    var vde = ({
      policy: e,
      className: t,
      onAdjust: n
    }) => {
      0;
      const [s, i] = Y.useState(e.active);
      0;
      const [a, o] = Y.useState(false);
      0;
      const [r, l] = Y.useState(e.data?.value ?? 0);
      0;
      const [c, u] = Y.useState(false);
      const d = km();
      0;
      Y.useEffect(() => {
        const t = e.data?.value ?? 0;
        if (!(c || r === t)) {
          l(t);
        }
      }, [e, c, r]);
      0;
      const m = Y.useCallback(() => {
        n(e.entity, !s, r);
        i(!s);
      }, [s, n, e, r]);
      0;
      const h = Y.useCallback(() => {
        u(true);
      }, []);
      0;
      const g = Y.useCallback(t => {
        l(t);
        if (d) {
          n(e.entity, s, t);
        }
      }, [s, d, n, e]);
      0;
      const p = Y.useCallback(() => {
        n(e.entity, s, r);
        u(false);
      }, [s, n, e, r]);
      0;
      const f = Y.useCallback(() => {
        m();
        rp(op.selectItem);
      }, [m]);
      const x = !e.locked && e.active && null !== e.data;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: e.uiTag,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Policy.TITLE, {
            hash: e.id
          }),
          description: z.jsx(Pc.Policy.DESCRIPTION, {
            hash: e.id
          }),
          locked: e.locked,
          direction: "right",
          requirements: e.requirements,
          children: z.jsx(Ep, {
            className: Qu()(fde.policy, t),
            onFocusChange: o,
            children: z.jsxs(Rg, {
              onAction: f,
              children: [z.jsx(bde, {
                focusKey: x ? Eg : Ig,
                policy: e,
                active: s,
                focused: a,
                onToggle: m,
                className: Qu()(fde.top, x && fde.expanded)
              }), x && e.data && r && (0, z.jsxs)("div", {
                className: fde.bottom,
                children: [(0, z.jsx)("div", {
                  className: fde.sliderWrapper,
                  children: (0, z.jsx)(GM, {
                    value: r,
                    start: e.data.range.min,
                    end: e.data.range.max,
                    gamepadStep: e.data.step,
                    onDragStart: h,
                    onDragEnd: p,
                    onChange: g,
                    disabled: !e.active,
                    className: fde.slider
                  })
                }), (0, z.jsx)("div", {
                  className: fde.value,
                  children: (0, z.jsx)(Gc, {
                    value: r,
                    unit: e.data.unit
                  })
                })]
              })]
            })
          })
        })
      });
    };
    var _de = ({
      policy: e,
      onAdjust: t,
      onMouseOver: n,
      onMouseLeave: s
    }) => {
      0;
      const [i, a] = Y.useState(e.active);
      0;
      const o = Y.useCallback(() => {
        t(e.entity, !i, e.data?.value ?? 0);
        a(!i);
      }, [i, t, e.entity, e.data?.value]);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: e.uiTag,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Policy.TITLE, {
            hash: e.id
          }),
          description: z.jsx(Pc.Policy.DESCRIPTION, {
            hash: e.id
          }),
          locked: e.locked,
          direction: "down",
          alignment: "end",
          requirements: e.requirements,
          children: z.jsx(bde, {
            compact: true,
            onMouseOver: n,
            onMouseLeave: s,
            className: fde.compact,
            focusKey: Eg,
            policy: e,
            active: i,
            onToggle: o
          })
        })
      });
    };
    const bde = ({
      focusKey: e,
      policy: t,
      active: n,
      compact: s = false,
      focused: i,
      className: a,
      onToggle: o,
      onMouseOver: r,
      onMouseLeave: l
    }) => {
      0;
      const [c, u] = Y.useState(false);
      0;
      const d = Y.useCallback(() => u(true), []);
      0;
      const m = Y.useCallback(() => u(false), []);
      0;
      0;
      return z.jsxs(L_, {
        disableHint: true,
        focusKey: e,
        onSelect: o,
        onClick: Ob,
        onMouseOver: r,
        onMouseLeave: l,
        selectSound: op.togglePolicy,
        disabled: t.locked,
        className: Qu()(t.locked && fde.locked, c && fde.activeDisabled, a),
        children: [z.jsx("img", {
          src: t.icon,
          className: Qu()(fde.icon, !t.locked && !t.active && fde.disabled)
        }), t.locked && (0, z.jsx)(kX, {
          className: fde.lock
        }), !s && (0, z.jsxs)("div", {
          className: fde.spaceBetween,
          children: [(0, z.jsx)("div", {
            className: fde.label,
            children: (0, z.jsx)(Pc.Policy.TITLE, {
              hash: t.id
            })
          }), !t.locked && (0, z.jsxs)(z.Fragment, {
            children: [(0, z.jsx)(LT, {
              action: "Select",
              active: i && !t.locked
            }), (0, z.jsx)(kb, {
              checked: n,
              focusKey: Eg,
              className: fde.checkbox,
              onMouseOver: d,
              onMouseLeave: m
            })]
          })]
        })]
      });
    };
    X.add("game-ui/game/components/policy/policy.tsx", {
      get Policy() {
        return vde;
      },
      set Policy(e) {
        vde = e;
      },
      get CompactPolicy() {
        return _de;
      },
      set CompactPolicy(e) {
        _de = e;
      }
    });
    let Tde = {
      "compact-policies": "compact-policies_qEr",
      compactPolicies: "compact-policies_qEr",
      label: "label_wgk"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/policies-section/policies-section.module.scss", {
      get classes() {
        return Tde;
      },
      set classes(e) {
        Object.assign(Tde, e);
      }
    });
    var Ide = ({
      policies: e,
      group: t,
      tooltipKeys: n,
      tooltipTags: s
    }) => {
      0;
      const [i, a] = Y.useState(e?.length < 3);
      0;
      const [o, r] = Y.useState(false);
      0;
      const l = Y.useCallback(() => r(true), []);
      0;
      const c = Y.useCallback(() => r(false), []);
      const u = Uw(t, n, s, true);
      const d = sl(_w);
      0;
      const m = Y.useMemo(() => `${dT.value?.selectedInfoPanelPolicies}+${d}`, [d]);
      rg(m);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: m,
        children: z.jsx(Sy, {
          disableFocus: true,
          initialExpanded: e?.length < 3,
          tooltip: i && u && (0, z.jsx)(bb, {
            text: u
          }),
          className: o ? Iy.disableActiveState : undefined,
          expandFromContent: true,
          onToggleExpanded: a,
          header: i ? (0, z.jsx)(Ny, {
            uppercase: true,
            disableFocus: true,
            className: Tde.label,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.POLICIES, {})
          }) : (0, z.jsx)("div", {
            className: Tde.compactPolicies,
            children: e?.map(e => (0, z.jsx)(_de, {
              policy: e,
              onAdjust: IC,
              onMouseOver: l,
              onMouseLeave: c
            }, Dr(e.entity)))
          }),
          children: z.jsx(ep, {
            children: e?.map((e, t) => (0, z.jsx)(vde, {
              policy: e,
              onAdjust: IC,
              className: 0 === t ? fde.padFirst : undefined
            }, Dr(e.entity)))
          })
        })
      });
    };
    function yde({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      vehicleKey: s,
      vehicleCount: i,
      availableVehicleCount: a,
      vehicleCapacity: o,
      vehicleList: r
    }) {
      const l = Uw(e, n, t, true);
      return o > 0 ? (0, z.jsxs)(dy, {
        disableFocus: true,
        children: [o - a > 0 && (0, z.jsx)(Ny, {
          uppercase: true,
          tooltip: l && (0, z.jsx)(bb, {
            children: (0, z.jsx)(Pc.SelectedInfoPanel.TOOLTIP, {
              hash: "VehiclesInMaintenance"
            })
          }),
          left: (0, z.jsx)(Pc.SelectedInfoPanel.MAINTENANCED_VEHICLES, {}),
          right: (0, z.jsx)(Gc, {
            value: o - a
          })
        }), (0, z.jsx)(Ny, {
          uppercase: true,
          tooltip: l && (0, z.jsx)(bb, {
            text: l
          }),
          left: (0, z.jsx)(Pc.SelectedInfoPanel.VEHICLES, {
            hash: s
          }),
          right: 0 === o ? (0, z.jsx)(Gc, {
            value: i
          }) : (0, z.jsx)(cu, {
            value: i,
            total: o
          })
        }), r.length > 0 && (0, z.jsx)(ep, {
          children: r.map((e, t) => (0, z.jsx)(Sde, {
            vehicle: e
          }, t))
        })]
      }) : null;
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/policies-section/policies-section.tsx", {
      get PoliciesSection() {
        return Ide;
      },
      set PoliciesSection(e) {
        Ide = e;
      }
    });
    var Sde = ({
      vehicle: e
    }) => {
      0;
      const t = Y.useCallback(() => Pw(e.entity), [e.entity]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ny, {
        subRow: true,
        tooltip: z.jsx(bb, {
          children: z.jsx(Pc.SelectedInfoPanel.TOOLTIP, {
            hash: e.vehicleKey
          })
        }),
        left: z.jsx(Hu, {
          value: e.name
        }),
        link: z.jsx(Fle, {
          onSelect: t,
          children: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
            hash: e.stateKey
          })
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/vehicles-section/vehicles-section.tsx", {
      get VehiclesSection() {
        return yde;
      },
      set VehiclesSection(e) {
        yde = e;
      },
      get VehicleItem() {
        return Sde;
      },
      set VehicleItem(e) {
        Sde = e;
      }
    });
    var jde = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      vehicleList: s
    }) => {
      const i = Uw(e, n, t);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        disableFocus: true,
        children: [z.jsx(Ny, {
          uppercase: true,
          tooltip: i && (0, z.jsx)(bb, {
            text: i
          }),
          left: z.jsx(Pc.SelectedInfoPanel.DISPATCHED_VEHICLES, {}),
          right: z.jsx(Gc, {
            value: s.length
          })
        }), s.length > 0 && (0, z.jsx)(ep, {
          children: s.map((e, t) => (0, z.jsx)(Sde, {
            vehicle: e
          }, t))
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/vehicles-section/dispatched-vehicles-section.tsx", {
      get DispatchedVehiclesSection() {
        return jde;
      },
      set DispatchedVehiclesSection(e) {
        jde = e;
      }
    });
    var Cde = ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      cargo: s,
      capacity: i,
      resources: a,
      cargoKey: o
    }) => {
      const r = Uw(e, n, t);
      const l = a?.filter(e => "NoResource" !== e.key && e.amount > 0);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.CARGO_TITLE, {
            hash: o
          })
        }), z.jsx(xle, {
          plain: true,
          progress: s,
          max: i,
          children: z.jsx(cu, {
            value: s,
            total: i,
            unit: Oc.Weight
          })
        }), l?.length > 0 && (0, z.jsx)(_ce, {
          children: l?.map((e, t) => (0, z.jsx)(z6, {
            theme: bce,
            className: Qu()(l.length > 1 && l.length % 2 == 1 && t === l.length - 1 && bce.last),
            icon: "NoResource" !== e.key ? `Media/Game/Resources/${e.key}.svg` : null,
            label: (0, z.jsx)(Pc.Resources.TITLE, {
              hash: e.key
            }),
            children: (0, z.jsx)(Gc, {
              value: e.amount,
              unit: Oc.Weight
            })
          }, e.key))
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/cargo-section.tsx", {
      get CargoSection() {
        return Cde;
      },
      set CargoSection(e) {
        Cde = e;
      }
    });
    var Nde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      line: a,
      lineEntity: o,
      nextStop: r,
      stateKey: l
    }) => {
      0;
      const c = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const u = Y.useCallback(() => o && Pw(o), [o]);
      0;
      const d = Y.useCallback(() => r.entity && Pw(r.entity), [r]);
      const m = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: m && (0, z.jsx)(bb, {
          text: m
        }),
        disableFocus: null != o || null != r.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.CARGO_TRANSPORT_VEHICLE_TITLE, {}),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: l
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: c,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != r.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: r.name
              })
            })
          }), null != a && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.ROUTE, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: u,
              children: (0, z.jsx)(Hu, {
                value: a
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/cargo-transport-vehicle-section.tsx", {
      get CargoTransportVehicleSection() {
        return Nde;
      },
      set CargoTransportVehicleSection(e) {
        Nde = e;
      }
    });
    var wde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      dead: o,
      deadEntity: r,
      stateKey: l
    }) => {
      0;
      const c = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const u = Y.useCallback(() => r && Pw(r), [r]);
      0;
      const d = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const m = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: m && (0, z.jsx)(bb, {
          text: m
        }),
        disableFocus: null != r || null != a.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.DEATHCARE_VEHICLE_TITLE, {}),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: l
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: c,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != a.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: a.name
              })
            })
          }), null != o && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DEATHCARE_VEHICLE_DEAD, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: u,
              children: (0, z.jsx)(Hu, {
                value: o
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/deathcare-vehicle-section.tsx", {
      get DeathcareVehicleSection() {
        return wde;
      },
      set DeathcareVehicleSection(e) {
        wde = e;
      }
    });
    var Ode = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      stateKey: o,
      vehicleKey: r
    }) => {
      0;
      const l = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const c = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const u = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: u && (0, z.jsx)(bb, {
          text: u
        }),
        disableFocus: true,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            disableFocus: true,
            left: z.jsx(Pc.SelectedInfoPanel.DELIVERY_VEHICLE_TITLE, {
              hash: r
            }),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: o
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            disableFocus: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: l,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != a.entity && (0, z.jsx)(Ny, {
            subRow: true,
            disableFocus: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: c,
              children: (0, z.jsx)(Hu, {
                value: a.name
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/delivery-vehicle-section.tsx", {
      get DeliveryVehicleSection() {
        return Ode;
      },
      set DeliveryVehicleSection(e) {
        Ode = e;
      }
    });
    var Pde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      stateKey: o,
      vehicleKey: r
    }) => {
      0;
      const l = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const c = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const u = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: u && (0, z.jsx)(bb, {
          text: u
        }),
        disableFocus: null != a.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.FIRE_VEHICLE_TITLE, {
              hash: r
            }),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: o
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: l,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != a.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: c,
              children: (0, z.jsx)(Hu, {
                value: a.name
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/fire-vehicle-section.tsx", {
      get FireVehicleSection() {
        return Pde;
      },
      set FireVehicleSection(e) {
        Pde = e;
      }
    });
    var Lde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      stateKey: o,
      vehicleKey: r
    }) => {
      0;
      const l = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const c = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const u = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: u && (0, z.jsx)(bb, {
          text: u
        }),
        disableFocus: null != a.entity || null != s.entity,
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.GARBAGE_VEHICLE_TITLE, {
            hash: r
          }),
          right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
            hash: o
          })
        }), null != s.entity && (0, z.jsx)(Ny, {
          subRow: true,
          left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
          link: (0, z.jsx)(Fle, {
            onSelect: l,
            children: (0, z.jsx)(Hu, {
              value: s.name
            })
          })
        }), null != a.entity && (0, z.jsx)(Ny, {
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
          link: (0, z.jsx)(Fle, {
            onSelect: c,
            children: (0, z.jsx)(Hu, {
              value: a.name
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/garbage-vehicle-section.tsx", {
      get GarbageVehicleSection() {
        return Lde;
      },
      set GarbageVehicleSection(e) {
        Lde = e;
      }
    });
    var Ade = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      patient: o,
      patientEntity: r,
      stateKey: l,
      vehicleKey: c
    }) => {
      0;
      const u = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const d = Y.useCallback(() => r && Pw(r), [r]);
      0;
      const m = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const h = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: h && (0, z.jsx)(bb, {
          text: h
        }),
        disableFocus: null != r || null != a.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.HEALTHCARE_VEHICLE_TITLE, {
              hash: c
            }),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: l
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: u,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != a.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: m,
              children: (0, z.jsx)(Hu, {
                value: a.name
              })
            })
          }), null != o && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.HEALTHCARE_VEHICLE_PATIENT, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: o
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/healthcare-vehicle-section.tsx", {
      get HealthcareVehicleSection() {
        return Ade;
      },
      set HealthcareVehicleSection(e) {
        Ade = e;
      }
    });
    var Mde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      load: s,
      capacity: i,
      loadKey: a
    }) => {
      const o = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: o && (0, z.jsx)(bb, {
          text: o
        }),
        children: [z.jsx(Ny, {
          left: z.jsx(Pc.SelectedInfoPanel.LOAD_TITLE, {
            hash: a
          })
        }), z.jsx(xle, {
          progress: s,
          max: i,
          plain: true,
          children: z.jsx(cu, {
            value: s,
            total: i,
            unit: "Water" === a ? Oc.Volume : Oc.Weight
          })
        })]
      });
    };
    function Rde(e) {
      return "Water" === e ? Oc.Volume : Oc.Weight;
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/load-section.tsx", {
      get LoadSection() {
        return Mde;
      },
      set LoadSection(e) {
        Mde = e;
      }
    });
    var kde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      workShift: s,
      owner: i,
      fromOutside: a,
      nextStop: o,
      stateKey: r
    }) => {
      0;
      const l = Y.useCallback(() => i.entity && Pw(i.entity), [i]);
      0;
      const c = Y.useCallback(() => o.entity && Pw(o.entity), [o]);
      const u = Uw(e, t, n);
      const d = Dw("MaintenanceVehicleSectionWorkshift");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs(dy, {
          tooltip: u && (0, z.jsx)(bb, {
            text: u
          }),
          disableFocus: null != o.entity || null != i.entity,
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.MAINTENANCE_VEHICLE_TITLE, {}),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: r
            })
          }), null != i.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: a ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: l,
              children: (0, z.jsx)(Hu, {
                value: i.name
              })
            })
          }), null != o.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: c,
              children: (0, z.jsx)(Hu, {
                value: o.name
              })
            })
          })]
        }), z.jsxs(dy, {
          tooltip: d && (0, z.jsx)(bb, {
            text: d
          }),
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.WORK_SHIFT, {})
          }), z.jsx(xle, {
            progress: s,
            max: 100,
            plain: true,
            children: z.jsx(Gc, {
              value: s,
              unit: Oc.Percentage
            })
          })]
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/maintenance-vehicle-section.tsx", {
      get MaintenanceVehicleSection() {
        return kde;
      },
      set MaintenanceVehicleSection(e) {
        kde = e;
      }
    });
    var Dde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      passengers: s,
      maxPassengers: i,
      pets: a,
      vehiclePassengerKey: o
    }) => {
      const r = Uw(e, t, n);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: r && (0, z.jsx)(bb, {
          text: r
        }),
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.PASSENGERS, {
            hash: o
          })
        }), z.jsx(xle, {
          progress: s,
          max: i,
          plain: true,
          children: z.jsx(cu, {
            value: s,
            total: i,
            unit: Oc.Integer
          })
        }), a > 0 && (0, z.jsx)(Ny, {
          subRow: true,
          icon: "Media/Game/Icons/Pet.svg",
          left: (0, z.jsx)(Gc, {
            value: a,
            unit: Oc.Integer
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/passengers-section.tsx", {
      get PassengersSection() {
        return Dde;
      },
      set PassengersSection(e) {
        Dde = e;
      }
    });
    var Fde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      criminal: o,
      criminalEntity: r,
      stateKey: l,
      vehicleKey: c
    }) => {
      0;
      const u = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const d = Y.useCallback(() => r && Pw(r), [r]);
      0;
      const m = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const h = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: h && (0, z.jsx)(bb, {
          text: h
        }),
        disableFocus: null != r || null != a.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.POLICE_VEHICLE_TITLE, {
              hash: c
            }),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: l
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: u,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != a.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: m,
              children: (0, z.jsx)(Hu, {
                value: a.name
              })
            })
          }), null != o && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.POLICE_VEHICLE_CRIMINAL, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: o
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/police-vehicle-section.tsx", {
      get PoliceVehicleSection() {
        return Fde;
      },
      set PoliceVehicleSection(e) {
        Fde = e;
      }
    });
    var Ude = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      nextStop: a,
      stateKey: o
    }) => {
      0;
      const r = Y.useCallback(() => s.entity && Pw(s.entity), [s.entity]);
      0;
      const l = Y.useCallback(() => a.entity && Pw(a.entity), [a]);
      const c = Uw(e, t, n);
      0;
      0;
      0;
      0;
      return z.jsxs(dy, {
        tooltip: c && (0, z.jsx)(bb, {
          text: c
        }),
        disableFocus: null != s.entity,
        children: [z.jsx(Ny, {
          uppercase: true,
          left: z.jsx(Pc.SelectedInfoPanel.POST_VEHICLE_TITLE, {}),
          right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
            hash: o
          })
        }), null != s.entity && (0, z.jsx)(Ny, {
          subRow: true,
          left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
          link: (0, z.jsx)(Fle, {
            onSelect: r,
            children: (0, z.jsx)(Hu, {
              value: s.name
            })
          })
        }), null != a.entity && (0, z.jsx)(Ny, {
          subRow: true,
          left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
          link: (0, z.jsx)(Fle, {
            onSelect: l,
            children: (0, z.jsx)(Hu, {
              value: a.name
            })
          })
        })]
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/post-vehicle-section.tsx", {
      get PostVehicleSection() {
        return Ude;
      },
      set PostVehicleSection(e) {
        Ude = e;
      }
    });
    var Bde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      keeper: a,
      keeperEntity: o,
      nextStop: r,
      stateKey: l,
      vehicleKey: c
    }) => {
      0;
      const u = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const d = Y.useCallback(() => o && Pw(o), [o]);
      0;
      const m = Y.useCallback(() => r.entity && Pw(r.entity), [r]);
      const h = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: h && (0, z.jsx)(bb, {
          text: h
        }),
        disableFocus: null != a || null != r.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.PRIVATE_VEHICLE_TITLE, {
              hash: c
            }),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: l
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: u,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != r.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: m,
              children: (0, z.jsx)(Hu, {
                value: r.name
              })
            })
          }), null != a && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DRIVER, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: a
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/private-vehicle-section.tsx", {
      get PrivateVehicleSection() {
        return Bde;
      },
      set PrivateVehicleSection(e) {
        Bde = e;
      }
    });
    var Gde = ({
      group: e,
      tooltipKeys: t,
      tooltipTags: n,
      owner: s,
      fromOutside: i,
      line: a,
      lineEntity: o,
      nextStop: r,
      stateKey: l,
      vehicleKey: c
    }) => {
      0;
      const u = Y.useCallback(() => s.entity && Pw(s.entity), [s]);
      0;
      const d = Y.useCallback(() => o && Pw(o), [o]);
      0;
      const m = Y.useCallback(() => r.entity && Pw(r.entity), [r]);
      const h = Uw(e, t, n, true);
      0;
      0;
      0;
      0;
      0;
      return z.jsx(dy, {
        tooltip: h && (0, z.jsx)(bb, {
          text: h
        }),
        disableFocus: null != o || null != r.entity || null != s.entity,
        children: z.jsxs(ep, {
          children: [z.jsx(Ny, {
            uppercase: true,
            left: z.jsx(Pc.SelectedInfoPanel.PUBLIC_TRANSPORT_VEHICLE_TITLE, {
              hash: c
            }),
            right: z.jsx(Pc.SelectedInfoPanel.VEHICLE_STATES, {
              hash: l
            })
          }), null != s.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: i ? (0, z.jsx)(Pc.SelectedInfoPanel.ORIGIN, {}) : (0, z.jsx)(Pc.SelectedInfoPanel.OWNED_BY, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: u,
              children: (0, z.jsx)(Hu, {
                value: s.name
              })
            })
          }), null != r.entity && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.DESTINATION, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: m,
              children: (0, z.jsx)(Hu, {
                value: r.name
              })
            })
          }), null != a && (0, z.jsx)(Ny, {
            subRow: true,
            left: (0, z.jsx)(Pc.SelectedInfoPanel.LINE, {}),
            link: (0, z.jsx)(Fle, {
              onSelect: d,
              children: (0, z.jsx)(Hu, {
                value: a
              })
            })
          })]
        })
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/vehicle-sections/public-transport-vehicle-section.tsx", {
      get PublicTransportVehicleSection() {
        return Gde;
      },
      set PublicTransportVehicleSection(e) {
        Gde = e;
      }
    });
    var Vde = {
      [mw.Resource]: xue,
      [mw.LocalServices]: gue,
      [mw.Actions]: ode,
      [mw.Description]: ude,
      [mw.Developer]: () => null,
      [mw.Residents]: fce,
      [mw.HouseholdSidebar]: () => null,
      [mw.Districts]: Gle,
      [mw.Title]: () => null,
      [mw.Notifications]: gde,
      [mw.Policies]: Ide,
      [mw.Profitability]: pde,
      [mw.AverageHappiness]: hde,
      [mw.Schedule]: Cue,
      [mw.Line]: Tue,
      [mw.Lines]: mue,
      [mw.Color]: lue,
      [mw.LineVisualizer]: () => null,
      [mw.TicketPrice]: Lue,
      [mw.VehicleCount]: Mue,
      [mw.Attractiveness]: gle,
      [mw.Efficiency]: zle,
      [mw.Employees]: qle,
      [mw.Upkeep]: Hce,
      [mw.Level]: sce,
      [mw.Education]: Hle,
      [mw.Pollution]: mce,
      [mw.Healthcare]: Zle,
      [mw.Deathcare]: yle,
      [mw.Garbage]: Qle,
      [mw.Police]: cce,
      [mw.Vehicles]: yde,
      [mw.DispatchedVehicles]: jde,
      [mw.Electricity]: $le,
      [mw.Transformer]: Ice,
      [mw.Battery]: _le,
      [mw.Water]: zce,
      [mw.Sewage]: xce,
      [mw.Fire]: Xle,
      [mw.Prison]: pce,
      [mw.Shelter]: vce,
      [mw.Parking]: lce,
      [mw.Park]: rce,
      [mw.Mail]: oce,
      [mw.Road]: bue,
      [mw.Company]: Ile,
      [mw.Storage]: Ece,
      [mw.PrivateVehicle]: Bde,
      [mw.PublicTransportVehicle]: Gde,
      [mw.CargoTransportVehicle]: Nde,
      [mw.DeliveryVehicle]: Ode,
      [mw.HealthcareVehicle]: Ade,
      [mw.FireVehicle]: Pde,
      [mw.PoliceVehicle]: Fde,
      [mw.MaintenanceVehicle]: kde,
      [mw.DeathcareVehicle]: wde,
      [mw.PostVehicle]: Ude,
      [mw.GarbageVehicle]: Lde,
      [mw.Passengers]: Dde,
      [mw.Cargo]: Cde,
      [mw.Load]: Mde,
      [mw.Status]: oue,
      [mw.Citizen]: $ce,
      [mw.DummyHuman]: qce,
      [mw.Animal]: Yce,
      [mw.SelectVehicles]: LY,
      [mw.DestroyedBuilding]: Rle,
      [mw.DestroyedTree]: fue,
      [mw.Comfort]: ble,
      [mw.Upgrades]: kce,
      [mw.UpgradeProperties]: yce
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/selected-info-sections.tsx", {
      get selectedInfoSectionComponents() {
        return Vde;
      },
      set selectedInfoSectionComponents(e) {
        Vde = e;
      }
    });
    var Kde = Xr("HouseholdSidebarSection", "householdMap");
    var Wde = Xr("HouseholdSidebarSection", "residentMap");
    var zde = Xr("HouseholdSidebarSection", "petMap");
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/household-sidebar-section/household-sidebar-bindings.ts", {
      get householdMap() {
        return householdMap;
      },
      set householdMap(e) {
        householdMap = e;
      },
      get residentMap() {
        return residentMap;
      },
      set residentMap(e) {
        residentMap = e;
      },
      get petMap() {
        return petMap;
      },
      set petMap(e) {
        petMap = e;
      }
    });
    let Yde = {
      itemSize: "50",
      "household-sidebar-section": "household-sidebar-section_Pp8",
      householdSidebarSection: "household-sidebar-section_Pp8",
      "gamepad-active": "gamepad-active_M6w",
      gamepadActive: "gamepad-active_M6w",
      content: "content_uZM",
      "fixed-list": "fixed-list_leU",
      fixedList: "fixed-list_leU",
      "virtual-list": "virtual-list_kom",
      virtualList: "virtual-list_kom",
      item: "item_Pjq button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      "item-label": "item-label_NoI",
      itemLabel: "item-label_NoI",
      ellipsis: "ellipsis_siY",
      icon: "icon_cU0",
      household: "household_aFZ",
      divider: "divider_hD0",
      badge: "badge_PNB",
      avatar: "avatar_R0M",
      hint: "hint_MRA"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/household-sidebar-section/household-sidebar-section.module.scss", {
      get classes() {
        return Yde;
      },
      set classes(e) {
        Object.assign(Yde, e);
      }
    });
    var qde = ({
      variant: e,
      residence: t,
      household: n,
      households: s,
      residents: i,
      pets: a,
      focusKey: o,
      className: r
    }) => {
      const l = km();
      const c = function (e, t) {
        return e !== Mw.Building || 1 === t;
      }(e, s);
      const u = Vm();
      const d = parseFloat(Yde.itemSize) * u;
      const m = function (e, t, n, s) {
        return e === Mw.Building && t > 1 ? t : n + s;
      }(e, s, i, a);
      const h = GK(d, m, 4);
      0;
      const [g, p] = Y.useState(Dr(t.entity));
      0;
      const f = Y.useCallback(t => {
        const [n, s] = function (e, t, n, s) {
          return n !== Mw.Building || s ? e < t ? [Wde, e] : [zde, e - t] : [Kde, e];
        }(t, i, e, c);
        0;
        return z.jsx(Xde, {
          focusKey: t,
          index: s,
          map: n,
          useFamilyName: true
        }, t);
      }, [i, c, e]);
      0;
      const x = Y.useMemo(() => ({
        "Move Vertical": e => {
          let s = g;
          if (e > 0) {
            if ("number" == typeof g) {
              s = g > 0 ? g - 1 : Dr(c ? n.entity : t.entity);
            } else if (g === Dr(n.entity)) {
              s = Dr(t.entity);
            }
          }
          if (e < 0) {
            if ("number" == typeof g) {
              if (g < m - 1) {
                s = g + 1;
              }
            } else {
              s = g === Dr(t.entity) && c ? Dr(n.entity) : 0;
            }
          }
          p(s);
        }
      }), [g, n.entity, m, t.entity, c]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        focusKey: o,
        className: Qu()(Yde.householdSidebarSection, l && Yde.gamepadActive, r),
        contentClassName: Yde.content,
        unfocusedHintAction: "Focus Occupants Panel",
        showCloseHint: "Back",
        children: z.jsx(Lg, {
          actions: x,
          children: z.jsxs(ip, {
            focused: g,
            children: [z.jsxs("div", {
              className: Yde.fixedList,
              children: [!Ur(t.entity, Xp) && (0, z.jsx)(Qde, {
                focusKey: Dr(t.entity),
                item: t
              }), c && !Ur(n.entity, Xp) && (0, z.jsx)(Qde, {
                focusKey: Dr(n.entity),
                item: n
              })]
            }), z.jsx("div", {
              className: Yde.divider
            }), z.jsx(FK, {
              renderItem: f,
              sizeProvider: h,
              className: Yde.virtualList
            })]
          })
        })
      });
    };
    const Xde = ({
      index: e,
      map: t,
      useFamilyName: n = false,
      focusKey: s
    }) => {
      const i = ll(t, e);
      0;
      return z.jsx(Qde, {
        item: i,
        useFamilyName: n,
        focusKey: s
      });
    };
    const Qde = ({
      item: e,
      useFamilyName: t = false,
      focusKey: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      const a = Ku(e?.name);
      const o = Ku(e?.familyName);
      0;
      const r = Y.useCallback(() => {
        if (!e.selected) {
          Pw(e.entity);
        }
      }, [e]);
      if (!e) {
        0;
        return z.jsx(z.Fragment, {});
      }
      const l = t && o || a;
      const c = l.length > 20;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: i,
        children: z.jsx(bg, {
          tooltip: c ? l : undefined,
          children: z.jsxs(L_, {
            focusKey: n,
            disableHint: true,
            selected: e.selected,
            onSelect: r,
            className: Qu()(Yde.item, e.count && Yde.household),
            children: [e.icon ? (0, z.jsx)(W_, {
              src: e.icon,
              className: Yde.icon
            }) : (0, z.jsx)(c7, {
              entity: e.entity,
              className: Yde.avatar
            }), e.count && (0, z.jsx)("div", {
              className: Yde.badge,
              children: e.count
            }), z.jsx("div", {
              className: Qu()(Yde.itemLabel, c && Yde.ellipsis),
              children: l
            }), z.jsx(LT, {
              action: "Select",
              active: s && !e.selected,
              className: Yde.hint
            })]
          })
        })
      });
    };
    function Zde(e, t) {
      const n = Ku(e);
      0;
      const [s, i] = Y.useState(null);
      0;
      const a = Y.useCallback(e => {
        i(e.target.value);
      }, []);
      0;
      const o = Y.useCallback(() => {
        if (null != s && s !== n) {
          t(s);
        }
        i(null);
      }, [s, n, t]);
      0;
      const r = Y.useCallback(() => {
        i(null);
      }, []);
      return [s ?? n, a, o, r];
    }
    function Jde(e) {
      tl("TitleSection", "renameEntity", e);
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/household-sidebar-section/household-sidebar-section.tsx", {
      get HouseholdSidebarSection() {
        return qde;
      },
      set HouseholdSidebarSection(e) {
        qde = e;
      }
    });
    X.add("game-ui/common/hooks/use-input-name.ts", {
      get useInputName() {
        return Zde;
      },
      set useInputName(e) {
        Zde = e;
      }
    });
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/title-section/title-section-bindings.ts", {
      get renameSelectedEntity() {
        return Jde;
      },
      set renameSelectedEntity(e) {
        Jde = e;
      }
    });
    let eme = {
      container: "container_Q9t",
      input: "input_lbJ",
      label: "label_GFm"
    };
    X.add("game-ui/game/components/selected-info-panel/shared-components/text-input/text-input.module.scss", {
      get classes() {
        return eme;
      },
      set classes(e) {
        Object.assign(eme, e);
      }
    });
    var nme = Y.memo(function ({
      icon: e,
      tooltip: t,
      panelTag: n,
      focusKey: s,
      name: i,
      vkLocaleKey: a,
      onChangeName: o,
      onSubmitName: r
    }) {
      0;
      0;
      0;
      0;
      0;
      return z.jsx(nE, {
        icon: e || undefined,
        children: z.jsx(aT, {
          uiTag: n,
          children: z.jsx(bg, {
            direction: "right",
            alignment: "start",
            tooltip: t && (0, z.jsx)(bb, {
              text: t
            }),
            children: z.jsx(pW, {
              theme: eme,
              focusKey: s,
              value: i,
              vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
                hash: a
              }),
              onChange: o,
              onBlur: r
            })
          })
        })
      });
    }, (e, t) => Kr(e, t, 3));
    const sme = function ({
      group: e,
      tooltipTags: t,
      tooltipKeys: n,
      focusKey: s,
      name: i,
      vkLocaleKey: a,
      icon: o
    }) {
      const [r, l, c] = Zde(i, Jde);
      const u = Uw(e, n, t);
      const d = sl(_w);
      0;
      const m = Y.useMemo(() => `${dT.value?.selectedInfoPanelTitle}+${d}`, [d]);
      rg(m);
      0;
      return z.jsx(nme, {
        icon: o,
        name: r,
        tooltip: u,
        vkLocaleKey: a,
        panelTag: m,
        onChangeName: l,
        onSubmitName: c,
        focusKey: s
      });
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-sections/shared-sections/title-section/title-section.tsx", {
      get TitleSection() {
        return sme;
      },
      set TitleSection(e) {
        sme = e;
      }
    });
    let ime = {
      "selected-info-panel": "selected-info-panel_gG8",
      selectedInfoPanel: "selected-info-panel_gG8",
      wrapper: "wrapper_SgH",
      container: "container_Ty2",
      "gamepad-active": "gamepad-active_TBU",
      gamepadActive: "gamepad-active_TBU",
      scrollable: "scrollable_gsV",
      space: "space_N1X",
      smallSpace: "smallSpace_Bas",
      row: "row_OqM",
      sidebar: "sidebar_fgt",
      hints: "hints_HGp",
      hint: "hint_Kc1"
    };
    X.add("game-ui/game/components/selected-info-panel/selected-info-panel.module.scss", {
      get classes() {
        return ime;
      },
      set classes(e) {
        Object.assign(ime, e);
      }
    });
    const ome = new Tg("SelectedInfoPanel");
    const rme = new Tg("LineVisualizer");
    const lme = new Tg("HouseholdSidebar");
    0;
    0;
    var cme = Y.memo(Y.forwardRef(function ({
      elKey: e,
      titleSection: t,
      topSections: n,
      middleSections: s,
      bottomSections: i,
      onClose: a
    }, o) {
      0;
      const r = Y.useMemo(() => {
        if (!t) {
          return null;
        }
        const {
          name: e,
          vkLocaleKey: n,
          icon: s,
          group: i,
          tooltipKeys: a,
          tooltipTags: o
        } = t;
        return t && (0, z.jsx)(sme, {
          name: e,
          vkLocaleKey: n,
          icon: s,
          group: i,
          tooltipKeys: a,
          tooltipTags: o
        });
      }, [t]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        ref: o,
        focusKey: ome,
        header: r,
        footer: z.jsx(lM, {
          components: Vde,
          data: i
        }),
        transitionSounds: lp,
        theme: Are,
        className: Qu()(ime.selectedInfoPanel),
        onClose: a,
        allowLooping: true,
        showCloseHint: true,
        children: z.jsxs(ep, {
          children: [z.jsx(lM, {
            components: Vde,
            data: n
          }), z.jsx(ab, {
            className: ime.scrollable,
            children: z.jsx(lM, {
              components: Vde,
              data: s
            })
          })]
        })
      }, e);
    }), (e, t) => Kr(e, t, 20));
    0;
    const ume = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n,
      showHint: s
    }, i) {
      const a = sl(Ew);
      const o = sl(Iw);
      const r = sl(yw);
      const l = sl(Sw);
      const c = sl(Cw);
      const u = sl(Nw);
      const d = null != c;
      const m = null != u;
      const h = d || m;
      const g = al(Uue);
      const p = al(kre);
      const f = al(Fue);
      const x = null != c ? rme : lme;
      const v = km();
      0;
      const [_, b] = Y.useState(false);
      0;
      const [T, E] = Y.useState(ome);
      0;
      const I = Y.useMemo(() => ({
        Back: () => {
          if (g.current || p.current || f.current) {
            uP(yP);
          } else if (T === x) {
            E(ome);
          } else {
            n();
          }
        },
        "Focus Line Panel": !d || T !== ome || g.current || p.current || f.current ? null : () => E(rme),
        "Focus Occupants Panel": !m || T !== ome || g.current || p.current || f.current ? null : () => E(lme),
        "Focus Info Panel": !h || T !== x || g.current || p.current || f.current ? null : () => E(ome)
      }), [x, T, g, m, d, h, f, n, p]);
      0;
      Y.useEffect(() => {
        if (!h) {
          E(ome);
        }
      }, [h]);
      const y = sl(xw);
      const S = sl(vw);
      const j = sl(Ow);
      0;
      const C = Y.useMemo(() => u?.residence.entity, [u?.residence.entity]);
      0;
      const N = Y.useMemo(() => !!u?.households && u?.household?.entity, [u?.household?.entity, u?.households]);
      0;
      const w = Y.useMemo(() => Ur(j, Xp) ? Ur(S, Xp) ? Ur(C, y) || !N ? `${C?.index}${y.version}${y.index}${C?.version}` : N && Dr(N) : `${Dr(S)}->SIP` : `${Dr(y)}->SIP`, [N, C, j, y, S]);
      const O = sl(_w);
      const P = !Ur(Xp, y) && "" !== O;
      0;
      const L = Y.useMemo(() => `${dT.value?.selectedInfoPanel}+${O}`, [O]);
      rg(L, P);
      const A = sl(Nm).find(e => "Back" === e.name);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: ime.wrapper,
        children: [z.jsx(Ep, {
          ref: i,
          focusKey: e,
          className: Qu()(ime.row, ime.container, v && ime.gamepadActive, t),
          onFocusChange: b,
          children: z.jsx(Lg, {
            actions: I,
            children: z.jsxs(ip, {
              focused: T,
              children: [c && (0, z.jsx)(dle, {
                focusKey: rme,
                focused: T === rme,
                className: ime.sidebar,
                ...c
              }, `${Dr(j)}->LV`), u && (0, z.jsx)(qde, {
                focusKey: lme,
                ...u,
                className: ime.sidebar
              }, C && Dr(C)), z.jsx(aT, {
                uiTag: L,
                active: P,
                children: z.jsx(cme, {
                  elKey: (1 === u?.households ? N && Dr(N) : w) || "key",
                  titleSection: l,
                  topSections: a,
                  middleSections: o,
                  bottomSections: r,
                  onClose: n
                })
              })]
            })
          })
        }), z.jsx("div", {
          className: ime.hints,
          children: z.jsx(LT, {
            action: "Back",
            active: s && !!A?.items.length && !_,
            className: ime.hint
          })
        })]
      });
    });
    var dme = ({
      small: e
    }) => (0, z.jsx)("div", {
      className: Qu()(e ? ime.smallSpace : ime.space)
    });
    function mme() {
      const e = sl(rL);
      const t = sl(xw);
      const n = sl(GO);
      const s = sl(Fue);
      const i = sl(kre);
      const a = sl(qL);
      const o = sl(Uue);
      if (Ur(t, Xp)) {
        return false;
      }
      if (!Ur(e, Xp)) {
        return false;
      }
      switch (n.id) {
        case yP:
          return true;
        case PP:
          return i;
        case NP:
          return a || s;
        case jP:
          return o;
        case wP:
          return true;
        default:
          return false;
      }
    }
    X.add("game-ui/game/components/selected-info-panel/selected-info-panel.tsx", {
      get SelectedInfoPanel() {
        return ume;
      },
      set SelectedInfoPanel(e) {
        ume = e;
      },
      get PanelSpace() {
        return dme;
      },
      set PanelSpace(e) {
        dme = e;
      },
      get useSelectedInfoPanelVisible() {
        return mme;
      },
      set useSelectedInfoPanelVisible(e) {
        mme = e;
      }
    });
    let hme = {
      "left-menu": "left-menu_L1D",
      leftMenu: "left-menu_L1D"
    };
    X.add("game-ui/game/components/left-menu/left-menu.module.scss", {
      get classes() {
        return hme;
      },
      set classes(e) {
        Object.assign(hme, e);
      }
    });
    var pme = ({
      className: e
    }) => (0, z.jsx)("div", {
      className: Qu()(hme.leftMenu, e),
      children: (0, z.jsx)(YZ, {
        name: "GameBottomLeft"
      })
    });
    X.add("game-ui/game/components/left-menu/left-menu.tsx", {
      get LeftMenu() {
        return pme;
      },
      set LeftMenu(e) {
        pme = e;
      }
    });
    let fme = {
      "chirper-popup": "chirper-popup_pEX",
      chirperPopup: "chirper-popup_pEX",
      item: "item_Pf8",
      enter: "enter_is9",
      "enter-active": "enter-active_pX6",
      enterActive: "enter-active_pX6",
      "exit-active": "exit-active_Mg7",
      exitActive: "exit-active_Mg7",
      "item-inner": "item-inner_Xwb",
      itemInner: "item-inner_Xwb",
      "chirp-layout": "chirp-layout_xHZ",
      chirpLayout: "chirp-layout_xHZ"
    };
    X.add("game-ui/game/components/chirper/chirper-popup.module.scss", {
      get classes() {
        return fme;
      },
      set classes(e) {
        Object.assign(fme, e);
      }
    });
    var vme = ({
      disabled: e,
      className: t,
      onClick: n
    }) => {
      0;
      const [s, i] = Y.useState([]);
      0;
      const [a, o] = Y.useState(null);
      const r = s.length > 0;
      0;
      Y.useEffect(() => {
        if (!e) {
          const e = $y.subscribe(e => i(t => [...t, e]));
          let t = 0;
          if (r) {
            const e = () => {
              i(e => e.slice(1, e.length));
              t = window.setTimeout(e, 7e3);
            };
            t = window.setTimeout(e, 7e3);
          }
          return () => {
            e.dispose();
            window.clearTimeout(t);
          };
        }
        i([]);
      }, [e, r]);
      0;
      Y.useEffect(() => {
        if (!Ur(null !== a ? a.entity : Xp, s.length > 0 ? s[0].entity : Xp)) {
          if (s.length > 0) {
            o(s[0]);
            rp(op.chirpEvent);
          } else {
            o(null);
          }
        }
      }, [a, s]);
      0;
      0;
      return z.jsx("div", {
        className: Qu()(fme.chirperPopup, t),
        children: z.jsx(cd, {
          skipInitial: false,
          children: a && (0, z.jsx)(dh, {
            styles: fme,
            children: (0, z.jsx)("div", {
              className: fme.item,
              onClick: n,
              children: (0, z.jsx)("div", {
                className: fme.itemInner,
                children: (0, z.jsx)(f7, {
                  focusKey: Eg,
                  chirp: a,
                  className: fme.chirpLayout
                })
              })
            })
          }, Dr(a.entity))
        })
      });
    };
    X.add("game-ui/game/components/chirper/chirper-popup.tsx", {
      get ChirperPopup() {
        return vme;
      },
      set ChirperPopup(e) {
        vme = e;
      }
    });
    let _me = {
      button: "button_iKo button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      "emergency-mode": "emergency-mode_MW7",
      emergencyMode: "emergency-mode_MW7",
      "toggle-states": "toggle-states_Yz9 toggle-states_DTm",
      toggleStates: "toggle-states_Yz9 toggle-states_DTm",
      icon: "icon_qLJ icon_soN icon_Iwk"
    };
    X.add("game-ui/game/components/right-menu/right-menu-button.module.scss", {
      get classes() {
        return _me;
      },
      set classes(e) {
        Object.assign(_me, e);
      }
    });
    let Tme = {
      "horizontal-scroller": "horizontal-scroller_lkP",
      horizontalScroller: "horizontal-scroller_lkP",
      space: "space_FBs",
      content: "content_LaN"
    };
    X.add("game-ui/game/components/radio/horizontal-scroller/horizontal-scroller.module.scss", {
      get classes() {
        return Tme;
      },
      set classes(e) {
        Object.assign(Tme, e);
      }
    });
    var Ime = ({
      className: e,
      children: t
    }) => {
      0;
      const n = Y.useRef(null);
      const s = Vm();
      0;
      Y.useEffect(() => {
        const e = performance.now();
        let t = 0;
        const i = a => {
          if (!n.current) {
            return;
          }
          const o = Math.max(n.current.scrollWidth, 1);
          n.current.scrollLeft = .08 * (a - e) * s % (o / 2);
          t = window.requestAnimationFrame(i);
        };
        t = window.requestAnimationFrame(i);
        return () => window.cancelAnimationFrame(t);
      }, [s]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        ref: n,
        className: Qu()(Tme.horizontalScroller, e),
        children: [z.jsx("div", {
          className: Tme.space
        }), z.jsx("div", {
          className: Tme.content,
          children: t
        }), z.jsx("div", {
          className: Tme.space
        }), z.jsx("div", {
          className: Tme.content,
          children: t
        }), z.jsx("div", {
          className: Tme.space
        }), z.jsx("div", {
          className: Tme.content,
          children: t
        }), z.jsx("div", {
          className: Tme.space
        }), z.jsx("div", {
          className: Tme.content,
          children: t
        })]
      });
    };
    X.add("game-ui/game/components/radio/horizontal-scroller/horizontal-scroller.tsx", {
      get HorizontalScroller() {
        return Ime;
      },
      set HorizontalScroller(e) {
        Ime = e;
      }
    });
    let yme = {
      "emergency-radio-player": "emergency-radio-player_v9P",
      emergencyRadioPlayer: "emergency-radio-player_v9P",
      expanded: "expanded_G9_",
      "right-space": "right-space_TPn",
      rightSpace: "right-space_TPn",
      controls: "controls_mbB",
      "volume-controls": "volume-controls_Pqk",
      volumeControls: "volume-controls_Pqk",
      "volume-slider": "volume-slider_jT_",
      volumeSlider: "volume-slider_jT_",
      "center-controls": "center-controls_rY1",
      centerControls: "center-controls_rY1",
      "message-field": "message-field_Qua",
      messageField: "message-field_Qua",
      space: "space_MTH",
      button: "button_Hpo",
      hint: "hint_enz hint_Rv8",
      "hint-segment": "hint-segment_rYk",
      hintSegment: "hint-segment_rYk"
    };
    X.add("game-ui/game/components/radio/emergency-radio-player/emergency-radio-player.module.scss", {
      get classes() {
        return yme;
      },
      set classes(e) {
        Object.assign(yme, e);
      }
    });
    const jme = new Tg("FOCUS_EMERGENCY");
    const Cme = new Tg("MUTE");
    const Nme = new Tg("VOLUME");
    0;
    var wme = Y.forwardRef(function ({
      expanded: e,
      className: t
    }, n) {
      const s = sl(AN);
      const i = sl(PN);
      const a = sl(kN);
      const o = sl(DN);
      0;
      const [r, l] = Y.useState(null);
      0;
      const [c, u] = Y.useState(false);
      0;
      const [d, m] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Tae, {
        enabled: e,
        children: z.jsx(Tp, {
          onFocusChange: u,
          ref: n,
          className: Qu()(yme.emergencyRadioPlayer, e && yme.expanded, t),
          children: z.jsx(Ap, {
            children: z.jsxs(Xg, {
              focused: r,
              onChange: l,
              direction: Mg.Horizontal,
              children: [z.jsxs("div", {
                className: yme.controls,
                children: [a && (0, z.jsx)(bg, {
                  tooltip: (0, z.jsx)(Pc.Radio.FOCUS_EMERGENCY, {}),
                  children: (0, z.jsx)($_, {
                    disableHint: true,
                    tinted: true,
                    focusKey: jme,
                    src: "Media/Radio/MapMarker.svg",
                    className: yme.button,
                    onSelect: JN
                  })
                }), z.jsx(bg, {
                  tooltip: s ? (0, z.jsx)(Pc.Radio.UNMUTE, {}) : (0, z.jsx)(Pc.Radio.MUTE, {}),
                  children: z.jsx($_, {
                    disableHint: true,
                    tinted: true,
                    focusKey: Cme,
                    src: s ? "Media/Radio/VolumeMuted.svg" : "Media/Radio/Volume.svg",
                    className: yme.button,
                    onSelect: $N,
                    children: z.jsx(LT, {
                      action: "Select",
                      active: c && r === Cme,
                      className: yme.hint
                    })
                  })
                }), z.jsxs(Tp, {
                  focusSound: op.hoverItem,
                  className: yme.volumeControls,
                  children: [z.jsx(LT, {
                    action: "Select",
                    active: c && r === Nme && !d,
                    className: Qu()(yme.hint, yme.hintSegment)
                  }), z.jsx(Np, {
                    onSelectedStateChanged: m,
                    children: z.jsx(aT, {
                      uiTag: dT.value?.radioPanelVolumeSlider,
                      children: z.jsx(GM, {
                        focusKey: e ? Nme : Eg,
                        start: 0,
                        end: 1,
                        value: i,
                        onChange: KN,
                        sounds: BM,
                        className: yme.volumeSlider
                      })
                    })
                  })]
                }), z.jsx("div", {
                  className: yme.centerControls,
                  children: z.jsx(Ime, {
                    className: yme.messageField,
                    children: null != o && (0, z.jsx)(hu, {
                      value: o
                    })
                  })
                })]
              }), z.jsx("div", {
                className: yme.rightSpace
              })]
            })
          })
        })
      });
    });
    X.add("game-ui/game/components/radio/emergency-radio-player/emergency-radio-player.tsx", {
      get EmergencyRadioPlayer() {
        return wme;
      },
      set EmergencyRadioPlayer(e) {
        wme = e;
      }
    });
    let Ome = {
      "radio-player": "radio-player_FIM",
      radioPlayer: "radio-player_FIM",
      expanded: "expanded_feM",
      "right-space": "right-space_BDk",
      rightSpace: "right-space_BDk",
      "segment-field": "segment-field_jsn",
      segmentField: "segment-field_jsn",
      "segment-field-scroller": "segment-field-scroller_sCs",
      segmentFieldScroller: "segment-field-scroller_sCs",
      "segment-title": "segment-title_OlY",
      segmentTitle: "segment-title_OlY",
      "segment-subtitle": "segment-subtitle_S9e",
      segmentSubtitle: "segment-subtitle_S9e",
      "controls-bounds": "controls-bounds_ty4",
      controlsBounds: "controls-bounds_ty4",
      "controls-visible": "controls-visible_Rcf",
      controlsVisible: "controls-visible_Rcf",
      controls: "controls_YUi",
      "volume-controls": "volume-controls_PII",
      volumeControls: "volume-controls_PII",
      "volume-slider": "volume-slider_daK",
      volumeSlider: "volume-slider_daK",
      "ads-control": "ads-control_pkw",
      adsControl: "ads-control_pkw",
      "ads-control-inner": "ads-control-inner_NuT",
      adsControlInner: "ads-control-inner_NuT",
      "ads-label": "ads-label_XQP",
      adsLabel: "ads-label_XQP",
      "center-controls": "center-controls_IeA",
      centerControls: "center-controls_IeA",
      button: "button_hbJ button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      "play-pause-button": "play-pause-button_s9V button_hbJ button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      playPauseButton: "play-pause-button_s9V button_hbJ button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      hint: "hint_shY",
      "hint-segment": "hint-segment_aVl",
      hintSegment: "hint-segment_aVl",
      "hint-left": "hint-left_lOq",
      hintLeft: "hint-left_lOq",
      "hint-right": "hint-right_Xfk",
      hintRight: "hint-right_Xfk",
      icon: "icon_teM"
    };
    X.add("game-ui/game/components/radio/radio-player/radio-player.module.scss", {
      get classes() {
        return Ome;
      },
      set classes(e) {
        Object.assign(Ome, e);
      }
    });
    const Lme = new Tg("MUTE");
    const Ame = new Tg("VOLUME");
    const Mme = new Tg("PREVIOUS");
    const Rme = new Tg("PLAY_PAUSE");
    const kme = new Tg("NEXT");
    const Dme = new Tg("ADS");
    const Fme = {
      hint: Ome.hint,
      icon: Ome.icon
    };
    const Ume = op.selectToggle;
    var Bme = Y.forwardRef(function ({
      controlsVisible: e,
      expanded: t,
      className: n
    }, s) {
      const i = sl(VN);
      const a = sl(LN);
      const o = sl(AN);
      const r = sl(PN);
      const l = sl(MN);
      0;
      const [c, u] = Y.useState(null);
      0;
      const [d, m] = Y.useState(false);
      0;
      const [h, g] = Y.useState(false);
      0;
      Y.useEffect(() => {
        u(t ? Rme : kme);
      }, [t]);
      0;
      const p = Y.useCallback(() => {
        rp(Ume);
        XN();
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Tae, {
        enabled: t,
        children: z.jsx("div", {
          ref: s,
          className: Qu()(Ome.radioPlayer, e && Ome.controlsVisible, t && Ome.expanded, n),
          children: z.jsx(Ap, {
            children: z.jsx(Lh, {
              onFocusChange: m,
              children: z.jsxs(Xg, {
                focused: c,
                direction: Mg.Horizontal,
                onChange: u,
                onRefocus: Qg,
                children: [i && (0, z.jsx)("div", {
                  className: Ome.segmentField,
                  children: (0, z.jsxs)(Ime, {
                    className: Ome.segmentFieldScroller,
                    children: [(0, z.jsx)("div", {
                      className: Ome.segmentTitle,
                      children: i.title
                    }), (0, z.jsx)("div", {
                      className: Ome.segmentSubtitle,
                      children: i.info
                    })]
                  }, t ? 1 : 0)
                }), z.jsx("div", {
                  className: Ome.controlsBounds,
                  children: z.jsxs("div", {
                    className: Ome.controls,
                    children: [z.jsx(bg, {
                      tooltip: o ? (0, z.jsx)(Pc.Radio.UNMUTE, {}) : (0, z.jsx)(Pc.Radio.MUTE, {}),
                      children: z.jsx($_, {
                        disableHint: true,
                        tinted: true,
                        focusKey: Lme,
                        src: o ? "Media/Radio/VolumeMuted.svg" : "Media/Radio/Volume.svg",
                        className: Ome.button,
                        onSelect: $N,
                        children: z.jsx(LT, {
                          action: "Select",
                          active: d && c === Lme,
                          theme: Fme
                        })
                      })
                    }), z.jsxs(Ep, {
                      focusKey: Ame,
                      focusSound: op.hoverItem,
                      className: Ome.volumeControls,
                      children: [z.jsx(Np, {
                        onSelectedStateChanged: g,
                        children: z.jsx(aT, {
                          uiTag: dT.value?.radioPanelVolumeSlider,
                          children: z.jsx(GM, {
                            start: 0,
                            end: 1,
                            value: r,
                            onChange: KN,
                            sounds: BM,
                            className: Ome.volumeSlider
                          })
                        })
                      }), z.jsx(LT, {
                        action: h ? "Back" : "Select",
                        active: d && c === Ame,
                        theme: Fme,
                        className: Ome.hintRight
                      })]
                    }), z.jsxs("div", {
                      className: Ome.centerControls,
                      children: [z.jsx(bg, {
                        tooltip: z.jsx(Pc.Radio.PREVIOUS_BUTTON_TOOLTIP, {}),
                        children: z.jsx($_, {
                          disableHint: true,
                          tinted: true,
                          focusKey: Mme,
                          src: "Media/Radio/Previous.svg",
                          className: Ome.button,
                          onSelect: QN,
                          children: z.jsx(LT, {
                            action: "Select",
                            active: d && c === Mme,
                            theme: Fme
                          })
                        })
                      }), z.jsx(bg, {
                        tooltip: a ? (0, z.jsx)(Pc.Radio.PLAY_BUTTON_TOOLTIP, {}) : (0, z.jsx)(Pc.Radio.PAUSE_BUTTON_TOOLTIP, {}),
                        children: z.jsx($_, {
                          disableHint: true,
                          tinted: true,
                          focusKey: Rme,
                          src: a ? "Media/Radio/Play.svg" : "Media/Radio/Pause.svg",
                          className: Ome.playPauseButton,
                          onSelect: zN,
                          children: z.jsx(LT, {
                            action: "Select",
                            active: d && c === Rme,
                            theme: Fme
                          })
                        })
                      }), z.jsx(bg, {
                        tooltip: z.jsx(Pc.Radio.NEXT_BUTTON_TOOLTIP, {}),
                        children: z.jsx($_, {
                          disableHint: true,
                          tinted: true,
                          focusKey: kme,
                          src: "Media/Radio/Next.svg",
                          className: Ome.button,
                          onSelect: ZN,
                          children: z.jsx(LT, {
                            action: "Select",
                            active: d && c === kme,
                            theme: Fme
                          })
                        })
                      })]
                    }), z.jsx(aT, {
                      uiTag: dT.value?.radioPanelAdsToggle,
                      children: z.jsx("div", {
                        className: Ome.adsControl,
                        onClick: p,
                        children: z.jsx(bg, {
                          tooltip: z.jsx(Pc.Radio.ADS_BUTTON_TOOLTIP, {}),
                          children: z.jsxs(Ep, {
                            focusKey: t ? Dme : Eg,
                            className: Ome.adsControlInner,
                            children: [z.jsx(LT, {
                              action: "Select",
                              active: d && c === Dme,
                              className: Ome.hintLeft,
                              theme: Fme
                            }), z.jsx("div", {
                              className: Ome.adsLabel,
                              children: "Ads"
                            }), z.jsx(P8, {
                              checked: !l,
                              className: Ome.adsToggle,
                              onChange: XN,
                              toggleSound: Ume
                            })]
                          })
                        })
                      })
                    })]
                  })
                }), z.jsx("div", {
                  className: Ome.rightSpace
                })]
              })
            })
          })
        })
      });
    });
    X.add("game-ui/game/components/radio/radio-player/radio-player.tsx", {
      get RadioPlayer() {
        return Bme;
      },
      set RadioPlayer(e) {
        Bme = e;
      }
    });
    let Gme = {
      "station-icon": "station-icon_PgB",
      stationIcon: "station-icon_PgB",
      "warning-icon": "warning-icon_VOz",
      warningIcon: "warning-icon_VOz",
      anchor: "anchor_tuN",
      "anchor-inner": "anchor-inner_KV5",
      anchorInner: "anchor-inner_KV5",
      expanded: "expanded_SgP",
      "player-bounds": "player-bounds_x19",
      playerBounds: "player-bounds_x19",
      player: "player_rRd",
      enter: "enter_eXw",
      "enter-active": "enter-active_zDg",
      enterActive: "enter-active_zDg",
      "exit-active": "exit-active_gQZ",
      exitActive: "exit-active_gQZ",
      hint: "hint_Nwu hint_Rv8"
    };
    X.add("game-ui/game/components/radio/radio-player-button/radio-player-button.module.scss", {
      get classes() {
        return Gme;
      },
      set classes(e) {
        Object.assign(Gme, e);
      }
    });
    const Hme = new Tg("RADIO_BUTTON");
    const Kme = new Tg("PLAYER");
    var Wme = ({
      className: e
    }) => {
      const t = sl(RN);
      const n = S5(Pv.Radio);
      const s = WC("Radio");
      const i = sl(GN);
      const a = sl(UN);
      const o = i.find(e => e.name === a);
      const r = o?.icon;
      0;
      const [l, c] = Y.useState(false);
      0;
      const [u, d] = Y.useState(false);
      0;
      const m = Y.useCallback(() => d(true), []);
      0;
      const h = Y.useCallback(() => {
        c(false);
        d(false);
      }, []);
      0;
      Y.useEffect(() => {
        let e = 0;
        const t = HN.subscribe(() => {
          window.clearTimeout(e);
          c(true);
          e = window.setTimeout(() => c(false), 3e3);
        });
        return () => {
          window.clearTimeout(e);
          t.dispose();
        };
      }, []);
      const g = km();
      0;
      const [p, f] = Y.useState(false);
      0;
      const [x, v] = Y.useState(false);
      0;
      const [_, b] = Y.useState(false);
      const T = _ ? Kme : Hme;
      0;
      const E = Y.useMemo(() => ({
        "Move Horizontal": e => {
          const t = e < 0;
          return _ !== t && (b(t), true);
        }
      }), [_]);
      0;
      const I = Y.useCallback(e => {
        f(e);
        if (!e) {
          b(false);
        }
      }, []);
      const y = u || p && g;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: Qu()(Gme.anchor, e),
        onMouseEnter: m,
        onMouseLeave: h,
        children: z.jsx(Lg, {
          actions: E,
          children: z.jsx(Lh, {
            onFocusChange: I,
            children: z.jsxs(ip, {
              focused: T,
              children: [z.jsx(sp, {
                focusKey: Kme,
                children: z.jsxs(cd, {
                  children: [(n.visible || l || y) && !t && !s && (0, z.jsx)("div", {
                    className: Qu()(Gme.anchorInner, n.visible && Gme.expanded),
                    children: (0, z.jsx)("div", {
                      className: Gme.playerBounds,
                      children: (0, z.jsx)(dh, {
                        styles: Gme,
                        children: (0, z.jsx)(Bme, {
                          controlsVisible: y,
                          expanded: n.visible,
                          className: Gme.player
                        })
                      })
                    })
                  }), t && (0, z.jsx)("div", {
                    className: Qu()(Gme.anchorInner, n.visible && Gme.expanded),
                    children: (0, z.jsx)("div", {
                      className: Gme.playerBounds,
                      children: (0, z.jsx)(dh, {
                        styles: Gme,
                        children: (0, z.jsx)(wme, {
                          expanded: n.visible,
                          className: Gme.player
                        })
                      })
                    })
                  })]
                })
              }, "player"), z.jsx(aT, {
                uiTag: dT.value?.radioPanelButton,
                children: z.jsx(Lh, {
                  onFocusChange: v,
                  children: z.jsxs(L_, {
                    disableHint: true,
                    focusKey: Hme,
                    theme: _me,
                    selected: n.visible,
                    className: Qu()(Gme.button, _me.toggleStates, t && _me.emergencyMode),
                    disabled: s,
                    onSelect: n.toggle,
                    shortcut: "Radio Panel",
                    children: [z.jsx(LT, {
                      action: n.visible ? "Back" : "Select",
                      active: (x || n.visible) && !s,
                      className: Gme.hint
                    }), t ? (0, z.jsx)(W_, {
                      src: "Media/Glyphs/Warning.svg",
                      className: Gme.warningIcon
                    }) : (0, z.jsx)("img", {
                      src: r,
                      className: Gme.stationIcon
                    })]
                  })
                })
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/radio/radio-player-button/radio-player-button.tsx", {
      get RadioPlayerButton() {
        return Wme;
      },
      set RadioPlayerButton(e) {
        Wme = e;
      }
    });
    let zme = {
      "number-badge": "number-badge__VH",
      numberBadge: "number-badge__VH",
      animated: "animated_mNr",
      pulsate: "pulsate_TNZ",
      "map-tile-badge": "map-tile-badge_wN7",
      mapTileBadge: "map-tile-badge_wN7",
      "dev-point-badge": "dev-point-badge_B9x",
      devPointBadge: "dev-point-badge_B9x"
    };
    X.add("game-ui/game/components/toolbar/components/number-badge/number-badge.module.scss", {
      get classes() {
        return zme;
      },
      set classes(e) {
        Object.assign(zme, e);
      }
    });
    var $me = ({
      className: e,
      children: t
    }) => (0, z.jsx)("div", {
      className: Qu()(zme.numberBadge, e),
      children: t
    });
    var qme = ({
      value: e,
      className: t
    }) => {
      const n = sl(Kh);
      const s = sl(TN);
      const i = n || !Ur(s, Xp);
      0;
      const [a, o] = Y.useState(false);
      0;
      const r = Y.useRef(null);
      0;
      Y.useEffect(() => {
        if (null != r.current && (o(true), e > r.current)) {
          r.current = e;
          const t = window.setTimeout(() => o(false), 100);
          return () => window.clearTimeout(t);
        }
        r.current = e;
      }, [e]);
      0;
      return z.jsx($me, {
        className: Qu()(!i && !a && zme.animated, t),
        children: _u(e)
      });
    };
    X.add("game-ui/game/components/toolbar/components/number-badge/number-badge.tsx", {
      get ButtonBadge() {
        return $me;
      },
      set ButtonBadge(e) {
        $me = e;
      },
      get AnimatedNumberBadge() {
        return qme;
      },
      set AnimatedNumberBadge(e) {
        qme = e;
      }
    });
    let Xme = {
      "right-menu": "right-menu_u58",
      rightMenu: "right-menu_u58",
      item: "item_sWO",
      "chirper-popup-anchor": "chirper-popup-anchor_p7b",
      chirperPopupAnchor: "chirper-popup-anchor_p7b",
      "chirper-popup": "chirper-popup_H95",
      chirperPopup: "chirper-popup_H95",
      lock: "lock_IUS lock_EMU",
      hint: "hint_Rv8"
    };
    X.add("game-ui/game/components/right-menu/right-menu.module.scss", {
      get classes() {
        return Xme;
      },
      set classes(e) {
        Object.assign(Xme, e);
      }
    });
    let Zme = {
      base: "base_GQv",
      enter: "enter_ZkJ",
      "exit-active": "exit-active__eD",
      exitActive: "exit-active__eD",
      "enter-active": "enter-active_x_X",
      enterActive: "enter-active_x_X",
      exit: "exit_B1r"
    };
    X.add("game-ui/game/components/right-menu/right-menu-notifications.module.scss", {
      get classes() {
        return Zme;
      },
      set classes(e) {
        Object.assign(Zme, e);
      }
    });
    const ehe = {
      direction: "left",
      alignment: "center"
    };
    var the = FT({
      chirper: "Media/Game/Icons/Chirper.svg",
      notifications: "Media/Game/Icons/Notifications.svg",
      lifepath: "Media/Game/Icons/Lifepath.svg",
      journal: "Media/Game/Icons/Journal.svg"
    });
    var nhe = ({
      className: e
    }) => {
      const t = sl(yse).length;
      const n = S5(Pv.Notifications);
      const s = S5(Pv.Chirper);
      const i = S5(Pv.Journal);
      const a = S5(Pv.LifePath);
      const o = S5(Pv.CinematicCamera);
      const r = sl(Bj);
      const l = KC("Chirper");
      const c = KC("Followed Citizens");
      const u = KC("Event Journal");
      const d = sl(ON);
      const m = sl(RN);
      const h = sl(kl);
      const g = sl(Sv);
      const p = sl(Mv);
      const f = h && !p && !s.visible && !i.visible && !a.visible && !o.visible && !r && g === Iv.main;
      0;
      const x = Y.useCallback(() => {
        if (i.visible) {
          wj();
        } else {
          Nj();
        }
        i.toggle();
      }, [i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Xme.rightMenu, e),
        children: [z.jsx(YZ, {
          name: "GameBottomRight"
        }), z.jsx(py, {
          in: t > 0 || n.visible,
          children: z.jsx(dh, {
            styles: Zme,
            children: z.jsx(she, {
              src: the.notifications,
              selected: n.visible,
              onSelect: n.toggle,
              shortcut: "Notification Panel",
              ...ehe,
              title: z.jsx(Pc.Main.TOOLTIP_TITLE_NOTIFICATIONS, {}),
              description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_NOTIFICATIONS, {}),
              children: t > 0 && (0, z.jsx)($me, {
                children: (0, z.jsx)(Gc, {
                  value: t,
                  unit: Oc.Integer
                })
              })
            })
          })
        }), z.jsxs("div", {
          className: Qu()(Xme.item, Xme.chirperPopupAnchor),
          children: [z.jsx(vme, {
            disabled: !f,
            className: Xme.chirperPopup,
            onClick: s.toggle
          }), z.jsx(aT, {
            uiTag: dT.value?.chirperPanelButton,
            children: z.jsx(she, {
              src: the.chirper,
              selected: s.visible,
              locked: l.locked,
              selectSound: op.chirper,
              onSelect: s.toggle,
              shortcut: "Chirper Panel",
              ...ehe,
              title: z.jsx(Pc.Main.TOOLTIP_TITLE_CHIRPER, {}),
              description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_CHIRPER, {}),
              requirements: l.requirements,
              direction: "left",
              alignment: "start"
            })
          })]
        }), z.jsx(aT, {
          uiTag: dT.value?.lifePathPanelButton,
          children: z.jsx(she, {
            src: the.lifepath,
            selected: a.visible,
            locked: c.locked,
            onSelect: a.toggle,
            shortcut: "Lifepath Panel",
            ...ehe,
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_FOLLOWED_CITIZENS, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_FOLLOWED_CITIZENS, {}),
            requirements: c.requirements,
            direction: "left",
            alignment: "start"
          })
        }), z.jsx(aT, {
          uiTag: dT.value?.eventJournalPanelButton,
          children: z.jsx(she, {
            src: the.journal,
            selected: i.visible,
            locked: u.locked,
            onSelect: x,
            shortcut: "Event Journal Panel",
            ...ehe,
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_EVENT_JOURNAL, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_EVENT_JOURNAL, {}),
            requirements: u.requirements,
            direction: "left",
            alignment: "start"
          })
        }), (d || m) && (0, z.jsx)(Wme, {
          className: Xme.item
        })]
      });
    };
    const she = Y.forwardRef(function ({
      src: e,
      selected: t,
      locked: n,
      selectSound: s,
      shortcut: i,
      children: a,
      className: o,
      onSelect: r,
      ...l
    }, c) {
      const u = km();
      const d = sl(Ul);
      0;
      const [m, h] = Y.useState(false);
      0;
      const [g, p] = Y.useState(false);
      ol(Nm, e => u && p(!!e.find(e => "Back" === e.name)));
      const f = m && !n && !t;
      const x = t && !g;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Q3, {
        ...l,
        locked: n,
        shortcut: z.jsx(AT, {
          action: i,
          active: d && !t,
          shortName: Cp.FallbackToControl
        }),
        children: z.jsxs("div", {
          ref: c,
          className: Qu()(Xme.item, o),
          children: [z.jsx(LT, {
            action: f ? "Select" : x ? "Back" : undefined,
            className: Xme.hint
          }), z.jsx(Lh, {
            onFocusChange: h,
            children: z.jsxs($_, {
              disableHint: true,
              src: e,
              selected: t,
              disabled: n,
              selectSound: s,
              theme: _me,
              className: _me.toggleStates,
              onSelect: r,
              focusKey: u ? Ig : undefined,
              shortcut: i,
              children: [a, n && (0, z.jsx)(kX, {
                className: Xme.lock
              })]
            })
          })]
        })
      });
    });
    X.add("game-ui/game/components/right-menu/right-menu.tsx", {
      get images() {
        return the;
      },
      set images(e) {
        the = e;
      },
      get RightMenu() {
        return nhe;
      },
      set RightMenu(e) {
        nhe = e;
      }
    });
    let ihe = {
      "city-name-field": "city-name-field_XDy field_eKJ selectable_otQ",
      cityNameField: "city-name-field_XDy field_eKJ selectable_otQ",
      container: "container_MC3",
      input: "input_JJ_ content_syM",
      label: "label_mWz content_syM"
    };
    X.add("game-ui/game/components/toolbar/bottom/city-name-field/city-name-field.module.scss", {
      get classes() {
        return ihe;
      },
      set classes(e) {
        Object.assign(ihe, e);
      }
    });
    var ohe = Y.memo(function ({
      name: e,
      onChange: t,
      onBlur: n
    }) {
      0;
      const [s, i] = Y.useState(false);
      0;
      const [a, o] = Y.useState(false);
      0;
      const r = Y.useCallback(() => i(true), []);
      0;
      const l = Y.useCallback(() => {
        n();
        i(false);
      }, [n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(zq, {
        disabled: s,
        title: z.jsx(Pc.Main.TOOLTIP_TITLE_CITY_NAME, {}),
        description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_CITY_NAME, {}),
        children: z.jsxs(Ep, {
          className: ihe.cityNameField,
          onFocusChange: o,
          children: [z.jsx(LT, {
            action: s ? "Back" : "Select",
            active: a,
            className: Zq.hint
          }), z.jsx(pW, {
            disableHint: true,
            value: e,
            vkTitle: z.jsx(Pc.VirtualKeyboard.TITLE, {
              hash: "CityName"
            }),
            theme: ihe,
            onChange: t,
            onFocus: r,
            onBlur: l
          })]
        })
      });
    }, (e, t) => e.name === t.name);
    const rhe = () => {
      const e = sl(EL);
      0;
      const [t, n] = Y.useState(e);
      0;
      Y.useEffect(() => {
        n(e);
      }, [e]);
      0;
      const s = Y.useCallback(e => {
        n(e.target.value);
      }, []);
      0;
      const i = Y.useCallback(() => {
        const s = t.trim();
        const i = s || e;
        jL(i);
        n(i);
      }, [e, t]);
      0;
      return z.jsx(ohe, {
        name: t,
        onBlur: i,
        onChange: s
      });
    };
    X.add("game-ui/game/components/toolbar/bottom/city-name-field/city-name-field.tsx", {
      get CityNameField() {
        return rhe;
      },
      set CityNameField(e) {
        rhe = e;
      }
    });
    let lhe = {
      content: "content_B0O",
      indicators: "indicators_ZC7",
      icon: "icon_Tkh",
      active: "active_nrD",
      trend: "trend_NRr",
      visible: "visible__qP",
      "dev-info": "dev-info_PVK",
      devInfo: "dev-info_PVK",
      factors: "factors_IuM"
    };
    X.add("game-ui/game/components/toolbar/bottom/happiness-field/happiness-field.module.scss", {
      get classes() {
        return lhe;
      },
      set classes(e) {
        Object.assign(lhe, e);
      }
    });
    const uhe = ["Media/Game/Icons/Depressed.svg", "Media/Game/Icons/Sad.svg", "Media/Game/Icons/Neutral.svg", "Media/Game/Icons/Content.svg", "Media/Game/Icons/Happy.svg"];
    const dhe = () => {
      const e = sl(WS);
      return e.length > 0 ? (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)(my, {}), (0, z.jsx)("div", {
          className: lhe.factors,
          children: e.map((e, t) => (0, z.jsx)(wy, {
            left: e.weight > 0 ? (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_POSITIVE, {
              hash: e.factor
            }) : (0, z.jsx)(Pc.Common.HAPPINESS_FACTOR_NEGATIVE, {
              hash: e.factor
            }),
            right: (0, z.jsx)("div", {
              className: zp(S3, e.weight),
              children: (0, z.jsx)(Gc, {
                value: e.weight,
                signed: true
              })
            })
          }, t))
        })]
      }) : null;
    };
    var mhe = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = sl(EA);
      const s = sl(KS);
      const i = function (e) {
        return e > 70 ? 4 : e > 55 ? 3 : e > 40 ? 2 : e > 25 ? 1 : 0;
      }(s);
      const a = function (e) {
        0;
        const [t, n] = Y.useState(0);
        0;
        const s = Y.useRef(e);
        0;
        const i = Y.useRef(e);
        0;
        const a = Y.useRef(null);
        0;
        const o = Y.useRef(null);
        0;
        const r = Y.useMemo(() => {
          const e = () => {
            n(0);
            o.current = null;
          };
          const t = () => {
            const r = i.current - s.current;
            if (Math.abs(r) > 0) {
              s.current = i.current;
              n(r);
              if (o.current) {
                window.clearTimeout(o.current);
              }
              o.current = window.setTimeout(e, 1e4);
              a.current = window.setTimeout(t, 15e3);
            } else {
              a.current = null;
            }
          };
          return t;
        }, []);
        0;
        Y.useEffect(() => {
          i.current = e;
          if (null == a.current) {
            r();
          }
        }, [r, e]);
        0;
        Y.useEffect(() => () => {
          if (null != a.current) {
            window.clearTimeout(a.current);
          }
          if (null != o.current) {
            window.clearTimeout(o.current);
          }
        }, []);
        return t;
      }(s);
      const o = Tv("Happiness");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(zq, {
        title: z.jsx(Pc.CityInfoPanel.TOOLTIP_HAPPINESS_TITLE, {}),
        description: z.jsx(Pc.CityInfoPanel.TOOLTIP_HAPPINESS_DESCRIPTION, {}),
        content: z.jsx(dhe, {}),
        children: z.jsx(Lh, {
          onFocusChange: t,
          children: z.jsxs(Xq, {
            contentClassName: lhe.content,
            onSelect: o,
            children: [z.jsx(LT, {
              action: "Select",
              active: e,
              className: Zq.hint
            }), z.jsx("img", {
              src: "Media/Game/Misc/HappinessMinus.svg",
              className: Qu()(lhe.trend, a < 0 && lhe.visible)
            }), z.jsx("div", {
              className: lhe.indicators,
              children: uhe.map((e, t) => (0, z.jsx)("img", {
                src: e,
                className: Qu()(lhe.icon, t === i && lhe.active)
              }, t))
            }), z.jsx("img", {
              src: "Media/Game/Misc/HappinessPlus.svg",
              className: Qu()(lhe.trend, a > 0 && lhe.visible)
            }), n && (0, z.jsx)("div", {
              className: lhe.devInfo,
              children: s
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/toolbar/bottom/happiness-field/happiness-field.tsx", {
      get HappinessField() {
        return mhe;
      },
      set HappinessField(e) {
        mhe = e;
      }
    });
    let phe = {
      content: "content_QTZ",
      icon: "icon_bCS",
      value: "value_ruP",
      negative: "negative_xQP",
      trend: "trend_IAr",
      "trend-icon": "trend-icon_AgE",
      trendIcon: "trend-icon_AgE",
      positive: "positive_PUr",
      unlimited: "unlimited_Dsm"
    };
    X.add("game-ui/game/components/toolbar/components/stat-field/stat-field.module.scss", {
      get classes() {
        return phe;
      },
      set classes(e) {
        Object.assign(phe, e);
      }
    });
    var xhe = ({
      icon: e,
      value: t,
      valueUnit: n,
      trend: s,
      trendIcon: i,
      unlimited: a = false,
      className: o,
      onSelect: r
    }) => a ? (0, z.jsx)(vhe, {
      icon: e,
      onSelect: r,
      className: o
    }) : (0, z.jsxs)(Xq, {
      contentClassName: phe.content,
      onSelect: r,
      className: Qu()(phe.statField, o),
      children: [(0, z.jsx)("img", {
        src: e,
        className: phe.icon
      }), a ? (0, z.jsx)("div", {
        className: phe.unlimited,
        children: "∞"
      }) : (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)("div", {
          className: Qu()(phe.value, t < 0 && phe.negative),
          children: (0, z.jsx)(Gc, {
            value: t,
            unit: n
          })
        }), i && "number" == typeof s && (0, z.jsx)("div", {
          className: phe.trend,
          children: (0, z.jsx)(W_, {
            src: i,
            className: Qu()(phe.trendIcon, zp(phe, s))
          })
        })]
      })]
    });
    var vhe = ({
      icon: e,
      className: t,
      onSelect: n
    }) => (0, z.jsxs)(Xq, {
      contentClassName: phe.content,
      onSelect: n,
      className: Qu()(phe.statField, t),
      children: [(0, z.jsx)("img", {
        src: e,
        className: phe.icon
      }), (0, z.jsx)("div", {
        className: phe.unlimited,
        children: "∞"
      })]
    });
    var _he = ({
      icon: e,
      value: t,
      valueUnit: n,
      trend: s,
      thresholdt: i,
      unlimited: a = false,
      className: o,
      onSelect: r
    }) => {
      0;
      const l = Y.useRef(null);
      const c = t.value;
      const u = s.value;
      0;
      const d = Y.useCallback(() => {
        const e = i.value;
        const n = Math.abs(t.value);
        const a = Math.abs(s.value);
        return 0 === a ? undefined : a <= n * e.x ? `Media/Glyphs/${s.value < 0 ? "TrendDown" : "TrendUp"}.svg` : a <= n * e.y ? `Media/Glyphs/${s.value < 0 ? "TrendDownMedium" : "TrendUpMedium"}.svg` : `Media/Glyphs/${s.value < 0 ? "TrendDownHigh" : "TrendUpHigh"}.svg`;
      }, [i, s, t]);
      0;
      const m = Y.useRef();
      0;
      const [h, g] = Y.useState(() => (0, z.jsx)("div", {
        className: phe.trendIcon
      }));
      const p = ac();
      ol(t, e => {
        if (l.current) {
          l.current.innerHTML = iu(p, e, n);
          l.current.classList[e >= 0 ? "remove" : "add"](phe.negative);
        }
      });
      ol(s, e => {
        const t = d();
        if (m.current !== t) {
          m.current = t;
          g(t ? (0, z.jsx)(W_, {
            src: t,
            className: Qu()(phe.trendIcon, zp(phe, e))
          }) : (0, z.jsx)("div", {
            className: phe.trendIcon
          }));
        }
      });
      return a ? (0, z.jsx)(vhe, {
        icon: e,
        onSelect: r,
        className: o
      }) : (0, z.jsxs)(Xq, {
        contentClassName: phe.content,
        onSelect: r,
        className: Qu()(phe.statField, o),
        children: [(0, z.jsx)("img", {
          src: e,
          className: phe.icon
        }), a ? (0, z.jsx)("div", {
          className: phe.unlimited,
          children: "∞"
        }) : (0, z.jsxs)(z.Fragment, {
          children: [(0, z.jsx)("div", {
            className: Qu()(phe.value, c < 0 && phe.negative),
            ref: l,
            children: (0, z.jsx)(Gc, {
              value: c,
              unit: n
            })
          }), h && "number" == typeof u && (0, z.jsx)("div", {
            className: phe.trend,
            children: h
          })]
        })]
      });
    };
    X.add("game-ui/game/components/toolbar/components/stat-field/stat-field.tsx", {
      get StatField() {
        return xhe;
      },
      set StatField(e) {
        xhe = e;
      },
      get UnlimitedStatField() {
        return vhe;
      },
      set UnlimitedStatField(e) {
        vhe = e;
      },
      get StatFieldTrend() {
        return _he;
      },
      set StatFieldTrend(e) {
        _he = e;
      }
    });
    let bhe = {
      trend: "trend_K7y",
      positive: "positive_n5t",
      negative: "negative_Moc",
      container: "container_DC2"
    };
    X.add("game-ui/game/components/toolbar/bottom/money-field/money-field.module.scss", {
      get classes() {
        return bhe;
      },
      set classes(e) {
        Object.assign(bhe, e);
      }
    });
    var Ehe = () => {
      0;
      const e = Y.useRef(null);
      const t = ac();
      const n = al(TL);
      0;
      const [s, i] = Y.useState(() => zp(bhe, n.current));
      ol(TL, s => {
        if (e.current) {
          e.current.innerHTML = iu(t, s, Oc.MoneyPerHour, true);
          i(zp(bhe, n.current));
        }
      });
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: bhe.trend,
        children: [z.jsx(Pc.Toolbar.CURRENT_TREND, {}), z.jsx("div", {
          className: s,
          ref: e,
          children: z.jsx(Gc, {
            value: n.current,
            unit: Oc.MoneyPerHour,
            signed: true
          })
        })]
      });
    };
    const Ihe = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = sl(IL);
      const s = WC("City Budget");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: bhe.container,
        children: [z.jsx(zq, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_MONEY, {}),
          description: n ? (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_UNLIMITED_MONEY, {}) : (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_MONEY, {}),
          content: z.jsx(Ehe, {}),
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsx(_he, {
              icon: "Media/Game/Icons/Money.svg",
              value: bL,
              unlimited: n,
              valueUnit: Oc.Integer,
              trend: TL,
              thresholdt: SL,
              onSelect: s ? undefined : yhe,
              className: bhe.moneyField
            })
          })
        }), z.jsx(LT, {
          action: "Select",
          active: !s && e,
          className: Zq.hint
        })]
      });
    };
    function yhe() {
      kv(Pv.Economy);
    }
    X.add("game-ui/game/components/toolbar/bottom/money-field/money-field.tsx", {
      get MoneyField() {
        return Ihe;
      },
      set MoneyField(e) {
        Ihe = e;
      }
    });
    let She = {
      trend: "trend_IdP",
      positive: "positive_yei",
      negative: "negative_LzO",
      container: "container_Kmm"
    };
    X.add("game-ui/game/components/toolbar/bottom/population-field/population-field.module.scss", {
      get classes() {
        return She;
      },
      set classes(e) {
        Object.assign(She, e);
      }
    });
    var Che = () => {
      0;
      const e = Y.useRef(null);
      const t = ac();
      0;
      const [n] = Y.useState(() => _L.value);
      ol(_L, n => {
        if (e.current) {
          e.current.innerHTML = iu(t, n, Oc.IntegerPerHour, true);
          e.current.className = zp(She, n) ?? "";
        }
      });
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: She.trend,
        children: [z.jsx(Pc.Toolbar.CURRENT_TREND, {}), z.jsx("div", {
          className: zp(She, n),
          ref: e,
          children: z.jsx(Gc, {
            value: n,
            unit: Oc.IntegerPerHour,
            signed: true
          })
        })]
      });
    };
    const Nhe = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = Tv("Population");
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Tp, {
        onFocusChange: t,
        className: She.container,
        children: [z.jsx(zq, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_POPULATION, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_POPULATION, {}),
          content: z.jsx(Che, {}),
          children: z.jsx(_he, {
            icon: "Media/Game/Icons/Citizen.svg",
            value: vL,
            valueUnit: Oc.Integer,
            trend: _L,
            thresholdt: yL,
            onSelect: n,
            className: She.populationField
          })
        }), z.jsx(LT, {
          action: "Select",
          active: undefined !== n && e,
          className: Zq.hint
        })]
      });
    };
    X.add("game-ui/game/components/toolbar/bottom/population-field/population-field.tsx", {
      get PopulationField() {
        return Nhe;
      },
      set PopulationField(e) {
        Nhe = e;
      }
    });
    let whe = {
      width: "116px",
      height: "36px",
      shadowHeight: "1.5px",
      rangeFill: "rgba(255, 255, 255, 0.08)",
      shadowFill: "rgba(0, 0, 0, 0.2)",
      image: "image_E3g"
    };
    X.add("game-ui/game/components/toolbar/top/city-info-field/demand-bars.module.scss", {
      get classes() {
        return whe;
      },
      set classes(e) {
        Object.assign(whe, e);
      }
    });
    0;
    var Phe = Y.memo(function ({
      items: e,
      className: t
    }) {
      const n = Gm(whe.width);
      const s = Gm(whe.height);
      const i = s / Math.max(1, e.length);
      const a = i / 2;
      const o = Gm(whe.shadowHeight);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(fd, {
        children: z.jsx("div", {
          className: Qu()(whe.demandBars, t),
          children: z.jsxs("svg", {
            viewBox: `0 0 ${n} ${s}`,
            className: whe.image,
            children: [z.jsxs("linearGradient", {
              id: "shadow",
              gradientUnits: "objectBoundingBox",
              x1: 0,
              x2: 0,
              y1: 1,
              y2: 0,
              children: [z.jsx("stop", {
                offset: "0",
                stopColor: whe.shadowFill
              }), z.jsx("stop", {
                offset: o / i,
                stopColor: whe.shadowFill
              }), z.jsx("stop", {
                offset: o / i,
                stopColor: "rgba(0, 0, 0, 0)"
              }), z.jsx("stop", {
                offset: "1",
                stopColor: "rgba(0, 0, 0, 0)"
              })]
            }), e.map((e, t) => (0, z.jsxs)(Y.Fragment, {
              children: [(0, z.jsx)("clipPath", {
                id: e.key,
                children: (0, z.jsx)("rect", {
                  x: "0",
                  y: t * i,
                  width: n,
                  height: i,
                  rx: a,
                  ry: a
                })
              }), (0, z.jsx)("rect", {
                x: "0",
                y: t * i,
                width: n,
                height: i,
                rx: a,
                ry: a,
                fill: whe.rangeFill
              }), (0, z.jsx)("rect", {
                id: `${e.key}-bar`,
                x: 0,
                y: t * i,
                width: 100 * wd(e.value, 0, 1) + "%",
                height: i,
                rx: a,
                ry: a,
                clipPath: `url(#${e.key})`,
                fill: e.color
              }), (0, z.jsx)("rect", {
                x: "0",
                y: t * i,
                width: n,
                height: i,
                rx: a,
                ry: a,
                fill: "url(#shadow)"
              })]
            }, e.key))]
          })
        })
      });
    });
    X.add("game-ui/game/components/toolbar/top/city-info-field/demand-bars.tsx", {
      get DemandBars() {
        return Phe;
      },
      set DemandBars(e) {
        Phe = e;
      }
    });
    let Lhe = {
      button: "button_s2g button_ECf item_It6 item-mouse-states_Fmi item-selected_tAM item-focused_FuT",
      "no-border": "no-border_Kqc",
      noBorder: "no-border_Kqc",
      "toggle-states": "toggle-states_X82 toggle-states_DTm",
      toggleStates: "toggle-states_X82 toggle-states_DTm",
      icon: "icon_KJZ icon_soN icon_Iwk"
    };
    X.add("game-ui/game/components/toolbar/components/feature-button/toolbar-feature-button.module.scss", {
      get classes() {
        return Lhe;
      },
      set classes(e) {
        Object.assign(Lhe, e);
      }
    });
    let Mhe = {
      "city-info-field": "city-info-field_kp7",
      cityInfoField: "city-info-field_kp7",
      field: "field_OvX",
      "unlocking-tooltip": "unlocking-tooltip_WHX",
      unlockingTooltip: "unlocking-tooltip_WHX",
      toggle: "toggle_kzL",
      "small-lock": "small-lock_k2N",
      smallLock: "small-lock_k2N",
      lock: "lock_D8i lock_EMU",
      legend: "legend_wn_",
      hint: "hint_n9h"
    };
    X.add("game-ui/game/components/toolbar/top/city-info-field/city-info-field.module.scss", {
      get classes() {
        return Mhe;
      },
      set classes(e) {
        Object.assign(Mhe, e);
      }
    });
    var khe = FT({
      City: "Media/Game/Icons/City.svg"
    });
    var Dhe = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = S5(Pv.CityInfo);
      const s = KC("City Info Panel");
      const i = WC("Residential Medium");
      const a = WC("Residential High");
      const o = WC("ZonesOffice");
      const r = km();
      const l = sl(Ul);
      const c = e && !s.locked && !n.visible;
      const u = n.visible;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Mhe.cityInfoField,
        children: [z.jsx(aT, {
          uiTag: dT.value?.cityInfoPanelButton,
          children: z.jsx(Q3, {
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_CITY_INFO, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_CITY_INFO, {}),
            shortcut: z.jsx(AT, {
              action: "City Information Panel",
              active: l
            }),
            locked: s.locked,
            requirements: s.requirements,
            content: r && (0, z.jsx)(Yq, {
              title: (0, z.jsx)(Pc.Main.TOOLTIP_TITLE_DEMAND, {}),
              description: (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_DEMAND, {}),
              content: (0, z.jsxs)("div", {
                className: Mhe.legend,
                children: [(0, z.jsx)(Ghe, {
                  type: $7.ResidentialLow
                }), !i && (0, z.jsx)(Ghe, {
                  type: $7.ResidentialMedium
                }), !a && (0, z.jsx)(Ghe, {
                  type: $7.ResidentialHigh
                }), (0, z.jsx)(Ghe, {
                  type: $7.Commercial
                }), (0, z.jsx)(Ghe, {
                  type: $7.Industrial
                }), !o && (0, z.jsx)(Ghe, {
                  type: $7.Office
                })]
              })
            }),
            children: z.jsx(Lh, {
              onFocusChange: t,
              children: z.jsxs($_, {
                disableHint: true,
                src: khe.City,
                selected: n.visible,
                disabled: s.locked,
                theme: Lhe,
                focusKey: r ? Ig : undefined,
                className: Qu()(Mhe.toggle, Lhe.toggleStates),
                onSelect: n.toggle,
                shortcut: "City Information Panel",
                children: [z.jsx(LT, {
                  action: c ? "Select" : u ? "Back" : undefined,
                  className: Mhe.hint
                }), s.locked && (0, z.jsx)(kX, {
                  className: Mhe.lock
                })]
              })
            })
          })
        }), z.jsx(aT, {
          uiTag: dT.value?.toolbarDemand,
          children: z.jsx(zq, {
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_DEMAND, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_DEMAND, {}),
            content: z.jsxs("div", {
              className: Mhe.legend,
              children: [z.jsx(Ghe, {
                type: $7.ResidentialLow
              }), !i && (0, z.jsx)(Ghe, {
                type: $7.ResidentialMedium
              }), !a && (0, z.jsx)(Ghe, {
                type: $7.ResidentialHigh
              }), z.jsx(Ghe, {
                type: $7.Commercial
              }), z.jsx(Ghe, {
                type: $7.Industrial
              }), !o && (0, z.jsx)(Ghe, {
                type: $7.Office
              })]
            }),
            children: z.jsx(Bhe, {
              resMedLocked: i,
              resHighLocked: a,
              officeLocked: o
            })
          })
        })]
      });
    };
    const Fhe = parseInt(whe.width);
    const Uhe = (e, t) => {
      const n = document.querySelector(`#${e}-bar`);
      if (n) {
        n.style.width = `${Math.round(wd(t, 0, 1) * Fhe)}px`;
      }
    };
    const Bhe = ({
      resMedLocked: e,
      resHighLocked: t,
      officeLocked: n
    }) => {
      0;
      const s = Y.useCallback(e => Uhe("ResidentialLow", e), []);
      0;
      const i = Y.useCallback(e => Uhe("ResidentialMedium", e), []);
      0;
      const a = Y.useCallback(e => Uhe("ResidentialHigh", e), []);
      0;
      const o = Y.useCallback(e => Uhe("Commercial", e), []);
      0;
      const r = Y.useCallback(e => Uhe("Industrial", e), []);
      0;
      const l = Y.useCallback(e => Uhe("Office", e), []);
      const c = ol(LS, s);
      const u = ol(AS, i);
      const d = ol(MS, a);
      const m = ol(RS, o);
      const h = ol(kS, r);
      const g = ol(DS, l);
      0;
      const p = Y.useMemo(() => {
        const s = [];
        s.push({
          key: "ResidentialLow",
          color: q7[$7.ResidentialLow],
          value: c
        });
        if (!e) {
          s.push({
            key: "ResidentialMedium",
            color: q7[$7.ResidentialMedium],
            value: u
          });
        }
        if (!t) {
          s.push({
            key: "ResidentialHigh",
            color: q7[$7.ResidentialHigh],
            value: d
          });
        }
        s.push({
          key: "Commercial",
          color: q7[$7.Commercial],
          value: m
        });
        s.push({
          key: "Industrial",
          color: q7[$7.Industrial],
          value: h
        });
        if (!n) {
          s.push({
            key: "Office",
            color: q7[$7.Office],
            value: g
          });
        }
        return s;
      }, [n, t, e]);
      0;
      return z.jsx(Phe, {
        items: p,
        className: Mhe.field
      });
    };
    const Ghe = ({
      type: e
    }) => (0, z.jsx)(FR, {
      color: q7[e],
      label: (0, z.jsx)(Pc.CityInfoPanel.DEMAND_TITLE, {
        hash: $7[e]
      })
    });
    X.add("game-ui/game/components/toolbar/top/city-info-field/city-info-field.tsx", {
      get images() {
        return khe;
      },
      set images(e) {
        khe = e;
      },
      get CityInfoField() {
        return Dhe;
      },
      set CityInfoField(e) {
        Dhe = e;
      }
    });
    let Vhe = {
      "progression-message-feed": "progression-message-feed_P4X",
      progressionMessageFeed: "progression-message-feed_P4X",
      "item-transition": "item-transition_ugO",
      itemTransition: "item-transition_ugO",
      enter: "enter_nmi",
      "enter-active": "enter-active_bWQ",
      enterActive: "enter-active_bWQ",
      exit: "exit_mXQ",
      "exit-active": "exit-active_SEi",
      exitActive: "exit-active_SEi",
      item: "item_XMq",
      amount: "amount_nbC",
      reason: "reason_tLs",
      space: "space_m_Q"
    };
    X.add("game-ui/game/components/toolbar/top/progression-field/progression-message-feed.module.scss", {
      get classes() {
        return Vhe;
      },
      set classes(e) {
        Object.assign(Vhe, e);
      }
    });
    var Khe = ({
      className: e
    }) => {
      0;
      const [t, n] = Y.useState([]);
      0;
      Y.useEffect(() => {
        const e = new zhe(n);
        return () => e.dispose();
      }, []);
      0;
      0;
      return z.jsx("div", {
        className: Qu()(Vhe.progressionMessageFeed, e),
        children: z.jsx(cd, {
          children: t.map(e => (0, z.jsx)(Whe, {
            data: e
          }, e.time))
        })
      });
    };
    const Whe = ({
      data: e
    }) => ((0, Y.useEffect)(() => rp(op.xpEvent), []), (0, z.jsx)(gy, {
      styles: Vhe,
      exitCollapseHeight: false,
      children: (0, z.jsxs)("div", {
        className: Vhe.itemTransition,
        children: [(0, z.jsxs)("div", {
          className: Vhe.item,
          children: [(0, z.jsx)("div", {
            className: Vhe.amount,
            children: (0, z.jsx)(Gc, {
              signed: true,
              value: e.message.amount,
              unit: Oc.XP
            })
          }), (0, z.jsx)("div", {
            className: Vhe.reason,
            children: (0, z.jsx)(Pc.Progression.XP_REASON, {
              hash: e.message.reason
            })
          })]
        }), (0, z.jsx)("div", {
          className: Vhe.space
        })]
      })
    }));
    class zhe {
      constructor(e) {
        this.listener = e;
        this.activeMessages = [];
        this.pendingMessages = [];
        this.updateTimeoutHandle = 0;
        this.subscription = vN.subscribe(this.handleMessageAdded.bind(this));
      }
      handleMessageAdded(e) {
        this.pendingMessages.unshift(e);
        window.clearTimeout(this.updateTimeoutHandle);
        this.update();
      }
      update() {
        const e = performance.now();
        let t = false;
        for (let n = this.activeMessages.length - 1; n >= 0; n--) {
          const s = this.activeMessages[n];
          if (s.time + 4e3 < e || s.time > e) {
            this.activeMessages.splice(n, 1);
            t = true;
          }
        }
        let n = this.activeMessages.reduce((e, t) => Math.max(e, t.time), 0);
        if (this.activeMessages.length < 4 && e - n > 500) {
          const s = this.pendingMessages.pop();
          if (null != s) {
            this.activeMessages.push({
              message: s,
              time: e
            });
            n = e;
            t = true;
          }
        }
        if (t) {
          this.listener([...this.activeMessages]);
        }
        let s = null;
        if (this.activeMessages.length > 0) {
          const t = this.activeMessages.reduce((e, t) => Math.min(e, t.time), e);
          s = Math.min(t + 4e3, s ?? Number.MAX_VALUE);
        }
        if (this.pendingMessages.length > 0) {
          s = Math.min(e + 500, s ?? Number.MAX_VALUE);
        }
        if (null != s) {
          window.setTimeout(this.update.bind(this), s - e);
        }
      }
      dispose() {
        window.clearTimeout(this.updateTimeoutHandle);
        this.subscription.dispose();
      }
    }
    X.add("game-ui/game/components/toolbar/top/progression-field/progression-message-feed.tsx", {
      get ProgressionMessageFeed() {
        return Khe;
      },
      set ProgressionMessageFeed(e) {
        Khe = e;
      }
    });
    let Yhe = {
      strokeWidth: "6",
      "progress-circle": "progress-circle_jvw progress-circle_OLN",
      progressCircle: "progress-circle_jvw progress-circle_OLN",
      progress: "progress_i1E progress_mlv",
      circle: "circle_Apc"
    };
    X.add("game-ui/game/components/toolbar/top/progression-field/progress-circle.module.scss", {
      get classes() {
        return Yhe;
      },
      set classes(e) {
        Object.assign(Yhe, e);
      }
    });
    let qhe = {
      "progression-field": "progression-field_Lho",
      progressionField: "progression-field_Lho",
      field: "field_p2F",
      "max-milestone-reached": "max-milestone-reached___5",
      maxMilestoneReached: "max-milestone-reached___5",
      toggle: "toggle_bAE",
      icon: "icon_Gzn",
      progress: "progress_NK4",
      feed: "feed_zoj",
      lock: "lock_YHO lock_EMU",
      milestone: "milestone_Eev",
      hint: "hint_PkL",
      "gamepad-tooltip-content": "gamepad-tooltip-content_aSN",
      gamepadTooltipContent: "gamepad-tooltip-content_aSN"
    };
    X.add("game-ui/game/components/toolbar/top/progression-field/progression-field.module.scss", {
      get classes() {
        return qhe;
      },
      set classes(e) {
        Object.assign(qhe, e);
      }
    });
    const Qhe = {
      tension: 150,
      friction: 20
    };
    const Zhe = () => {
      const e = sl(pN);
      const t = sl(fN);
      const n = sl(xN);
      const s = WY(Qhe, n);
      const i = Math.max(t - e, 0);
      const a = wd(s - e, 0, i);
      0;
      return z.jsx(BF, {
        progress: a,
        max: i,
        theme: Yhe,
        className: qhe.progress
      });
    };
    const Jhe = () => {
      const e = sl(pN);
      const t = sl(fN);
      const n = sl(xN);
      const s = WY(Qhe, n);
      const i = Math.max(t - e, 0);
      const a = wd(s - e, 0, i);
      0;
      return z.jsx(cu, {
        value: a,
        total: i,
        unit: Oc.XP
      });
    };
    var ege = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = S5(Pv.Progression);
      const s = KC("Progression Panel");
      const i = km();
      const a = sl(gN);
      const o = sl(_N);
      const r = sl(RC);
      const l = sl(Ul);
      const c = !o && !s.locked;
      const u = e && !s.locked && !n.visible;
      const d = n.visible;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: qhe.progressionField,
        children: [z.jsx(aT, {
          uiTag: dT.value?.progressionPanelButton,
          children: z.jsx(Q3, {
            title: z.jsx(Pc.Main.TOOLTIP_TITLE_PROGRESSION, {}),
            description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_PROGRESSION, {}),
            content: z.jsxs(z.Fragment, {
              children: [o ? undefined : (0, z.jsx)(z.Fragment, {
                children: (0, z.jsx)(Jhe, {})
              }), i && (0, z.jsx)(Yq, {
                className: qhe.gamepadTooltipContent,
                title: (0, z.jsx)(Pc.Main.TOOLTIP_TITLE_CURRENT_MILESTONE, {}),
                description: o ? (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_MAX_MILESTONE, {}) : (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_CURRENT_MILESTONE, {})
              })]
            }),
            shortcut: z.jsx(AT, {
              action: "Statistic Panel",
              active: l
            }),
            locked: s.locked,
            requirements: s.requirements,
            children: z.jsx(Lh, {
              onFocusChange: t,
              children: z.jsxs(L_, {
                disableHint: true,
                selected: n.visible,
                disabled: s.locked,
                focusKey: i ? Ig : undefined,
                className: Qu()(qhe.toggle, Lhe.toggleStates, c && Lhe.noBorder),
                theme: Lhe,
                onSelect: n.toggle,
                shortcut: "Progression Panel",
                children: [o ? (0, z.jsx)("img", {
                  src: "Media/Game/Icons/Trophy.svg",
                  className: Lhe.icon
                }) : (0, z.jsx)("div", {
                  className: qhe.milestone,
                  children: (0, z.jsx)(Gc, {
                    value: a
                  })
                }), c && (0, z.jsx)(Zhe, {}), r > 0 && (0, z.jsx)(qme, {
                  value: r,
                  className: zme.devPointBadge
                }), s.locked && (0, z.jsx)(kX, {
                  className: qhe.lock
                }), z.jsx(LT, {
                  action: u ? "Select" : d ? "Back" : undefined,
                  className: qhe.hint
                })]
              })
            })
          })
        }), z.jsx(zq, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_CURRENT_MILESTONE, {}),
          description: o ? (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_MAX_MILESTONE, {}) : (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_CURRENT_MILESTONE, {}),
          children: z.jsx("div", {
            className: Qu()(qhe.field, o && qhe.maxMilestoneReached),
            children: z.jsx(Pc.Progression.MILESTONE_NAME, {
              index: a
            })
          })
        }), !o && (0, z.jsx)(Khe, {
          className: qhe.feed
        })]
      });
    };
    X.add("game-ui/game/components/toolbar/top/progression-field/progression-field.tsx", {
      get ProgressionField() {
        return ege;
      },
      set ProgressionField(e) {
        ege = e;
      }
    });
    let tge = {
      lock: "lock_EMU",
      hint: "hint_Wu1",
      "hint-right": "hint-right_flW",
      hintRight: "hint-right_flW"
    };
    X.add("game-ui/game/components/toolbar/top/toggles.module.scss", {
      get classes() {
        return tge;
      },
      set classes(e) {
        Object.assign(tge, e);
      }
    });
    var sge = FT({
      Economy: "Media/Game/Icons/Economy.svg",
      TransportationOverview: "Media/Game/Icons/TransportationOverview.svg",
      CityStatistics: "Media/Game/Icons/CityStatistics.svg",
      MapTile: "Media/Game/Icons/MapTile.svg",
      PhotoMode: "Media/Game/Icons/PhotoMode.svg"
    });
    var ige = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = S5(Pv.Economy);
      const s = KC("City Budget");
      const i = km();
      0;
      const [a, o] = Y.useState(false);
      ol(Nm, e => i && o(!!e.find(e => "Close" === e.name)));
      const r = sl(Ul);
      const l = e && !s.locked && !n.visible;
      const c = n.visible && a;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.economyPanelButton,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_CITY_ECONOMY, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_CITY_ECONOMY, {}),
          shortcut: z.jsx(AT, {
            action: "Economy Panel",
            active: r,
            shortName: Cp.FallbackToControl
          }),
          locked: s.locked,
          requirements: s.requirements,
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsxs($_, {
              disableHint: true,
              src: sge.Economy,
              selected: n.visible,
              disabled: s.locked,
              selectSound: op.economy,
              theme: Lhe,
              className: Lhe.toggleStates,
              onSelect: n.toggle,
              focusKey: i ? Ig : undefined,
              shortcut: "Economy Panel",
              children: [z.jsx(LT, {
                action: l ? "Select" : c ? "Back" : undefined,
                className: tge.hint
              }), s.locked && (0, z.jsx)(kX, {
                className: tge.lock
              })]
            })
          })
        })
      });
    };
    var age = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = S5(Pv.TransportationOverview);
      const s = KC("Transportation Overview");
      const i = km();
      0;
      const [a, o] = Y.useState(false);
      ol(Nm, e => i && o(!!e.find(e => "Close" === e.name)));
      const r = sl(Ul);
      const l = e && !s.locked && !n.visible;
      const c = n.visible && a;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.transportationOverviewPanelButton,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_LINES_OVERVIEW, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_LINES_OVERVIEW, {}),
          shortcut: z.jsx(AT, {
            action: "Transportation Overview Panel",
            active: r,
            shortName: Cp.FallbackToControl
          }),
          locked: s.locked,
          requirements: s.requirements,
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsxs($_, {
              disableHint: true,
              src: sge.TransportationOverview,
              selected: n.visible,
              disabled: s.locked,
              theme: Lhe,
              className: Lhe.toggleStates,
              onSelect: n.toggle,
              focusKey: i ? Ig : undefined,
              shortcut: "Transportation Overview Panel",
              children: [z.jsx(LT, {
                action: l ? "Select" : c ? "Back" : undefined,
                className: tge.hint
              }), s.locked && (0, z.jsx)(kX, {
                className: tge.lock
              })]
            })
          })
        })
      });
    };
    var oge = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = S5(Pv.Statistics);
      const s = KC("City Statistics");
      const i = km();
      const a = sl(Ul);
      const o = e && !s.locked && !n.visible;
      const r = n.visible;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.statisticsPanelButton,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_CITY_STATISTICS, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_CITY_STATISTICS, {}),
          shortcut: z.jsx(AT, {
            action: "Statistic Panel",
            active: a,
            shortName: Cp.FallbackToControl
          }),
          locked: s.locked,
          requirements: s.requirements,
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsxs($_, {
              disableHint: true,
              src: sge.CityStatistics,
              selected: n.visible,
              disabled: s.locked,
              theme: Lhe,
              className: Lhe.toggleStates,
              onSelect: n.toggle,
              focusKey: i ? Ig : undefined,
              shortcut: "Statistic Panel",
              children: [z.jsx(LT, {
                action: o ? "Select" : r ? "Back" : undefined,
                className: tge.hint
              }), s.locked && (0, z.jsx)(kX, {
                className: tge.lock
              })]
            })
          })
        })
      });
    };
    var rge = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = sl(Gj);
      0;
      const s = Y.useRef(false);
      const i = !Ur(sl(rL), Xp);
      const a = sl(GO);
      const o = sl($j);
      const r = KC("Map Tiles");
      0;
      const l = Y.useCallback(() => Xj(!n), [n]);
      const c = km();
      const u = sl(Ul);
      0;
      Y.useEffect(() => {
        if (n && s.current && (i || a.id !== PP)) {
          Xj(false);
        }
        if (n && !s.current) {
          uP(PP);
          hL(Xp);
          s.current = true;
        }
        if (!n) {
          s.current = false;
        }
      }, [n, i, a.id]);
      const d = n ? "Back" : "Select";
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.mapTilePanelButton,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_MAP_TILES, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_MAP_TILES, {}),
          shortcut: z.jsx(AT, {
            action: "Map Tile Purchase Panel",
            active: u,
            shortName: Cp.FallbackToControl
          }),
          locked: r.locked,
          requirements: r.requirements,
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsxs($_, {
              disableHint: true,
              selectAction: d,
              src: sge.MapTile,
              selected: n,
              disabled: r.locked,
              focusKey: c ? Ig : undefined,
              theme: Lhe,
              className: Lhe.toggleStates,
              onSelect: l,
              shortcut: "Map Tile Purchase Panel",
              children: [z.jsx(LT, {
                action: d,
                active: (n || e) && !r.locked,
                className: Qu()(tge.hint, tge.hintRight)
              }), !r.locked && o > 0 && (0, z.jsx)(qme, {
                value: o,
                className: zme.mapTileBadge
              }), r.locked && (0, z.jsx)(kX, {
                className: tge.lock
              })]
            })
          })
        })
      });
    };
    var lge = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = S5(Pv.PhotoMode);
      const s = KC("Photo Mode");
      const i = km();
      const a = sl(Ul);
      const o = e && !s.locked && !n.visible;
      const r = n.visible;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.photoModePanelButton,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_PHOTO_MODE, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_PHOTO_MODE, {}),
          shortcut: z.jsx(AT, {
            action: "Photo Mode Panel",
            active: a,
            shortName: Cp.FallbackToControl
          }),
          locked: s.locked,
          requirements: s.requirements,
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsxs($_, {
              disableHint: true,
              src: sge.PhotoMode,
              selected: n.visible,
              disabled: s.locked,
              theme: Lhe,
              className: Lhe.toggleStates,
              onSelect: n.toggle,
              focusKey: i ? Ig : undefined,
              shortcut: "Photo Mode Panel",
              children: [z.jsx(LT, {
                action: o ? "Select" : r ? "Back" : undefined,
                className: tge.hint
              }), s.locked && (0, z.jsx)(kX, {
                className: tge.lock
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/toolbar/top/toggles.tsx", {
      get images() {
        return sge;
      },
      set images(e) {
        sge = e;
      },
      get EconomyPanelToggle() {
        return ige;
      },
      set EconomyPanelToggle(e) {
        ige = e;
      },
      get TransportationOverviewToggle() {
        return age;
      },
      set TransportationOverviewToggle(e) {
        age = e;
      },
      get CityStatisticsToggle() {
        return oge;
      },
      set CityStatisticsToggle(e) {
        oge = e;
      },
      get MapTilePurchaseToggle() {
        return rge;
      },
      set MapTilePurchaseToggle(e) {
        rge = e;
      },
      get PhotoModeToggle() {
        return lge;
      },
      set PhotoModeToggle(e) {
        lge = e;
      }
    });
    let cge = {
      "toolbar-button-strip": "toolbar-button-strip_CoK",
      toolbarButtonStrip: "toolbar-button-strip_CoK",
      group: "group_i85",
      button: "button_cBV",
      highlight: "highlight_XBc",
      lock: "lock_bNk",
      "item-inner": "item-inner_R9q",
      itemInner: "item-inner_R9q",
      hint: "hint_j1W"
    };
    X.add("game-ui/game/components/toolbar/top/toolbar-button-strip/toolbar-button-strip.module.scss", {
      get classes() {
        return cge;
      },
      set classes(e) {
        Object.assign(cge, e);
      }
    });
    var dge = ({
      focusKey: e,
      className: t
    }) => {
      const n = sl(ZP);
      const s = Math.min(n.length - 1, 1);
      0;
      const i = Y.useMemo(() => -1 !== s && n[s].children.length > 0 ? Dr(n[s].children[0].entity) : null, [n, s]);
      0;
      return z.jsx("div", {
        className: Qu()(cge.toolbarButtonStrip, t),
        children: n.map((t, n) => (0, z.jsx)(ep, {
          focusKey: n === s ? e : Ig,
          initialFocused: n === s ? i : undefined,
          direction: Mg.Horizontal,
          children: (0, z.jsx)("div", {
            className: cge.group,
            children: t.children.map(e => (0, z.jsx)(mge, {
              item: e
            }, Dr(e.entity)))
          })
        }, Dr(t.entity)))
      });
    };
    const mge = ({
      item: e
    }) => {
      0;
      const [t, n] = Y.useState(false);
      0;
      const s = Y.useCallback(() => {
        l(Ur(e.entity, lL.value) || Ur(e.entity, oL.value));
      }, [e]);
      const i = WC("IntroListCompleted");
      const a = ol(lL, s);
      const o = ol(oL, s);
      0;
      const [r, l] = Y.useState(() => Ur(e.entity, a) || Ur(e.entity, o));
      0;
      const c = Y.useCallback(() => {
        if (e.type === XP.menu) {
          hL(e.entity);
        } else {
          pL(e.entity);
          sg(e.uiTag, true);
        }
      }, [e.entity, e.type, e.uiTag]);
      const u = e.locked && (e.type === XP.asset || i);
      const d = ll(uT, e.entity);
      const m = sl(Ul);
      0;
      const [h, g] = Y.useState(false);
      ol(Nm, t => {
        g(!!t.find(n => "Close" === n.name || "Bulldoze Tool" === e.name && "Back" === n.name && !t.find(e => "Exit Underground Mode" === e.name)));
      });
      const p = t && !u && !r;
      const f = r && h;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: n,
        children: z.jsxs($_, {
          disableHint: true,
          focusKey: Dr(e.entity),
          src: e.icon,
          selected: r,
          disabled: u,
          selectSound: (r ? e.deselectSound : e.selectSound) ?? undefined,
          theme: S1,
          allowFocusableChildren: true,
          className: Qu()(cge.button, S1.toggleStates, e.locked && S1.locked),
          onSelect: r ? fL : c,
          shortcut: e.shortcut,
          children: [z.jsx(aT, {
            uiTag: e.uiTag,
            active: !(e.locked && e.type === XP.asset),
            children: z.jsx(Q3, {
              title: null != d ? (0, z.jsx)(Tc, {
                id: d.titleId
              }) : e.name,
              description: null != d ? (0, z.jsx)(Tc, {
                id: d.descriptionId
              }) : undefined,
              shortcut: z.jsx(AT, {
                action: e.shortcut,
                active: m,
                shortName: Cp.FallbackToControl
              }),
              locked: e.locked,
              requirements: e.requirements,
              children: z.jsx(Ep, {
                className: cge.itemInner
              })
            })
          }), e.highlight && (0, z.jsx)(OJ, {
            className: cge.highlight
          }), e.locked && (0, z.jsx)(kX, {
            className: cge.lock
          }), z.jsx(LT, {
            action: p ? "Select" : f ? "Back" : undefined,
            className: cge.hint
          })]
        })
      });
    };
    X.add("game-ui/game/components/toolbar/top/toolbar-button-strip/toolbar-button-strip.tsx", {
      get ToolbarButtonStrip() {
        return dge;
      },
      set ToolbarButtonStrip(e) {
        dge = e;
      }
    });
    let hge = {
      icon: "icon_rqi icon_KJZ icon_soN icon_Iwk",
      underground: "underground_heZ",
      lock: "lock_okm lock_EMU",
      hint: "hint_Y7P hint_Wu1"
    };
    X.add("game-ui/game/components/toolbar/top/undergound-mode-toggle/underground-mode-toggle.module.scss", {
      get classes() {
        return hge;
      },
      set classes(e) {
        Object.assign(hge, e);
      }
    });
    FT({
      underground: "Media/Game/Misc/Underground.svg",
      undergroundMask: "Media/Game/Misc/UndergroundToggleMask.svg"
    });
    var pge = () => {
      0;
      const [e, t] = Y.useState(false);
      const n = sl(JO);
      const s = sl(eP);
      0;
      const i = Y.useCallback(() => TP(!s), [s]);
      const a = KC("Underground Mode");
      const o = km();
      const r = sl(Ul);
      0;
      const [l, c] = Y.useState(false);
      ol(Nm, e => {
        c(!!e.find(e => "Close" === e.name));
      });
      ag(dT.value?.toolbarUnderground, s);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: dT.value?.toolbarUnderground,
        children: z.jsx(Q3, {
          title: z.jsx(Pc.Main.TOOLTIP_TITLE_UNDERGROUND, {}),
          description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_UNDERGROUND, {}),
          shortcut: z.jsx(AT, {
            action: "Change Elevation",
            active: !a.locked && n && r,
            shortName: Cp.FallbackToControl
          }),
          locked: a.locked,
          requirements: a.requirements,
          children: z.jsx(Lh, {
            onFocusChange: t,
            children: z.jsxs(L_, {
              disableHint: true,
              selected: s,
              disabled: a.locked || !n,
              selectSound: s ? op.increaseElevation : op.decreaseElevation,
              theme: Lhe,
              className: Lhe.toggleStates,
              focusKey: o ? Ig : undefined,
              onSelect: i,
              shortcut: s ? "Increase Elevation" : "Decrease Elevation",
              children: [z.jsx("div", {
                className: Qu()(hge.icon, s && hge.underground)
              }), a.locked && (0, z.jsx)(kX, {
                className: hge.lock
              }), z.jsx(LT, {
                action: "Select",
                active: e && !a.locked && !s,
                className: hge.hint
              }), z.jsx(LT, {
                action: "Back",
                active: s && !l,
                className: hge.hint
              })]
            })
          })
        })
      });
    };
    X.add("game-ui/game/components/toolbar/top/undergound-mode-toggle/underground-mode-toggle.tsx", {
      get UndergroundModeToggle() {
        return pge;
      },
      set UndergroundModeToggle(e) {
        pge = e;
      }
    });
    let fge = {
      toolbar: "toolbar_QYu",
      hidden: "hidden__OM",
      "only-status-visible": "only-status-visible_lx7",
      onlyStatusVisible: "only-status-visible_lx7",
      "social-menu-anchor": "social-menu-anchor_oJe",
      socialMenuAnchor: "social-menu-anchor_oJe",
      "social-menu": "social-menu_nHI",
      socialMenu: "social-menu_nHI",
      "left-side-menu": "left-side-menu_DLV",
      leftSideMenu: "left-side-menu_DLV",
      top: "top_ZSs",
      bottom: "bottom_vae",
      paused: "paused_ICO",
      container: "container_yy5",
      "top-inner": "top-inner_v2o container_yy5",
      topInner: "top-inner_v2o container_yy5",
      "bottom-inner": "bottom-inner_ZYV container_yy5",
      bottomInner: "bottom-inner_ZYV container_yy5",
      "extra-padding": "extra-padding_z3b",
      extraPadding: "extra-padding_z3b",
      spacer: "spacer_oEi",
      start: "start_hR7",
      end: "end_G0e",
      divider: "divider_GaZ",
      "large-divider": "large-divider_XGP",
      largeDivider: "large-divider_XGP",
      "extra-large-divider": "extra-large-divider_Bc3",
      extraLargeDivider: "extra-large-divider_Bc3",
      "bulldoze-bar": "bulldoze-bar_D37",
      bulldozeBar: "bulldoze-bar_D37",
      active: "active_hed"
    };
    X.add("game-ui/game/components/toolbar/toolbar.module.scss", {
      get classes() {
        return fge;
      },
      set classes(e) {
        Object.assign(fge, e);
      }
    });
    const vge = new Tg("toolbar_top");
    const _ge = new Tg("toolbar_bottom");
    const bge = new Tg("button_strip");
    0;
    const Tge = z.jsx("div", {
      className: fge.divider
    });
    0;
    const Ege = z.jsx("div", {
      className: fge.spacer
    });
    0;
    var Ige = Y.memo(function ({
      focusKey: e,
      className: t,
      hidden: n,
      onlyStatusVisible: s
    }) {
      0;
      const i = Y.useRef(null);
      sl(dT);
      const a = S5(Pv.PhotoMode);
      0;
      const o = Y.useCallback(() => i.current || vge, []);
      0;
      const r = Y.useCallback(e => {
        i.current = e;
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Ip, {
        children: z.jsx(ep, {
          focusKey: e,
          initialFocused: vge,
          direction: Mg.Vertical,
          onRefocus: o,
          onChange: r,
          children: z.jsxs("div", {
            className: Qu()(fge.toolbar, t, {
              [fge.hidden]: n || a.visible,
              [fge.onlyStatusVisible]: s
            }),
            children: [z.jsxs(bp, {
              disabled: s,
              children: [z.jsxs("div", {
                className: fge.socialMenuAnchor,
                children: [z.jsx(pme, {
                  className: fge.leftSideMenu
                }), z.jsx(nhe, {
                  className: fge.socialMenu
                })]
              }), z.jsx(yge, {}), z.jsx(Sge, {})]
            }), z.jsx(jge, {})]
          })
        })
      });
    });
    const yge = () => {
      const e = sl(GO).id === IP;
      rg(dT.value?.toolbarBulldozerBar, e);
      0;
      return z.jsx("div", {
        className: Qu()(fge.bulldozeBar, e && fge.active)
      });
    };
    const Sge = () => (0, z.jsx)(ep, {
      allowLooping: true,
      focusKey: vge,
      initialFocused: bge,
      direction: Mg.Horizontal,
      jumpSections: true,
      children: (0, z.jsx)("div", {
        className: fge.top,
        children: (0, z.jsxs)("div", {
          className: fge.topInner,
          children: [(0, z.jsxs)("div", {
            className: fge.start,
            children: [(0, z.jsxs)(ep, {
              children: [(0, z.jsx)(rge, {}), Tge]
            }), (0, z.jsxs)(ep, {
              children: [(0, z.jsx)(ege, {}), Tge, (0, z.jsx)(Dhe, {})]
            })]
          }), (0, z.jsx)(dge, {
            focusKey: bge
          }), (0, z.jsxs)("div", {
            className: fge.end,
            children: [(0, z.jsxs)(ep, {
              children: [Ege, (0, z.jsx)(ige, {}), Tge, (0, z.jsx)(age, {}), Tge, (0, z.jsx)(oge, {}), Tge, (0, z.jsx)(pge, {})]
            }), Ege, (0, z.jsx)(lge, {})]
          })]
        })
      })
    });
    const jge = () => {
      const e = sl(NO);
      const t = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        className: Qu()(fge.bottom, e && fge.paused),
        children: z.jsx("div", {
          className: Qu()(fge.bottomInner, t && fge.extraPadding),
          children: z.jsxs(ep, {
            allowLooping: true,
            direction: Mg.Horizontal,
            focusKey: _ge,
            children: [z.jsx(sX, {}), z.jsx(K0, {}), z.jsx(rhe, {}), z.jsx(Nhe, {}), z.jsx(Ihe, {}), z.jsx(mhe, {})]
          })
        })
      });
    };
    X.add("game-ui/game/components/toolbar/toolbar.tsx", {
      get Toolbar() {
        return Ige;
      },
      set Toolbar(e) {
        Ige = e;
      }
    });
    var Cge = ({
      children: e
    }) => {
      const t = sl(Kh);
      const n = sl(Wh);
      const s = sl(kh);
      const i = $b();
      const a = sl(Dh);
      0;
      Y.useEffect(() => {
        if (null !== n) {
          Vh(false);
        }
      }, [n]);
      0;
      const o = Y.useMemo(() => {
        const e = null != s && null != a && null === t;
        const o = null != s && null == n;
        const r = null != t && null != n && Hb(t, n);
        const l = null != t && null != n && Kb(t, n);
        const c = null != t && (t.completed || t.advisorActivation || !t.mandatory);
        let u = false;
        if (t && n) {
          const e = t.phases.findIndex(e => Ur(e.entity, n.entity));
          const [s, i] = Yb(t, e);
          u = s === i - 1;
        }
        return {
          "Continue Tutorial": r && !u ? Zh : null,
          "Finish Tutorial": r && u ? Zh : null,
          "Previous Tutorial Phase": l ? zb : null,
          "Focus Tutorial List": o ? Qh : null,
          "Start Next Tutorial": e ? function () {
            fL();
            Xh(a, Xp, false);
          } : null,
          Advisor: i ? mg : null,
          "Close Tutorial": c ? Jh : null
        };
      }, [t, s, n, i, a]);
      0;
      return z.jsx(Lg, {
        actions: o,
        children: e
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-action-consumer.tsx", {
      get TutorialActionConsumer() {
        return Cge;
      },
      set TutorialActionConsumer(e) {
        Cge = e;
      }
    });
    var Nge = ({
      onTutorialActionNeeded: e,
      onSetControlledFocusKey: t
    }) => {
      const n = sl(Rh);
      const s = sl(Kh);
      const i = sl(zh) && null === s;
      const a = sl(Yh);
      const o = sl(dg);
      const r = sl(Gh);
      const l = sl(Mh);
      const c = r && l;
      0;
      Y.useEffect(() => Qh(c), [c]);
      0;
      Y.useEffect(() => {
        if (n) {
          t(Dge.tutorialIntro);
        } else if (i) {
          t(Dge.tutorialListIntro);
        } else if (a) {
          t(Dge.tutorialListOutro);
        } else if (c) {
          t(Dge.tutorialList);
        } else {
          t();
        }
      }, [t, n, c, i, a]);
      0;
      return z.jsx(Cpe, {
        tutorialIntroVisible: n,
        tutorialListIntroVisible: i,
        tutorialListOutroVisible: a,
        localization: Pc.Tutorials,
        advisorPanelVisible: o,
        onCompleteListIntro: tg,
        onTutorialActionNeeded: e,
        onSetControlledFocusKey: t
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-wrapper.tsx", {
      get TutorialWrapper() {
        return Nge;
      },
      set TutorialWrapper(e) {
        Nge = e;
      }
    });
    let wge = {
      enter: "enter_iKV enter_kO6",
      "enter-active": "enter-active_qll enter-active_lrI",
      enterActive: "enter-active_qll enter-active_lrI",
      exit: "exit_pg6 exit_Von",
      "exit-active": "exit-active_feg exit-active_jtN",
      exitActive: "exit-active_feg exit-active_jtN"
    };
    X.add("game-ui/game/transitions/asset-detail-panel.module.scss", {
      get classes() {
        return wge;
      },
      set classes(e) {
        Object.assign(wge, e);
      }
    });
    let Pge = {
      rowCount: "2",
      columnCount: "10",
      "upgrades-grid": "upgrades-grid_RYy",
      upgradesGrid: "upgrades-grid_RYy",
      content: "content_TtB",
      row: "row_KSZ",
      item: "item_jVa item-hover_WK8 item-active_Spn",
      thumbnail: "thumbnail_aLl",
      "not-enough-money": "not-enough-money_YuH",
      notEnoughMoney: "not-enough-money_YuH",
      highlight: "highlight_hy5",
      lock: "lock_W9x",
      dlc: "dlc_LZ3",
      theme: "theme_YuE",
      "already-built": "already-built_J1f",
      alreadyBuilt: "already-built_J1f",
      "not-enough-money-badge": "not-enough-money-badge_pBb",
      notEnoughMoneyBadge: "not-enough-money-badge_pBb",
      "page-indicators": "page-indicators_Oap",
      pageIndicators: "page-indicators_Oap",
      "page-indicator": "page-indicator_y1n",
      pageIndicator: "page-indicator_y1n"
    };
    X.add("game-ui/game/components/upgrades-menu/upgrade-grid/upgrade-grid.module.scss", {
      get classes() {
        return Pge;
      },
      set classes(e) {
        Object.assign(Pge, e);
      }
    });
    var Age = ({
      className: e,
      upgrades: t,
      selectedUpgrade: n,
      onSelectUpgrade: s
    }) => {
      const i = xp(s);
      const a = Math.ceil(t.length / 9);
      const o = e7(t, 9, n);
      const r = K9(t, 9, o);
      ag(dT.value?.upgradeGrid);
      0;
      const l = Y.useMemo(() => (0, z.jsxs)(z.Fragment, {
        children: [(0, z.jsx)("div", {
          className: Pge.content,
          children: (0, z.jsx)(Xg, {
            allowFocusExit: false,
            focused: Dr(n),
            onChange: i,
            children: (0, z.jsx)("div", {
              className: Pge.row,
              children: r.map(e => (0, z.jsx)(Mge, {
                upgrade: e,
                selected: Ur(e.entity, n),
                onSelect: s
              }, Dr(e.entity)))
            })
          })
        }), (0, z.jsx)("div", {
          className: Pge.pageIndicators,
          children: a > 1 && [...Array(a).keys()].map(e => (0, z.jsx)("div", {
            onClick: () => s(t[9 * e].entity),
            className: Qu()(Pge.pageIndicator, e === o && "selected")
          }, e))
        })]
      }), [i, s, a, r, o, n, t]);
      0;
      return z.jsx("div", {
        className: Qu()(Pge.upgradesGrid, e),
        children: Lp(l)
      });
    };
    const Mge = ({
      upgrade: e,
      selected: t,
      onSelect: n
    }) => {
      0;
      const [s, i] = Y.useState(false);
      0;
      const a = Y.useContext(u9);
      const o = sl(bL);
      0;
      const r = Y.useCallback(() => n(e.entity), [e.entity, n]);
      0;
      const l = Y.useCallback(() => a && a.showDetails(e.entity), [e.entity, a]);
      0;
      const c = Y.useCallback(() => a && a.hideDetails(e.entity), [e.entity, a]);
      const u = e.locked || e.uniquePlaced;
      const d = W9(e);
      const m = !u && d > 0 && o < d;
      const h = km() && s;
      0;
      Y.useEffect(() => {
        if (null != a) {
          if (h) {
            a.showDetails(e.entity);
          } else {
            a.hideDetails(e.entity);
          }
        }
      }, [e.entity, a, h]);
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        onFocusChange: i,
        children: z.jsx(bg, {
          tooltip: !a && (0, z.jsx)(Pc.Assets.NAME, {
            hash: e.name
          }),
          children: z.jsxs(L_, {
            disableHint: true,
            focusKey: Dr(e.entity),
            selected: t,
            className: Qu()(Pge.item, m && Pge.notEnoughMoney),
            onClick: r,
            disabled: e.locked || e.uniquePlaced,
            onMouseOver: l,
            onMouseLeave: c,
            children: [z.jsx("img", {
              src: e.icon,
              onError: V_,
              className: Pge.thumbnail
            }), e.uniquePlaced && (0, z.jsx)("img", {
              src: "Media/Game/Icons/AlreadyBuilt.svg",
              className: Pge.alreadyBuilt
            }), m && (0, z.jsx)("img", {
              src: "Media/Game/Icons/NoMoney.svg",
              className: Pge.notEnoughMoneyBadge
            }), e.highlight && (0, z.jsx)(OJ, {
              className: Pge.highlight
            }), e.locked && (0, z.jsx)(kX, {
              className: Pge.lock
            }), e.dlc && (0, z.jsx)($9, {
              icon: e.dlc,
              className: Pge.dlc
            }), e.theme && (0, z.jsx)($9, {
              icon: e.theme,
              className: Pge.theme
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/upgrades-menu/upgrade-grid/upgrade-grid.tsx", {
      get UpgradeGrid() {
        return Age;
      },
      set UpgradeGrid(e) {
        Age = e;
      }
    });
    let Rge = {
      "asset-panel": "asset-panel_BKG",
      assetPanel: "asset-panel_BKG",
      "gamepad-active": "gamepad-active_dUD",
      gamepadActive: "gamepad-active_dUD",
      "detail-container": "detail-container_J4D",
      detailContainer: "detail-container_J4D",
      "detail-panel": "detail-panel_qkF",
      detailPanel: "detail-panel_qkF",
      "title-bar": "title-bar_L4S title-bar_I7O child-opacity-transition_nkS",
      titleBar: "title-bar_L4S title-bar_I7O child-opacity-transition_nkS",
      title: "title_vx4 title_qub",
      hints: "hints_IMR",
      back: "back_UcS",
      hint: "hint_WuS"
    };
    X.add("game-ui/game/components/upgrades-menu/upgrades-menu.module.scss", {
      get classes() {
        return Rge;
      },
      set classes(e) {
        Object.assign(Rge, e);
      }
    });
    var Dge;
    var Fge = ({
      focusKey: e,
      showOpenHint: t,
      showBackHint: n,
      className: s
    }) => {
      up(lp);
      const i = km();
      const a = sl(xw);
      0;
      const o = Y.useRef(a);
      const r = sl($L);
      const l = ll(zL, a);
      0;
      const c = Y.useCallback(e => {
        XL(a, e);
      }, [a]);
      0;
      Y.useEffect(() => {
        if (a !== o.current) {
          if (i) {
            QL();
          }
          o.current = a;
        }
      }, [i, a]);
      0;
      const [u, d] = Y.useState(Xp);
      const m = !Ur(u, Xp);
      0;
      const h = Y.useMemo(() => ({
        showDetails: e => d(e),
        hideDetails: e => d(t => Ur(t, e) ? Xp : t)
      }), []);
      0;
      Y.useEffect(() => {
        if (i && m) {
          const e = ym.subscribe(e => {
            if (e) {
              d(Xp);
            }
          });
          return () => e.dispose();
        }
      }, [i, m]);
      const g = sl(Nm);
      const p = g.find(e => "Upgrades Menu" === e.name);
      const f = g.find(e => "Back" === e.name);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lh, {
        children: z.jsx(kg, {
          onAction: QL,
          children: z.jsx(dh, {
            styles: l9,
            children: z.jsxs(Ep, {
              focusKey: e,
              className: s,
              children: [z.jsx("div", {
                className: Rge.hints,
                children: z.jsx(LT, {
                  action: "Upgrades Menu",
                  active: t && !!p?.items.length,
                  className: Rge.hint
                })
              }), z.jsx("div", {
                className: Qu()(Rge.hints, Rge.back),
                children: z.jsx(LT, {
                  action: "Back",
                  active: n && !!f?.items.length,
                  className: Rge.hint
                })
              }), z.jsx("div", {
                className: Rge.detailContainer,
                children: z.jsx(cd, {
                  children: m && (0, z.jsx)(dh, {
                    styles: wge,
                    children: (0, z.jsx)(B9, {
                      entity: u,
                      className: Rge.detailPanel,
                      upgrade: true
                    })
                  }, "details")
                })
              }), z.jsx(u9.Provider, {
                value: h,
                children: z.jsx(ZT, {
                  className: Qu()(Rge.assetPanel, i && Rge.gamepadActive),
                  header: z.jsx("div", {
                    className: Rge.titleBar,
                    children: z.jsx("div", {
                      className: Rge.title,
                      children: z.jsx(Pc.UpgradesMenu.TITLE, {})
                    })
                  }),
                  children: z.jsx(Age, {
                    upgrades: l,
                    selectedUpgrade: r,
                    onSelectUpgrade: c
                  })
                })
              })]
            })
          })
        })
      });
    };
    function Uge(e, t, n) {
      const s = ll(zL, t);
      return e && s && s.length > 0 && !n;
    }
    function Bge(e) {
      const t = ll(zL, e);
      const n = sl($L);
      0;
      const s = Y.useCallback(s => {
        if (s) {
          if (t.length > 0) {
            const s = t.find(e => Ur(e.entity, n)) ?? t[0];
            XL(e, s.entity);
          }
        } else {
          QL();
        }
      }, [e, n, t]);
      return [t.length > 0 && null != t.find(e => Ur(e.entity, n)), s];
    }
    X.add("game-ui/game/components/upgrades-menu/upgrades-menu.tsx", {
      get UpgradesMenu() {
        return Fge;
      },
      set UpgradesMenu(e) {
        Fge = e;
      },
      get useUpgradesMenuVisible() {
        return Uge;
      },
      set useUpgradesMenuVisible(e) {
        Uge = e;
      },
      get useUpgradingActive() {
        return Bge;
      },
      set useUpgradingActive(e) {
        Bge = e;
      }
    });
    (function (e) {
      e[e.none = 0] = "none";
      e[e.toolbar = 1] = "toolbar";
      e[e.toolOptions = 2] = "toolOptions";
      e[e.assetMenu = 3] = "assetMenu";
      e[e.upgradesMenu = 4] = "upgradesMenu";
      e[e.mapTilePurchase = 5] = "mapTilePurchase";
      e[e.selectedInfo = 6] = "selectedInfo";
      e[e.infoViews = 7] = "infoViews";
      e[e.advisorPanel = 8] = "advisorPanel";
      e[e.tutorialIntro = 9] = "tutorialIntro";
      e[e.tutorialListIntro = 10] = "tutorialListIntro";
      e[e.tutorialListOutro = 11] = "tutorialListOutro";
      e[e.tutorialList = 12] = "tutorialList";
      e[e.tutorialCardCenter = 13] = "tutorialCardCenter";
      e[e.tutorialReminder = 14] = "tutorialReminder";
      e[e.signatureUnlocks = 15] = "signatureUnlocks";
      e[e.milestoneUnlocks = 16] = "milestoneUnlocks";
      e[e.activeTool = 17] = "activeTool";
    })(Dge || (Dge = {}));
    const Gge = [Dge.tutorialIntro, Dge.tutorialListIntro, Dge.tutorialListOutro, Dge.signatureUnlocks, Dge.milestoneUnlocks];
    var Vge = ({
      focusKey: e
    }) => {
      0;
      const [t, n] = Y.useState(false);
      0;
      const [s, i] = Y.useState(false);
      const a = sl(NO);
      const o = !Ur(sl(rL), Xp);
      const r = w0();
      0;
      const [l, c] = Y.useState(false);
      0;
      const [u, d] = Y.useState(false);
      0;
      const [m, h] = Y.useState();
      0;
      Y.useEffect(() => {
        if (!r) {
          c(false);
        }
      }, [r]);
      const g = sl(Av);
      const p = Bu(g, Pv.InfoviewMenu);
      const f = sl(Bj);
      const x = sl(Gj);
      const v = sl(jw);
      const _ = sl(TN);
      const b = !Ur(_, Xp);
      const T = sl(CN);
      const E = !b && T.length > 0;
      const I = sl(GO);
      const y = km();
      const S = sl(Mv);
      const j = sl(dg);
      const C = sl(Fue);
      const N = mme();
      const w = sl(xw);
      const O = Uge(N, w, C);
      const [P, L] = Bge(w);
      0;
      Y.useEffect(() => {
        if (P && !O) {
          L(false);
        }
      }, [L, O, P]);
      0;
      const A = Y.useRef(w);
      if (N) {
        A.current = w;
      }
      const M = KC("Infoviews");
      const R = null !== sl(Zp);
      const k = R && !S && !N && !p;
      const D = R && !p && !k;
      0;
      const [F, U] = Y.useState(false);
      0;
      Y.useEffect(() => {
        if (!R) {
          U(false);
        }
      }, [R]);
      0;
      Y.useEffect(() => {
        if (!(f || x)) {
          i(false);
          Qj();
        }
        if (x && !f) {
          i(true);
        }
      }, [f, x]);
      const B = sl(Sv);
      const G = O && (I.id === yP || P);
      const V = zz();
      const H = r9();
      0;
      const K = Y.useMemo(() => ({
        "Info View": M.locked ? null : () => {
          if (Bu(Av.value, Pv.InfoviewMenu)) {
            Jp();
          } else if (R) {
            if (F) {
              Dv(Pv.InfoviewMenu);
              U(true);
            } else {
              U(e => !e);
            }
          } else {
            Dv(Pv.InfoviewMenu);
          }
        },
        "Tool Options": !l && r ? () => {
          c(e => !e);
        } : null,
        "Upgrades Menu": !G || P || r ? null : () => {
          L(!P);
        },
        "Move Vertical": f ? e => {
          i(-1 === e);
        } : undefined,
        "Move Horizontal": G ? e => {
          L(e > 0);
        } : null,
        Quicksave: V,
        Quickload: H
      }), [f, l, r, G, P, V, H, R, F, M.locked, L]);
      0;
      const W = Y.useCallback(() => c(false), []);
      0;
      const $ = Y.useCallback(() => Aw(), []);
      let q;
      q = b ? Dge.milestoneUnlocks : E ? Dge.signatureUnlocks : m || (null != g ? g.__Type : j && !u ? Dge.advisorPanel : r && l ? Dge.toolOptions : N && C ? Dge.none : N && !P ? Dge.selectedInfo : O && P ? Dge.upgradesMenu : R && F ? Dge.infoViews : f && !s ? Dge.mapTilePurchase : o ? Dge.assetMenu : I.id !== yP ? Dge.activeTool : Dge.toolbar);
      if ((f || x) && s && q === Dge.activeTool) {
        q = Dge.toolbar;
      }
      Kp(!s);
      m6(!(Gge.includes(q) && B !== Iv.freeCamera));
      const X = P || o;
      const Z = j || p;
      const J = q === Dge.activeTool ? 66 : 0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Lh, {
        onFocusChange: n,
        children: [z.jsx(fJ, {
          blockingPanelActive: S
        }), z.jsx(_ae, {
          children: z.jsx(Cge, {
            children: z.jsx(Lg, {
              actions: K,
              children: z.jsx(Km, {
                children: z.jsxs("div", {
                  className: Qu()(Doe.gameMainScreen, r && Doe.toolOptionsVisible),
                  children: [z.jsxs(ip, {
                    focusKey: e,
                    focused: q,
                    activation: $u.Always,
                    debugName: "GameMainScreen",
                    children: [z.jsxs("div", {
                      className: Doe.mainContainer,
                      children: [y ? t && (0, z.jsxs)("div", {
                        className: Doe.topLayout,
                        children: [(0, z.jsx)(Woe, {
                          miniPanelVisible: D
                        }), (0, z.jsx)(aT, {
                          uiTag: dT.value?.actionHints,
                          children: (0, z.jsx)(fT, {
                            className: Doe.actionHints,
                            delay: J,
                            delayIgnoreCounter: 3,
                            excludedActions: pT
                          })
                        }), (0, z.jsx)(Hge, {
                          visible: j,
                          orientation: "Vertical"
                        })]
                      }) : (0, z.jsxs)("div", {
                        className: Doe.infoMenuLayout,
                        children: [(0, z.jsx)(Woe, {
                          miniPanelVisible: D
                        }), (0, z.jsx)(YZ, {
                          name: "GameTopLeft"
                        })]
                      }), z.jsxs("div", {
                        className: Doe.infoLayout,
                        children: [z.jsx(py, {
                          in: N,
                          children: z.jsx(ume, {
                            focusKey: I.id === yP ? Dge.selectedInfo : Eg,
                            className: Doe.selectedInfoPanel,
                            onClose: $,
                            showHint: X !== Z && !l
                          })
                        }), z.jsx(py, {
                          in: k,
                          children: z.jsx(V4, {
                            focusKey: Dge.infoViews,
                            className: Doe.infoviewMenu,
                            onClose: tf
                          })
                        })]
                      }), z.jsxs("div", {
                        className: Doe.toolLayout,
                        children: [z.jsx("div", {
                          className: Doe.toolSideColumn,
                          children: z.jsx(py, {
                            in: r,
                            children: z.jsx(C0, {
                              focusKey: Dge.toolOptions,
                              onClose: W,
                              showHint: r && !l || l && !Z
                            })
                          })
                        }), z.jsxs("div", {
                          className: Doe.toolMainColumn,
                          children: [z.jsx(py, {
                            in: o,
                            children: z.jsx(s7, {
                              focusKey: Dge.assetMenu,
                              onClose: fL,
                              className: Doe.toolPanel
                            })
                          }), z.jsx(py, {
                            in: O,
                            children: z.jsx(Fge, {
                              focusKey: Dge.upgradesMenu,
                              className: Doe.toolPanel,
                              showOpenHint: !P && O,
                              showBackHint: P && l !== Z
                            })
                          }), z.jsx(py, {
                            in: f,
                            children: z.jsx(Zoe, {
                              focusKey: Dge.mapTilePurchase,
                              className: Doe.mapTilePurchasePanel,
                              onClose: Qj
                            })
                          })]
                        }), z.jsx("div", {
                          className: Doe.toolSideColumn
                        })]
                      }), z.jsx(cd, {
                        children: g && (0, z.jsx)(sp, {
                          focusKey: g.__Type,
                          children: (0, z.jsx)(Boe, {
                            panel: g
                          })
                        }, g.__Type)
                      }), z.jsx(G0, {
                        className: Doe.bpIndicator
                      }), !y && (0, z.jsx)(Hge, {
                        visible: j
                      })]
                    }), z.jsx(Ige, {
                      onlyStatusVisible: f,
                      focusKey: Dge.toolbar
                    }), z.jsx(py, {
                      in: N && null !== v,
                      children: N && v && (0, z.jsx)(Ore, {
                        onClose: $,
                        developerInfoSection: v
                      })
                    }), z.jsx("div", {
                      className: Qu()(Doe.pauseOverlay, a && Doe.paused)
                    }), z.jsx(Nge, {
                      focusKey: e,
                      onTutorialActionNeeded: d,
                      onSetControlledFocusKey: h
                    }), E && (0, z.jsx)(t_, {
                      children: (0, z.jsx)(fre, {
                        focusKey: Dge.signatureUnlocks,
                        entities: T,
                        onClose: NN
                      })
                    }), b && (0, z.jsx)(t_, {
                      children: (0, z.jsx)(hre, {
                        focusKey: Dge.milestoneUnlocks,
                        milestone: _,
                        onClose: EN
                      })
                    }), z.jsx(YZ, {
                      name: "Game"
                    })]
                  }), z.jsx(I6, {})]
                })
              })
            })
          })
        })]
      });
    };
    0;
    const Hge = Y.memo(function ({
      visible: e,
      orientation: t = "Horizontal"
    }) {
      const n = $b();
      const s = sl(Ul);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(Doe.pauseMenuLayout, "Horizontal" === t && Doe.horizontal, "Vertical" === t && Doe.vertical),
        children: [z.jsx(YZ, {
          name: "GameTopRight"
        }), n && (0, z.jsxs)("div", {
          className: Doe.pauseMenuToggle,
          children: [(0, z.jsx)(LT, {
            action: "Advisor",
            className: Doe.hint
          }), (0, z.jsx)(zq, {
            title: (0, z.jsx)(Pc.Main.TOOLTIP_TITLE_ADVISOR, {}),
            description: (0, z.jsx)(Pc.Main.TOOLTIP_DESCRIPTION_ADVISOR, {}),
            shortcut: (0, z.jsx)(AT, {
              action: "Advisor",
              active: s
            }),
            children: (0, z.jsx)(h6, {
              src: "Media/Glyphs/Advisor.svg",
              selected: e,
              className: Doe.pauseMenuToggle,
              onSelect: mg
            })
          })]
        }), z.jsxs("div", {
          className: Doe.pauseMenuToggle,
          children: [z.jsx(LT, {
            action: "Pause Menu",
            className: Doe.hint
          }), z.jsx(aT, {
            uiTag: dT.value?.pauseMenuButton,
            children: z.jsx(zq, {
              title: z.jsx(Pc.Main.TOOLTIP_TITLE_PAUSE_MENU, {}),
              description: z.jsx(Pc.Main.TOOLTIP_DESCRIPTION_PAUSE_MENU, {}),
              shortcut: z.jsx(AT, {
                action: "Pause Menu",
                active: s
              }),
              children: z.jsx(h6, {
                src: "Media/Glyphs/Gear.svg",
                onSelect: wv
              })
            })
          })]
        })]
      });
    }, (e, t) => e.visible === t.visible);
    X.add("game-ui/game/components/game-main-screen.tsx", {
      get Key() {
        return Dge;
      },
      set Key(e) {
        Dge = e;
      },
      get GameMainScreen() {
        return Vge;
      },
      set GameMainScreen(e) {
        Vge = e;
      }
    });
    let Kge = {
      header: "header_Quv header_Bpo child-opacity-transition_nkS",
      content: "content_OGC content_AD7 child-opacity-transition_nkS",
      footer: "footer_H3w footer_pD5 child-opacity-transition_nkS"
    };
    X.add("game-ui/common/panel/themes/light.module.scss", {
      get classes() {
        return Kge;
      },
      set classes(e) {
        Object.assign(Kge, e);
      }
    });
    let zge = {
      wrapper: "wrapper_GJY",
      wide: "wide_RVn",
      intro: "intro_dph",
      "image-layout": "image-layout_DU8",
      imageLayout: "image-layout_DU8",
      image: "image_KoE",
      chirper: "chirper_KjN",
      logo: "logo_igH",
      content: "content_vpm",
      title: "title_QRS",
      subtitle: "subtitle_gN8",
      description: "description_VKr",
      "checkbox-container": "checkbox-container_ety",
      checkboxContainer: "checkbox-container_ety",
      "checkbox-label": "checkbox-label_YsL",
      checkboxLabel: "checkbox-label_YsL",
      checkbox: "checkbox_OCf",
      divider: "divider_agt",
      "button-container": "button-container_vXF",
      buttonContainer: "button-container_vXF",
      button: "button_b9w",
      "dialog-button": "dialog-button_iCQ",
      dialogButton: "dialog-button_iCQ",
      hint: "hint_f_u",
      header: "header_Abn"
    };
    X.add("game-ui/game/components/tutorials/tutorial-intro-panel/tutorial-intro-panel.module.scss", {
      get classes() {
        return zge;
      },
      set classes(e) {
        Object.assign(zge, e);
      }
    });
    const $ge = new Tg("BEGIN");
    var qge;
    !function (e) {
      e[e.Welcome = 0] = "Welcome";
      e[e.Preface = 1] = "Preface";
      e[e.TutorialConfirmation = 2] = "TutorialConfirmation";
    }(qge || (qge = {}));
    var Xge = ({
      focusKey: e
    }) => {
      0;
      const [t, n] = Y.useState(qge.Welcome);
      0;
      const s = Y.useCallback(e => n(e ? qge.Preface : qge.TutorialConfirmation), []);
      0;
      const i = Y.useCallback(e => {
        if (e) {
          n(qge.Welcome);
        } else {
          eg(false);
        }
      }, []);
      0;
      const a = Y.useCallback(() => eg(true), []);
      0;
      0;
      return z.jsx(ZT, {
        focusKey: e,
        theme: Kge,
        className: Qu()(zge.tutorialIntroPanel, {
          [zge.intro]: t === qge.Welcome
        }),
        contentClassName: zge.content,
        children: z.jsxs(ep, {
          initialFocused: $ge,
          children: [t === qge.Welcome && (0, z.jsx)(Qge, {
            onContinue: s
          }), t === qge.Preface && (0, z.jsx)(Zge, {
            onContinue: a
          }), t === qge.TutorialConfirmation && (0, z.jsx)(Jge, {
            onContinue: i
          })]
        })
      });
    };
    const Qge = ({
      onContinue: e
    }) => {
      0;
      const [t, n] = Y.useState(true);
      0;
      const s = Y.useCallback(() => {
        e(t);
      }, [t, e]);
      0;
      const [i, a] = Y.useState(false);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Qu()(zge.wrapper, zge.wide),
        children: [z.jsxs("div", {
          className: zge.imageLayout,
          children: [z.jsx("img", {
            src: "Media/Game/Milestones/Cityscape01.svg",
            className: zge.image
          }), z.jsx("img", {
            src: "Media/Tutorials/GameLogo.svg",
            className: zge.logo
          })]
        }), z.jsx("div", {
          className: zge.title,
          children: z.jsx(Pc.Tutorials.INTRO_TITLE, {})
        }), z.jsx("div", {
          className: zge.subtitle,
          children: z.jsx(Pc.Tutorials.INTRO_SUBTITLE, {})
        }), z.jsx("div", {
          className: zge.description,
          children: z.jsx(bb, {
            children: z.jsx(Pc.Tutorials.INTRO, {})
          })
        }), z.jsx(L_, {
          focusKey: $ge,
          theme: DE,
          className: zge.button,
          onSelect: s,
          children: z.jsx(Pc.Tutorials.BEGIN_WITH_TUTORIALS, {})
        }), z.jsxs(Tp, {
          onFocusChange: a,
          className: zge.checkboxContainer,
          children: [z.jsx(LT, {
            action: "Select",
            active: i,
            className: zge.hint
          }), z.jsx(kb, {
            checked: t,
            onChange: n,
            className: zge.checkbox
          }), z.jsx("div", {
            className: zge.checkboxLabel,
            children: z.jsx(Pc.Tutorials.ENABLE_TUTORIALS_CONFIRM, {})
          })]
        })]
      });
    };
    const Zge = ({
      onContinue: e
    }) => {
      0;
      const t = Y.useCallback(() => e(true), [e]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: zge.wrapper,
        children: [z.jsxs("div", {
          className: zge.imageLayout,
          children: [z.jsx("img", {
            src: "Media/Tutorials/GameLogo.svg",
            className: zge.logo
          }), z.jsx("img", {
            src: "Media/Game/Icons/Chirper.svg",
            className: zge.chirper
          })]
        }), z.jsx("div", {
          className: zge.divider
        }), z.jsx("div", {
          className: zge.description,
          children: z.jsx(bb, {
            children: z.jsx(Pc.Tutorials.BEFORE_STARTING, {})
          })
        }), z.jsx(L_, {
          theme: DE,
          className: zge.button,
          onSelect: t,
          children: z.jsx(Pc.Tutorials.BEFORE_STARTING_CONFIRM, {})
        })]
      });
    };
    const Jge = ({
      onContinue: e
    }) => {
      0;
      const t = Y.useCallback(() => e(false), [e]);
      0;
      const n = Y.useCallback(() => e(true), [e]);
      const s = km();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: zge.wrapper,
        children: [z.jsxs("div", {
          className: zge.imageLayout,
          children: [z.jsx("img", {
            src: "Media/Tutorials/GameLogo.svg",
            className: zge.logo
          }), z.jsx("img", {
            src: "Media/Game/Icons/Chirper.svg",
            className: zge.chirper
          })]
        }), z.jsx("div", {
          className: zge.divider
        }), z.jsx("div", {
          className: zge.description,
          children: z.jsx(bb, {
            renderer: Nb,
            children: s ? (0, z.jsx)(Pc.Tutorials.DISABLE_CONFIRMATION_TEXT_GAMEPAD, {}) : (0, z.jsx)(Pc.Tutorials.DISABLE_CONFIRMATION_TEXT, {})
          })
        }), z.jsxs("div", {
          className: zge.buttonContainer,
          children: [z.jsx(L_, {
            theme: DE,
            className: Qu()(zge.button, zge.dialogButton),
            onSelect: t,
            children: z.jsx(Pc.Common.YES, {})
          }), z.jsx(L_, {
            theme: DE,
            className: Qu()(zge.button, zge.dialogButton, DE.negative),
            onSelect: n,
            children: z.jsx(Pc.Common.NO, {})
          })]
        })]
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-intro-panel/tutorial-intro-panel.tsx", {
      get TutorialIntroPanel() {
        return Xge;
      },
      set TutorialIntroPanel(e) {
        Xge = e;
      }
    });
    const epe = new Tg("BEGIN");
    var tpe = ({
      focusKey: e,
      localization: t,
      onCompleteListIntro: n
    }) => (0, z.jsx)(ZT, {
      focusKey: e,
      theme: Kge,
      className: zge.tutorialIntroPanel,
      contentClassName: zge.content,
      children: (0, z.jsx)(ep, {
        initialFocused: epe,
        children: (0, z.jsxs)("div", {
          className: zge.wrapper,
          children: [(0, z.jsxs)("div", {
            className: zge.imageLayout,
            children: [(0, z.jsx)("img", {
              src: "Media/Tutorials/GameLogo.svg",
              className: zge.logo
            }), (0, z.jsx)("img", {
              src: "Media/Game/Icons/Chirper.svg",
              className: zge.chirper
            })]
          }), (0, z.jsx)("div", {
            className: zge.divider
          }), (0, z.jsx)("div", {
            className: zge.header,
            children: (0, z.jsx)(t.TITLE, {
              hash: "Welcome"
            })
          }), (0, z.jsx)("div", {
            className: zge.description,
            children: (0, z.jsx)(bb, {
              children: (0, z.jsx)(t.TODO_INTRO, {})
            })
          }), t === Pc.EditorTutorials ? (0, z.jsxs)("div", {
            className: zge.buttonContainer,
            children: [(0, z.jsx)(L_, {
              theme: DE,
              className: Qu()(zge.button, zge.dialogButton),
              onSelect: () => n(true),
              children: (0, z.jsx)(Pc.Common.YES, {})
            }), (0, z.jsx)(L_, {
              theme: DE,
              className: Qu()(zge.button, zge.dialogButton, DE.negative),
              onSelect: () => n(false),
              children: (0, z.jsx)(Pc.Common.NO, {})
            })]
          }) : (0, z.jsx)(L_, {
            theme: DE,
            className: zge.button,
            onSelect: () => n(true),
            children: (0, z.jsx)(Pc.Tutorials.TODO_INTRO_CONFIRM, {})
          })]
        })
      })
    });
    X.add("game-ui/game/components/tutorials/tutorial-intro-panel/tutorial-list-intro-panel.tsx", {
      get TutorialListIntroPanel() {
        return tpe;
      },
      set TutorialListIntroPanel(e) {
        tpe = e;
      }
    });
    const npe = new Tg("BEGIN");
    var spe = ({
      focusKey: e
    }) => {
      const t = km();
      0;
      const n = Y.useCallback(() => {
        jv(Iv.newGame);
        ng();
      }, []);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(ZT, {
        focusKey: e,
        theme: Kge,
        className: zge.tutorialIntroPanel,
        contentClassName: zge.content,
        children: z.jsx(ep, {
          initialFocused: npe,
          children: z.jsxs("div", {
            className: Qu()(zge.wrapper, zge.wide),
            children: [z.jsxs("div", {
              className: zge.imageLayout,
              children: [z.jsx("img", {
                src: "Media/Tutorials/GameLogo.svg",
                className: zge.logo
              }), z.jsx("img", {
                src: "Media/Game/Icons/Chirper.svg",
                className: zge.chirper
              })]
            }), z.jsx("div", {
              className: zge.divider
            }), z.jsx("div", {
              className: zge.description,
              children: z.jsx(bb, {
                renderer: Nb,
                children: t ? (0, z.jsx)(Pc.Tutorials.TODO_OUTRO_GAMEPAD, {}) : (0, z.jsx)(Pc.Tutorials.TODO_OUTRO, {})
              })
            }), z.jsxs("div", {
              className: zge.buttonContainer,
              children: [z.jsx(L_, {
                theme: DE,
                className: Qu()(zge.button, zge.dialogButton),
                onSelect: ng,
                children: z.jsx(Pc.Tutorials.TODO_OUTRO_CONTINUE, {})
              }), z.jsx(L_, {
                theme: DE,
                className: Qu()(zge.button, zge.dialogButton, DE.negative),
                onSelect: n,
                children: z.jsx(Pc.Tutorials.TODO_OUTRO_NEW_CITY, {})
              })]
            })]
          })
        })
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-intro-panel/tutorial-list-outro-panel.tsx", {
      get TutorialListOutroPanel() {
        return spe;
      },
      set TutorialListOutroPanel(e) {
        spe = e;
      }
    });
    let ipe = {
      enter: "enter_wwI",
      "enter-active": "enter-active_p_T",
      enterActive: "enter-active_p_T",
      exit: "exit_rZO",
      "exit-active": "exit-active_vTx",
      exitActive: "exit-active_vTx"
    };
    X.add("game-ui/game/components/tutorials/tutorial-panel-transition.module.scss", {
      get classes() {
        return ipe;
      },
      set classes(e) {
        Object.assign(ipe, e);
      }
    });
    let ope = {
      "panel-content": "panel-content_p59",
      panelContent: "panel-content_p59",
      "tutorial-layout": "tutorial-layout_dTO tutorial-layout_iuN",
      tutorialLayout: "tutorial-layout_dTO tutorial-layout_iuN",
      image: "image_e92 image_NyN",
      columns: "columns_WiK columns_ITy",
      scrollable: "scrollable_pas scrollable_ErH"
    };
    X.add("game-ui/game/components/tutorials/tutorial-card/tutorial-card.module.scss", {
      get classes() {
        return ope;
      },
      set classes(e) {
        Object.assign(ope, e);
      }
    });
    var lpe = ({
      tutorial: e,
      phase: t,
      className: n,
      expanded: s,
      localization: i,
      onToggle: a,
      onClose: o
    }) => {
      const r = km();
      const l = e?.completed || e?.advisorActivation || !e?.mandatory;
      0;
      return z.jsx(d1, {
        isFocusRoot: true,
        headerText: t && (0, z.jsx)(Pc.Tutorials.TITLE, {
          hash: t.name
        }),
        theme: i7,
        expanded: s,
        transition: ipe,
        transitionSounds: lp,
        className: Qu()(ope.tutorialCard, n),
        contentClassName: ope.panelContent,
        onToggleExpanded: a,
        onClose: l ? o : undefined,
        showCloseHint: l,
        togglable: !r,
        children: e && t && (0, z.jsx)(Qb, {
          closeable: l,
          pagesVisible: true,
          tutorial: e,
          phase: t,
          theme: ope,
          localization: i,
          scrollable: true
        })
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-card/tutorial-card.tsx", {
      get TutorialCard() {
        return lpe;
      },
      set TutorialCard(e) {
        lpe = e;
      }
    });
    let cpe = {
      "tutorial-layout": "tutorial-layout_QpW tutorial-layout_iuN",
      tutorialLayout: "tutorial-layout_QpW tutorial-layout_iuN",
      "tutorial-center-card": "tutorial-center-card_j6a",
      tutorialCenterCard: "tutorial-center-card_j6a",
      image: "image_khW image_NyN",
      triggers: "triggers_tif"
    };
    X.add("game-ui/game/components/tutorials/tutorial-center-card/tutorial-center-card.module.scss", {
      get classes() {
        return cpe;
      },
      set classes(e) {
        Object.assign(cpe, e);
      }
    });
    var dpe = ({
      tutorial: e,
      phase: t,
      className: n,
      localization: s,
      onClose: i
    }) => {
      const a = e?.completed || e?.advisorActivation || !e?.mandatory;
      const o = a ? "Close Tutorial" : undefined;
      0;
      return z.jsx(ZT, {
        focusKey: Dge.tutorialCardCenter,
        header: e && (0, z.jsx)(nE, {
          children: (0, z.jsx)(Pc.Tutorials.TITLE, {
            hash: e.name
          })
        }),
        theme: i7,
        transitionSounds: lp,
        className: Qu()(cpe.tutorialCenterCard, n),
        onClose: a ? i : undefined,
        showCloseHint: o,
        unfocusedHintAction: o,
        children: e && t && (0, z.jsx)(Qb, {
          theme: cpe,
          tutorial: e,
          phase: t,
          pagesVisible: true,
          localization: s,
          scrollable: true
        })
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-center-card/tutorial-center-card.tsx", {
      get TutorialCenterCard() {
        return dpe;
      },
      set TutorialCenterCard(e) {
        dpe = e;
      }
    });
    let mpe = {
      toggle: "toggle_Tm5"
    };
    X.add("game-ui/game/components/tutorials/tutorial-list-panel/tutorial-list-checkbox.module.scss", {
      get classes() {
        return mpe;
      },
      set classes(e) {
        Object.assign(mpe, e);
      }
    });
    let gpe = {
      "tutorial-list-panel": "tutorial-list-panel_lGU",
      tutorialListPanel: "tutorial-list-panel_lGU",
      header: "header_GVY",
      "item-right": "item-right_ay5",
      itemRight: "item-right_ay5",
      "item-left": "item-left_Wz1",
      itemLeft: "item-left_Wz1",
      content: "content_oLZ tutorial-layout_iuN",
      hints: "hints_enS tutorial-layout_iuN",
      "item-hint": "item-hint_hBI",
      itemHint: "item-hint_hBI",
      "hints-content": "hints-content_Mmn",
      hintsContent: "hints-content_Mmn",
      item: "item_GYF",
      completed: "completed_tbu",
      selected: "selected_txY",
      checkbox: "checkbox_y4W",
      title: "title_SfK",
      label: "label_nNX",
      "play-button": "play-button_Zaj",
      playButton: "play-button_Zaj",
      blink: "blink_hSS",
      none: "none_tvP",
      "play-icon": "play-icon_Bax",
      playIcon: "play-icon_Bax"
    };
    X.add("game-ui/game/components/tutorials/tutorial-list-panel/tutorial-list-panel.module.scss", {
      get classes() {
        return gpe;
      },
      set classes(e) {
        Object.assign(gpe, e);
      }
    });
    var fpe = ({
      list: e,
      className: t,
      expanded: n,
      onToggle: s,
      focusKey: i
    }) => {
      const a = sl(Kh);
      const o = sl(Dh);
      0;
      const r = Y.useMemo(() => e?.hints.filter(e => null != e && e.completed).sort((e, t) => (e?.priority ?? 0) - (t?.priority ?? 0)), [e?.hints]);
      0;
      const l = Y.useMemo(() => ({
        Back: () => {
          Vh(false);
        }
      }), []);
      const c = sl(Gh);
      const u = km();
      Kp(!c || !u);
      0;
      Y.useEffect(() => (Vh(true), () => Vh(false)), []);
      const d = e?.tutorials.reduce((e, t) => {
        const n = t?.alternatives?.some(e => Ur(e, o));
        const s = Ur(t.entity, a?.entity);
        const i = null == t || !Ur(t.entity, o) && !n && !(t.active || t.completed);
        return s || i ? e : t;
      }, undefined);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: l,
        children: z.jsx(d1, {
          isFocusRoot: true,
          expanded: n,
          focusKey: i,
          headerText: e && (0, z.jsx)(Pc.Tutorials.TITLE, {
            hash: e.name
          }),
          theme: i7,
          onToggleExpanded: s,
          transition: ipe,
          transitionSounds: lp,
          headerIcon: d && !n ? (0, z.jsx)("div", {
            className: Qu()(gpe.playButton),
            children: (0, z.jsx)(W_, {
              src: "Media/Radio/Play.svg",
              className: gpe.playIcon
            })
          }) : undefined,
          showCloseHint: true,
          unfocusedHintAction: "Focus Tutorial List",
          className: Qu()(gpe.tutorialListPanel, t),
          togglable: !u,
          children: z.jsxs(ep, {
            onRefocus: () => d?.name || e?.tutorials[0].name || "",
            children: [z.jsxs("div", {
              className: gpe.content,
              children: [z.jsx("div", {
                className: gpe.header,
                children: z.jsx(Pc.Tutorials.TASKS, {})
              }), e?.tutorials.map(e => {
                const t = e?.alternatives?.some(e => Ur(e, o));
                const n = null == e || !Ur(e.entity, o) && !t && !(e.active || e.completed);
                return null != e && (0, z.jsx)(xpe, {
                  tutorial: e,
                  active: Ur(e.entity, a?.entity),
                  disabled: n
                }, Dr(e.entity));
              })]
            }), r && r.length > 0 && (0, z.jsx)(_pe, {
              activeTutorial: a,
              hints: r
            })]
          })
        })
      });
    };
    const xpe = ({
      tutorial: e,
      disabled: t = false,
      active: n = false,
      hint: s = false
    }) => {
      0;
      const i = Y.useCallback(() => {
        fL();
        Vh(false);
        if (!n) {
          Xh(e.entity, Xp, false);
        }
      }, [n, e.entity]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(L_, {
        focusKey: t ? Eg : e.name,
        disabled: t,
        className: Qu()(gpe.item, {
          [gpe.completed]: e.completed,
          [gpe.selected]: n
        }),
        onSelect: i,
        disableHint: true,
        children: [z.jsxs("div", {
          className: gpe.itemLeft,
          children: [z.jsx(vpe, {
            active: n,
            disabled: t,
            completed: e.completed
          }), z.jsx("div", {
            className: Qu()(gpe.playButton, t && "disabled"),
            children: z.jsx(W_, {
              src: "Media/Radio/Play.svg",
              className: gpe.playIcon
            })
          })]
        }), z.jsxs("div", {
          className: gpe.title,
          children: [z.jsx("div", {
            className: gpe.label,
            children: z.jsx(Pc.Tutorials.TITLE, {
              hash: e.name
            })
          }), z.jsx("div", {
            className: gpe.itemRight,
            children: !s && (0, z.jsx)(kb, {
              focusKey: Eg,
              checked: e.completed,
              disabled: t,
              theme: mpe,
              className: gpe.checkbox
            })
          })]
        })]
      });
    };
    const vpe = ({
      active: e,
      disabled: t,
      completed: n
    }) => {
      0;
      const s = Nh(Y.useContext(Zu));
      const i = !(s || t || n || e);
      const a = s && !t;
      0;
      return z.jsx(LT, {
        action: i ? "Start Next Tutorial" : "Select",
        active: i || a,
        className: gpe.itemHint
      });
    };
    const _pe = ({
      activeTutorial: e,
      hints: t
    }) => (0, z.jsxs)("div", {
      className: gpe.hints,
      children: [(0, z.jsx)("div", {
        className: gpe.header,
        children: (0, z.jsx)(Pc.Tutorials.HINTS_TITLE, {})
      }), (0, z.jsx)(ab, {
        className: gpe.hintsContent,
        children: t.map(t => t && (0, z.jsx)(xpe, {
          hint: true,
          tutorial: t,
          active: Ur(e?.entity, t.entity)
        }, Dr(t.entity)))
      })]
    });
    X.add("game-ui/game/components/tutorials/tutorial-list-panel/tutorial-list-panel.tsx", {
      get TutorialListPanel() {
        return fpe;
      },
      set TutorialListPanel(e) {
        fpe = e;
      }
    });
    var bpe = ({
      onClose: e,
      className: t
    }) => (0, z.jsx)(ZT, {
      focusKey: Dge.tutorialReminder,
      onClose: e,
      header: (0, z.jsx)(nE, {
        children: (0, z.jsx)(Pc.Tutorials.LIST_REMINDER_TITLE, {})
      }),
      theme: i7,
      transitionSounds: lp,
      className: Qu()(cpe.tutorialCenterCard, "tutorial-reminder", t),
      showCloseHint: true,
      children: (0, z.jsx)(Zb, {
        image: "Media/Tutorials/ReminderPanel.png",
        description: (0, z.jsx)(Pc.Tutorials.LIST_REMINDER_DESCRIPTION, {}),
        nextVisible: true,
        onActivateNextPhase: e
      })
    });
    X.add("game-ui/game/components/tutorials/tutorial-list-reminder.tsx", {
      get TutorialListReminder() {
        return bpe;
      },
      set TutorialListReminder(e) {
        bpe = e;
      }
    });
    let Tpe = {
      "tutorial-renderer": "tutorial-renderer_wve",
      tutorialRenderer: "tutorial-renderer_wve",
      "top-right-layout": "top-right-layout_sSC",
      topRightLayout: "top-right-layout_sSC",
      "bottom-left-layout": "bottom-left-layout_TpC",
      bottomLeftLayout: "bottom-left-layout_TpC",
      "top-right-panel": "top-right-panel_A2r",
      topRightPanel: "top-right-panel_A2r",
      "list-panel": "list-panel_MBq top-right-panel_A2r",
      listPanel: "list-panel_MBq top-right-panel_A2r",
      "advisor-panel": "advisor-panel_mrr top-right-panel_A2r",
      advisorPanel: "advisor-panel_mrr top-right-panel_A2r",
      "card-panel": "card-panel_UGb top-right-panel_A2r",
      cardPanel: "card-panel_UGb top-right-panel_A2r",
      "center-layout": "center-layout_Uqg",
      centerLayout: "center-layout_Uqg"
    };
    X.add("game-ui/game/components/tutorials/tutorial-renderer/tutorial-renderer.module.scss", {
      get classes() {
        return Tpe;
      },
      set classes(e) {
        Object.assign(Tpe, e);
      }
    });
    0;
    var Ipe = Y.memo(function ({
      className: e,
      onTutorialActionNeeded: t,
      localization: n,
      onSetControlledFocusKey: s,
      onTutorialReminder: i
    }) {
      const a = sl(kh);
      const o = sl(Kh);
      const r = sl(Wh);
      const l = sl(Rh);
      const c = sl(zh);
      const u = sl(Yh);
      const d = sl(Fh);
      const m = sl(dg);
      const h = sl(Rv);
      const g = sl(Gh);
      const p = [yv.Center, yv.Right].includes(h);
      const f = r?.type === ug.Card;
      const x = r?.type === ug.CenterCard;
      0;
      const v = Y.useMemo(() => {
        if (null !== a) {
          if (null !== o) {
            return !a.tutorials.find(e => Ur(e.entity, o.entity)) && !a.hints.find(e => Ur(e.entity, o.entity));
          }
          if (!Ur(d, Xp)) {
            return !a.tutorials.find(e => Ur(e.entity, d)) && !a.hints.find(e => Ur(e.entity, d));
          }
        }
        return false;
      }, [o, a, d]);
      0;
      const [_, b] = Y.useState(false);
      0;
      const [T, E] = Y.useState(false);
      0;
      const [I, y] = Y.useState(true);
      0;
      const S = Y.useCallback(e => {
        b(e);
        if (e) {
          E(false);
          y(false);
        }
        if (e && !Bu(Av, Pv.InfoviewMenu)) {
          Uv();
        }
      }, []);
      0;
      const j = Y.useCallback(e => {
        E(e);
        if (e) {
          b(false);
          y(false);
        }
        if (e && !Bu(Av, Pv.InfoviewMenu)) {
          Uv();
        }
      }, []);
      0;
      const C = Y.useCallback(e => {
        y(e);
        if (e) {
          b(false);
          E(false);
        }
        if (e && !Bu(Av, Pv.InfoviewMenu)) {
          Uv();
        }
      }, []);
      const N = null !== a && !v && !c && !u;
      0;
      const w = Y.useMemo(() => {
        const e = !p && !I && !_ && (T || f);
        const t = !(p || _ || f && e || !a);
        return {
          finalCard: e,
          finalList: t,
          finalAdvisorPanel: !p && (!e || !f) && (!t || !N) && m
        };
      }, [_, m, p, T, f, a, I, N]);
      const [O, P] = ype(o, a);
      0;
      Y.useEffect(() => () => mg(false), []);
      0;
      Y.useEffect(() => {
        j(f);
        y(!f);
      }, [j, f]);
      0;
      Y.useEffect(() => {
        if (g) {
          P();
        }
      }, [P, g]);
      0;
      Y.useEffect(() => {
        i?.(O);
        if (O) {
          s?.(Dge.tutorialReminder);
          return () => s?.(undefined);
        }
      }, [O, s, i]);
      0;
      Y.useEffect(() => {
        t?.(!!r);
      }, [r, t]);
      return l ? null : (0, z.jsxs)("div", {
        className: Qu()(Tpe.tutorialRenderer, e),
        children: [n === Pc.Tutorials && (0, z.jsxs)("div", {
          className: Tpe.topRightLayout,
          children: [(0, z.jsx)(py, {
            in: m,
            children: (0, z.jsx)(_1, {
              focusKey: w.finalCard || g ? Eg : Dge.advisorPanel,
              expanded: w.finalAdvisorPanel,
              onToggle: S,
              onClose: mg,
              className: Tpe.advisorPanel,
              localization: n
            })
          }), (0, z.jsx)(py, {
            in: N,
            children: (0, z.jsx)(fpe, {
              focusKey: Dge.tutorialList,
              list: a,
              expanded: I && w.finalList,
              onToggle: C,
              className: Tpe.listPanel
            })
          }), (0, z.jsx)(py, {
            in: f,
            children: (0, z.jsx)(lpe, {
              tutorial: o,
              phase: r,
              expanded: w.finalCard,
              onToggle: j,
              onClose: Jh,
              className: Tpe.cardPanel,
              localization: n
            })
          })]
        }), (0, z.jsxs)("div", {
          className: Tpe.centerLayout,
          children: [(0, z.jsx)(py, {
            in: x,
            children: (0, z.jsx)(dpe, {
              tutorial: o,
              phase: r,
              onClose: Jh,
              className: Tpe.phasePanel,
              localization: n
            })
          }), (0, z.jsx)(py, {
            in: O,
            children: (0, z.jsx)(bpe, {
              onClose: P,
              className: Tpe.phasePanel
            })
          })]
        })]
      });
    });
    const ype = (e, t) => {
      0;
      const [n, s] = Y.useState(false);
      const i = sl(zh);
      0;
      const a = Y.useRef();
      0;
      const o = Y.useCallback(() => {
        s(false);
        clearTimeout(a.current);
      }, []);
      0;
      Y.useEffect(() => {
        if (!e && t && t.intro && !i) {
          a.current = setTimeout(() => s(true), 6e4);
          return () => clearTimeout(a.current);
        }
        s(false);
      }, [e, t, i]);
      return [n, o];
    };
    X.add("game-ui/game/components/tutorials/tutorial-renderer/tutorial-renderer.tsx", {
      get TutorialRenderer() {
        return Ipe;
      },
      set TutorialRenderer(e) {
        Ipe = e;
      }
    });
    let Spe = {
      "tutorials-renderer": "tutorials-renderer_BtC",
      tutorialsRenderer: "tutorials-renderer_BtC"
    };
    X.add("game-ui/game/components/tutorials/tutorial-container.module.scss", {
      get classes() {
        return Spe;
      },
      set classes(e) {
        Object.assign(Spe, e);
      }
    });
    const Cpe = ({
      tutorialIntroVisible: e,
      tutorialListIntroVisible: t,
      tutorialListOutroVisible: n,
      advisorPanelVisible: s,
      onCompleteListIntro: i,
      onSetControlledFocusKey: a,
      onTutorialActionNeeded: o,
      localization: r
    }) => {
      0;
      const [l, c] = Y.useState(false);
      let u;
      u = e ? Dge.tutorialIntro : t ? Dge.tutorialListIntro : n ? Dge.tutorialListOutro : s ? Dge.advisorPanel : l ? Dge.tutorialReminder : Dge.tutorialList;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsxs(ip, {
          focusKey: u || Eg,
          focused: u,
          activation: $u.Always,
          debugName: "TutorialContainer",
          children: [e && (0, z.jsx)(t_, {
            children: (0, z.jsx)(Xge, {
              focusKey: Dge.tutorialIntro
            })
          }), t && (0, z.jsxs)(t_, {
            children: [(0, z.jsx)(tpe, {
              focusKey: Dge.tutorialListIntro,
              localization: r,
              onCompleteListIntro: i
            }), ";"]
          }), n && (0, z.jsx)(t_, {
            children: (0, z.jsx)(spe, {
              focusKey: Dge.tutorialListOutro
            })
          }), z.jsx(Ipe, {
            className: Spe.tutorialsRenderer,
            localization: r,
            onSetControlledFocusKey: a,
            onTutorialActionNeeded: o,
            onTutorialReminder: c
          })]
        })
      });
    };
    X.add("game-ui/game/components/tutorials/tutorial-container.tsx", {});
    var Npe = () => {
      const e = sl(A0);
      const t = sl(D0);
      const n = sl(R0) && null === t;
      const s = sl(k0);
      0;
      return z.jsx(Cpe, {
        tutorialIntroVisible: e,
        tutorialListIntroVisible: n,
        tutorialListOutroVisible: s,
        localization: Pc.EditorTutorials,
        onCompleteListIntro: F0
      });
    };
    X.add("game-ui/editor/components/editor-tutorial-container.tsx", {
      get EditorTutorialContainer() {
        return Npe;
      },
      set EditorTutorialContainer(e) {
        Npe = e;
      }
    });
    var Ope = $r("editorTool", "tools");
    var Ppe = $r("editorTool", "activeTool");
    var Lpe = el("editorTool", "selectTool");
    X.add("game-ui/editor/data-binding/editor-tool-bindings.ts", {
      get tools() {
        return tools;
      },
      set tools(e) {
        tools = e;
      },
      get activeTool() {
        return activeTool;
      },
      set activeTool(e) {
        activeTool = e;
      },
      get selectTool() {
        return Lpe;
      },
      set selectTool(e) {
        Lpe = e;
      }
    });
    let Ape = {
      button: "button_iZC",
      icon: "icon_oET",
      hint: "hint_WBr"
    };
    X.add("game-ui/editor/themes/editor-tool-button.module.scss", {
      get classes() {
        return Ape;
      },
      set classes(e) {
        Object.assign(Ape, e);
      }
    });
    let Rpe = {
      "editor-toolbar": "editor-toolbar_i1J",
      editorToolbar: "editor-toolbar_i1J",
      button: "button_i0V"
    };
    X.add("game-ui/editor/components/toolbar/toolbar.module.scss", {
      get classes() {
        return Rpe;
      },
      set classes(e) {
        Object.assign(Rpe, e);
      }
    });
    var Dpe = ({
      className: e
    }) => {
      const t = sl(Ope);
      const n = sl(Ppe);
      0;
      const s = Y.useCallback(e => Lpe(Ppe.value !== e ? e : null), []);
      0;
      0;
      return z.jsx("div", {
        className: Qu()(Rpe.editorToolbar, e),
        children: z.jsx(ep, {
          direction: Mg.Horizontal,
          children: t.map(({
            id: e,
            icon: t,
            uiTag: i,
            disabled: a
          }) => (0, z.jsx)(Fpe, {
            id: e,
            icon: t,
            uiTag: i,
            tooltip: (0, z.jsx)(Pc.Editor.TOOL, {
              hash: e
            }),
            selected: n === e,
            disabled: a,
            onSelect: s
          }, e))
        })
      });
    };
    const Fpe = ({
      id: e,
      icon: t,
      tooltip: n,
      uiTag: s,
      selected: i,
      disabled: a,
      onSelect: o
    }) => {
      0;
      const r = Y.useCallback(() => o(e), [e, o]);
      0;
      0;
      0;
      return z.jsx(aT, {
        uiTag: s,
        editor: true,
        children: z.jsx(bg, {
          tooltip: n,
          children: z.jsx($_, {
            src: t,
            disabled: a,
            theme: Ape,
            selected: i,
            className: Rpe.button,
            onSelect: r
          })
        })
      });
    };
    X.add("game-ui/editor/components/toolbar/toolbar.tsx", {
      get Toolbar() {
        return Dpe;
      },
      set Toolbar(e) {
        Dpe = e;
      }
    });
    let Upe = {
      "editor-main-screen": "editor-main-screen_m89",
      editorMainScreen: "editor-main-screen_m89",
      main: "main_k4u",
      "top-layout": "top-layout_cRm",
      topLayout: "top-layout_cRm",
      "tool-options": "tool-options_Cqd",
      toolOptions: "tool-options_Cqd",
      toolbar: "toolbar_Qbd",
      "editor-panel": "editor-panel_oDZ",
      editorPanel: "editor-panel_oDZ",
      "tutorials-renderer": "tutorials-renderer_Vfx",
      tutorialsRenderer: "tutorials-renderer_Vfx"
    };
    X.add("game-ui/editor/components/editor-main-screen.module.scss", {
      get classes() {
        return Upe;
      },
      set classes(e) {
        Object.assign(Upe, e);
      }
    });
    var Gpe = "Tool Options";
    var Vpe = "Editor Panel";
    var Hpe = "Infoview";
    var Kpe = ({
      focusKey: e,
      className: t,
      onPauseMenuToggle: n
    }) => {
      0;
      Y.useEffect(() => {
        const e = ["Media/Placeholder.svg", "Media/Editor/Thumbnails/Fallback_Generic.svg"].map(e => {
          const t = new Image();
          t.src = e;
          return t;
        });
        return () => e.forEach(e => e.src = "");
      }, []);
      const s = sl(gD);
      const i = sl(rJ);
      const a = w0();
      0;
      const [o, r] = Y.useState(false);
      const l = pX();
      const c = sl(GO);
      const u = c.id === yP;
      const d = sl(Zp);
      0;
      const [m, h] = Y.useState(false);
      const g = sl(P0);
      0;
      const [p, f] = Y.useState(null);
      0;
      const x = Y.useCallback(e => f(e), []);
      0;
      const v = Y.useCallback(() => {
        if (a) {
          r(e => !e);
        }
      }, [a]);
      0;
      const _ = Y.useCallback(() => r(false), []);
      0;
      const b = Y.useCallback(() => {
        const e = Object.keys(XZ).length / 2;
        lJ((i + 1) % e);
      }, [i]);
      0;
      const T = Y.useMemo(() => ({
        ...l,
        Back: !u || s || null !== d || o ? () => {
          if (u) {
            if (s) {
              TD();
            } else if (null !== d) {
              ef(Xp);
            } else if (o) {
              _();
            }
          } else {
            if (c.id === IP) {
              rp(op.bulldozeEnd);
            }
            uP(yP);
          }
        } : null,
        "Pause Menu": n,
        Bulldozer: () => {
          if (c.id === IP) {
            rp(op.bulldozeEnd);
            uP(yP);
          } else {
            rp(op.bulldoze);
            uP(IP);
          }
        },
        "Change Elevation": hP,
        "Photo Mode Panel": b,
        "Tool Options": a ? v : null,
        "Info View": () => h(e => !e)
      }), [d, c.id, _, u, s, n, b, l, v, o, a]);
      0;
      Y.useEffect(() => {
        if (!p) {
          r(false);
        }
      }, [s, p, a]);
      0;
      const E = Y.useMemo(() => o ? Gpe : m ? Hpe : s ? Vpe : undefined, [s, m, o]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Lg, {
        actions: T,
        children: z.jsxs(fg, {
          children: [z.jsx(fJ, {}), z.jsx(ep, {
            focusKey: e,
            activation: $u.Always,
            forceFocus: E,
            children: z.jsxs("div", {
              className: Qu()(Upe.editorMainScreen, t),
              children: [z.jsxs("div", {
                className: Upe.main,
                children: [z.jsxs("div", {
                  className: Upe.topLayout,
                  children: [z.jsx(lD, {}), z.jsx(d6, {})]
                }), z.jsx(Dpe, {
                  className: Upe.toolbar
                }), z.jsx(E5, {
                  resizeDirection: "left",
                  className: Upe.editorPanel,
                  displayFooter: true,
                  ref: x,
                  focusKey: Vpe,
                  active: s
                }), p && a && (0, z.jsx)(Wm, {
                  container: p,
                  children: (0, z.jsx)(ep, {
                    focusKey: o ? Gpe : Eg,
                    children: (0, z.jsx)(N0, {
                      onClose: _,
                      focusKey: Gpe
                    })
                  })
                })]
              }), z.jsx(r1, {
                onPauseMenuToggle: n
              }), z.jsx(YZ, {
                name: "Editor"
              }), !g && (0, z.jsx)(Npe, {})]
            })
          })]
        })
      });
    };
    X.add("game-ui/editor/components/editor-main-screen.tsx", {
      get TOOL_OPTIONS_KEY() {
        return Gpe;
      },
      set TOOL_OPTIONS_KEY(e) {
        Gpe = e;
      },
      get EDITOR_PANEL_KEY() {
        return Vpe;
      },
      set EDITOR_PANEL_KEY(e) {
        Vpe = e;
      },
      get INFOVIEW_KEY() {
        return Hpe;
      },
      set INFOVIEW_KEY(e) {
        Hpe = e;
      },
      get EditorMainScreen() {
        return Kpe;
      },
      set EditorMainScreen(e) {
        Kpe = e;
      }
    });
    var Wpe = () => {
      const e = sl(Vq);
      0;
      Y.useEffect(() => {
        Hq(Dq.main);
      }, []);
      const t = e !== Dq.main;
      0;
      const n = Y.useCallback(() => {
        if (e !== Dq.pauseMenu) {
          Hq(Dq.pauseMenu);
        } else {
          Hq(Dq.main);
        }
      }, [e]);
      0;
      const s = Y.useCallback(() => Hq(Dq.pauseMenu), []);
      0;
      const i = Y.useCallback(() => Hq(Dq.main), []);
      0;
      const a = Y.useContext(lE);
      0;
      Y.useEffect(() => {
        const e = yE.subscribe(e => {
          0;
          a.showDialog(z.jsx(OI, {
            ...e
          }));
        });
        return () => e.dispose();
      }, [a]);
      0;
      const o = Y.useCallback(() => {
        0;
        0;
        a.showDialog(z.jsx(LI, {
          message: z.jsx(Pc.Common.DIALOG_MESSAGE, {
            hash: "ProgressLoss"
          }),
          onConfirm: Wk
        }));
      }, [a]);
      0;
      0;
      0;
      0;
      return z.jsx(eq, {
        children: z.jsxs(ip, {
          focused: e,
          activation: $u.Always,
          children: [z.jsx(Kpe, {
            focusKey: Dq.main,
            onPauseMenuToggle: n
          }), e === Dq.freeCamera && (0, z.jsx)(fX, {
            focusKey: Dq.freeCamera,
            onClose: i
          }), z.jsx(cd, {
            children: t && (0, z.jsx)(zZ, {
              children: (0, z.jsxs)(cd, {
                children: [e === Dq.pauseMenu && (0, z.jsx)(NX, {
                  focusKey: Dq.pauseMenu,
                  onSelectScreen: Hq,
                  onClose: i,
                  onNewMap: o
                }, Dq.pauseMenu), e === Dq.options && (0, z.jsx)(UZ, {
                  focusKey: Dq.options,
                  onClose: s
                }, Dq.options)]
              })
            }, "pause")
          })]
        })
      });
    };
    X.add("game-ui/editor/components/editor-ui.tsx", {
      get EditorUI() {
        return Wpe;
      },
      set EditorUI(e) {
        Wpe = e;
      }
    });
    let zpe = {
      "debug-prefab-tool-panel": "debug-prefab-tool-panel_xQO",
      debugPrefabToolPanel: "debug-prefab-tool-panel_xQO"
    };
    X.add("game-ui/debug/components/debug-prefab-tool/debug-prefab-tool.module.scss", {
      get classes() {
        return zpe;
      },
      set classes(e) {
        Object.assign(zpe, e);
      }
    });
    const $pe = new Tg("CHILDREN");
    var qpe = ({
      children: e
    }) => {
      const t = sl(gA);
      const n = sl(gD);
      0;
      const s = Y.useMemo(() => ({
        "Debug Prefab Tool": () => Lpe(n ? null : "PrefabTool")
      }), [n]);
      return t ? (0, z.jsx)(Lg, {
        actions: s,
        children: (0, z.jsxs)(ip, {
          focused: $pe,
          children: [(0, z.jsx)(sp, {
            focusKey: $pe,
            children: e
          }), n && (0, z.jsx)(E5, {
            active: true,
            resizeDirection: "left",
            className: zpe.debugPrefabToolPanel
          })]
        })
      }) : (0, z.jsx)(z.Fragment, {
        children: e
      });
    };
    X.add("game-ui/debug/components/debug-prefab-tool/debug-prefab-tool.tsx", {
      get DebugPrefabToolRenderer() {
        return qpe;
      },
      set DebugPrefabToolRenderer(e) {
        qpe = e;
      }
    });
    let Xpe = {
      button: "button_Qvi",
      psn: "psn_Xvd",
      gdk: "gdk_VmN",
      icon: "icon_Z6Y",
      label: "label_yYE"
    };
    X.add("game-ui/menu/components/paradox-panel/account-link-button.module.scss", {
      get classes() {
        return Xpe;
      },
      set classes(e) {
        Object.assign(Xpe, e);
      }
    });
    let Zpe = {
      "paradox-panel": "paradox-panel_iFS",
      paradoxPanel: "paradox-panel_iFS",
      "incentive-container": "incentive-container_e7Y",
      incentiveContainer: "incentive-container_e7Y",
      "incentive-image": "incentive-image_Qzc",
      incentiveImage: "incentive-image_Qzc",
      "incentive-main": "incentive-main_IhA",
      incentiveMain: "incentive-main_IhA",
      "incentive-prompt": "incentive-prompt_k0u",
      incentivePrompt: "incentive-prompt_k0u",
      "incentive-footer": "incentive-footer_UuL",
      incentiveFooter: "incentive-footer_UuL",
      "incentive-legal": "incentive-legal_MJN",
      incentiveLegal: "incentive-legal_MJN",
      header: "header_MiJ",
      logo: "logo_opg",
      title: "title_S09",
      content: "content_VTM",
      error: "error_HSS",
      user: "user_LhQ",
      "user-info": "user-info_n0Q",
      userInfo: "user-info_n0Q",
      "user-name": "user-name_GiO",
      userName: "user-name_GiO",
      "avatar-mask": "avatar-mask_EqN",
      avatarMask: "avatar-mask_EqN",
      avatar: "avatar_rvW",
      "button-row": "button-row_LTO",
      buttonRow: "button-row_LTO",
      "button-container": "button-container_sgE",
      buttonContainer: "button-container_sgE",
      button: "button_o5e",
      "legal-row": "legal-row_qI2",
      legalRow: "legal-row_qI2",
      "legal-row-center": "legal-row-center_ZHk",
      legalRowCenter: "legal-row-center_ZHk",
      "legal-link": "legal-link_Cxy item-states_QjV",
      legalLink: "legal-link_Cxy item-states_QjV"
    };
    X.add("game-ui/menu/components/paradox-panel/paradox-panel.module.scss", {
      get classes() {
        return Zpe;
      },
      set classes(e) {
        Object.assign(Zpe, e);
      }
    });
    var efe = ({
      className: e
    }) => {
      const t = sl(qE);
      const n = sl(tI);
      const s = sl(nI);
      0;
      return z.jsx("div", {
        className: Qu()(Zpe.paradoxPanel, e),
        children: n && s ? t ? (0, z.jsx)(nfe, {}) : (0, z.jsx)(tfe, {}) : (0, z.jsx)(sfe, {
          label: s ? (0, z.jsx)(Pc.Paradox.NO_INTERNET_CONNECTION, {}) : (0, z.jsx)(Pc.Paradox.SDK_DISABLED, {})
        })
      });
    };
    const tfe = () => {
      const e = sl(tI);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: Zpe.incentiveContainer,
        children: [z.jsxs("div", {
          className: Zpe.incentiveMain,
          children: [z.jsx("div", {
            className: Zpe.incentiveImage
          }), z.jsx("div", {
            className: Zpe.incentivePrompt,
            children: z.jsx(Pc.Paradox.LOGIN_INCENTIVE, {})
          })]
        }), z.jsxs("div", {
          className: Zpe.incentiveFooter,
          children: [z.jsx(bg, {
            tooltip: e ? null : (0, z.jsx)(Pc.Paradox.NO_INTERNET_CONNECTION, {}),
            children: z.jsx(RI, {
              tinted: e,
              src: "Media/Menu/Paradox/ParadoxLogoNoText.svg",
              theme: nQ,
              onSelect: uI,
              disabled: !e,
              children: z.jsx(Pc.Paradox.LOGIN_BUTTON, {})
            })
          }), z.jsx("div", {
            className: Zpe.incentiveLegal,
            children: z.jsx(ife, {
              className: Zpe.legalRowCenter
            })
          })]
        })]
      });
    };
    const nfe = () => {
      const e = sl(XE);
      const t = sl(QE);
      const n = sl(ZE);
      const s = sl(eI);
      const i = function (e) {
        0;
        return Y.useMemo(() => null !== e && e.length >= 3 && e.indexOf("@") >= 1 ? e[0] + "***@***" + e[e.length - 1] : e, [e]);
      }(sl(JE));
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(z.Fragment, {
        children: [z.jsxs("div", {
          className: Zpe.header,
          children: [z.jsx(W_, {
            src: "Media/Menu/Paradox/ParadoxLogoNoText.svg",
            className: Zpe.logo
          }), z.jsx("div", {
            className: Zpe.title,
            children: z.jsx(Pc.Paradox.PARADOX_ACCOUNT, {})
          })]
        }), z.jsxs("div", {
          className: Zpe.content,
          children: [z.jsxs("div", {
            className: Zpe.user,
            children: [z.jsx("div", {
              className: Zpe.avatarMask,
              children: z.jsx("img", {
                className: Zpe.avatar,
                src: s ?? "Media/Menu/Paradox/ParadoxLogoNoText.svg"
              })
            }), z.jsxs("div", {
              className: Zpe.userInfo,
              children: [z.jsx("div", {
                className: Zpe.userName,
                children: n
              }), z.jsx("div", {
                className: Zpe.userName,
                children: i
              })]
            })]
          }), z.jsxs("div", {
            className: Zpe.buttonContainer,
            children: [z.jsxs("div", {
              className: Zpe.buttonRow,
              children: [e === hI.unlinked && (0, z.jsx)(RI, {
                src: `Media/Menu/Platforms/${t}.svg`,
                theme: Xpe,
                className: Qu()(Zpe.button, {
                  [Xpe.psn]: "PSN" === t,
                  [Xpe.gdk]: "XboxLive" === t
                }),
                onSelect: sI,
                children: (0, z.jsx)(Pc.Paradox.ACCOUNT_LINK_PROMPT, {})
              }), e === hI.linked && (0, z.jsx)(L_, {
                theme: nQ,
                className: Zpe.button,
                onSelect: iI,
                children: (0, z.jsx)(Pc.Paradox.UNLINK_ACCOUNT_BUTTON, {})
              }), z.jsx(L_, {
                theme: nQ,
                className: Zpe.button,
                onSelect: aI,
                children: z.jsx(Pc.Paradox.LOGOUT_BUTTON, {})
              })]
            }), z.jsx(ife, {})]
          })]
        })]
      });
    };
    const sfe = ({
      label: e
    }) => (0, z.jsxs)(z.Fragment, {
      children: [(0, z.jsxs)("div", {
        className: Zpe.header,
        children: [(0, z.jsx)(W_, {
          src: "Media/Menu/Paradox/ParadoxLogoNoText.svg",
          className: Zpe.logo
        }), (0, z.jsx)("div", {
          className: Zpe.title,
          children: (0, z.jsx)(Pc.Paradox.PARADOX_ACCOUNT, {})
        })]
      }), (0, z.jsx)("div", {
        className: Zpe.content,
        children: (0, z.jsx)("div", {
          className: Zpe.error,
          children: e
        })
      })]
    });
    const ife = ({
      className: e
    }) => (0, z.jsxs)("div", {
      className: Qu()(Zpe.legalRow, e),
      children: [(0, z.jsx)(L_, {
        className: Zpe.legalLink,
        onSelect: TI,
        children: (0, z.jsx)(Pc.Paradox.TERMS_OF_USE, {})
      }), (0, z.jsx)(L_, {
        className: Zpe.legalLink,
        onSelect: EI,
        children: (0, z.jsx)(Pc.Paradox.PRIVACY_POLICY, {})
      })]
    });
    X.add("game-ui/menu/components/paradox-panel/paradox-panel.tsx", {
      get ParadoxPanel() {
        return efe;
      },
      set ParadoxPanel(e) {
        efe = e;
      }
    });
    let afe = {
      logo: "logo_C34 child-opacity-transition_nkS",
      content: "content_reP",
      column: "column_cmR",
      panel: "panel_X0A child-opacity-transition_nkS",
      last: "last_ljC",
      "paradox-panel": "paradox-panel_CK7 child-opacity-transition_nkS",
      paradoxPanel: "paradox-panel_CK7 child-opacity-transition_nkS",
      "notifications-panel": "notifications-panel_AGm child-opacity-transition_nkS",
      notificationsPanel: "notifications-panel_AGm child-opacity-transition_nkS"
    };
    X.add("game-ui/menu/components/game-pause-screen/game-pause-screen.module.scss", {
      get classes() {
        return afe;
      },
      set classes(e) {
        Object.assign(afe, e);
      }
    });
    var rfe = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n
    }, s) {
      const i = sl(Mk);
      const a = sl(Cv);
      0;
      const o = Y.useMemo(() => ({
        Back: n,
        "Pause Menu": n
      }), [n]);
      const r = _X();
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(SX, {
        ref: s,
        focusKey: e,
        className: t,
        children: z.jsx(eq, {
          children: z.jsx(jp, {
            children: z.jsxs(Lg, {
              actions: o,
              children: [z.jsx("img", {
                src: "Media/Menu/GameLogo.svg",
                className: afe.logo
              }), z.jsx(ep, {
                children: z.jsxs("div", {
                  className: afe.content,
                  children: [z.jsx("div", {
                    className: afe.column
                  }), z.jsx("div", {
                    className: afe.column,
                    children: z.jsxs(ep, {
                      allowLooping: true,
                      direction: Mg.Vertical,
                      children: [z.jsx(RI, {
                        tinted: true,
                        src: "Media/Glyphs/ArrowRight.svg",
                        theme: BI,
                        onSelect: n,
                        children: z.jsx(Pc.Menu.RESUME_GAME, {})
                      }), z.jsx(RI, {
                        tinted: true,
                        src: "Media/Glyphs/Save.svg",
                        theme: BI,
                        onSelect: () => jv(Iv.saveGame),
                        children: z.jsx(Pc.Menu.SAVE_GAME, {})
                      }), z.jsx(RI, {
                        tinted: true,
                        src: "Media/Glyphs/Plus.svg",
                        theme: BI,
                        onSelect: () => jv(Iv.newGame),
                        children: z.jsx(Pc.Menu.NEW_GAME, {})
                      }), z.jsx(RI, {
                        tinted: true,
                        disabled: 0 === i.length,
                        src: "Media/Glyphs/Progress.svg",
                        theme: BI,
                        onSelect: () => jv(Iv.loadGame),
                        children: z.jsx(Pc.Menu.LOAD_GAME, {})
                      }), z.jsx(RI, {
                        tinted: true,
                        src: "Media/Glyphs/Gear.svg",
                        theme: BI,
                        onSelect: () => jv(Iv.options),
                        children: z.jsx(Pc.Menu.OPTIONS, {})
                      }), z.jsx(RI, {
                        tinted: true,
                        src: "Media/Glyphs/Close.svg",
                        theme: BI,
                        onSelect: r,
                        disabled: !a,
                        children: z.jsx(Pc.Menu.EXIT_GAME, {})
                      })]
                    })
                  }), z.jsxs("div", {
                    className: afe.column,
                    children: [z.jsx(efe, {
                      className: afe.paradoxPanel
                    }), z.jsx(Pse, {
                      className: afe.notificationsPanel
                    })]
                  }), z.jsx("div", {
                    className: afe.column
                  })]
                })
              })]
            })
          })
        })
      });
    });
    X.add("game-ui/menu/components/game-pause-screen/game-pause-screen.tsx", {
      get GamePauseScreen() {
        return rfe;
      },
      set GamePauseScreen(e) {
        rfe = e;
      }
    });
    0;
    var lfe = Y.memo(function () {
      const e = sl(Sv);
      const t = e !== Iv.main && e !== Iv.freeCamera;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(qpe, {
        children: z.jsx(fg, {
          children: z.jsxs(cfe, {
            children: [z.jsx(dfe, {}), z.jsx(mfe, {
              menuVisible: t
            }), z.jsxs(ip, {
              focused: e,
              activation: $u.Always,
              debugName: "GameUI",
              children: [z.jsxs(cd, {
                children: [!t && (0, z.jsx)(Vge, {
                  focusKey: Iv.main
                }), t && (0, z.jsx)(ufe, {
                  activeScreen: e
                }, "game:pause")]
              }), e === Iv.freeCamera && (0, z.jsx)(fX, {
                focusKey: Iv.freeCamera,
                onClose: Nv
              }, Iv.freeCamera)]
            })]
          })
        })
      });
    });
    const cfe = ({
      children: e
    }) => {
      const t = gX();
      0;
      return z.jsx(Lg, {
        actions: t,
        children: e
      });
    };
    const ufe = ({
      activeScreen: e
    }) => (0, z.jsx)(zZ, {
      children: (0, z.jsxs)(cd, {
        children: [e === Iv.pauseMenu && (0, z.jsx)(rfe, {
          focusKey: Iv.pauseMenu,
          onClose: Nv
        }, Iv.pauseMenu), e === Iv.saveGame && (0, z.jsx)(Hz, {
          focusKey: Iv.saveGame,
          onClose: wv
        }, Iv.saveGame), e === Iv.newGame && (0, z.jsx)(l8, {
          focusKey: Iv.newGame,
          onClose: wv
        }, Iv.newGame), e === Iv.loadGame && (0, z.jsx)(a9, {
          focusKey: Iv.loadGame,
          onClose: wv,
          requireConfirmation: true
        }, Iv.loadGame), e === Iv.options && (0, z.jsx)(UZ, {
          focusKey: Iv.options,
          onClose: wv
        }, Iv.options)]
      })
    });
    0;
    const dfe = Y.memo(function () {
      0;
      const e = Y.useContext(lE);
      0;
      Y.useEffect(() => {
        const t = yE.subscribe(t => {
          0;
          e.showDialog(z.jsx(OI, {
            ...t
          }));
        });
        return () => t.dispose();
      }, [e]);
      return null;
    });
    0;
    const mfe = Y.memo(function ({
      menuVisible: e
    }) {
      m6(!e);
      const t = sl(wk);
      const n = tq();
      0;
      Y.useEffect(() => {
        if (!e && (n.length > 0 || t)) {
          wv();
        }
      }, [e, t, n.length]);
      return null;
    });
    X.add("game-ui/game/components/game-ui.tsx", {
      get GameUI() {
        return lfe;
      },
      set GameUI(e) {
        lfe = e;
      }
    });
    var hfe = ({
      children: e
    }) => {
      const t = sl(Dp);
      0;
      const n = Y.useMemo(() => ({
        "Switch User": () => {
          rp(op.selectItem);
          Gp();
        }
      }), []);
      0;
      return z.jsx(Lg, {
        actions: n,
        disabled: !t,
        children: e
      });
    };
    X.add("game-ui/menu/components/user-switch-prompt/user-switch-prompt-consumer.tsx", {
      get UserSwitchPromptConsumer() {
        return hfe;
      },
      set UserSwitchPromptConsumer(e) {
        hfe = e;
      }
    });
    let gfe = {
      "credits-renderer": "credits-renderer_BaD",
      creditsRenderer: "credits-renderer_BaD",
      h1: "h1_z8F",
      h2: "h2_xgG",
      h3: "h3_LtF",
      line: "line_hIW",
      licenses: "licenses_RXV",
      "image-line": "image-line_lv2",
      imageLine: "image-line_lv2",
      image: "image_idP"
    };
    X.add("game-ui/menu/components/credits-screen/credits-renderer/credits-renderer.module.scss", {
      get classes() {
        return gfe;
      },
      set classes(e) {
        Object.assign(gfe, e);
      }
    });
    var ffe = ({
      lines: e,
      images: t,
      onComplete: n
    }) => {
      0;
      const s = Y.useRef(null);
      0;
      const i = Y.useMemo(() => [{
        data: {
          node: null,
          style: mb.None,
          images: []
        }
      }, ...e, {
        data: {
          node: null,
          style: mb.None,
          images: []
        }
      }], [e]);
      const a = function (e, t) {
        const n = Vm();
        0;
        const s = Y.useCallback((s, i) => 0 === i ? 700 * n : i === e.length - 1 ? 920 * n : s.data.images.length > 0 ? (Cfe(s.data.style, s.data.images, t) + 80) * n : xfe[s.data.style] * n, [n, e.length, t]);
        return VK(s, e, 1);
      }(i, t);
      const o = function (e, t) {
        const n = Vm();
        0;
        return Y.useCallback(s => {
          if (0 === s) {
            0;
            return z.jsx("div", {
              style: Ife
            }, "start");
          }
          if (s === e.length - 1) {
            0;
            return z.jsx("div", {
              style: yfe
            }, "end");
          }
          const i = e[s];
          if (i.data.images.length > 0) {
            const e = Cfe(i.data.style, i.data.images, t);
            0;
            return z.jsx("div", {
              className: gfe.imageLine,
              style: {
                height: (e + 80) * n
              },
              children: i.data.images.map((e, s) => {
                const a = Nfe(i.data.style, e, t);
                0;
                return z.jsx("img", {
                  src: e,
                  width: a.x * n,
                  height: a.y * n,
                  className: gfe.image
                }, s);
              })
            }, s);
          }
          0;
          return z.jsx("div", {
            className: Qu()(Efe[i.data.style], jfe(i.source)),
            style: {
              height: xfe[i.data.style] * n
            },
            children: i.data.node
          }, s);
        }, [t, e, n]);
      }(i, t);
      const {
        list: r,
        onScroll: l
      } = UK(s, a, "vertical", undefined, o);
      const c = Vm();
      0;
      const u = Y.useMemo(() => performance.now(), []);
      0;
      Y.useEffect(() => {
        if (!s.current) {
          return;
        }
        let e = 0;
        const t = i => {
          if (!s.current) {
            return;
          }
          const a = (i - u) / 1e3;
          const o = Math.round(100 * a * c);
          const r = s.current.scrollHeight - s.current.offsetHeight;
          s.current.scrollTop = o;
          l();
          if (o < r) {
            e = window.requestAnimationFrame(t);
          } else {
            n();
          }
        };
        e = window.requestAnimationFrame(t);
        return () => window.cancelAnimationFrame(e);
      }, [l, n, c, u]);
      0;
      return z.jsx("div", {
        ref: s,
        className: gfe.creditsRenderer,
        onScroll: l,
        children: r
      });
    };
    const xfe = [32, 160, 80, 68, 32, 32, 32];
    const vfe = [240, 720, 480, 312, 240, 240, 240];
    const Efe = [gfe.line, gfe.h1, gfe.h2, gfe.h3, gfe.line, gfe.line, gfe.line];
    const Ife = {
      height: `${700}rem`
    };
    const yfe = {
      height: `${920}rem`
    };
    function Sfe(e) {
      return {
        height: `${e}rem`
      };
    }
    function jfe(e) {
      if ("Licenses" === e) {
        return gfe.licenses;
      }
    }
    function Cfe(e, t, n) {
      let s = 0;
      for (const i of t) s = Math.max(s, Nfe(e, i, n).y);
      return s;
    }
    function Nfe(e, t, n) {
      const s = n.get(t);
      const i = vfe[e];
      if (null != s && s.width > 0 && s.height > 0) {
        const e = Math.sqrt(i * i / (s.width * s.height));
        return {
          x: e * s.width,
          y: e * s.height
        };
      }
      return {
        x: vfe[e],
        y: vfe[e]
      };
    }
    X.add("game-ui/menu/components/credits-screen/credits-renderer/credits-renderer.tsx", {
      get CreditsRenderer() {
        return ffe;
      },
      set CreditsRenderer(e) {
        ffe = e;
      }
    });
    let wfe = {
      content: "content_qY6 child-opacity-transition_nkS"
    };
    X.add("game-ui/menu/components/credits-screen/credits-screen.module.scss", {
      get classes() {
        return wfe;
      },
      set classes(e) {
        Object.assign(wfe, e);
      }
    });
    var Pfe = 150;
    var Lfe = 250;
    var Afe = Y.forwardRef(function ({
      focusKey: e,
      className: t,
      onClose: n
    }, s) {
      const i = function (e) {
        0;
        const [t, n] = Y.useState(null);
        const s = Array.isArray(e) ? e : [e];
        0;
        Y.useEffect(() => {
          let e = 0;
          const t = [];
          const i = s.map((i, a) => Rfe(i, i => {
            t[a] = i;
            e++;
            if (e === s.length) {
              n(t.flat());
            }
          }));
          return () => {
            i.forEach(e => e());
          };
        }, [s.join(" ")]);
        return t;
      }(sl(Rk));
      const a = function (e) {
        0;
        const [t, n] = Y.useState(null);
        0;
        Y.useEffect(() => {
          let t = 0;
          const s = new Map();
          const i = () => {
            t++;
            if (t === s.size) {
              n(s);
            }
          };
          if (null != e) {
            for (const t of e) for (const e of t.data.images) if (!s.has(e)) {
              const t = new Image();
              t.src = e;
              t.addEventListener("load", i);
              t.addEventListener("error", i);
              s.set(e, t);
            }
          }
          if (0 === s.size) {
            n(s);
          }
          return () => {
            for (const e of s.values()) {
              e.removeEventListener("load", i);
              e.removeEventListener("error", i);
            }
          };
        }, [e]);
        return t;
      }(i);
      0;
      0;
      0;
      return z.jsx(xz, {
        ref: s,
        focusKey: e,
        title: z.jsx(Pc.Menu.CREDITS, {}),
        className: t,
        onClose: n,
        children: z.jsx("div", {
          className: wfe.content,
          children: i?.length && null != a && (0, z.jsx)(ffe, {
            lines: i,
            images: a,
            onComplete: n
          })
        })
      });
    });
    const Mfe = /(\w+[/])*(?<name>\w+)\.\w+$/;
    const Rfe = (e, t) => {
      const n = new XMLHttpRequest();
      n.open("GET", e);
      n.onload = function () {
        const s = new Gy();
        const i = yb(n.responseText, true, true, Lfe, Pfe);
        const a = Mfe.exec(e);
        const o = a && a.groups ? a.groups.name : e;
        const r = i.map(e => ({
          data: s.render(e),
          source: o
        }));
        t(r);
      };
      n.send();
      return () => {
        n.abort();
      };
    };
    X.add("game-ui/menu/components/credits-screen/credits-screen.tsx", {
      get longCreditLineLength() {
        return Pfe;
      },
      set longCreditLineLength(e) {
        Pfe = e;
      },
      get maxCreditLineLength() {
        return Lfe;
      },
      set maxCreditLineLength(e) {
        Lfe = e;
      },
      get CreditsScreen() {
        return Afe;
      },
      set CreditsScreen(e) {
        Afe = e;
      }
    });
    let kfe = {
      logo: "logo_xOs child-opacity-transition_nkS",
      content: "content_LhM",
      column: "column_y44",
      panel: "panel_H2O child-opacity-transition_nkS",
      "paradox-panel": "paradox-panel_t14 child-opacity-transition_nkS",
      paradoxPanel: "paradox-panel_t14 child-opacity-transition_nkS",
      "notifications-panel": "notifications-panel_c5F child-opacity-transition_nkS",
      notificationsPanel: "notifications-panel_c5F child-opacity-transition_nkS",
      "button-label-left": "button-label-left_YKT",
      buttonLabelLeft: "button-label-left_YKT",
      "button-label-right": "button-label-right_ZdY",
      buttonLabelRight: "button-label-right_ZdY"
    };
    X.add("game-ui/menu/components/main-menu-screen/main-menu-screen.module.scss", {
      get classes() {
        return kfe;
      },
      set classes(e) {
        Object.assign(kfe, e);
      }
    });
    0;
    0;
    0;
    const Ffe = z.jsx(LI, {
      title: z.jsx(Pc.Common.CONFIRMATION, {}),
      message: z.jsx(Pc.Menu.APPLICATION_QUIT_MESSAGE, {}),
      onConfirm: () => wE()
    });
    var Ufe = e => (0, z.jsx)("div", {
      className: kfe.column,
      children: e.children
    });
    var Bfe = Y.forwardRef(function ({
      focusKey: e,
      className: t
    }, n) {
      0;
      const s = Y.useContext(lE);
      const i = sl(pk);
      const a = sl(Mk);
      const o = sl(bk);
      const r = sl(Ck);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(z.Fragment, {
        children: z.jsxs(SX, {
          ref: n,
          focusKey: e,
          className: t,
          children: [z.jsx("img", {
            src: "Media/Menu/GameLogo.svg",
            className: kfe.logo
          }), z.jsxs(ep, {
            children: [z.jsxs("div", {
              className: kfe.content,
              children: [z.jsx("div", {
                className: kfe.column
              }), z.jsx(ep, {
                allowLooping: true,
                direction: Mg.Vertical,
                children: z.jsxs(Ufe, {
                  children: [z.jsx(RI, {
                    tinted: true,
                    disabled: !i,
                    src: "Media/Glyphs/ArrowRight.svg",
                    theme: BI,
                    onSelect: Fk,
                    children: z.jsx(Pc.Menu.CONTINUE_GAME, {})
                  }), z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Plus.svg",
                    theme: BI,
                    onSelect: () => Dk(uk.NewGame),
                    children: z.jsx(Pc.Menu.NEW_GAME, {})
                  }), z.jsx(RI, {
                    tinted: true,
                    disabled: 0 === a.length,
                    src: "Media/Glyphs/Progress.svg",
                    theme: BI,
                    onSelect: () => Dk(uk.LoadGame),
                    children: z.jsx(Pc.Menu.LOAD_GAME, {})
                  }), !o && (0, z.jsxs)(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Pen.svg",
                    theme: BI,
                    onSelect: Wk,
                    children: [(0, z.jsx)("div", {
                      className: kfe.buttonLabelLeft,
                      children: (0, z.jsx)(Pc.Menu.EDITOR, {})
                    }), (0, z.jsx)("div", {
                      className: kfe.buttonLabelRight,
                      children: (0, z.jsx)(PX, {})
                    })]
                  }), z.jsx(Gfe, {
                    fallbackToLogin: true
                  }), z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Gear.svg",
                    theme: BI,
                    onSelect: () => Dk(uk.Options),
                    children: z.jsx(Pc.Menu.OPTIONS, {})
                  }), z.jsx(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Credits.svg",
                    theme: BI,
                    onSelect: () => Dk(uk.Credits),
                    children: z.jsx(Pc.Menu.CREDITS, {})
                  }), r && (0, z.jsx)(RI, {
                    tinted: true,
                    src: "Media/Glyphs/Close.svg",
                    theme: BI,
                    onSelect: () => s.showDialog(Ffe),
                    children: (0, z.jsx)(Pc.Menu.EXIT_APPLICATION, {})
                  })]
                })
              }), z.jsxs("div", {
                className: kfe.column,
                children: [z.jsx(efe, {
                  className: kfe.paradoxPanel
                }), z.jsx(Pse, {
                  className: kfe.notificationsPanel
                })]
              }), z.jsx("div", {
                className: kfe.column
              })]
            }), z.jsx(YZ, {
              name: "Menu"
            })]
          })]
        })
      });
    });
    var Gfe = ({
      fallbackToLogin: e
    }) => {
      const t = sl(qE);
      const n = sl(tI);
      const s = sl(nI);
      const i = sl(_k);
      const a = function (e, t, n) {
        return e ? t ? n ? null : (0, z.jsx)(Pc.Paradox.NO_INTERNET_CONNECTION, {}) : (0, z.jsx)(Pc.Paradox.UGC_DISABLED, {}) : (0, z.jsx)(Pc.Paradox.SDK_DISABLED, {});
      }(s, i, n);
      const o = sl(Tk);
      0;
      return z.jsx(z.Fragment, {
        children: !o && (0, z.jsx)(bg, {
          tooltip: a,
          children: (0, z.jsxs)(RI, {
            tinted: true,
            src: "Media/Glyphs/ParadoxMods.svg",
            theme: BI,
            disabled: !i || !s || !e && !t,
            onSelect: Yk,
            children: [(0, z.jsx)("div", {
              className: kfe.buttonLabelLeft,
              children: (0, z.jsx)(Pc.Menu.PDX_MODS, {})
            }), (0, z.jsx)("div", {
              className: kfe.buttonLabelRight,
              children: (0, z.jsx)(PX, {})
            })]
          })
        })
      });
    };
    X.add("game-ui/menu/components/main-menu-screen/main-menu-screen.tsx", {
      get MainMenuNavigation() {
        return Ufe;
      },
      set MainMenuNavigation(e) {
        Ufe = e;
      },
      get MainMenuScreen() {
        return Bfe;
      },
      set MainMenuScreen(e) {
        Bfe = e;
      },
      get ModsUIButton() {
        return Gfe;
      },
      set ModsUIButton(e) {
        Gfe = e;
      }
    });
    let Vfe = {
      "user-switch-prompt": "user-switch-prompt_UJI",
      userSwitchPrompt: "user-switch-prompt_UJI",
      avatar: "avatar_MH0",
      label: "label_deh",
      action: "action_J_6"
    };
    X.add("game-ui/menu/components/user-switch-prompt/user-switch-prompt.module.scss", {
      get classes() {
        return Vfe;
      },
      set classes(e) {
        Object.assign(Vfe, e);
      }
    });
    var Wfe = ({
      className: e
    }) => {
      const t = km();
      const n = sl(Fp);
      const s = sl(Up);
      const [i, a] = function (e) {
        0;
        const [t, n] = Y.useState(null);
        0;
        Y.useEffect(() => n(t => e !== t ? null : e), [e]);
        const s = null !== e && e !== t ? e : "Media/AvatarFallback.svg";
        0;
        const i = Y.useCallback(() => e !== "Media/AvatarFallback.svg" && n(e), [e]);
        return [s, i];
      }(n);
      0;
      0;
      0;
      return z.jsxs(L_, {
        focusKey: Eg,
        className: Qu()(Vfe.userSwitchPrompt, e),
        onSelect: Gp,
        children: [z.jsx("img", {
          src: i || undefined,
          onError: a,
          className: Vfe.avatar
        }), z.jsx("div", {
          className: Vfe.label,
          children: Vr(s) ? (0, z.jsx)(Pc.Menu.SWITCH_USER, {}) : s
        }), t && (0, z.jsx)(fT, {
          specifiedActions: ["Switch User"],
          labels: false,
          buttonAs: "div"
        })]
      });
    };
    X.add("game-ui/menu/components/user-switch-prompt/user-switch-prompt.tsx", {
      get UserSwitchPrompt() {
        return Wfe;
      },
      set UserSwitchPrompt(e) {
        Wfe = e;
      }
    });
    let zfe = {
      "menu-ui": "menu-ui_I8X menu-theme_k91",
      menuUi: "menu-ui_I8X menu-theme_k91",
      "content-container": "content-container_DDJ",
      contentContainer: "content-container_DDJ",
      content: "content_fc3",
      "action-hints": "action-hints_qUT child-opacity-transition_nkS",
      actionHints: "action-hints_qUT child-opacity-transition_nkS",
      version: "version_VJt",
      corner: "corner_Uxw",
      "bp-indicator": "bp-indicator_E_n",
      bpIndicator: "bp-indicator_E_n",
      "user-switch-prompt": "user-switch-prompt_m_H",
      userSwitchPrompt: "user-switch-prompt_m_H"
    };
    X.add("game-ui/menu/components/menu-ui.module.scss", {
      get classes() {
        return zfe;
      },
      set classes(e) {
        Object.assign(zfe, e);
      }
    });
    var qfe;
    var Xfe = $r("whatsnew", "panel");
    var Qfe = $r("whatsnew", "visible");
    var Zfe = $r("whatsnew", "initialTab");
    var Jfe = el("whatsnew", "close");
    !function (e) {
      e[e.Left = 0] = "Left";
      e[e.Center = 1] = "Center";
      e[e.Right = 2] = "Right";
    }(qfe || (qfe = {}));
    X.add("game-ui/menu/data-binding/whats-new-bindings.ts", {
      get whatsNewPanel() {
        return whatsNewPanel;
      },
      set whatsNewPanel(e) {
        whatsNewPanel = e;
      },
      get whatsNewPanelVisible() {
        return whatsNewPanelVisible;
      },
      set whatsNewPanelVisible(e) {
        whatsNewPanelVisible = e;
      },
      get whatsNewPanelInitialTab() {
        return whatsNewPanelInitialTab;
      },
      set whatsNewPanelInitialTab(e) {
        whatsNewPanelInitialTab = e;
      },
      get closeWhatsNewPanel() {
        return Jfe;
      },
      set closeWhatsNewPanel(e) {
        Jfe = e;
      },
      get Justify() {
        return qfe;
      },
      set Justify(e) {
        qfe = e;
      }
    });
    let exe = {
      "page-switcher": "page-switcher_dTl",
      pageSwitcher: "page-switcher_dTl",
      page: "page_pOh"
    };
    X.add("game-ui/common/animations/paging/page-switcher.module.scss", {
      get classes() {
        return exe;
      },
      set classes(e) {
        Object.assign(exe, e);
      }
    });
    var nxe = Y.createContext(null);
    var sxe = Y.createContext(null);
    const ixe = Y.forwardRef(function ({
      activePage: e,
      transitionStyles: t,
      className: n,
      children: s
    }, i) {
      0;
      const a = Y.useRef({
        activePage: e,
        previousPage: e
      });
      if (a.current.activePage !== e) {
        a.current = {
          activePage: e,
          previousPage: a.current.activePage
        };
      }
      const o = a.current.previousPage;
      0;
      const r = Y.useMemo(() => ({
        activePage: e,
        previousPage: o,
        transitionStyles: t
      }), [e, o, t]);
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx("div", {
        ref: i,
        className: Qu()(exe.pageSwitcher, n),
        children: z.jsx(nxe.Provider, {
          value: r,
          children: z.jsx(ip, {
            focused: e,
            children: z.jsx(cd, {
              children: z.jsx(sxe.Provider, {
                value: e,
                children: z.jsx(sp, {
                  focusKey: e,
                  children: s
                })
              }, e)
            })
          })
        })
      });
    });
    var axe;
    !function (e) {
      e[e.None = 0] = "None";
      e[e.Previous = 1] = "Previous";
      e[e.Next = 2] = "Next";
    }(axe || (axe = {}));
    const oxe = ({
      className: e,
      children: t,
      ...n
    }) => {
      0;
      const s = Y.useContext(nxe);
      0;
      const i = Y.useContext(sxe);
      0;
      const a = Y.useMemo(() => null == s || null == i ? axe.None : s.activePage === i ? s.previousPage > i ? axe.Previous : axe.Next : s.previousPage === i ? s.activePage > i ? axe.Previous : axe.Next : axe.None, [s, i]);
      0;
      0;
      return z.jsx(dh, {
        styles: a !== axe.None && null != s ? s.transitionStyles : null,
        children: z.jsx("div", {
          ...n,
          className: Qu()(exe.page, e, a === axe.Previous && s?.transitionStyles?.previous, a === axe.Next && s?.transitionStyles?.next),
          children: t
        })
      });
    };
    X.add("game-ui/common/animations/paging/page-switcher.tsx", {
      get PageSwitcher() {
        return ixe;
      },
      set PageSwitcher(e) {
        ixe = e;
      },
      get Page() {
        return oxe;
      },
      set Page(e) {
        oxe = e;
      }
    });
    let rxe = {
      enter: "enter_bXD",
      "enter-active": "enter-active_vgh",
      enterActive: "enter-active_vgh",
      exit: "exit_XFe",
      "exit-active": "exit-active_BSo",
      exitActive: "exit-active_BSo",
      previous: "previous_IPO",
      next: "next_K_o"
    };
    X.add("game-ui/common/animations/paging/transitions/horizontal-transition.module.scss", {
      get classes() {
        return rxe;
      },
      set classes(e) {
        Object.assign(rxe, e);
      }
    });
    let cxe = {
      "dlc-selector": "dlc-selector_tES",
      dlcSelector: "dlc-selector_tES",
      button: "button_Sv_",
      header: "header_fRa",
      icon: "icon_m9v",
      title: "title_eie",
      page: "page_dx1",
      "page-content": "page-content_glG",
      pageContent: "page-content_glG",
      spacer: "spacer_YWX"
    };
    X.add("game-ui/menu/components/whats-new-panel/dlc-selector/dlc-selector.module.scss", {
      get classes() {
        return cxe;
      },
      set classes(e) {
        Object.assign(cxe, e);
      }
    });
    var dxe = FT({
      ArrowLeft: "Media/Glyphs/ThickStrokeArrowLeft.svg",
      ArrowRight: "Media/Glyphs/ThickStrokeArrowRight.svg"
    });
    var mxe = ({
      selected: e,
      onSelect: t
    }) => {
      const n = Xfe.value[e].dlc;
      0;
      const s = Y.useCallback(() => {
        t(Math.max(0, e - 1));
      }, [t, e]);
      0;
      const i = Y.useCallback(() => {
        t(Math.min(Xfe.value.length - 1, e + 1));
      }, [t, e]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Ep, {
        className: cxe.dlcSelector,
        children: [Xfe.value.length > 1 && (0, z.jsx)($_, {
          focusKey: Eg,
          tinted: true,
          disabled: 0 === e,
          src: dxe.ArrowLeft,
          className: cxe.button,
          onSelect: s
        }), z.jsx("div", {
          className: cxe.spacer
        }), z.jsx(ixe, {
          transitionStyles: rxe,
          className: cxe.header,
          activePage: e,
          children: z.jsx(oxe, {
            className: cxe.page,
            children: z.jsxs("div", {
              className: cxe.pageContent,
              children: [z.jsx(B_, {
                src: `Media/DLC/${n}.svg`,
                className: cxe.icon
              }), z.jsx("div", {
                className: cxe.title,
                children: z.jsx(Pc.Common.DLC_TITLE, {
                  hash: n
                })
              })]
            })
          })
        }), Xfe.value.length > 1 && (0, z.jsx)($_, {
          focusKey: Eg,
          tinted: true,
          disabled: e === Xfe.value.length - 1,
          src: dxe.ArrowRight,
          className: cxe.button,
          onSelect: i
        })]
      });
    };
    X.add("game-ui/menu/components/whats-new-panel/dlc-selector/dlc-selector.tsx", {
      get images() {
        return dxe;
      },
      set images(e) {
        dxe = e;
      },
      get DlcSelector() {
        return mxe;
      },
      set DlcSelector(e) {
        mxe = e;
      }
    });
    let hxe = {
      "page-selector": "page-selector_JA1",
      pageSelector: "page-selector_JA1",
      toggle: "toggle_nf2"
    };
    X.add("game-ui/menu/components/whats-new-panel/page-selector/page-selector.module.scss", {
      get classes() {
        return hxe;
      },
      set classes(e) {
        Object.assign(hxe, e);
      }
    });
    var pxe = ({
      pages: e,
      selected: t,
      onSelect: n
    }) => (0, z.jsx)("div", {
      className: hxe.pageSelector,
      children: e > 1 && Array.from({
        length: e
      }, (e, s) => (0, z.jsx)(P8, {
        focusKey: Eg,
        checked: t === s,
        className: hxe.toggle,
        onChange: () => n(s)
      }, s))
    });
    X.add("game-ui/menu/components/whats-new-panel/page-selector/page-selector.tsx", {
      get PageSelector() {
        return pxe;
      },
      set PageSelector(e) {
        pxe = e;
      }
    });
    let fxe = {
      "whats-new-page": "whats-new-page_s08",
      whatsNewPage: "whats-new-page_s08",
      scrollable: "scrollable_xNZ",
      item: "item_ze5",
      images: "images_cAd",
      text: "text_pzC",
      title: "title_kTI",
      "sub-title": "sub-title_ltz",
      subTitle: "sub-title_ltz",
      paragraphs: "paragraphs_pOF",
      paragraphsLeft: "paragraphsLeft_AkP",
      paragraphsRight: "paragraphsRight_HVa",
      paragraphsCenter: "paragraphsCenter_PXp"
    };
    X.add("game-ui/menu/components/whats-new-panel/whats-new-page/whats-new-page.module.scss", {
      get classes() {
        return fxe;
      },
      set classes(e) {
        Object.assign(fxe, e);
      }
    });
    var vxe = ({
      page: e
    }) => {
      const t = km();
      0;
      0;
      return z.jsx(oxe, {
        className: fxe.whatsNewPage,
        children: z.jsx(ab, {
          className: fxe.scrollable,
          autoScroll: t,
          children: e.items?.map((e, t) => (0, z.jsx)(_xe, {
            item: e
          }, t))
        })
      });
    };
    const _xe = ({
      item: e
    }) => (0, z.jsxs)("div", {
      className: fxe.item,
      style: {
        alignItems: e.justify === qfe.Left ? "flex-start" : e.justify === qfe.Right ? "flex-end" : "center"
      },
      children: [e.images?.length > 0 && (0, z.jsx)("div", {
        className: fxe.images,
        children: e.images.map((t, n) => (0, z.jsx)(B_, {
          src: t.image,
          className: fxe.image,
          style: {
            marginLeft: e.justify === qfe.Right ? "2%" : e.justify === qfe.Left ? undefined : "1%",
            marginRight: e.justify === qfe.Left ? "2%" : e.justify === qfe.Right ? undefined : "1%",
            width: `${t.width}%`,
            "--w": t.aspectRatio.x,
            "--h": t.aspectRatio.y
          }
        }, n))
      }), e.title && (0, z.jsx)("div", {
        className: Qu()(fxe.title, fxe.text, fxe.heading),
        children: (0, z.jsx)(Tc, {
          id: e.title
        })
      }), e.subtitle && (0, z.jsx)("div", {
        className: Qu()(fxe.subTitle, fxe.text, fxe.heading),
        children: (0, z.jsx)(Tc, {
          id: e.subtitle
        })
      }), e.paragraphs && (0, z.jsx)("div", {
        className: Qu()(fxe.paragraphs, fxe.text),
        children: (0, z.jsx)(bb, {
          className: Qu()(e.justify === qfe.Left ? fxe.paragraphsLeft : e.justify === qfe.Right ? fxe.paragraphsRight : fxe.paragraphsCenter),
          children: (0, z.jsx)(Tc, {
            id: e.paragraphs
          })
        })
      })]
    });
    function bxe(e, t) {
      return {
        marginLeft: e === qfe.Right ? "2%" : e === qfe.Left ? undefined : "1%",
        marginRight: e === qfe.Left ? "2%" : e === qfe.Right ? undefined : "1%",
        width: `${t.width}%`,
        "--w": t.aspectRatio.x,
        "--h": t.aspectRatio.y
      };
    }
    X.add("game-ui/menu/components/whats-new-panel/whats-new-page/whats-new-page.tsx", {
      get WhatsNewPage() {
        return vxe;
      },
      set WhatsNewPage(e) {
        vxe = e;
      }
    });
    let Txe = {
      "whats-new-tab": "whats-new-tab_F6q",
      whatsNewTab: "whats-new-tab_F6q",
      fadeIn: "fadeIn_VdL"
    };
    X.add("game-ui/menu/components/whats-new-panel/whats-new-tab/whats-new-tab.module.scss", {
      get classes() {
        return Txe;
      },
      set classes(e) {
        Object.assign(Txe, e);
      }
    });
    var Ixe = ({
      tab: e,
      selectedPage: t
    }) => (0, z.jsx)(ixe, {
      activePage: t,
      transitionStyles: rxe,
      className: Txe.whatsNewTab,
      children: (0, z.jsx)(vxe, {
        page: e.pages[t]
      })
    }, e.id);
    X.add("game-ui/menu/components/whats-new-panel/whats-new-tab/whats-new-tab.tsx", {
      get WhatsNewTab() {
        return Ixe;
      },
      set WhatsNewTab(e) {
        Ixe = e;
      }
    });
    let yxe = {
      layout: "layout_Wtx",
      "whats-new-panel": "whats-new-panel_hJt menu-theme_k91",
      whatsNewPanel: "whats-new-panel_hJt menu-theme_k91",
      "button-container": "button-container_iYr",
      buttonContainer: "button-container_iYr",
      button: "button__xS",
      dismiss: "dismiss_Z9k",
      checkbox: "checkbox_WJa",
      label: "label_Zni"
    };
    X.add("game-ui/menu/components/whats-new-panel/whats-new-panel.module.scss", {
      get classes() {
        return yxe;
      },
      set classes(e) {
        Object.assign(yxe, e);
      }
    });
    const jxe = new Tg("CHILDREN");
    const Cxe = new Tg("WHATS_NEW_KEY");
    const Nxe = new Tg("OK");
    const wxe = new Tg("DISMISS");
    var Oxe = ({
      children: e
    }) => {
      const t = sl(Xfe);
      const n = sl(Zfe);
      const s = km();
      0;
      const [i, a] = Y.useState(n);
      0;
      const [o, r] = Y.useState(0);
      0;
      const [l, c] = Y.useState(false);
      const u = sl(Qfe) && t.length > 0;
      0;
      const d = Y.useCallback(() => Jfe(l), [l]);
      let m;
      m = u ? Cxe : jxe;
      0;
      const h = Y.useMemo(() => ({
        "Switch Slide": t?.length > 0 && t[i].pages?.length > 1 ? e => {
          if (e < 0 && o > 0) {
            rp(op.selectPreviousItem);
            r(Math.max(0, o - 1));
          } else if (e > 0 && o < Xfe.value[i].pages.length - 1) {
            rp(op.selectNextItem);
            r(Math.min(Xfe.value[i].pages.length - 1, o + 1));
          }
        } : null,
        "Switch DLC": t?.length > 1 ? e => {
          if (e < 0 && i > 0) {
            rp(op.selectPreviousItem);
            r(0);
            a(Math.max(0, i - 1));
          } else if (e > 0 && i < Xfe.value.length - 1) {
            rp(op.selectNextItem);
            r(0);
            a(Math.min(Xfe.value.length - 1, i + 1));
          }
        } : null
      }), [o, i, t]);
      0;
      const g = Y.useCallback(e => {
        r(0);
        a(e);
      }, []);
      0;
      const p = Y.useCallback(e => {
        if (e.deltaY < 0) {
          rp(op.selectPreviousItem);
          r(Math.max(0, o - 1));
        } else if (e.deltaY > 0) {
          rp(op.selectNextItem);
          r(Math.min(Xfe.value[i].pages.length - 1, o + 1));
        }
      }, [o, i]);
      0;
      0;
      return z.jsxs(ip, {
        focused: m,
        children: [z.jsx(sp, {
          focusKey: jxe,
          children: e
        }), u && (0, z.jsx)(sp, {
          focusKey: Cxe,
          children: (0, z.jsx)(t_, {
            children: (0, z.jsx)(kg, {
              onAction: d,
              children: (0, z.jsx)(Lg, {
                actions: h,
                children: (0, z.jsx)(Ip, {
                  children: (0, z.jsx)(dh, {
                    styles: L6,
                    children: (0, z.jsxs)("div", {
                      className: yxe.layout,
                      children: [(0, z.jsx)(Tp, {
                        onWheel: p,
                        className: yxe.whatsNewPanel,
                        children: (0, z.jsxs)(ep, {
                          direction: Mg.Horizontal,
                          initialFocused: Nxe,
                          children: [(0, z.jsx)(mxe, {
                            selected: i,
                            onSelect: g
                          }), (0, z.jsx)(Ixe, {
                            tab: t[i],
                            selectedPage: o
                          }), (0, z.jsx)(Tp, {
                            className: yxe.buttonContainer,
                            children: (0, z.jsx)(L_, {
                              focusKey: Nxe,
                              theme: DE,
                              onSelect: d,
                              className: yxe.button,
                              children: (0, z.jsx)(Pc.Common.OK, {})
                            })
                          }), (0, z.jsx)(pxe, {
                            selected: o,
                            onSelect: r,
                            pages: t[i].pages?.length
                          }), (0, z.jsxs)(Tp, {
                            className: yxe.dismiss,
                            children: [(0, z.jsx)(kb, {
                              focusKey: wxe,
                              checked: l,
                              onChange: c,
                              className: yxe.checkbox
                            }), (0, z.jsx)("div", {
                              className: yxe.label,
                              children: (0, z.jsx)(Pc.Common.DONT_SHOW_AGAIN, {})
                            })]
                          })]
                        })
                      }), s && (0, z.jsx)(fT, {
                        className: zfe.actionHints
                      })]
                    })
                  })
                })
              })
            })
          })
        })]
      });
    };
    X.add("game-ui/menu/components/whats-new-panel/whats-new-panel.tsx", {
      get WhatsNewPanel() {
        return Oxe;
      },
      set WhatsNewPanel(e) {
        Oxe = e;
      }
    });
    var Pxe = () => {
      const e = sl(gk);
      const t = sl(hk);
      const n = sl(Dp);
      0;
      const s = Y.useCallback(() => Dk(uk.Menu), []);
      0;
      const i = Y.useContext(lE);
      0;
      Y.useEffect(() => {
        const e = yE.subscribe(e => {
          0;
          i.showDialog(z.jsx(OI, {
            ...e
          }));
        });
        return () => e.dispose();
      }, [i]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Oxe, {
        children: z.jsx(eq, {
          children: z.jsx(hfe, {
            children: z.jsx(SQ, {
              children: z.jsxs("div", {
                className: zfe.menuUi,
                children: [z.jsx("div", {
                  className: zfe.contentContainer,
                  children: z.jsxs(Lh, {
                    children: [z.jsx("div", {
                      className: zfe.content,
                      children: z.jsx(ip, {
                        focused: t,
                        activation: $u.Always,
                        children: z.jsxs(cd, {
                          children: [t === uk.Menu && (0, z.jsx)(Bfe, {
                            focusKey: uk.Menu
                          }, uk.Menu), t === uk.NewGame && (0, z.jsx)(l8, {
                            focusKey: uk.NewGame,
                            onClose: s
                          }, uk.NewGame), t === uk.LoadGame && (0, z.jsx)(a9, {
                            focusKey: uk.LoadGame,
                            onClose: s
                          }, uk.LoadGame), t === uk.Options && (0, z.jsx)(UZ, {
                            focusKey: uk.Options,
                            onClose: s
                          }, uk.Options), t === uk.Credits && (0, z.jsx)(Afe, {
                            focusKey: uk.Credits,
                            onClose: s
                          }, uk.Credits)]
                        })
                      })
                    }), z.jsx(Axe, {}), z.jsx(Lxe, {})]
                  })
                }), z.jsx("div", {
                  className: zfe.version,
                  children: e
                }), z.jsxs("div", {
                  className: zfe.corner,
                  children: [n && (0, z.jsx)(Wfe, {
                    className: zfe.userSwitchPrompt
                  }), z.jsx(G0, {
                    className: zfe.bpIndicator
                  })]
                })]
              })
            })
          })
        })
      });
    };
    const Lxe = () => {
      0;
      const e = Nh(Y.useContext(Zu));
      Hp(!e);
      Kp(!e);
      return null;
    };
    const Axe = () => {
      0;
      const e = Nh(Y.useContext(Zu));
      return km() ? (0, z.jsx)(fT, {
        disabled: !e,
        className: zfe.actionHints
      }) : null;
    };
    X.add("game-ui/menu/components/menu-ui.tsx", {
      get MenuUI() {
        return Pxe;
      },
      set MenuUI(e) {
        Pxe = e;
      }
    });
    let Mxe = {
      "engagement-screen": "engagement-screen_EQg",
      engagementScreen: "engagement-screen_EQg",
      pulse: "pulse_kns",
      icon: "icon_D4A"
    };
    X.add("game-ui/overlay/engagement-screen/engagement-screen.module.scss", {
      get classes() {
        return Mxe;
      },
      set classes(e) {
        Object.assign(Mxe, e);
      }
    });
    var kxe = () => {
      const e = Dxe();
      0;
      return z.jsx(vT, {
        className: Mxe.engagementScreen,
        disabled: true,
        children: e
      });
    };
    const Dxe = () => {
      const e = km();
      0;
      const t = oc(z.jsx(Pc.Overlay.ENGAGEMENT_PROMPT_KEYBOARD, {}));
      0;
      const n = oc(z.jsx(Pc.Overlay.ENGAGEMENT_PROMPT_GAMEPAD, {}));
      0;
      return Y.useMemo(() => e ? Fxe(n, "<KEY>", (0, z.jsx)(LT, {
        action: "Select",
        className: Mxe.icon
      })) : t, [e, n, t]);
    };
    const Fxe = (e, t, n) => {
      const s = e.indexOf(t);
      return s >= 0 ? (0, z.jsxs)(z.Fragment, {
        children: [e.substring(0, s), n, e.substring(s + t.length)]
      }) : e;
    };
    X.add("game-ui/overlay/engagement-screen/engagement-screen.tsx", {
      get Engagement() {
        return kxe;
      },
      set Engagement(e) {
        kxe = e;
      }
    });
    let Uxe = {
      "overlay-action": "overlay-action_CD_",
      overlayAction: "overlay-action_CD_",
      icon: "icon_Cu3",
      "action-hints": "action-hints_TjM",
      actionHints: "action-hints_TjM"
    };
    X.add("game-ui/overlay/overlay-actions/action/overlay-action.module.scss", {
      get classes() {
        return Uxe;
      },
      set classes(e) {
        Object.assign(Uxe, e);
      }
    });
    var Gxe = ({
      displayButtonHints: e = true,
      text: t,
      className: n
    }) => (0, z.jsxs)("div", {
      className: Qu()(Uxe.overlayAction, n),
      children: [e ? (0, z.jsx)(fT, {
        className: Uxe.actionHints
      }) : null, t]
    });
    X.add("game-ui/overlay/overlay-actions/action/overlay-action.tsx", {
      get OverlayAction() {
        return Gxe;
      },
      set OverlayAction(e) {
        Gxe = e;
      }
    });
    let Vxe = {
      "overlay-actions": "overlay-actions_epi",
      overlayActions: "overlay-actions_epi"
    };
    X.add("game-ui/overlay/overlay-actions/overlay-actions.module.scss", {
      get classes() {
        return Vxe;
      },
      set classes(e) {
        Object.assign(Vxe, e);
      }
    });
    var Kxe = ({
      className: e,
      children: t
    }) => (0, z.jsx)("div", {
      className: Qu()(Vxe.overlayActions, e),
      children: t
    });
    X.add("game-ui/overlay/overlay-actions/overlay-actions.tsx", {
      get OverlayActions() {
        return Kxe;
      },
      set OverlayActions(e) {
        Kxe = e;
      }
    });
    let Wxe = {
      "overlay-content": "overlay-content_AYd",
      overlayContent: "overlay-content_AYd",
      content: "content_HTa"
    };
    X.add("game-ui/overlay/overlay-content/overlay-content.module.scss", {
      get classes() {
        return Wxe;
      },
      set classes(e) {
        Object.assign(Wxe, e);
      }
    });
    var Yxe = ({
      actions: e,
      className: t,
      children: n
    }) => (0, z.jsxs)("div", {
      className: Qu()(Wxe.overlayContent, t),
      children: [(0, z.jsx)("div", {
        className: Wxe.content,
        children: n
      }), e && e]
    });
    X.add("game-ui/overlay/overlay-content/overlay-content.tsx", {
      get OverlayScreen() {
        return Yxe;
      },
      set OverlayScreen(e) {
        Yxe = e;
      }
    });
    let $xe = {
      "overlay-text": "overlay-text_AzR",
      overlayText: "overlay-text_AzR"
    };
    X.add("game-ui/overlay/overlay-text/overlay-text.module.scss", {
      get classes() {
        return $xe;
      },
      set classes(e) {
        Object.assign($xe, e);
      }
    });
    var Xxe = ({
      className: e,
      children: t
    }) => (0, z.jsx)("div", {
      className: Qu()($xe.overlayText, e),
      children: t
    });
    X.add("game-ui/overlay/overlay-text/overlay-text.tsx", {
      get OverlayText() {
        return Xxe;
      },
      set OverlayText(e) {
        Xxe = e;
      }
    });
    var Qxe = () => {
      0;
      0;
      const e = jE(pE.PS, z.jsx(Pc.Overlay.CONTROLLER_DISCONNECTED_PS, {}), z.jsx(Pc.Overlay.CONTROLLER_DISCONNECTED, {}));
      0;
      0;
      0;
      0;
      return z.jsx(Yxe, {
        actions: z.jsx(Kxe, {
          children: z.jsx(Gxe, {})
        }),
        children: z.jsx(Xxe, {
          children: e
        })
      });
    };
    X.add("game-ui/overlay/logo-screen/controller-disconnected.tsx", {
      get ControllerDisconnected() {
        return Qxe;
      },
      set ControllerDisconnected(e) {
        Qxe = e;
      }
    });
    var Zxe = () => {
      0;
      0;
      const e = jE(pE.PS, z.jsx(Pc.Overlay.CONTROLLER_PAIRING_CHANGED_PS, {}), z.jsx(Pc.Overlay.CONTROLLER_PAIRING_CHANGED, {}));
      0;
      0;
      0;
      0;
      0;
      return z.jsx(Yxe, {
        actions: z.jsx(Kxe, {
          children: z.jsx(Gxe, {})
        }),
        children: z.jsxs(Xxe, {
          children: [e, z.jsx(Pc.Overlay.SWITCH_USER, {})]
        })
      });
    };
    X.add("game-ui/overlay/logo-screen/controller-pairing-changed.tsx", {
      get ControllerPairingChanged() {
        return Zxe;
      },
      set ControllerPairingChanged(e) {
        Zxe = e;
      }
    });
    let Jxe = {
      title: "title_oqw",
      messages: "messages_v_4",
      message: "message_LOu"
    };
    X.add("game-ui/overlay/logo-screen/corrupt-save-data/corrupt-save-data.module.scss", {
      get classes() {
        return Jxe;
      },
      set classes(e) {
        Object.assign(Jxe, e);
      }
    });
    var tve = () => {
      const e = sl(dz);
      0;
      const t = Y.useRef(null);
      const n = Vm();
      0;
      Y.useEffect(() => {
        const e = performance.now();
        let s = 0;
        const i = a => {
          if (!t.current) {
            return;
          }
          const o = t.current.scrollHeight;
          t.current.scrollTop = .08 * (a - e) * n % (o / 2);
          s = window.requestAnimationFrame(i);
        };
        s = window.requestAnimationFrame(i);
        return () => window.cancelAnimationFrame(s);
      }, [n]);
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      0;
      return z.jsxs(Yxe, {
        actions: z.jsx(Kxe, {
          children: z.jsx(Gxe, {
            displayButtonHints: false,
            text: z.jsx(Pc.Overlay.PRESS_ANY_KEY_ACTION, {})
          })
        }),
        children: [z.jsxs(Xxe, {
          children: [z.jsx(Pc.Overlay.CORRUPT_SAVE_DATA, {}), z.jsx("div", {
            className: Jxe.title,
            children: z.jsx(Pc.Overlay.DELETED_ITEMS, {})
          })]
        }), z.jsx("div", {
          ref: t,
          className: Jxe.messages,
          children: e?.map((e, t) => (0, z.jsx)("div", {
            className: Jxe.message,
            children: e
          }, t))
        })]
      });
    };
    X.add("game-ui/overlay/logo-screen/corrupt-save-data/corrupt-save-data.tsx", {
      get CorruptSaveData() {
        return tve;
      },
      set CorruptSaveData(e) {
        tve = e;
      }
    });
    const nve = {
      tension: 30,
      friction: 10
    };
    var sve = ({
      size: e,
      lineWidth: t,
      progress: n,
      progressColors: s,
      className: i
    }) => {
      const a = wd(WY(nve, n[0], 0), .01, 1);
      const o = wd(WY(nve, n[1], 0), .01, 1);
      const r = wd(WY(nve, n[2], 0), .01, 1);
      const l = n.length > 0 ? n.reduce((e, t) => e + t) / n.length : 0;
      const c = Vm();
      const u = e * c;
      const d = Math.ceil(u);
      0;
      const m = Y.useRef(null);
      0;
      Y.useEffect(() => {
        if (!m.current) {
          return;
        }
        const e = m.current.getContext("2d");
        e.clearRect(0, 0, d, d);
        let n = .5 * d - t * c;
        const i = .5 * d;
        e.lineCap = "round";
        e.lineWidth = t * c;
        const l = [a, o, r];
        for (let a = 0; a < l.length; ++a) {
          e.beginPath();
          const o = a * Math.PI;
          e.arc(i, i, n, o, o + 2 * l[a] * Math.PI);
          e.strokeStyle = s[a];
          e.stroke();
          n -= (t + 2) * c;
        }
      }, [d, t, s, c, a, o, r]);
      0;
      0;
      return z.jsx("div", {
        children: z.jsx("canvas", {
          ref: m,
          width: d,
          height: d,
          className: i,
          style: {
            width: u,
            height: u,
            opacity: wd(20 * l, 0, 1)
          }
        })
      });
    };
    X.add("game-ui/overlay/logo-screen/loading/loading-progress.tsx", {
      get LoadingProgress() {
        return sve;
      },
      set LoadingProgress(e) {
        sve = e;
      }
    });
    let ive = {
      "overlay-loading": "overlay-loading_xAc",
      overlayLoading: "overlay-loading_xAc",
      title: "title_xw2",
      progress: "progress_xKD",
      hint: "hint_KWz"
    };
    X.add("game-ui/overlay/logo-screen/loading/loading.module.scss", {
      get classes() {
        return ive;
      },
      set classes(e) {
        Object.assign(ive, e);
      }
    });
    const ove = ["#E1F8FF", "#84E2FF", "#12C8FF"];
    var rve = () => {
      const e = sl(cz);
      const t = sl(uz);
      0;
      const [n, s] = Y.useState(0);
      0;
      Y.useEffect(() => {
        s(Math.floor(Math.random() * t.length));
        const e = window.setInterval(() => {
          s(Math.floor(Math.random() * t.length));
        }, 1e4);
        return () => {
          window.clearInterval(e);
        };
      }, [t.length]);
      0;
      0;
      0;
      0;
      0;
      return z.jsxs("div", {
        className: ive.overlayLoading,
        children: [z.jsx("div", {
          className: ive.title,
          children: z.jsx(Pc.Loading.LOADING_TITLE, {})
        }), z.jsx(sve, {
          progress: e,
          progressColors: ove,
          size: 128,
          lineWidth: 8,
          className: ive.progress
        }), z.jsx("div", {
          className: ive.hint,
          children: t.length > n && (0, z.jsx)(Tc, {
            id: t[n]
          })
        })]
      });
    };
    X.add("game-ui/overlay/logo-screen/loading/loading.tsx", {
      get LoadingScreen() {
        return rve;
      },
      set LoadingScreen(e) {
        rve = e;
      }
    });
    let lve = {
      enter: "enter_Hgx",
      "enter-active": "enter-active_hYc",
      enterActive: "enter-active_hYc",
      exit: "exit_mhm",
      "exit-active": "exit-active_via",
      exitActive: "exit-active_via"
    };
    X.add("game-ui/overlay/transitions/screen.module.scss", {
      get classes() {
        return lve;
      },
      set classes(e) {
        Object.assign(lve, e);
      }
    });
    let uve = {
      "logo-screen": "logo-screen_KLI",
      logoScreen: "logo-screen_KLI",
      logo: "logo_IpH",
      content: "content_sOm"
    };
    X.add("game-ui/overlay/logo-screen/logo-screen.module.scss", {
      get classes() {
        return uve;
      },
      set classes(e) {
        Object.assign(uve, e);
      }
    });
    var mve = ({
      children: e
    }) => (0, z.jsx)(dh, {
      styles: lve,
      children: (0, z.jsxs)("div", {
        className: uve.logoScreen,
        children: [(0, z.jsx)("img", {
          src: "Media/Menu/GameLogo.svg",
          className: uve.logo
        }), (0, z.jsx)("div", {
          className: uve.content,
          children: e
        })]
      })
    });
    X.add("game-ui/overlay/logo-screen/logo-screen.tsx", {
      get LogoScreen() {
        return mve;
      },
      set LogoScreen(e) {
        mve = e;
      }
    });
    var hve = () => (0, z.jsx)(Yxe, {
      children: (0, z.jsxs)(Xxe, {
        children: [(0, z.jsx)(Pc.Overlay.USER_LOGGED_OUT, {}), (0, z.jsx)(Pc.Overlay.PLEASE_LOG_IN, {})]
      })
    });
    X.add("game-ui/overlay/logo-screen/user-logged-out.tsx", {
      get UserLoggedOut() {
        return hve;
      },
      set UserLoggedOut(e) {
        hve = e;
      }
    });
    var gve = () => (0, z.jsx)(Yxe, {
      actions: (0, z.jsx)(Kxe, {
        children: (0, z.jsx)(Gxe, {})
      }),
      children: (0, z.jsx)(Xxe, {
        children: (0, z.jsx)(Pc.Overlay.VALIDATION, {})
      })
    });
    X.add("game-ui/overlay/logo-screen/validation.tsx", {
      get Validation() {
        return gve;
      },
      set Validation(e) {
        gve = e;
      }
    });
    var pve = () => (0, z.jsx)(Yxe, {
      children: (0, z.jsx)(Xxe, {
        children: (0, z.jsx)(Pc.Overlay.PLEASE_WAIT, {})
      })
    });
    X.add("game-ui/overlay/logo-screen/wait.tsx", {
      get Wait() {
        return pve;
      },
      set Wait(e) {
        pve = e;
      }
    });
    let fve = {
      "splash-screen": "splash-screen_vso",
      splashScreen: "splash-screen_vso",
      "step-container": "step-container_CQz",
      stepContainer: "step-container_CQz",
      enter: "enter_A2e",
      "enter-active": "enter-active_IRn",
      enterActive: "enter-active_IRn",
      exit: "exit_qYD",
      "exit-active": "exit-active_Fge",
      exitActive: "exit-active_Fge",
      logo: "logo_ceO",
      splashLogoScale: "splashLogoScale_CGf",
      "splash3-container": "splash3-container_iqq",
      splash3Container: "splash3-container_iqq",
      "legal-text": "legal-text_p0a",
      legalText: "legal-text_p0a",
      "disclaimer-text": "disclaimer-text_uUS",
      disclaimerText: "disclaimer-text_uUS",
      "coherent-logo": "coherent-logo_ykj logo_ceO",
      coherentLogo: "coherent-logo_ykj logo_ceO",
      "didimo-logo": "didimo-logo_ar3 logo_ceO",
      didimoLogo: "didimo-logo_ar3 logo_ceO",
      "instalod-logo": "instalod-logo_Iyq logo_ceO",
      instalodLogo: "instalod-logo_Iyq logo_ceO",
      "unity-logo": "unity-logo_WZ0 logo_ceO",
      unityLogo: "unity-logo_WZ0 logo_ceO",
      "colossal-logo": "colossal-logo_gge logo_ceO",
      colossalLogo: "colossal-logo_gge logo_ceO",
      "paradox-logo": "paradox-logo_FKO logo_ceO",
      paradoxLogo: "paradox-logo_FKO logo_ceO",
      "sega-logo": "sega-logo_yCR logo_ceO",
      segaLogo: "sega-logo_yCR logo_ceO"
    };
    X.add("game-ui/overlay/splash-screen/splash-screen.module.scss", {
      get classes() {
        return fve;
      },
      set classes(e) {
        Object.assign(fve, e);
      }
    });
    var vve = ({
      screen: e
    }) => (0, z.jsx)(dh, {
      styles: lve,
      children: (0, z.jsx)("div", {
        className: fve.splashScreen,
        children: (0, z.jsx)(cd, {
          skipInitial: false,
          children: (0, z.jsx)(dh, {
            styles: fve,
            children: (0, z.jsxs)("div", {
              className: fve.stepContainer,
              children: [e === rz.Splash1 && (0, z.jsx)("img", {
                src: "Media/Menu/ParadoxLogo.svg",
                className: fve.paradoxLogo
              }), e === rz.Splash2 && (0, z.jsx)("img", {
                src: "Media/Menu/ColossalLogo.svg",
                className: fve.colossalLogo
              }), e === rz.Splash3 && (0, z.jsx)("img", {
                src: "Media/Menu/SegaLogo.svg",
                className: fve.segaLogo
              }), e === rz.Splash4 && (0, z.jsxs)(z.Fragment, {
                children: [(0, z.jsxs)("div", {
                  className: fve.splash3Container,
                  children: [(0, z.jsx)("img", {
                    src: "Media/Menu/CL_logo_full_horizontal_white.svg",
                    className: fve.coherentLogo
                  }), (0, z.jsx)("img", {
                    src: "Media/Menu/InstaLOD-Logo-BW-WhiteOnBlack.svg",
                    className: fve.instalodLogo
                  }), (0, z.jsx)("img", {
                    src: "Media/Menu/U_Logo_MadeWith_RichBlack_Knockout_RGB.svg",
                    className: fve.unityLogo
                  }), (0, z.jsx)("img", {
                    src: "Media/Menu/Didimo_logo_White_Flat.svg",
                    className: fve.didimoLogo
                  })]
                }), (0, z.jsxs)("div", {
                  className: fve.legalText,
                  children: [(0, z.jsx)("p", {
                    children: "Cities: Skylines II uses Coherent Labs user interface technology. Copyright © 2012-2024 Coherent Labs. All Rights Reserved."
                  }), (0, z.jsx)("p", {
                    children: "Cities: Skylines II uses Didimo Popul8™ characters technology. Copyright © 2023 Didimo, Inc. All Rights Reserved."
                  }), (0, z.jsx)("p", {
                    children: "Cities: Skylines II uses InstaLOD. Copyright © 2016-2024 InstaLOD GmbH. All Rights Reserved."
                  }), (0, z.jsx)("p", {
                    children: "Powered by the Unity Engine. Copyright © 2024 Unity Technologies. All Rights Reserved."
                  })]
                })]
              }), e === rz.PiracyDisclaimer && (0, z.jsxs)("div", {
                className: fve.disclaimerText,
                children: [(0, z.jsx)("p", {
                  children: "＜ご注意＞"
                }), (0, z.jsx)("p", {
                  children: "ゲームソフトを権利者の許諾なく、インターネットを通じて配信、"
                }), (0, z.jsx)("p", {
                  children: "配布する行為、また、違法なインターネット配信と知りながら"
                }), (0, z.jsx)("p", {
                  children: "ダウンロードする行為は、法律で固く禁じられております。"
                }), (0, z.jsx)("p", {
                  children: "みなさまのご理解とご協力をお願いいたします。"
                })]
              }), e === rz.PhotosensitivityDisclaimer && (0, z.jsxs)("div", {
                className: fve.disclaimerText,
                children: [(0, z.jsx)("p", {
                  children: "このゲームには、画面の点滅やフラッシュ効果などを利用した演出が登場します。"
                }), (0, z.jsx)("p", {
                  children: "ごくまれに、強い光の刺激や点滅、テレビ画面などを見ていて、"
                }), (0, z.jsx)("p", {
                  children: "一時的に筋肉のけいれん、意識の喪失などの症状を起こす人がいます。"
                }), (0, z.jsx)("p", {
                  children: "こうした経験のある方は、このソフトをプレイする前に必ず医師と相談してください。"
                }), (0, z.jsx)("p", {
                  children: "また、プレイ中にこのような症状が起きた時はすぐにプレイをやめ、"
                }), (0, z.jsx)("p", {
                  children: "医師の診察を受けてください。"
                })]
              })]
            })
          }, e)
        })
      })
    });
    X.add("game-ui/overlay/splash-screen/splash-screen.tsx", {
      get SplashScreen() {
        return vve;
      },
      set SplashScreen(e) {
        vve = e;
      }
    });
    let _ve = {
      "overlay-ui": "overlay-ui_UIz",
      overlayUi: "overlay-ui_UIz",
      "exit-active": "exit-active_iXm",
      exitActive: "exit-active_iXm"
    };
    X.add("game-ui/overlay/overlay-ui.module.scss", {
      get classes() {
        return _ve;
      },
      set classes(e) {
        Object.assign(_ve, e);
      }
    });
    const Tve = [rz.Engagement, rz.Wait, rz.Validation, rz.Splash1, rz.Splash2, rz.Splash3, rz.Splash4, rz.None, rz.PiracyDisclaimer, rz.PhotosensitivityDisclaimer];
    var Eve = ({
      forcedScreen: e,
      uiReady: t
    }) => {
      const n = sl(lz);
      let s = e || n;
      const i = s !== rz.None;
      if (!(t || Tve.includes(s))) {
        s = rz.Loading;
      }
      Rq();
      0;
      0;
      0;
      0;
      return z.jsx(py, {
        in: i,
        children: z.jsx(dh, {
          styles: _ve,
          children: z.jsx("div", {
            className: _ve.overlayUi,
            children: z.jsx(cd, {
              children: Ive(s)
            })
          })
        })
      });
    };
    function Ive(e) {
      switch (e) {
        case rz.Splash1:
        case rz.Splash2:
        case rz.Splash3:
        case rz.Splash4:
        case rz.PiracyDisclaimer:
        case rz.PhotosensitivityDisclaimer:
          0;
          return z.jsx(vve, {
            screen: e
          }, "splashScreen");
        case rz.None:
          return null;
        default:
          0;
          0;
          return z.jsx(mve, {
            children: z.jsx(cd, {
              children: yve(e)
            })
          }, "logoScreen");
      }
    }
    function yve(e) {
      switch (e) {
        case rz.Loading:
          0;
          return z.jsx(rve, {}, rz[rz.Loading]);
        case rz.Engagement:
          0;
          return z.jsx(kxe, {}, rz[rz.Engagement]);
        case rz.Wait:
          0;
          return z.jsx(pve, {}, rz[rz.Wait]);
        case rz.Validation:
          0;
          return z.jsx(gve, {}, rz[rz.Validation]);
        case rz.ControllerDisconnected:
          0;
          return z.jsx(Qxe, {}, rz[rz.ControllerDisconnected]);
        case rz.ControllerPairingChanged:
          0;
          return z.jsx(Zxe, {}, rz[rz.ControllerPairingChanged]);
        case rz.UserLoggedOut:
          0;
          return z.jsx(hve, {}, rz[rz.UserLoggedOut]);
        case rz.CorruptSaveData:
          0;
          return z.jsx(tve, {}, rz[rz.CorruptSaveData]);
        default:
          return null;
      }
    }
    X.add("game-ui/overlay/overlay-ui.tsx", {
      get OverlayUI() {
        return Eve;
      },
      set OverlayUI(e) {
        Eve = e;
      },
      get renderLogoScreenContent() {
        return yve;
      },
      set renderLogoScreenContent(e) {
        yve = e;
      }
    });
    const Sve = () => {
      const e = sl(xE);
      const t = (() => {
        const e = sl(ME);
        0;
        const [t, n] = Y.useState(false);
        0;
        const [s, i] = Y.useState(tA);
        0;
        Y.useEffect(() => {
          let t = 0;
          let s = e?.length || 0;
          if (e && e.length) {
            (async function () {
              const a = [];
              const o = () => {
                t++;
                if (t === s && s > 0) {
                  sA(a);
                  i(a);
                  n(true);
                }
              };
              e.forEach(e => {
                if (nA.has(e)) {
                  return o();
                }
                nA.add(e);
                import(e).then(t => {
                  a.push(t.default);
                  if (t.hasCSS) {
                    s++;
                    const t = e.replace(".mjs", ".css");
                    if (nA.has(t)) {
                      o();
                    } else {
                      nA.add(t);
                      eA(t, o);
                    }
                  }
                  o();
                }).catch(e => {
                  o();
                });
              });
            })();
          } else {
            sA(tA);
            i(tA);
            n(true);
          }
        }, [e]);
        return {
          ready: t,
          registry: s,
          mods: e
        };
      })();
      const n = t.ready ? e : null;
      0;
      0;
      return z.jsxs(Fq, {
        children: [n && (0, z.jsx)(Mq, {
          activeUiClassName: String(n).toLowerCase(),
          children: "Menu" === n ? (0, z.jsx)(Pxe, {}) : "Game" === n ? (0, z.jsx)(lfe, {}) : "Editor" === n && (0, z.jsx)(Wpe, {})
        }), z.jsx(Eve, {
          uiReady: !!n
        }, "overlayUI")]
      });
    };
    let jve = {
      "app-container": "app-container_Y5l",
      appContainer: "app-container_Y5l"
    };
    X.add("game-ui/common/app/app-container.module.scss", {
      get classes() {
        return jve;
      },
      set classes(e) {
        Object.assign(jve, e);
      }
    });
    function Nve() {
      const e = document.createElement("div");
      e.className = jve.appContainer;
      document.body.appendChild(e);
      return e;
    }
    X.add("game-ui/common/app/app-container.ts", {
      get createAppContainer() {
        return Nve;
      },
      set createAppContainer(e) {
        Nve = e;
      }
    });
    Rr().whenReady.then(() => {
      function e(e) {
        if (e) {
          t.dispose();
          (function () {
            0;
            const e = Q.createRoot(Nve());
            0;
            e.render(z.jsx(Sve, {}));
          })();
        }
      }
      const t = fE.subscribe(e);
      e(t.value);
    });
    X.add("game-ui/index.tsx", {});
  })();
})();